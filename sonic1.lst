00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dVLowTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	dc.b		$E1, val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm_Options:	equ ((ptr_mus98-MusicIndex)/4)+bgm__First
00000000                            bgm_ToxicLandfill:	equ ((ptr_mus99-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Duck3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_Balance5:	equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_skele3:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 4EB9 0000 0000             		jsr		ReadJoypads
00000394 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000398 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039C 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003A0 4E90                       		jsr		(a0)
000003A2 60EA                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            
000003A4                            GameModeArray:
000003A4 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
000003A8 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
000003AC 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
000003B0 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
000003B4 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
000003B8 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
000003BC 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
000003C0 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
000003C4 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
000003C8 4E75                       		rts	
000003CA                            ; ===========================================================================
000003CA                            
000003CA                            CheckSumError:
000003CA 6100 0000                  		bsr.w	VDPSetupGame
000003CE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D8 7E3F                       		moveq	#$3F,d7
000003DA                            
000003DA                            	@fillred:
000003DA 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003E2 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E6                            
000003E6                            	@endlessloop:
000003E6 60FE                       		bra.s	@endlessloop
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            loc_43A:
000003E8 46FC 2700                  		disable_ints
000003EC 544F                       		addq.w	#2,sp
000003EE 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003F2 544F                       		addq.w	#2,sp
000003F4 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003FA 6100 0000                  		bsr.w	ShowErrorMessage
000003FE 202F 0002                  		move.l	2(sp),d0
00000402 6100 0000                  		bsr.w	ShowErrorValue
00000406 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000040A 6100 0000                  		bsr.w	ShowErrorValue
0000040E 6000                       		bra.s	loc_478
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_462:
00000410 46FC 2700                  		disable_ints
00000414 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000041A 6100 0000                  		bsr.w	ShowErrorMessage
0000041E 202F 0002                  		move.l	2(sp),d0
00000422 6100 0000                  		bsr.w	ShowErrorValue
00000426                            
00000426                            loc_478:
00000426 6100 0000                  		bsr.w	ErrorWaitForC
0000042A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000430 46FC 2300                  		enable_ints
00000434 4E73                       		rte	
00000436                            
00000436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000436                            
00000436                            
00000436                            ShowErrorMessage:
00000436 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00000446 41F9 0000 0000             		lea	(Art_Text).l,a0
0000044C 323C 027F                  		move.w	#$27F,d1
00000450                            	@loadgfx:
00000450 3C98                       		move.w	(a0)+,(a6)
00000452 51C9 FFFC                  		dbf	d1,@loadgfx
00000456                            
00000456 7000                       		moveq	#0,d0		; clear	d0
00000458 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
0000045C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000460 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000046E 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000470                            
00000470                            	@showchars:
00000470 7000                       		moveq	#0,d0
00000472 1018                       		move.b	(a0)+,d0
00000474 0640 0790                  		addi.w	#$790,d0
00000478 3C80                       		move.w	d0,(a6)
0000047A 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
0000047E 4E75                       		rts	
00000480                            ; End of function ShowErrorMessage
00000480                            
00000480                            ; ===========================================================================
00000480 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000484 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
00000488 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
0000048C 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000490 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000494 0000                       		dc.w @line1111-ErrorText
00000496 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
000004A9 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004BC 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004CF 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004E2 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004F5 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000508 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000051B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000052E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000541 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000554 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
00000568 00                         		even
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            ShowErrorValue:
00000568 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
0000056C 7407                       		moveq	#7,d2
0000056E                            
0000056E                            	@loop:
0000056E E998                       		rol.l	#4,d0
00000570 6100                       		bsr.s	@shownumber	; display 8 numbers
00000572 51CA FFFA                  		dbf	d2,@loop
00000576 4E75                       		rts	
00000578                            ; End of function ShowErrorValue
00000578                            
00000578                            
00000578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000578                            
00000578                            
00000578                            @shownumber:
00000578 3200                       		move.w	d0,d1
0000057A 0241 000F                  		andi.w	#$F,d1
0000057E 0C41 000A                  		cmpi.w	#$A,d1
00000582 6500                       		blo.s	@chars0to9
00000584 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
00000586                            
00000586                            	@chars0to9:
00000586 0641 07C0                  		addi.w	#$7C0,d1
0000058A 3C81                       		move.w	d1,(a6)
0000058C 4E75                       		rts	
0000058E                            ; End of function sub_5CA
0000058E                            
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ErrorWaitForC:
0000058E 6100 0000                  		bsr.w	ReadJoypads
00000592 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
00000598 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000059C 4E75                       		rts	
0000059E                            ; End of function ErrorWaitForC
0000059E                            
0000059E                            ; ===========================================================================
0000059E                            
0000059E                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000ABE                            		even
00000ABE                            
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            ; Vertical interrupt
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            
00000ABE                            VBlank:
00000ABE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AC2 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000AC6 6700                       		beq.s	VBla_00
00000AC8 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000ACE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000AD8 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AE0 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000AE6 6700                       		beq.s	@notPAL		; if not, branch
00000AE8                            
00000AE8 303C 0700                  		move.w	#$700,d0
00000AEC                            	@waitPAL:
00000AEC 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AF0                            
00000AF0                            	@notPAL:
00000AF0 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AF4 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AFA 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000B00 0240 003E                  		andi.w	#$3E,d0
00000B04 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000B08 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B0C                            
00000B0C                            VBla_Music:
00000B0C 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B12                            
00000B12                            VBla_Exit:
00000B12 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B16 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B1A 4E73                       		rte	
00000B1C                            ; ===========================================================================
00000B1C 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B20 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B24 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B28 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B2C 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B30 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B34 0000                       		dc.w VBla_0C-VBla_Index
00000B36                            ; ===========================================================================
00000B36                            
00000B36                            VBla_00:
00000B36 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B3C 6700                       		beq.s	@islevel
00000B3E 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B44 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B48                            
00000B48                            	@islevel:
00000B48 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B4E 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B52                            
00000B52 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B58 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B5E 6700                       		beq.s	@notPAL		; if not, branch
00000B60                            
00000B60 303C 0700                  		move.w	#$700,d0
00000B64                            	@waitPAL:
00000B64 51C8 FFFE                  		dbf	d0,@waitPAL
00000B68                            
00000B68                            	@notPAL:
00000B68 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B6E 33FC 0100 00A1 1100        		stopZ80
00000B76 0839 0000 00A1 1100 66F6   		waitZ80
00000B80 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B84 6600                       		bne.s	@waterabove 	; if yes, branch
00000B86                            
00000B86 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000BAA 6000                       		bra.s	@waterbelow
00000BAC                            
00000BAC                            @waterabove:
00000BAC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BD0                            
00000BD0                            	@waterbelow:
00000BD0 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BD4 33FC 0000 00A1 1100        		startZ80
00000BDC 6000 FF2E                  		bra.w	VBla_Music
00000BE0                            ; ===========================================================================
00000BE0                            
00000BE0                            VBla_02:
00000BE0 6100 0000                  		bsr.w	sub_106E
00000BE4                            
00000BE4                            VBla_14:
00000BE4 4A78 F614                  		tst.w	(v_demolength).w
00000BE8 6700 0000                  		beq.w	@end
00000BEC 5378 F614                  		subq.w	#1,(v_demolength).w
00000BF0                            
00000BF0                            	@end:
00000BF0 4E75                       		rts	
00000BF2                            ; ===========================================================================
00000BF2                            
00000BF2                            VBla_04:
00000BF2 6100 0000                  		bsr.w	sub_106E
00000BF6 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BFA 4EB9 0000 0000             		jsr 	ProcessDMAQueue		
00000C00 6100 0000                  		bsr.w	sub_1642
00000C04 4A78 F614                  		tst.w	(v_demolength).w
00000C08 6700 0000                  		beq.w	@end
00000C0C 5378 F614                  		subq.w	#1,(v_demolength).w
00000C10                            
00000C10                            	@end:
00000C10 4E75                       		rts	
00000C12                            ; ===========================================================================
00000C12                            
00000C12                            VBla_06:
00000C12 6100 0000                  		bsr.w	sub_106E
00000C16 4E75                       		rts	
00000C18                            ; ===========================================================================
00000C18                            
00000C18                            VBla_10:
00000C18 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C1E 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C22                            
00000C22                            VBla_08:
00000C22 33FC 0100 00A1 1100        		stopZ80
00000C2A 0839 0000 00A1 1100 66F6   		waitZ80
00000C34 6100 0000                  		bsr.w	ReadJoypads
00000C38 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C3C 6600                       		bne.s	@waterabove
00000C3E                            
00000C3E 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C62 6000                       		bra.s	@waterbelow
00000C64                            
00000C64                            @waterabove:
00000C64 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C88                            
00000C88                            	@waterbelow:
00000C88 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C8C                            
00000C8C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000CB0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CD4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CDA                            
00000CDA                            	@nochg:
00000CDA 33FC 0000 00A1 1100        		startZ80
00000CE2 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CE8 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CEE 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CF4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CFA 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000D00 6400                       		bhs.s	Demo_Time
00000D02 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D08 588F                       		addq.l	#4,sp
00000D0A 6000 FE06                  		bra.w	VBla_Exit
00000D0E                            
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            ; Subroutine to	run a demo for an amount of time
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            
00000D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D0E                            
00000D0E                            
00000D0E                            Demo_Time:
00000D0E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D12 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D18 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D1E 6100 0000                  		bsr.w	ProcessDPLC2
00000D22 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D26 6700 0000                  		beq.w	@end		; if not, branch
00000D2A 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D2E                            
00000D2E                            	@end:
00000D2E 4E75                       		rts	
00000D30                            ; End of function Demo_Time
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            
00000D30                            VBla_0A:
00000D30 33FC 0100 00A1 1100        		stopZ80
00000D38 0839 0000 00A1 1100 66F6   		waitZ80
00000D42 6100 0000                  		bsr.w	ReadJoypads
00000D46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D6A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D8E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DB2 33FC 0000 00A1 1100        		startZ80
00000DBA 6100 0000                  		bsr.w	PalCycle_SS
00000DBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DC4                            
00000DC4                            	@nochg:
00000DC4 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DC8 6700 0000                  		beq.w	@end	; if not, return
00000DCC 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DD0                            
00000DD0                            	@end:
00000DD0 4E75                       		rts	
00000DD2                            ; ===========================================================================
00000DD2                            
00000DD2                            VBla_0C:
00000DD2 33FC 0100 00A1 1100        		stopZ80
00000DDA 0839 0000 00A1 1100 66F6   		waitZ80
00000DE4 6100 0000                  		bsr.w	ReadJoypads
00000DE8 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DEC 6600                       		bne.s	@waterabove
00000DEE                            
00000DEE 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E12 6000                       		bra.s	@waterbelow
00000E14                            
00000E14                            @waterabove:
00000E14 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E38                            
00000E38                            	@waterbelow:
00000E38 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E3C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E60 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E84 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E8A                            
00000E8A                            	@nochg:
00000E8A 33FC 0000 00A1 1100        		startZ80
00000E92 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E98 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E9E 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000EA4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000EAA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000EAE 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EB4 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EBA 6100 0000                  		bsr.w	sub_1642
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            VBla_0E:
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EC8 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000ECE 4E75                       		rts	
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            VBla_12:
00000ED0 6100 0000                  		bsr.w	sub_106E
00000ED4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ED8 6000 0000                  		bra.w	sub_1642
00000EDC                            ; ===========================================================================
00000EDC                            
00000EDC                            VBla_16:
00000EDC 33FC 0100 00A1 1100        		stopZ80
00000EE4 0839 0000 00A1 1100 66F6   		waitZ80
00000EEE 6100 0000                  		bsr.w	ReadJoypads
00000EF2 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F16 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F3A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000F5E 33FC 0000 00A1 1100        		startZ80
00000F66 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F6C                            	@nochg:
00000F6C 4A78 F614                  		tst.w	(v_demolength).w
00000F70 6700 0000                  		beq.w	@end
00000F74 5378 F614                  		subq.w	#1,(v_demolength).w
00000F78                            
00000F78                            	@end:
00000F78 4E75                       		rts	
00000F7A                            
00000F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F7A                            
00000F7A                            
00000F7A                            sub_106E:
00000F7A 33FC 0100 00A1 1100        		stopZ80
00000F82 0839 0000 00A1 1100 66F6   		waitZ80
00000F8C 6100 0000                  		bsr.w	ReadJoypads
00000F90 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F94 6600                       		bne.s	@waterabove	; if yes, branch
00000F96 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000FBA 6000                       		bra.s	@waterbelow
00000FBC                            
00000FBC                            	@waterabove:
00000FBC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000FE0                            
00000FE0                            	@waterbelow:
00000FE0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001004 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00001028 33FC 0000 00A1 1100        		startZ80
00001030 4E75                       		rts	
00001032                            ; End of function sub_106E
00001032                            
00001032                            ; ---------------------------------------------------------------------------
00001032                            ; Horizontal interrupt
00001032                            ; ---------------------------------------------------------------------------
00001032                            
00001032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001032                            
00001032                            
00001032                            HBlank:
00001032 46FC 2700                  		disable_ints
00001036 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
0000103A 6700                       		beq.s	@nochg		; if not, branch
0000103C 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00001042 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001046 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000104C 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001050 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001058 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 2298                       		move.l	(a0)+,(a1)
0000108A 2298                       		move.l	(a0)+,(a1)
0000108C 2298                       		move.l	(a0)+,(a1)
0000108E 2298                       		move.l	(a0)+,(a1)
00001090 2298                       		move.l	(a0)+,(a1)
00001092 2298                       		move.l	(a0)+,(a1)
00001094 2298                       		move.l	(a0)+,(a1)
00001096 2298                       		move.l	(a0)+,(a1)
00001098 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000109E 4CDF 0300                  		movem.l	(sp)+,a0-a1
000010A2 4A38 F64F                  		tst.b	($FFFFF64F).w
000010A6 6600                       		bne.s	loc_119E
000010A8                            
000010A8                            	@nochg:
000010A8 4E73                       		rte	
000010AA                            ; ===========================================================================
000010AA                            
000010AA                            loc_119E:
000010AA 4238 F64F                  		clr.b	($FFFFF64F).w
000010AE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010B2 6100 FC5A                  		bsr.w	Demo_Time
000010B6 4EB9 0000 0000             		jsr	(UpdateMusic).l
000010BC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010C0 4E73                       		rte	
000010C2                            ; End of function HBlank
000010C2                            
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            ; Subroutine to	initialise joypads
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            
000010C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010C2                            
000010C2                            
000010C2                            JoypadInit:
000010C2 33FC 0100 00A1 1100        		stopZ80
000010CA 0839 0000 00A1 1100 66F6   		waitZ80
000010D4 7040                       		moveq	#$40,d0
000010D6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010DC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010E2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
000010E8 33FC 0000 00A1 1100        		startZ80
000010F0 4E75                       		rts	
000010F2                            ; End of function JoypadInit
000010F2                            
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; Subroutine to	read joypad input, and send it to the RAM
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F2                            
000010F2                            
000010F2                            ReadJoypads:
000010F2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010F6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010FC 6100                       		bsr.s	@read		; do the first joypad
000010FE 5449                       		addq.w	#2,a1		; do the second	joypad
00001100                            
00001100                            	@read:
00001100 12BC 0000                  		move.b	#0,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1011                       		move.b	(a1),d0
0000110A E508                       		lsl.b	#2,d0
0000110C 0200 00C0                  		andi.b	#$C0,d0
00001110 12BC 0040                  		move.b	#$40,(a1)
00001114 4E71                       		nop	
00001116 4E71                       		nop	
00001118 1211                       		move.b	(a1),d1
0000111A 0201 003F                  		andi.b	#$3F,d1
0000111E 8001                       		or.b	d1,d0
00001120 4600                       		not.b	d0
00001122 1210                       		move.b	(a0),d1
00001124 B101                       		eor.b	d0,d1
00001126 10C0                       		move.b	d0,(a0)+
00001128 C200                       		and.b	d0,d1
0000112A 10C1                       		move.b	d1,(a0)+
0000112C 4E75                       		rts	
0000112E                            ; End of function ReadJoypads
0000112E                            
0000112E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000112E                            
0000112E                            
0000112E                            VDPSetupGame:
0000112E 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00001134 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000113A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001140 7E12                       		moveq	#$12,d7
00001142                            
00001142                            	@setreg:
00001142 309A                       		move.w	(a2)+,(a0)
00001144 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
00001148                            
00001148 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000114E 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001152 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001158 7000                       		moveq	#0,d0
0000115A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001164 3E3C 003F                  		move.w	#$3F,d7
00001168                            
00001168                            	@clrCRAM:
00001168 3280                       		move.w	d0,(a1)
0000116A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000116E                            
0000116E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001172 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001176 2F01                       		move.l	d1,-(sp)
00001178 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000119A                            
0000119A                            	@waitforDMA:
0000119A 3215                       		move.w	(a5),d1
0000119C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
000011A0 66F8                       		bne.s	@waitforDMA	; if yes, branch
000011A2                            
000011A2 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
000011A6 221F                       		move.l	(sp)+,d1
000011A8 4E75                       		rts	
000011AA                            ; End of function VDPSetupGame
000011AA                            
000011AA                            ; ===========================================================================
000011AA 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
000011AC 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
000011AE 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
000011B0 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
000011B2 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
000011B4 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
000011B6 8600                       		dc.w $8600		; unused
000011B8 8700                       		dc.w $8700		; set background colour (palette entry 0)
000011BA 8800                       		dc.w $8800		; unused
000011BC 8900                       		dc.w $8900		; unused
000011BE 8A00                       		dc.w $8A00		; default H.interrupt register
000011C0 8B00                       		dc.w $8B00		; full-screen vertical scrolling
000011C2 8C81                       		dc.w $8C81		; 40-cell display mode
000011C4 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
000011C6 8E00                       		dc.w $8E00		; unused
000011C8 8F02                       		dc.w $8F02		; set VDP increment size
000011CA 9001                       		dc.w $9001		; 64-cell hscroll size
000011CC 9100                       		dc.w $9100		; window horizontal position
000011CE 9200                       		dc.w $9200		; window vertical position
000011D0                            
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            ; Subroutine to	clear the screen
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            
000011D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011D0                            
000011D0                            
000011D0                            ClearScreen:
000011D0 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011F2                            
000011F2                            	@wait1:
000011F2 3215                       		move.w	(a5),d1
000011F4 0801 0001                  		btst	#1,d1
000011F8 66F8                       		bne.s	@wait1
000011FA                            
000011FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011FE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00001220                            
00001220                            	@wait2:
00001220 3215                       		move.w	(a5),d1
00001222 0801 0001                  		btst	#1,d1
00001226 66F8                       		bne.s	@wait2
00001228                            
00001228 3ABC 8F02                  		move.w	#$8F02,(a5)
0000122C 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001230 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001234                            
00001234 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00001238 7000                       		moveq	#0,d0
0000123A 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
0000123E                            
0000123E                            	@clearsprites:
0000123E 22C0                       		move.l	d0,(a1)+
00001240 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00001244                            
00001244 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00001248 7000                       		moveq	#0,d0
0000124A 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
0000124E                            
0000124E                            	@clearhscroll:
0000124E 22C0                       		move.l	d0,(a1)+
00001250 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001254 4E75                       		rts	
00001256                            ; End of function ClearScreen
00001256                            
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Subroutine to	load the sound driver
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001256                            
00001256                            
00001256                            SoundDriverLoad:
00001256 4E71                       		nop	
00001258 33FC 0100 00A1 1100        		stopZ80
00001260 33FC 0100 00A1 1200        		resetZ80
00001268 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000126E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001274 6100 0000                  		bsr.w	KosDec		; decompress
00001278 33FC 0000 00A1 1200        		resetZ80a
00001280 4E71                       		nop	
00001282 4E71                       		nop	
00001284 4E71                       		nop	
00001286 4E71                       		nop	
00001288 33FC 0100 00A1 1200        		resetZ80
00001290 33FC 0000 00A1 1100        		startZ80
00001298 4E75                       		rts	
0000129A                            ; End of function SoundDriverLoad
0000129A                            
0000129A                            		include	"_incObj\sub PlaySound.asm"
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            ; Subroutine to	play a music track
0000129A                            
0000129A                            ; input:
0000129A                            ;	d0 = track to play
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            
0000129A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000129A                            
0000129A                            
0000129A                            PlaySound:
0000129A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000129E 4E75                       		rts	
000012A0                            ; End of function PlaySound
000012A0                            
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            ; Subroutine to	play a sound effect
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            
000012A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A0                            
000012A0                            
000012A0                            PlaySound_Special:
000012A0 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
000012A4 4E75                       		rts	
000012A6                            ; End of function PlaySound_Special
000012A6                            
000012A6                            ; ===========================================================================
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            ; Unused sound/music subroutine
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            
000012A6                            PlaySound_Unused:
000012A6 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
000012AA 4E75                       		rts	
000012AA 4E75                       		rts	
000012AC                            		include	"_inc\PauseGame.asm"
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            ; Subroutine to	pause the game
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            
000012AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012AC                            
000012AC                            
000012AC                            PauseGame:
000012AC 4E71                       		nop	
000012AE 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
000012B2 6700                       		beq.s	Unpause		; if not, branch
000012B4 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
000012B8 6600                       		bne.s	Pause_StopGame	; if yes, branch
000012BA 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012C0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000012C2                            
000012C2                            Pause_StopGame:
000012C2 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
000012C8 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
000012CE                            
000012CE                            Pause_Loop:
000012CE 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
000012D4 6100 0000                  		bsr.w	WaitForVBla
000012D8 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
000012DC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000012DE 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000012E4 6700                       		beq.s	Pause_ChkBC	; if not, branch
000012E6 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000012EC 4E71                       		nop	
000012EE 6000                       		bra.s	Pause_EndMusic
000012F0                            ; ===========================================================================
000012F0                            
000012F0                            Pause_ChkBC:
000012F0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012F6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012F8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012FE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001300                            
00001300                            Pause_ChkStart:
00001300 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001306 67C6                       		beq.s	Pause_Loop	; if not, branch
00001308                            
00001308                            Pause_EndMusic:
00001308 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000130E                            
0000130E                            Unpause:
0000130E 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001314                            
00001314                            Pause_DoNothing:
00001314 4E75                       		rts	
00001316                            ; ===========================================================================
00001316                            
00001316                            Pause_SlowMo:
00001316 31FC 0001 F63A             		move.w	#1,(f_pause).w
0000131C 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
00001322 4E75                       		rts	
00001324                            ; End of function PauseGame
00001324                            ; End of function PauseGame
00001324                            
00001324                            ; ---------------------------------------------------------------------------
00001324                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001324                            
00001324                            ; input:
00001324                            ;	a1 = tile map address
00001324                            ;	d0 = VRAM address
00001324                            ;	d1 = width (cells)
00001324                            ;	d2 = height (cells)
00001324                            ; ---------------------------------------------------------------------------
00001324                            
00001324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001324                            
00001324                            
00001324                            TilemapToVRAM:
00001324 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000132A 283C 0080 0000             		move.l	#$800000,d4
00001330                            
00001330                            	Tilemap_Line:
00001330 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001334 3601                       		move.w	d1,d3
00001336                            
00001336                            	Tilemap_Cell:
00001336 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001338 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
0000133C D084                       		add.l	d4,d0		; goto next line
0000133E 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
00001342 4E75                       		rts	
00001344                            ; End of function TilemapToVRAM
00001344                            
00001344                            		include	"_inc\Nemesis Decompression.asm"
00001344                            ; ==============================================================================
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Nemesis decompression routine
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Optimized by vladikcomper
00001344                            ; ------------------------------------------------------------------------------
00001344                             
00001344                            NemDec_RAM:
00001344 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001348 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
0000134C 6000                           bra.s   NemDec_Main
0000134E                             
0000134E                            ; ------------------------------------------------------------------------------
0000134E                            NemDec:
0000134E 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001352 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001358 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000135C                             
0000135C                            NemDec_Main:
0000135C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001360 3418                           move.w  (a0)+,d2        ; get number of patterns
00001362 6A00                           bpl.s   @0          ; are we in Mode 0?
00001364 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001368 E74A                       @0  lsl.w   #3,d2
0000136A 3A42                           movea.w d2,a5
0000136C 7607                           moveq   #7,d3
0000136E 7400                           moveq   #0,d2
00001370 7800                           moveq   #0,d4
00001372 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001376 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001378 E145                           asl.w   #8,d5           ; shift up by a byte
0000137A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000137C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001380 6100                           bsr.s   NemDec2
00001382 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001386 4E75                           rts
00001388                             
00001388                            ; ---------------------------------------------------------------------------
00001388                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001388                            ; ---------------------------------------------------------------------------
00001388                             
00001388                            NemDec2:
00001388 3E06                           move.w  d6,d7
0000138A 5147                           subq.w  #8,d7           ; get shift value
0000138C 3205                           move.w  d5,d1
0000138E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001390 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001394 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001396 0241 00FF                      andi.w  #$FF,d1
0000139A D241                           add.w   d1,d1
0000139C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000013A0 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
000013A4 6400                           bcc.s   @0          ; if not, branch
000013A6 5046                           addq.w  #8,d6
000013A8 E145                           asl.w   #8,d5
000013AA 1A18                           move.b  (a0)+,d5        ; read next byte
000013AC 1231 1001                  @0  move.b  1(a1,d1.w),d1
000013B0 3001                           move.w  d1,d0
000013B2 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013B6 0240 00F0                      andi.w  #$F0,d0
000013BA                             
000013BA                            NemDec_GetRepeatCount:
000013BA E848                           lsr.w   #4,d0           ; get repeat count
000013BC                             
000013BC                            NemDec_WritePixel:
000013BC E98C                           lsl.l   #4,d4           ; shift up by a nybble
000013BE 8801                           or.b    d1,d4           ; write pixel
000013C0 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
000013C4 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
000013C6                            ; ---------------------------------------------------------------------------
000013C6                             
000013C6                            NemPCD_NewRow:
000013C6 7800                           moveq   #0,d4           ; reset row
000013C8 7607                           moveq   #7,d3           ; reset nybble counter
000013CA                             
000013CA                            NemDec_WritePixelLoop:
000013CA 51C8 FFF0                      dbf d0,NemDec_WritePixel
000013CE 60B8                           bra.s   NemDec2
000013D0                            ; ---------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_InlineData:
000013D0 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
000013D2 0C46 0009                      cmpi.w  #9,d6
000013D6 6400                           bcc.s   @0
000013D8 5046                           addq.w  #8,d6
000013DA E145                           asl.w   #8,d5
000013DC 1A18                           move.b  (a0)+,d5
000013DE 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
000013E0 3205                           move.w  d5,d1
000013E2 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
000013E4 3001                           move.w  d1,d0
000013E6 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013EA 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013EE 0C46 0009                      cmpi.w  #9,d6
000013F2 64C6                           bcc.s   NemDec_GetRepeatCount
000013F4 5046                           addq.w  #8,d6
000013F6 E145                           asl.w   #8,d5
000013F8 1A18                           move.b  (a0)+,d5
000013FA 60BE                           bra.s   NemDec_GetRepeatCount
000013FC                             
000013FC                            ; ---------------------------------------------------------------------------
000013FC                            ; Subroutines to output decompressed entry
000013FC                            ; Selected depending on current decompression mode
000013FC                            ; ---------------------------------------------------------------------------
000013FC                             
000013FC                            NemPCD_WriteRowToVDP:
000013FC                            loc_1502:
000013FC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013FE 534D                           subq.w  #1,a5
00001400 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001402 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001404 4E75                           rts
00001406                            ; ---------------------------------------------------------------------------
00001406                             
00001406                            NemPCD_WriteRowToVDP_XOR:
00001406 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001408 2882                           move.l  d2,(a4)         ; and write the result
0000140A 534D                           subq.w  #1,a5
0000140C 380D                           move.w  a5,d4
0000140E 66B6                           bne.s   NemPCD_NewRow
00001410 4E75                           rts
00001412                            ; ---------------------------------------------------------------------------
00001412                             
00001412                            NemDec_WriteRowToRAM:
00001412 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001414 534D                           subq.w  #1,a5
00001416 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001418 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
0000141A 4E75                           rts
0000141C                            ; ---------------------------------------------------------------------------
0000141C                             
0000141C                            NemDec_WriteRowToRAM_XOR:
0000141C B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000141E 28C2                           move.l  d2,(a4)+        ; and write the result
00001420 534D                           subq.w  #1,a5
00001422 380D                           move.w  a5,d4
00001424 66A0                           bne.s   NemPCD_NewRow
00001426 4E75                           rts
00001428                             
00001428                            ; ---------------------------------------------------------------------------
00001428                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001428                            ; ---------------------------------------------------------------------------
00001428                             
00001428                            NemDec_BuildCodeTable:
00001428 1018                           move.b  (a0)+,d0        ; read first byte
0000142A                             
0000142A                            @ChkEnd:
0000142A 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000142E 6600                           bne.s   @NewPalIndex        ; if not, branch
00001430 4E75                           rts
00001432                            ; ---------------------------------------------------------------------------
00001432                             
00001432                            @NewPalIndex:
00001432 3E00                           move.w  d0,d7
00001434                             
00001434                            @ItemLoop:
00001434 1018                           move.b  (a0)+,d0        ; read next byte
00001436 6BF2                           bmi.s   @ChkEnd         ; ~~
00001438 1200                           move.b  d0,d1
0000143A 0247 000F                      andi.w  #$F,d7          ; get palette index
0000143E 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
00001442 8E41                           or.w    d1,d7           ; combine the two
00001444 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
00001448 1200                           move.b  d0,d1
0000144A E149                           lsl.w   #8,d1
0000144C 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
0000144E 7208                           moveq   #8,d1
00001450 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001452 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001454 1018                           move.b  (a0)+,d0        ; get code
00001456 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001458 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000145C 60D6                           bra.s   @ItemLoop       ; repeat
0000145E                            ; ---------------------------------------------------------------------------
0000145E                             
0000145E                            @ItemShortCode:
0000145E 1018                           move.b  (a0)+,d0        ; get code
00001460 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001462 D040                           add.w   d0,d0           ; get index into code table
00001464 7A01                           moveq   #1,d5
00001466 E36D                           lsl.w   d1,d5
00001468 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000146A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000146E                             
0000146E                            @ItemShortCodeLoop:
0000146E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001470 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001474 60BE                           bra.s   @ItemLoop
00001474 60BE                           bra.s   @ItemLoop
00001476                            
00001476                              
00001476                                pusho	; buffer local label symbol config
00001476                                opt ws+  ; change local label symbol to '.'
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO ResetDMAQueue
00001476                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001476                            ; Performs all queued DMA transfers and clears the DMA queue.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a1,a5	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE InitDMAQueue
00001476                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001476                            ; Must be called before the queue is used, and the queue expects that only it
00001476                            ; write to this region of RAM.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a0,d0,d1	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001476                            ; Queues a DMA with parameters given in registers.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	AssumeSourceAddressInBytes (default 1)
00001476                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001476                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001476                            ; 	Use128kbSafeDMA (default 0)
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001476                            ; 		set to 0)
00001476                            ; 	d2	Destination address
00001476                            ; 	d3	Transfer length (in words)
00001476                            ; Output:
00001476                            ; 	d0,d1,d2,d3,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001476                            ; * 184(29/9) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; With Use128kbSafeDMA = 1, runs in:
00001476                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001476                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001476                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001476                            ;   fills the queue (second piece is discarded)
00001476                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001476                            ;   space for both pieces (both pieces queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001476                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001476                            ; edited to make sure the adresss given is correct.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001476                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001476                            ; discarded. However, all callers must be edited to make sure the adresss given
00001476                            ; in the correct form. You can use the dmaSource function for that.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO QueueStaticDMA
00001476                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001476                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001476                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001476                            ; Output:
00001476                            ; 	d0,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001476                            ; * 122(21/8) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressInBytes
00001476                            ;
00001476                            ; This option makes the function work as a drop-in replacement of the original
00001476                            ; functions. If you modify all callers to supply a position in words instead of
00001476                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001476 =00000001                  AssumeSourceAddressInBytes = 1
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressIsRAMSafe
00001476                            ;
00001476                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001476                            ; source address is given to the function in a way that makes them safe to use
00001476                            ; with RAM sources. You need to edit all callers to ensure this.
00001476                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001476 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001476                            ; ===========================================================================
00001476                            ; option: UseRAMSourceSafeDMA
00001476                            ;
00001476                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001476                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001476                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001476 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001476                            ; ===========================================================================
00001476                            ; option: Use128kbSafeDMA
00001476                            ;
00001476                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001476                            ; disabled by default because you can simply align the art in ROM and avoid the
00001476                            ; issue altogether. It is here so that you have a high-performance routine to do
00001476                            ; the job in situations where you can't align it in ROM.
00001476 =00000001                  Use128kbSafeDMA = 1
00001476                            ; ===========================================================================
00001476                            ; option UseVIntSafeDMA
00001476                            ;
00001476                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001476                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001476                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001476                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001476                            ; restore interrupts after.
00001476 =00000000                  UseVIntSafeDMA = 0
00001476                            ; ===========================================================================
00001476                            
00001476                            
00001476                            ; Convenience macros, for increased maintainability of the code.
00001476 =00000027                  DMA = %100111
00001476 =00000021                  VRAM = %100001
00001476                            ; Like vdpComm, but starting from an address contained in a register
00001476 =00000001                  vdpCommReg_defined = 1
00001476                            vdpCommReg macro reg,type,rwd,clr
00001476                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001476                            	if ((\type&\rwd)&3)<>0
00001476                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001476                            	endif
00001476                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001476                            	swap	\reg								; Put all bits in proper places
00001476                            	if \clr <> 0
00001476                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001476                            	endif
00001476                            	if ((\type&\rwd)&$FC)=$20
00001476                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001476                            	elseif ((\type&\rwd)&$FC)<>0
00001476                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001476                            	endif
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  intMacros_defined = 1
00001476                            enableInts macro
00001476                            	move	#$2300,sr
00001476                            	endm
00001476                            
00001476                            disableInts macro
00001476                            	move	#$2700,sr
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  DMAEntry_defined = 1
00001476                                    rsreset
00001476 =00000000                  DMAEntry.Reg94:		rs.b	1
00001476                            			  
00001476 =00000001                  DMAEntry.Size:      rs.b    0
00001476 =00000001                  DMAEntry.SizeH:		rs.b	1
00001476 =00000002                  DMAEntry.Reg93:		rs.b	1
00001476 =00000003                  DMAEntry.Source:    rs.b    0
00001476 =00000003                  DMAEntry.SizeL:		rs.b	1
00001476 =00000004                  DMAEntry.Reg97:		rs.b	1
00001476 =00000005                  DMAEntry.SrcH:		rs.b	1
00001476 =00000006                  DMAEntry.Reg96:		rs.b	1
00001476 =00000007                  DMAEntry.SrcM:		rs.b	1
00001476 =00000008                  DMAEntry.Reg95:		rs.b	1
00001476 =00000009                  DMAEntry.SrcL:		rs.b	1
00001476 =0000000A                  DMAEntry.Command:	rs.l	1
00001476 =0000000E                  DMAEntry.len:   rs.w    0
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001476                            ; ---------------------------------------------------------------------------
00001476                            						
00001476                            										   
00001476                            									   
00001476                            	  
00001476                            																			 
00001476                            							  
00001476 =00000001                  QueueStaticDMA_defined = 1
00001476                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001476                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001476                            ; crosses a 128kB boundary, or has size 0.
00001476                            QueueStaticDMA macro src,length,dest
00001476                                local   len
00001476                            		if ((\src)&1)<>0
00001476                            			inform 3,"DMA queued from odd source \1!"
00001476                            		endif
00001476                            		if ((\length)&1)<>0
00001476                            			inform 3,"DMA an odd number of bytes \2!"
00001476                            		endif
00001476                            		if (\length)=0
00001476                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001476                            		endif
00001476                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001476                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001476                            		endif
00001476                            	  
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	sr,-(sp)										; Save current interrupt mask
00001476                            		disableInts												; Mask off interrupts
00001476                            	endif ; UseVIntSafeDMA=1
00001476                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001476                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001476                            	beq.s	.done												; Return if there's no more room in the buffer
00001476                            	len: = ((length>>1)&$7FFF)
00001476                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001476                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001476                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001476                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001476                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001476                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001476                            .done:
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001476                            	endif ;UseVIntSafeDMA=1
00001476                            	endm
00001476                            
00001476                                
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ResetDMAQueue: macro
00001476                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001476                            	endm
00001476                            ; ===========================================================================
00001476                            
00001476                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001476                            Add_To_DMA_Queue:
00001476                            QueueDMATransfer:
00001476 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000147A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000147E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001480                            
00001480 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001482 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001486 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000148A 7000                       	moveq	#0,d0											; We need a zero on d0
0000148C                            
0000148C                            		; Detect if transfer crosses 128KB boundary
0000148C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000148C                            		; (1) d3.w = 0 => 128kB transfer
0000148C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000148C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000148C                            		; (2) d3.w != 0
0000148C                            		;   (a) if there is carry on d1.w + d3.w
0000148C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000148C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000148C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000148C                            		; The reason this works is that carry on d1.w + d3.w means that
0000148C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000148C                            		; d1.w + d3.w > $10000.
0000148C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000148E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001490 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001492                            	; It does not cross a 128kB boundary. So just finish writing it.
00001492 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001496                            
00001496                            .finishxfer:
00001496                            	; Command to specify destination address and begin DMA
00001496 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
000014A2 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
000014A6 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
000014A8 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
000014AC                            
000014AC                            .done:
000014AC 4E75                       	rts
000014AE                            ; ---------------------------------------------------------------------------
000014AE                            .doubletransfer:
000014AE                            		; We need to split the DMA into two parts, since it crosses a 128kB block
000014AE D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
000014B0 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
000014B4                            
000014B4 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
000014B8 67DC                       		beq.s	.finishxfer									; Branch if not
000014BA                            
000014BA                            		; Get second transfer's source, destination, and length
000014BA 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
000014BC D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
000014BE D040                       		add.w	d0,d0										; Convert to number of bytes
000014C0 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
000014C2                            
000014C2                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
000014C2                            		; clear it. There is, unfortunately, no faster way to clear it than this.
000014D0 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
000014D4                            
000014D4                            		; Do second transfer
000014D4 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
000014D8 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
000014DC                            
000014DC                            		; Command to specify destination address and begin DMA
000014E6 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
000014EA 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
000014EC                            
000014EC 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014F0 4E75                       		rts
000014F2                            ; End of function QueueDMATransfer
000014F2                            ; ===========================================================================
000014F2                            
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            ; Subroutine for issuing all VDP commands that were queued
000014F2                            ; (by earlier calls to QueueDMATransfer)
000014F2                            ; Resets the queue when it's done
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            
000014F2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014F2                            
000014F2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014F2                            Process_DMA_Queue:
000014F2                            ProcessDMAQueue:
000014F2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014F6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            .jump_table:
000014FA 4E75                       	rts
000014FC                            	rept 6
000014FC                            		trap	#0											; Just in case
000014FC 4E40 4E40 4E40 4E40 4E40+  	endr
00001508                            ; ---------------------------------------------------------------------------
00001508 =00000001                      c: = 1
00001508                            	rept QueueSlotCount
00001508                            		lea	(vdp_control_port).l,a5
00001508                            		lea	(VDP_Command_Buffer).w,a1
00001508                            		if c<>QueueSlotCount
00001508                            			bra.w	.jump0 - c*8
00001508                            		endif
00001508                                c: = c + 1
00001600                            ; ---------------------------------------------------------------------------
00001600                            	rept QueueSlotCount
00001600                            		move.l	(a1)+,(a5)									; Transfer length
00001600                            		move.l	(a1)+,(a5)									; Source address high
00001600                            		move.l	(a1)+,(a5)									; Source address low + destination high
00001600                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
00001600 2A99 2A99 2A99 3A99 2A99+  	endr
00001690                            
00001690                            .jump0:
00001690 31FC C800 C8FC             	ResetDMAQueue
00001696 4E75                       	rts
00001698                            ; End of function ProcessDMAQueue
00001698                            ; ===========================================================================
00001698                            
00001698                            ; ---------------------------------------------------------------------------
00001698                            ; Subroutine for initializing the DMA queue.
00001698                            ; ---------------------------------------------------------------------------
00001698                            
00001698                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            InitDMAQueue:
00001698 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000169C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000169E 223C 9397 9695             	move.l	#$93979695,d1
000016A4 =00000000                      c: = 0
000016A4                            	rept QueueSlotCount
000016A4                            		move.b	d0,c + DMAEntry.Reg94(a0)
000016A4                            		movep.l	d1,c + DMAEntry.Reg93(a0)
000016A4                                c: = c + DMAEntry.len
000016A4 1080 03C8 0002 1140 000E+  	endr
00001732                            
00001732 31FC C800 C8FC             	ResetDMAQueue
00001738 4E75                       	rts
0000173A                            ; End of function ProcessDMAQueue
0000173A                            ; ===========================================================================
0000173A                            
0000173A                            
0000173A                                popo	; buffer local label symbol config
0000173A                            
0000173A                            
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ARGUMENTS
0000173A                            ; d0 = index of PLC list
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000173A                            
0000173A                            ; LoadPLC:
0000173A                            AddPLC:
0000173A 48E7 0060                  		movem.l	a1-a2,-(sp)
0000173E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001744 D040                       		add.w	d0,d0
00001746 3031 0000                  		move.w	(a1,d0.w),d0
0000174A 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000174E 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001752                            
00001752                            	@findspace:
00001752 4A92                       		tst.l	(a2)		; is space available in RAM?
00001754 6700                       		beq.s	@copytoRAM	; if yes, branch
00001756 5C4A                       		addq.w	#6,a2		; if not, try next space
00001758 60F8                       		bra.s	@findspace
0000175A                            ; ===========================================================================
0000175A                            
0000175A                            @copytoRAM:
0000175A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000175C 6B00                       		bmi.s	@skip
0000175E                            
0000175E                            	@loop:
0000175E 24D9                       		move.l	(a1)+,(a2)+
00001760 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001762 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001766                            
00001766                            	@skip:
00001766 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000176A 4E75                       		rts	
0000176C                            ; End of function AddPLC
0000176C                            
0000176C                            
0000176C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176C                            ; Queue pattern load requests, but clear the PLQ first
0000176C                            
0000176C                            ; ARGUMENTS
0000176C                            ; d0 = index of PLC list (see ArtLoadCues)
0000176C                            
0000176C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000176C                            ;	  (or hacker) is responsible for making sure that no more than
0000176C                            ;	  16 load requests are copied into the buffer.
0000176C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000176C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000176C                            
0000176C                            ; LoadPLC2:
0000176C                            NewPLC:
0000176C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001770 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001776 D040                       		add.w	d0,d0
00001778 3031 0000                  		move.w	(a1,d0.w),d0
0000177C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001780 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001782 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001786 3019                       		move.w	(a1)+,d0	; get length of PLC
00001788 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000178A                            
0000178A                            	@loop:
0000178A 24D9                       		move.l	(a1)+,(a2)+
0000178C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000178E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001792                            
00001792                            	@skip:
00001792 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001796 4E75                       		rts	
00001798                            ; End of function NewPLC
00001798                            
00001798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001798                            
00001798                            ; ---------------------------------------------------------------------------
00001798                            ; Subroutine to	clear the pattern load cues
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001798                            
00001798                            
00001798                            ClearPLC:
00001798 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000179C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000179E                            
0000179E                            	@loop:
0000179E 429A                       		clr.l	(a2)+
000017A0 51C8 FFFC                  		dbf	d0,@loop
000017A4 4E75                       		rts	
000017A6                            ; End of function ClearPLC
000017A6                            
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            ; Subroutine to	use graphics listed in a pattern load cue
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            
000017A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A6                            
000017A6                            
000017A6                            RunPLC:
000017A6 4AB8 F680                  		tst.l	(v_plc_buffer).w
000017AA 6700                       		beq.s	Rplc_Exit
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6600                       		bne.s	Rplc_Exit
000017B2 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017B6 47F9 0000 13FC             		lea	(NemPCD_WriteRowToVDP).l,a3
000017BC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000017C0 3418                       		move.w	(a0)+,d2
000017C2 6A00                       		bpl.s	loc_160E
000017C4 D6FC 000A                  		adda.w	#$A,a3
000017C8                            
000017C8                            loc_160E:
000017C8 0242 7FFF                  		andi.w	#$7FFF,d2
000017CC 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
000017D0 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
000017D4 1A18                       		move.b	(a0)+,d5
000017D6 E145                       		asl.w	#8,d5
000017D8 1A18                       		move.b	(a0)+,d5
000017DA 7C10                       		moveq	#$10,d6
000017DC 7000                       		moveq	#0,d0
000017DE 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000017E2 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000017E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000017EA 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017EE 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017FA                            
000017FA                            Rplc_Exit:
000017FA 4E75                       		rts	
000017FC                            ; End of function RunPLC
000017FC                            
000017FC                            
000017FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FC                            
000017FC                            
000017FC                            sub_1642:
000017FC 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001800 6700 0000                  		beq.w	locret_16DA
00001804 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000180A 7000                       		moveq	#0,d0
0000180C 3038 F684                  		move.w	($FFFFF684).w,d0
00001810 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001816 6000                       		bra.s	loc_1676
00001818                            ; End of function sub_1642
00001818                            
00001818                            
00001818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001818                            
00001818                            
00001818                            ; sub_165E:
00001818                            ProcessDPLC2:
00001818 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000181C 6700                       		beq.s	locret_16DA
0000181E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001824 7000                       		moveq	#0,d0
00001826 3038 F684                  		move.w	($FFFFF684).w,d0
0000182A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001830                            
00001830                            loc_1676:
00001830 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001836 E588                       		lsl.l	#2,d0
00001838 E448                       		lsr.w	#2,d0
0000183A 0040 4000                  		ori.w	#$4000,d0
0000183E 4840                       		swap	d0
00001840 2880                       		move.l	d0,(a4)
00001842 594C                       		subq.w	#4,a4
00001844 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001848 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
0000184C 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001850 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001854 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001858 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000185C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001860 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001864                            
00001864                            loc_16AA:
00001864 3A7C 0008                  		movea.w	#8,a5
00001868 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000186C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001870 6700                       		beq.s	loc_16DC
00001872 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001876 66EC                       		bne.s	loc_16AA
00001878 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000187C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001880 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001884 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001888 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000188C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001890 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001894                            
00001894                            locret_16DA:
00001894 4E75                       		rts	
00001896                            ; ===========================================================================
00001896                            
00001896                            loc_16DC:
00001896 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000189A 7015                       		moveq	#$15,d0
0000189C                            
0000189C                            loc_16E2:
0000189C 20E8 0006                  		move.l	6(a0),(a0)+
000018A0 51C8 FFFA                  		dbf	d0,loc_16E2
000018A4 4E75                       		rts	
000018A6                            ; End of function ProcessDPLC2
000018A6                            
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            ; Subroutine to	execute	the pattern load cue
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            
000018A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A6                            
000018A6                            
000018A6                            QuickPLC:
000018A6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018AC D040                       		add.w	d0,d0
000018AE 3031 0000                  		move.w	(a1,d0.w),d0
000018B2 43F1 0000                  		lea	(a1,d0.w),a1
000018B6 3219                       		move.w	(a1)+,d1	; get length of PLC
000018B8                            
000018B8                            	Qplc_Loop:
000018B8 2059                       		movea.l	(a1)+,a0	; get art pointer
000018BA 7000                       		moveq	#0,d0
000018BC 3019                       		move.w	(a1)+,d0	; get VRAM address
000018BE E588                       		lsl.l	#2,d0
000018C0 E448                       		lsr.w	#2,d0
000018C2 0040 4000                  		ori.w	#$4000,d0
000018C6 4840                       		swap	d0
000018C8 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
000018CE 6100 FA7E                  		bsr.w	NemDec		; decompress
000018D2 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
000018D6 4E75                       		rts	
000018D8                            ; End of function QuickPLC
000018D8                            
000018D8                            		include	"_inc\Enigma Decompression.asm"
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            ; Enigma decompression algorithm
000018D8                            
000018D8                            ; input:
000018D8                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
000018D8                            ;	a0 = source address
000018D8                            ;	a1 = destination address
000018D8                            
000018D8                            ; usage:
000018D8                            ;	lea	(source).l,a0
000018D8                            ;	lea	(destination).l,a1
000018D8                            ;	move.w	#arttile,d0
000018D8                            ;	bsr.w	EniDec
000018D8                            
000018D8                            ; See http://www.segaretro.org/Enigma_compression for format description
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            
000018D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018D8                            
000018D8                            
000018D8                            EniDec:
000018D8 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000018DC 3640                       		movea.w	d0,a3		; store starting art tile
000018DE 1018                       		move.b	(a0)+,d0
000018E0 4880                       		ext.w	d0
000018E2 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
000018E4 1818                       		move.b	(a0)+,d4
000018E6 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
000018E8 3458                       		movea.w	(a0)+,a2
000018EA D4CB                       		adda.w	a3,a2		; store incremental copy word
000018EC 3858                       		movea.w	(a0)+,a4
000018EE D8CB                       		adda.w	a3,a4		; store literal copy word
000018F0 1A18                       		move.b	(a0)+,d5
000018F2 E145                       		asl.w	#8,d5
000018F4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018F6 7C10                       		moveq	#16,d6		; initial shift value
000018F8                            ; loc_173E:
000018F8                            Eni_Loop:
000018F8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018FA 3E06                       		move.w	d6,d7
000018FC 9E40                       		sub.w	d0,d7
000018FE 3205                       		move.w	d5,d1
00001900 EE69                       		lsr.w	d7,d1
00001902 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001906 3401                       		move.w	d1,d2		; and copy it
00001908 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
0000190C 6400                       		bhs.s	@sevenbitentry
0000190E 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
00001910 E24A                       		lsr.w	#1,d2
00001912                            ; loc_1758:
00001912                            @sevenbitentry:
00001912 6100 0000                  		bsr.w	EniDec_FetchByte
00001916 0242 000F                  		andi.w	#$F,d2		; get repeat count
0000191A E849                       		lsr.w	#4,d1
0000191C D241                       		add.w	d1,d1
0000191E 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
00001922                            ; End of function EniDec
00001922                            
00001922                            ; ===========================================================================
00001922                            ; loc_1768:
00001922                            EniDec_00:
00001922 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001924 524A                       		addq.w	#1,a2		; increment it
00001926 51CA FFFA                  		dbf	d2,@loop	; repeat
0000192A 60CC                       		bra.s	Eni_Loop
0000192C                            ; ===========================================================================
0000192C                            ; loc_1772:
0000192C                            EniDec_01:
0000192C 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000192E 51CA FFFC                  		dbf	d2,@loop	; repeat
00001932 60C4                       		bra.s	Eni_Loop
00001934                            ; ===========================================================================
00001934                            ; loc_177A:
00001934                            EniDec_100:
00001934 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001938                            ; loc_177E:
00001938 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
0000193A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000193E                            
0000193E 60B8                       		bra.s	Eni_Loop
00001940                            ; ===========================================================================
00001940                            ; loc_1786:
00001940                            EniDec_101:
00001940 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001944                            ; loc_178A:
00001944 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001946 5241                       		addq.w	#1,d1		; increment
00001948 51CA FFFA                  		dbf	d2,@loop	; repeat
0000194C                            
0000194C 60AA                       		bra.s	Eni_Loop
0000194E                            ; ===========================================================================
0000194E                            ; loc_1794:
0000194E                            EniDec_110:
0000194E 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001952                            ; loc_1798:
00001952 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001954 5341                       		subq.w	#1,d1		; decrement
00001956 51CA FFFA                  		dbf	d2,@loop	; repeat
0000195A                            
0000195A 609C                       		bra.s	Eni_Loop
0000195C                            ; ===========================================================================
0000195C                            ; loc_17A2:
0000195C                            EniDec_111:
0000195C 0C42 000F                  		cmpi.w	#$F,d2
00001960 6700                       		beq.s	EniDec_Done
00001962                            ; loc_17A8:
00001962 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001966 32C1                       		move.w	d1,(a1)+	; copy it
00001968 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000196C                            
0000196C 608A                       		bra.s	Eni_Loop
0000196E                            ; ===========================================================================
0000196E                            ; loc_17B4:
0000196E                            EniDec_Index:
0000196E 60B2                       		bra.s	EniDec_00
00001970 60B0                       		bra.s	EniDec_00
00001972 60B8                       		bra.s	EniDec_01
00001974 60B6                       		bra.s	EniDec_01
00001976 60BC                       		bra.s	EniDec_100
00001978 60C6                       		bra.s	EniDec_101
0000197A 60D2                       		bra.s	EniDec_110
0000197C 60DE                       		bra.s	EniDec_111
0000197E                            ; ===========================================================================
0000197E                            ; loc_17C4:
0000197E                            EniDec_Done:
0000197E 5348                       		subq.w	#1,a0		; go back by one byte
00001980 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001984 6600                       		bne.s	@notnewbyte	; if not, branch
00001986 5348                       		subq.w	#1,a0		; and another one if needed
00001988                            ; loc_17CE:
00001988                            @notnewbyte:
00001988 3008                       		move.w	a0,d0
0000198A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000198C 6400                       		bcc.s	@evenbyte	; if not, branch
0000198E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001990                            ; loc_17D6:
00001990                            @evenbyte:
00001990 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001994 4E75                       		rts	
00001996                            
00001996                            ; ---------------------------------------------------------------------------
00001996                            ; Part of the Enigma decompressor
00001996                            ; Fetches an inline copy value and stores it in d1
00001996                            ; ---------------------------------------------------------------------------
00001996                            
00001996                            ; =============== S U B R O U T I N E =======================================
00001996                            
00001996                            ; loc_17DC:
00001996                            EniDec_FetchInlineValue:
00001996 360B                       		move.w	a3,d3		; copy starting art tile
00001998 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000199A D201                       		add.b	d1,d1		; is the priority bit set?
0000199C 6400                       		bcc.s	@skippriority	; if not, branch
0000199E 5346                       		subq.w	#1,d6
000019A0 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000019A2 6700                       		beq.s	@skippriority	; if not, branch
000019A4 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000019A8                            ; loc_17EE:
000019A8                            @skippriority:
000019A8 D201                       		add.b	d1,d1		; is the high palette line bit set?
000019AA 6400                       		bcc.s	@skiphighpal	; if not, branch
000019AC 5346                       		subq.w	#1,d6
000019AE 0D05                       		btst	d6,d5
000019B0 6700                       		beq.s	@skiphighpal
000019B2 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000019B6                            ; loc_17FC:
000019B6                            @skiphighpal:
000019B6 D201                       		add.b	d1,d1		; is the low palette line bit set?
000019B8 6400                       		bcc.s	@skiplowpal	; if not, branch
000019BA 5346                       		subq.w	#1,d6
000019BC 0D05                       		btst	d6,d5
000019BE 6700                       		beq.s	@skiplowpal
000019C0 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000019C4                            ; loc_180A:
000019C4                            @skiplowpal:
000019C4 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000019C6 6400                       		bcc.s	@skipyflip	; if not, branch
000019C8 5346                       		subq.w	#1,d6
000019CA 0D05                       		btst	d6,d5
000019CC 6700                       		beq.s	@skipyflip
000019CE 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000019D2                            ; loc_1818:
000019D2                            @skipyflip:
000019D2 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
000019D4 6400                       		bcc.s	@skipxflip	; if not, branch
000019D6 5346                       		subq.w	#1,d6
000019D8 0D05                       		btst	d6,d5
000019DA 6700                       		beq.s	@skipxflip
000019DC 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
000019E0                            ; loc_1826:
000019E0                            @skipxflip:
000019E0 3205                       		move.w	d5,d1
000019E2 3E06                       		move.w	d6,d7
000019E4 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
000019E6 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
000019E8 3C07                       		move.w	d7,d6
000019EA 0646 0010                  		addi.w	#16,d6
000019EE 4447                       		neg.w	d7		; calculate bit deficit
000019F0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019F2 1A10                       		move.b	(a0),d5		; get next byte
000019F4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019F6 DE47                       		add.w	d7,d7
000019F8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019FC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019FE                            ; loc_1844:
000019FE                            @maskvalue:
000019FE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
00001A00 D040                       		add.w	d0,d0
00001A02 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001A06 D243                       		add.w	d3,d1		; add starting art tile
00001A08 1A18                       		move.b	(a0)+,d5
00001A0A E14D                       		lsl.w	#8,d5
00001A0C 1A18                       		move.b	(a0)+,d5	; get next word
00001A0E 4E75                       		rts	
00001A10                            ; ===========================================================================
00001A10                            ; loc_1856:
00001A10                            @enoughbits:
00001A10 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
00001A12 EE69                       		lsr.w	d7,d1	; get inline copy value
00001A14 300D                       		move.w	a5,d0
00001A16 D040                       		add.w	d0,d0
00001A18 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001A1C D243                       		add.w	d3,d1	; add starting art tile
00001A1E 300D                       		move.w	a5,d0
00001A20 6000                       		bra.s	EniDec_FetchByte
00001A22                            ; ===========================================================================
00001A22                            ; loc_1868:
00001A22                            @justenough:
00001A22 7C10                       		moveq	#16,d6	; reset shift value
00001A24 60D8                       		bra.s	@maskvalue
00001A26                            ; ===========================================================================
00001A26                            ; word_186C:
00001A26                            EniDec_Masks:
00001A26 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
00001A2E 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001A36 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
00001A3E 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            ; sub_188C:
00001A46                            EniDec_FetchByte:
00001A46 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001A48 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001A4C 6400                       		bhs.s	@locret	; if not, branch
00001A4E 5046                       		addq.w	#8,d6
00001A50 E145                       		asl.w	#8,d5
00001A52 1A18                       		move.b	(a0)+,d5
00001A54                            @locret:
00001A54 4E75                       		rts	
00001A56                            ; End of function EniDec_FetchByte
00001A56                            ; End of function EniDec_FetchByte
00001A56                            		include	"_inc\Kosinski Decompression.asm"
00001A56                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A56                            ; ---------------------------------------------------------------------------
00001A56                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A56                            ; (sometimes called KOZINSKI decompression)
00001A56                            ;
00001A56                            ; ARGUMENTS:
00001A56                            ; a0 = source address
00001A56                            ; a1 = destination address
00001A56                            ;
00001A56                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A56                            ; New faster version by written by vladikcomper, with additional improvements by
00001A56                            ; MarkeyJester and Flamewing
00001A56                            ; Converted to ASM68K by Beta Filter.
00001A56                            ; ---------------------------------------------------------------------------
00001A56 =00000001                  Kos_UseLUT: equ 1
00001A56 =00000003                  Kos_LoopUnroll: equ 3
00001A56 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A56                            
00001A56                            Kos_RunBitStream macro
00001A56                                dbra    d2,@skip\@
00001A56                                moveq   #7,d2                   ; Set repeat count to 8.
00001A56                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A56                                not.w   d3                      ; Have all 16 bits been used up?
00001A56                                bne.s   @skip\@                   ; Branch if not.
00001A56                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A56                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A56                                if Kos_UseLUT=1
00001A56                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A56                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A56                                endif
00001A56                            @skip\@
00001A56                                endm
00001A56                            
00001A56                            Kos_ReadBit macro
00001A56                                if Kos_UseLUT=1
00001A56                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A56                                else
00001A56                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A56                                endif
00001A56                                endm
00001A56                            ; ===========================================================================
00001A56                            ; KozDec@193A:
00001A56                            KosDec:
00001A56 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A58 7000                           moveq   #0,d0
00001A5A 7200                           moveq   #0,d1
00001A5C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A60 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A62 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A64 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A68 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A6C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A6E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A70 6000                           bra.s   @FetchNewCode
00001A72                            ; ---------------------------------------------------------------------------
00001A72                            @FetchCodeLoop:
00001A72                                ; Code 1 (Uncompressed byte).
00001A8A 12D8                           move.b  (a0)+,(a1)+
00001A8C                            
00001A8C                            @FetchNewCode:
00001A8E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A90                            
00001A90                                ; Codes 00 and 01.
00001A90 7AFF                           moveq   #-1,d5
00001A92 4BD1                           lea (a1),a5
00001AAE 6500 0000                      bcs.w   @Code_01
00001AB2                            
00001AB2                                ; Code 00 (Dictionary ref. short).
00001ACC 6500                           bcs.s   @Copy45
00001AE8 6500                           bcs.s   @Copy3
00001B02 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B04 DAC5                           adda.w  d5,a5
00001B06 12DD                           move.b  (a5)+,(a1)+
00001B08 12DD                           move.b  (a5)+,(a1)+
00001B0A 6080                           bra.s   @FetchNewCode
00001B0C                            ; ---------------------------------------------------------------------------
00001B0C                            @Copy3:
00001B24 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B26 DAC5                           adda.w  d5,a5
00001B28 12DD                           move.b  (a5)+,(a1)+
00001B2A 12DD                           move.b  (a5)+,(a1)+
00001B2C 12DD                           move.b  (a5)+,(a1)+
00001B2E 6000 FF5C                      bra.w   @FetchNewCode
00001B32                            ; ---------------------------------------------------------------------------
00001B32                            @Copy45:
00001B4C 6500                           bcs.s   @Copy5
00001B66 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B68 DAC5                           adda.w  d5,a5
00001B6A 12DD                           move.b  (a5)+,(a1)+
00001B6C 12DD                           move.b  (a5)+,(a1)+
00001B6E 12DD                           move.b  (a5)+,(a1)+
00001B70 12DD                           move.b  (a5)+,(a1)+
00001B72 6000 FF18                      bra.w   @FetchNewCode
00001B76                            ; ---------------------------------------------------------------------------
00001B76                            @Copy5:
00001B8E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B90 DAC5                           adda.w  d5,a5
00001B92 12DD                           move.b  (a5)+,(a1)+
00001B94 12DD                           move.b  (a5)+,(a1)+
00001B96 12DD                           move.b  (a5)+,(a1)+
00001B98 12DD                           move.b  (a5)+,(a1)+
00001B9A 12DD                           move.b  (a5)+,(a1)+
00001B9C 6000 FEEE                      bra.w   @FetchNewCode
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            @Code_01:
00001BA0 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001BA2                                ; Code 01 (Dictionary ref. long / special).
00001BBA 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001BBC 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001BBE 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001BC0 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001BC2 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001BC4 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001BC6 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001BC8                            
00001BC8                                ; special mode (extended counter)
00001BC8 1818                           move.b  (a0)+,d4                ; Read cnt
00001BCA 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001BCC 5304                           subq.b  #1,d4
00001BCE 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001BD2                            
00001BD2 DAC5                           adda.w  d5,a5
00001BD4 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BD6 3C04                           move.w  d4,d6
00001BD8 4646                           not.w   d6
00001BDA CC47                           and.w   d7,d6
00001BDC DC46                           add.w   d6,d6
00001BDE E64C                           lsr.w   #Kos_LoopUnroll,d4
00001BE0 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001BE4                            ; ---------------------------------------------------------------------------
00001BE4                            @largecopy:
00001BE4                                rept (1<<Kos_LoopUnroll)
00001BE4                                move.b  (a5)+,(a1)+
00001BE4 12DD 12DD 12DD 12DD 12DD+      endr
00001BF4 51CC FFEE                      dbra    d4,@largecopy
00001BF8 6000 FE92                      bra.w   @FetchNewCode
00001BFC                            ; ---------------------------------------------------------------------------
00001BFC                            @StreamCopy:
00001BFC DAC5                           adda.w  d5,a5
00001BFE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C00 BF44                           eor.w   d7,d4
00001C02 D844                           add.w   d4,d4
00001C04 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001C08                            ; ---------------------------------------------------------------------------
00001C08                            @mediumcopy:
00001C08                                rept 8
00001C08                                move.b  (a5)+,(a1)+
00001C08 12DD 12DD 12DD 12DD 12DD+      endr
00001C18 6000 FE72                      bra.w   @FetchNewCode
00001C1C                            ; ---------------------------------------------------------------------------
00001C1C                            @Quit:
00001C1C 4E75                           rts                             ; End of function KosDec.
00001C1E                            ; ===========================================================================
00001C1E                            KosDec_ByteMap:
00001C1E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001C2E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001C3E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001C4E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C5E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C6E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C7E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C8E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C9E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001CAE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001CBE 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001CCE 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001CDE 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001CEE 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CFE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001D0E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001D1E                            ; ===========================================================================
00001D1E                            ; ===========================================================================
00001D1E                            
00001D1E                            		include	"_inc\PaletteCycle.asm"
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            ; Palette cycling routine loading subroutine
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            
00001D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D1E                            
00001D1E                            
00001D1E                            PaletteCycle:
00001D1E 7400                       		moveq	#0,d2
00001D20 7000                       		moveq	#0,d0
00001D22 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001D26 D040                       		add.w	d0,d0
00001D28 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001D2C 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001D30                            ; End of function PaletteCycle
00001D30                            
00001D30                            ; ===========================================================================
00001D30                            ; ---------------------------------------------------------------------------
00001D30                            ; Palette cycling routines
00001D30                            ; ---------------------------------------------------------------------------
00001D30 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001D32 0000                       		dc.w PCycle_LZ-PCycle_Index
00001D34 0000                       		dc.w PCycle_MZ-PCycle_Index
00001D36 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001D38 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001D3A 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001D3C 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001D3E                            
00001D3E                            
00001D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D3E                            
00001D3E                            
00001D3E                            PCycle_Title:
00001D3E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001D44 6000                       		bra.s	PCycGHZ_Go
00001D46                            ; ===========================================================================
00001D46                            
00001D46                            PCycle_GHZ:
00001D46 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001D4C                            
00001D4C                            PCycGHZ_Go:
00001D4C 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D50 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D52                            
00001D52 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D58 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D5C 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D60 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D64 E748                       		lsl.w	#3,d0
00001D66 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D6A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D6E 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D72                            
00001D72                            PCycGHZ_Skip:
00001D72 4E75                       		rts	
00001D74                            ; End of function PCycle_GHZ
00001D74                            
00001D74                            
00001D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D74                            
00001D74                            
00001D74                            PCycle_LZ:
00001D74                            ; Waterfalls
00001D74 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D78 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D7A                            
00001D7A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D80 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D84 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D88 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D8C E748                       		lsl.w	#3,d0
00001D8E 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D94 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D9A 6600                       		bne.s	PCycLZ_NotSBZ3
00001D9C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001DA2                            
00001DA2                            	PCycLZ_NotSBZ3:
00001DA2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DA6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DAA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DAE 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001DB2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DB6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DBA                            
00001DBA                            PCycLZ_Skip1:
00001DBA                            ; Conveyor belts
00001DBA                            		;move.w	(v_framecount).w,d0
00001DBA                            		;andi.w	#7,d0
00001DBA                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001DBA                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001DBA                            		;moveq	#1,d1
00001DBA                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001DBA                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001DBA                            		;neg.w	d1
00001DBA                            
00001DBA                            	;PCycLZ_NoRev:
00001DBA                            		;move.w	(v_pal_buffer).w,d0
00001DBA                            		;andi.w	#3,d0
00001DBA                            		;add.w	d1,d0
00001DBA                            		;cmpi.w	#3,d0
00001DBA                            		;bcs.s	loc_1A0A
00001DBA                            		;move.w	d0,d1
00001DBA                            		;moveq	#0,d0
00001DBA                            		;tst.w	d1
00001DBA                            		;bpl.s	loc_1A0A
00001DBA                            		;moveq	#2,d0
00001DBA                            
00001DBA                            ;loc_1A0A:
00001DBA                            		;move.w	d0,(v_pal_buffer).w
00001DBA                            		;add.w	d0,d0
00001DBA                            		;move.w	d0,d1
00001DBA                            		;add.w	d0,d0
00001DBA                            		;add.w	d1,d0
00001DBA                            		;lea	(Pal_LZCyc2).l,a0
00001DBA                            		;lea	(v_pal_dry+$76).w,a1
00001DBA                            		;move.l	(a0,d0.w),(a1)+
00001DBA                            		;move.w	4(a0,d0.w),(a1)
00001DBA                            		;lea	(Pal_LZCyc3).l,a0
00001DBA                            		;lea	(v_pal_water+$76).w,a1
00001DBA                            		;move.l	(a0,d0.w),(a1)+
00001DBA                            		;move.w	4(a0,d0.w),(a1)
00001DBA                            
00001DBA                            ;PCycLZ_Skip2:
00001DBA 4E75                       		rts	
00001DBC                            ; End of function PCycle_LZ
00001DBC                            
00001DBC                            ; ===========================================================================
00001DBC 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001DC4                            ; ===========================================================================
00001DC4                            
00001DC4                            PCycle_MZ:
00001DC4 4E75                       		rts	
00001DC6                            
00001DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DC6                            
00001DC6                            
00001DC6                            PalCycle_SLZ:
00001DC6 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DCA 6A00                       		bpl.s	locret_1A80
00001DCC 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001DD2 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DD6 5240                       		addq.w	#1,d0
00001DD8 0C40 0006                  		cmpi.w	#6,d0
00001DDC 6500                       		bcs.s	loc_1A60
00001DDE 7000                       		moveq	#0,d0
00001DE0                            
00001DE0                            loc_1A60:
00001DE0 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001DE4 3200                       		move.w	d0,d1
00001DE6 D241                       		add.w	d1,d1
00001DE8 D041                       		add.w	d1,d0
00001DEA D040                       		add.w	d0,d0
00001DEC 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DF2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DF6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DFA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001E00                            
00001E00                            locret_1A80:
00001E00 4E75                       		rts	
00001E02                            ; End of function PalCycle_SLZ
00001E02                            
00001E02                            
00001E02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E02                            
00001E02                            
00001E02                            PalCycle_SYZ:
00001E02 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E06 6A00                       		bpl.s	locret_1AC6
00001E08 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001E0E 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E12 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001E16 0240 0003                  		andi.w	#3,d0
00001E1A E548                       		lsl.w	#2,d0
00001E1C 3200                       		move.w	d0,d1
00001E1E D040                       		add.w	d0,d0
00001E20 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001E26 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001E2A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E2E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E32 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001E38 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001E3C 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001E40 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001E46                            
00001E46                            locret_1AC6:
00001E46 4E75                       		rts	
00001E48                            ; End of function PalCycle_SYZ
00001E48                            
00001E48                            
00001E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E48                            
00001E48                            
00001E48                            PalCycle_SBZ:
00001E48 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E4E 4A38 FE11                  		tst.b	(v_act).w
00001E52 6700                       		beq.s	loc_1ADA
00001E54 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E5A                            
00001E5A                            loc_1ADA:
00001E5A 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E5E 321A                       		move.w	(a2)+,d1
00001E60                            
00001E60                            loc_1AE0:
00001E60 5311                       		subq.b	#1,(a1)
00001E62 6B00                       		bmi.s	loc_1AEA
00001E64 5489                       		addq.l	#2,a1
00001E66 5C8A                       		addq.l	#6,a2
00001E68 6000                       		bra.s	loc_1B06
00001E6A                            ; ===========================================================================
00001E6A                            
00001E6A                            loc_1AEA:
00001E6A 12DA                       		move.b	(a2)+,(a1)+
00001E6C 1011                       		move.b	(a1),d0
00001E6E 5200                       		addq.b	#1,d0
00001E70 B01A                       		cmp.b	(a2)+,d0
00001E72 6500                       		bcs.s	loc_1AF6
00001E74 7000                       		moveq	#0,d0
00001E76                            
00001E76                            loc_1AF6:
00001E76 12C0                       		move.b	d0,(a1)+
00001E78 0240 000F                  		andi.w	#$F,d0
00001E7C D040                       		add.w	d0,d0
00001E7E 305A                       		movea.w	(a2)+,a0
00001E80 365A                       		movea.w	(a2)+,a3
00001E82 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E86                            
00001E86                            loc_1B06:
00001E86 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E8A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E8E 6A00                       		bpl.s	locret_1B64
00001E90 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E96 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E9C 4A38 FE11                  		tst.b	(v_act).w
00001EA0 6700                       		beq.s	loc_1B2E
00001EA2 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001EA8 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001EAE                            
00001EAE                            loc_1B2E:
00001EAE 72FF                       		moveq	#-1,d1
00001EB0 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001EB4 6700                       		beq.s	loc_1B38
00001EB6 4441                       		neg.w	d1
00001EB8                            
00001EB8                            loc_1B38:
00001EB8 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001EBC 0240 0003                  		andi.w	#3,d0
00001EC0 D041                       		add.w	d1,d0
00001EC2 0C40 0003                  		cmpi.w	#3,d0
00001EC6 6500                       		bcs.s	loc_1B52
00001EC8 3200                       		move.w	d0,d1
00001ECA 7000                       		moveq	#0,d0
00001ECC 4A41                       		tst.w	d1
00001ECE 6A00                       		bpl.s	loc_1B52
00001ED0 7002                       		moveq	#2,d0
00001ED2                            
00001ED2                            loc_1B52:
00001ED2 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001ED6 D040                       		add.w	d0,d0
00001ED8 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001EDC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001EE0 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001EE4                            
00001EE4                            locret_1B64:
00001EE4 4E75                       		rts	
00001EE6                            ; End of function PalCycle_SBZ
00001EE6                            ; End of function PalCycle_SBZ
00001EE6                            
00001EE6                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001F06                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001F26                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001F46                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F58                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F6A                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001FD2                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FF6                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00002016                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00002026                            
00002026                            		include	"_inc\SBZ Palette Scripts.asm"
00002026                            ; ---------------------------------------------------------------------------
00002026                            ; Scrap Brain Zone palette cycling script
00002026                            ; ---------------------------------------------------------------------------
00002026                            
00002026                            mSBZp:	macro duration,colors,paladdress,ramaddress
00002026                            	dc.b duration, colors
00002026                            	dc.w paladdress, ramaddress
00002026                            	endm
00002026                            
00002026                            ; duration in frames, number of colors, palette address, RAM address
00002026                            
00002026                            Pal_SBZCycList1:
00002026 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00002028 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
0000202E 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00002034 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
0000203A 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00002040 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002046 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
0000204C 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002052 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002058 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000205E                            end_SBZCycList1:
0000205E                            	even
0000205E                            
0000205E                            Pal_SBZCycList2:
0000205E 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002060 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00002066 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
0000206C 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002072 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002078 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
0000207E 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002084 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000208A                            end_SBZCycList2:
0000208A                            	even
0000208A                            	even
0000208A                            
0000208A                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
0000209A                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
000020AA                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
000020BA                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
000020C6                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
000020D6                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
000020E6                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
00002106                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00002110                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
00002120                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
0000212C                            ; ---------------------------------------------------------------------------
0000212C                            ; Subroutine to	fade in from black
0000212C                            ; ---------------------------------------------------------------------------
0000212C                            
0000212C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212C                            
0000212C                            
0000212C                            PaletteFadeIn:
0000212C 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
00002132                            
00002132                            PalFadeIn_Alt:				; start position and size are already set
00002132 7000                       		moveq	#0,d0
00002134 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002138 1038 F626                  		move.b	(v_pfade_start).w,d0
0000213C D0C0                       		adda.w	d0,a0
0000213E 7200                       		moveq	#cBlack,d1
00002140 1038 F627                  		move.b	(v_pfade_size).w,d0
00002144                            
00002144                            	@fill:
00002144 30C1                       		move.w	d1,(a0)+
00002146 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
0000214A                            
0000214A 383C 0015                  		move.w	#$15,d4
0000214E                            
0000214E                            	@mainloop:
0000214E 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002154 6100 0000                  		bsr.w	WaitForVBla
00002158 6100                       		bsr.s	FadeIn_FromBlack
0000215A 6100 F64A                  		bsr.w	RunPLC
0000215E 51CC FFEE                  		dbf	d4,@mainloop
00002162 4E75                       		rts	
00002164                            ; End of function PaletteFadeIn
00002164                            
00002164                            
00002164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002164                            
00002164                            
00002164                            FadeIn_FromBlack:
00002164 7000                       		moveq	#0,d0
00002166 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000216A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000216E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002172 D0C0                       		adda.w	d0,a0
00002174 D2C0                       		adda.w	d0,a1
00002176 1038 F627                  		move.b	(v_pfade_size).w,d0
0000217A                            
0000217A                            	@addcolour:
0000217A 6100                       		bsr.s	FadeIn_AddColour ; increase colour
0000217C 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002180                            
00002180 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002186 6600                       		bne.s	@exit		; if not, branch
00002188                            
00002188 7000                       		moveq	#0,d0
0000218A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000218E 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002192 1038 F626                  		move.b	(v_pfade_start).w,d0
00002196 D0C0                       		adda.w	d0,a0
00002198 D2C0                       		adda.w	d0,a1
0000219A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000219E                            
0000219E                            	@addcolour2:
0000219E 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
000021A0 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
000021A4                            
000021A4                            @exit:
000021A4 4E75                       		rts	
000021A6                            ; End of function FadeIn_FromBlack
000021A6                            
000021A6                            
000021A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A6                            
000021A6                            
000021A6                            FadeIn_AddColour:
000021A6                            @addblue:
000021A6 3419                       		move.w	(a1)+,d2
000021A8 3610                       		move.w	(a0),d3
000021AA B642                       		cmp.w	d2,d3		; is colour already at threshold level?
000021AC 6700                       		beq.s	@next		; if yes, branch
000021AE 3203                       		move.w	d3,d1
000021B0 0641 0200                  		addi.w	#$200,d1	; increase blue	value
000021B4 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
000021B6 6200                       		bhi.s	@addgreen	; if yes, branch
000021B8 30C1                       		move.w	d1,(a0)+	; update palette
000021BA 4E75                       		rts	
000021BC                            ; ===========================================================================
000021BC                            
000021BC                            @addgreen:
000021BC 3203                       		move.w	d3,d1
000021BE 0641 0020                  		addi.w	#$20,d1		; increase green value
000021C2 B242                       		cmp.w	d2,d1
000021C4 6200                       		bhi.s	@addred
000021C6 30C1                       		move.w	d1,(a0)+	; update palette
000021C8 4E75                       		rts	
000021CA                            ; ===========================================================================
000021CA                            
000021CA                            @addred:
000021CA 5458                       		addq.w	#2,(a0)+	; increase red value
000021CC 4E75                       		rts	
000021CE                            ; ===========================================================================
000021CE                            
000021CE                            @next:
000021CE 5448                       		addq.w	#2,a0		; next colour
000021D0 4E75                       		rts	
000021D2                            ; End of function FadeIn_AddColour
000021D2                            
000021D2                            
000021D2                            ; ---------------------------------------------------------------------------
000021D2                            ; Subroutine to fade out to black
000021D2                            ; ---------------------------------------------------------------------------
000021D2                            
000021D2                            
000021D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D2                            
000021D2                            
000021D2                            PaletteFadeOut:
000021D2 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000021D8 383C 0015                  		move.w	#$15,d4
000021DC                            
000021DC                            	@mainloop:
000021DC 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000021E2 6100 0000                  		bsr.w	WaitForVBla
000021E6 6100                       		bsr.s	FadeOut_ToBlack
000021E8 6100 F5BC                  		bsr.w	RunPLC
000021EC 51CC FFEE                  		dbf	d4,@mainloop
000021F0 4E75                       		rts	
000021F2                            ; End of function PaletteFadeOut
000021F2                            
000021F2                            
000021F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F2                            
000021F2                            
000021F2                            FadeOut_ToBlack:
000021F2 7000                       		moveq	#0,d0
000021F4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021F8 1038 F626                  		move.b	(v_pfade_start).w,d0
000021FC D0C0                       		adda.w	d0,a0
000021FE 1038 F627                  		move.b	(v_pfade_size).w,d0
00002202                            
00002202                            	@decolour:
00002202 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
00002204 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002208                            
00002208 7000                       		moveq	#0,d0
0000220A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000220E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002212 D0C0                       		adda.w	d0,a0
00002214 1038 F627                  		move.b	(v_pfade_size).w,d0
00002218                            
00002218                            	@decolour2:
00002218 6100                       		bsr.s	FadeOut_DecColour
0000221A 51C8 FFFC                  		dbf	d0,@decolour2
0000221E 4E75                       		rts	
00002220                            ; End of function FadeOut_ToBlack
00002220                            
00002220                            
00002220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002220                            
00002220                            
00002220                            FadeOut_DecColour:
00002220                            @dered:
00002220 3410                       		move.w	(a0),d2
00002222 6700                       		beq.s	@next
00002224 3202                       		move.w	d2,d1
00002226 0241 000E                  		andi.w	#$E,d1
0000222A 6700                       		beq.s	@degreen
0000222C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000222E 4E75                       		rts	
00002230                            ; ===========================================================================
00002230                            
00002230                            @degreen:
00002230 3202                       		move.w	d2,d1
00002232 0241 00E0                  		andi.w	#$E0,d1
00002236 6700                       		beq.s	@deblue
00002238 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
0000223C 4E75                       		rts	
0000223E                            ; ===========================================================================
0000223E                            
0000223E                            @deblue:
0000223E 3202                       		move.w	d2,d1
00002240 0241 0E00                  		andi.w	#$E00,d1
00002244 6700                       		beq.s	@next
00002246 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
0000224A 4E75                       		rts	
0000224C                            ; ===========================================================================
0000224C                            
0000224C                            @next:
0000224C 5448                       		addq.w	#2,a0
0000224E 4E75                       		rts	
00002250                            ; End of function FadeOut_DecColour
00002250                            
00002250                            ; ---------------------------------------------------------------------------
00002250                            ; Subroutine to	fade in from white (Special Stage)
00002250                            ; ---------------------------------------------------------------------------
00002250                            
00002250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002250                            
00002250                            
00002250                            PaletteWhiteIn:
00002250 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002256 7000                       		moveq	#0,d0
00002258 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000225C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002260 D0C0                       		adda.w	d0,a0
00002262 323C 0EEE                  		move.w	#cWhite,d1
00002266 1038 F627                  		move.b	(v_pfade_size).w,d0
0000226A                            
0000226A                            	@fill:
0000226A 30C1                       		move.w	d1,(a0)+
0000226C 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002270                            
00002270 383C 0015                  		move.w	#$15,d4
00002274                            
00002274                            	@mainloop:
00002274 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000227A 6100 0000                  		bsr.w	WaitForVBla
0000227E 6100                       		bsr.s	WhiteIn_FromWhite
00002280 6100 F524                  		bsr.w	RunPLC
00002284 51CC FFEE                  		dbf	d4,@mainloop
00002288 4E75                       		rts	
0000228A                            ; End of function PaletteWhiteIn
0000228A                            
0000228A                            
0000228A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000228A                            
0000228A                            
0000228A                            WhiteIn_FromWhite:
0000228A 7000                       		moveq	#0,d0
0000228C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002290 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002294 1038 F626                  		move.b	(v_pfade_start).w,d0
00002298 D0C0                       		adda.w	d0,a0
0000229A D2C0                       		adda.w	d0,a1
0000229C 1038 F627                  		move.b	(v_pfade_size).w,d0
000022A0                            
000022A0                            	@decolour:
000022A0 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
000022A2 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000022A6                            
000022A6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
000022AC 6600                       		bne.s	@exit		; if not, branch
000022AE 7000                       		moveq	#0,d0
000022B0 41F8 FA80                  		lea	(v_pal_water).w,a0
000022B4 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
000022B8 1038 F626                  		move.b	(v_pfade_start).w,d0
000022BC D0C0                       		adda.w	d0,a0
000022BE D2C0                       		adda.w	d0,a1
000022C0 1038 F627                  		move.b	(v_pfade_size).w,d0
000022C4                            
000022C4                            	@decolour2:
000022C4 6100                       		bsr.s	WhiteIn_DecColour
000022C6 51C8 FFFC                  		dbf	d0,@decolour2
000022CA                            
000022CA                            	@exit:
000022CA 4E75                       		rts	
000022CC                            ; End of function WhiteIn_FromWhite
000022CC                            
000022CC                            
000022CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CC                            
000022CC                            
000022CC                            WhiteIn_DecColour:
000022CC                            @deblue:
000022CC 3419                       		move.w	(a1)+,d2
000022CE 3610                       		move.w	(a0),d3
000022D0 B642                       		cmp.w	d2,d3
000022D2 6700                       		beq.s	@next
000022D4 3203                       		move.w	d3,d1
000022D6 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
000022DA 6500                       		blo.s	@degreen
000022DC B242                       		cmp.w	d2,d1
000022DE 6500                       		blo.s	@degreen
000022E0 30C1                       		move.w	d1,(a0)+
000022E2 4E75                       		rts	
000022E4                            ; ===========================================================================
000022E4                            
000022E4                            @degreen:
000022E4 3203                       		move.w	d3,d1
000022E6 0441 0020                  		subi.w	#$20,d1		; decrease green value
000022EA 6500                       		blo.s	@dered
000022EC B242                       		cmp.w	d2,d1
000022EE 6500                       		blo.s	@dered
000022F0 30C1                       		move.w	d1,(a0)+
000022F2 4E75                       		rts	
000022F4                            ; ===========================================================================
000022F4                            
000022F4                            @dered:
000022F4 5558                       		subq.w	#2,(a0)+	; decrease red value
000022F6 4E75                       		rts	
000022F8                            ; ===========================================================================
000022F8                            
000022F8                            @next:
000022F8 5448                       		addq.w	#2,a0
000022FA 4E75                       		rts	
000022FC                            ; End of function WhiteIn_DecColour
000022FC                            
000022FC                            ; ---------------------------------------------------------------------------
000022FC                            ; Subroutine to fade to white (Special Stage)
000022FC                            ; ---------------------------------------------------------------------------
000022FC                            
000022FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FC                            
000022FC                            
000022FC                            PaletteWhiteOut:
000022FC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002302 383C 0015                  		move.w	#$15,d4
00002306                            
00002306                            	@mainloop:
00002306 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000230C 6100 0000                  		bsr.w	WaitForVBla
00002310 6100                       		bsr.s	WhiteOut_ToWhite
00002312 6100 F492                  		bsr.w	RunPLC
00002316 51CC FFEE                  		dbf	d4,@mainloop
0000231A 4E75                       		rts	
0000231C                            ; End of function PaletteWhiteOut
0000231C                            
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            WhiteOut_ToWhite:
0000231C 7000                       		moveq	#0,d0
0000231E 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002322 1038 F626                  		move.b	(v_pfade_start).w,d0
00002326 D0C0                       		adda.w	d0,a0
00002328 1038 F627                  		move.b	(v_pfade_size).w,d0
0000232C                            
0000232C                            	@addcolour:
0000232C 6100                       		bsr.s	WhiteOut_AddColour
0000232E 51C8 FFFC                  		dbf	d0,@addcolour
00002332                            
00002332 7000                       		moveq	#0,d0
00002334 41F8 FA80                  		lea	(v_pal_water).w,a0
00002338 1038 F626                  		move.b	(v_pfade_start).w,d0
0000233C D0C0                       		adda.w	d0,a0
0000233E 1038 F627                  		move.b	(v_pfade_size).w,d0
00002342                            
00002342                            	@addcolour2:
00002342 6100                       		bsr.s	WhiteOut_AddColour
00002344 51C8 FFFC                  		dbf	d0,@addcolour2
00002348 4E75                       		rts	
0000234A                            ; End of function WhiteOut_ToWhite
0000234A                            
0000234A                            
0000234A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000234A                            
0000234A                            
0000234A                            WhiteOut_AddColour:
0000234A                            @addred:
0000234A 3410                       		move.w	(a0),d2
0000234C 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002350 6700                       		beq.s	@next
00002352 3202                       		move.w	d2,d1
00002354 0241 000E                  		andi.w	#$E,d1
00002358 0C41 000E                  		cmpi.w	#cRed,d1
0000235C 6700                       		beq.s	@addgreen
0000235E 5458                       		addq.w	#2,(a0)+	; increase red value
00002360 4E75                       		rts	
00002362                            ; ===========================================================================
00002362                            
00002362                            @addgreen:
00002362 3202                       		move.w	d2,d1
00002364 0241 00E0                  		andi.w	#$E0,d1
00002368 0C41 00E0                  		cmpi.w	#cGreen,d1
0000236C 6700                       		beq.s	@addblue
0000236E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002372 4E75                       		rts	
00002374                            ; ===========================================================================
00002374                            
00002374                            @addblue:
00002374 3202                       		move.w	d2,d1
00002376 0241 0E00                  		andi.w	#$E00,d1
0000237A 0C41 0E00                  		cmpi.w	#cBlue,d1
0000237E 6700                       		beq.s	@next
00002380 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002384 4E75                       		rts	
00002386                            ; ===========================================================================
00002386                            
00002386                            @next:
00002386 5448                       		addq.w	#2,a0
00002388 4E75                       		rts	
0000238A                            ; End of function WhiteOut_AddColour
0000238A                            
0000238A                            ; ---------------------------------------------------------------------------
0000238A                            ; Palette cycling routine - Sega logo
0000238A                            ; ---------------------------------------------------------------------------
0000238A                            
0000238A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000238A                            
0000238A                            
0000238A                            PalCycle_Sega:
0000238A 4A38 F635                  		tst.b	(v_pcyc_time+1).w
0000238E 6600                       		bne.s	loc_206A
00002390 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002394 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000239A 7205                       		moveq	#5,d1
0000239C 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023A0                            
000023A0                            loc_2020:
000023A0 6A00                       		bpl.s	loc_202A
000023A2 5448                       		addq.w	#2,a0
000023A4 5341                       		subq.w	#1,d1
000023A6 5440                       		addq.w	#2,d0
000023A8 60F6                       		bra.s	loc_2020
000023AA                            ; ===========================================================================
000023AA                            
000023AA                            loc_202A:
000023AA 3400                       		move.w	d0,d2
000023AC 0242 001E                  		andi.w	#$1E,d2
000023B0 6600                       		bne.s	loc_2034
000023B2 5440                       		addq.w	#2,d0
000023B4                            
000023B4                            loc_2034:
000023B4 0C40 0060                  		cmpi.w	#$60,d0
000023B8 6400                       		bhs.s	loc_203E
000023BA 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000023BE                            
000023BE                            loc_203E:
000023BE 5440                       		addq.w	#2,d0
000023C0 51C9 FFE8                  		dbf	d1,loc_202A
000023C4                            
000023C4 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023C8 5440                       		addq.w	#2,d0
000023CA 3400                       		move.w	d0,d2
000023CC 0242 001E                  		andi.w	#$1E,d2
000023D0 6600                       		bne.s	loc_2054
000023D2 5440                       		addq.w	#2,d0
000023D4                            
000023D4                            loc_2054:
000023D4 0C40 0064                  		cmpi.w	#$64,d0
000023D8 6D00                       		blt.s	loc_2062
000023DA 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
000023E0 70F4                       		moveq	#-$C,d0
000023E2                            
000023E2                            loc_2062:
000023E2 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000023E6 7001                       		moveq	#1,d0
000023E8 4E75                       		rts	
000023EA                            ; ===========================================================================
000023EA                            
000023EA                            loc_206A:
000023EA 5338 F634                  		subq.b	#1,(v_pcyc_time).w
000023EE 6A00                       		bpl.s	loc_20BC
000023F0 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000023F6 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023FA 0640 000C                  		addi.w	#$C,d0
000023FE 0C40 0030                  		cmpi.w	#$30,d0
00002402 6500                       		blo.s	loc_2088
00002404 7000                       		moveq	#0,d0
00002406 4E75                       		rts	
00002408                            ; ===========================================================================
00002408                            
00002408                            loc_2088:
00002408 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000240C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002412 41F0 0000                  		lea	(a0,d0.w),a0
00002416 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
0000241A 22D8                       		move.l	(a0)+,(a1)+
0000241C 22D8                       		move.l	(a0)+,(a1)+
0000241E 3298                       		move.w	(a0)+,(a1)
00002420 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002424 7000                       		moveq	#0,d0
00002426 722C                       		moveq	#$2C,d1
00002428                            
00002428                            loc_20A8:
00002428 3400                       		move.w	d0,d2
0000242A 0242 001E                  		andi.w	#$1E,d2
0000242E 6600                       		bne.s	loc_20B2
00002430 5440                       		addq.w	#2,d0
00002432                            
00002432                            loc_20B2:
00002432 3390 0000                  		move.w	(a0),(a1,d0.w)
00002436 5440                       		addq.w	#2,d0
00002438 51C9 FFEE                  		dbf	d1,loc_20A8
0000243C                            
0000243C                            loc_20BC:
0000243C 7001                       		moveq	#1,d0
0000243E 4E75                       		rts	
00002440                            ; End of function PalCycle_Sega
00002440                            
00002440                            ; ===========================================================================
00002440                            
00002440                            Pal_Sega1:	incbin	"palette\Sega1.bin"
0000244C                            Pal_Sega2:	incbin	"palette\Sega2.bin"
0000247C                            
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            ; Subroutines to load palettes
0000247C                            
0000247C                            ; input:
0000247C                            ;	d0 = index number for palette
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            
0000247C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000247C                            
0000247C                            
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            ; Subroutines to load pallets
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            
0000247C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000247C                            
0000247C                            PalLoad1:
0000247C 1238 FE11                  		move.b ($FFFFFE11),d1
00002480 43F9 0000 0000             		lea (PalPointers).l,a1
00002486 0C01 0000                  		cmp.b #0,d1
0000248A 6700 0000                  		beq.w PalLoad1_Continue
0000248E 43F9 0000 0000             		lea (PalPointers2).l,a1
00002494 0C01 0001                  		cmp.b #1,d1
00002498 6700 0000                  		beq.w PalLoad1_Continue
0000249C 43F9 0000 0000             		lea (PalPointers3).l,a1
000024A2                            
000024A2                            PalLoad1_Continue:
000024A2 E748                       		lsl.w #3,d0
000024A4 D2C0                       		adda.w d0,a1
000024A6 2459                       		movea.l (a1)+,a2
000024A8 3659                       		movea.w (a1)+,a3
000024AA D6FC 0080                  		adda.w #$80,a3
000024AE 3E19                       		move.w (a1)+,d7
000024B0                            
000024B0                            loc_2110:
000024B0 26DA                       		move.l (a2)+,(a3)+
000024B2 51CF FFFC                  		dbf d7,loc_2110
000024B6 4E75                       		rts
000024B8                             ; End of function PalLoad1
000024B8                            
000024B8                            
000024B8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024B8                            
000024B8                            PalLoad2:
000024B8 1238 FE11                  		move.b ($FFFFFE11),d1
000024BC 43F9 0000 0000             		lea (PalPointers).l,a1
000024C2 0C01 0000                  		cmp.b #0,d1
000024C6 6700 0000                  		beq.w PalLoad2_Continue
000024CA 43F9 0000 0000             		lea (PalPointers2).l,a1
000024D0 0C01 0001                  		cmp.b #1,d1
000024D4 6700 0000                  		beq.w PalLoad2_Continue
000024D8 43F9 0000 0000             		lea (PalPointers3).l,a1
000024DE                            
000024DE                            
000024DE                            PalLoad2_Continue:
000024DE E748                       		lsl.w #3,d0
000024E0 D2C0                       		adda.w d0,a1
000024E2 2459                       		movea.l (a1)+,a2
000024E4 3659                       		movea.w (a1)+,a3
000024E6 3E19                       		move.w (a1)+,d7
000024E8                            
000024E8                            loc_2128:
000024E8 26DA                       		move.l (a2)+,(a3)+
000024EA 51CF FFFC                  		dbf d7,loc_2128
000024EE 4E75                       		rts
000024F0                            ; End of function PalLoad2
000024F0                            
000024F0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000024F0                            
000024F0                            
000024F0                            PalLoad_Loop: ;Quick load - TIS
000024F0                                    
000024F0 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000024F2 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000024F6 4E75                               rts
000024F8                            
000024F8                            ; ---------------------------------------------------------------------------
000024F8                            ; Underwater pallet loading subroutine
000024F8                            ; ---------------------------------------------------------------------------
000024F8                            
000024F8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024F8                            
000024F8                            PalLoad3_Water:
000024F8 1238 FE11                  		move.b ($FFFFFE11),d1
000024FC 43F9 0000 0000             		lea (PalPointers).l,a1
00002502 0C01 0000                  		cmp.b #0,d1
00002506 6700 0000                  		beq.w PalLoad3_Continue
0000250A 43F9 0000 0000             		lea (PalPointers2).l,a1
00002510 0C01 0001                  		cmp.b #1,d1
00002514 6700 0000                  		beq.w PalLoad3_Continue
00002518 43F9 0000 0000             		lea (PalPointers3).l,a1
0000251E                            
0000251E                            PalLoad3_Continue:
0000251E E748                       		lsl.w #3,d0
00002520 D2C0                       		adda.w d0,a1
00002522 2459                       		movea.l (a1)+,a2
00002524 3659                       		movea.w (a1)+,a3
00002526 96FC 0080                  		suba.w #$80,a3
0000252A 3E19                       		move.w (a1)+,d7
0000252C                            
0000252C                            loc_2144:
0000252C 26DA                       		move.l (a2)+,(a3)+
0000252E 51CF FFFC                  		dbf d7,loc_2144
00002532 4E75                       		rts
00002534                            ; End of function PalLoad3_Water
00002534                            
00002534                            
00002534                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002534                            
00002534                            
00002534                            PalLoad4_Water:
00002534 1238 FE11                  		move.b ($FFFFFE11),d1
00002538 43F9 0000 0000             		lea (PalPointers).l,a1
0000253E 0C01 0000                  		cmp.b #0,d1
00002542 6700 0000                  		beq.w PalLoad4_Continue
00002546 43F9 0000 0000             		lea (PalPointers2).l,a1
0000254C 0C01 0001                  		cmp.b #1,d1
00002550 6700 0000                  		beq.w PalLoad4_Continue
00002554 43F9 0000 0000             		lea (PalPointers3).l,a1
0000255A                            
0000255A                            PalLoad4_Continue:
0000255A E748                       		lsl.w #3,d0
0000255C D2C0                       		adda.w d0,a1
0000255E 2459                       		movea.l (a1)+,a2
00002560 3659                       		movea.w (a1)+,a3
00002562 96FC 0100                  		suba.w #$100,a3
00002566 3E19                       		move.w (a1)+,d7
00002568                            loc_2160:
00002568 26DA                       		move.l (a2)+,(a3)+
0000256A 51CF FFFC                  		dbf d7,loc_2160
0000256E 4E75                       		rts
00002570                             ; End of function PalLoad4_Water
00002570                            
00002570                            ; ===========================================================================
00002570                            
00002570                            		include	"_inc\Palette Pointers.asm"
00002570                            ; ---------------------------------------------------------------------------
00002570                            ; Palette pointers
00002570                            ; ---------------------------------------------------------------------------
00002570                            
00002570                            palp:	macro paladdress,ramaddress,colors
00002570                            	dc.l paladdress
00002570                            	dc.w ramaddress, (colors>>1)-1
00002570                            	endm
00002570                            
00002570                            PalPointers:
00002570                            
00002570                            ; palette address, RAM address, colors
00002570                            
00002570 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002578 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002580 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002588 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002590                            Pal_Levels:
00002590 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002598 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
000025A0 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
000025A8 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
000025B0 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
000025B8 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000025C0 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000025C8 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
000025D0 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
000025D8 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
000025E0 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
000025E8 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000025F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000025F8 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002600 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002608 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002610 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
00002618 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
00002620 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
00002628 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
00002630 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
00002638 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
00002640 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
00002648 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
00002650 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002658 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002660 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002668 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (21) - Sonic Underwater (Beta)
00002670 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (22) - Sonic Underwater (Midnight)
00002678 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (23) - Sonic Underwater (C2)
00002680 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (24) - Sonic Underwater (Crackers)
00002688 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (25) - Sonic Underwater (RHS)
00002690 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (26) - Sonic Underwater (Socket)
00002698 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (27) - Sonic Underwater (Cringe)
000026A0 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (28) - Sonic Underwater (Darker)
000026A8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
000026B0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (21) - Sonic Underwater (Beta)
000026B8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (22) - Sonic Underwater (Midnight)
000026C0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (23) - Sonic Underwater (C2)
000026C8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (24) - Sonic Underwater (Crackers)
000026D0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (25) - Sonic Underwater (RHS)
000026D8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (26) - Sonic Underwater (Socket)
000026E0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (27) - Sonic Underwater (Cringe)
000026E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (28) - Sonic Underwater (Darker)
000026F0                            			even
000026F0                            
000026F0                            PalPointers2:
000026F0                            
000026F0                            ; palette address, RAM address, colors
000026F0                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000026F0 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000026F8 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002700 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002708 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002710                            Pal_Levels_2:
00002710 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
00002718 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
00002720 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
00002728 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
00002730 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
00002738 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002740 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002748 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002750 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002758 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002760 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002768 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002770 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002778 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002780 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002788 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002790 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002798 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000027A0 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000027A8 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000027B0 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000027B8 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000027C0 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000027C8 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
000027D0 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
000027D8 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
000027E0 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
000027E8 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
000027F0 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
000027F8 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
00002800 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
00002808 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
00002810 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
00002818 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
00002820 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
00002828 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
00002830 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
00002838 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
00002840 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
00002848 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002850 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002858 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002860 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002868 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
00002870                            			even
00002870                            			
00002870                            PalPointers3:
00002870                            			
00002870                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002870 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002878 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002880 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002888 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002890                            Pal_Levels_3:
00002890 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002898 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
000028A0 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
000028A8 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
000028B0 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
000028B8 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000028C0 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000028C8 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
000028D0 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
000028D8 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
000028E0 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
000028E8 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000028F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000028F8 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002900 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002908 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002910 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
00002918 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002920 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002928 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002930 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002938 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002940 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002948 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002950 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002958 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002960 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002968 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
00002970 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
00002978 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
00002980 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
00002988 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
00002990 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
00002998 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
000029A0 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
000029A8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
000029B0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
000029B8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
000029C0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
000029C8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
000029D0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
000029D8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
000029E0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
000029E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
000029F0                            			even
000029F0                            
000029F0                            
000029F0 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
000029F0 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
000029F0 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
000029F0 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
000029F0 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
000029F0 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
000029F0 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
000029F0 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
000029F0 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
000029F0 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
000029F0 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
000029F0 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
000029F0 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
000029F0 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
000029F0 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
000029F0 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029F0 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
000029F0 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
000029F0 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
000029F0 =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
000029F0 =00000014                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
000029F0 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
000029F0 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
000029F0 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
000029F0 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
000029F0 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
000029F0 =0000003B                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
000029F0 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029F0 =00000064                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
000029F0 =00000065                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
000029F0 =00000066                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
000029F0 =00000067                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
000029F0 =00000068                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
000029F0 =0000006B                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
000029F0 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029F0 =00000015                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
000029F0 =00000016                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
000029F0 =00000017                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
000029F0 =00000018                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
000029F0 =00000019                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
000029F0 =0000001A                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
000029F0 =0000001B                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
000029F0 =0000001C                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
000029F0 =0000001D                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
000029F0 =0000001E                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
000029F0 =0000001F                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
000029F0 =00000020                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
000029F0 =00000021                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
000029F0 =00000022                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
000029F0 =00000023                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
000029F0 =00000024                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
000029F0 =00000025                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
000029F0 =00000026                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
000029F0 =00000027                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
000029F0 =00000028                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
000029F0 =00000029                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
000029F0 =0000002A                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
000029F0 =0000002B                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
000029F0 =0000002C                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
000029F0 =0000002D                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
000029F0 =0000002E                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
000029F0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029F0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029F0                            		
000029F0                            		;include	"_inc\Palette Pointers2.asm"
000029F0                            		
000029F0                            		;include	"_inc\Palette Pointers3.asm"
000029F0                            		
000029F0                            
000029F0                            ; ---------------------------------------------------------------------------
000029F0                            ; Palette data
000029F0                            ; ---------------------------------------------------------------------------
000029F0                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002A70                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002AF0                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002B70                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002B90                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002BF0                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002C50                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002CB0                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002D10                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002D70                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002DD0                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002E50                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002ED0                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002F50                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00002FB0                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00003010                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003070                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
000030D0                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
00003130                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003190                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000031F0                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003250                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
000032B0                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
00003310                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003370                            Pal_Special:	incbin	"palette\Special Stage.bin"
000033F0                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003450                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
000034D0                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000034F0                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
00003510                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
00003530                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
000035B0                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000035F0                            Pal_Ending:	incbin	"palette\Ending.bin"
00003670                            Pal_Options:	incbin	"palette\Options.bin"
000036F0                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
00003710                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
00003730                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003750                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003770                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003790                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
000037B0                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
000037D0                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000037F0                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
00003810                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
00003830                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003850                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003870                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003890                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
000038B0                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
000038D0                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
000038F0                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
00003910                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
00003930                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003950                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003970                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003990                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
000039B0                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
000039D0                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
000039F0                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
00003A10                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
00003A30                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003A50                            ; ---------------------------------------------------------------------------
00003A50                            ; Subroutine to	wait for VBlank routines to complete
00003A50                            ; ---------------------------------------------------------------------------
00003A50                            
00003A50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A50                            
00003A50                            
00003A50                            WaitForVBla:
00003A50 46FC 2300                  		enable_ints
00003A54                            
00003A54                            	@wait:
00003A54 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003A58 66FA                       		bne.s	@wait		; if not, branch
00003A5A 4E75                       		rts	
00003A5C                            ; End of function WaitForVBla
00003A5C                            
00003A5C                            		include	"_incObj\sub RandomNumber.asm"
00003A5C                            ; ---------------------------------------------------------------------------
00003A5C                            ; Subroutine to	generate a pseudo-random number	in d0
00003A5C                            ; ---------------------------------------------------------------------------
00003A5C                            
00003A5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A5C                            
00003A5C                            
00003A5C                            RandomNumber:
00003A5C 2238 F636                  		move.l	(v_random).w,d1
00003A60 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003A62 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003A68                            
00003A68                            	@scramble:
00003A68 2001                       		move.l	d1,d0
00003A6A E581                       		asl.l	#2,d1
00003A6C D280                       		add.l	d0,d1
00003A6E E781                       		asl.l	#3,d1
00003A70 D280                       		add.l	d0,d1
00003A72 3001                       		move.w	d1,d0
00003A74 4841                       		swap	d1
00003A76 D041                       		add.w	d1,d0
00003A78 3200                       		move.w	d0,d1
00003A7A 4841                       		swap	d1
00003A7C 21C1 F636                  		move.l	d1,(v_random).w
00003A80 4E75                       		rts	
00003A80 4E75                       		rts	
00003A82                            		include	"_incObj\sub CalcSine.asm"
00003A82                            ; ---------------------------------------------------------------------------
00003A82                            ; Subroutine calculate a sine
00003A82                            
00003A82                            ; input:
00003A82                            ;	d0 = angle
00003A82                            
00003A82                            ; output:
00003A82                            ;	d0 = sine
00003A82                            ;	d1 = cosine
00003A82                            ; ---------------------------------------------------------------------------
00003A82                            
00003A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A82                            
00003A82                            
00003A82                            CalcSine:
00003A82 0240 00FF                          andi.w  #$FF,d0
00003A86 5040                               addq.w  #8,d0
00003A88 D040                               add.w   d0,d0
00003A8A 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003A8E 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003A92 4E75                               rts
00003A94                            ; End of function CalcSine
00003A94                            
00003A94                            ; ===========================================================================
00003A94                            
00003A94                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003D14                            
00003D14                            ; ===========================================================================
00003D14                            ; ===========================================================================
00003D14                            		include	"_incObj\sub CalcAngle.asm"
00003D14                            ; ---------------------------------------------------------------------------
00003D14                            ; Subroutine calculate an angle
00003D14                            
00003D14                            ; input:
00003D14                            ;	d1 = x-axis distance
00003D14                            ;	d2 = y-axis distance
00003D14                            
00003D14                            ; output:
00003D14                            ;	d0 = angle
00003D14                            ; ---------------------------------------------------------------------------
00003D14                            
00003D14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003D14                            
00003D14                            
00003D14                            CalcAngle:
00003D14 48E7 1800                  		movem.l	d3-d4,-(sp)
00003D18 7600                       		moveq	#0,d3
00003D1A 7800                       		moveq	#0,d4
00003D1C 3601                       		move.w	d1,d3
00003D1E 3802                       		move.w	d2,d4
00003D20 8843                       		or.w	d3,d4
00003D22 6700                       		beq.s	loc_2D04
00003D24 3802                       		move.w	d2,d4
00003D26 4A43                       		tst.w	d3
00003D28 6A00 0000                  		bpl.w	loc_2CC2
00003D2C 4443                       		neg.w	d3
00003D2E                            
00003D2E                            loc_2CC2:
00003D2E 4A44                       		tst.w	d4
00003D30 6A00 0000                  		bpl.w	loc_2CCA
00003D34 4444                       		neg.w	d4
00003D36                            
00003D36                            loc_2CCA:
00003D36 B843                       		cmp.w	d3,d4
00003D38 6400 0000                  		bcc.w	loc_2CDC
00003D3C E18C                       		lsl.l	#8,d4
00003D3E 88C3                       		divu.w	d3,d4
00003D40 7000                       		moveq	#0,d0
00003D42 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003D46 6000                       		bra.s	loc_2CE6
00003D48                            ; ===========================================================================
00003D48                            
00003D48                            loc_2CDC:
00003D48 E18B                       		lsl.l	#8,d3
00003D4A 86C4                       		divu.w	d4,d3
00003D4C 7040                       		moveq	#$40,d0
00003D4E 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003D52                            
00003D52                            loc_2CE6:
00003D52 4A41                       		tst.w	d1
00003D54 6A00 0000                  		bpl.w	loc_2CF2
00003D58 4440                       		neg.w	d0
00003D5A 0640 0080                  		addi.w	#$80,d0
00003D5E                            
00003D5E                            loc_2CF2:
00003D5E 4A42                       		tst.w	d2
00003D60 6A00 0000                  		bpl.w	loc_2CFE
00003D64 4440                       		neg.w	d0
00003D66 0640 0100                  		addi.w	#$100,d0
00003D6A                            
00003D6A                            loc_2CFE:
00003D6A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D6E 4E75                       		rts	
00003D70                            ; ===========================================================================
00003D70                            
00003D70                            loc_2D04:
00003D70 303C 0040                  		move.w	#$40,d0
00003D74 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D78 4E75                       		rts	
00003D7A                            ; End of function CalcAngle
00003D7A                            
00003D7A                            ; ===========================================================================
00003D7A                            
00003D7A                            Angle_Data:	incbin	"misc\angles.bin"
00003E7C                            
00003E7C                            ; ===========================================================================
00003E7C                            ; ===========================================================================
00003E7C                            
00003E7C                            ; ---------------------------------------------------------------------------
00003E7C                            ; Sega screen
00003E7C                            ; ---------------------------------------------------------------------------
00003E7C                            
00003E7C                            GM_Sega:
00003E84 6100 D912                  		bsr.w	ClearPLC
00003E88 6100 E348                  		bsr.w	PaletteFadeOut
00003E8C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003E92 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003E96 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003E9A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003E9E 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003EA2 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003EA6 4238 F64E                  		clr.b	(f_wtr_state).w
00003EAA 46FC 2700                  		disable_ints
00003EAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003EB2 0200 00BF                  		andi.b	#$BF,d0
00003EB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003EBC 6100 D312                  		bsr.w	ClearScreen
00003ECA 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003ED0 6100 D47C                  		bsr.w	NemDec
00003ED4 43F9 00FF 0000             		lea	($FF0000).l,a1
00003EDA 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003EE0 303C 0000                  		move.w	#0,d0
00003EE4 6100 D9F2                  		bsr.w	EniDec
00003EE8                            
00003EE8 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003EFC 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003F10                            
00003F10 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003F14 6B00                       			bmi.s   @loadpal
00003F16 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003F2A                            
00003F2A                            	@loadpal:
00003F2A 7000                       		moveq	#palid_SegaBG,d0
00003F2C 6100 E58A                  		bsr.w	PalLoad2	; load Sega logo palette
00003F30 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003F36 7E3F                               moveq    #$3F,d7
00003F38                             
00003F38                                .loop:
00003F38 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003F3C 51CF FFFA                          dbf        d7,.loop
00003F40 6100 E1EA                          bsr.w     PaletteFadeIn ; added to allow fade in			
00003F44 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00003F4A 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00003F50 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00003F56 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00003F5C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F60 0000 0040                  		ori.b	#$40,d0
00003F64 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F6A                            
00003F6A                            Sega_WaitPal:
00003F6A 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F70 6100 FADE                  		bsr.w	WaitForVBla
00003F74 6100 E414                  		bsr.w	PalCycle_Sega
00003F78 66F0                       		bne.s	Sega_WaitPal
00003F7A                            
00003F82 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00003F88 6100 FAC6                  		bsr.w	WaitForVBla
00003F8C 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00003F92                            
00003F92                            Sega_WaitEnd:
00003F92 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F98 6100 FAB6                  		bsr.w	WaitForVBla
00003F9C 4A78 F614                  		tst.w	(v_demolength).w
00003FA0 6700                       		beq.s	Sega_GotoTitle
00003FA2 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00003FA8 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003FAA                            
00003FAA                            Sega_GotoTitle:
00003FAA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00003FB0 4E75                       		rts	
00003FB2                            ; ===========================================================================
00003FB2                            
00003FB2                            ; ---------------------------------------------------------------------------
00003FB2                            ; Title	screen
00003FB2                            ; ---------------------------------------------------------------------------
00003FB2                            
00003FB2                            GM_Title:
00003FBA 6100 D7DC                  		bsr.w	ClearPLC
00003FBE 6100 E212                  		bsr.w	PaletteFadeOut
00003FC2 46FC 2700                  		disable_ints
00003FC6 6100 D28E                  		bsr.w	SoundDriverLoad
00003FCA 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003FD0 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00003FD4 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003FD8 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003FDC 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00003FE0 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00003FE4 3CBC 8B03                  		move.w	#$8B03,(a6)
00003FE8 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00003FEC 4238 F64E                  		clr.b	(f_wtr_state).w
00003FF0 6100 D1DE                  		bsr.w	ClearScreen
00003FF4 4EB9 0000 0000             		jsr		SHC2022 
00003FFA                            
00003FFA 43F8 D000                  		lea	(v_objspace).w,a1
00003FFE 7000                       		moveq	#0,d0
00004000 323C 07FF                  		move.w	#$7FF,d1
00004004                            
00004004                            	Tit_ClrObj1:
00004004 22C0                       		move.l	d0,(a1)+
00004006 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
0000400A                            
00004014 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000401A 6100 D332                  		bsr.w	NemDec
00004028 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000402E 6100 D31E                  		bsr.w	NemDec
00004032 43F9 00FF 0000             		lea	($FF0000).l,a1
00004038 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000403E 303C 0000                  		move.w	#0,d0
00004042 6100 D894                  		bsr.w	EniDec
00004046                            
00004046 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
0000405A                            
0000405A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000405E 7000                       		moveq	#cBlack,d0
00004060 323C 001F                  		move.w	#$1F,d1
00004064                            
00004064                            	Tit_ClrPal:
00004064 22C0                       		move.l	d0,(a1)+
00004066 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
0000406A                            
0000406A 4EB9 0000 0000             		jsr		LoadPlayerPal
00004070 6100 E40A                  		bsr.w	PalLoad1
00004074 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
0000407A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004080 4EB9 0000 0000             		jsr	(BuildSprites).l
00004086 6100 E0A4                  		bsr.w	PaletteFadeIn
0000408A 46FC 2700                  		disable_ints
00004098 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000409E 6100 D2AE                  		bsr.w	NemDec
000040AC 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000040B2 6100 D29A                  		bsr.w	NemDec
000040C0 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
000040C6 6100 D286                  		bsr.w 	NemDec
000040CA 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000040D8 4BF9 0000 059E             		lea	(Art_Text).l,a5	; load level select font
000040DE 323C 028F                  		move.w	#$28F,d1
000040E2                            
000040E2                            	Tit_LoadText:
000040E2 3C9D                       		move.w	(a5)+,(a6)
000040E4 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
000040E8                            
000040E8 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
000040EE 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
000040F4 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
000040FA 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
00004100 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
00004106 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
0000410C 6100 0000                  		bsr.w	LevelSizeLoad
00004110 6100 0000                  		bsr.w	DeformLayers
00004114 43F8 B000                  		lea	(v_16x16).w,a1
00004118 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
0000411E 303C 0000                  		move.w	#0,d0
00004122 6100 D7B4                  		bsr.w	EniDec
00004126 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
0000412C 43F9 00FF 0000             		lea	(v_256x256).l,a1
00004132 6100 D922                  		bsr.w	KosDec
00004136 6100 0000                  		bsr.w	LevelLayoutLoad
0000413A 6100 E096                  		bsr.w	PaletteFadeOut
0000413E 46FC 2700                  		disable_ints
00004142 6100 D08C                  		bsr.w	ClearScreen
00004146 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
0000414C 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004152 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00004156 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000415A 343C 6000                  		move.w	#$6000,d2
0000415E 6100 0000                  		bsr.w	DrawChunks
00004162 43F9 00FF 0000             		lea	($FF0000).l,a1
00004168 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000416E 303C 0000                  		move.w	#0,d0
00004172 6100 D764                  		bsr.w	EniDec
00004176                            
00004176 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
0000418A                            
00004194 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
0000419A 6100 D1B2                  		bsr.w	NemDec
0000419E 7001                       		moveq	#palid_Title,d0	; load title screen palette
000041A0 6100 E2DA                  		bsr.w	PalLoad1
000041AC 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
000041B2 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
000041B8 43F8 D080                  		lea	(v_objspace+$80).w,a1
000041BC 7000                       		moveq	#0,d0
000041BE 323C 0007                  		move.w	#7,d1
000041C2                            
000041C2                            	Tit_ClrObj2:
000041C2 22C0                       		move.l	d0,(a1)+
000041C4 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
000041C8                            
000041C8 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
000041CE 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
000041D4 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
000041D8                            
000041D8 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
000041DC 6A00                       			bpl.s   @isjap		; if yes, branch
000041DE                            
000041DE 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
000041E4 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
000041EA                            	@isjap:
000041EA 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
000041F0 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
000041F6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041FC 6100 0000                  		bsr.w	DeformLayers
00004200 4EB9 0000 0000             		jsr	(BuildSprites).l
00004206 7000                       		moveq	#plcid_Main,d0
00004208 6100 D562                  		bsr.w	NewPLC
0000420C 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
00004212 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
00004218 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000421C 0000 0040                  		ori.b	#$40,d0
00004220 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004226 6100 DF04                  		bsr.w	PaletteFadeIn
0000422A                            
0000422A                            Tit_MainLoop:
0000422A 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004230 6100 F81E                  		bsr.w	WaitForVBla
00004234 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000423A 6100 0000                  		bsr.w	DeformLayers
0000423E 4EB9 0000 0000             		jsr	(BuildSprites).l
00004244 6100 DAF8                  		bsr.w	PCycle_Title
00004248 6100 D55C                  		bsr.w	RunPLC
0000424C 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004250 5440                       		addq.w	#2,d0
00004252 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
00004256 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
0000425A 6500                       		blo.s	Tit_ChkRegion	; if not, branch
0000425C                            
0000425C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004262 4E75                       		rts	
00004264                            ; ===========================================================================
00004264                            
00004264                            Tit_ChkRegion:
00004264 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00004268 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
0000426A                            
0000426A 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00004270 6000                       		bra.s	Tit_EnterCheat
00004272                            
00004272                            	Tit_RegionJap:
00004272 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00004278                            
00004278                            Tit_EnterCheat:
00004278 3038 FFE4                  		move.w	(v_title_dcount).w,d0
0000427C D0C0                       		adda.w	d0,a0
0000427E 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00004282 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
00004286 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004288 6600                       		bne.s	Tit_ResetCheat	; if not, branch
0000428A 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
0000428E 4A00                       		tst.b	d0
00004290 6600                       		bne.s	Tit_CountC
00004292 41F8 FFE0                  		lea	(f_levselcheat).w,a0
00004296 3238 FFE6                  		move.w	(v_title_ccount).w,d1
0000429A E249                       		lsr.w	#1,d1
0000429C 0241 0003                  		andi.w	#3,d1
000042A0 6700                       		beq.s	Tit_PlayRing
000042A2 4A38 FFF8                  		tst.b	(v_megadrive).w
000042A6 6A00                       		bpl.s	Tit_PlayRing
000042A8 7201                       		moveq	#1,d1
000042AA 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
000042AE                            
000042AE                            	Tit_PlayRing:
000042AE 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000042BC 6000                       		bra.s	Tit_CountC
000042BE                            ; ===========================================================================
000042BE                            
000042BE                            Tit_ResetCheat:
000042BE 4A00                       		tst.b	d0
000042C0 6700                       		beq.s	Tit_CountC
000042C2 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
000042C8 6700                       		beq.s	Tit_CountC
000042CA 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
000042D0                            
000042D0                            Tit_CountC:
000042D0 1038 F605                  		move.b	(v_jpadpress1).w,d0
000042D4 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
000042D8 6700                       		beq.s	loc_3230	; if not, branch
000042DA 5278 FFE6                  		addq.w	#1,(v_title_ccount).w ; increment C counter
000042DE                            		
000042DE                            loc_3230:
000042DE 4A78 F614                  		tst.w	(v_demolength).w
000042E2 6700 0000                  		beq.w	GotoDemo
000042E6 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000042EC 6700 FF3C                  		beq.w	Tit_MainLoop	; if not, branch
000042F0                            
000042F0                            Tit_ChkLevSel:
000042F0 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
000042F4 6700 0000                  		beq.w	@cont	; if not, play level
000042F8 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
000042FE 6700 0000                  		beq.w	@cont	; if not, play level
00004302 6000 0000                  		bra.w	Tit_LevelSelect
00004306                            
00004306                            	@cont:		
00004306 7400                       		moveq   #0,d2
00004308 1438 FFB0                  		move.b   (Title_screen_option).w,d2   ; load the choice
0000430C D442                       		add.w   d2,d2            ; multiply by 2
0000430E 343B 2000                  		move.w   Tit_Menu_Choice(pc,d2.w),d2
00004312 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
00004316                            
00004316                            ; ===========================================================================
00004316                            Tit_Menu_Choice:
00004316 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
00004318 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
0000431A                            ; ===========================================================================
0000431A                            
0000431A                            Menu_Options:
0000431A 11FC 0020 F600             	move.b	#$20,(v_gamemode).w
00004320 4E75                       	rts
00004322                            
00004322                            Tit_LevelSelect:	
00004322 7002                       		moveq	#palid_LevelSel,d0
00004324 6100 E192                  		bsr.w	PalLoad2	; load level select palette
00004328 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000432C 7000                       		moveq	#0,d0
0000432E 323C 00DF                  		move.w	#$DF,d1
00004332                            
00004332                            	Tit_ClrScroll1:
00004332 22C0                       		move.l	d0,(a1)+
00004334 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
00004338                            
00004338 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
0000433C 46FC 2700                  		disable_ints
00004340 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004350 323C 03FF                  		move.w	#$3FF,d1
00004354                            
00004354                            	Tit_ClrScroll2:
00004354 2C80                       		move.l	d0,(a6)
00004356 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
0000435A                            
0000435A 6100 0000                  		bsr.w	LevSelTextLoad
0000435E                            
0000435E                            ; ---------------------------------------------------------------------------
0000435E                            ; Level	Select
0000435E                            ; ---------------------------------------------------------------------------
0000435E                            
0000435E                            LevelSelect:
0000435E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004364 6100 F6EA                  		bsr.w	WaitForVBla
00004368 6100 0000                  		bsr.w	LevSelControls
0000436C 6100 D438                  		bsr.w	RunPLC
00004370 4AB8 F680                  		tst.l	(v_plc_buffer).w
00004374 66E8                       		bne.s	LevelSelect
00004376 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
0000437C 67E0                       		beq.s	LevelSelect	; if not, branch
0000437E 3038 FF82                  		move.w	(v_levselitem).w,d0
00004382 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004386 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004388 3038 FF84                  		move.w	(v_levselsound).w,d0
0000438C 0640 0080                  		addi.w	#$80,d0
00004390 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00004394 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004396 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
0000439A 6700                       		beq.s	LevSel_Credits	; if yes, branch
0000439C                            
0000439C                            LevSel_PlaySnd:
0000439C 6100 CF02                  		bsr.w	PlaySound_Special
000043A0 60BC                       		bra.s	LevelSelect
000043A2                            ; ===========================================================================
000043A2                            
000043A2                            LevSel_Ending:
000043A2 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
000043A8 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
000043AE 4E75                       		rts	
000043B0                            ; ===========================================================================
000043B0                            
000043B0                            LevSel_Credits:
000043B0 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
000043BE 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
000043C4 4E75                       		rts	
000043C6                            ; ===========================================================================
000043C6                            
000043C6                            LevSel_Level_SS:
000043C6 D040                       		add.w	d0,d0
000043C8 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
000043CC 6B00 FF90                  		bmi.w	LevelSelect
000043D0 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
000043D4 6600                       		bne.s	LevSel_Level	; if not, branch
000043D6 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000043DC 4278 FE10                  		clr.w	(v_zone).w	; clear	level
000043E0 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000043E6 7000                       		moveq	#0,d0
000043E8 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000043EC 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000043F0 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000043F4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000043FC 4E75                       		rts	
000043FE                            ; ===========================================================================
000043FE                            
000043FE                            LevSel_Level:
000043FE 0240 3FFF                  		andi.w	#$3FFF,d0
00004402 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
00004406                            
00004406                            PlayLevel:
00004406 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
0000440C 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004412 7000                       		moveq	#0,d0
00004414 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004418 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000441C 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004420 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
00004424 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
00004428 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
0000442C 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
00004430 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
00004436 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004446 4E75                       		rts	
00004448                            ; ===========================================================================
00004448                            ; ---------------------------------------------------------------------------
00004448                            ; Level	select - level pointers
00004448                            ; ---------------------------------------------------------------------------
00004448                            		; correct level order
00004448 0000                       		dc.b id_GHZ, 0
0000444A 0001                       		dc.b id_GHZ, 1
0000444C 0002                       		dc.b id_GHZ, 2
0000444E 0200                       		dc.b id_MZ, 0
00004450 0201                       		dc.b id_MZ, 1
00004452 0202                       		dc.b id_MZ, 2
00004454 0400                       		dc.b id_SYZ, 0
00004456 0401                       		dc.b id_SYZ, 1
00004458 0402                       		dc.b id_SYZ, 2
0000445A 0100                       		dc.b id_LZ, 0
0000445C 0101                       		dc.b id_LZ, 1
0000445E 0102                       		dc.b id_LZ, 2
00004460 0300                       		dc.b id_SLZ, 0
00004462 0301                       		dc.b id_SLZ, 1
00004464 0302                       		dc.b id_SLZ, 2
00004466 0500                       		dc.b id_SBZ, 0
00004468 0501                       		dc.b id_SBZ, 1
0000446A 0103                       		dc.b id_LZ, 3
0000446C 0502                       		dc.b id_SBZ, 2
0000446E 0700                       		dc.b id_SS, 0		; Special Stage
00004470 8000                       		dc.w $8000		; Sound Test
00004472                            		even
00004472                            ; ---------------------------------------------------------------------------
00004472                            ; Level	select codes
00004472                            ; ---------------------------------------------------------------------------
00004472 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
0000447A                            		even
0000447A                            
0000447A 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
00004480                            		even
00004480                            ; ===========================================================================
00004480                            
00004480                            ; ---------------------------------------------------------------------------
00004480                            ; Demo mode
00004480                            ; ---------------------------------------------------------------------------
00004480                            
00004480                            GotoDemo:
00004480 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004486                            
00004486                            loc_33B6:
00004486 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000448C 6100 F5C2                  		bsr.w	WaitForVBla
00004490 6100 0000                  		bsr.w	DeformLayers
00004494 6100 D888                  		bsr.w	PaletteCycle
00004498 6100 D30C                  		bsr.w	RunPLC
0000449C 3038 D008                  		move.w	(v_objspace+obX).w,d0
000044A0 5440                       		addq.w	#2,d0
000044A2 31C0 D008                  		move.w	d0,(v_objspace+obX).w
000044A6 0C40 1C00                  		cmpi.w	#$1C00,d0
000044AA 6500                       		blo.s	loc_33E4
000044AC 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
000044B2 4E75                       		rts	
000044B4                            ; ===========================================================================
000044B4                            
000044B4                            loc_33E4:
000044B4 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000044BA 6600 FE34                  		bne.w	Tit_ChkLevSel	; if yes, branch
000044BE 4A78 F614                  		tst.w	(v_demolength).w
000044C2 6600 FFC2                  		bne.w	loc_33B6
000044CE 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
000044D2 0240 0007                  		andi.w	#7,d0
000044D6 D040                       		add.w	d0,d0
000044D8 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000044DC 31C0 FE10                  		move.w	d0,(v_zone).w
000044E0 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
000044E4 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
000044EA 6500                       		blo.s	loc_3422	; if yes, branch
000044EC 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
000044F2                            
000044F2                            loc_3422:
000044F2 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
000044F8 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
000044FE 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004502 6600                       		bne.s	Demo_Level	; if not, branch
00004504 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
0000450A 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
0000450E 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
00004512                            
00004512                            Demo_Level:
00004512 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004518 7000                       		moveq	#0,d0
0000451A 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000451E 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004522 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004526 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000452E 4E75                       		rts	
00004530                            ; ===========================================================================
00004530                            ; ---------------------------------------------------------------------------
00004530                            ; Levels used in demos
00004530                            ; ---------------------------------------------------------------------------
00004530                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
00004538                            		even
00004538                            
00004538                            ; ---------------------------------------------------------------------------
00004538                            ; Subroutine to	change what you're selecting in the level select
00004538                            ; ---------------------------------------------------------------------------
00004538                            
00004538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004538                            
00004538                            
00004538                            LevSelControls:
00004538 1238 F605                  		move.b	(v_jpadpress1).w,d1
0000453C 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
00004540 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004542 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
00004546 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00004548                            
00004548                            LevSel_UpDown:
00004548 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
0000454E 1238 F604                  		move.b	(v_jpadhold1).w,d1
00004552 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
00004556 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004558 3038 FF82                  		move.w	(v_levselitem).w,d0
0000455C 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00004560 6700                       		beq.s	LevSel_Down	; if not, branch
00004562 5340                       		subq.w	#1,d0		; move up 1 selection
00004564 6400                       		bhs.s	LevSel_Down
00004566 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004568                            
00004568                            LevSel_Down:
00004568 0801 0001                  		btst	#bitDn,d1	; is down pressed?
0000456C 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000456E 5240                       		addq.w	#1,d0		; move down 1 selection
00004570 0C40 0015                  		cmpi.w	#$15,d0
00004574 6500                       		blo.s	LevSel_Refresh
00004576 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004578                            
00004578                            LevSel_Refresh:
00004578 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
0000457C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004580 4E75                       		rts	
00004582                            ; ===========================================================================
00004582                            
00004582                            LevSel_SndTest:
00004582 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
00004588 6600                       		bne.s	LevSel_NoMove	; if not, branch
0000458A 1238 F605                  		move.b	(v_jpadpress1).w,d1
0000458E 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
00004592 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004594 3038 FF84                  		move.w	(v_levselsound).w,d0
00004598 0801 0002                  		btst	#bitL,d1	; is left pressed?
0000459C 6700                       		beq.s	LevSel_Right	; if not, branch
0000459E 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000045A0 6400                       		bhs.s	LevSel_Right
000045A2 705F                       		moveq	#$5F,d0		; if sound test	moves below 0, set to $4F
000045A4                            
000045A4                            LevSel_Right:
000045A4 0801 0003                  		btst	#bitR,d1	; is right pressed?
000045A8 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000045AA 5240                       		addq.w	#1,d0		; add 1	to sound test
000045AC 0C40 0050                  		cmpi.w	#$50,d0
000045B0 6500                       		blo.s	LevSel_Refresh2
000045B2 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000045B4                            
000045B4                            LevSel_Refresh2:
000045B4 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
000045B8 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000045BC                            
000045BC                            LevSel_NoMove:
000045BC 4E75                       		rts	
000045BE                            ; End of function LevSelControls
000045BE                            
000045BE                            ; ---------------------------------------------------------------------------
000045BE                            ; Subroutine to load level select text
000045BE                            ; ---------------------------------------------------------------------------
000045BE                            
000045BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045BE                            
000045BE                            
000045BE                            LevSelTextLoad:
000045BE                            
000045BE =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
000045BE                            					; $E210 is a VRAM address
000045BE                            
000045BE 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000045C4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000045CA 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
000045D0 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
000045D4 7214                       		moveq	#$14,d1		; number of lines of text
000045D6                            
000045D6                            	LevSel_DrawAll:
000045D6 2D44 0004                  		move.l	d4,4(a6)
000045DA 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
000045DE 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
000045E4 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
000045E8                            
000045E8 7000                       		moveq	#0,d0
000045EA 3038 FF82                  		move.w	(v_levselitem).w,d0
000045EE 3200                       		move.w	d0,d1
000045F0 283C 6210 0003             		move.l	#textpos,d4
000045F6 EF48                       		lsl.w	#7,d0
000045F8 4840                       		swap	d0
000045FA D880                       		add.l	d0,d4
000045FC 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004602 E749                       		lsl.w	#3,d1
00004604 3001                       		move.w	d1,d0
00004606 D241                       		add.w	d1,d1
00004608 D240                       		add.w	d0,d1
0000460A D2C1                       		adda.w	d1,a1
0000460C 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
00004610 2D44 0004                  		move.l	d4,4(a6)
00004614 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
00004618 363C E680                  		move.w	#$E680,d3
0000461C 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
00004622 6600                       		bne.s	LevSel_DrawSnd
00004624 363C C680                  		move.w	#$C680,d3
00004628                            
00004628                            LevSel_DrawSnd:
00004632 3038 FF84                  		move.w	(v_levselsound).w,d0
00004636 0640 0080                  		addi.w	#$80,d0
0000463A 1400                       		move.b	d0,d2
0000463C E808                       		lsr.b	#4,d0
0000463E 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
00004642 1002                       		move.b	d2,d0
00004644 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
00004648 4E75                       		rts	
0000464A                            ; End of function LevSelTextLoad
0000464A                            
0000464A                            
0000464A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000464A                            
0000464A                            
0000464A                            LevSel_ChgSnd:
0000464A 0240 000F                  		andi.w	#$F,d0
0000464E 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00004652 6500                       		blo.s	LevSel_Numb	; if not, branch
00004654 5E00                       		addi.b	#7,d0		; use alpha characters
00004656                            
00004656                            	LevSel_Numb:
00004656 D043                       		add.w	d3,d0
00004658 3C80                       		move.w	d0,(a6)
0000465A 4E75                       		rts	
0000465C                            ; End of function LevSel_ChgSnd
0000465C                            
0000465C                            
0000465C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000465C                            
0000465C                            
0000465C                            LevSel_ChgLine:
0000465C 7417                       		moveq	#$17,d2		; number of characters per line
0000465E                            
0000465E                            	LevSel_LineLoop:
0000465E 7000                       		moveq	#0,d0
00004660 1019                       		move.b	(a1)+,d0	; get character
00004662 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
00004664 3CBC 0000                  		move.w	#0,(a6)		; use blank character
00004668 51CA FFF4                  		dbf	d2,LevSel_LineLoop
0000466C 4E75                       		rts	
0000466E                            
0000466E                            
0000466E                            	LevSel_CharOk:
0000466E D043                       		add.w	d3,d0		; combine char with VRAM setting
00004670 3C80                       		move.w	d0,(a6)		; send to VRAM
00004672 51CA FFEA                  		dbf	d2,LevSel_LineLoop
00004676 4E75                       		rts	
00004678                            ; End of function LevSel_ChgLine
00004678                            
00004678                            ; ===========================================================================
00004678                            ; ---------------------------------------------------------------------------
00004678                            ; Level	select menu text
00004678                            ; ---------------------------------------------------------------------------
00004678                            		incbin	"misc\Level Select Text (JP1).bin"
00004870                            		even
00004870                            ; ---------------------------------------------------------------------------
00004870                            ; Music	playlist
00004870                            ; ---------------------------------------------------------------------------
00004870                            MusicList:
00004870 00                         			dc.b bgm_GHZ    ; GHZ1
00004871 00                                 	dc.b bgm_LZ    ; GHZ2
00004872 00                                 	dc.b bgm_Seaside   ; GHZ3
00004873 00                                 	dc.b bgm_LZ    ; GHZ4
00004874 00                                 	dc.b bgm_Stop    ; LZ1
00004875 00                                 	dc.b bgm_Stop   ; LZ2
00004876 00                                 	dc.b bgm_Stop    ; LZ3
00004877 00                                 	dc.b bgm_SBZ3    ; LZ4
00004878 00                                 	dc.b bgm_MZ    ; MZ1
00004879 00                                 	dc.b bgm_SBZ    ; MZ2
0000487A 00                                 	dc.b bgm_ToxicLandfill   ; MZ3
0000487B 00                                 	dc.b bgm_SBZ    ; MZ4
0000487C 00                                 	dc.b bgm_LZ    ; SLZ1
0000487D 00                                 	dc.b bgm_LZ    ; SLZ2
0000487E 00                                 	dc.b bgm_LZ    ; SLZ3
0000487F 00                                 	dc.b bgm_LZ    ; SLZ4
00004880 00                                 	dc.b bgm_SYZ    ; SYZ1
00004881 00                                 	dc.b bgm_SLZ    ; SYZ2
00004882 00                                 	dc.b bgm_SLZ    ; SYZ3
00004883 00                                 	dc.b bgm_SLZ    ; SYZ4
00004884 00                                 	dc.b bgm_SBZ    ; SBZ1
00004885 00                                 	dc.b bgm_SBZ    ; SBZ2
00004886 00                                 	dc.b bgm_FZ		; SBZ3
00004887 00                                 	dc.b bgm_SBZ    ; SBZ4
00004888 00                                 	dc.b bgm_GHZ    ; GHZ1
00004889 00                                 	dc.b bgm_GHZ    ; GHZ1
0000488A 00                                 	dc.b bgm_GHZ    ; GHZ1
0000488B 00                                 	dc.b bgm_GHZ    ; GHZ1
0000488C                                    	even
0000488C                            ; ===========================================================================
0000488C                            
0000488C                            ; ---------------------------------------------------------------------------
0000488C                            ; Level
0000488C                            ; ---------------------------------------------------------------------------
0000488C                            
0000488C                            GM_Level:
0000488C 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004892 4A78 FFF0                  		tst.w	(f_demo).w
00004896 6B00                       		bmi.s	Level_NoMusicFade
000048A0                            
000048A0                            	Level_NoMusicFade:
000048A0 6100 CEF6                  		bsr.w	ClearPLC
000048A4 6100 D92C                  		bsr.w	PaletteFadeOut
000048A8 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
000048AC 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
000048AE 46FC 2700                  		disable_ints
000048BC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000048C2 6100 CA8A                  		bsr.w	NemDec
000048C6 46FC 2300                  		enable_ints
000048CA 7000                       		moveq	#0,d0
000048CC 1038 FE10                  		move.b	(v_zone).w,d0
000048D0 E948                       		lsl.w	#4,d0
000048D2 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000048D8 45F2 0000                  		lea	(a2,d0.w),a2
000048DC 7000                       		moveq	#0,d0
000048DE 1012                       		move.b	(a2),d0
000048E0 6700                       		beq.s	loc_37FC
000048E2 6100 CE56                  		bsr.w	AddPLC		; load level patterns
000048E6                            
000048E6                            loc_37FC:
000048E6 7000                       		moveq	#plcid_Main2,d0
000048E8 6100 CE50                  		bsr.w	AddPLC		; load standard	patterns
000048EC                            
000048EC                            Level_ClrRam:
000048EC 43F8 D000                  		lea	(v_objspace).w,a1
000048F0 7000                       		moveq	#0,d0
000048F2 323C 07FF                  		move.w	#$7FF,d1
000048F6                            
000048F6                            	Level_ClrObjRam:
000048F6 22C0                       		move.l	d0,(a1)+
000048F8 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000048FC                            
000048FC 43F8 F628                  		lea	($FFFFF628).w,a1
00004900 7000                       		moveq	#0,d0
00004902 323C 0015                  		move.w	#$15,d1
00004906                            
00004906                            	Level_ClrVars1:
00004906 22C0                       		move.l	d0,(a1)+
00004908 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
0000490C                            
0000490C 43F8 F700                  		lea	(v_screenposx).w,a1
00004910 7000                       		moveq	#0,d0
00004912 323C 003F                  		move.w	#$3F,d1
00004916                            
00004916                            	Level_ClrVars2:
00004916 22C0                       		move.l	d0,(a1)+
00004918 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000491C                            
0000491C 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00004920 7000                       		moveq	#0,d0
00004922 323C 0047                  		move.w	#$47,d1
00004926                            
00004926                            	Level_ClrVars3:
00004926 22C0                       		move.l	d0,(a1)+
00004928 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
0000492C                            
0000492C 46FC 2700                  		disable_ints
00004930 6100 C89E                  		bsr.w	ClearScreen
00004934 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000493A 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
0000493E 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004942 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004946 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
0000494A 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
0000494E 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004952 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004956 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
0000495C 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004960 31FC C800 C8FC             		ResetDMAQueue	
00004966 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
0000496C 6600                       		bne.s	Level_LoadPal	; if not, branch
0000496E                            
0000496E 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004972 7000                       		moveq	#0,d0
00004974 1038 FE11                  		move.b	(v_act).w,d0
00004978 D040                       		add.w	d0,d0
0000497A 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004980 3031 0000                  		move.w	(a1,d0.w),d0
00004984 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004988 31C0 F648                  		move.w	d0,(v_waterpos2).w
0000498C 31C0 F64A                  		move.w	d0,(v_waterpos3).w
00004990 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004994 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004998 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
0000499E                            
0000499E                            Level_LoadPal:
0000499E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000049A4 46FC 2300                  		move	#$2300,sr
000049A8 4EB9 0000 0000             		jsr		LoadPlayerPal
000049AE 6100 DB08                  		bsr.w	PalLoad2	; load Sonic's pallet line
000049B2 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
000049B8 6600                       		bne.s	Level_GetBgm	; if not, branch
000049BA 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
000049C0 6100 DB36                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000049C4 4A38 FE30                  		tst.b	($FFFFFE30).w
000049C8 6700                       		beq.s	Level_GetBgm
000049CA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000049D0                            
000049D0                            	Level_GetBgm:
000049D0 4A78 FFF0                  		tst.w	(f_demo).w
000049D4 6B00                               	bmi.s	Level_SkipTtlCard
000049D6 7000                               	moveq	#0,d0
000049D8 3038 FE10                  		move.w	(v_zone).w,d0
000049DC E418                       		ror.b	#2,d0
000049DE EC48                       		lsr.w   #6,d0
000049E0 43F9 0000 4870                     	lea	(MusicList).l,a1 ; load    music playlist
000049E6 1031 0000                          	move.b	(a1,d0.w),d0
000049EA 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
000049EE 6100 C8AA                          	bsr.w	PlaySound    ; play music
000049F2 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
000049F8                            
000049F8                            
000049F8                            Level_TtlCardLoop:
000049F8 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
000049FE 6100 F050                  		bsr.w	WaitForVBla
00004A02 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004A08 4EB9 0000 0000             		jsr	(BuildSprites).l
00004A0E 6100 CD96                  		bsr.w	RunPLC
00004A12 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004A16 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004A1A 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004A1C 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004A20 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004A22 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
00004A28                            
00004A28                            	Level_SkipTtlCard:
00004A28 4EB9 0000 0000             		jsr		LoadPlayerPal
00004A2E 6100 DA4C                  		bsr.w	PalLoad1	; load Sonic's palette
00004A32 6100 0000                  		bsr.w	LevelSizeLoad
00004A36 6100 0000                  		bsr.w	DeformLayers
00004A3A 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004A40 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
00004A44 6100 0000                  		bsr.w	LoadTilesFromStart
00004A48 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004A4E 6100 0000                  		bsr.w	ColIndexLoad
00004A52 6100 0000                  		bsr.w	LZWaterFeatures
00004A56 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004A5C 4A78 FFF0                  		tst.w	(f_demo).w
00004A60 6B00                       		bmi.s	Level_ChkDebug
00004A62 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004A68                            
00004A68                            Level_ChkDebug:
00004A68 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004A6C 6700                       		beq.s	Level_ChkWater	; if not, branch
00004A6E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004A74 6700                       		beq.s	Level_ChkWater	; if not, branch
00004A76 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004A7C                            
00004A7C                            Level_ChkWater:
00004A7C 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004A82 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004A88 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A8E 6600                       		bne.s	Level_LoadObj	; if not, branch
00004A90 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004A96 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004A9C 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004AA2 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004AA8                            
00004AA8                            Level_LoadObj:
00004AA8 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004AAE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004AB4 4EB9 0000 0000             		jsr	(BuildSprites).l
00004ABA 7000                       		moveq	#0,d0
00004ABC 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004AC0 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004AC2 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004AC6 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004ACA 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004ACE                            
00004ACE                            	Level_SkipClr:
00004ACE 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004AD2 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004AD6 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004ADA 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004ADE 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004AE2 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004AE6 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004AEA 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004AEE 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004AF2 31C0 FE02                  		move.w	d0,(f_restart).w
00004AF6 31C0 FE04                  		move.w	d0,(v_framecount).w
00004AFA 6100 0000                  		bsr.w	OscillateNumInit
00004AFE 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004B04 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004B0A 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004B10 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004B16 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004B1C 7000                       		moveq	#0,d0
00004B1E 1038 FE10                  		move.b	(v_zone).w,d0
00004B22 E548                       		lsl.w	#2,d0
00004B24 2271 0000                  		movea.l	(a1,d0.w),a1
00004B28 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004B2C 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004B2E 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004B34 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004B38 5340                       		subq.w	#1,d0
00004B3A E548                       		lsl.w	#2,d0
00004B3C 2271 0000                  		movea.l	(a1,d0.w),a1
00004B40                            
00004B40                            Level_Demo:
00004B40 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004B46 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004B4A 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004B50 4A78 FFF0                  		tst.w	(f_demo).w
00004B54 6A00                       		bpl.s	Level_ChkWaterPal
00004B56 31FC 021C F614             		move.w	#540,(v_demolength).w
00004B5C 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004B62 6600                       		bne.s	Level_ChkWaterPal
00004B64 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004B6A                            
00004B6A                            Level_ChkWaterPal:
00004B6A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004B70 6600                       		bne.s	Level_Delay	; if not, branch
00004B72 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004B74 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004B7A 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004B7C 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004B7E                            
00004B7E                            	Level_WtrNotSbz:
00004B7E 6100 D9B4                  		bsr.w	PalLoad4_Water
00004B82                            
00004B82                            Level_Delay:
00004B82 323C 0003                  		move.w	#3,d1
00004B86                            
00004B86                            	Level_DelayLoop:
00004B86 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B8C 6100 EEC2                  		bsr.w	WaitForVBla
00004B90 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004B94                            
00004B94 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004B9A 6100 D596                  		bsr.w	PalFadeIn_Alt
00004B9E 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004BA2 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004BA4 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004BA8 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004BAC 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004BB0 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004BB4 6000                       		bra.s	Level_StartGame
00004BB6                            ; ===========================================================================
00004BB6                            
00004BB6                            Level_ClrCardArt:
00004BB6 7000                       		moveq	#plcid_Explode,d0
00004BB8 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion gfx
00004BBE 7000                       		moveq	#0,d0
00004BC0 1038 FE10                  		move.b	(v_zone).w,d0
00004BC4 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004BC8 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004BCE                            
00004BCE                            Level_StartGame:
00004BCE 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004BD4                            
00004BD4                            ; ---------------------------------------------------------------------------
00004BD4                            ; Main level loop (when	all title card and loading sequences are finished)
00004BD4                            ; ---------------------------------------------------------------------------
00004BD4                            
00004BD4                            Level_MainLoop:
00004BD4 6100 C6D6                  		bsr.w	PauseGame
00004BD8 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004BDE 6100 EE70                  		bsr.w	WaitForVBla
00004BE2 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004BE6 6100 0000                  		bsr.w	MoveSonicInDemo
00004BEA 6100 0000                  		bsr.w	LZWaterFeatures
00004BEE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004BF4 4A78 FE02                  			tst.w   (f_restart).w
00004BF8 6600 FC92                  			bne     GM_Level
00004BFC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004C00 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004C02 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004C08 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004C0A                            
00004C0A                            	Level_DoScroll:
00004C0A 6100 0000                  		bsr.w	DeformLayers
00004C0E                            
00004C0E                            	Level_SkipScroll:
00004C0E 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C14 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C1A 6100 D102                  		bsr.w	PaletteCycle
00004C1E 6100 CB86                  		bsr.w	RunPLC
00004C22 6100 0000                  		bsr.w	OscillateNumDo
00004C26 6100 0000                  		bsr.w	SynchroAnimate
00004C2A 6100 0000                  		bsr.w	SignpostArtLoad
00004C2E                            
00004C2E 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004C34 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004C36 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004C3C 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004C40 4E75                       		rts	
00004C42                            ; ===========================================================================
00004C42                            
00004C42                            Level_ChkDemo:
00004C42 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004C46 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004C48 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004C4C 6700                       		beq.s	Level_EndDemo	; if not, branch
00004C4E 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004C54 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004C58 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004C5E 4E75                       		rts	
00004C60                            ; ===========================================================================
00004C60                            
00004C60                            Level_EndDemo:
00004C60 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004C66 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004C68 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004C6E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004C72 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004C74 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004C7A                            
00004C7A                            Level_FadeDemo:
00004C7A 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004C80 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004C86 4278 F794                  		clr.w	(v_palchgspeed).w
00004C8A                            
00004C8A                            	Level_FDLoop:
00004C8A 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C90 6100 EDBE                  		bsr.w	WaitForVBla
00004C94 6100 0000                  		bsr.w	MoveSonicInDemo
00004C98 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C9E 4EB9 0000 0000             		jsr	(BuildSprites).l
00004CA4 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004CAA 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004CAE 6A00                       		bpl.s	loc_3BC8
00004CB0 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004CB6 6100 D53A                  		bsr.w	FadeOut_ToBlack
00004CBA                            
00004CBA                            loc_3BC8:
00004CBA 4A78 F614                  		tst.w	(v_demolength).w
00004CBE 66CA                       		bne.s	Level_FDLoop
00004CC0 4E75                       		rts	
00004CC2                            ; ===========================================================================
00004CC2                            
00004CC2                            		include	"_inc\LZWaterFeatures.asm"
00004CC2                            ; ---------------------------------------------------------------------------
00004CC2                            ; Subroutine to	do special water effects in Labyrinth Zone
00004CC2                            ; ---------------------------------------------------------------------------
00004CC2                            
00004CC2                            LZWaterFeatures:
00004CC2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004CC8 6600                       		bne.s	@notlabyrinth	; if not, branch
00004CCA 4A38 F744                  			tst.b   (f_nobgscroll).w
00004CCE 6600                       			bne.s	@setheight
00004CD0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004CD6 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004CD8                            
00004CD8 6100 0000                  		bsr.w	LZWindTunnels
00004CDC 6100 0000                  		bsr.w	LZWaterSlides
00004CE0 6100 0000                  		bsr.w	LZDynamicWater
00004CE4                            
00004CE4                            @setheight:
00004CE4 4238 F64E                  		clr.b	(f_wtr_state).w
00004CE8 7000                       		moveq	#0,d0
00004CEA 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004CEE E248                       		lsr.w	#1,d0
00004CF0 D078 F648                  		add.w	(v_waterpos2).w,d0
00004CF4 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004CF8 3038 F646                  		move.w	(v_waterpos1).w,d0
00004CFC 9078 F704                  		sub.w	(v_screenposy).w,d0
00004D00 6400                       		bcc.s	@isbelow
00004D02 4A40                       		tst.w	d0
00004D04 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004D06                            
00004D06 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004D0C 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004D12                            
00004D12                            	@isbelow:
00004D12 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004D16 6500                       		bcs.s	@isvisible	; if yes, branch
00004D18 303C 00DF                  		move.w	#223,d0
00004D1C                            
00004D1C                            	@isvisible:
00004D1C 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004D20                            
00004D20                            @notlabyrinth:
00004D20 4E75                       		rts	
00004D22                            ; ===========================================================================
00004D22                            ; ---------------------------------------------------------------------------
00004D22                            ; Initial water heights
00004D22                            ; ---------------------------------------------------------------------------
00004D22 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004D24 0328                       		dc.w $328	; Labyrinth 2
00004D26 0900                       		dc.w $900	; Labyrinth 3
00004D28 0228                       		dc.w $228	; Scrap Brain 3
00004D2A                            		even
00004D2A                            ; ===========================================================================
00004D2A                            
00004D2A                            ; ---------------------------------------------------------------------------
00004D2A                            ; Labyrinth dynamic water routines
00004D2A                            ; ---------------------------------------------------------------------------
00004D2A                            
00004D2A                            LZDynamicWater:
00004D2A 7000                       		moveq	#0,d0
00004D2C 1038 FE11                  		move.b	(v_act).w,d0
00004D30 D040                       		add.w	d0,d0
00004D32 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004D36 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004D3A 7200                       		moveq	#0,d1
00004D3C 1238 F64C                  		move.b	(f_water).w,d1
00004D40 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004D44 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004D48 6700                       		beq.s	@exit		; if water level is correct, branch
00004D4A 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004D4C 4441                       		neg.w	d1		; set water to move up instead
00004D4E                            
00004D4E                            	@movewater:
00004D4E D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004D52                            
00004D52                            	@exit:
00004D52 4E75                       		rts	
00004D54                            ; ===========================================================================
00004D54 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004D56 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004D58 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004D5A 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004D5C                            ; ===========================================================================
00004D5C                            
00004D5C                            DynWater_LZ1:
00004D5C 4E75                       		rts	
00004D5E                            ; ===========================================================================
00004D5E                            
00004D5E                            DynWater_LZ2:
00004D5E 3038 F700                  		move.w	(v_screenposx).w,d0
00004D62 323C 0328                  		move.w	#$328,d1
00004D66 0C40 0500                  		cmpi.w	#$500,d0
00004D6A 6500                       		bcs.s	@setwater
00004D6C 323C 03C8                  		move.w	#$3C8,d1
00004D70 0C40 0B00                  		cmpi.w	#$B00,d0
00004D74 6500                       		bcs.s	@setwater
00004D76 323C 0428                  		move.w	#$428,d1
00004D7A                            
00004D7A                            	@setwater:
00004D7A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D7E 4E75                       		rts	
00004D80                            ; ===========================================================================
00004D80                            
00004D80                            DynWater_LZ3:
00004D80 3038 F700                  		move.w	(v_screenposx).w,d0
00004D84 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004D88 6600                       		bne.s	@routine2
00004D8A                            
00004D8A 323C 0900                  		move.w	#$900,d1
00004D8E 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004D92 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004D94 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004D9A 6500                       		bcs.s	@setwaterlz3
00004D9C 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004DA2 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004DA4                            
00004DA4 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004DA8 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004DAE 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004DBC                            
00004DBC                            	@setwaterlz3:
00004DBC 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DC0 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004DC4 4E75                       		rts	
00004DC6                            ; ===========================================================================
00004DC6                            
00004DC6                            @routine2:
00004DC6 5302                       		subq.b	#1,d2
00004DC8 6600                       		bne.s	@routine3
00004DCA 323C 04C8                  		move.w	#$4C8,d1
00004DCE 0C40 0770                  		cmpi.w	#$770,d0
00004DD2 6500                       		bcs.s	@setwater2
00004DD4 323C 0308                  		move.w	#$308,d1
00004DD8 0C40 1400                  		cmpi.w	#$1400,d0
00004DDC 6500                       		bcs.s	@setwater2
00004DDE 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004DE4 6700                       		beq.s	@sonicislow
00004DE6 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004DEC 6400                       		bcc.s	@sonicislow	; if yes, branch
00004DEE 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004DF4 6400                       		bcc.s	@setwater2
00004DF6                            
00004DF6                            @sonicislow:
00004DF6 323C 0508                  		move.w	#$508,d1
00004DFA 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004DFE 0C40 1770                  		cmpi.w	#$1770,d0
00004E02 6500                       		bcs.s	@setwater2
00004E04 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004E0A                            
00004E0A                            	@setwater2:
00004E0A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E0E 4E75                       		rts	
00004E10                            ; ===========================================================================
00004E10                            
00004E10                            @routine3:
00004E10 5302                       		subq.b	#1,d2
00004E12 6600                       		bne.s	@routine4
00004E14 323C 0508                  		move.w	#$508,d1
00004E18 0C40 1860                  		cmpi.w	#$1860,d0
00004E1C 6500                       		bcs.s	@setwater3
00004E1E 323C 0188                  		move.w	#$188,d1
00004E22 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004E26 6400                       		bcc.s	@loc_3DC6
00004E28 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004E2C 6600                       		bne.s	@setwater3
00004E2E                            
00004E2E                            	@loc_3DC6:
00004E2E 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004E34                            
00004E34                            	@setwater3:
00004E34 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E38 4E75                       		rts	
00004E3A                            ; ===========================================================================
00004E3A                            
00004E3A                            @routine4:
00004E3A 5302                       		subq.b	#1,d2
00004E3C 6600                       		bne.s	@routine5
00004E3E 323C 0188                  		move.w	#$188,d1
00004E42 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004E46 6500                       		bcs.s	@setwater4
00004E48 323C 0900                  		move.w	#$900,d1
00004E4C 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004E50 6500                       		bcs.s	@setwater4
00004E52 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004E58 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004E5E 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004E64 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004E6A 4E75                       		rts	
00004E6C                            ; ===========================================================================
00004E6C                            
00004E6C                            @setwater4:
00004E6C 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E70 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004E74 4E75                       		rts	
00004E76                            ; ===========================================================================
00004E76                            
00004E76                            @routine5:
00004E76 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004E7A 6500                       		bcs.s	@dontset	; if not, branch
00004E7C 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004E82                            
00004E82                            	@dontset:
00004E82 4E75                       		rts	
00004E84                            ; ===========================================================================
00004E84                            
00004E84                            DynWater_SBZ3:
00004E84 323C 0228                  		move.w	#$228,d1
00004E88 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00004E8E 6500                       		bcs.s	@setwater
00004E90 323C 04C8                  		move.w	#$4C8,d1
00004E94                            
00004E94                            	@setwater:
00004E94 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E98 4E75                       		rts
00004E9A                            
00004E9A                            ; ---------------------------------------------------------------------------
00004E9A                            ; Labyrinth Zone "wind tunnels"	subroutine
00004E9A                            ; ---------------------------------------------------------------------------
00004E9A                            
00004E9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E9A                            
00004E9A                            
00004E9A                            LZWindTunnels:
00004E9A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004E9E 6600 0000                  		bne.w	@quit	; if yes, branch
00004EA2 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004EA8 7000                       		moveq	#0,d0
00004EAA 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004EAE E748                       		lsl.w	#3,d0		; multiply by 8
00004EB0 D4C0                       		adda.w	d0,a2		; add to address for data
00004EB2 7200                       		moveq	#0,d1
00004EB4 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004EB8 6600                       		bne.s	@notact1	; if not, branch
00004EBA 7201                       		moveq	#1,d1
00004EBC 514A                       		subq.w	#8,a2		; use different data for act 1
00004EBE                            
00004EBE                            	@notact1:
00004EBE 43F8 D000                  		lea	(v_player).w,a1
00004EC2                            
00004EC2                            @chksonic:
00004EC2 3029 0008                  		move.w	obX(a1),d0
00004EC6 B052                       		cmp.w	(a2),d0
00004EC8 6500 0000                  		bcs.w	@chknext
00004ECC B06A 0004                  		cmp.w	4(a2),d0
00004ED0 6400 0000                  		bcc.w	@chknext
00004ED4 3429 000C                  		move.w	obY(a1),d2
00004ED8 B46A 0002                  		cmp.w	2(a2),d2
00004EDC 6500                       		bcs.s	@chknext
00004EDE B46A 0006                  		cmp.w	6(a2),d2
00004EE2 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004EE4 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004EE8 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004EEC 6600                       		bne.s	@skipsound	; if not, branch
00004EF8                            
00004EF8                            	@skipsound:
00004EF8 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004EFC 6600 0000                  		bne.w	@quit	; if yes, branch
00004F00 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004F06 6400                       		bcc.s	@clrquit	; if yes, branch
00004F08 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004F0E 0440 0080                  		subi.w	#$80,d0
00004F12 B052                       		cmp.w	(a2),d0
00004F14 6400                       		bcc.s	@movesonic
00004F16 7002                       		moveq	#2,d0
00004F18 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004F1E 6600                       		bne.s	@notact2	; if not, branch
00004F20 4440                       		neg.w	d0
00004F22                            
00004F22                            	@notact2:
00004F22 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004F26                            
00004F26                            @movesonic:
00004F26 5869 0008                  		addq.w	#4,obX(a1)
00004F2A 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004F30 337C 0000 0012             		move.w	#0,obVelY(a1)
00004F36 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004F3C 08E9 0001 0022             		bset	#1,obStatus(a1)
00004F42 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004F48 6700                       		beq.s	@down		; if not, branch
00004F4A 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004F4E                            
00004F4E                            	@down:
00004F4E 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004F54 6700                       		beq.s	@end		; if not, branch
00004F56 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004F5A                            
00004F5A                            	@end:
00004F5A 4E75                       		rts	
00004F5C                            ; ===========================================================================
00004F5C                            
00004F5C                            @chknext:
00004F5C 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004F5E 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004F62 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004F66 6700                       		beq.s	@quit		; if yes, branch
00004F68 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00004F6E                            
00004F6E                            @clrquit:
00004F6E 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00004F72                            
00004F72                            @quit:
00004F72 4E75                       		rts	
00004F74                            ; End of function LZWindTunnels
00004F74                            
00004F74                            ; ===========================================================================
00004F74                            
00004F74                            		;    left, top,  right, bottom boundaries
00004F74 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00004F7C 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00004F84 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00004F8C 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00004F94 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00004F9C                            		even
00004F9C                            
00004F9C                            ; ---------------------------------------------------------------------------
00004F9C                            ; Labyrinth Zone water slide subroutine
00004F9C                            ; ---------------------------------------------------------------------------
00004F9C                            
00004F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F9C                            
00004F9C                            
00004F9C                            LZWaterSlides:
00004F9C 43F8 D000                  		lea	(v_player).w,a1
00004FA0 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00004FA6 6600                       		bne.s	loc_3F6A	; if not, branch
00004FA8 3029 000C                  		move.w	obY(a1),d0
00004FAC E248                       		lsr.w	#1,d0
00004FAE 0240 0380                  		andi.w	#$380,d0
00004FB2 1229 0008                  		move.b	obX(a1),d1
00004FB6 0241 007F                  		andi.w	#$7F,d1
00004FBA D041                       		add.w	d1,d0
00004FBC 45F8 A400                  		lea	(v_lvllayout).w,a2
00004FC0 1032 0000                  		move.b	(a2,d0.w),d0
00004FC4 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00004FC8 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00004FCA                            
00004FCA                            loc_3F62:
00004FCA B022                       		cmp.b	-(a2),d0
00004FCC 57C9 FFFC                  		dbeq	d1,loc_3F62
00004FD0 6700                       		beq.s	LZSlide_Move
00004FD2                            
00004FD2                            loc_3F6A:
00004FD2 4A38 F7CA                  		tst.b	(f_jumponly).w
00004FD6 6700                       		beq.s	locret_3F7A
00004FD8 337C 0005 003E             		move.w	#5,$3E(a1)
00004FDE 4238 F7CA                  		clr.b	(f_jumponly).w
00004FE2                            
00004FE2                            locret_3F7A:
00004FE2 4E75                       		rts	
00004FE4                            ; ===========================================================================
00004FE4                            
00004FE4                            LZSlide_Move:
00004FE4 0C41 0003                  		cmpi.w	#3,d1
00004FE8 6400                       		bcc.s	loc_3F84
00004FEA 4E71                       		nop	
00004FEC                            
00004FEC                            loc_3F84:
00004FEC 08A9 0000 0022             		bclr	#0,obStatus(a1)
00004FF2 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00004FF6 1340 0020                  		move.b	d0,obInertia(a1)
00004FFA 6A00                       		bpl.s	loc_3F9A
00004FFC 08E9 0000 0022             		bset	#0,obStatus(a1)
00005002                            
00005002                            loc_3F9A:
00005002 4229 0021                  		clr.b	obInertia+1(a1)
00005006 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
0000500C 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00005012 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005016 0200 001F                  		andi.b	#$1F,d0
0000501A 6600                       		bne.s	locret_3FBE
00005026                            
00005026                            locret_3FBE:
00005026 4E75                       		rts	
00005028                            ; End of function LZWaterSlides
00005028                            
00005028                            ; ===========================================================================
00005028                            ; byte_3FC0:
00005028                            Slide_Speeds:
00005028 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00005030 00                         		even
00005030                            
00005030                            Slide_Chunks:
00005030 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00005031                            ; byte_3FCF
00005031                            Slide_Chunks_End
00005032 00                         		even
00005032 00                         		even
00005032                            		include	"_inc\MoveSonicInDemo.asm"
00005032                            ; ---------------------------------------------------------------------------
00005032                            ; Subroutine to	move Sonic in demo mode
00005032                            ; ---------------------------------------------------------------------------
00005032                            
00005032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005032                            
00005032                            
00005032                            MoveSonicInDemo:
00005032 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005036 6600                       		bne.s	MDemo_On	; if yes, branch
00005038 4E75                       		rts	
0000503A                            ; ===========================================================================
0000503A                            
0000503A                            ; This is an unused subroutine for recording a demo
0000503A                            
0000503A                            DemoRecorder:
0000503A 43F9 0008 0000             		lea	($80000).l,a1
00005040 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005044 D2C0                       		adda.w	d0,a1
00005046 1038 F604                  		move.b	(v_jpadhold1).w,d0
0000504A B011                       		cmp.b	(a1),d0
0000504C 6600                       		bne.s	@next
0000504E 5229 0001                  		addq.b	#1,1(a1)
00005052 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005058 6700                       		beq.s	@next
0000505A 4E75                       		rts	
0000505C                            
0000505C                            	@next:
0000505C 1340 0002                  		move.b	d0,2(a1)
00005060 137C 0000 0003             		move.b	#0,3(a1)
00005066 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000506A 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
00005070 4E75                       		rts	
00005072                            ; ===========================================================================
00005072                            
00005072                            MDemo_On:
00005072 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005076 6A00                       		bpl.s	@dontquit	; if not, branch
00005078 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
0000507C 6B00                       		bmi.s	@dontquit	; if yes, branch
0000507E 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00005084                            
00005084                            	@dontquit:
00005084 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
0000508A 7000                       		moveq	#0,d0
0000508C 1038 FE10                  		move.b	(v_zone).w,d0
00005090 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005096 6600                       		bne.s	@notspecial	; if not, branch
00005098 7006                       		moveq	#6,d0		; use demo #6
0000509A                            
0000509A                            	@notspecial:
0000509A E548                       		lsl.w	#2,d0
0000509C 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
000050A0 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
000050A4 6A00                       		bpl.s	@notcredits	; if not, branch
000050A6 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
000050AC 3038 FFF4                  		move.w	(v_creditsnum).w,d0
000050B0 5340                       		subq.w	#1,d0
000050B2 E548                       		lsl.w	#2,d0
000050B4 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
000050B8                            
000050B8                            	@notcredits:
000050B8 3038 F790                  		move.w	(v_btnpushtime1).w,d0
000050BC D2C0                       		adda.w	d0,a1
000050BE 1011                       		move.b	(a1),d0
000050C0 41F8 F604                  		lea	(v_jpadhold1).w,a0
000050C4 1200                       		move.b	d0,d1
000050C6 7400                       			moveq	#0,d2
000050C8 B500                       		eor.b	d2,d0
000050CA 10C1                       		move.b	d1,(a0)+
000050CC C001                       		and.b	d1,d0
000050CE 10C0                       		move.b	d0,(a0)+
000050D0 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000050D4 6400                       		bcc.s	@end
000050D6 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
000050DC 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
000050E0                            
000050E0                            	@end:
000050E0 4E75                       		rts	
000050E2                            ; End of function MoveSonicInDemo
000050E2                            
000050E2                            ; ===========================================================================
000050E2                            ; ---------------------------------------------------------------------------
000050E2                            ; Demo sequence	pointers
000050E2                            ; ---------------------------------------------------------------------------
000050E2 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
000050E6 0000 0000                  		dc.l Demo_GHZ
000050EA 0000 0000                  		dc.l Demo_MZ
000050EE 0000 0000                  		dc.l Demo_MZ
000050F2 0000 0000                  		dc.l Demo_SYZ
000050F6 0000 0000                  		dc.l Demo_SYZ
000050FA 0000 0000                  		dc.l Demo_SS
000050FE 0000 0000                  		dc.l Demo_SS
00005102                            
00005102 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
00005106 0000 0000                  		dc.l Demo_EndMZ
0000510A 0000 0000                  		dc.l Demo_EndSYZ
0000510E 0000 0000                  		dc.l Demo_EndLZ
00005112 0000 0000                  		dc.l Demo_EndSLZ
00005116 0000 0000                  		dc.l Demo_EndSBZ1
0000511A 0000 0000                  		dc.l Demo_EndSBZ2
0000511E 0000 0000                  		dc.l Demo_EndGHZ2
00005122                            
00005122 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00005132 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00005142 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00005152                            		even
00005152                            		even
00005152                            
00005152                            ; ---------------------------------------------------------------------------
00005152                            ; Collision index pointer loading subroutine
00005152                            ; ---------------------------------------------------------------------------
00005152                            
00005152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005152                            
00005152                            
00005152                            ColIndexLoad:
00005152 7000                       		moveq	#0,d0
00005154 1038 FE10                  		move.b	(v_zone).w,d0
00005158 E548                       		lsl.w	#2,d0
0000515A 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
00005160 4E75                       		rts	
00005162                            ; End of function ColIndexLoad
00005162                            
00005162                            ; ===========================================================================
00005162                            ; ---------------------------------------------------------------------------
00005162                            ; Collision index pointers
00005162                            ; ---------------------------------------------------------------------------
00005162 0000 0000                  ColPointers:	dc.l Col_GHZ
00005166 0000 0000                  		dc.l Col_LZ
0000516A 0000 0000                  		dc.l Col_MZ
0000516E 0000 0000                  		dc.l Col_SLZ
00005172 0000 0000                  		dc.l Col_SYZ
00005176 0000 0000                  		dc.l Col_SBZ
0000517A                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
0000517A                            
0000517A                            		include	"_inc\Oscillatory Routines.asm"
0000517A                            ; ---------------------------------------------------------------------------
0000517A                            ; Oscillating number subroutines
0000517A                            ; ---------------------------------------------------------------------------
0000517A                            
0000517A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000517A                            
0000517A                            ; Initialise the values
0000517A                            
0000517A                            OscillateNumInit:
0000517A 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000517E 45F9 0000 0000             		lea	(@baselines).l,a2
00005184 7220                       		moveq	#$20,d1
00005186                            
00005186                            	@loop:
00005186 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005188 51C9 FFFC                  		dbf	d1,@loop
0000518C 4E75                       		rts	
0000518E                            
0000518E                            
0000518E                            ; ===========================================================================
0000518E 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
00005190 0080 0000                  		dc.w $80, 0
00005194 0080 0000                  		dc.w $80, 0
00005198 0080 0000                  		dc.w $80, 0
0000519C 0080 0000                  		dc.w $80, 0
000051A0 0080 0000                  		dc.w $80, 0
000051A4 0080 0000                  		dc.w $80, 0
000051A8 0080 0000                  		dc.w $80, 0
000051AC 0080 0000                  		dc.w $80, 0
000051B0 0080 0000                  		dc.w $80, 0
000051B4 50F0 011E                  		dc.w $50F0, $11E
000051B8 2080 00B4                  		dc.w $2080, $B4
000051BC 3080 010E                  		dc.w $3080, $10E
000051C0 5080 01C2                  		dc.w $5080, $1C2
000051C4 7080 0276                  		dc.w $7080, $276
000051C8 0080 0000                  		dc.w $80, 0
000051CC 0080 0000                  		dc.w $80, 0
000051D0                            		even
000051D0                            
000051D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051D0                            
000051D0                            ; Oscillate values
000051D0                            
000051D0                            OscillateNumDo:
000051D0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
000051D6 6400                       		bcc.s	@end		; if yes, branch
000051D8 43F8 FE5E                  		lea	(v_oscillate).w,a1
000051DC 45F9 0000 0000             		lea	(@settings).l,a2
000051E2 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
000051E4 720F                       		moveq	#$F,d1
000051E6                            
000051E6                            @loop:
000051E6 341A                       		move.w	(a2)+,d2	; get frequency
000051E8 381A                       		move.w	(a2)+,d4	; get amplitude
000051EA 0303                       		btst	d1,d3		; check oscillation direction
000051EC 6600                       		bne.s	@down		; branch if 1
000051EE                            
000051EE                            	@up:
000051EE 3029 0002                  		move.w	2(a1),d0	; get current rate
000051F2 D042                       		add.w	d2,d0		; add frequency
000051F4 3340 0002                  		move.w	d0,2(a1)
000051F8 D151                       		add.w	d0,0(a1)	; add rate to value
000051FA B811                       		cmp.b	0(a1),d4
000051FC 6200                       		bhi.s	@next
000051FE 03C3                       		bset	d1,d3
00005200 6000                       		bra.s	@next
00005202                            
00005202                            	@down:
00005202 3029 0002                  		move.w	2(a1),d0
00005206 9042                       		sub.w	d2,d0
00005208 3340 0002                  		move.w	d0,2(a1)
0000520C D151                       		add.w	d0,0(a1)
0000520E B811                       		cmp.b	0(a1),d4
00005210 6300                       		bls.s	@next
00005212 0383                       		bclr	d1,d3
00005214                            
00005214                            	@next:
00005214 5849                       		addq.w	#4,a1
00005216 51C9 FFCE                  		dbf	d1,@loop
0000521A 31C3 FE5E                  		move.w	d3,(v_oscillate).w
0000521E                            
0000521E                            @end:
0000521E 4E75                       		rts	
00005220                            ; End of function OscillateNumDo
00005220                            
00005220                            ; ===========================================================================
00005220 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
00005224 0002 0018                  		dc.w 2,	$18
00005228 0002 0020                  		dc.w 2,	$20
0000522C 0002 0030                  		dc.w 2,	$30
00005230 0004 0020                  		dc.w 4,	$20
00005234 0008 0008                  		dc.w 8,	8
00005238 0008 0040                  		dc.w 8,	$40
0000523C 0004 0040                  		dc.w 4,	$40
00005240 0002 0050                  		dc.w 2,	$50
00005244 0002 0050                  		dc.w 2,	$50
00005248 0002 0020                  		dc.w 2,	$20
0000524C 0003 0030                  		dc.w 3,	$30
00005250 0005 0050                  		dc.w 5,	$50
00005254 0007 0070                  		dc.w 7,	$70
00005258 0002 0010                  		dc.w 2,	$10
0000525C 0002 0010                  		dc.w 2,	$10
00005260                            		even
00005260                            		even
00005260                            
00005260                            ; ---------------------------------------------------------------------------
00005260                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
00005260                            ; ---------------------------------------------------------------------------
00005260                            
00005260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005260                            
00005260                            
00005260                            SynchroAnimate:
00005260                            
00005260                            ; Used for GHZ spiked log
00005260                            Sync1:
00005260 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
00005264 6A00                       		bpl.s	Sync2		; if not, branch
00005266 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
0000526C 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
00005270 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005276                            
00005276                            ; Used for rings and giant rings
00005276                            Sync2:
00005276 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0000527A 6A00                       		bpl.s	Sync3
0000527C 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
00005282 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005286 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0000528C                            
0000528C                            ; Used for nothing
0000528C                            Sync3:
0000528C 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
00005290 6A00                       		bpl.s	Sync4
00005292 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005298 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0000529C 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
000052A2 6500                       		blo.s	Sync4
000052A4 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
000052AA                            
000052AA                            ; Used for bouncing rings
000052AA                            Sync4:
000052AA 4A38 FEC6                  		tst.b	(v_ani3_time).w
000052AE 6700                       		beq.s	SyncEnd
000052B0 7000                       		moveq	#0,d0
000052B2 1038 FEC6                  		move.b	(v_ani3_time).w,d0
000052B6 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
000052BA 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
000052BE EF58                       		rol.w	#7,d0
000052C0 0240 0003                  		andi.w	#3,d0
000052C4 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
000052C8 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
000052CC                            
000052CC                            SyncEnd:
000052CC 4E75                       		rts	
000052CE                            ; End of function SynchroAnimate
000052CE                            
000052CE                            ; ---------------------------------------------------------------------------
000052CE                            ; End-of-act signpost pattern loading subroutine
000052CE                            ; ---------------------------------------------------------------------------
000052CE                            
000052CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000052CE                            
000052CE                            
000052CE                            SignpostArtLoad:
000052CE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
000052D2 6600 0000                  		bne.w	@exit		; if yes, branch
000052D6 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
000052DC 6700                       		beq.s	@exit		; if yes, branch
000052DE                            
000052DE 3038 F700                  		move.w	(v_screenposx).w,d0
000052E2 3238 F72A                  		move.w	(v_limitright2).w,d1
000052E6 0441 0100                  		subi.w	#$100,d1
000052EA B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000052EC 6D00                       		blt.s	@exit		; if not, branch
000052EE 4A38 FE1E                  		tst.b	(f_timecount).w
000052F2 6700                       		beq.s	@exit
000052F4 B278 F728                  		cmp.w	(v_limitleft2).w,d1
000052F8 6700                       		beq.s	@exit
000052FA 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
000052FE 7000                       		moveq	#plcid_Signpost,d0
00005300 6000 C46A                  		bra.w	NewPLC		; load signpost	patterns
00005304                            
00005304                            	@exit:
00005304 4E75                       		rts	
00005306                            ; End of function SignpostArtLoad
00005306                            
00005306                            ; ===========================================================================
00005306                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005386                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
000054B6                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
00005536                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
00005636                            ; ===========================================================================
00005636                            
00005636                            ; ---------------------------------------------------------------------------
00005636                            ; Special Stage
00005636                            ; ---------------------------------------------------------------------------
00005636                            
00005636                            GM_Special:
0000563E 6100 CCBC                  		bsr.w	PaletteWhiteOut
00005642 46FC 2700                  		disable_ints
00005646 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000564C 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00005650 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00005654 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
0000565A 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
0000565E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005662 0200 00BF                  		andi.b	#$BF,d0
00005666 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000566C 6100 BB62                  		bsr.w	ClearScreen
00005670 46FC 2300                  		enable_ints
00005674 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005696                            
00005696                            	SS_WaitForDMA:
00005696 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005698 0801 0001                  		btst	#1,d1		; is DMA running?
0000569C 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
0000569E 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
000056A2 6100 0000                  		bsr.w	SS_BGLoad
000056A6 7000                       		moveq	#plcid_SpecialStage,d0
000056A8 6100 C1FC                  		bsr.w	QuickPLC	; load special stage patterns
000056AC                            
000056AC 43F8 D000                  		lea	(v_objspace).w,a1
000056B0 7000                       		moveq	#0,d0
000056B2 323C 07FF                  		move.w	#$7FF,d1
000056B6                            	SS_ClrObjRam:
000056B6 22C0                       		move.l	d0,(a1)+
000056B8 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000056BC                            
000056BC 43F8 F700                  		lea	(v_screenposx).w,a1
000056C0 7000                       		moveq	#0,d0
000056C2 323C 003F                  		move.w	#$3F,d1
000056C6                            	SS_ClrRam1:
000056C6 22C0                       		move.l	d0,(a1)+
000056C8 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
000056CC                            
000056CC 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000056D0 7000                       		moveq	#0,d0
000056D2 323C 0027                  		move.w	#$27,d1
000056D6                            	SS_ClrRam2:
000056D6 22C0                       		move.l	d0,(a1)+
000056D8 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000056DC                            
000056DC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000056E0 7000                       		moveq	#0,d0
000056E2 323C 007F                  		move.w	#$7F,d1
000056E6                            	SS_ClrNemRam:
000056E6 22C0                       		move.l	d0,(a1)+
000056E8 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000056EC                            
000056EC 4238 F64E                  		clr.b	(f_wtr_state).w
000056F0 4278 FE02                  		clr.w	(f_restart).w
000056F4 700A                       		moveq	#palid_Special,d0
000056F6 6100 CD84                  		bsr.w	PalLoad1	; load special stage palette
000056FA 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
00005700 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
00005708 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
00005710 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
00005716 6100 0000                  		bsr.w	PalCycle_SS
0000571A 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
0000571E 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
0000572C 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00005732 43F9 0000 50E2             		lea	(DemoDataPtr).l,a1
00005738 7006                       		moveq	#6,d0
0000573A E548                       		lsl.w	#2,d0
0000573C 2271 0000                  		movea.l	(a1,d0.w),a1
00005740 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
00005746 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
0000574A 4278 FE20                  		clr.w	(v_rings).w
0000574E 4238 FE1B                  		clr.b	(v_lifecount).w
00005752 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005758 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000575E 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00005762 6700                       		beq.s	SS_NoDebug	; if not, branch
00005764 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
0000576A 6700                       		beq.s	SS_NoDebug	; if not, branch
0000576C 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005772                            
00005772                            	SS_NoDebug:
00005772 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005776 0000 0040                  		ori.b	#$40,d0
0000577A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005780 6100 CACE                  		bsr.w	PaletteWhiteIn
00005784                            
00005784                            ; ---------------------------------------------------------------------------
00005784                            ; Main Special Stage loop
00005784                            ; ---------------------------------------------------------------------------
00005784                            
00005784                            SS_MainLoop:
00005784 6100 BB26                  		bsr.w	PauseGame
00005788 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
0000578E 6100 E2C0                  		bsr.w	WaitForVBla
00005792 6100 F89E                  		bsr.w	MoveSonicInDemo
00005796 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
0000579C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000057A2 4EB9 0000 0000             		jsr	(BuildSprites).l
000057A8 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000057AE 6100 0000                  		bsr.w	SS_BGAnimate
000057B2 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000057B6 6700                       		beq.s	SS_ChkEnd	; if not, branch
000057B8 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
000057BC 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000057C0                            
000057C0                            	SS_ChkEnd:
000057C0 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000057C6 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000057CA                            
000057CA 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000057CE 6600 0000                  		bne.w	SS_ToLevel
000057D2 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000057D8 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
000057DE 6500                       		blo.s	SS_Finish	; if not, branch
000057E0 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
000057E4                            
000057E4                            SS_Finish:
000057E4 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
000057EA 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000057F0 4278 F794                  		clr.w	(v_palchgspeed).w
000057F4                            
000057F4                            	SS_FinLoop:
000057F4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000057FA 6100 E254                  		bsr.w	WaitForVBla
000057FE 6100 F832                  		bsr.w	MoveSonicInDemo
00005802 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005808 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000580E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005814 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
0000581A 6100 0000                  		bsr.w	SS_BGAnimate
0000581E 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00005822 6A00                       		bpl.s	loc_47D4
00005824 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
0000582A 6100 CAF0                  		bsr.w	WhiteOut_ToWhite
0000582E                            
0000582E                            loc_47D4:
0000582E 4A78 F614                  		tst.w	(v_demolength).w
00005832 66C0                       		bne.s	SS_FinLoop
00005834                            
00005834 46FC 2700                  		disable_ints
00005838 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000583E 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00005842 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005846 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
0000584A 6100 B984                  		bsr.w	ClearScreen
00005858 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000585E 6100 BAEE                  		bsr.w	NemDec
00005862 4EB9 0000 0000             		jsr	(Hud_Base).l
00005868 31FC C800 C8FC             		ResetDMAQueue	
0000586E 46FC 2300                  		enable_ints
00005872 7011                       		moveq	#palid_SSResult,d0
00005874 6100 CC42                  		bsr.w	PalLoad2	; load results screen palette
00005878 7000                       		moveq	#plcid_Main,d0
0000587A 6100 BEF0                  		bsr.w	NewPLC
0000587E 7000                       		moveq	#plcid_SSResult,d0
00005880 6100 BEB8                  		bsr.w	AddPLC		; load results screen patterns
00005884 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
0000588A 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
00005890 3038 FE20                  		move.w	(v_rings).w,d0
00005894 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005898 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
000058A6                            
000058A6 43F8 D000                  		lea	(v_objspace).w,a1
000058AA 7000                       		moveq	#0,d0
000058AC 323C 07FF                  		move.w	#$7FF,d1
000058B0                            	SS_EndClrObjRam:
000058B0 22C0                       		move.l	d0,(a1)+
000058B2 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000058B6                            
000058B6 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
000058BC                            
000058BC                            SS_NormalExit:
000058BC 6100 B9EE                  		bsr.w	PauseGame
000058C0 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
000058C6 6100 E188                  		bsr.w	WaitForVBla
000058CA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000058D0 4EB9 0000 0000             		jsr	(BuildSprites).l
000058D6 6100 BECE                  		bsr.w	RunPLC
000058DA 4A78 FE02                  		tst.w	(f_restart).w
000058DE 67DC                       		beq.s	SS_NormalExit
000058E0 4AB8 F680                  		tst.l	(v_plc_buffer).w
000058E4 66D6                       		bne.s	SS_NormalExit
000058EE 6100 CA0C                  		bsr.w	PaletteWhiteOut
000058F2 4E75                       		rts	
000058F4                            ; ===========================================================================
000058F4                            
000058F4                            SS_ToSegaScreen:
000058F4 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
000058FA 4E75                       		rts
000058FC                            
000058FC 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005902 67F0                       		beq.s	SS_ToSegaScreen
00005904 4E75                       		rts
00005906                            
00005906                            ; ---------------------------------------------------------------------------
00005906                            ; Special stage	background loading subroutine
00005906                            ; ---------------------------------------------------------------------------
00005906                            
00005906                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005906                            
00005906                            
00005906                            SS_BGLoad:
00005906 43F9 00FF 0000             		lea	($FF0000).l,a1
0000590C 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005912 303C 4051                  		move.w	#$4051,d0
00005916 6100 BFC0                  		bsr.w	EniDec
0000591A 263C 5000 0001             		move.l	#$50000001,d3
00005920 45F9 00FF 0080             		lea	($FF0080).l,a2
00005926 7E06                       		moveq	#6,d7
00005928                            
00005928                            loc_48BE:
00005928 2003                       		move.l	d3,d0
0000592A 7C03                       		moveq	#3,d6
0000592C 7800                       		moveq	#0,d4
0000592E 0C47 0003                  		cmpi.w	#3,d7
00005932 6400                       		bhs.s	loc_48CC
00005934 7801                       		moveq	#1,d4
00005936                            
00005936                            loc_48CC:
00005936 7A07                       		moveq	#7,d5
00005938                            
00005938                            loc_48CE:
00005938 224A                       		movea.l	a2,a1
0000593A 0A04 0001                  		eori.b	#1,d4
0000593E 6600                       		bne.s	loc_48E2
00005940 0C47 0006                  		cmpi.w	#6,d7
00005944 6600                       		bne.s	loc_48F2
00005946 43F9 00FF 0000             		lea	($FF0000).l,a1
0000594C                            
0000594C                            loc_48E2:
0000594C 48E7 F800                  		movem.l	d0-d4,-(sp)
00005950 7207                       		moveq	#7,d1
00005952 7407                       		moveq	#7,d2
00005954 6100 B9CE                  		bsr.w	TilemapToVRAM
00005958 4CDF 001F                  		movem.l	(sp)+,d0-d4
0000595C                            
0000595C                            loc_48F2:
0000595C 0680 0010 0000             		addi.l	#$100000,d0
00005962 51CD FFD4                  		dbf	d5,loc_48CE
00005966 0680 0380 0000             		addi.l	#$3800000,d0
0000596C 0A04 0001                  		eori.b	#1,d4
00005970 51CE FFC4                  		dbf	d6,loc_48CC
00005974 0683 1000 0000             		addi.l	#$10000000,d3
0000597A 6A00                       		bpl.s	loc_491C
0000597C 4843                       		swap	d3
0000597E 0683 0000 C000             		addi.l	#$C000,d3
00005984 4843                       		swap	d3
00005986                            
00005986                            loc_491C:
00005986 D4FC 0080                  		adda.w	#$80,a2
0000598A 51CF FF9C                  		dbf	d7,loc_48BE
0000598E 43F9 00FF 0000             		lea	($FF0000).l,a1
00005994 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
0000599A 303C 4000                  		move.w	#$4000,d0
0000599E 6100 BF38                  		bsr.w	EniDec
000059A2 43F9 00FF 0000             		lea	($FF0000).l,a1
000059A8 203C 4000 0003             		move.l	#$40000003,d0
000059AE 723F                       		moveq	#$3F,d1
000059B0 741F                       		moveq	#$1F,d2
000059B2 6100 B970                  		bsr.w	TilemapToVRAM
000059B6 43F9 00FF 0000             		lea	($FF0000).l,a1
000059BC 203C 5000 0003             		move.l	#$50000003,d0
000059C2 723F                       		moveq	#$3F,d1
000059C4 743F                       		moveq	#$3F,d2
000059C6 6100 B95C                  		bsr.w	TilemapToVRAM
000059CA 4E75                       		rts	
000059CC                            ; End of function SS_BGLoad
000059CC                            
000059CC                            ; ---------------------------------------------------------------------------
000059CC                            ; Palette cycling routine - special stage
000059CC                            ; ---------------------------------------------------------------------------
000059CC                            
000059CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059CC                            
000059CC                            
000059CC                            PalCycle_SS:
000059CC 4A78 F63A                  		tst.w	(f_pause).w
000059D0 6600                       		bne.s	locret_49E6
000059D2 5378 F79C                  		subq.w	#1,(v_palss_time).w
000059D6 6A00                       		bpl.s	locret_49E6
000059D8 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000059DE 3038 F79A                  		move.w	(v_palss_num).w,d0
000059E2 5278 F79A                  		addq.w	#1,(v_palss_num).w
000059E6 0240 001F                  		andi.w	#$1F,d0
000059EA E548                       		lsl.w	#2,d0
000059EC 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000059F2 D0C0                       		adda.w	d0,a0
000059F4 1018                       		move.b	(a0)+,d0
000059F6 6A00                       		bpl.s	loc_4992
000059F8 303C 01FF                  		move.w	#$1FF,d0
000059FC                            
000059FC                            loc_4992:
000059FC 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005A00 7000                       		moveq	#0,d0
00005A02 1018                       		move.b	(a0)+,d0
00005A04 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005A08 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005A0E 43F1 0000                  		lea	(a1,d0.w),a1
00005A12 303C 8200                  		move.w	#-$7E00,d0
00005A16 1019                       		move.b	(a1)+,d0
00005A18 3C80                       		move.w	d0,(a6)
00005A1A 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005A1E 303C 8400                  		move.w	#-$7C00,d0
00005A22 1018                       		move.b	(a0)+,d0
00005A24 3C80                       		move.w	d0,(a6)
00005A26 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005A30 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
00005A38 7000                       		moveq	#0,d0
00005A3A 1018                       		move.b	(a0)+,d0
00005A3C 6B00                       		bmi.s	loc_49E8
00005A3E 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005A44 D2C0                       		adda.w	d0,a1
00005A46 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005A4A 24D9                       		move.l	(a1)+,(a2)+
00005A4C 24D9                       		move.l	(a1)+,(a2)+
00005A4E 24D9                       		move.l	(a1)+,(a2)+
00005A50                            
00005A50                            locret_49E6:
00005A50 4E75                       		rts	
00005A52                            ; ===========================================================================
00005A52                            
00005A52                            loc_49E8:
00005A52 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005A56 0C40 008A                  		cmpi.w	#$8A,d0
00005A5A 6500                       		blo.s	loc_49F4
00005A5C 5241                       		addq.w	#1,d1
00005A5E                            
00005A5E                            loc_49F4:
00005A5E C2FC 002A                  		mulu.w	#$2A,d1
00005A62 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005A68 D2C1                       		adda.w	d1,a1
00005A6A 0240 007F                  		andi.w	#$7F,d0
00005A6E 0880 0000                  		bclr	#0,d0
00005A72 6700                       		beq.s	loc_4A18
00005A74 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005A78 24D1                       		move.l	(a1),(a2)+
00005A7A 24E9 0004                  		move.l	4(a1),(a2)+
00005A7E 24E9 0008                  		move.l	8(a1),(a2)+
00005A82                            
00005A82                            loc_4A18:
00005A82 D2FC 000C                  		adda.w	#$C,a1
00005A86 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005A8A 0C40 000A                  		cmpi.w	#$A,d0
00005A8E 6500                       		blo.s	loc_4A2E
00005A90 0440 000A                  		subi.w	#$A,d0
00005A94 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005A98                            
00005A98                            loc_4A2E:
00005A98 3200                       		move.w	d0,d1
00005A9A D040                       		add.w	d0,d0
00005A9C D041                       		add.w	d1,d0
00005A9E D2C0                       		adda.w	d0,a1
00005AA0 24D9                       		move.l	(a1)+,(a2)+
00005AA2 34D9                       		move.w	(a1)+,(a2)+
00005AA4 4E75                       		rts	
00005AA6                            ; End of function PalCycle_SS
00005AA6                            
00005AA6                            ; ===========================================================================
00005AA6 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005AB6                            
00005AB6 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005AC6 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005AD6 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005AE6 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005AF6 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005B06 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005B16 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005B26                            		even
00005B26 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005B34                            		even
00005B34                            
00005B34                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005B7C                            		even
00005B7C                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005C4E                            		even
00005C4E                            
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            ; Subroutine to	make the special stage background animated
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            
00005C4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C4E                            
00005C4E                            
00005C4E                            SS_BGAnimate:
00005C4E 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005C52 6600                       		bne.s	loc_4BF6
00005C54 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005C5A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005C60                            
00005C60                            loc_4BF6:
00005C60 0C40 0008                  		cmpi.w	#8,d0
00005C64 6400                       		bhs.s	loc_4C4E
00005C66 0C40 0006                  		cmpi.w	#6,d0
00005C6A 6600                       		bne.s	loc_4C10
00005C6C 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005C70 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005C74 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005C7A                            
00005C7A                            loc_4C10:
00005C7A 7000                       		moveq	#0,d0
00005C7C 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005C80 4440                       		neg.w	d0
00005C82 4840                       		swap	d0
00005C84 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005C8A 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C8E 7609                       		moveq	#9,d3
00005C90                            
00005C90                            loc_4C26:
00005C90 302B 0002                  		move.w	2(a3),d0
00005C94 6100 DDEC                  		bsr.w	CalcSine
00005C98 7400                       		moveq	#0,d2
00005C9A 1419                       		move.b	(a1)+,d2
00005C9C C1C2                       		muls.w	d2,d0
00005C9E E080                       		asr.l	#8,d0
00005CA0 36C0                       		move.w	d0,(a3)+
00005CA2 1419                       		move.b	(a1)+,d2
00005CA4 4882                       		ext.w	d2
00005CA6 D55B                       		add.w	d2,(a3)+
00005CA8 51CB FFE6                  		dbf	d3,loc_4C26
00005CAC 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005CB0 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005CB6 6000                       		bra.s	loc_4C7E
00005CB8                            ; ===========================================================================
00005CB8                            
00005CB8                            loc_4C4E:
00005CB8 0C40 000C                  		cmpi.w	#$C,d0
00005CBC 6600                       		bne.s	loc_4C74
00005CBE 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005CC2 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005CC6 243C 0001 8000             		move.l	#$18000,d2
00005CCC 7206                       		moveq	#6,d1
00005CCE                            
00005CCE                            loc_4C64:
00005CCE 2013                       		move.l	(a3),d0
00005CD0 9082                       		sub.l	d2,d0
00005CD2 26C0                       		move.l	d0,(a3)+
00005CD4 0482 0000 2000             		subi.l	#$2000,d2
00005CDA 51C9 FFF2                  		dbf	d1,loc_4C64
00005CDE                            
00005CDE                            loc_4C74:
00005CDE 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005CE2 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005CE8                            
00005CE8                            loc_4C7E:
00005CE8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005CEC 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005CF0 4440                       		neg.w	d0
00005CF2 4840                       		swap	d0
00005CF4 7600                       		moveq	#0,d3
00005CF6 161A                       		move.b	(a2)+,d3
00005CF8 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005CFC 4442                       		neg.w	d2
00005CFE 0242 00FF                  		andi.w	#$FF,d2
00005D02 E54A                       		lsl.w	#2,d2
00005D04                            
00005D04                            loc_4C9A:
00005D04 301B                       		move.w	(a3)+,d0
00005D06 544B                       		addq.w	#2,a3
00005D08 7200                       		moveq	#0,d1
00005D0A 121A                       		move.b	(a2)+,d1
00005D0C 5341                       		subq.w	#1,d1
00005D0E                            
00005D0E                            loc_4CA4:
00005D0E 2380 2000                  		move.l	d0,(a1,d2.w)
00005D12 5842                       		addq.w	#4,d2
00005D14 0242 03FC                  		andi.w	#$3FC,d2
00005D18 51C9 FFF4                  		dbf	d1,loc_4CA4
00005D1C 51CB FFE6                  		dbf	d3,loc_4C9A
00005D20 4E75                       		rts	
00005D22                            ; End of function SS_BGAnimate
00005D22                            
00005D22                            ; ===========================================================================
00005D22 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005D2E                            		even
00005D2E 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005D36                            		even
00005D36 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005D4A                            		even
00005D4A                            
00005D4A                            ; ===========================================================================
00005D4A                            
00005D4A                            ; ---------------------------------------------------------------------------
00005D4A                            ; Continue screen
00005D4A                            ; ---------------------------------------------------------------------------
00005D4A                            
00005D4A                            GM_Continue:
00005D4A 6100 C486                  		bsr.w	PaletteFadeOut
00005D4E 46FC 2700                  		disable_ints
00005D52 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005D56 0200 00BF                  		andi.b	#$BF,d0
00005D5A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005D60 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005D66 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005D6A 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005D6E 6100 B460                  		bsr.w	ClearScreen
00005D72 31FC C800 C8FC             		ResetDMAQueue
00005D78 43F8 D000                  		lea	(v_objspace).w,a1
00005D7C 7000                       		moveq	#0,d0
00005D7E 323C 07FF                  		move.w	#$7FF,d1
00005D82                            	Cont_ClrObjRam:
00005D82 22C0                       		move.l	d0,(a1)+
00005D84 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005D88                            
00005D92 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005D98 6100 B5B4                  		bsr.w	NemDec
00005DA6 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005DAC 6100 B5A0                  		bsr.w	NemDec
00005DBA 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005DC0 6100 B58C                  		bsr.w	NemDec
00005DC4 720A                       		moveq	#10,d1
00005DC6 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005DCC 7012                       		moveq	#palid_Continue,d0
00005DCE 6100 C6AC                  		bsr.w	PalLoad1	; load continue	screen palette
00005DDA 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005DE0 42B8 F700                  		clr.l	(v_screenposx).w
00005DE4 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005DEC 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005DF2 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005DF8 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005DFE 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005E04 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005E0A 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005E10 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005E16 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005E1C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005E22 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005E26 0000 0040                  		ori.b	#$40,d0
00005E2A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005E30 6100 C2FA                  		bsr.w	PaletteFadeIn
00005E34                            
00005E34                            ; ---------------------------------------------------------------------------
00005E34                            ; Continue screen main loop
00005E34                            ; ---------------------------------------------------------------------------
00005E34                            
00005E34                            Cont_MainLoop:
00005E34 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005E3A 6100 DC14                  		bsr.w	WaitForVBla
00005E3E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005E44 6400                       		bhs.s	loc_4DF2
00005E46 46FC 2700                  		disable_ints
00005E4A 3238 F614                  		move.w	(v_demolength).w,d1
00005E4E 82FC 003C                  		divu.w	#$3C,d1
00005E52 0281 0000 000F             		andi.l	#$F,d1
00005E58 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005E5E 46FC 2300                  		enable_ints
00005E62                            
00005E62                            loc_4DF2:
00005E62 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005E68 4EB9 0000 0000             		jsr	(BuildSprites).l
00005E6E 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005E74 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005E76 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005E7C 64B6                       		bhs.s	Cont_MainLoop
00005E7E 4A78 F614                  		tst.w	(v_demolength).w
00005E82 6600 FFB0                  		bne.w	Cont_MainLoop
00005E86 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005E8C 4E75                       		rts	
00005E8E                            ; ===========================================================================
00005E8E                            
00005E8E                            Cont_GotoLevel:
00005E8E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005E94 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005E9A 7000                       		moveq	#0,d0
00005E9C 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005EA0 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005EA4 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005EA8 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005EAC 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005EB0 4E75                       		rts	
00005EB2                            ; ===========================================================================
00005EB2                            
00005EB2                            		include	"_incObj\80 Continue Screen Elements.asm"
00005EB2                            ; ---------------------------------------------------------------------------
00005EB2                            ; Object 80 - Continue screen elements
00005EB2                            ; ---------------------------------------------------------------------------
00005EB2                            
00005EB2                            ContScrItem:
00005EB2 7000                       		moveq	#0,d0
00005EB4 1028 0024                  		move.b	$24(a0),d0
00005EB8 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005EBC 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005EC0                            ; ===========================================================================
00005EC0 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005EC2 0000                       		dc.w CSI_Display-CSI_Index
00005EC4 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005EC6 0000                       		dc.w CSI_ChkDel-CSI_Index
00005EC8                            ; ===========================================================================
00005EC8                            
00005EC8                            CSI_Main:	; Routine 0
00005EC8 5428 0024                  		addq.b	#2,obRoutine(a0)
00005ECC 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005ED4 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005EDA 117C 0000 0001             		move.b	#0,obRender(a0)
00005EE0 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005EE6 317C 0120 0008             		move.w	#$120,obX(a0)
00005EEC 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005EF2 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005EF8                            
00005EF8                            CSI_Display:	; Routine 2
00005EF8 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005EFE                            ; ===========================================================================
00005EFE                            
00005EFE                            	CSI_MiniSonicPos:
00005EFE 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005F10 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005F1C                            
00005F1C                            CSI_MakeMiniSonic:
00005F1C                            		; Routine 4
00005F1C 2248                       		movea.l	a0,a1
00005F1E 45F9 0000 5EFE             		lea	(CSI_MiniSonicPos).l,a2
00005F24 7200                       		moveq	#0,d1
00005F26 1238 FE18                  		move.b	(v_continues).w,d1
00005F2A 5501                       		subq.b	#2,d1
00005F2C 6400                       		bcc.s	CSI_MoreThan1
00005F2E 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005F34                            
00005F34                            	CSI_MoreThan1:
00005F34 7601                       		moveq	#1,d3
00005F36 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005F3A 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005F3C                            
00005F3C 7600                       		moveq	#0,d3
00005F3E 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005F40                            
00005F40                            	CSI_FewerThan16:
00005F40 1401                       		move.b	d1,d2
00005F42 0202 0001                  		andi.b	#1,d2
00005F46                            
00005F46                            CSI_MiniSonicLoop:
00005F46 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005F4A 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005F4E 4A02                       		tst.b	d2		; do you have an even number of continues?
00005F50 6700                       		beq.s	CSI_Even	; if yes, branch
00005F52 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005F58                            
00005F58                            	CSI_Even:
00005F58 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005F5E 137C 0006 001A             		move.b	#6,obFrame(a1)
00005F64 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005F6A 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00005F72 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00005F78 137C 0000 0001             		move.b	#0,obRender(a1)
00005F7E 43E9 0040                  		lea	$40(a1),a1
00005F82 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00005F86                            
00005F86 43E9 FFC0                  		lea	-$40(a1),a1
00005F8A 1343 0028                  		move.b	d3,obSubtype(a1)
00005F8E                            
00005F8E                            CSI_ChkDel:	; Routine 6
00005F8E 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00005F92 6700                       		beq.s	CSI_Animate	; if yes, branch
00005F94 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00005F9A 6500                       		bcs.s	CSI_Animate	; if not, branch
00005F9C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005FA0 0200 0001                  		andi.b	#1,d0
00005FA4 6600                       		bne.s	CSI_Animate
00005FA6 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00005FAA 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00005FAC 4E75                       		rts	
00005FAE                            
00005FAE                            CSI_Animate:
00005FAE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005FB2 0200 000F                  		andi.b	#$F,d0
00005FB6 6600                       		bne.s	CSI_Display2
00005FB8 0868 0000 001A             		bchg	#0,obFrame(a0)
00005FBE                            
00005FBE                            	CSI_Display2:
00005FBE 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005FC4                            ; ===========================================================================
00005FC4                            
00005FC4                            CSI_Delete:
00005FC4 4EF9 0000 0000             		jmp	(DeleteObject).l
00005FC4 4EF9 0000 0000             		jmp	(DeleteObject).l
00005FCA                            		include	"_incObj\81 Continue Screen Sonic.asm"
00005FCA                            ; ---------------------------------------------------------------------------
00005FCA                            ; Object 81 - Sonic on the continue screen
00005FCA                            ; ---------------------------------------------------------------------------
00005FCA                            
00005FCA                            ContSonic:
00005FCA 7000                       		moveq	#0,d0
00005FCC 1028 0024                  		move.b	obRoutine(a0),d0
00005FD0 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00005FD4 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00005FD8 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005FDE                            ; ===========================================================================
00005FDE 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00005FE0 0000                       		dc.w CSon_ChkLand-CSon_Index
00005FE2 0000                       		dc.w CSon_Animate-CSon_Index
00005FE4 0000                       		dc.w CSon_Run-CSon_Index
00005FE6                            ; ===========================================================================
00005FE6                            
00005FE6                            CSon_Main:	; Routine 0
00005FE6 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FEA 317C 00A0 0008             		move.w	#$A0,obX(a0)
00005FF0 317C 00C0 000C             		move.w	#$C0,obY(a0)
00005FF6 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005FFE 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006004 117C 0004 0001             		move.b	#4,obRender(a0)
0000600A 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006010 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00006016 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
0000601C                            
0000601C                            CSon_ChkLand:	; Routine 2
0000601C 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00006022 6600                       		bne.s	CSon_ShowFall	; if not, branch
00006024                            
00006024 5428 0024                  		addq.b	#2,obRoutine(a0)
00006028 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
0000602C 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00006034 317C 8500 0002             		move.w	#$8500,obGfx(a0)
0000603A 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00006040 6000                       		bra.s	CSon_Animate
00006042                            
00006042                            CSon_ShowFall:
00006042 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006048 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000604E 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006054                            ; ===========================================================================
00006054                            
00006054                            CSon_Animate:	; Routine 4
00006054 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00006058 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
0000605A 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00006060 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006066                            
00006066                            CSon_GetUp:
00006066 5428 0024                  		addq.b	#2,obRoutine(a0)
0000606A 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00006072 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006078 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
0000607E 4268 0020                  		clr.w	obInertia(a0)
00006082 5168 000C                  		subq.w	#8,obY(a0)
0000608E                            
0000608E                            CSon_Run:	; Routine 6
0000608E 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00006094 6600                       		bne.s	CSon_AddInertia	; if too low, branch
00006096 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
0000609C 6000                       		bra.s	CSon_ShowRun
0000609E                            
0000609E                            CSon_AddInertia:
0000609E 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
000060A4                            
000060A4                            CSon_ShowRun:
000060A4 4EB9 0000 0000             		jsr	(SpeedToPos).l
000060AA 4EB9 0000 0000             		jsr	(Sonic_Animate).l
000060B0 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
000060B0 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
000060B6                            		include	"_anim\Continue Screen Sonic.asm"
000060B6                            ; ---------------------------------------------------------------------------
000060B6                            ; Animation script - Sonic on the continue screen
000060B6                            ; ---------------------------------------------------------------------------
000060B6 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
000060B8 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
000060C2                            		even
000060C2                            		even
000060C2                            Map_ContScr:	include	"_maps\Continue Screen.asm"
000060C2                            ; --------------------------------------------------------------------------------
000060C2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000060C2                            ; --------------------------------------------------------------------------------
000060C2                            
000060C2                            SME_phED7:	
000060C2 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
000060C6 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
000060CA 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
000060CE 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
000060D2 0B                         SME_phED7_10:	dc.b $B	
000060D3 F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
000060D8 F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
000060DD F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
000060E2 F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
000060E7 F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
000060EC F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
000060F1 F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
000060F6 F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
000060FB 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
00006100 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
00006105 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
0000610A 03                         SME_phED7_48:	dc.b 3	
0000610B 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
00006110 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00006115 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
0000611A 03                         SME_phED7_58:	dc.b 3	
0000611B 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
00006120 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00006125 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
0000612A 03                         SME_phED7_68:	dc.b 3	
0000612B 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
00006130 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00006135 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
0000613A 02                         SME_phED7_78:	dc.b 2	
0000613B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
00006140 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
00006145 01                         SME_phED7_83:	dc.b 1	
00006146 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
0000614B 01                         SME_phED7_89:	dc.b 1	
0000614C 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00006151 01                         SME_phED7_8F:	dc.b 1	
00006152 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
00006158 00                         		even
00006158 00                         		even
00006158                            
00006158                            ; ===========================================================================
00006158                            ; ---------------------------------------------------------------------------
00006158                            ; Ending sequence in Green Hill	Zone
00006158                            ; ---------------------------------------------------------------------------
00006158                            
00006158                            GM_Ending:
00006160 6100 C070                  		bsr.w	PaletteFadeOut
00006164                            
00006164 43F8 D000                  		lea	(v_objspace).w,a1
00006168 7000                       		moveq	#0,d0
0000616A 323C 07FF                  		move.w	#$7FF,d1
0000616E                            	End_ClrObjRam:
0000616E 22C0                       		move.l	d0,(a1)+
00006170 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006174                            
00006174 43F8 F628                  		lea	($FFFFF628).w,a1
00006178 7000                       		moveq	#0,d0
0000617A 323C 0015                  		move.w	#$15,d1
0000617E                            	End_ClrRam1:
0000617E 22C0                       		move.l	d0,(a1)+
00006180 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00006184                            
00006184 43F8 F700                  		lea	(v_screenposx).w,a1
00006188 7000                       		moveq	#0,d0
0000618A 323C 003F                  		move.w	#$3F,d1
0000618E                            	End_ClrRam2:
0000618E 22C0                       		move.l	d0,(a1)+
00006190 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006194                            
00006194 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00006198 7000                       		moveq	#0,d0
0000619A 323C 0047                  		move.w	#$47,d1
0000619E                            	End_ClrRam3:
0000619E 22C0                       		move.l	d0,(a1)+
000061A0 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000061A4                            
000061A4 46FC 2700                  		disable_ints
000061A8 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000061AC 0200 00BF                  		andi.b	#$BF,d0
000061B0 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000061B6 6100 B018                  		bsr.w	ClearScreen
000061BA 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000061C0 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000061C4 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000061C8 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000061CC 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
000061D0 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000061D4 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
000061D8 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
000061DC 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
000061E2 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
000061E6 31FC 001E FE14             		move.w	#30,(v_air).w
000061EC 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
000061F2 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
000061F8 6700                       		beq.s	End_LoadData	; if yes, branch
000061FA 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
00006200                            
00006200                            End_LoadData:
00006200 7000                       		moveq	#plcid_Ending,d0
00006202 6100 B6A2                  		bsr.w	QuickPLC	; load ending sequence patterns
00006206 4EB9 0000 0000             		jsr	(Hud_Base).l
0000620C 6100 0000                  		bsr.w	LevelSizeLoad
00006210 6100 0000                  		bsr.w	DeformLayers
00006214 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
0000621A 6100 0000                  		bsr.w	LevelDataLoad
0000621E 6100 0000                  		bsr.w	LoadTilesFromStart
00006222 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
0000622A 46FC 2300                  		enable_ints
0000622E 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00006234 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00006238 6100 B81C                  		bsr.w	KosDec
0000623C 4EB9 0000 0000             		jsr		LoadPlayerPal
00006242 6100 C238                  		bsr.w	PalLoad1	; load Sonic's palette
0000624E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00006254 6700                       		beq.s	End_LoadSonic	; if not, branch
00006256 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
0000625C                            
0000625C                            End_LoadSonic:
0000625C 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00006262 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00006268 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0000626E 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00006274 31FC F800 D020             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
0000627A 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00006280 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006286 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000628C 4EB9 0000 0000             		jsr	(BuildSprites).l
00006292 7000                       		moveq	#0,d0
00006294 31C0 FE20                  		move.w	d0,(v_rings).w
00006298 21C0 FE22                  		move.l	d0,(v_time).w
0000629C 11C0 FE1B                  		move.b	d0,(v_lifecount).w
000062A0 11C0 FE2C                  		move.b	d0,(v_shield).w
000062A4 11C0 FE2D                  		move.b	d0,(v_invinc).w
000062A8 11C0 FE2E                  		move.b	d0,(v_shoes).w
000062AC 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000062B0 31C0 FE08                  		move.w	d0,(v_debuguse).w
000062B4 31C0 FE02                  		move.w	d0,(f_restart).w
000062B8 31C0 FE04                  		move.w	d0,(v_framecount).w
000062BC 6100 EEBC                  		bsr.w	OscillateNumInit
000062C0 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
000062C6 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
000062CC 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
000062D2 31FC 0708 F614             		move.w	#1800,(v_demolength).w
000062D8 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000062DE 6100 D770                  		bsr.w	WaitForVBla
000062E2 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000062E6 0000 0040                  		ori.b	#$40,d0
000062EA 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000062F0 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000062F6 6100 BE34                  		bsr.w	PaletteFadeIn
000062FA                            
000062FA                            ; ---------------------------------------------------------------------------
000062FA                            ; Main ending sequence loop
000062FA                            ; ---------------------------------------------------------------------------
000062FA                            
000062FA                            End_MainLoop:
000062FA 6100 AFB0                  		bsr.w	PauseGame
000062FE 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006304 6100 D74A                  		bsr.w	WaitForVBla
00006308 5278 FE04                  		addq.w	#1,(v_framecount).w
0000630C 6100 0000                  		bsr.w	End_MoveSonic
00006310 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006316 6100 0000                  		bsr.w	DeformLayers
0000631A 4EB9 0000 0000             		jsr	(BuildSprites).l
00006320 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006326 6100 B9F6                  		bsr.w	PaletteCycle
0000632A 6100 EEA4                  		bsr.w	OscillateNumDo
0000632E 6100 EF30                  		bsr.w	SynchroAnimate
00006332 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
00006338 6700                       		beq.s	End_ChkEmerald	; if yes, branch
0000633A                            
0000633A 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
00006348 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
0000634E 4E75                       		rts	
00006350                            ; ===========================================================================
00006350                            
00006350                            End_ChkEmerald:
00006350 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
00006354 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00006358                            
00006358 4278 FE02                  		clr.w	(f_restart).w
0000635C 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006362 4278 F794                  		clr.w	(v_palchgspeed).w
00006366                            
00006366                            	End_AllEmlds:
00006366 6100 AF44                  		bsr.w	PauseGame
0000636A 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006370 6100 D6DE                  		bsr.w	WaitForVBla
00006374 5278 FE04                  		addq.w	#1,(v_framecount).w
00006378 6100 0000                  		bsr.w	End_MoveSonic
0000637C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006382 6100 0000                  		bsr.w	DeformLayers
00006386 4EB9 0000 0000             		jsr	(BuildSprites).l
0000638C 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006392 6100 EE3C                  		bsr.w	OscillateNumDo
00006396 6100 EEC8                  		bsr.w	SynchroAnimate
0000639A 5378 F794                  		subq.w	#1,(v_palchgspeed).w
0000639E 6A00                       		bpl.s	End_SlowFade
000063A0 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000063A6 6100 BF74                  		bsr.w	WhiteOut_ToWhite
000063AA                            
000063AA                            	End_SlowFade:
000063AA 4A78 FE02                  		tst.w	(f_restart).w
000063AE 6700 FFB6                  		beq.w	End_AllEmlds
000063B2 4278 FE02                  		clr.w	(f_restart).w
000063B6 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
000063BC 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000063C2 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000063C8 47F8 F700                  		lea	(v_screenposx).w,a3
000063CC 49F8 A400                  		lea	(v_lvllayout).w,a4
000063D0 343C 4000                  		move.w	#$4000,d2
000063D4 6100 0000                  		bsr.w	DrawChunks
000063D8 7013                       		moveq	#palid_Ending,d0
000063DA 6100 C0A0                  		bsr.w	PalLoad1	; load ending palette
000063DE 6100 BE70                  		bsr.w	PaletteWhiteIn
000063E2 6000 FF16                  		bra.w	End_MainLoop
000063E6                            
000063E6                            ; ---------------------------------------------------------------------------
000063E6                            ; Subroutine controlling Sonic on the ending sequence
000063E6                            ; ---------------------------------------------------------------------------
000063E6                            
000063E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063E6                            
000063E6                            
000063E6                            End_MoveSonic:
000063E6 1038 F7D7                  		move.b	(v_sonicend).w,d0
000063EA 6600                       		bne.s	End_MoveSon2
000063EC 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
000063F2 6400                       		bhs.s	End_MoveSonExit	; if not, branch
000063F4                            
000063F4 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063F8 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
000063FE 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
00006404 4E75                       		rts	
00006406                            ; ===========================================================================
00006406                            
00006406                            End_MoveSon2:
00006406 5500                       		subq.b	#2,d0
00006408 6600                       		bne.s	End_MoveSon3
0000640A 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
00006410 6500                       		blo.s	End_MoveSonExit	; if not, branch
00006412                            
00006412 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006416 7000                       		moveq	#0,d0
00006418 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
0000641C 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
00006420 31C0 D020                  		move.w	d0,(v_player+obInertia).w
00006424 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
0000642A 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
00006430 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
00006436 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
0000643C 4E75                       		rts	
0000643E                            ; ===========================================================================
0000643E                            
0000643E                            End_MoveSon3:
0000643E 5500                       		subq.b	#2,d0
00006440 6600                       		bne.s	End_MoveSonExit
00006442 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006446 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
0000644C 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
00006452 4278 D024                  		clr.w	(v_player+obRoutine).w
00006456                            
00006456                            End_MoveSonExit:
00006456 4E75                       		rts	
00006458                            ; End of function End_MoveSonic
00006458                            
00006458                            ; ===========================================================================
00006458                            
00006458                            		include	"_incObj\87 Ending Sequence Sonic.asm"
00006458                            ; ---------------------------------------------------------------------------
00006458                            ; Object 87 - Sonic on ending sequence
00006458                            ; ---------------------------------------------------------------------------
00006458                            
00006458                            EndSonic:
00006458 7000                       		moveq	#0,d0
0000645A 1028 0025                  		move.b	ob2ndRout(a0),d0
0000645E 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006462 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
00006466 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000646C                            ; ===========================================================================
0000646C 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006470 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00006474 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
00006478 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
0000647C 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
00006480                            
00006480 =00000030                  eson_time:	equ $30	; time to wait between events
00006480                            ; ===========================================================================
00006480                            
00006480                            ESon_Main:	; Routine 0
00006480 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006486 6700                       		beq.s	ESon_Main2	; if yes, branch
00006488 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
0000648E 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006494 4E75                       		rts	
00006496                            ; ===========================================================================
00006496                            
00006496                            ESon_Main2:
00006496 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000649A 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
000064A2 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000064A8 117C 0004 0001             		move.b	#4,obRender(a0)
000064AE 4228 0022                  		clr.b	obStatus(a0)
000064B2 317C 0100 0018             		move.w	#$100,obPriority(a0)
000064B8 117C 0000 001A             		move.b	#0,obFrame(a0)
000064BE 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
000064C4                            
000064C4                            ESon_MakeEmeralds:
000064C4                            		; Routine 2
000064C4 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
000064C8 6600                       		bne.s	ESon_Wait
000064CA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064CE 317C 0001 001C             		move.w	#1,obAnim(a0)
000064D4 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
000064DA                            
000064DA                            	ESon_Wait:
000064DA 4E75                       		rts	
000064DC                            ; ===========================================================================
000064DC                            
000064DC                            Obj87_LookUp:	; Routine 6
000064DC 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
000064E4 6600                       		bne.s	locret_5480
000064E6 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
000064EC 317C 005A 0030             		move.w	#90,eson_time(a0)
000064F2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064F6                            
000064F6                            locret_5480:
000064F6 4E75                       		rts	
000064F8                            ; ===========================================================================
000064F8                            
000064F8                            Obj87_ClrObjRam:
000064F8                            		; Routine 8
000064F8 5368 0030                  		subq.w	#1,eson_time(a0)
000064FC 6600                       		bne.s	ESon_Wait2
000064FE 43F8 D400                  		lea	(v_objspace+$400).w,a1
00006502 323C 00FF                  		move.w	#$FF,d1
00006506                            
00006506                            Obj87_ClrLoop:
00006506 4299                       		clr.l	(a1)+
00006508 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000650C 31FC 0001 FE02             		move.w	#1,(f_restart).w
00006512 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006516 117C 0001 001C             		move.b	#1,obAnim(a0)
0000651C 317C 003C 0030             		move.w	#60,eson_time(a0)
00006522                            
00006522                            ESon_Wait2:
00006522 4E75                       		rts	
00006524                            ; ===========================================================================
00006524                            
00006524                            Obj87_MakeLogo:	; Routine $C
00006524 5368 0030                  		subq.w	#1,eson_time(a0)
00006528 6600                       		bne.s	ESon_Wait3
0000652A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000652E 317C 00B4 0030             		move.w	#180,eson_time(a0)
00006534 117C 0002 001C             		move.b	#2,obAnim(a0)
0000653A 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
00006540                            
00006540                            ESon_Wait3:
00006540 4E75                       		rts	
00006542                            ; ===========================================================================
00006542                            
00006542                            Obj87_Animate:	; Rountine 4, $A, $E, $12
00006542 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
00006548 4EF9 0000 0000             		jmp	(AnimateSprite).l
0000654E                            ; ===========================================================================
0000654E                            
0000654E                            Obj87_Leap:	; Routine $10
0000654E 5368 0030                  		subq.w	#1,eson_time(a0)
00006552 6600                       		bne.s	ESon_Wait4
00006554 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006558 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006560 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006566 117C 0004 0001             		move.b	#4,obRender(a0)
0000656C 4228 0022                  		clr.b	obStatus(a0)
00006570 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006576 117C 0005 001A             		move.b	#5,obFrame(a0)
0000657C 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
00006582 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
00006588 60B8                       		bra.s	Obj87_Animate
0000658A                            ; ===========================================================================
0000658A                            
0000658A                            ESon_Wait4:
0000658A 4E75                       		rts	
0000658A 4E75                       		rts	
0000658C                            		include "_anim\Ending Sequence Sonic.asm"
0000658C                            ; ---------------------------------------------------------------------------
0000658C                            ; Animation script - Sonic on the ending sequence
0000658C                            ; ---------------------------------------------------------------------------
0000658C 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
0000658E 0000                       		dc.w byte_552A-AniScript_ESon
00006590 0000                       		dc.w byte_5534-AniScript_ESon
00006592 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000065A0 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000065AA 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000065B2                            		even
000065B2                            		even
000065B2                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
000065B2                            ; ---------------------------------------------------------------------------
000065B2                            ; Object 88 - chaos emeralds on	the ending sequence
000065B2                            ; ---------------------------------------------------------------------------
000065B2                            
000065B2                            EndChaos:
000065B2 7000                       		moveq	#0,d0
000065B4 1028 0024                  		move.b	obRoutine(a0),d0
000065B8 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
000065BC 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
000065C0 4EF9 0000 0000             		jmp	(DisplaySprite).l
000065C6                            ; ===========================================================================
000065C6 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
000065C8 0000                       		dc.w ECha_Move-ECha_Index
000065CA                            
000065CA =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
000065CA =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
000065CA =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
000065CA =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
000065CA                            ; ===========================================================================
000065CA                            
000065CA                            ECha_Main:	; Routine 0
000065CA 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
000065D0 6700                       		beq.s	ECha_CreateEms
000065D2 588F                       		addq.l	#4,sp
000065D4 4E75                       		rts	
000065D6                            ; ===========================================================================
000065D6                            
000065D6                            ECha_CreateEms:
000065D6 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
000065DC 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
000065E2 2248                       		movea.l	a0,a1
000065E4 7600                       		moveq	#0,d3
000065E6 7401                       		moveq	#1,d2
000065E8 7205                       		moveq	#5,d1
000065EA                            
000065EA                            	ECha_LoadLoop:
000065EA 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
000065EE 5429 0024                  		addq.b	#2,obRoutine(a1)
000065F2 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
000065FA 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006600 137C 0004 0001             		move.b	#4,obRender(a1)
00006606 337C 0080 0018             		move.w	#$80,obPriority(a1)
0000660C 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
00006612 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
00006618 1342 001C                  		move.b	d2,obAnim(a1)
0000661C 1342 001A                  		move.b	d2,obFrame(a1)
00006620 5202                       		addq.b	#1,d2
00006622 1343 0026                  		move.b	d3,obAngle(a1)
00006626 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
0000662A 43E9 0040                  		lea	$40(a1),a1
0000662E 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
00006632                            
00006632                            ECha_Move:	; Routine 2
00006632 3028 003E                  		move.w	echa_angle(a0),d0
00006636 D168 0026                  		add.w	d0,obAngle(a0)
0000663A 1028 0026                  		move.b	obAngle(a0),d0
0000663E 4EB9 0000 3A82             		jsr	(CalcSine).l
00006644 7800                       		moveq	#0,d4
00006646 1828 003C                  		move.b	echa_radius(a0),d4
0000664A C3C4                       		muls.w	d4,d1
0000664C E081                       		asr.l	#8,d1
0000664E C1C4                       		muls.w	d4,d0
00006650 E080                       		asr.l	#8,d0
00006652 D268 0038                  		add.w	echa_origX(a0),d1
00006656 D068 003A                  		add.w	echa_origY(a0),d0
0000665A 3141 0008                  		move.w	d1,obX(a0)
0000665E 3140 000C                  		move.w	d0,obY(a0)
00006662                            
00006662                            	ECha_Expand:
00006662 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
00006668 6700                       		beq.s	ECha_Rotate
0000666A 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006670                            
00006670                            	ECha_Rotate:
00006670 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
00006676 6700                       		beq.s	ECha_Rise
00006678 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
0000667E                            
0000667E                            	ECha_Rise:
0000667E 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
00006684 6700                       		beq.s	ECha_End
00006686 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
0000668A                            
0000668A                            ECha_End:
0000668A 4E75                       		rts	
0000668A 4E75                       		rts	
0000668C                            		include	"_incObj\89 Ending Sequence STH.asm"
0000668C                            ; ---------------------------------------------------------------------------
0000668C                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000668C                            ; ---------------------------------------------------------------------------
0000668C                            
0000668C                            EndSTH:
0000668C 7000                       		moveq	#0,d0
0000668E 1028 0024                  		move.b	$24(a0),d0
00006692 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
00006696 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000669A 4EF9 0000 0000             		jmp	(DisplaySprite).l
000066A0                            ; ===========================================================================
000066A0 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
000066A2 0000                       		dc.w ESth_Move-ESth_Index
000066A4 0000                       		dc.w ESth_GotoCredits-ESth_Index
000066A6                            
000066A6 =00000030                  esth_time:	equ $30		; time until exit
000066A6                            ; ===========================================================================
000066A6                            
000066A6                            ESth_Main:	; Routine 0
000066A6 5428 0024                  		addq.b	#2,obRoutine(a0)
000066AA 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
000066B0 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
000066B6 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
000066BE 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
000066C4 117C 0000 0001             		move.b	#0,obRender(a0)
000066CA 317C 0000 0018             		move.w	#0,obPriority(a0)
000066D0                            
000066D0                            ESth_Move:	; Routine 2
000066D0 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
000066D6 6700                       		beq.s	ESth_Delay	; if yes, branch
000066D8 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
000066DE 4E75                       		rts
000066E0                            
000066E0                            ESth_Delay:
000066E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000066E4 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
000066EA                            
000066EA                            ESth_GotoCredits:
000066EA                            		; Routine 4
000066EA 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
000066EE 6A00                       		bpl.s	ESth_Wait
000066F0 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
000066F6                            
000066F6                            	ESth_Wait:
000066F6 4E75                       		rts
000066F8                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
000066F8                            ; ---------------------------------------------------------------------------
000066F8                            ; Sprite mappings - Sonic on the ending	sequence
000066F8                            ; ---------------------------------------------------------------------------
000066F8                            Map_ESon_internal:
000066F8 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
000066FA 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
000066FC 0000                       		dc.w M_ESon_Up-Map_ESon_internal
000066FE 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
00006700 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
00006702 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
00006704 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
00006706 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
00006708 02                         M_ESon_Hold1:	dc.b 2
00006709 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
0000670E 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006713 03                         M_ESon_Hold2:	dc.b 3
00006714 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00006719 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
0000671E 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006723 02                         M_ESon_Up:	dc.b 2
00006724 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00006729 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
0000672E 02                         M_ESon_Conf1:	dc.b 2
0000672F EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00006734 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00006739 02                         M_ESon_Conf2:	dc.b 2
0000673A EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
0000673F FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00006744 03                         M_ESon_Leap1:	dc.b 3
00006745 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
0000674A EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
0000674F 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00006754 07                         M_ESon_Leap2:	dc.b 7
00006755 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
0000675A BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
0000675F BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00006764 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006769 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000676E E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006773 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006778 18                         M_ESon_Leap3:	dc.b $18
00006779 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000677E 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00006783 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00006788 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000678D A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006792 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00006797 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000679C A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
000067A1 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
000067A6 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
000067AB A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
000067B0 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
000067B5 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
000067BA B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
000067BF B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
000067C4 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
000067C9 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
000067CE D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000067D3 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000067D8 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000067DD D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000067E2 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000067E7 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000067EC F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000067F2 00                         		even
000067F2 00                         		even
000067F2                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
000067F2                            ; --------------------------------------------------------------------------------
000067F2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000067F2                            ; --------------------------------------------------------------------------------
000067F2                            
000067F2                            SME_0ZTmS:	
000067F2 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
000067F6 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
000067FA 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
000067FE 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
00006800 01                         SME_0ZTmS_E:	dc.b 1	
00006801 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00006806 01                         SME_0ZTmS_14:	dc.b 1	
00006807 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000680C 01                         SME_0ZTmS_1A:	dc.b 1	
0000680D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00006812 01                         SME_0ZTmS_20:	dc.b 1	
00006813 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
00006818 01                         SME_0ZTmS_26:	dc.b 1	
00006819 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
0000681E 01                         SME_0ZTmS_2C:	dc.b 1	
0000681F F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
00006824 01                         SME_0ZTmS_32:	dc.b 1	
00006825 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0000682A                            		even
0000682A                            		even
0000682A                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
0000682A                            ; ---------------------------------------------------------------------------
0000682A                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000682A                            ; ---------------------------------------------------------------------------
0000682A                            Map_ESth_internal:
0000682A 0000                       		dc.w M_ESth_1-Map_ESth_internal
0000682C 03                         M_ESth_1:	dc.b 3
0000682D F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00006832 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00006837 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
0000683C                            		even
0000683C                            		even
0000683C                            
0000683C                            ; ===========================================================================
0000683C                            ; ---------------------------------------------------------------------------
0000683C                            ; Credits ending sequence
0000683C                            ; ---------------------------------------------------------------------------
0000683C                            
0000683C                            GM_Credits:
0000683C                            		
0000683C 6100 AF5A                  		bsr.w	ClearPLC
00006840 6100 B990                  		bsr.w	PaletteFadeOut
00006844 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000684A 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
0000684E 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006852 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006856 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
0000685A 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
0000685E 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006862 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006866 4238 F64E                  		clr.b	(f_wtr_state).w
0000686A 6100 A964                  		bsr.w	ClearScreen
0000686E                            
0000686E 43F8 D000                  		lea	(v_objspace).w,a1
00006872 7000                       		moveq	#0,d0
00006874 323C 07FF                  		move.w	#$7FF,d1
00006878                            	TryAg_ClrObjRam:
00006878 22C0                       		move.l	d0,(a1)+
0000687A 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000687E                            
0000687E 7000                       		moveq	#plcid_TryAgain,d0
00006880 6100 B024                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00006884                            
00006884 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00006888 7000                       		moveq	#0,d0
0000688A 323C 001F                  		move.w	#$1F,d1
0000688E                            	TryAg_ClrPal:
0000688E 22C0                       		move.l	d0,(a1)+
00006890 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006894                            
00006894 7013                       		moveq	#palid_Ending,d0
00006896 6100 BBE4                  		bsr.w	PalLoad1	; load ending palette
0000689A 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
0000689E 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
000068A4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000068AA 4EB9 0000 0000             		jsr	(BuildSprites).l
000068B0 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
000068B6 6100 B874                  		bsr.w	PaletteFadeIn
000068BA                            
000068BA                            ; ---------------------------------------------------------------------------
000068BA                            ; "TRY AGAIN" and "END"	screen main loop
000068BA                            ; ---------------------------------------------------------------------------
000068BA                            TryAg_MainLoop:
000068BA 6100 A9F0                  		bsr.w	PauseGame
000068BE 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000068C4 6100 D18A                  		bsr.w	WaitForVBla
000068C8 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000068CE 4EB9 0000 0000             		jsr	(BuildSprites).l
000068D4 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000068DA 6600                       		bne.s	TryAg_Exit	; if yes, branch
000068DC 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
000068E0 6700                       		beq.s	TryAg_Exit	; if yes, branch
000068E2 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
000068E8 67D0                       		beq.s	TryAg_MainLoop
000068EA                            
000068EA                            TryAg_Exit:
000068EA 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
000068F0 4E75                       		rts	
000068F2                            
000068F2                            ; ===========================================================================
000068F2                            
000068F2                            		include	"_incObj\8B Try Again & End Eggman.asm"
000068F2                            ; ---------------------------------------------------------------------------
000068F2                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000068F2                            ; ---------------------------------------------------------------------------
000068F2                            
000068F2                            EndEggman:
000068F2 7000                       		moveq	#0,d0
000068F4 1028 0024                  		move.b	obRoutine(a0),d0
000068F8 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
000068FC 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006900 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006906                            ; ===========================================================================
00006906 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
00006908 0000                       		dc.w EEgg_Animate-EEgg_Index
0000690A 0000                       		dc.w EEgg_Juggle-EEgg_Index
0000690C 0000                       		dc.w EEgg_Wait-EEgg_Index
0000690E                            
0000690E =00000030                  eegg_time:	equ $30		; time between juggle motions
0000690E                            ; ===========================================================================
0000690E                            
0000690E                            EEgg_Main:	; Routine 0
0000690E 5428 0024                  		addq.b	#2,obRoutine(a0)
00006912 317C 0120 0008             		move.w	#$120,obX(a0)
00006918 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
0000691E 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
00006926 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000692C 117C 0000 0001             		move.b	#0,obRender(a0)
00006932 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006938 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
0000693E 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006944 6700                       		beq.s	EEgg_Animate	; if yes, branch
00006946                            
00006946 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
0000694C 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006952 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
00006958 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
0000695E                            
0000695E                            EEgg_Animate:	; Routine 2
0000695E 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006964 4EF9 0000 0000             		jmp	(AnimateSprite).l
0000696A                            ; ===========================================================================
0000696A                            
0000696A                            EEgg_Juggle:	; Routine 4
0000696A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000696E 7002                       		moveq	#2,d0
00006970 0828 0000 001C             		btst	#0,obAnim(a0)
00006976 6700                       		beq.s	@noflip
00006978 4440                       		neg.w	d0
0000697A                            
0000697A                            	@noflip:
0000697A 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
0000697E 7205                       		moveq	#5,d1
00006980                            
00006980                            @emeraldloop:
00006980 1340 003E                  		move.b	d0,$3E(a1)
00006984 3400                       		move.w	d0,d2
00006986 E742                       		asl.w	#3,d2
00006988 D529 0026                  		add.b	d2,obAngle(a1)
0000698C 43E9 0040                  		lea	$40(a1),a1
00006990 51C9 FFEE                  		dbf	d1,@emeraldloop
00006994 5228 001A                  		addq.b	#1,obFrame(a0)
00006998 317C 0070 0030             		move.w	#112,eegg_time(a0)
0000699E                            
0000699E                            EEgg_Wait:	; Routine 6
0000699E 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
000069A2 6A00                       		bpl.s	@nochg		; branch if time remains
000069A4 0868 0000 001C             		bchg	#0,obAnim(a0)
000069AA 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
000069B0                            
000069B0                            	@nochg:
000069B0 4E75                       		rts	
000069B0 4E75                       		rts	
000069B2                            		include "_anim\Try Again & End Eggman.asm"
000069B2                            ; ---------------------------------------------------------------------------
000069B2                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000069B2                            ; ---------------------------------------------------------------------------
000069B2 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
000069B4 0000                       		dc.w @tryagain2-Ani_EEgg
000069B6 0000                       		dc.w @end-Ani_EEgg
000069B8 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
000069BC 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
000069C0 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
000069D2                            		even
000069D2                            		even
000069D2                            		include	"_incObj\8C Try Again Emeralds.asm"
000069D2                            ; ---------------------------------------------------------------------------
000069D2                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000069D2                            ; ---------------------------------------------------------------------------
000069D2                            
000069D2                            TryChaos:
000069D2 7000                       		moveq	#0,d0
000069D4 1028 0024                  		move.b	obRoutine(a0),d0
000069D8 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
000069DC 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
000069E0 4EF9 0000 0000             		jmp	(DisplaySprite).l
000069E6                            ; ===========================================================================
000069E6 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
000069E8 0000                       		dc.w TCha_Move-TCha_Index
000069EA                            ; ===========================================================================
000069EA                            
000069EA                            TCha_Main:	; Routine 0
000069EA 2248                       		movea.l	a0,a1
000069EC 7400                       		moveq	#0,d2
000069EE 7600                       		moveq	#0,d3
000069F0 7205                       		moveq	#5,d1
000069F2 9238 FE57                  		sub.b	(v_emeralds).w,d1
000069F6                            
000069F6                            @makeemerald:
000069F6 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
000069FA 5429 0024                  		addq.b	#2,obRoutine(a1)
000069FE 237C 0000 67F2 0004        		move.l	#Map_ECha,obMap(a1)
00006A06 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006A0C 137C 0000 0001             		move.b	#0,obRender(a1)
00006A12 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006A18 337C 0104 0008             		move.w	#$104,obX(a1)
00006A1E 337C 0120 0038             		move.w	#$120,$38(a1)
00006A24 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006A2A 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006A30 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006A36 47F8 FE58                  		lea	(v_emldlist).w,a3
00006A3A                            
00006A3A                            	@chkemerald:
00006A3A 7000                       		moveq	#0,d0
00006A3C 1038 FE57                  		move.b	(v_emeralds).w,d0
00006A40 5340                       		subq.w	#1,d0
00006A42 6500                       		bcs.s	@loc_5B42
00006A44                            
00006A44                            	@chkloop:
00006A44 B433 0000                  		cmp.b	(a3,d0.w),d2
00006A48 6600                       		bne.s	@notgot
00006A4A 5202                       		addq.b	#1,d2
00006A4C 60EC                       		bra.s	@chkemerald
00006A4E                            ; ===========================================================================
00006A4E                            
00006A4E                            	@notgot:
00006A4E 51C8 FFF4                  		dbf	d0,@chkloop
00006A52                            
00006A52                            @loc_5B42:
00006A52 1342 001A                  		move.b	d2,obFrame(a1)
00006A56 5229 001A                  		addq.b	#1,obFrame(a1)
00006A5A 5202                       		addq.b	#1,d2
00006A5C 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006A62 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006A66 1343 001F                  		move.b	d3,obDelayAni(a1)
00006A6A 0643 000A                  		addi.w	#10,d3
00006A6E 43E9 0040                  		lea	$40(a1),a1
00006A72 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006A76                            
00006A76                            TCha_Move:	; Routine 2
00006A76 4A68 003E                  		tst.w	$3E(a0)
00006A7A 6700                       		beq.s	locret_5BBA
00006A7C 4A28 001E                  		tst.b	obTimeFrame(a0)
00006A80 6700                       		beq.s	loc_5B78
00006A82 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006A86 6600                       		bne.s	loc_5B80
00006A88                            
00006A88                            loc_5B78:
00006A88 3028 003E                  		move.w	$3E(a0),d0
00006A8C D168 0026                  		add.w	d0,obAngle(a0)
00006A90                            
00006A90                            loc_5B80:
00006A90 1028 0026                  		move.b	obAngle(a0),d0
00006A94 6700                       		beq.s	loc_5B8C
00006A96 0C00 0080                  		cmpi.b	#$80,d0
00006A9A 6600                       		bne.s	loc_5B96
00006A9C                            
00006A9C                            loc_5B8C:
00006A9C 4268 003E                  		clr.w	$3E(a0)
00006AA0 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006AA6                            
00006AA6                            loc_5B96:
00006AA6 4EB9 0000 3A82             		jsr	(CalcSine).l
00006AAC 7800                       		moveq	#0,d4
00006AAE 1828 003C                  		move.b	$3C(a0),d4
00006AB2 C3C4                       		muls.w	d4,d1
00006AB4 E081                       		asr.l	#8,d1
00006AB6 C1C4                       		muls.w	d4,d0
00006AB8 E080                       		asr.l	#8,d0
00006ABA D268 0038                  		add.w	$38(a0),d1
00006ABE D068 003A                  		add.w	$3A(a0),d0
00006AC2 3141 0008                  		move.w	d1,obX(a0)
00006AC6 3140 000A                  		move.w	d0,obScreenY(a0)
00006ACA                            
00006ACA                            locret_5BBA:
00006ACA 4E75                       		rts	
00006ACA 4E75                       		rts	
00006ACC                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006ACC                            ; ---------------------------------------------------------------------------
00006ACC                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006ACC                            ; ---------------------------------------------------------------------------
00006ACC                            Map_EEgg_internal:
00006ACC 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006ACE 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006AD0 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006AD2 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006AD4 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006AD6 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006AD8 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006ADA 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006ADC 08                         M_EEgg_Try1:	dc.b 8
00006ADD E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006AE2 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006AE7 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006AEC F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006AF1 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006AF6 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006AFB 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B00 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B05 08                         M_EEgg_Try2:	dc.b 8
00006B06 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006B0B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006B10 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006B15 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006B1A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006B1F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006B24 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B29 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B2E 08                         M_EEgg_Try3:	dc.b 8
00006B2F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006B34 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006B39 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006B3E F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006B43 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006B48 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006B4D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B52 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B57 08                         M_EEgg_Try4:	dc.b 8
00006B58 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006B5D F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006B62 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006B67 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006B6C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006B71 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006B76 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B7B 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B80 0C                         M_EEgg_End1:	dc.b $C
00006B81 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006B86 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006B8B 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006B90 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006B95 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006B9A F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006B9F 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006BA4 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006BA9 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006BAE 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006BB3 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006BB8 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006BBD 0A                         M_EEgg_End2:	dc.b $A
00006BBE D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006BC3 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006BC8 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006BCD D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006BD2 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006BD7 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006BDC 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006BE1 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006BE6 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006BEB 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006BF0 0A                         M_EEgg_End3:	dc.b $A
00006BF1 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006BF6 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006BFB EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006C00 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006C05 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006C0A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006C0F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006C14 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006C19 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006C1E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006C23 0C                         M_EEgg_End4:	dc.b $C
00006C24 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006C29 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006C2E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006C33 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006C38 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006C3D FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006C42 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006C47 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006C4C 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006C51 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006C56 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006C5B 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006C60                            		even
00006C60                            		even
00006C60                            
00006C60                            ; ---------------------------------------------------------------------------
00006C60                            ; Ending sequence demos
00006C60                            ; ---------------------------------------------------------------------------
00006C60                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006C8E                            		even
00006C8E                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006CCE                            		even
00006CCE                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006CFE                            		even
00006CFE                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006D2E                            		even
00006D2E                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006D4E                            		even
00006D4E                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006D6E                            		even
00006D6E                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006D9E                            		even
00006D9E                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006DCE                            		even
00006DCE                            
00006DCE                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006DCE                            ; ---------------------------------------------------------------------------
00006DCE                            ; Subroutine to	load level boundaries and start	locations
00006DCE                            ; ---------------------------------------------------------------------------
00006DCE                            
00006DCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DCE                            
00006DCE                            
00006DCE                            LevelSizeLoad:
00006DCE 7000                       		moveq	#0,d0
00006DD0 11C0 F740                  		move.b	d0,($FFFFF740).w
00006DD4 11C0 F741                  		move.b	d0,($FFFFF741).w
00006DD8 11C0 F746                  		move.b	d0,($FFFFF746).w
00006DDC 11C0 F748                  		move.b	d0,($FFFFF748).w
00006DE0 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006DE4 3038 FE10                  		move.w	(v_zone).w,d0
00006DE8 ED08                       		lsl.b	#6,d0
00006DEA E848                       		lsr.w	#4,d0
00006DEC 3200                       		move.w	d0,d1
00006DEE D040                       		add.w	d0,d0
00006DF0 D041                       		add.w	d1,d0
00006DF2 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006DF6 3018                       		move.w	(a0)+,d0
00006DF8 31C0 F730                  		move.w	d0,($FFFFF730).w
00006DFC 2018                       		move.l	(a0)+,d0
00006DFE 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006E02 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006E06 2018                       		move.l	(a0)+,d0
00006E08 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006E0C 21C0 F724                  		move.l	d0,(v_limittop1).w
00006E10 3038 F728                  		move.w	(v_limitleft2).w,d0
00006E14 0640 0240                  		addi.w	#$240,d0
00006E18 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006E1C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006E22 3018                       		move.w	(a0)+,d0
00006E24 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006E28 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006E2E 6000 0000                  		bra.w	LevSz_ChkLamp
00006E32                            
00006E32                            ; ===========================================================================
00006E32                            ; ---------------------------------------------------------------------------
00006E32                            ; Level size array
00006E32                            ; ---------------------------------------------------------------------------
00006E32                            LevelSizeArray:
00006E32                            		; GHZ
00006E32 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006E3E 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006E4A 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006E56 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006E62                            		; LZ
00006E62 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006E6E 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006E7A 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006E86 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006E92                            		; MZ
00006E92 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006E9E 0004 0000 25E0 0000 0520+  		dc.w $0004, $0000, $25E0, $0000, $0520, $0060
00006EAA 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006EB6 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006EC2                            		; SLZ
00006EC2 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006ECE 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006EDA 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006EE6 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006EF2                            		; SYZ
00006EF2 0004 0000 22C0 0000 0520+  		dc.w $0004, $0000, $22C0, $0000, $0520, $0060
00006EFE 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006F0A 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006F16 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006F22                            		; SBZ
00006F22 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006F2E 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006F3A 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006F46 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006F52                            		; Ending
00006F52 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006F5E 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006F6A 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006F76 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006F82                            
00006F82                            ; ---------------------------------------------------------------------------
00006F82                            ; Ending start location array
00006F82                            ; ---------------------------------------------------------------------------
00006F82                            EndingStLocArray:
00006F82                            		include	"_inc\Start Location Array - Ending.asm"
00006F82                            ; ---------------------------------------------------------------------------
00006F82                            ; Ending start location array
00006F82                            ; ---------------------------------------------------------------------------
00006F82                            
00006F82                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00006F86                            		incbin	"startpos\mz2 (Credits demo).bin"
00006F8A                            		incbin	"startpos\syz3 (Credits demo).bin"
00006F8E                            		incbin	"startpos\lz3 (Credits demo).bin"
00006F92                            		incbin	"startpos\slz3 (Credits demo).bin"
00006F96                            		incbin	"startpos\sbz1 (Credits demo).bin"
00006F9A                            		incbin	"startpos\sbz2 (Credits demo).bin"
00006F9E                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00006FA2                            		even
00006FA2                            		even
00006FA2                            
00006FA2                            ; ===========================================================================
00006FA2                            
00006FA2                            LevSz_ChkLamp:
00006FA2 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00006FA6 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006FA8                            
00006FA8 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00006FAE 3238 D008                  		move.w	(v_player+obX).w,d1
00006FB2 3038 D00C                  		move.w	(v_player+obY).w,d0
00006FB6 6000                       		bra.s	LevSz_SkipStartPos
00006FB8                            ; ===========================================================================
00006FB8                            
00006FB8                            LevSz_StartLoc:
00006FB8 3038 FE10                  		move.w	(v_zone).w,d0
00006FBC ED08                       		lsl.b	#6,d0
00006FBE E848                       		lsr.w	#4,d0
00006FC0 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006FC4 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00006FC8 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006FCA                            
00006FCA 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00006FCE 5340                       		subq.w	#1,d0
00006FD0 E548                       		lsl.w	#2,d0
00006FD2 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006FD6                            
00006FD6                            LevSz_SonicPos:
00006FD6 7200                       		moveq	#0,d1
00006FD8 3219                       		move.w	(a1)+,d1
00006FDA 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00006FDE 7000                       		moveq	#0,d0
00006FE0 3011                       		move.w	(a1),d0
00006FE2 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00006FE6                            
00006FE6                            SetScreen:
00006FE6                            	LevSz_SkipStartPos:
00006FE6 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
00006FEA 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
00006FEE 743F                       		moveq #63,d2 ; begin a 64-step loop 
00006FF0                            @looppoint: 
00006FF0 34C1                       		move.w d1,(a2)+ ; fill in X 
00006FF2 34C0                       		move.w d0,(a2)+ ; fill in Y 
00006FF4 51CA FFFA                  		dbf d2,@looppoint ; loop	
00006FF8 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00006FFC 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
00006FFE 7200                       		moveq	#0,d1
00007000                            
00007000                            	SetScr_WithinLeft:
00007000 3438 F72A                  		move.w	(v_limitright2).w,d2
00007004 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00007006 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00007008 3202                       		move.w	d2,d1
0000700A                            
0000700A                            	SetScr_WithinRight:
0000700A 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
0000700E                            
0000700E 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00007012 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00007014 7000                       		moveq	#0,d0
00007016                            
00007016                            	SetScr_WithinTop:
00007016 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
0000701A 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
0000701C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00007020                            
00007020                            	SetScr_WithinBottom:
00007020 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00007024 6100 0000                  		bsr.w	BgScrollSpeed
00007028 7000                       		moveq	#0,d0
0000702A 1038 FE10                  		move.b	(v_zone).w,d0
0000702E E508                       		lsl.b	#2,d0
00007030 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00007036 4E75                       		rts
00007038                            ; ===========================================================================
00007038                            ; ---------------------------------------------------------------------------
00007038                            ; Sonic start location array
00007038                            ; ---------------------------------------------------------------------------
00007038                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00007038                            ; ---------------------------------------------------------------------------
00007038                            ; Sonic start location array
00007038                            ; ---------------------------------------------------------------------------
00007038                            
00007038                            		incbin	"startpos\ghz1.bin"
0000703C                            		incbin	"startpos\ghz2.bin"
00007040                            		incbin	"startpos\ghz3.bin"
00007044 0080 00A8                  		dc.w	$80,$A8
00007048                            
00007048                            		incbin	"startpos\lz1.bin"
0000704C                            		incbin	"startpos\lz2.bin"
00007050                            		incbin	"startpos\lz3.bin"
00007054                            		incbin	"startpos\sbz3.bin"
00007058                            
00007058                            		incbin	"startpos\mz1.bin"
0000705C                            		incbin	"startpos\mz2.bin"
00007060                            		incbin	"startpos\mz3.bin"
00007064 0080 00A8                  		dc.w	$80,$A8
00007068                            
00007068                            		incbin	"startpos\slz1.bin"
0000706C                            		incbin	"startpos\slz2.bin"
00007070                            		incbin	"startpos\slz3.bin"
00007074 0080 00A8                  		dc.w	$80,$A8
00007078                            
00007078                            		incbin	"startpos\syz1.bin"
0000707C                            		incbin	"startpos\syz2.bin"
00007080                            		incbin	"startpos\syz3.bin"
00007084 0080 00A8                  		dc.w	$80,$A8
00007088                            
00007088                            		incbin	"startpos\sbz1.bin"
0000708C                            		incbin	"startpos\sbz2.bin"
00007090                            		incbin	"startpos\fz.bin"
00007094 0080 00A8                  		dc.w	$80,$A8
00007098                            
00007098                            
00007098                            		incbin	"startpos\end1.bin"
0000709C                            		incbin	"startpos\end2.bin"
000070A0 0080 00A8                  		dc.w	$80,$A8
000070A4 0080 00A8                  		dc.w	$80,$A8
000070A8                            
000070A8                            		even
000070A8                            		even
000070A8                            
000070A8                            ; ---------------------------------------------------------------------------
000070A8                            ; Which	256x256	tiles contain loops or roll-tunnels
000070A8                            ; ---------------------------------------------------------------------------
000070A8                            
000070A8                            LoopTileNums:
000070A8                            
000070A8                            ; 		loop	loop	tunnel	tunnel
000070A8                            
000070A8 B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
000070AC 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
000070B0 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
000070B4 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
000070B8 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
000070BC 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
000070C0 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
000070C4                            
000070C4                            		even
000070C4                            
000070C4                            ; ---------------------------------------------------------------------------
000070C4                            ; Subroutine to	set scroll speed of some backgrounds
000070C4                            ; ---------------------------------------------------------------------------
000070C4                            
000070C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070C4                            
000070C4                            
000070C4                            BgScrollSpeed:
000070C4 4A38 FE30                  		tst.b	(v_lastlamp).w
000070C8 6600                       		bne.s	loc_6206
000070CA 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070CE 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000070D2 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
000070D6 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
000070DA 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
000070DE                            
000070DE                            loc_6206:
000070DE 7400                       		moveq	#0,d2
000070E0 1438 FE10                  		move.b	(v_zone).w,d2
000070E4 D442                       		add.w	d2,d2
000070E6 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000070EA 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000070EE                            ; End of function BgScrollSpeed
000070EE                            
000070EE                            ; ===========================================================================
000070EE 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000070F2 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000070F6 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000070FA 0000                       		dc.w BgScroll_End-BgScroll_Index
000070FC                            ; ===========================================================================
000070FC                            
000070FC                            BgScroll_GHZ:
000070FC 42B8 F708                  		clr.l	(v_bgscreenposx).w
00007100 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007104 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007108 42B8 F71C                  		clr.l	(v_bg3screenposy).w
0000710C 45F8 A800                  		lea	($FFFFA800).w,a2
00007110 429A                       		clr.l	(a2)+
00007112 429A                       		clr.l	(a2)+
00007114 429A                       		clr.l	(a2)+
00007116 4E75                       		rts
00007118                            ; ===========================================================================
00007118                            
00007118                            BgScroll_LZ:
00007118 E280                       		asr.l	#1,d0
0000711A 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000711E 4E75                       		rts	
00007120                            ; ===========================================================================
00007120                            
00007120                            BgScroll_MZ:
00007120 4E75                       		rts	
00007122                            ; ===========================================================================
00007122                            
00007122                            BgScroll_SLZ:
00007122 E280                       		asr.l	#1,d0
00007124 0640 00C0                  		addi.w	#$C0,d0
00007128 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000712C 42B8 F708                  		clr.l	(v_bgscreenposx).w
00007130 4E75                       		rts	
00007132                            ; ===========================================================================
00007132                            
00007132                            BgScroll_SYZ:
00007132 E980                       		asl.l	#4,d0
00007134 2400                       		move.l	d0,d2
00007136 E380                       		asl.l	#1,d0
00007138 D082                       		add.l	d2,d0
0000713A E080                       		asr.l	#8,d0
0000713C 5240                       		addq.w	#1,d0
0000713E 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007142 42B8 F708                  		clr.l	(v_bgscreenposx).w
00007146 4E75                       		rts	
00007148                            ; ===========================================================================
00007148                            
00007148                            BgScroll_SBZ:
00007148 0240 07F8                  		andi.w	#$7F8,d0
0000714C E640                       		asr.w	#3,d0
0000714E 5240                       		addq.w	#1,d0
00007150 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007154 4E75                       		rts	
00007156                            ; ===========================================================================
00007156                            
00007156                            BgScroll_End:
00007156 3038 F700                  		move.w	(v_screenposx).w,d0
0000715A E240                       		asr.w	#1,d0
0000715C 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00007160 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
00007164 E440                       		asr.w	#2,d0
00007166 3200                       		move.w	d0,d1
00007168 D040                       		add.w	d0,d0
0000716A D041                       		add.w	d1,d0
0000716C 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00007170 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007174 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007178 42B8 F71C                  		clr.l	(v_bg3screenposy).w
0000717C 45F8 A800                  		lea	($FFFFA800).w,a2
00007180 429A                       		clr.l	(a2)+
00007182 429A                       		clr.l	(a2)+
00007184 429A                       		clr.l	(a2)+
00007186 4E75                       		rts
00007186 4E75                       		rts
00007188                            		include	"_inc\DeformLayers (JP1).asm"
00007188                            ; ---------------------------------------------------------------------------
00007188                            ; Background layer deformation subroutines
00007188                            ; ---------------------------------------------------------------------------
00007188                            
00007188                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007188                            
00007188                            
00007188                            DeformLayers:
00007188 4A38 F744                  		tst.b	(f_nobgscroll).w
0000718C 6700                       		beq.s	@bgscroll
0000718E 4E75                       		rts	
00007190                            ; ===========================================================================
00007190                            
00007190                            	@bgscroll:
00007190 4278 F754                  		clr.w	(v_fg_scroll_flags).w
00007194 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
00007198 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
0000719C 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
000071A0 6100 0000                  		bsr.w	ScrollHoriz
000071A4 6100 0000                  		bsr.w	ScrollVertical
000071A8 6100 0000                  		bsr.w	DynamicLevelEvents
000071AC 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
000071B2 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000071B8 7000                       		moveq	#0,d0
000071BA 1038 FE10                  		move.b	(v_zone).w,d0
000071BE D040                       		add.w	d0,d0
000071C0 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000071C4 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000071C8                            ; End of function DeformLayers
000071C8                            
000071C8                            ; ===========================================================================
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            ; Offset index for background layer deformation	code
000071C8                            ; ---------------------------------------------------------------------------
000071C8 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000071CC 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000071D0 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000071D4 0000                       		dc.w Deform_GHZ-Deform_Index
000071D6                            ; ---------------------------------------------------------------------------
000071D6                            ; Green	Hill Zone background layer deformation code
000071D6                            ; ---------------------------------------------------------------------------
000071D6                            
000071D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071D6                            
000071D6                            
000071D6                            Deform_GHZ:
000071D6                            	;cmpi.b    #id_Title,(v_gamemode).w
000071D6                            	;beq.w    Deform_Title
000071D6                            
000071D6                            ;Deform_GHZ_Stage:
000071D6                            	; block 3 - distant mountains
000071D6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000071DA 48C4                       		ext.l	d4
000071DC EB84                       		asl.l	#5,d4
000071DE 2204                       		move.l	d4,d1
000071E0 E384                       		asl.l	#1,d4
000071E2 D881                       		add.l	d1,d4
000071E4 7C00                       		moveq	#0,d6
000071E6 6100 0000                  		bsr.w	BGScroll_Block3
000071EA                            	; block 2 - hills & waterfalls
000071EA 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000071EE 48C4                       		ext.l	d4
000071F0 EF84                       		asl.l	#7,d4
000071F2 7C00                       		moveq	#0,d6
000071F4 6100 0000                  		bsr.w	BGScroll_Block2
000071F8                            	; calculate Y position
000071F8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000071FC 3038 F704                  		move.w	(v_screenposy).w,d0
00007200 0240 07FF                  		andi.w	#$7FF,d0
00007204 EA48                       		lsr.w	#5,d0
00007206 4440                       		neg.w	d0
00007208 0640 0020                  		addi.w	#$20,d0
0000720C 6A00                       		bpl.s	@limitY
0000720E 7000                       		moveq	#0,d0
00007210                            	@limitY:
00007210 3800                       		move.w	d0,d4
00007212 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
00007216 3038 F700                  		move.w	(v_screenposx).w,d0
0000721A 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00007220 6600                       		bne.s	@notTitle
00007222 7000                       		moveq	#0,d0	; reset foreground position in title screen
00007224                            	@notTitle:
00007224 4440                       		neg.w	d0
00007226 4840                       		swap	d0
00007228                            	; auto-scroll clouds
00007228 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
0000722C 069A 0001 0000             		addi.l	#$10000,(a2)+
00007232 069A 0000 C000             		addi.l	#$C000,(a2)+
00007238 069A 0000 8000             		addi.l	#$8000,(a2)+
0000723E                            	; calculate background scroll	
0000723E 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
00007242 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007246 4440                       		neg.w	d0
00007248 323C 001F                  		move.w	#$1F,d1
0000724C 9244                       		sub.w	d4,d1
0000724E 6500                       		bcs.s	@gotoCloud2
00007250                            	@cloudLoop1:		; upper cloud (32px)
00007250 22C0                       		move.l	d0,(a1)+
00007252 51C9 FFFC                  		dbf	d1,@cloudLoop1
00007256                            
00007256                            	@gotoCloud2:
00007256 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
0000725A D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000725E 4440                       		neg.w	d0
00007260 323C 000F                  		move.w	#$F,d1
00007264                            	@cloudLoop2:		; middle cloud (16px)
00007264 22C0                       		move.l	d0,(a1)+
00007266 51C9 FFFC                  		dbf	d1,@cloudLoop2
0000726A                            
0000726A 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
0000726E D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007272 4440                       		neg.w	d0
00007274 323C 000F                  		move.w	#$F,d1
00007278                            	@cloudLoop3:		; lower cloud (16px)
00007278 22C0                       		move.l	d0,(a1)+
0000727A 51C9 FFFC                  		dbf	d1,@cloudLoop3
0000727E                            
0000727E 323C 002F                  		move.w	#$2F,d1
00007282 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007286 4440                       		neg.w	d0
00007288                            	@mountainLoop:		; distant mountains (48px)
00007288 22C0                       		move.l	d0,(a1)+
0000728A 51C9 FFFC                  		dbf	d1,@mountainLoop
0000728E                            
0000728E 323C 0027                  		move.w	#$27,d1
00007292 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007296 4440                       		neg.w	d0
00007298                            	@hillLoop:			; hills & waterfalls (40px)
00007298 22C0                       		move.l	d0,(a1)+
0000729A 51C9 FFFC                  		dbf	d1,@hillLoop
0000729E                            
0000729E 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072A2 3438 F700                  		move.w	(v_screenposx).w,d2
000072A6 9440                       		sub.w	d0,d2
000072A8 48C2                       		ext.l	d2
000072AA E182                       		asl.l	#8,d2
000072AC 85FC 0068                  		divs.w	#$68,d2
000072B0 48C2                       		ext.l	d2
000072B2 E182                       		asl.l	#8,d2
000072B4 7600                       		moveq	#0,d3
000072B6 3600                       		move.w	d0,d3
000072B8 323C 0047                  		move.w	#$47,d1
000072BC D244                       		add.w	d4,d1
000072BE                            	@waterLoop:			; water deformation
000072BE 3003                       		move.w	d3,d0
000072C0 4440                       		neg.w	d0
000072C2 22C0                       		move.l	d0,(a1)+
000072C4 4843                       		swap	d3
000072C6 D682                       		add.l	d2,d3
000072C8 4843                       		swap	d3
000072CA 51C9 FFF2                  		dbf	d1,@waterLoop
000072CE 4E75                       		rts
000072D0                            ; End of function Deform_GHZ
000072D0                            
000072D0                            Deform_Title:
000072D0 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000072D4 48C4                       		ext.l	d4
000072D6 EB84                       		asl.l	#5,d4
000072D8 2204                       		move.l	d4,d1
000072DA E384                       		asl.l	#1,d4
000072DC D881                       		add.l	d1,d4
000072DE 7A00                       		moveq	#0,d5
000072E0 6100 0000                  		bsr.w	BGScroll_Block1
000072E4 6100 0000                  		bsr.w	BGScroll_Block3
000072E8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000072EC 3038 F704                  		move.w	(v_screenposy).w,d0
000072F0 0240 07FF                  		andi.w	#$7FF,d0
000072F4 EA48                       		lsr.w	#5,d0
000072F6 4440                       		neg.w	d0
000072F8 0640 0026                  		addi.w	#$26,d0
000072FC 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007300 3800                       		move.w	d0,d4
00007302 6100 0000                  		bsr.w	BGScroll_Block3
00007306 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000730C 323C 006F                  		move.w	#$6F,d1
00007310 9244                       		sub.w	d4,d1
00007312 3038 F700                  		move.w	(v_screenposx).w,d0
00007316 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
0000731C 6600                       		bne.s	loc_633C
0000731E 7000                       		moveq	#0,d0
00007320                            
00007320                            loc_633C:
00007320 4440                       		neg.w	d0
00007322 4840                       		swap	d0
00007324 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007328 4440                       		neg.w	d0
0000732A                            
0000732A                            loc_6346:
0000732A 22C0                       		move.l	d0,(a1)+
0000732C 51C9 FFFC                  		dbf	d1,loc_6346
00007330 323C 0027                  		move.w	#$27,d1
00007334 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007338 4440                       		neg.w	d0
0000733A                            
0000733A                            loc_6356:
0000733A 22C0                       		move.l	d0,(a1)+
0000733C 51C9 FFFC                  		dbf	d1,loc_6356
00007340 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007344 0640 0000                  		addi.w	#0,d0
00007348 3438 F700                  		move.w	(v_screenposx).w,d2
0000734C 0642 FE00                  		addi.w	#-$200,d2
00007350 9440                       		sub.w	d0,d2
00007352 48C2                       		ext.l	d2
00007354 E182                       		asl.l	#8,d2
00007356 85FC 0068                  		divs.w	#$68,d2
0000735A 48C2                       		ext.l	d2
0000735C E182                       		asl.l	#8,d2
0000735E 7600                       		moveq	#0,d3
00007360 3600                       		move.w	d0,d3
00007362 323C 0047                  		move.w	#$47,d1
00007366 D244                       		add.w	d4,d1
00007368                            
00007368                            loc_6384:
00007368 3003                       		move.w	d3,d0
0000736A 4440                       		neg.w	d0
0000736C 22C0                       		move.l	d0,(a1)+
0000736E 4843                       		swap	d3
00007370 D682                       		add.l	d2,d3
00007372 4843                       		swap	d3
00007374 51C9 FFF2                  		dbf	d1,loc_6384
00007378 4E75                       		rts	
0000737A                            
0000737A                            ; ===========================================================================
0000737A                            ; ---------------------------------------------------------------------------
0000737A                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
0000737A                            ; ---------------------------------------------------------------------------
0000737A                             
0000737A                            Deform_LZ:
0000737A 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
0000737C 3838 F73A                  		move.w	(v_scrshiftx).w,d4			; load horizontal movement distance (Since last frame)
00007380 48C4                       		ext.l	d4					; extend to long-word signed
00007382 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
00007384 3A38 F73C                  		move.w	(v_scrshifty).w,d5			; load vertical movement distance (Since last frame)
00007388 48C5                       		ext.l	d5					; extend to long-word signed
0000738A E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
0000738C 6100 0000                  		bsr.w	BGScroll_Block1				; adjust BG scroll positions (and set draw code direction flags)
00007390 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w		; set BG V-scroll position
00007396 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1			; load H-scroll buffer
0000739A 3038 F700                  		move.w	(v_screenposx).w,d0			; load FG X position
0000739E 4440                       		neg.w	d0					; reverse
000073A0 4840                       		swap	d0					; send to upper word
000073A2 3038 F708                  		move.w	(v_bgscreenposx).w,d0			; load BG X position
000073A6 4440                       		neg.w	d0					; reverse
000073A8 7600                       		moveq	#$00,d3					; clear d3
000073AA 1638 F7D8                  		move.b	(v_lz_deform).w,d3			; load wave-scroll timer
000073AE 0678 0080 F7D8             		addi.w	#$0080,(v_lz_deform).w			; increase wave-scroll timer
000073B4 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
000073B8 3238 F646                  		move.w	(v_waterpos1).w,d1			; load water line position
000073BC 9278 F704                  		sub.w	(v_screenposy).w,d1			; minus FG Y position
000073C0 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
000073C2 B242                       		cmp.w	d2,d1					; is the water line below the screen?
000073C4 6F00                       		ble.s	DLZ_NoWater				; if not, branch
000073C6 3202                       		move.w	d2,d1					; set at maximum
000073C8                             
000073C8                            DLZ_NoWater:
000073C8 9441                       		sub.w	d1,d2					; subtract from water-line count
000073CA D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
000073CC 5301                       		subq.b	#$01,d1					; decrease above water count
000073CE 6500                       		bcs.s	DLZ_Water				; if finished, branch
000073D0                             
000073D0                            DLZ_Above:
000073D0 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
000073D2 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
000073D6                             
000073D6                            DLZ_Water:
000073D6 5302                       		subq.b	#$01,d2					; decrease below water count
000073D8 6500                       		bcs.s	DLZ_Finish				; if finished, branch
000073DA 3200                       		move.w	d0,d1					; copy BG position back to d1
000073DC 4840                       		swap	d0					; move FG position back to lower word in d0
000073DE 3803                       		move.w	d3,d4					; copy sroll timer for BG use
000073E0 D638 F705                  		add.b	(v_screenposy+$01).w,d3			; add FG Y position
000073E4 D838 F70D                  		add.b	(v_bgscreenposy+$01).w,d4			; add BG Y position
000073E8 D643                       		add.w	d3,d3					; multiply by word size (2)
000073EA D844                       		add.w	d4,d4					; ''
000073EC 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
000073F2 D6C4                       		adda.w	d4,a3					; advance to correct starting point
000073F4 1813                       		move.b	(a3),d4					; get current position byte
000073F6 E404                       		asr.b	#$02,d4					; get only the position bits
000073F8 4884                       		ext.w	d4					; extend to word
000073FA D244                       		add.w	d4,d1					; adjust BG's current position
000073FC 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
00007400 1812                       		move.b	(a2),d4					; get current position byte
00007402 E404                       		asr.b	#$02,d4					; get only the position bits
00007404 4884                       		ext.w	d4					; extend to word
00007406 D044                       		add.w	d4,d0					; adjust FG's current position
00007408                             
00007408                            DLZ_Below:
00007408 D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
0000740A 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
0000740C D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
0000740E 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
00007410 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
00007414                             
00007414                            DLZ_Finish:
00007414 4E75                       		rts						; return
00007416                             
00007416                            ; ---------------------------------------------------------------------------
00007416                            ; Scroll data for the FG
00007416                            ; ---------------------------------------------------------------------------
00007416                             
00007416                            DLZ_WaveFG:
00007416                            		rept	$02
00007416                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00007416                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007416                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007416                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007416                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007416                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007416                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007416                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007416                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
00007416                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007416                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00007416                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007416                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007416                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007416                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007416                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007416 0001 0400 0401 0800 0801+  		endr
00007816                             
00007816                            ; ---------------------------------------------------------------------------
00007816                            ; Scroll data for the BG
00007816                            ; ---------------------------------------------------------------------------
00007816                             
00007816                            DLZ_WaveBG:	rept	$04
00007816                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
00007816                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
00007816                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
00007816                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
00007816                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
00007816                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
00007816                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
00007816                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
00007816 FC01 0000 0000 0000 0000+  		endr
00007C16                             
00007C16                            ; ===========================================================================
00007C16                            ; End of function Deform_LZ
00007C16                            
00007C16                            ; ---------------------------------------------------------------------------
00007C16                            ; Marble Zone background layer deformation code
00007C16                            ; ---------------------------------------------------------------------------
00007C16                            
00007C16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C16                            
00007C16                            
00007C16                            Deform_MZ:
00007C16                            	; block 1 - dungeon interior
00007C16 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007C1A 48C4                       		ext.l	d4
00007C1C ED84                       		asl.l	#6,d4
00007C1E 2204                       		move.l	d4,d1
00007C20 E384                       		asl.l	#1,d4
00007C22 D881                       		add.l	d1,d4
00007C24 7C02                       		moveq	#2,d6
00007C26 6100 0000                  		bsr.w	BGScroll_Block1
00007C2A                            	; block 3 - mountains
00007C2A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007C2E 48C4                       		ext.l	d4
00007C30 ED84                       		asl.l	#6,d4
00007C32 7C06                       		moveq	#6,d6
00007C34 6100 0000                  		bsr.w	BGScroll_Block3
00007C38                            	; block 2 - bushes & antique buildings
00007C38 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007C3C 48C4                       		ext.l	d4
00007C3E EF84                       		asl.l	#7,d4
00007C40 7C04                       		moveq	#4,d6
00007C42 6100 0000                  		bsr.w	BGScroll_Block2
00007C46                            	; calculate y-position of background
00007C46 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007C4A 3238 F704                  		move.w	(v_screenposy).w,d1
00007C4E 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007C52 6500                       		bcs.s	@noYscroll
00007C54 3401                       		move.w	d1,d2
00007C56 D241                       		add.w	d1,d1
00007C58 D242                       		add.w	d2,d1
00007C5A E441                       		asr.w	#2,d1
00007C5C D041                       		add.w	d1,d0
00007C5E                            	@noYscroll:
00007C5E 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007C62 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007C66 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007C6A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007C70                            	; do something with redraw flags
00007C70 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007C74 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007C78 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
00007C7C 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00007C80 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007C84                            	; calculate background scroll buffer
00007C84 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007C88 3438 F700                  		move.w	(v_screenposx).w,d2
00007C8C 4442                       		neg.w	d2
00007C8E 3002                       		move.w	d2,d0
00007C90 E440                       		asr.w	#2,d0
00007C92 9042                       		sub.w	d2,d0
00007C94 48C0                       		ext.l	d0
00007C96 E780                       		asl.l	#3,d0
00007C98 81FC 0005                  		divs.w	#5,d0
00007C9C 48C0                       		ext.l	d0
00007C9E E980                       		asl.l	#4,d0
00007CA0 E180                       		asl.l	#8,d0
00007CA2 7600                       		moveq	#0,d3
00007CA4 3602                       		move.w	d2,d3
00007CA6 E243                       		asr.w	#1,d3
00007CA8 323C 0004                  		move.w	#4,d1
00007CAC                            	@cloudLoop:		
00007CAC 32C3                       		move.w	d3,(a1)+
00007CAE 4843                       		swap	d3
00007CB0 D680                       		add.l	d0,d3
00007CB2 4843                       		swap	d3
00007CB4 51C9 FFF6                  		dbf	d1,@cloudLoop
00007CB8                            
00007CB8 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007CBC 4440                       		neg.w	d0
00007CBE 323C 0001                  		move.w	#1,d1
00007CC2                            	@mountainLoop:		
00007CC2 32C0                       		move.w	d0,(a1)+
00007CC4 51C9 FFFC                  		dbf	d1,@mountainLoop
00007CC8                            
00007CC8 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007CCC 4440                       		neg.w	d0
00007CCE 323C 0008                  		move.w	#8,d1
00007CD2                            	@bushLoop:		
00007CD2 32C0                       		move.w	d0,(a1)+
00007CD4 51C9 FFFC                  		dbf	d1,@bushLoop
00007CD8                            
00007CD8 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007CDC 4440                       		neg.w	d0
00007CDE 323C 000F                  		move.w	#$F,d1
00007CE2                            	@interiorLoop:		
00007CE2 32C0                       		move.w	d0,(a1)+
00007CE4 51C9 FFFC                  		dbf	d1,@interiorLoop
00007CE8                            
00007CE8 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007CEC 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007CF0 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007CF4 3400                       		move.w	d0,d2
00007CF6 0C40 0100                  		cmpi.w	#$100,d0
00007CFA 6500                       		bcs.s	@limitY
00007CFC 303C 0100                  		move.w	#$100,d0
00007D00                            	@limitY:
00007D00 0240 01F0                  		andi.w	#$1F0,d0
00007D04 E648                       		lsr.w	#3,d0
00007D06 45F2 0000                  		lea	(a2,d0),a2
00007D0A 6000 0000                  		bra.w	Bg_Scroll_X
00007D0E                            ; End of function Deform_MZ
00007D0E                            
00007D0E                            ; ---------------------------------------------------------------------------
00007D0E                            ; Star Light Zone background layer deformation code
00007D0E                            ; ---------------------------------------------------------------------------
00007D0E                            
00007D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D0E                            
00007D0E                            
00007D0E                            Deform_SLZ:
00007D0E                            	; vertical scrolling
00007D0E 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007D12 48C5                       		ext.l	d5
00007D14 EF85                       		asl.l	#7,d5
00007D16 6100 0000                  		bsr.w	Bg_Scroll_Y
00007D1A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007D20                            	; calculate background scroll buffer
00007D20 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007D24 3438 F700                  		move.w	(v_screenposx).w,d2
00007D28 4442                       		neg.w	d2
00007D2A 3002                       		move.w	d2,d0
00007D2C E640                       		asr.w	#3,d0
00007D2E 9042                       		sub.w	d2,d0
00007D30 48C0                       		ext.l	d0
00007D32 E980                       		asl.l	#4,d0
00007D34 81FC 001C                  		divs.w	#$1C,d0
00007D38 48C0                       		ext.l	d0
00007D3A E980                       		asl.l	#4,d0
00007D3C E180                       		asl.l	#8,d0
00007D3E 7600                       		moveq	#0,d3
00007D40 3602                       		move.w	d2,d3
00007D42 323C 001B                  		move.w	#$1B,d1
00007D46                            	@starLoop:		
00007D46 32C3                       		move.w	d3,(a1)+
00007D48 4843                       		swap	d3
00007D4A D680                       		add.l	d0,d3
00007D4C 4843                       		swap	d3
00007D4E 51C9 FFF6                  		dbf	d1,@starLoop
00007D52                            
00007D52 3002                       		move.w	d2,d0
00007D54 E640                       		asr.w	#3,d0
00007D56 3200                       		move.w	d0,d1
00007D58 E241                       		asr.w	#1,d1
00007D5A D041                       		add.w	d1,d0
00007D5C 323C 0004                  		move.w	#4,d1
00007D60                            	@buildingLoop1:		; distant black buildings
00007D60 32C0                       		move.w	d0,(a1)+
00007D62 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007D66                            
00007D66 3002                       		move.w	d2,d0
00007D68 E440                       		asr.w	#2,d0
00007D6A 323C 0004                  		move.w	#4,d1
00007D6E                            	@buildingLoop2:		; closer buildings
00007D6E 32C0                       		move.w	d0,(a1)+
00007D70 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007D74                            
00007D74 3002                       		move.w	d2,d0
00007D76 E240                       		asr.w	#1,d0
00007D78 323C 001D                  		move.w	#$1D,d1
00007D7C                            	@bottomLoop:		; bottom part of background
00007D7C 32C0                       		move.w	d0,(a1)+
00007D7E 51C9 FFFC                  		dbf	d1,@bottomLoop
00007D82                            
00007D82 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007D86 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007D8A 3400                       		move.w	d0,d2
00007D8C 0440 00C0                  		subi.w	#$C0,d0
00007D90 0240 03F0                  		andi.w	#$3F0,d0
00007D94 E648                       		lsr.w	#3,d0
00007D96 45F2 0000                  		lea	(a2,d0),a2
00007D9A                            ;-------------------------------------------------------------------------------
00007D9A                            ;-------------------------------------------------------------------------------
00007D9A                            Bg_Scroll_X:
00007D9A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007D9E 323C 000E                  		move.w	#$E,d1
00007DA2 3038 F700                  		move.w	(v_screenposx).w,d0
00007DA6 4440                       		neg.w	d0
00007DA8 4840                       		swap	d0
00007DAA 0242 000F                  		andi.w	#$F,d2
00007DAE D442                       		add.w	d2,d2
00007DB0 301A                       		move.w	(a2)+,d0
00007DB2 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007DB6                            	@blockLoop:
00007DB6 301A                       		move.w	(a2)+,d0
00007DB8                            	@pixelJump:		
00007DB8 22C0                       		move.l	d0,(a1)+
00007DBA 22C0                       		move.l	d0,(a1)+
00007DBC 22C0                       		move.l	d0,(a1)+
00007DBE 22C0                       		move.l	d0,(a1)+
00007DC0 22C0                       		move.l	d0,(a1)+
00007DC2 22C0                       		move.l	d0,(a1)+
00007DC4 22C0                       		move.l	d0,(a1)+
00007DC6 22C0                       		move.l	d0,(a1)+
00007DC8 22C0                       		move.l	d0,(a1)+
00007DCA 22C0                       		move.l	d0,(a1)+
00007DCC 22C0                       		move.l	d0,(a1)+
00007DCE 22C0                       		move.l	d0,(a1)+
00007DD0 22C0                       		move.l	d0,(a1)+
00007DD2 22C0                       		move.l	d0,(a1)+
00007DD4 22C0                       		move.l	d0,(a1)+
00007DD6 22C0                       		move.l	d0,(a1)+
00007DD8 51C9 FFDC                  		dbf	d1,@blockLoop
00007DDC 4E75                       		rts
00007DDE                            
00007DDE                            ; ---------------------------------------------------------------------------
00007DDE                            ; Spring Yard Zone background layer deformation	code
00007DDE                            ; ---------------------------------------------------------------------------
00007DDE                            
00007DDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DDE                            
00007DDE                            
00007DDE                            Deform_SYZ:
00007DDE                            	; vertical scrolling
00007DDE 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007DE2 48C5                       		ext.l	d5
00007DE4 E985                       		asl.l	#4,d5
00007DE6 2205                       		move.l	d5,d1
00007DE8 E385                       		asl.l	#1,d5
00007DEA DA81                       		add.l	d1,d5
00007DEC 6100 0000                  		bsr.w	Bg_Scroll_Y
00007DF0 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007DF6                            	; calculate background scroll buffer
00007DF6 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007DFA 3438 F700                  		move.w	(v_screenposx).w,d2
00007DFE 4442                       		neg.w	d2
00007E00 3002                       		move.w	d2,d0
00007E02 E640                       		asr.w	#3,d0
00007E04 9042                       		sub.w	d2,d0
00007E06 48C0                       		ext.l	d0
00007E08 E780                       		asl.l	#3,d0
00007E0A 81FC 0008                  		divs.w	#8,d0
00007E0E 48C0                       		ext.l	d0
00007E10 E980                       		asl.l	#4,d0
00007E12 E180                       		asl.l	#8,d0
00007E14 7600                       		moveq	#0,d3
00007E16 3602                       		move.w	d2,d3
00007E18 E243                       		asr.w	#1,d3
00007E1A 323C 0007                  		move.w	#7,d1
00007E1E                            	@cloudLoop:		
00007E1E 32C3                       		move.w	d3,(a1)+
00007E20 4843                       		swap	d3
00007E22 D680                       		add.l	d0,d3
00007E24 4843                       		swap	d3
00007E26 51C9 FFF6                  		dbf	d1,@cloudLoop
00007E2A                            
00007E2A 3002                       		move.w	d2,d0
00007E2C E640                       		asr.w	#3,d0
00007E2E 323C 0004                  		move.w	#4,d1
00007E32                            	@mountainLoop:		
00007E32 32C0                       		move.w	d0,(a1)+
00007E34 51C9 FFFC                  		dbf	d1,@mountainLoop
00007E38                            
00007E38 3002                       		move.w	d2,d0
00007E3A E440                       		asr.w	#2,d0
00007E3C 323C 0005                  		move.w	#5,d1
00007E40                            	@buildingLoop:		
00007E40 32C0                       		move.w	d0,(a1)+
00007E42 51C9 FFFC                  		dbf	d1,@buildingLoop
00007E46                            
00007E46 3002                       		move.w	d2,d0
00007E48 3202                       		move.w	d2,d1
00007E4A E241                       		asr.w	#1,d1
00007E4C 9041                       		sub.w	d1,d0
00007E4E 48C0                       		ext.l	d0
00007E50 E980                       		asl.l	#4,d0
00007E52 81FC 000E                  		divs.w	#$E,d0
00007E56 48C0                       		ext.l	d0
00007E58 E980                       		asl.l	#4,d0
00007E5A E180                       		asl.l	#8,d0
00007E5C 7600                       		moveq	#0,d3
00007E5E 3602                       		move.w	d2,d3
00007E60 E243                       		asr.w	#1,d3
00007E62 323C 000D                  		move.w	#$D,d1
00007E66                            	@bushLoop:		
00007E66 32C3                       		move.w	d3,(a1)+
00007E68 4843                       		swap	d3
00007E6A D680                       		add.l	d0,d3
00007E6C 4843                       		swap	d3
00007E6E 51C9 FFF6                  		dbf	d1,@bushLoop
00007E72                            
00007E72 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007E76 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007E7A 3400                       		move.w	d0,d2
00007E7C 0240 01F0                  		andi.w	#$1F0,d0
00007E80 E648                       		lsr.w	#3,d0
00007E82 45F2 0000                  		lea	(a2,d0),a2
00007E86 6000 FF12                  		bra.w	Bg_Scroll_X
00007E8A                            ; End of function Deform_SYZ
00007E8A                            
00007E8A                            ; ---------------------------------------------------------------------------
00007E8A                            ; Scrap	Brain Zone background layer deformation	code
00007E8A                            ; ---------------------------------------------------------------------------
00007E8A                            
00007E8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E8A                            
00007E8A                            
00007E8A                            Deform_SBZ:
00007E8A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E8E 48C4                       		ext.l	d4
00007E90 ED84                       		asl.l	#6,d4
00007E92 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E96 48C5                       		ext.l	d5
00007E98 E985                       		asl.l	#4,d5
00007E9A E385                       		asl.l	#1,d5
00007E9C 6100 0000                  		bsr.w	BGScroll_XY
00007EA0 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007EA6 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007EAA 323C 00DF                  		move.w	#223,d1
00007EAE 3038 F700                  		move.w	(v_screenposx).w,d0
00007EB2 4440                       		neg.w	d0
00007EB4 4840                       		swap	d0
00007EB6 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007EBA 4440                       		neg.w	d0
00007EBC                            
00007EBC                            loc_6576:
00007EBC 22C0                       		move.l	d0,(a1)+
00007EBE 51C9 FFFC                  		dbf	d1,loc_6576
00007EC2 4E75                       		rts	
00007EC4                            ;-------------------------------------------------------------------------------
00007EC4                            Deform_SBZ2:;loc_68A2:
00007EC4 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007EC8 48C4                       		ext.l	d4
00007ECA ED84                       		asl.l	#6,d4
00007ECC 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007ED0 48C5                       		ext.l	d5
00007ED2 E985                       		asl.l	#4,d5
00007ED4 E385                       		asl.l	#1,d5
00007ED6 6100 0000                  		bsr.w	BGScroll_XY
00007EDA 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007EE0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007EE4 323C 00DF                  		move.w	#223,d1
00007EE8 3038 F700                  		move.w	(v_screenposx).w,d0
00007EEC 4440                       		neg.w	d0
00007EEE 4840                       		swap	d0
00007EF0 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007EF4 4440                       		neg.w	d0
00007EF6                            
00007EF6                            loc_6577:
00007EF6 22C0                       		move.l	d0,(a1)+
00007EF8 51C9 FFFC                  		dbf	d1,loc_6577
00007EFC 4E75                       		rts	
00007EFE                            
00007EFE                            ; ---------------------------------------------------------------------------
00007EFE                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007EFE                            ; ---------------------------------------------------------------------------
00007EFE                            
00007EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EFE                            
00007EFE                            
00007EFE                            ScrollHoriz:
00007EFE 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007F02 6100                       		bsr.s	MoveScreenHoriz
00007F04 3038 F700                  		move.w	(v_screenposx).w,d0
00007F08 0240 0010                  		andi.w	#$10,d0
00007F0C 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007F10 B300                       		eor.b	d1,d0
00007F12 6600                       		bne.s	@return
00007F14 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007F1A 3038 F700                  		move.w	(v_screenposx).w,d0
00007F1E 9044                       		sub.w	d4,d0		; compare new with old screen position
00007F20 6A00                       		bpl.s	@scrollRight
00007F22                            
00007F22 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007F28 4E75                       		rts	
00007F2A                            
00007F2A                            	@scrollRight:
00007F2A 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007F30                            
00007F30                            	@return:
00007F30 4E75                       		rts	
00007F32                            ; End of function ScrollHoriz
00007F32                            
00007F32                            
00007F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F32                            
00007F32                            MoveScreenHoriz:
00007F32 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007F36 6700 0000                  		beq.w	@cont		
00007F3A 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007F40                            		
00007F40                            	@cont:		
00007F40 3238 C904                  		move.w	($FFFFC904).w,d1
00007F44 6700                       		beq.s	@cont1
00007F46 0441 0100                  		sub.w	#$100,d1
00007F4A 31C1 C904                  		move.w	d1,($FFFFC904).w
00007F4E 7200                       		moveq	#0,d1
00007F50 1238 C904                  		move.b	($FFFFC904).w,d1
00007F54 E509                       		lsl.b	#2,d1
00007F56 5801                       		addq.b	#4,d1
00007F58 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007F5C 9001                       		sub.b	d1,d0
00007F5E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007F62 3031 0000                  		move.w	(a1,d0.w),d0
00007F66 0240 3FFF                  		and.w	#$3FFF,d0
00007F6A 6000                       		bra.s	@cont2
00007F6C                            		
00007F6C                            @cont1:
00007F6C 3038 D008                  		move.w	($FFFFD008).w,d0
00007F70                            		
00007F70                            @cont2:
00007F70 9078 F700                  		sub.w	($FFFFF700).w,d0
00007F74 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007F78 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007F7A 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007F7E 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007F80 4278 F73A                          clr.w    (v_scrshiftx).w
00007F84 4E75                               rts 
00007F86                            ; ===========================================================================
00007F86                            
00007F86                            SH_AheadOfMid:
00007F86 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007F8A 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007F8C 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007F90                            
00007F90                                SH_Ahead16:
00007F90 D078 F700                          add.w    (v_screenposx).w,d0
00007F94 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007F98 6D00                               blt.s    SH_SetScreen
00007F9A 3038 F72A                          move.w    (v_limitright2).w,d0
00007F9E                            
00007F9E                            SH_SetScreen:
00007F9E 3200                               move.w    d0,d1
00007FA0 9278 F700                          sub.w    (v_screenposx).w,d1
00007FA4 E141                               asl.w    #8,d1
00007FA6 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007FAA 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007FAE 4E75                               rts 
00007FB0                            ; ===========================================================================
00007FB0                            
00007FB0                            SH_BehindMid:
00007FB0 0C40 FFF0                  		cmpi.w	#-$10,d0
00007FB4 6400                       		bcc.s	@cont
00007FB6 303C FFF0                  		move.w	#-$10,d0	
00007FBA                            
00007FBA                            @cont:
00007FBA D078 F700                  		add.w	(v_screenposx).w,d0
00007FBE B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007FC2 6EDA                       		bgt.s	SH_SetScreen
00007FC4 3038 F728                  		move.w	(v_limitleft2).w,d0
00007FC8 60D4                       		bra.s	SH_SetScreen
00007FCA                            ; End of function MoveScreenHoriz
00007FCA                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007FCA                            
00007FCA                            MoveScreenHorizEXT:
00007FCA 3238 C904                  		move.w	($FFFFC904).w,d1
00007FCE 6700                       		beq.s	@cont1
00007FD0 0441 0100                  		sub.w	#$100,d1
00007FD4 31C1 C904                  		move.w	d1,($FFFFC904).w
00007FD8 7200                       		moveq	#0,d1
00007FDA 1238 C904                  		move.b	($FFFFC904).w,d1
00007FDE E509                       		lsl.b	#2,d1
00007FE0 5801                       		addq.b	#4,d1
00007FE2 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007FE6 9001                       		sub.b	d1,d0
00007FE8 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007FEC 3031 0000                  		move.w	(a1,d0.w),d0
00007FF0 0240 3FFF                  		and.w	#$3FFF,d0
00007FF4 6000                       		bra.s	@cont2
00007FF6                            		
00007FF6                            @cont1:
00007FF6 3038 D008                  		move.w	($FFFFD008).w,d0
00007FFA                            		
00007FFA                            @cont2:
00007FFA 9078 F700                  		sub.w	($FFFFF700).w,d0
00007FFE 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00008002 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00008004 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00008006 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00008008                            ; ===========================================================================
00008008                            
00008008                            SHEXT_ProperlyFramed:
00008008 4278 F73A                          clr.w    (v_scrshiftx).w
0000800C 4E75                               rts 
0000800E                            ; ===========================================================================
0000800E                            
0000800E                            SHEXT_AheadOfMid:
0000800E 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00008012 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00008014 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00008018                            
00008018                            SHEXT_Ahead16:
00008018 D078 F700                          add.w    (v_screenposx).w,d0
0000801C B078 F72A                          cmp.w    (v_limitright2).w,d0
00008020 6D00                               blt.s    SHEXT_SetScreen
00008022 3038 F72A                          move.w    (v_limitright2).w,d0
00008026                            
00008026                            SHEXT_SetScreen:
00008026 3200                               move.w    d0,d1
00008028 9278 F700                          sub.w    (v_screenposx).w,d1
0000802C E141                               asl.w    #8,d1
0000802E 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00008032 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00008036 4E75                               rts
00008038                            
00008038                            ; ===========================================================================
00008038                            
00008038                            SHEXT_BehindMid:
00008038 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
0000803C 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
0000803E 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00008042                            
00008042                            SHEXT_Behind16:
00008042 D078 F700                          add.w    (v_screenposx).w,d0
00008046 B078 F728                          cmp.w    (v_limitleft2).w,d0
0000804A 6EDA                               bgt.s    SHEXT_SetScreen
0000804C 3038 F728                          move.w    (v_limitleft2).w,d0
00008050 60D4                               bra.s    SHEXT_SetScreen
00008052                                  
00008052                            ; End of function MoveScreenHoriz
00008052                            
00008052                            
00008052                            ; ---------------------------------------------------------------------------
00008052                            ; Subroutine to	scroll the level vertically as Sonic moves
00008052                            ; ---------------------------------------------------------------------------
00008052                            
00008052                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008052                            
00008052                            
00008052                            ScrollVertical:
00008052 7200                       		moveq	#0,d1
00008054 3038 D00C                  		move.w	(v_player+obY).w,d0
00008058 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
0000805C 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00008062 6700                       		beq.s	SV_NotRolling	; if not, branch
00008064 5B40                       		subq.w	#5,d0
00008066                            
00008066                            	SV_NotRolling:
00008066 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
0000806C 6700                       		beq.s	loc_664A	; if not, branch
0000806E                            
0000806E 0640 0020                  		addi.w	#32,d0
00008072 9078 F73E                  		sub.w	(v_lookshift).w,d0
00008076 6500                       		bcs.s	loc_6696
00008078 0440 0040                  		subi.w	#64,d0
0000807C 6400                       		bcc.s	loc_6696
0000807E 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00008082 6600                       		bne.s	loc_66A8
00008084 6000                       		bra.s	loc_6656
00008086                            ; ===========================================================================
00008086                            
00008086                            loc_664A:
00008086 9078 F73E                  		sub.w	(v_lookshift).w,d0
0000808A 6600                       		bne.s	loc_665C
0000808C 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00008090 6600                       		bne.s	loc_66A8
00008092                            
00008092                            loc_6656:
00008092 4278 F73C                  		clr.w	(v_scrshifty).w
00008096 4E75                       		rts	
00008098                            ; ===========================================================================
00008098                            
00008098                            loc_665C:
00008098 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
0000809E 6600                       		bne.s	loc_6684
000080A0 3238 D020                  		move.w	(v_player+obInertia).w,d1
000080A4 6A00                       		bpl.s	loc_666C
000080A6 4441                       		neg.w	d1
000080A8                            
000080A8                            loc_666C:
000080A8 0C41 0800                  		cmpi.w	#$800,d1
000080AC 6400                       		bcc.s	loc_6696
000080AE 323C 0600                  		move.w	#$600,d1
000080B2 0C40 0006                  		cmpi.w	#6,d0
000080B6 6E00                       		bgt.s	loc_66F6
000080B8 0C40 FFFA                  		cmpi.w	#-6,d0
000080BC 6D00                       		blt.s	loc_66C0
000080BE 6000                       		bra.s	loc_66AE
000080C0                            ; ===========================================================================
000080C0                            
000080C0                            loc_6684:
000080C0 323C 0200                  		move.w	#$200,d1
000080C4 0C40 0002                  		cmpi.w	#2,d0
000080C8 6E00                       		bgt.s	loc_66F6
000080CA 0C40 FFFE                  		cmpi.w	#-2,d0
000080CE 6D00                       		blt.s	loc_66C0
000080D0 6000                       		bra.s	loc_66AE
000080D2                            ; ===========================================================================
000080D2                            
000080D2                            loc_6696:
000080D2 323C 1000                  		move.w	#$1000,d1
000080D6 0C40 0010                  		cmpi.w	#$10,d0
000080DA 6E00                       		bgt.s	loc_66F6
000080DC 0C40 FFF0                  		cmpi.w	#-$10,d0
000080E0 6D00                       		blt.s	loc_66C0
000080E2 6000                       		bra.s	loc_66AE
000080E4                            ; ===========================================================================
000080E4                            
000080E4                            loc_66A8:
000080E4 7000                       		moveq	#0,d0
000080E6 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
000080EA                            
000080EA                            loc_66AE:
000080EA 7200                       		moveq	#0,d1
000080EC 3200                       		move.w	d0,d1
000080EE D278 F704                  		add.w	(v_screenposy).w,d1
000080F2 4A40                       		tst.w	d0
000080F4 6A00 0000                  		bpl.w	loc_6700
000080F8 6000 0000                  		bra.w	loc_66CC
000080FC                            ; ===========================================================================
000080FC                            
000080FC                            loc_66C0:
000080FC 4441                       		neg.w	d1
000080FE 48C1                       		ext.l	d1
00008100 E181                       		asl.l	#8,d1
00008102 D2B8 F704                  		add.l	(v_screenposy).w,d1
00008106 4841                       		swap	d1
00008108                            
00008108                            loc_66CC:
00008108 B278 F72C                  		cmp.w	(v_limittop2).w,d1
0000810C 6E00                       		bgt.s	loc_6724
0000810E 0C41 FF00                  		cmpi.w	#-$100,d1
00008112 6E00                       		bgt.s	loc_66F0
00008114 0241 07FF                  		andi.w	#$7FF,d1
00008118 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0000811E 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00008124 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0000812A 6000                       		bra.s	loc_6724
0000812C                            ; ===========================================================================
0000812C                            
0000812C                            loc_66F0:
0000812C 3238 F72C                  		move.w	(v_limittop2).w,d1
00008130 6000                       		bra.s	loc_6724
00008132                            ; ===========================================================================
00008132                            
00008132                            loc_66F6:
00008132 48C1                       		ext.l	d1
00008134 E181                       		asl.l	#8,d1
00008136 D2B8 F704                  		add.l	(v_screenposy).w,d1
0000813A 4841                       		swap	d1
0000813C                            
0000813C                            loc_6700:
0000813C B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00008140 6D00                       		blt.s	loc_6724
00008142 0441 0800                  		subi.w	#$800,d1
00008146 6500                       		bcs.s	loc_6720
00008148 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0000814E 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00008154 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0000815A 6000                       		bra.s	loc_6724
0000815C                            ; ===========================================================================
0000815C                            
0000815C                            loc_6720:
0000815C 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00008160                            
00008160                            loc_6724:
00008160 3838 F704                  		move.w	(v_screenposy).w,d4
00008164 4841                       		swap	d1
00008166 2601                       		move.l	d1,d3
00008168 96B8 F704                  		sub.l	(v_screenposy).w,d3
0000816C E09B                       		ror.l	#8,d3
0000816E 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00008172 21C1 F704                  		move.l	d1,(v_screenposy).w
00008176 3038 F704                  		move.w	(v_screenposy).w,d0
0000817A 0240 0010                  		andi.w	#$10,d0
0000817E 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00008182 B300                       		eor.b	d1,d0
00008184 6600                       		bne.s	@return
00008186 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
0000818C 3038 F704                  		move.w	(v_screenposy).w,d0
00008190 9044                       		sub.w	d4,d0
00008192 6A00                       		bpl.s	@scrollBottom
00008194 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
0000819A 4E75                       		rts	
0000819C                            ; ===========================================================================
0000819C                            
0000819C                            	@scrollBottom:
0000819C 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
000081A2                            
000081A2                            	@return:
000081A2 4E75                       		rts	
000081A4                            ; End of function ScrollVertical
000081A4                            
000081A4                            
000081A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081A4                            ; Scrolls background and sets redraw flags.
000081A4                            ; d4 - background x offset * $10000
000081A4                            ; d5 - background y offset * $10000
000081A4                            
000081A4                            BGScroll_XY:
000081A4 2438 F708                  		move.l	(v_bgscreenposx).w,d2
000081A8 2002                       		move.l	d2,d0
000081AA D084                       		add.l	d4,d0
000081AC 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
000081B0 2200                       		move.l	d0,d1
000081B2 4841                       		swap	d1
000081B4 0241 0010                  		andi.w	#$10,d1
000081B8 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
000081BC B701                       		eor.b	d3,d1
000081BE 6600                       		bne.s	BGScroll_YRelative	; no change in Y
000081C0 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
000081C6 9082                       		sub.l	d2,d0	; new - old
000081C8 6A00                       		bpl.s	@scrollRight
000081CA 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
000081D0 6000                       		bra.s	BGScroll_YRelative
000081D2                            	@scrollRight:
000081D2 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
000081D8                            BGScroll_YRelative:
000081D8 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
000081DC 2003                       		move.l	d3,d0
000081DE D085                       		add.l	d5,d0
000081E0 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
000081E4 2200                       		move.l	d0,d1
000081E6 4841                       		swap	d1
000081E8 0241 0010                  		andi.w	#$10,d1
000081EC 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
000081F0 B501                       		eor.b	d2,d1
000081F2 6600                       		bne.s	@return
000081F4 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
000081FA 9083                       		sub.l	d3,d0
000081FC 6A00                       		bpl.s	@scrollBottom
000081FE 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00008204 4E75                       		rts
00008206                            	@scrollBottom:
00008206 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
0000820C                            	@return:
0000820C 4E75                       		rts
0000820E                            ; End of function BGScroll_XY
0000820E                            
0000820E                            Bg_Scroll_Y:
0000820E 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00008212 2003                       		move.l	d3,d0
00008214 D085                       		add.l	d5,d0
00008216 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
0000821A 2200                       		move.l	d0,d1
0000821C 4841                       		swap	d1
0000821E 0241 0010                  		andi.w	#$10,d1
00008222 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008226 B501                       		eor.b	d2,d1
00008228 6600                       		bne.s	@return
0000822A 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00008230 9083                       		sub.l	d3,d0
00008232 6A00                       		bpl.s	@scrollBottom
00008234 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
0000823A 4E75                       		rts
0000823C                            	@scrollBottom:
0000823C 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00008242                            	@return:
00008242 4E75                       		rts
00008244                            
00008244                            
00008244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008244                            
00008244                            
00008244                            BGScroll_YAbsolute:
00008244 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00008248 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000824C 3200                       		move.w	d0,d1
0000824E 0241 0010                  		andi.w	#$10,d1
00008252 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008256 B501                       		eor.b	d2,d1
00008258 6600                       		bne.s	@return
0000825A 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00008260 9043                       		sub.w	d3,d0
00008262 6A00                       		bpl.s	@scrollBottom
00008264 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
0000826A 4E75                       		rts
0000826C                            	@scrollBottom:
0000826C 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00008272                            	@return:
00008272 4E75                       		rts
00008274                            ; End of function BGScroll_YAbsolute
00008274                            
00008274                            
00008274                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008274                            ; d6 - bit to set for redraw
00008274                            
00008274                            BGScroll_Block1:
00008274 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00008278 2002                       		move.l	d2,d0
0000827A D084                       		add.l	d4,d0
0000827C 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00008280 2200                       		move.l	d0,d1
00008282 4841                       		swap	d1
00008284 0241 0010                  		andi.w	#$10,d1
00008288 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
0000828C B701                       		eor.b	d3,d1
0000828E 6600                       		bne.s	@return
00008290 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00008296 9082                       		sub.l	d2,d0
00008298 6A00                       		bpl.s	@scrollRight
0000829A 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
0000829E 6000                       		bra.s	@return
000082A0                            	@scrollRight:
000082A0 5206                       		addq.b	#1,d6
000082A2 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
000082A6                            	@return:
000082A6 4E75                       		rts
000082A8                            ; End of function BGScroll_Block1
000082A8                            
000082A8                            
000082A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082A8                            
000082A8                            
000082A8                            BGScroll_Block2:
000082A8 2438 F710                  		move.l	(v_bg2screenposx).w,d2
000082AC 2002                       		move.l	d2,d0
000082AE D084                       		add.l	d4,d0
000082B0 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
000082B4 2200                       		move.l	d0,d1
000082B6 4841                       		swap	d1
000082B8 0241 0010                  		andi.w	#$10,d1
000082BC 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
000082C0 B701                       		eor.b	d3,d1
000082C2 6600                       		bne.s	@return
000082C4 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
000082CA 9082                       		sub.l	d2,d0
000082CC 6A00                       		bpl.s	@scrollRight
000082CE 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
000082D2 6000                       		bra.s	@return
000082D4                            	@scrollRight:
000082D4 5206                       		addq.b	#1,d6
000082D6 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
000082DA                            	@return:
000082DA 4E75                       		rts
000082DC                            ;-------------------------------------------------------------------------------
000082DC                            BGScroll_Block3:
000082DC 2438 F718                  		move.l	(v_bg3screenposx).w,d2
000082E0 2002                       		move.l	d2,d0
000082E2 D084                       		add.l	d4,d0
000082E4 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
000082E8 2200                       		move.l	d0,d1
000082EA 4841                       		swap	d1
000082EC 0241 0010                  		andi.w	#$10,d1
000082F0 1638 F750                  		move.b	(v_bg3_xblock).w,d3
000082F4 B701                       		eor.b	d3,d1
000082F6 6600                       		bne.s	@return
000082F8 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
000082FE 9082                       		sub.l	d2,d0
00008300 6A00                       		bpl.s	@scrollRight
00008302 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00008306 6000                       		bra.s	@return
00008308                            	@scrollRight:
00008308 5206                       		addq.b	#1,d6
0000830A 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
0000830E                            	@return:
0000830E 4E75                       		rts
0000830E 4E75                       		rts
00008310                            
00008310                            
00008310                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008310                            
00008310                            ; sub_6886:
00008310                            LoadTilesAsYouMove_BGOnly:
00008310 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008316 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000831C 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00008320 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008324 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008328 343C 6000                  		move.w	#$6000,d2
0000832C 6100 0000                  		bsr.w	DrawBGScrollBlock1
00008330 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00008334 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00008338 6000 0000                  		bra.w	DrawBGScrollBlock2
0000833C                            ; End of function sub_6886
0000833C                            
0000833C                            ; ---------------------------------------------------------------------------
0000833C                            ; Subroutine to	display	correct	tiles as you move
0000833C                            ; ---------------------------------------------------------------------------
0000833C                            
0000833C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000833C                            
0000833C                            
0000833C                            LoadTilesAsYouMove:
0000833C 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008342 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008348                            		; First, update the background
00008348 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
0000834C 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00008350 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008354 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00008358 6100 0000                  		bsr.w	DrawBGScrollBlock1
0000835C 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00008360 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00008364 6100 0000                  		bsr.w	DrawBGScrollBlock2
00008368                            		; REV01 added a third scroll block, though, technically,
00008368                            		; the RAM for it was already there in REV00
00008368 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
0000836C 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00008370 6100 0000                  		bsr.w	DrawBGScrollBlock3
00008374                            		; Then, update the foreground
00008374 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00008378 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
0000837C 49F8 A400                  		lea	(v_lvllayout).w,a4
00008380 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00008384                            		; The FG's update function is inlined here
00008384 4A12                       		tst.b	(a2)
00008386 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00008388 0892 0000                  		bclr	#0,(a2)
0000838C 6700                       		beq.s	loc_6908
0000838E                            		; Draw new tiles at the top
0000838E 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00008390 7AF0                       		moveq	#-16,d5 ; X coordinate
00008392 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008396 78F0                       		moveq	#-16,d4 ; Y coordinate
00008398 7AF0                       		moveq	#-16,d5 ; X coordinate
0000839A 6100 0000                  		bsr.w	DrawBlocks_LR
0000839E                            
0000839E                            loc_6908:
0000839E 0892 0001                  		bclr	#1,(a2)
000083A2 6700                       		beq.s	loc_6922
000083A4                            		; Draw new tiles at the bottom
000083A4 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
000083A8 7AF0                       		moveq	#-16,d5
000083AA 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083AE 383C 00E0                  		move.w	#224,d4
000083B2 7AF0                       		moveq	#-16,d5
000083B4 6100 0000                  		bsr.w	DrawBlocks_LR
000083B8                            
000083B8                            loc_6922:
000083B8 0892 0002                  		bclr	#2,(a2)
000083BC 6700                       		beq.s	loc_6938
000083BE                            		; Draw new tiles on the left
000083BE 78F0                       		moveq	#-16,d4
000083C0 7AF0                       		moveq	#-16,d5
000083C2 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083C6 78F0                       		moveq	#-16,d4
000083C8 7AF0                       		moveq	#-16,d5
000083CA 6100 0000                  		bsr.w	DrawBlocks_TB
000083CE                            
000083CE                            loc_6938:
000083CE 0892 0003                  		bclr	#3,(a2)
000083D2 6700                       		beq.s	locret_6952
000083D4                            		; Draw new tiles on the right
000083D4 78F0                       		moveq	#-16,d4
000083D6 3A3C 0140                  		move.w	#320,d5
000083DA 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083DE 78F0                       		moveq	#-16,d4
000083E0 3A3C 0140                  		move.w	#320,d5
000083E4 6100 0000                  		bsr.w	DrawBlocks_TB
000083E8                            
000083E8                            locret_6952:
000083E8 4E75                       		rts	
000083EA                            ; End of function LoadTilesAsYouMove
000083EA                            
000083EA                            
000083EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083EA                            
000083EA                            ; sub_6954:
000083EA                            DrawBGScrollBlock1:
000083EA 4A12                       		tst.b	(a2)
000083EC 6700 0000                  		beq.w	locret_69F2
000083F0 0892 0000                  		bclr	#0,(a2)
000083F4 6700                       		beq.s	loc_6972
000083F6                            		; Draw new tiles at the top
000083F6 78F0                       		moveq	#-16,d4
000083F8 7AF0                       		moveq	#-16,d5
000083FA 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083FE 78F0                       		moveq	#-16,d4
00008400 7AF0                       		moveq	#-16,d5
00008402 6100 0000                  			bsr.w	DrawBlocks_LR
00008406                            
00008406                            loc_6972:
00008406 0892 0001                  		bclr	#1,(a2)
0000840A 6700                       		beq.s	loc_698E
0000840C                            		; Draw new tiles at the top
0000840C 383C 00E0                  		move.w	#224,d4
00008410 7AF0                       		moveq	#-16,d5
00008412 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008416 383C 00E0                  		move.w	#224,d4
0000841A 7AF0                       		moveq	#-16,d5
0000841C 6100 0000                  			bsr.w	DrawBlocks_LR
00008420                            
00008420                            loc_698E:
00008420 0892 0002                  		bclr	#2,(a2)
00008424                            
00008424                            
00008424 6700                       			beq.s	locj_6D56
00008426                            			; Draw new tiles on the left
00008426 78F0                       			moveq	#-16,d4
00008428 7AF0                       			moveq	#-16,d5
0000842A 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000842E 78F0                       			moveq	#-16,d4
00008430 7AF0                       			moveq	#-16,d5
00008432 6100 0000                  			bsr.w	DrawBlocks_TB
00008436                            	locj_6D56:
00008436                            
00008436 0892 0003                  			bclr	#3,(a2)
0000843A 6700                       			beq.s	locj_6D70
0000843C                            			; Draw new tiles on the right
0000843C 78F0                       			moveq	#-16,d4
0000843E 3A3C 0140                  			move.w	#320,d5
00008442 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008446 78F0                       			moveq	#-16,d4
00008448 3A3C 0140                  			move.w	#320,d5
0000844C 6100 0000                  			bsr.w	DrawBlocks_TB
00008450                            	locj_6D70:
00008450                            
00008450 0892 0004                  			bclr	#4,(a2)
00008454 6700                       			beq.s	locj_6D88
00008456                            			; Draw entire row at the top
00008456 78F0                       			moveq	#-16,d4
00008458 7A00                       			moveq	#0,d5
0000845A 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000845E 78F0                       			moveq	#-16,d4
00008460 7A00                       			moveq	#0,d5
00008462 7C1F                       			moveq	#(512/16)-1,d6
00008464 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008468                            	locj_6D88:
00008468                            
00008468 0892 0005                  			bclr	#5,(a2)
0000846C 6700                       			beq.s	locret_69F2
0000846E                            			; Draw entire row at the bottom
0000846E 383C 00E0                  			move.w	#224,d4
00008472 7A00                       			moveq	#0,d5
00008474 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008478 383C 00E0                  			move.w	#224,d4
0000847C 7A00                       			moveq	#0,d5
0000847E 7C1F                       			moveq	#(512/16)-1,d6
00008480 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008484                            
00008484                            locret_69F2:
00008484 4E75                       		rts	
00008486                            ; End of function DrawBGScrollBlock1
00008486                            
00008486                            
00008486                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008486                            
00008486                            ; Essentially, this draws everything that isn't scroll block 1
00008486                            ; sub_69F4:
00008486                            DrawBGScrollBlock2:
00008486                            
00008486 4A12                       			tst.b	(a2)
00008488 6700 0000                  			beq.w	locj_6DF2
0000848C 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00008492 6700 0000                  			beq.w	Draw_SBz
00008496 0892 0000                  			bclr	#0,(a2)
0000849A 6700                       			beq.s	locj_6DD2
0000849C                            			; Draw new tiles on the left
0000849C 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
000084A0 7AF0                       			moveq	#-16,d5
000084A2 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084A6 383C 0070                  			move.w	#224/2,d4
000084AA 7AF0                       			moveq	#-16,d5
000084AC 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
000084AE 6100 0000                  			bsr.w	DrawBlocks_TB_2
000084B2                            	locj_6DD2:
000084B2 0892 0001                  			bclr	#1,(a2)
000084B6 6700                       			beq.s	locj_6DF2
000084B8                            			; Draw new tiles on the right
000084B8 383C 0070                  			move.w	#224/2,d4
000084BC 3A3C 0140                  			move.w	#320,d5
000084C0 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084C4 383C 0070                  			move.w	#224/2,d4
000084C8 3A3C 0140                  			move.w	#320,d5
000084CC 7C02                       			moveq	#3-1,d6
000084CE 6100 0000                  			bsr.w	DrawBlocks_TB_2
000084D2                            	locj_6DF2:
000084D2 4E75                       			rts
000084D4                            ;===============================================================================
000084D4                            	locj_6DF4:
000084D4 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
000084E4 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000084F4 0200                       			dc.b $02,$00						
000084F6                            ;===============================================================================
000084F6                            	Draw_SBz:
000084F6 78F0                       			moveq	#-16,d4
000084F8 0892 0000                  			bclr	#0,(a2)
000084FC 6600                       			bne.s	locj_6E28
000084FE 0892 0001                  			bclr	#1,(a2)
00008502 6700                       			beq.s	locj_6E72
00008504 383C 00E0                  			move.w	#224,d4
00008508                            	locj_6E28:
00008508 41F9 0000 84D5             			lea	(locj_6DF4+1).l,a0
0000850E 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008512 D044                       			add.w	d4,d0
00008514 0240 01F0                  			andi.w	#$1F0,d0
00008518 E848                       			lsr.w	#4,d0
0000851A 1030 0000                  			move.b	(a0,d0.w),d0
0000851E 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00008524 3673 0000                  			movea.w	(a3,d0.w),a3
00008528 6700                       			beq.s	locj_6E5E
0000852A 7AF0                       			moveq	#-16,d5
0000852C 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008530 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008534 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008538 6100 0000                  			bsr.w	DrawBlocks_LR
0000853C 6000                       			bra.s	locj_6E72
0000853E                            ;===============================================================================
0000853E                            	locj_6E5E:
0000853E 7A00                       			moveq	#0,d5
00008540 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008544 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008548 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000854C 7C1F                       			moveq	#(512/16)-1,d6
0000854E 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008552                            	locj_6E72:
00008552 4A12                       			tst.b	(a2)
00008554 6600                       			bne.s	locj_6E78
00008556 4E75                       			rts
00008558                            ;===============================================================================			
00008558                            	locj_6E78:
00008558 78F0                       			moveq	#-16,d4
0000855A 7AF0                       			moveq	#-16,d5
0000855C 1012                       			move.b	(a2),d0
0000855E 0200 00A8                  			andi.b	#$A8,d0
00008562 6700                       			beq.s	locj_6E8C
00008564 E208                       			lsr.b	#1,d0
00008566 1480                       			move.b	d0,(a2)
00008568 3A3C 0140                  			move.w	#320,d5
0000856C                            	locj_6E8C:
0000856C 41F9 0000 84D4             			lea	(locj_6DF4).l,a0
00008572 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008576 0240 01F0                  			andi.w	#$1F0,d0
0000857A E848                       			lsr.w	#4,d0
0000857C 41F0 0000                  			lea	(a0,d0.w),a0
00008580 6000 0000                  			bra.w	locj_6FEC						
00008584                            ;===============================================================================
00008584                            
00008584                            
00008584                            	; locj_6EA4:
00008584                            	DrawBGScrollBlock3:
00008584 4A12                       			tst.b	(a2)
00008586 6700 0000                  			beq.w	locj_6EF0
0000858A 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008590 6700 0000                  			beq.w	Draw_Mz
00008594 0892 0000                  			bclr	#0,(a2)
00008598 6700                       			beq.s	locj_6ED0
0000859A                            			; Draw new tiles on the left
0000859A 383C 0040                  			move.w	#$40,d4
0000859E 7AF0                       			moveq	#-16,d5
000085A0 6100 0000                  			bsr.w	Calc_VRAM_Pos
000085A4 383C 0040                  			move.w	#$40,d4
000085A8 7AF0                       			moveq	#-16,d5
000085AA 7C02                       			moveq	#3-1,d6
000085AC 6100 0000                  			bsr.w	DrawBlocks_TB_2
000085B0                            	locj_6ED0:
000085B0 0892 0001                  			bclr	#1,(a2)
000085B4 6700                       			beq.s	locj_6EF0
000085B6                            			; Draw new tiles on the right
000085B6 383C 0040                  			move.w	#$40,d4
000085BA 3A3C 0140                  			move.w	#320,d5
000085BE 6100 0000                  			bsr.w	Calc_VRAM_Pos
000085C2 383C 0040                  			move.w	#$40,d4
000085C6 3A3C 0140                  			move.w	#320,d5
000085CA 7C02                       			moveq	#3-1,d6
000085CC 6100 0000                  			bsr.w	DrawBlocks_TB_2
000085D0                            	locj_6EF0:
000085D0 4E75                       			rts
000085D2                            	locj_6EF2:
000085D2 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
000085E2 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085F2 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008602 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008612 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008622 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008632 0200                       			dc.b $02,$00
00008634                            ;===============================================================================
00008634                            	Draw_Mz:
00008634 78F0                       			moveq	#-16,d4
00008636 0892 0000                  			bclr	#0,(a2)
0000863A 6600                       			bne.s	locj_6F66
0000863C 0892 0001                  			bclr	#1,(a2)
00008640 6700                       			beq.s	locj_6FAE
00008642 383C 00E0                  			move.w	#224,d4
00008646                            	locj_6F66:
00008646 41F9 0000 85D3             			lea	(locj_6EF2+1).l,a0
0000864C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008650 0440 0200                  			subi.w	#$200,d0
00008654 D044                       			add.w	d4,d0
00008656 0240 07F0                  			andi.w	#$7F0,d0
0000865A E848                       			lsr.w	#4,d0
0000865C 1030 0000                  			move.b	(a0,d0.w),d0
00008660 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008664 6700                       			beq.s	locj_6F9A
00008666 7AF0                       			moveq	#-16,d5
00008668 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000866C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008670 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008674 6100 0000                  			bsr.w	DrawBlocks_LR
00008678 6000                       			bra.s	locj_6FAE
0000867A                            ;===============================================================================
0000867A                            	locj_6F9A:
0000867A 7A00                       			moveq	#0,d5
0000867C 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008680 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008684 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008688 7C1F                       			moveq	#(512/16)-1,d6
0000868A 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000868E                            	locj_6FAE:
0000868E 4A12                       			tst.b	(a2)
00008690 6600                       			bne.s	locj_6FB4
00008692 4E75                       			rts
00008694                            ;===============================================================================			
00008694                            	locj_6FB4:
00008694 78F0                       			moveq	#-16,d4
00008696 7AF0                       			moveq	#-16,d5
00008698 1012                       			move.b	(a2),d0
0000869A 0200 00A8                  			andi.b	#$A8,d0
0000869E 6700                       			beq.s	locj_6FC8
000086A0 E208                       			lsr.b	#1,d0
000086A2 1480                       			move.b	d0,(a2)
000086A4 3A3C 0140                  			move.w	#320,d5
000086A8                            	locj_6FC8:
000086A8 41F9 0000 85D2             			lea	(locj_6EF2).l,a0
000086AE 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000086B2 0440 0200                  			subi.w	#$200,d0
000086B6 0240 07F0                  			andi.w	#$7F0,d0
000086BA E848                       			lsr.w	#4,d0
000086BC 41F0 0000                  			lea	(a0,d0.w),a0
000086C0 6000 0000                  			bra.w	locj_6FEC
000086C4                            ;===============================================================================			
000086C4                            	locj_6FE4:
000086C4 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
000086CC                            	locj_6FEC:
000086CC 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000086CE 2E3C 0080 0000             			move.l	#$800000,d7
000086D4                            	locj_6FF4:			
000086D4 7000                       			moveq	#0,d0
000086D6 1018                       			move.b	(a0)+,d0
000086D8 0112                       			btst	d0,(a2)
000086DA 6700                       			beq.s	locj_701C
000086DC 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
000086E0 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
000086E4 48E7 0C00                  			movem.l	d4/d5,-(sp)
000086E8 6100 0000                  			bsr.w	GetBlockData
000086EC 4CDF 0030                  			movem.l	(sp)+,d4/d5
000086F0 6100 0000                  			bsr.w	Calc_VRAM_Pos
000086F4 6100 0000                  			bsr.w	DrawBlock
000086F8 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
000086FC                            	locj_701C:
000086FC 0644 0010                  			addi.w	#16,d4
00008700 51CE FFD2                  			dbf	d6,locj_6FF4
00008704 4212                       			clr.b	(a2)
00008706 4E75                       			rts			
00008708                            
00008708                            
00008708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008708                            
00008708                            ; Don't be fooled by the name: this function's for drawing from left to right
00008708                            ; when the camera's moving up or down
00008708                            ; DrawTiles_LR:
00008708                            DrawBlocks_LR:
00008708 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
0000870A                            ; DrawTiles_LR_2:
0000870A                            DrawBlocks_LR_2:
0000870A 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008710 2200                       		move.l	d0,d1
00008712                            
00008712                            	@loop:
00008712 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008716 6100 0000                  		bsr.w	GetBlockData
0000871A 2001                       		move.l	d1,d0
0000871C 6100 0000                  		bsr.w	DrawBlock
00008720 5801                       		addq.b	#4,d1		; Two tiles ahead
00008722 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
00008726 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000872A 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
0000872E 51CE FFE2                  		dbf	d6,@loop
00008732 4E75                       		rts
00008734                            ; End of function DrawBlocks_LR
00008734                            
00008734                            ; DrawTiles_LR_3:
00008734                            DrawBlocks_LR_3:
00008734 2E3C 0080 0000             		move.l	#$800000,d7
0000873A 2200                       		move.l	d0,d1
0000873C                            
0000873C                            	@loop:
0000873C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008740 6100 0000                  		bsr.w	GetBlockData_2
00008744 2001                       		move.l	d1,d0
00008746 6100 0000                  		bsr.w	DrawBlock
0000874A 5801                       		addq.b	#4,d1
0000874C 0201 007F                  		andi.b	#$7F,d1
00008750 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008754 0645 0010                  		addi.w	#16,d5
00008758 51CE FFE2                  		dbf	d6,@loop
0000875C 4E75                       		rts	
0000875E                            ; End of function DrawBlocks_LR_3
0000875E                            
0000875E                            
0000875E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000875E                            
0000875E                            ; Don't be fooled by the name: this function's for drawing from top to bottom
0000875E                            ; when the camera's moving left or right
0000875E                            ; DrawTiles_TB:
0000875E                            DrawBlocks_TB:
0000875E 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
00008760                            ; DrawTiles_TB_2:
00008760                            DrawBlocks_TB_2:
00008760 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008766 2200                       		move.l	d0,d1
00008768                            
00008768                            	@loop:
00008768 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000876C 6100 0000                  		bsr.w	GetBlockData
00008770 2001                       		move.l	d1,d0
00008772 6100 0000                  		bsr.w	DrawBlock
00008776 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
0000877A 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
0000877E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008782 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
00008786 51CE FFE0                  		dbf	d6,@loop
0000878A 4E75                       		rts	
0000878C                            ; End of function DrawBlocks_TB_2
0000878C                            
0000878C                            
0000878C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000878C                            
0000878C                            ; Draws a block's worth of tiles
0000878C                            ; Parameters:
0000878C                            ; a0 = Pointer to block metadata (block index and X/Y flip)
0000878C                            ; a1 = Pointer to block
0000878C                            ; a5 = Pointer to VDP command port
0000878C                            ; a6 = Pointer to VDP data port
0000878C                            ; d0 = VRAM command to access plane
0000878C                            ; d2 = VRAM plane A/B specifier
0000878C                            ; d7 = Plane row delta
0000878C                            ; DrawTiles:
0000878C                            DrawBlock:
0000878C 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
0000878E 4840                       		swap	d0
00008790 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008794 6600                       		bne.s	DrawFlipY
00008796 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
0000879A 6600                       		bne.s	DrawFlipX
0000879C 2A80                       		move.l	d0,(a5)
0000879E 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
000087A0 D087                       		add.l	d7,d0		; Next row
000087A2 2A80                       		move.l	d0,(a5)
000087A4 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
000087A6 4E75                       		rts	
000087A8                            ; ===========================================================================
000087A8                            
000087A8                            DrawFlipX:
000087A8 2A80                       		move.l	d0,(a5)
000087AA 2819                       		move.l	(a1)+,d4
000087AC 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
000087B2 4844                       		swap	d4		; Swap the tiles around
000087B4 2C84                       		move.l	d4,(a6)		; Write top two tiles
000087B6 D087                       		add.l	d7,d0		; Next row
000087B8 2A80                       		move.l	d0,(a5)
000087BA 2819                       		move.l	(a1)+,d4
000087BC 0A84 0800 0800             		eori.l	#$8000800,d4
000087C2 4844                       		swap	d4
000087C4 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
000087C6 4E75                       		rts	
000087C8                            ; ===========================================================================
000087C8                            
000087C8                            DrawFlipY:
000087C8 0810 0003                  		btst	#3,(a0)
000087CC 6600                       		bne.s	DrawFlipXY
000087CE 2A80                       		move.l	d0,(a5)
000087D0 2A19                       		move.l	(a1)+,d5
000087D2 2819                       		move.l	(a1)+,d4
000087D4 0A84 1000 1000             		eori.l	#$10001000,d4
000087DA 2C84                       		move.l	d4,(a6)
000087DC D087                       		add.l	d7,d0
000087DE 2A80                       		move.l	d0,(a5)
000087E0 0A85 1000 1000             		eori.l	#$10001000,d5
000087E6 2C85                       		move.l	d5,(a6)
000087E8 4E75                       		rts	
000087EA                            ; ===========================================================================
000087EA                            
000087EA                            DrawFlipXY:
000087EA 2A80                       		move.l	d0,(a5)
000087EC 2A19                       		move.l	(a1)+,d5
000087EE 2819                       		move.l	(a1)+,d4
000087F0 0A84 1800 1800             		eori.l	#$18001800,d4
000087F6 4844                       		swap	d4
000087F8 2C84                       		move.l	d4,(a6)
000087FA D087                       		add.l	d7,d0
000087FC 2A80                       		move.l	d0,(a5)
000087FE 0A85 1800 1800             		eori.l	#$18001800,d5
00008804 4845                       		swap	d5
00008806 2C85                       		move.l	d5,(a6)
00008808 4E75                       		rts	
0000880A                            ; End of function DrawBlocks
0000880A                            
0000880A                            ; ===========================================================================
0000880A                            ; unused garbage
0000880A                            
0000880A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000880A                            
0000880A                            ; Gets address of block at a certain coordinate
0000880A                            ; Parameters:
0000880A                            ; a4 = Pointer to level layout
0000880A                            ; d4 = Relative Y coordinate
0000880A                            ; d5 = Relative X coordinate
0000880A                            ; Returns:
0000880A                            ; a0 = Address of block metadata
0000880A                            ; a1 = Address of block
0000880A                            ; DrawBlocks:
0000880A                            GetBlockData:
0000880A DA53                       			add.w	(a3),d5
0000880C                            	GetBlockData_2:
0000880C D86B 0004                  			add.w	4(a3),d4
00008810 43F8 B000                  			lea	(v_16x16).w,a1
00008814                            		; Turn Y coordinate into index into level layout
00008814 3604                       		move.w	d4,d3
00008816 E24B                       		lsr.w	#1,d3
00008818 0243 0380                  		andi.w	#$380,d3
0000881C                            		; Turn X coordinate into index into level layout
0000881C E64D                       		lsr.w	#3,d5
0000881E 3005                       		move.w	d5,d0
00008820 EA48                       		lsr.w	#5,d0
00008822 0240 007F                  		andi.w	#$7F,d0
00008826                            		; Get chunk from level layout
00008826 D043                       		add.w	d3,d0
00008828 76FF                       		moveq	#-1,d3
0000882A 1634 0000                  		move.b	(a4,d0.w),d3
0000882E 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
00008830                            		; Turn chunk ID into index into chunk table
00008830 5303                       		subq.b	#1,d3
00008832 0243 007F                  		andi.w	#$7F,d3
00008836 EE5B                       		ror.w	#7,d3
00008838                            		; Turn Y coordinate into index into chunk
00008838 D844                       		add.w	d4,d4
0000883A 0244 01E0                  		andi.w	#$1E0,d4
0000883E                            		; Turn X coordinate into index into chunk
0000883E 0245 001E                  		andi.w	#$1E,d5
00008842                            		; Get block metadata from chunk
00008842 D644                       		add.w	d4,d3
00008844 D645                       		add.w	d5,d3
00008846 2043                       		movea.l	d3,a0
00008848 3610                       		move.w	(a0),d3
0000884A                            		; Turn block ID into address
0000884A 0243 03FF                  		andi.w	#$3FF,d3
0000884E E74B                       		lsl.w	#3,d3
00008850 D2C3                       		adda.w	d3,a1
00008852                            
00008852                            locret_6C1E:
00008852 4E75                       		rts	
00008854                            ; End of function GetBlockData
00008854                            
00008854                            
00008854                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008854                            
00008854                            ; Produces a VRAM plane access command from coordinates
00008854                            ; Parameters:
00008854                            ; d4 = Relative Y coordinate
00008854                            ; d5 = Relative X coordinate
00008854                            ; Returns VDP command in d0
00008854                            Calc_VRAM_Pos:
00008854 DA53                       			add.w	(a3),d5
00008856                            	Calc_VRAM_Pos_2:
00008856 D86B 0004                  			add.w	4(a3),d4
0000885A                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
0000885A                            		; Also note that this wraps the value to the size of the plane:
0000885A                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
0000885A 0244 00F0                  		andi.w	#$F0,d4
0000885E 0245 01F0                  		andi.w	#$1F0,d5
00008862                            		; Transform the adjusted coordinates into a VDP command
00008862 E94C                       		lsl.w	#4,d4
00008864 E44D                       		lsr.w	#2,d5
00008866 D845                       		add.w	d5,d4
00008868 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
0000886A 4840                       		swap	d0
0000886C 3004                       		move.w	d4,d0
0000886E 4E75                       		rts	
00008870                            ; End of function Calc_VRAM_Pos
00008870                            
00008870                            
00008870                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008870                            ; not used
00008870                            
00008870                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
00008870                            ; VRAM layout: the only difference is the high bits of the
00008870                            ; plane's VRAM address, which are 10 instead of 11.
00008870                            ; Both the foreground and background are at $C000 and $E000
00008870                            ; respectively, so this one starting at $8000 makes no sense.
00008870                            ; sub_6C3C:
00008870                            Calc_VRAM_Pos_Unknown:
00008870 D86B 0004                  		add.w	4(a3),d4
00008874 DA53                       		add.w	(a3),d5
00008876 0244 00F0                  		andi.w	#$F0,d4
0000887A 0245 01F0                  		andi.w	#$1F0,d5
0000887E E94C                       		lsl.w	#4,d4
00008880 E44D                       		lsr.w	#2,d5
00008882 D845                       		add.w	d5,d4
00008884 7002                       		moveq	#2,d0
00008886 4840                       		swap	d0
00008888 3004                       		move.w	d4,d0
0000888A 4E75                       		rts	
0000888C                            ; End of function Calc_VRAM_Pos_Unknown
0000888C                            
0000888C                            ; ---------------------------------------------------------------------------
0000888C                            ; Subroutine to	load tiles as soon as the level	appears
0000888C                            ; ---------------------------------------------------------------------------
0000888C                            
0000888C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000888C                            
0000888C                            
0000888C                            LoadTilesFromStart:
0000888C 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008892 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008898 47F8 F700                  		lea	(v_screenposx).w,a3
0000889C 49F8 A400                  		lea	(v_lvllayout).w,a4
000088A0 343C 4000                  		move.w	#$4000,d2
000088A4 6100                       		bsr.s	DrawChunks
000088A6 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000088AA 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000088AE 343C 6000                  		move.w	#$6000,d2
000088B2 4A38 FE10                  			tst.b	(v_zone).w
000088B6 6700 0000                  			beq.w	Draw_GHz_Bg
000088BA 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000088C0 6700 0000                  			beq.w	Draw_Mz_Bg
000088C4 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
000088CA 6700 0000                  			beq.w	Draw_SBz_Bg
000088CE 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
000088D4 6700 0000                  			beq.w	Draw_GHz_Bg
000088D8                            ; End of function LoadTilesFromStart
000088D8                            
000088D8                            
000088D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000088D8                            
000088D8                            
000088D8                            DrawChunks:
000088D8 78F0                       		moveq	#-16,d4
000088DA 7C0F                       		moveq	#((224+16+16)/16)-1,d6
000088DC                            
000088DC                            	@loop:
000088DC 48E7 0E00                  		movem.l	d4-d6,-(sp)
000088E0 7A00                       		moveq	#0,d5
000088E2 3204                       		move.w	d4,d1
000088E4 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
000088E8 3801                       		move.w	d1,d4
000088EA 7A00                       		moveq	#0,d5
000088EC 7C1F                       		moveq	#(512/16)-1,d6
000088EE 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
000088F2 4CDF 0070                  		movem.l	(sp)+,d4-d6
000088F6 0644 0010                  		addi.w	#16,d4
000088FA 51CE FFE0                  		dbf	d6,@loop
000088FE 4E75                       		rts	
00008900                            ; End of function DrawChunks
00008900                            
00008900                            	Draw_GHz_Bg:
00008900 7800                       			moveq	#0,d4
00008902 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008904                            	locj_7224:			
00008904 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008908 41F9 0000 0000             			lea	(locj_724a),a0
0000890E 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008912 D044                       			add.w	d4,d0
00008914 0240 00F0                  			andi.w	#$F0,d0
00008918 6100 0000                  			bsr.w	locj_72Ba
0000891C 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008920 0644 0010                  			addi.w	#16,d4
00008924 51CE FFDE                  			dbf	d6,locj_7224
00008928 4E75                       			rts
0000892A                            	locj_724a:
0000892A 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
0000893A                            ;-------------------------------------------------------------------------------
0000893A                            	Draw_Mz_Bg:;locj_725a:
0000893A 78F0                       			moveq	#-16,d4
0000893C 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000893E                            	locj_725E:			
0000893E 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008942 41FA FC8F                  			lea	(locj_6EF2+1),a0
00008946 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000894A 0440 0200                  			subi.w	#$200,d0
0000894E D044                       			add.w	d4,d0
00008950 0240 07F0                  			andi.w	#$7F0,d0
00008954 6100 0000                  			bsr.w	locj_72Ba
00008958 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000895C 0644 0010                  			addi.w	#16,d4
00008960 51CE FFDC                  			dbf	d6,locj_725E
00008964 4E75                       			rts
00008966                            ;-------------------------------------------------------------------------------
00008966                            	Draw_SBz_Bg:;locj_7288:
00008966 78F0                       			moveq	#-16,d4
00008968 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000896A                            	locj_728C:			
0000896A 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000896E 41FA FB65                  			lea	(locj_6DF4+1),a0
00008972 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008976 D044                       			add.w	d4,d0
00008978 0240 01F0                  			andi.w	#$1F0,d0
0000897C 6100 0000                  			bsr.w	locj_72Ba
00008980 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008984 0644 0010                  			addi.w	#16,d4
00008988 51CE FFE0                  			dbf	d6,locj_728C
0000898C 4E75                       			rts
0000898E                            ;-------------------------------------------------------------------------------
0000898E                            	locj_72B2:
0000898E F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
00008996                            	locj_72Ba:
00008996 E848                       			lsr.w	#4,d0
00008998 1030 0000                  			move.b	(a0,d0.w),d0
0000899C 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
000089A0 6700                       			beq.s	locj_72da
000089A2 7AF0                       			moveq	#-16,d5
000089A4 48E7 0C00                  			movem.l	d4/d5,-(sp)
000089A8 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
000089AC 4CDF 0030                  			movem.l	(sp)+,d4/d5
000089B0 6100 FD56                  			bsr.w	DrawBlocks_LR
000089B4 6000                       			bra.s	locj_72EE
000089B6                            	locj_72da:
000089B6 7A00                       			moveq	#0,d5
000089B8 48E7 0C00                  			movem.l	d4/d5,-(sp)
000089BC 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
000089C0 4CDF 0030                  			movem.l	(sp)+,d4/d5
000089C4 7C1F                       			moveq	#(512/16)-1,d6
000089C6 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
000089CA                            	locj_72EE:
000089CA 4E75                       			rts
000089CC                            
000089CC                            ; ---------------------------------------------------------------------------
000089CC                            ; Subroutine to load basic level data
000089CC                            ; ---------------------------------------------------------------------------
000089CC                            
000089CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089CC                            
000089CC                            
000089CC                            LevelDataLoad:
000089CC 7000                       		moveq	#0,d0
000089CE 1038 FE10                  		move.b	(v_zone).w,d0
000089D2 E948                       		lsl.w	#4,d0
000089D4 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000089DA 45F2 0000                  		lea	(a2,d0.w),a2
000089DE 2F0A                       		move.l	a2,-(sp)
000089E0 588A                       		addq.l	#4,a2
000089E2 205A                       		movea.l	(a2)+,a0
000089E4 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
000089E8 303C 0000                  		move.w	#0,d0
000089EC 6100 8EEA                  		bsr.w	EniDec
000089F0 205A                       		movea.l	(a2)+,a0
000089F2 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
000089F8 6100 905C                  		bsr.w	KosDec
000089FC 6100 0000                  		bsr.w	LevelLayoutLoad
00008A00 301A                       		move.w	(a2)+,d0
00008A02 3012                       		move.w	(a2),d0
00008A04 0240 00FF                  		andi.w	#$FF,d0
00008A08 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
00008A0E 6600                       		bne.s	@notSBZ3	; if not, branch
00008A10 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
00008A12                            
00008A12                            	@notSBZ3:
00008A12 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
00008A18 6700                       		beq.s	@isSBZorFZ	; if yes, branch
00008A1A 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
00008A20 6600                       		bne.s	@normalpal	; if not, branch
00008A22                            
00008A22                            	@isSBZorFZ:
00008A22 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
00008A24                            
00008A24                            	@normalpal:
00008A24 6100 9A56                  		bsr.w	PalLoad1	; load palette (based on d0)
00008A28 245F                       		movea.l	(sp)+,a2
00008A2A 584A                       		addq.w	#4,a2		; read number for 2nd PLC
00008A2C 7000                       		moveq	#0,d0
00008A2E 1012                       		move.b	(a2),d0
00008A30 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
00008A32 6100 8D06                  		bsr.w	AddPLC		; load pattern load cues
00008A36                            
00008A36                            	@skipPLC:
00008A36 4E75                       		rts	
00008A38                            ; End of function LevelDataLoad
00008A38                            
00008A38                            ; ---------------------------------------------------------------------------
00008A38                            ; Level	layout loading subroutine
00008A38                            ; ---------------------------------------------------------------------------
00008A38                            
00008A38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A38                            
00008A38                            
00008A38                            LevelLayoutLoad:
00008A38 47F8 A400                  		lea	(v_lvllayout).w,a3
00008A3C 323C 01FF                  		move.w	#$1FF,d1
00008A40 7000                       		moveq	#0,d0
00008A42                            
00008A42                            LevLoad_ClrRam:
00008A42 26C0                       		move.l	d0,(a3)+
00008A44 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
00008A48                            
00008A48 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
00008A4C 7200                       		moveq	#0,d1
00008A4E 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008A52 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008A56 7202                       		moveq	#2,d1
00008A58                            ; End of function LevelLayoutLoad
00008A58                            
00008A58                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00008A58                            
00008A58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A58                            
00008A58                            
00008A58                            LevelLayoutLoad2:
00008A58 3038 FE10                  		move.w	(v_zone).w,d0
00008A5C ED08                       		lsl.b	#6,d0
00008A5E EA48                       		lsr.w	#5,d0
00008A60 3400                       		move.w	d0,d2
00008A62 D040                       		add.w	d0,d0
00008A64 D042                       		add.w	d2,d0
00008A66 D041                       		add.w	d1,d0
00008A68 43F9 0000 0000             		lea	(Level_Index).l,a1
00008A6E 3031 0000                  		move.w	(a1,d0.w),d0
00008A72 43F1 0000                  		lea	(a1,d0.w),a1
00008A76 7200                       		moveq	#0,d1
00008A78 3401                       		move.w	d1,d2
00008A7A 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00008A7C 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00008A7E                            
00008A7E                            LevLoad_NumRows:
00008A7E 3001                       		move.w	d1,d0
00008A80 204B                       		movea.l	a3,a0
00008A82                            
00008A82                            LevLoad_Row:
00008A82 10D9                       		move.b	(a1)+,(a0)+
00008A84 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008A88 47EB 0080                  		lea	$80(a3),a3	; do next row
00008A8C 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00008A90 4E75                       		rts	
00008A92                            ; End of function LevelLayoutLoad2
00008A92                            
00008A92                            		include	"_inc\DynamicLevelEvents.asm"
00008A92                            ; ---------------------------------------------------------------------------
00008A92                            ; Dynamic level events
00008A92                            ; ---------------------------------------------------------------------------
00008A92                            
00008A92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A92                            
00008A92                            
00008A92                            DynamicLevelEvents:
00008A92 7000                       		moveq	#0,d0
00008A94 1038 FE10                  		move.b	(v_zone).w,d0
00008A98 D040                       		add.w	d0,d0
00008A9A 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
00008A9E 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
00008AA2 7202                       		moveq	#2,d1
00008AA4 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008AA8 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
00008AAC 6700                       		beq.s	DLE_NoChg	; if not, branch
00008AAE 6400                       		bcc.s	loc_6DAC
00008AB0                            
00008AB0 4441                       		neg.w	d1
00008AB2 3038 F704                  		move.w	(v_screenposy).w,d0
00008AB6 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008ABA 6300                       		bls.s	loc_6DA0
00008ABC 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
00008AC0 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
00008AC6                            
00008AC6                            loc_6DA0:
00008AC6 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008ACA 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008AD0                            
00008AD0                            DLE_NoChg:
00008AD0 4E75                       		rts	
00008AD2                            ; ===========================================================================
00008AD2                            
00008AD2                            loc_6DAC:
00008AD2 3038 F704                  		move.w	(v_screenposy).w,d0
00008AD6 5040                       		addq.w	#8,d0
00008AD8 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008ADC 6500                       		bcs.s	loc_6DC4
00008ADE 0838 0001 D022             		btst	#1,(v_player+obStatus).w
00008AE4 6700                       		beq.s	loc_6DC4
00008AE6 D241                       		add.w	d1,d1
00008AE8 D241                       		add.w	d1,d1
00008AEA                            
00008AEA                            loc_6DC4:
00008AEA D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008AEE 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008AF4 4E75                       		rts	
00008AF6                            ; End of function DynamicLevelEvents
00008AF6                            
00008AF6                            ; ===========================================================================
00008AF6                            ; ---------------------------------------------------------------------------
00008AF6                            ; Offset index for dynamic level events
00008AF6                            ; ---------------------------------------------------------------------------
00008AF6 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
00008AFA 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008AFE 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008B02 0000                       		dc.w DLE_Ending-DLE_Index
00008B04                            ; ===========================================================================
00008B04                            ; ---------------------------------------------------------------------------
00008B04                            ; Green	Hill Zone dynamic level events
00008B04                            ; ---------------------------------------------------------------------------
00008B04                            
00008B04                            DLE_GHZ:
00008B04 7000                       		moveq	#0,d0
00008B06 1038 FE11                  		move.b	(v_act).w,d0
00008B0A D040                       		add.w	d0,d0
00008B0C 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008B10 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00008B14                            ; ===========================================================================
00008B14 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00008B16 0000                       		dc.w DLE_GHZ2-DLE_GHZx
00008B18 0000                       		dc.w DLE_GHZ3-DLE_GHZx
00008B1A                            ; ===========================================================================
00008B1A                            
00008B1A                            DLE_GHZ1:
00008B1A 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008B20 6600                       		bne.s	gohere
00008B22 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008B28 4E75                       		rts
00008B2A                            gohere:
00008B2A 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008B30 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00008B36 6500                       		bcs.s	locret_6E08	; if not, branch
00008B38 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008B3E                            
00008B3E                            locret_6E08:
00008B3E 4E75                       		rts	
00008B40                            ; ===========================================================================
00008B40                            
00008B40                            DLE_GHZ2:
00008B40 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B46 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008B4C 6500                       		bcs.s	locret_6E3A
00008B4E 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008B54 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008B5A 6500                       		bcs.s	locret_6E3A
00008B5C 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008B62 6500                       		bcs.s	loc_6E9A
00008B64 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008B6A 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008B70 6400                       		bcc.s	loc_6E8F
00008B72 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008B78 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008B7E                            
00008B7E                            loc_6E8F:
00008B7E 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008B84 6400                       		bcc.s	loc_6E9A
00008B86                            
00008B86                            locret_6E3A:
00008B86 4E75                       		rts	
00008B88                            ; ===========================================================================
00008B88                            
00008B88                            loc_6E9A:
00008B88 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B8E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B92 4E75                       		rts		
00008B94                            ; ===========================================================================
00008B94                            
00008B94                            DLE_GHZ3:
00008B94 7000                       		moveq	#0,d0
00008B96 1038 F742                  		move.b	(v_dle_routine).w,d0
00008B9A 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008B9E 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008BA2                            ; ===========================================================================
00008BA2 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008BA4 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008BA6 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008BA8                            ; ===========================================================================
00008BA8                            
00008BA8                            DLE_GHZ3main:
00008BA8 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008BAE 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008BB4 6500                       		bcs.s	locret_6E96
00008BB6 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008BBC 0C78 0860 F700             		cmpi.w	#$860,(v_screenposx).w
00008BC2 6500                       		bcs.s	locret_6E96
00008BC4 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008BCA 6500                       		bcs.s	loc_6E98
00008BCC 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008BD2 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008BD8 6400                       		bcc.s	loc_6E8E
00008BDA 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008BE0 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008BE6                            
00008BE6                            loc_6E8E:
00008BE6 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008BEC 6400                       		bcc.s	loc_6E98
00008BEE                            
00008BEE                            locret_6E96:
00008BEE 4E75                       		rts	
00008BF0                            ; ===========================================================================
00008BF0                            
00008BF0                            loc_6E98:
00008BF0 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008BF6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BFA 4E75                       		rts	
00008BFC                            ; ===========================================================================
00008BFC                            
00008BFC                            DLE_GHZ3boss:
00008BFC 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008C02 6400                       		bcc.s	loc_6EB0
00008C04 5538 F742                  		subq.b	#2,(v_dle_routine).w
00008C08                            
00008C08                            loc_6EB0:
00008C08 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
00008C0E 6500                       		bcs.s	locret_6EE8
00008C10 6100 0000                  		bsr.w	FindFreeObj
00008C14 6600                       		bne.s	loc_6ED0
00008C16 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
00008C1A 337C 2A60 0008             		move.w	#$2A60,obX(a1)
00008C20 337C 0280 000C             		move.w	#$280,obY(a1)
00008C26                            
00008C26                            loc_6ED0:
00008C2E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008C34 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C38 7000                       		moveq	#plcid_Boss,d0
00008C3A 6000 8AFE                  		bra.w	AddPLC		; load boss patterns
00008C3E                            ; ===========================================================================
00008C3E                            
00008C3E                            locret_6EE8:
00008C3E 4E75                       		rts	
00008C40                            ; ===========================================================================
00008C40                            
00008C40                            DLE_GHZ3end:
00008C40 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008C46 4E75                       		rts	
00008C48                            ; ===========================================================================
00008C48                            ; ---------------------------------------------------------------------------
00008C48                            ; Labyrinth Zone dynamic level events
00008C48                            ; ---------------------------------------------------------------------------
00008C48                            
00008C48                            DLE_LZ:
00008C48 7000                       		moveq	#0,d0
00008C4A 1038 FE11                  		move.b	(v_act).w,d0
00008C4E D040                       		add.w	d0,d0
00008C50 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008C54 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008C58                            ; ===========================================================================
00008C58 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008C5A 0000                       		dc.w DLE_LZ12-DLE_LZx
00008C5C 0000                       		dc.w DLE_LZ3-DLE_LZx
00008C5E 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008C60                            ; ===========================================================================
00008C60                            
00008C60                            DLE_LZ12:
00008C60 4E75                       		rts	
00008C62                            ; ===========================================================================
00008C62                            
00008C62                            DLE_LZ3:
00008C62 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008C66 6700                       		beq.s	loc_6F28	; if not, branch
00008C68 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008C6C 0C11 0007                  		cmpi.b	#7,(a1)
00008C70 6700                       		beq.s	loc_6F28
00008C72 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008C7E                            
00008C7E                            loc_6F28:
00008C7E 4A38 F742                  		tst.b	(v_dle_routine).w
00008C82 6600                       		bne.s	locret_6F64
00008C84 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008C8A 6500                       		bcs.s	locret_6F62
00008C8C 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008C92 6400                       		bcc.s	locret_6F62
00008C94 6100 0000                  		bsr.w	FindFreeObj
00008C98 6600                       		bne.s	loc_6F4A
00008C9A 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
00008C9E                            
00008C9E                            loc_6F4A:
00008CA6 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008CAC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CB0 7000                       		moveq	#plcid_Boss,d0
00008CB2 6000 8A86                  		bra.w	AddPLC		; load boss patterns
00008CB6                            ; ===========================================================================
00008CB6                            
00008CB6                            locret_6F62:
00008CB6 4E75                       		rts	
00008CB8                            ; ===========================================================================
00008CB8                            
00008CB8                            locret_6F64:
00008CB8 4E75                       		rts	
00008CBA                            ; ===========================================================================
00008CBA                            
00008CBA                            DLE_SBZ3:
00008CBA 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008CC0 6500                       		bcs.s	locret_6F8C
00008CC2 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008CC8 6400                       		bcc.s	locret_6F8C	; if not, branch
00008CCA 4238 FE30                  		clr.b	(v_lastlamp).w
00008CCE 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008CD4 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008CDA 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008CE0                            
00008CE0                            locret_6F8C:
00008CE0 4E75                       		rts	
00008CE2                            ; ===========================================================================
00008CE2                            ; ---------------------------------------------------------------------------
00008CE2                            ; Marble Zone dynamic level events
00008CE2                            ; ---------------------------------------------------------------------------
00008CE2                            
00008CE2                            DLE_MZ:
00008CE2 7000                       		moveq	#0,d0
00008CE4 1038 FE11                  		move.b	(v_act).w,d0
00008CE8 D040                       		add.w	d0,d0
00008CEA 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008CEE 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008CF2                            ; ===========================================================================
00008CF2 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008CF4 0000                       		dc.w DLE_MZ2-DLE_MZx
00008CF6 0000                       		dc.w DLE_MZ3-DLE_MZx
00008CF8                            ; ===========================================================================
00008CF8                            
00008CF8                            DLE_MZ1:
00008CF8 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008CFE 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008D04 6500                       		bcs.s	locret_6FE8
00008D06 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008D0C                            
00008D0C                            locret_6FE8:
00008D0C 4E75                       		rts	
00008D0E                            
00008D0E                            ; ===========================================================================
00008D0E                            
00008D0E                            DLE_MZ2:
00008D0E 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008D14 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008D1A 6500                       		bcs.s	locret_6FE9
00008D1C 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008D22                            		
00008D22                            locret_6FE9:
00008D22 4E75                       		rts	
00008D24                            ; ===========================================================================
00008D24                            
00008D24                            DLE_MZ3:
00008D24 7000                       		moveq	#0,d0
00008D26 1038 F742                  		move.b	(v_dle_routine).w,d0
00008D2A 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008D2E 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008D32                            ; ===========================================================================
00008D32 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008D34 0000                       		dc.w DLE_MZ3cutscene-off_7098
00008D36 0000                       		dc.w DLE_MZ3boss2-off_7098
00008D38 0000                       		dc.w DLE_MZ3end-off_7098
00008D3A                            ; ===========================================================================
00008D3A                            
00008D3A                            DLE_MZ3boss:
00008D3A 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008D40 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008D46 6500                       		bcs.s	locret_70E8
00008D48 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008D4E 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008D54 6500                       		bcs.s	locret_70E8
00008D56 6100 0000                  		bsr.w	FindFreeObj
00008D5A 6600                       		bne.s	loc_70D0
00008D5C 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008D60 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008D66 337C 022C 000C             		move.w	#$22C,obY(a1)
00008D6C                            
00008D6C                            loc_70D0:
00008D74 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D7A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D7E 7000                       		moveq	#plcid_Boss,d0
00008D80 6000 89B8                  		bra.w	AddPLC		; load boss patterns
00008D84                            ; ===========================================================================
00008D84                            
00008D84                            locret_70E8:
00008D84 4E75                       		rts	
00008D86                            ; ===========================================================================		
00008D86                            		
00008D86                            DLE_MZ3cutscene:
00008D86 0C78 19B0 F700             		cmpi.w	#$19B0,(v_screenposx).w
00008D8C 6500                       		bcs.s	locret_8298
00008D8E 6100 0000                  		bsr.w	FindFreeObj
00008D92 6600                       		bne.s	locret_8298
00008D94 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008D98 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D9C 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008D9E 6000 899A                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008DA2                            ; ===========================================================================
00008DA2                            
00008DA2                            locret_8298:
00008DA2 4E75                       		rts	
00008DA4                            ; ===========================================================================
00008DA4                            
00008DA4                            DLE_MZ3boss2:
00008DA4 0C78 1A60 F700             		cmpi.w	#$1A60,(v_screenposx).w
00008DAA 6500                       		bcs.s	loc_72C6
00008DAC 6100 0000                  		bsr.w	FindFreeObj
00008DB0 6600                       		bne.s	loc_72C0
00008DB2 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008DB6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008DBA                            
00008DBA                            loc_72C0:
00008DBA 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008DC0 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008DC6                            		
00008DC6                            loc_72C6:
00008DC6 6000 0000                  		bra.w	loc_72C2
00008DCA                            ; ===========================================================================
00008DCA                            
00008DCA                            DLE_MZ3end:
00008DCA 0C78 1B50 F700             		cmpi.w	#$1B50,(v_screenposx).w
00008DD0 6500                       		bcs.s	loc_72D2
00008DD2 4E75                       		rts	
00008DD4                            ; ===========================================================================
00008DD4                            
00008DD4                            loc_72D2:
00008DD4 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008DDA 4E75                       		rts
00008DDC                            
00008DDC                            
00008DDC                            ; ===========================================================================
00008DDC                            ; ---------------------------------------------------------------------------
00008DDC                            ; Star Light Zone dynamic level events
00008DDC                            ; ---------------------------------------------------------------------------
00008DDC                            
00008DDC                            DLE_SLZ:
00008DDC 7000                       		moveq	#0,d0
00008DDE 1038 FE11                  		move.b	(v_act).w,d0
00008DE2 D040                       		add.w	d0,d0
00008DE4 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008DE8 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008DEC                            ; ===========================================================================
00008DEC 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008DEE 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008DF0 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008DF2                            ; ===========================================================================
00008DF2                            
00008DF2                            DLE_SLZ12:
00008DF2 4E75                       		rts	
00008DF4                            ; ===========================================================================
00008DF4                            
00008DF4                            DLE_SLZ3:
00008DF4 7000                       		moveq	#0,d0
00008DF6 1038 F742                  		move.b	(v_dle_routine).w,d0
00008DFA 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008DFE 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008E02                            ; ===========================================================================
00008E02 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008E04 0000                       		dc.w DLE_SLZ3boss-off_7118
00008E06 0000                       		dc.w DLE_SLZ3end-off_7118
00008E08                            ; ===========================================================================
00008E08                            
00008E08                            DLE_SLZ3main:
00008E08 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008E0E 6500                       		bcs.s	locret_7130
00008E10 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008E16 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E1A                            
00008E1A                            locret_7130:
00008E1A 4E75                       		rts	
00008E1C                            ; ===========================================================================
00008E1C                            
00008E1C                            DLE_SLZ3boss:
00008E1C 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008E22 6500                       		bcs.s	locret_715C
00008E24 6100 0000                  		bsr.w	FindFreeObj
00008E28 6600                       		bne.s	loc_7144
00008E2A 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008E2E                            
00008E2E                            loc_7144:
00008E36 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008E3C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E40 7000                       		moveq	#plcid_Boss,d0
00008E42 6000 88F6                  		bra.w	AddPLC		; load boss patterns
00008E46                            ; ===========================================================================
00008E46                            
00008E46                            locret_715C:
00008E46 4E75                       		rts	
00008E48                            ; ===========================================================================
00008E48                            
00008E48                            DLE_SLZ3end:
00008E48 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008E4E 4E75                       		rts
00008E50 4E75                       		rts
00008E52                            ; ===========================================================================
00008E52                            ; ---------------------------------------------------------------------------
00008E52                            ; Spring Yard Zone dynamic level events
00008E52                            ; ---------------------------------------------------------------------------
00008E52                            
00008E52                            DLE_SYZ:
00008E52 7000                       		moveq	#0,d0
00008E54 1038 FE11                  		move.b	(v_act).w,d0
00008E58 D040                       		add.w	d0,d0
00008E5A 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008E5E 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008E62                            ; ===========================================================================
00008E62 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008E64 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008E66 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008E68                            ; ===========================================================================
00008E68                            
00008E68                            DLE_SYZ1:
00008E68 4E75                       		rts	
00008E6A                            ; ===========================================================================
00008E6A                            
00008E6A                            DLE_SYZ2:
00008E6A 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008E70 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008E76 6500                       		bcs.s	locret_71A2
00008E78 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008E7E 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008E84 6500                       		bcs.s	locret_71A2
00008E86 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008E8C                            
00008E8C                            locret_71A2:
00008E8C 4E75                       		rts	
00008E8E                            ; ===========================================================================
00008E8E                            
00008E8E                            DLE_SYZ3:
00008E8E 7000                       		moveq	#0,d0
00008E90 1038 F742                  		move.b	(v_dle_routine).w,d0
00008E94 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008E98 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008E9C                            ; ===========================================================================
00008E9C 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008E9E 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008EA0 0000                       		dc.w DLE_SYZ3end-off_71B2
00008EA2                            ; ===========================================================================
00008EA2                            
00008EA2                            DLE_SYZ3main:
00008EA2 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008EA8 6500                       		bcs.s	locret_71CE
00008EAA 6100 0000                  		bsr.w	FindFreeObj
00008EAE 6600                       		bne.s	locret_71CE
00008EB0 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008EB4 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EB8                            
00008EB8                            locret_71CE:
00008EB8 4E75                       		rts	
00008EBA                            ; ===========================================================================
00008EBA                            
00008EBA                            DLE_SYZ3boss:
00008EBA 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008EC0 6500                       		bcs.s	locret_7200
00008EC2 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008EC8 6100 0000                  		bsr.w	FindFreeObj
00008ECC 6600                       		bne.s	loc_71EC
00008ECE 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008ED2 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008ED6                            
00008ED6                            loc_71EC:
00008EDE 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008EE4 7000                       		moveq	#plcid_Boss,d0
00008EE6 6000 8852                  		bra.w	AddPLC		; load boss patterns
00008EEA                            ; ===========================================================================
00008EEA                            
00008EEA                            locret_7200:
00008EEA 4E75                       		rts	
00008EEC                            ; ===========================================================================
00008EEC                            
00008EEC                            DLE_SYZ3end:
00008EEC 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008EF2 4E75                       		rts	
00008EF4                            ; ===========================================================================
00008EF4                            ; ---------------------------------------------------------------------------
00008EF4                            ; Scrap	Brain Zone dynamic level events
00008EF4                            ; ---------------------------------------------------------------------------
00008EF4                            
00008EF4                            DLE_SBZ:
00008EF4 7000                       		moveq	#0,d0
00008EF6 1038 FE11                  		move.b	(v_act).w,d0
00008EFA D040                       		add.w	d0,d0
00008EFC 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008F00 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008F04                            ; ===========================================================================
00008F04 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008F06 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008F08 0000                       		dc.w DLE_FZ-DLE_SBZx
00008F0A                            ; ===========================================================================
00008F0A                            
00008F0A                            DLE_SBZ1:
00008F0A 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008F10 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008F16 6500                       		bcs.s	locret_7242
00008F18 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008F1E 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008F24 6500                       		bcs.s	locret_7242
00008F26 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008F2C                            
00008F2C                            locret_7242:
00008F2C 4E75                       		rts	
00008F2E                            ; ===========================================================================
00008F2E                            
00008F2E                            DLE_SBZ2:
00008F2E 7000                       		moveq	#0,d0
00008F30 1038 F742                  		move.b	(v_dle_routine).w,d0
00008F34 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008F38 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008F3C                            ; ===========================================================================
00008F3C 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008F3E 0000                       		dc.w DLE_SBZ2boss-off_7252
00008F40 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008F42 0000                       		dc.w DLE_SBZ2end-off_7252
00008F44                            ; ===========================================================================
00008F44                            
00008F44                            DLE_SBZ2main:
00008F44 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008F4A 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008F50 6500                       		bcs.s	locret_727A
00008F52 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008F58 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008F5E 6500                       		bcs.s	locret_727A
00008F60 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F64                            
00008F64                            locret_727A:
00008F64 4E75                       		rts	
00008F66                            ; ===========================================================================
00008F66                            
00008F66                            DLE_SBZ2boss:
00008F66 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008F6C 6500                       		bcs.s	locret_7298
00008F6E 6100 0000                  		bsr.w	FindFreeObj
00008F72 6600                       		bne.s	locret_7298
00008F74 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008F78 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F7C 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008F7E 6000 87BA                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008F82                            ; ===========================================================================
00008F82                            
00008F82                            locret_7298:
00008F82 4E75                       		rts	
00008F84                            ; ===========================================================================
00008F84                            
00008F84                            DLE_SBZ2boss2:
00008F84 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008F8A 6500                       		bcs.s	loc_72B6
00008F8C 6100 0000                  		bsr.w	FindFreeObj
00008F90 6600                       		bne.s	loc_72B0
00008F92 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008F96 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F9A                            
00008F9A                            loc_72B0:
00008F9A 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008FA0                            
00008FA0                            loc_72B6:
00008FA0 6000                       		bra.s	loc_72C2
00008FA2                            ; ===========================================================================
00008FA2                            
00008FA2                            DLE_SBZ2end:
00008FA2 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008FA8 6500                       		bcs.s	loc_72C2
00008FAA 4E75                       		rts	
00008FAC                            ; ===========================================================================
00008FAC                            
00008FAC                            loc_72C2:
00008FAC 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008FB2 4E75                       		rts	
00008FB4                            ; ===========================================================================
00008FB4                            
00008FB4                            DLE_FZ:
00008FB4 7000                       		moveq	#0,d0
00008FB6 1038 F742                  		move.b	(v_dle_routine).w,d0
00008FBA 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008FBE 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008FC2                            ; ===========================================================================
00008FC2 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008FC6 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008FCA 0000                       		dc.w DLE_FZend2-off_72D8
00008FCC                            ; ===========================================================================
00008FCC                            
00008FCC                            DLE_FZmain:
00008FCC 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008FD2 6500                       		bcs.s	loc_72F4
00008FD4 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008FD8 7000                       		moveq	#plcid_FZBoss,d0
00008FDA 6100 875E                  		bsr.w	AddPLC		; load FZ boss patterns
00008FDE                            
00008FDE                            loc_72F4:
00008FDE 60CC                       		bra.s	loc_72C2
00008FE0                            ; ===========================================================================
00008FE0                            
00008FE0                            DLE_FZboss:
00008FE0 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008FE6 6500                       		bcs.s	loc_7312
00008FE8 6100 0000                  		bsr.w	FindFreeObj
00008FEC 6600                       		bne.s	loc_7312
00008FEE 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008FF2 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008FF6 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008FFC                            
00008FFC                            loc_7312:
00008FFC 60AE                       		bra.s	loc_72C2
00008FFE                            ; ===========================================================================
00008FFE                            
00008FFE                            DLE_FZend:
00008FFE 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00009004 6500                       		bcs.s	loc_7320
00009006 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000900A                            
0000900A                            loc_7320:
0000900A 60A0                       		bra.s	loc_72C2
0000900C                            ; ===========================================================================
0000900C                            
0000900C                            locret_7322:
0000900C 4E75                       		rts	
0000900E                            ; ===========================================================================
0000900E                            
0000900E                            DLE_FZend2:
0000900E 609C                       		bra.s	loc_72C2
00009010                            ; ===========================================================================
00009010                            ; ---------------------------------------------------------------------------
00009010                            ; Ending sequence dynamic level events (empty)
00009010                            ; ---------------------------------------------------------------------------
00009010                            
00009010                            DLE_Ending:
00009010 4E75                       		rts	
00009010 4E75                       		rts	
00009012                            
00009012                            		include	"_incObj\11 Bridge (part 1).asm"
00009012                            ; ---------------------------------------------------------------------------
00009012                            ; Object 11 - GHZ bridge
00009012                            ; ---------------------------------------------------------------------------
00009012                            
00009012                            Bridge:
00009012 7000                       		moveq	#0,d0
00009014 1028 0024                  		move.b	obRoutine(a0),d0
00009018 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
0000901C 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00009020                            ; ===========================================================================
00009020 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00009024 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00009028 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
0000902C                            ; ===========================================================================
0000902C                            
0000902C                            Bri_Main:	; Routine 0
0000902C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009030 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00009038 317C 438E 0002             		move.w	#$438E,obGfx(a0)
0000903E 117C 0004 0001             		move.b	#4,obRender(a0)
00009044 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000904A 117C 0080 0014             		move.b	#$80,obActWid(a0)
00009050 3428 000C                  		move.w	obY(a0),d2
00009054 3628 0008                  		move.w	obX(a0),d3
00009058 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
0000905A 45E8 0028                  		lea	obSubtype(a0),a2
0000905E 7200                       		moveq	#0,d1
00009060 1212                       		move.b	(a2),d1		; copy bridge length to d1
00009062 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00009066 3001                       		move.w	d1,d0
00009068 E248                       		lsr.w	#1,d0
0000906A E948                       		lsl.w	#4,d0
0000906C 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
0000906E 5501                       		subq.b	#2,d1
00009070 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00009072                            
00009072                            @buildloop:
00009072 6100 0000                  		bsr.w	FindFreeObj
00009076 6600                       		bne.s	Bri_Action
00009078 5228 0028                  		addq.b	#1,obSubtype(a0)
0000907C B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00009080 6600                       		bne.s	@notleftmost	; if not, branch
00009082                            
00009082 0643 0010                  		addi.w	#$10,d3
00009086 3142 000C                  		move.w	d2,obY(a0)
0000908A 3142 003C                  		move.w	d2,$3C(a0)
0000908E 3A08                       		move.w	a0,d5
00009090 0445 D000                  		subi.w	#$D000,d5
00009094 EC4D                       		lsr.w	#6,d5
00009096 0245 007F                  		andi.w	#$7F,d5
0000909A 14C5                       		move.b	d5,(a2)+
0000909C 5228 0028                  		addq.b	#1,obSubtype(a0)
000090A0                            
000090A0                            	@notleftmost:
000090A0 3A09                       		move.w	a1,d5
000090A2 0445 D000                  		subi.w	#$D000,d5
000090A6 EC4D                       		lsr.w	#6,d5
000090A8 0245 007F                  		andi.w	#$7F,d5
000090AC 14C5                       		move.b	d5,(a2)+
000090AE 137C 000A 0024             		move.b	#$A,obRoutine(a1)
000090B4 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000090B6 3342 000C                  		move.w	d2,obY(a1)
000090BA 3342 003C                  		move.w	d2,$3C(a1)
000090BE 3343 0008                  		move.w	d3,obX(a1)
000090C2 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
000090CA 337C 438E 0002             		move.w	#$438E,obGfx(a1)
000090D0 137C 0004 0001             		move.b	#4,obRender(a1)
000090D6 337C 0180 0018             		move.w	#$180,obPriority(a1)
000090DC 137C 0008 0014             		move.b	#8,obActWid(a1)
000090E2 0643 0010                  		addi.w	#$10,d3
000090E6 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
000090EA                            
000090EA                            Bri_Action:	; Routine 2
000090EA 6100                       		bsr.s	Bri_Solid
000090EC 4A28 003E                  		tst.b	$3E(a0)
000090F0 6700                       		beq.s	@display
000090F2 5928 003E                  		subq.b	#4,$3E(a0)
000090F6 6100 0000                  		bsr.w	Bri_Bend
000090FA                            
000090FA                            	@display:
000090FA 6100 0000                  		bsr.w	DisplaySprite
000090FE 6000 0000                  		bra.w	Bri_ChkDel
00009102                            
00009102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009102                            
00009102                            
00009102                            Bri_Solid:
00009102 7200                       		moveq	#0,d1
00009104 1228 0028                  		move.b	obSubtype(a0),d1
00009108 E749                       		lsl.w	#3,d1
0000910A 3401                       		move.w	d1,d2
0000910C 5041                       		addq.w	#8,d1
0000910E D442                       		add.w	d2,d2
00009110 43F8 D000                  		lea	(v_player).w,a1
00009114 4A69 0012                  		tst.w	obVelY(a1)
00009118 6B00 0000                  		bmi.w	Plat_Exit
0000911C 3029 0008                  		move.w	obX(a1),d0
00009120 9068 0008                  		sub.w	obX(a0),d0
00009124 D041                       		add.w	d1,d0
00009126 6B00 0000                  		bmi.w	Plat_Exit
0000912A B042                       		cmp.w	d2,d0
0000912C 6400 0000                  		bcc.w	Plat_Exit
00009130 6000                       		bra.s	Plat_NoXCheck
00009132                            ; End of function Bri_Solid
00009132                            ; End of function Bri_Solid
00009132                            
00009132                            ; ---------------------------------------------------------------------------
00009132                            ; Platform subroutine
00009132                            ; ---------------------------------------------------------------------------
00009132                            
00009132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009132                            
00009132                            PlatformObject:
00009132 43F8 D000                  		lea	(v_player).w,a1
00009136 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
0000913A 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
0000913E                            
0000913E                            ;		perform x-axis range check
0000913E 3029 0008                  		move.w	obX(a1),d0
00009142 9068 0008                  		sub.w	obX(a0),d0
00009146 D041                       		add.w	d1,d0
00009148 6B00 0000                  		bmi.w	Plat_Exit
0000914C D241                       		add.w	d1,d1
0000914E B041                       		cmp.w	d1,d0
00009150 6400 0000                  		bhs.w	Plat_Exit
00009154                            
00009154                            	Plat_NoXCheck:
00009154 3028 000C                  		move.w	obY(a0),d0
00009158 5140                       		subq.w	#8,d0
0000915A                            
0000915A                            Platform3:
0000915A                            ;		perform y-axis range check
0000915A 3429 000C                  		move.w	obY(a1),d2
0000915E 1229 0016                  		move.b	obHeight(a1),d1
00009162 4881                       		ext.w	d1
00009164 D242                       		add.w	d2,d1
00009166 5841                       		addq.w	#4,d1
00009168 9041                       		sub.w	d1,d0
0000916A 6200 0000                  		bhi.w	Plat_Exit
0000916E 0C40 FFF0                  		cmpi.w	#-$10,d0
00009172 6500 0000                  		blo.w	Plat_Exit
00009176                            
00009176 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000917A 6B00 0000                  		bmi.w	Plat_Exit
0000917E 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00009184 6400 0000                  		bhs.w	Plat_Exit
00009188 D440                       		add.w	d0,d2
0000918A 5642                       		addq.w	#3,d2
0000918C 3342 000C                  		move.w	d2,obY(a1)
00009190 5428 0024                  		addq.b	#2,obRoutine(a0)
00009194                            
00009194                            loc_74AE:
00009194 0829 0003 0022             		btst	#3,obStatus(a1)
0000919A 6700                       		beq.s	loc_74DC
0000919C 7000                       		moveq	#0,d0
0000919E 1029 003D                  		move.b	$3D(a1),d0
000091A2 ED48                       		lsl.w	#6,d0
000091A4 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000091AA 2440                       		movea.l	d0,a2
000091AC 08AA 0003 0022             		bclr	#3,obStatus(a2)
000091B2 422A 0025                  		clr.b	ob2ndRout(a2)
000091B6 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
000091BC 6600                       		bne.s	loc_74DC
000091BE 552A 0024                  		subq.b	#2,obRoutine(a2)
000091C2                            
000091C2                            loc_74DC:
000091C2 3008                       		move.w	a0,d0
000091C4 0440 D000                  		subi.w	#-$3000,d0
000091C8 EC48                       		lsr.w	#6,d0
000091CA 0240 007F                  		andi.w	#$7F,d0
000091CE 1340 003D                  		move.b	d0,$3D(a1)
000091D2 137C 0000 0026             		move.b	#0,obAngle(a1)
000091D8 337C 0000 0012             		move.w	#0,obVelY(a1)
000091DE 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
000091E4 0829 0001 0022             		btst	#1,obStatus(a1)
000091EA 6700                       		beq.s	loc_7512
000091EC 2F08                       		move.l	a0,-(sp)
000091EE 2049                       		movea.l	a1,a0
000091F0 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
000091F6 205F                       		movea.l	(sp)+,a0
000091F8                            
000091F8                            loc_7512:
000091F8 08E9 0003 0022             		bset	#3,obStatus(a1)
000091FE 08E8 0003 0022             		bset	#3,obStatus(a0)
00009204                            
00009204                            Plat_Exit:
00009204 4E75                       		rts	
00009206                            ; End of function PlatformObject
00009206                            
00009206                            ; ---------------------------------------------------------------------------
00009206                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00009206                            ; ---------------------------------------------------------------------------
00009206                            
00009206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009206                            
00009206                            
00009206                            SlopeObject:
00009206 43F8 D000                  		lea	(v_player).w,a1
0000920A 4A69 0012                  		tst.w	obVelY(a1)
0000920E 6B00 FFF4                  		bmi.w	Plat_Exit
00009212 3029 0008                  		move.w	obX(a1),d0
00009216 9068 0008                  		sub.w	obX(a0),d0
0000921A D041                       		add.w	d1,d0
0000921C 6BE6                       		bmi.s	Plat_Exit
0000921E D241                       		add.w	d1,d1
00009220 B041                       		cmp.w	d1,d0
00009222 64E0                       		bhs.s	Plat_Exit
00009224 0828 0000 0001             		btst	#0,obRender(a0)
0000922A 6700                       		beq.s	loc_754A
0000922C 4640                       		not.w	d0
0000922E D041                       		add.w	d1,d0
00009230                            
00009230                            loc_754A:
00009230 E248                       		lsr.w	#1,d0
00009232 7600                       		moveq	#0,d3
00009234 1632 0000                  		move.b	(a2,d0.w),d3
00009238 3028 000C                  		move.w	obY(a0),d0
0000923C 9043                       		sub.w	d3,d0
0000923E 6000 FF1A                  		bra.w	Platform3
00009242                            ; End of function SlopeObject
00009242                            
00009242                            
00009242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009242                            
00009242                            
00009242                            Swing_Solid:
00009242 43F8 D000                  		lea	(v_player).w,a1
00009246 4A69 0012                  		tst.w	obVelY(a1)
0000924A 6B00 FFB8                  		bmi.w	Plat_Exit
0000924E 3029 0008                  		move.w	obX(a1),d0
00009252 9068 0008                  		sub.w	obX(a0),d0
00009256 D041                       		add.w	d1,d0
00009258 6B00 FFAA                  		bmi.w	Plat_Exit
0000925C D241                       		add.w	d1,d1
0000925E B041                       		cmp.w	d1,d0
00009260 6400 FFA2                  		bhs.w	Plat_Exit
00009264 3028 000C                  		move.w	obY(a0),d0
00009268 9043                       		sub.w	d3,d0
0000926A 6000 FEEE                  		bra.w	Platform3
0000926E                            ; End of function Obj15_Solid
0000926E                            
0000926E                            ; ===========================================================================
0000926E                            
0000926E                            		include	"_incObj\11 Bridge (part 2).asm"
0000926E                            
0000926E                            Bri_Platform:	; Routine 4
0000926E 6100                       		bsr.s	Bri_WalkOff
00009270 6100 0000                  		bsr.w	DisplaySprite
00009274 6000 0000                  		bra.w	Bri_ChkDel
00009278                            
00009278                            ; ---------------------------------------------------------------------------
00009278                            ; Subroutine allowing Sonic to walk off a bridge
00009278                            ; ---------------------------------------------------------------------------
00009278                            
00009278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009278                            
00009278                            
00009278                            Bri_WalkOff:
00009278 7200                       		moveq	#0,d1
0000927A 1228 0028                  		move.b	obSubtype(a0),d1
0000927E E749                       		lsl.w	#3,d1
00009280 3401                       		move.w	d1,d2
00009282 5041                       		addq.w	#8,d1
00009284 6100                       		bsr.s	ExitPlatform2
00009286 6400                       		bcc.s	locret_75BE
00009288 E848                       		lsr.w	#4,d0
0000928A 1140 003F                  		move.b	d0,$3F(a0)
0000928E 1028 003E                  		move.b	$3E(a0),d0
00009292 0C00 0040                  		cmpi.b	#$40,d0
00009296 6700                       		beq.s	loc_75B6
00009298 5828 003E                  		addq.b	#4,$3E(a0)
0000929C                            
0000929C                            loc_75B6:
0000929C 6100 0000                  		bsr.w	Bri_Bend
000092A0 6100 0000                  		bsr.w	Bri_MoveSonic
000092A4                            
000092A4                            locret_75BE:
000092A4 4E75                       		rts	
000092A6                            ; End of function Bri_WalkOff
000092A6                            ; End of function Bri_WalkOff
000092A6                            
000092A6                            ; ---------------------------------------------------------------------------
000092A6                            ; Subroutine allowing Sonic to walk or jump off	a platform
000092A6                            ; ---------------------------------------------------------------------------
000092A6                            
000092A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092A6                            
000092A6                            
000092A6                            ExitPlatform:
000092A6 3401                       		move.w	d1,d2
000092A8                            
000092A8                            ExitPlatform2:
000092A8 D442                       		add.w	d2,d2
000092AA 43F8 D000                  		lea	(v_player).w,a1
000092AE 0829 0001 0022             		btst	#1,obStatus(a1)
000092B4 6600                       		bne.s	loc_75E0
000092B6 3029 0008                  		move.w	obX(a1),d0
000092BA 9068 0008                  		sub.w	obX(a0),d0
000092BE D041                       		add.w	d1,d0
000092C0 6B00                       		bmi.s	loc_75E0
000092C2 B042                       		cmp.w	d2,d0
000092C4 6500                       		blo.s	locret_75F2
000092C6                            
000092C6                            loc_75E0:
000092C6 08A9 0003 0022             		bclr	#3,obStatus(a1)
000092CC 117C 0002 0024             		move.b	#2,obRoutine(a0)
000092D2 08A8 0003 0022             		bclr	#3,obStatus(a0)
000092D8                            
000092D8                            locret_75F2:
000092D8 4E75                       		rts	
000092DA                            ; End of function ExitPlatform
000092DA                            
000092DA                            		include	"_incObj\11 Bridge (part 3).asm"
000092DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092DA                            
000092DA                            
000092DA                            Bri_MoveSonic:
000092DA 7000                       		moveq	#0,d0
000092DC 1028 003F                  		move.b	$3F(a0),d0
000092E0 1030 0029                  		move.b	$29(a0,d0.w),d0
000092E4 ED48                       		lsl.w	#6,d0
000092E6 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092EC 2440                       		movea.l	d0,a2
000092EE 43F8 D000                  		lea	(v_player).w,a1
000092F2 302A 000C                  		move.w	obY(a2),d0
000092F6 5140                       		subq.w	#8,d0
000092F8 7200                       		moveq	#0,d1
000092FA 1229 0016                  		move.b	obHeight(a1),d1
000092FE 9041                       		sub.w	d1,d0
00009300 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00009304 4E75                       		rts	
00009306                            ; End of function Bri_MoveSonic
00009306                            
00009306                            
00009306                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009306                            
00009306                            
00009306                            Bri_Bend:
00009306 1028 003E                  		move.b	$3E(a0),d0
0000930A 6100 A776                  		bsr.w	CalcSine
0000930E 3800                       		move.w	d0,d4
00009310 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00009316 7000                       		moveq	#0,d0
00009318 1028 0028                  		move.b	obSubtype(a0),d0
0000931C E948                       		lsl.w	#4,d0
0000931E 7600                       		moveq	#0,d3
00009320 1628 003F                  		move.b	$3F(a0),d3
00009324 3403                       		move.w	d3,d2
00009326 D640                       		add.w	d0,d3
00009328 7A00                       		moveq	#0,d5
0000932A 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009330 1A35 3000                  		move.b	(a5,d3.w),d5
00009334 0243 000F                  		andi.w	#$F,d3
00009338 E94B                       		lsl.w	#4,d3
0000933A 47F4 3000                  		lea	(a4,d3.w),a3
0000933E 45E8 0029                  		lea	$29(a0),a2
00009342                            
00009342                            loc_765C:
00009342 7000                       		moveq	#0,d0
00009344 101A                       		move.b	(a2)+,d0
00009346 ED48                       		lsl.w	#6,d0
00009348 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000934E 2240                       		movea.l	d0,a1
00009350 7000                       		moveq	#0,d0
00009352 101B                       		move.b	(a3)+,d0
00009354 5240                       		addq.w	#1,d0
00009356 C0C5                       		mulu.w	d5,d0
00009358 C0C4                       		mulu.w	d4,d0
0000935A 4840                       		swap	d0
0000935C D069 003C                  		add.w	$3C(a1),d0
00009360 3340 000C                  		move.w	d0,obY(a1)
00009364 51CA FFDC                  		dbf	d2,loc_765C
00009368 7000                       		moveq	#0,d0
0000936A 1028 0028                  		move.b	obSubtype(a0),d0
0000936E 7600                       		moveq	#0,d3
00009370 1628 003F                  		move.b	$3F(a0),d3
00009374 5203                       		addq.b	#1,d3
00009376 9600                       		sub.b	d0,d3
00009378 4403                       		neg.b	d3
0000937A 6B00                       		bmi.s	locret_76CA
0000937C 3403                       		move.w	d3,d2
0000937E E94B                       		lsl.w	#4,d3
00009380 47F4 3000                  		lea	(a4,d3.w),a3
00009384 D6C2                       		adda.w	d2,a3
00009386 5342                       		subq.w	#1,d2
00009388 6500                       		bcs.s	locret_76CA
0000938A                            
0000938A                            loc_76A4:
0000938A 7000                       		moveq	#0,d0
0000938C 101A                       		move.b	(a2)+,d0
0000938E ED48                       		lsl.w	#6,d0
00009390 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009396 2240                       		movea.l	d0,a1
00009398 7000                       		moveq	#0,d0
0000939A 1023                       		move.b	-(a3),d0
0000939C 5240                       		addq.w	#1,d0
0000939E C0C5                       		mulu.w	d5,d0
000093A0 C0C4                       		mulu.w	d4,d0
000093A2 4840                       		swap	d0
000093A4 D069 003C                  		add.w	$3C(a1),d0
000093A8 3340 000C                  		move.w	d0,obY(a1)
000093AC 51CA FFDC                  		dbf	d2,loc_76A4
000093B0                            
000093B0                            locret_76CA:
000093B0 4E75                       		rts	
000093B2                            ; End of function Bri_Bend
000093B2                            
000093B2                            ; ===========================================================================
000093B2                            ; ---------------------------------------------------------------------------
000093B2                            ; GHZ bridge-bending data
000093B2                            ; (Defines how the bridge bends	when Sonic walks across	it)
000093B2                            ; ---------------------------------------------------------------------------
000093B2                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
000094C2                            		even
000094C2                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
000095C2                            		even
000095C2                            
000095C2                            ; ===========================================================================
000095C2                            
000095C2                            Bri_ChkDel:
000095E0 4E75                       		rts	
000095E2                            ; ===========================================================================
000095E2                            
000095E2                            @deletebridge:
000095E2 7400                       		moveq	#0,d2
000095E4 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
000095E8 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000095EA 5302                       		subq.b	#1,d2		; subtract 1
000095EC 6500                       		bcs.s	@delparent
000095EE                            
000095EE                            	@loop:
000095EE 7000                       		moveq	#0,d0
000095F0 101A                       		move.b	(a2)+,d0
000095F2 ED48                       		lsl.w	#6,d0
000095F4 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000095FA 2240                       		movea.l	d0,a1
000095FC B048                       		cmp.w	a0,d0
000095FE 6700                       		beq.s	@skipdel
00009600 6100 0000                  		bsr.w	DeleteChild
00009604                            
00009604                            	@skipdel:
00009604 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
00009608                            
00009608                            @delparent:
00009608 6100 0000                  		bsr.w	DeleteObject
0000960C 4E75                       		rts	
0000960E                            ; ===========================================================================
0000960E                            
0000960E                            Bri_Delete:	; Routine 6, 8
0000960E 6100 0000                  		bsr.w	DeleteObject
00009612 4E75                       		rts	
00009614                            ; ===========================================================================
00009614                            
00009614                            Bri_Display:	; Routine $A
00009614 6100 0000                  		bsr.w	DisplaySprite
00009618 4E75                       		rts	
00009618 4E75                       		rts	
0000961A                            Map_Bri:	include	"_maps\Bridge.asm"
0000961A                            ; ---------------------------------------------------------------------------
0000961A                            ; Sprite mappings - GHZ	bridge
0000961A                            ; ---------------------------------------------------------------------------
0000961A                            Map_Bri_internal:
0000961A 0000                       		dc.w M_Bri_Log-Map_Bri_internal
0000961C 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
0000961E 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009620 01                         M_Bri_Log:	dc.b 1
00009621 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
00009626 02                         M_Bri_Stump:	dc.b 2
00009627 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
0000962C 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009631 01                         M_Bri_Rope:	dc.b 1
00009632 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
00009638 00                         		even
00009638 00                         		even
00009638                            
00009638                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
00009638                            ; ---------------------------------------------------------------------------
00009638                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00009638                            ;	    - spiked ball on a chain (SBZ)
00009638                            ; ---------------------------------------------------------------------------
00009638                            
00009638                            SwingingPlatform:
00009638 7000                       		moveq	#0,d0
0000963A 1028 0024                  		move.b	obRoutine(a0),d0
0000963E 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00009642 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
00009646                            ; ===========================================================================
00009646 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
0000964A 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
0000964E 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00009652 0000                       		dc.w Swing_Action-Swing_Index
00009654                            
00009654 =0000003A                  swing_origX:	equ $3A		; original x-axis position
00009654 =00000038                  swing_origY:	equ $38		; original y-axis position
00009654                            ; ===========================================================================
00009654                            
00009654                            Swing_Main:	; Routine 0
00009654 5428 0024                  		addq.b	#2,obRoutine(a0)
00009658 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009660 317C 4380 0002             		move.w	#$4380,obGfx(a0)
00009666 117C 0004 0001             		move.b	#4,obRender(a0)
0000966C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009672 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009678 117C 0008 0016             		move.b	#8,obHeight(a0)
0000967E 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
00009684 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
0000968A 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009690 6600                       		bne.s	@notSLZ
00009692                            
00009692 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
0000969A 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
000096A0 117C 0020 0014             		move.b	#$20,obActWid(a0)
000096A6 117C 0010 0016             		move.b	#$10,obHeight(a0)
000096AC 117C 0099 0020             		move.b	#$99,obColType(a0)
000096B2                            
000096B2                            	@notSLZ:
000096B2 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000096B8 6600                       		bne.s	@length
000096BA                            
000096BA 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
000096C2 317C 0391 0002             		move.w	#$391,obGfx(a0)
000096C8 117C 0018 0014             		move.b	#$18,obActWid(a0)
000096CE 117C 0018 0016             		move.b	#$18,obHeight(a0)
000096D4 117C 0086 0020             		move.b	#$86,obColType(a0)
000096DA 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
000096E0                            
000096E0                            @length:
000096E0 1810                       		move.b	0(a0),d4
000096E2 7200                       		moveq	#0,d1
000096E4 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
000096E8 1212                       		move.b	(a2),d1		; move a2 to d1
000096EA 3F01                       		move.w	d1,-(sp)
000096EC 0241 000F                  		andi.w	#$F,d1
000096F0 14FC 0000                  		move.b	#0,(a2)+
000096F4 3601                       		move.w	d1,d3
000096F6 E94B                       		lsl.w	#4,d3
000096F8 5003                       		addq.b	#8,d3
000096FA 1143 003C                  		move.b	d3,$3C(a0)
000096FE 5103                       		subq.b	#8,d3
00009700 4A28 001A                  		tst.b	obFrame(a0)
00009704 6700                       		beq.s	@makechain
00009706 5003                       		addq.b	#8,d3
00009708 5341                       		subq.w	#1,d1
0000970A                            
0000970A                            @makechain:
0000970A 6100 0000                  		bsr.w	FindFreeObj
0000970E 6600                       		bne.s	@fail
00009710 5228 0028                  		addq.b	#1,obSubtype(a0)
00009714 3A09                       		move.w	a1,d5
00009716 0445 D000                  		subi.w	#$D000,d5
0000971A EC4D                       		lsr.w	#6,d5
0000971C 0245 007F                  		andi.w	#$7F,d5
00009720 14C5                       		move.b	d5,(a2)+
00009722 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
00009728 1284                       		move.b	d4,0(a1)	; load swinging	object
0000972A 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009730 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009736 08A9 0006 0002             		bclr	#6,obGfx(a1)
0000973C 137C 0004 0001             		move.b	#4,obRender(a1)
00009742 337C 0200 0018             		move.w	#$200,obPriority(a1)
00009748 137C 0008 0014             		move.b	#8,obActWid(a1)
0000974E 137C 0001 001A             		move.b	#1,obFrame(a1)
00009754 1343 003C                  		move.b	d3,$3C(a1)
00009758 0403 0010                  		subi.b	#$10,d3
0000975C 6400                       		bcc.s	@notanchor
0000975E 137C 0002 001A             		move.b	#2,obFrame(a1)
00009764 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000976A 08E9 0006 0002             		bset	#6,obGfx(a1)
00009770                            
00009770                            	@notanchor:
00009770 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
00009774                            
00009774                            	@fail:
00009774 3A08                       		move.w	a0,d5
00009776 0445 D000                  		subi.w	#$D000,d5
0000977A EC4D                       		lsr.w	#6,d5
0000977C 0245 007F                  		andi.w	#$7F,d5
00009780 14C5                       		move.b	d5,(a2)+
00009782 317C 4080 0026             		move.w	#$4080,obAngle(a0)
00009788 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000978E 321F                       		move.w	(sp)+,d1
00009790 0801 0004                  		btst	#4,d1		; is object type $1X ?
00009794 6700                       		beq.s	@not1X	; if not, branch
00009796 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
0000979E 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
000097A4 117C 0001 001A             		move.b	#1,obFrame(a0)
000097AA 317C 0100 0018             		move.w	#$100,obPriority(a0)
000097B0 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
000097B6                            
000097B6                            	@not1X:
000097B6 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
000097BC 6700                       		beq.s	Swing_Action	; if yes, branch
000097BE                            
000097BE                            Swing_SetSolid:	; Routine 2
000097BE 7200                       		moveq	#0,d1
000097C0 1228 0014                  		move.b	obActWid(a0),d1
000097C4 7600                       		moveq	#0,d3
000097C6 1628 0016                  		move.b	obHeight(a0),d3
000097CA 6100 FA76                  		bsr.w	Swing_Solid
000097CE                            
000097CE                            Swing_Action:	; Routine $C
000097CE 6100 0000                  		bsr.w	Swing_Move
000097D2 6100 0000                  		bsr.w	DisplaySprite
000097D6 6000 0000                  		bra.w	Swing_ChkDel
000097DA                            ; ===========================================================================
000097DA                            
000097DA                            Swing_Action2:	; Routine 4
000097DA 7200                       		moveq	#0,d1
000097DC 1228 0014                  		move.b	obActWid(a0),d1
000097E0 6100 FAC4                  		bsr.w	ExitPlatform
000097E4 3F28 0008                  		move.w	obX(a0),-(sp)
000097E8 6100 0000                  		bsr.w	Swing_Move
000097EC 341F                       		move.w	(sp)+,d2
000097EE 7600                       		moveq	#0,d3
000097F0 1628 0016                  		move.b	obHeight(a0),d3
000097F4 5203                       		addq.b	#1,d3
000097F6 6100 0000                  		bsr.w	MvSonicOnPtfm
000097FA 6100 0000                  		bsr.w	DisplaySprite
000097FE 6000 0000                  		bra.w	Swing_ChkDel
00009802                            
00009802 4E75                       		rts
00009802 4E75                       		rts
00009804                            
00009804                            ; ---------------------------------------------------------------------------
00009804                            ; Subroutine to	change Sonic's position with a platform
00009804                            ; ---------------------------------------------------------------------------
00009804                            
00009804                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009804                            
00009804                            
00009804                            MvSonicOnPtfm:
00009804 43F8 D000                  		lea	(v_player).w,a1
00009808 3028 000C                  		move.w	obY(a0),d0
0000980C 9043                       		sub.w	d3,d0
0000980E 6000                       		bra.s	MvSonic2
00009810                            ; End of function MvSonicOnPtfm
00009810                            
00009810                            ; ---------------------------------------------------------------------------
00009810                            ; Subroutine to	change Sonic's position with a platform
00009810                            ; ---------------------------------------------------------------------------
00009810                            
00009810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009810                            
00009810                            
00009810                            MvSonicOnPtfm2:
00009810 43F8 D000                  		lea	(v_player).w,a1
00009814 3028 000C                  		move.w	obY(a0),d0
00009818 0440 0009                  		subi.w	#9,d0
0000981C                            
0000981C                            MvSonic2:
0000981C 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009820 6B00                       		bmi.s	locret_7B62
00009822 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00009828 6400                       		bhs.s	locret_7B62
0000982A 4A78 FE08                  		tst.w	(v_debuguse).w
0000982E 6600                       		bne.s	locret_7B62
00009830 7200                       		moveq	#0,d1
00009832 1229 0016                  		move.b	obHeight(a1),d1
00009836 9041                       		sub.w	d1,d0
00009838 3340 000C                  		move.w	d0,obY(a1)
0000983C 9468 0008                  		sub.w	obX(a0),d2
00009840 9569 0008                  		sub.w	d2,obX(a1)
00009844                            
00009844                            locret_7B62:
00009844 4E75                       		rts	
00009846                            ; End of function MvSonicOnPtfm2
00009846                            
00009846                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
00009846                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009846                            
00009846                            
00009846                            Swing_Move:
00009846 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
0000984A 323C 0080                  		move.w	#$80,d1
0000984E 0828 0000 0022             		btst	#0,obStatus(a0)
00009854 6700                       		beq.s	loc_7B78
00009856 4440                       		neg.w	d0
00009858 D041                       		add.w	d1,d0
0000985A                            
0000985A                            loc_7B78:
0000985A 6000                       		bra.s	Swing_Move2
0000985C                            ; End of function Swing_Move
0000985C                            
0000985C                            
0000985C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000985C                            
0000985C                            
0000985C                            Obj48_Move:
0000985C 4A28 003D                  		tst.b	$3D(a0)
00009860 6600                       		bne.s	loc_7B9C
00009862 3028 003E                  		move.w	$3E(a0),d0
00009866 5040                       		addq.w	#8,d0
00009868 3140 003E                  		move.w	d0,$3E(a0)
0000986C D168 0026                  		add.w	d0,obAngle(a0)
00009870 0C40 0200                  		cmpi.w	#$200,d0
00009874 6600                       		bne.s	loc_7BB6
00009876 117C 0001 003D             		move.b	#1,$3D(a0)
0000987C 6000                       		bra.s	loc_7BB6
0000987E                            ; ===========================================================================
0000987E                            
0000987E                            loc_7B9C:
0000987E 3028 003E                  		move.w	$3E(a0),d0
00009882 5140                       		subq.w	#8,d0
00009884 3140 003E                  		move.w	d0,$3E(a0)
00009888 D168 0026                  		add.w	d0,obAngle(a0)
0000988C 0C40 FE00                  		cmpi.w	#-$200,d0
00009890 6600                       		bne.s	loc_7BB6
00009892 117C 0000 003D             		move.b	#0,$3D(a0)
00009898                            
00009898                            loc_7BB6:
00009898 1028 0026                  		move.b	obAngle(a0),d0
0000989C                            ; End of function Obj48_Move
0000989C                            
0000989C                            
0000989C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000989C                            
0000989C                            
0000989C                            Swing_Move2:
0000989C 6100 A1E4                  		bsr.w	CalcSine
000098A0 3428 0038                  		move.w	$38(a0),d2
000098A4 3628 003A                  		move.w	$3A(a0),d3
000098A8 45E8 0028                  		lea	obSubtype(a0),a2
000098AC 7C00                       		moveq	#0,d6
000098AE 1C1A                       		move.b	(a2)+,d6
000098B0                            
000098B0                            loc_7BCE:
000098B0 7800                       		moveq	#0,d4
000098B2 181A                       		move.b	(a2)+,d4
000098B4 ED4C                       		lsl.w	#6,d4
000098B6 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
000098BC 2244                       		movea.l	d4,a1
000098BE 7800                       		moveq	#0,d4
000098C0 1829 003C                  		move.b	$3C(a1),d4
000098C4 2A04                       		move.l	d4,d5
000098C6 C9C0                       		muls.w	d0,d4
000098C8 E084                       		asr.l	#8,d4
000098CA CBC1                       		muls.w	d1,d5
000098CC E085                       		asr.l	#8,d5
000098CE D842                       		add.w	d2,d4
000098D0 DA43                       		add.w	d3,d5
000098D2 3344 000C                  		move.w	d4,obY(a1)
000098D6 3345 0008                  		move.w	d5,obX(a1)
000098DA 51CE FFD4                  		dbf	d6,loc_7BCE
000098DE 4E75                       		rts	
000098E0                            ; End of function Swing_Move2
000098E0                            
000098E0                            ; ===========================================================================
000098E0                            
000098E0                            Swing_ChkDel:
000098FE 4E75                       		rts	
00009900                            ; ===========================================================================
00009900                            
00009900                            Swing_DelAll:
00009900 7400                       		moveq	#0,d2
00009902 45E8 0028                  		lea	obSubtype(a0),a2
00009906 141A                       		move.b	(a2)+,d2
00009908                            
00009908                            Swing_DelLoop:
00009908 7000                       		moveq	#0,d0
0000990A 101A                       		move.b	(a2)+,d0
0000990C ED48                       		lsl.w	#6,d0
0000990E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009914 2240                       		movea.l	d0,a1
00009916 6100 0000                  		bsr.w	DeleteChild
0000991A 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
0000991E 4E75                       		rts	
00009920                            ; ===========================================================================
00009920                            
00009920                            Swing_Delete:	; Routine 6, 8
00009920 6100 0000                  		bsr.w	DeleteObject
00009924 4E75                       		rts	
00009926                            ; ===========================================================================
00009926                            
00009926                            Swing_Display:	; Routine $A
00009926 6000 0000                  		bra.w	DisplaySprite
00009926 6000 0000                  		bra.w	DisplaySprite
0000992A                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
0000992A                            ; ---------------------------------------------------------------------------
0000992A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000992A                            ; ---------------------------------------------------------------------------
0000992A                            Map_Swing_GHZ_internal:
0000992A 0000                       		dc.w @block-Map_Swing_GHZ_internal
0000992C 0000                       		dc.w @chain-Map_Swing_GHZ_internal
0000992E 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009930 02                         @block:		dc.b 2
00009931 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00009936 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000993B 01                         @chain:		dc.b 1
0000993C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009941 01                         @anchor:	dc.b 1
00009942 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00009948 00                         		even
00009948 00                         		even
00009948                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
00009948                            ; ---------------------------------------------------------------------------
00009948                            ; Sprite mappings - SLZ	swinging platforms
00009948                            ; ---------------------------------------------------------------------------
00009948                            Map_Swing_SLZ_internal:
00009948 0000                       		dc.w @block-Map_Swing_SLZ_internal
0000994A 0000                       		dc.w @chain-Map_Swing_SLZ_internal
0000994C 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
0000994E 08                         @block:		dc.b 8
0000994F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009954 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00009959 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000995E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009963 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00009968 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000996D 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009972 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00009977 01                         @chain:		dc.b 1
00009978 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000997D 01                         @anchor:	dc.b 1
0000997E F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00009984 00                         		even
00009984 00                         		even
00009984                            		include	"_incObj\17 Spiked Pole Helix.asm"
00009984                            ; ---------------------------------------------------------------------------
00009984                            ; Object 17 - helix of spikes on a pole	(GHZ)
00009984                            ; ---------------------------------------------------------------------------
00009984                            
00009984                            Helix:
00009984 7000                       		moveq	#0,d0
00009986 1028 0024                  		move.b	obRoutine(a0),d0
0000998A 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
0000998E 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
00009992                            ; ===========================================================================
00009992 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
00009994 0000                       		dc.w Hel_Action-Hel_Index
00009996 0000                       		dc.w Hel_Action-Hel_Index
00009998 0000                       		dc.w Hel_Delete-Hel_Index
0000999A 0000                       		dc.w Hel_Display-Hel_Index
0000999C                            
0000999C =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
0000999C                            
0000999C                            ;		$29-38 are used for child object addresses
0000999C                            ; ===========================================================================
0000999C                            
0000999C                            Hel_Main:	; Routine 0
0000999C 5428 0024                  		addq.b	#2,obRoutine(a0)
000099A0 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
000099A8 317C 4398 0002             		move.w	#$4398,obGfx(a0)
000099AE 117C 0007 0022             		move.b	#7,obStatus(a0)
000099B4 117C 0004 0001             		move.b	#4,obRender(a0)
000099BA 317C 0180 0018             		move.w	#$180,obPriority(a0)
000099C0 117C 0008 0014             		move.b	#8,obActWid(a0)
000099C6 3428 000C                  		move.w	obY(a0),d2
000099CA 3628 0008                  		move.w	obX(a0),d3
000099CE 1810                       		move.b	0(a0),d4
000099D0 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000099D4 7200                       		moveq	#0,d1
000099D6 1212                       		move.b	(a2),d1		; move helix length to d1
000099D8 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
000099DC 3001                       		move.w	d1,d0
000099DE E248                       		lsr.w	#1,d0
000099E0 E948                       		lsl.w	#4,d0
000099E2 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
000099E4 5501                       		subq.b	#2,d1
000099E6 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
000099E8 7C00                       		moveq	#0,d6
000099EA                            
000099EA                            Hel_Build:
000099EA 6100 0000                  		bsr.w	FindFreeObj
000099EE 6600                       		bne.s	Hel_Action
000099F0 5228 0028                  		addq.b	#1,obSubtype(a0)
000099F4 3A09                       		move.w	a1,d5
000099F6 0445 D000                  		subi.w	#$D000,d5
000099FA EC4D                       		lsr.w	#6,d5
000099FC 0245 007F                  		andi.w	#$7F,d5
00009A00 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
00009A02 137C 0008 0024             		move.b	#8,obRoutine(a1)
00009A08 1284                       		move.b	d4,0(a1)
00009A0A 3342 000C                  		move.w	d2,ObY(a1)
00009A0E 3343 0008                  		move.w	d3,obX(a1)
00009A12 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009A18 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009A1E 137C 0004 0001             		move.b	#4,obRender(a1)
00009A24 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009A2A 137C 0008 0014             		move.b	#8,obActWid(a1)
00009A30 1346 003E                  		move.b	d6,hel_frame(a1)
00009A34 5206                       		addq.b	#1,d6
00009A36 0206 0007                  		andi.b	#7,d6
00009A3A 0643 0010                  		addi.w	#$10,d3
00009A3E B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
00009A42 6600                       		bne.s	Hel_NotCentre	; if not, branch
00009A44                            
00009A44 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
00009A48 5206                       		addq.b	#1,d6
00009A4A 0206 0007                  		andi.b	#7,d6
00009A4E 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00009A52 5228 0028                  		addq.b	#1,obSubtype(a0)
00009A56                            
00009A56                            	Hel_NotCentre:
00009A56 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
00009A5A                            
00009A5A                            Hel_Action:	; Routine 2, 4
00009A5A 6100 0000                  		bsr.w	Hel_RotateSpikes
00009A5E 6100 0000                  		bsr.w	DisplaySprite
00009A62 6000 0000                  		bra.w	Hel_ChkDel
00009A66                            
00009A66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A66                            
00009A66                            
00009A66                            Hel_RotateSpikes:
00009A66 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
00009A6A 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009A70 D028 003E                  		add.b	hel_frame(a0),d0
00009A74 0200 0007                  		andi.b	#7,d0
00009A78 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
00009A7C 6600                       		bne.s	locret_7DA6
00009A7E 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
00009A84                            
00009A84                            locret_7DA6:
00009A84 4E75                       		rts	
00009A86                            ; End of function Hel_RotateSpikes
00009A86                            
00009A86                            ; ===========================================================================
00009A86                            
00009A86                            Hel_ChkDel:
00009AA4 4E75                       		rts	
00009AA6                            ; ===========================================================================
00009AA6                            
00009AA6                            Hel_DelAll:
00009AA6 7400                       		moveq	#0,d2
00009AA8 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009AAC 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009AAE 5502                       		subq.b	#2,d2
00009AB0 6500                       		bcs.s	Hel_Delete
00009AB2                            
00009AB2                            	Hel_DelLoop:
00009AB2 7000                       		moveq	#0,d0
00009AB4 101A                       		move.b	(a2)+,d0
00009AB6 ED48                       		lsl.w	#6,d0
00009AB8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009ABE 2240                       		movea.l	d0,a1		; get child address
00009AC0 6100 0000                  		bsr.w	DeleteChild	; delete object
00009AC4 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
00009AC8                            
00009AC8                            Hel_Delete:	; Routine 6
00009AC8 6100 0000                  		bsr.w	DeleteObject
00009ACC 4E75                       		rts	
00009ACE                            ; ===========================================================================
00009ACE                            
00009ACE                            Hel_Display:	; Routine 8
00009ACE 6100 FF96                  		bsr.w	Hel_RotateSpikes
00009AD2 6000 0000                  		bra.w	DisplaySprite
00009AD2 6000 0000                  		bra.w	DisplaySprite
00009AD6                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
00009AD6                            ; ---------------------------------------------------------------------------
00009AD6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00009AD6                            ; ---------------------------------------------------------------------------
00009AD6                            Map_Hel_internal:
00009AD6 0000                       		dc.w byte_7E08-Map_Hel_internal
00009AD8 0000                       		dc.w byte_7E0E-Map_Hel_internal
00009ADA 0000                       		dc.w byte_7E14-Map_Hel_internal
00009ADC 0000                       		dc.w byte_7E1A-Map_Hel_internal
00009ADE 0000                       		dc.w byte_7E20-Map_Hel_internal
00009AE0 0000                       		dc.w byte_7E26-Map_Hel_internal
00009AE2 0000                       		dc.w byte_7E2E-Map_Hel_internal
00009AE4 0000                       		dc.w byte_7E2C-Map_Hel_internal
00009AE6 01                         byte_7E08:	dc.b 1
00009AE7 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
00009AEC 01                         byte_7E0E:	dc.b 1
00009AED F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
00009AF2 01                         byte_7E14:	dc.b 1
00009AF3 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
00009AF8 01                         byte_7E1A:	dc.b 1
00009AF9 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
00009AFE 01                         byte_7E20:	dc.b 1
00009AFF 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
00009B04 01                         byte_7E26:	dc.b 1
00009B05 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
00009B0A 01                         byte_7E2C:	dc.b 1
00009B0B F4                         		dc.b $F4
00009B0C                            byte_7E2E:	; reads the 0 below	; not visible
00009B0C 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009B10                            		even
00009B10                            		even
00009B10                            		include	"_incObj\18 Platforms.asm"
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            
00009B10                            BasicPlatform:
00009B10 7000                       		moveq	#0,d0
00009B12 1028 0024                  		move.b	obRoutine(a0),d0
00009B16 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
00009B1A 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009B1E                            ; ===========================================================================
00009B1E 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009B20 0000                       		dc.w Plat_Solid-Plat_Index
00009B22 0000                       		dc.w Plat_Action2-Plat_Index
00009B24 0000                       		dc.w Plat_Delete-Plat_Index
00009B26 0000                       		dc.w Plat_Action-Plat_Index
00009B28                            ; ===========================================================================
00009B28                            
00009B28                            Plat_Main:	; Routine 0
00009B28 5428 0024                  		addq.b	#2,obRoutine(a0)
00009B2C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009B32 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009B3A 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009B40 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009B46 6600                       		bne.s	@notSYZ
00009B48                            
00009B48 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009B50 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009B56                            
00009B56                            	@notSYZ:
00009B56 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009B5C 6600                       		bne.s	@notSLZ
00009B5E 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009B66 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009B6C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009B72 117C 0003 0028             		move.b	#3,obSubtype(a0)
00009B78                            
00009B78                            	@notSLZ:
00009B78 117C 0004 0001             		move.b	#4,obRender(a0)
00009B7E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009B84 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009B8A 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009B90 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009B96 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009B9C 7200                       		moveq	#0,d1
00009B9E 1028 0028                  		move.b	obSubtype(a0),d0
00009BA2 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009BA6 6600                       		bne.s	@setframe	; if not, branch
00009BA8 5201                       		addq.b	#1,d1		; use frame #1
00009BAA 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009BB0                            
00009BB0                            	@setframe:
00009BB0 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
00009BB4                            
00009BB4                            Plat_Solid:	; Routine 2
00009BB4 4A28 0038                  		tst.b	$38(a0)
00009BB8 6700                       		beq.s	loc_7EE0
00009BBA 5928 0038                  		subq.b	#4,$38(a0)
00009BBE                            
00009BBE                            	loc_7EE0:
00009BBE 7200                       		moveq	#0,d1
00009BC0 1228 0014                  		move.b	obActWid(a0),d1
00009BC4 6100 F56C                  		bsr.w	PlatformObject
00009BC8                            
00009BC8                            Plat_Action:	; Routine 8
00009BC8 6100 0000                  		bsr.w	Plat_Move
00009BCC 6100 0000                  		bsr.w	Plat_Nudge
00009BD0 6100 0000                  		bsr.w	DisplaySprite
00009BD4 6000 0000                  		bra.w	Plat_ChkDel
00009BD8                            ; ===========================================================================
00009BD8                            
00009BD8                            Plat_Action2:	; Routine 4
00009BD8 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009BDE 6700                       		beq.s	loc_7F06
00009BE0 5828 0038                  		addq.b	#4,$38(a0)
00009BE4                            
00009BE4                            	loc_7F06:
00009BE4 7200                       		moveq	#0,d1
00009BE6 1228 0014                  		move.b	obActWid(a0),d1
00009BEA 6100 F6BA                  		bsr.w	ExitPlatform
00009BEE 3F28 0008                  		move.w	obX(a0),-(sp)
00009BF2 6100 0000                  		bsr.w	Plat_Move
00009BF6 6100 0000                  		bsr.w	Plat_Nudge
00009BFA 341F                       		move.w	(sp)+,d2
00009BFC 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009C00 6100 0000                  		bsr.w	DisplaySprite
00009C04 6000 0000                  		bra.w	Plat_ChkDel
00009C08                            
00009C08 4E75                       		rts
00009C0A                            
00009C0A                            ; ---------------------------------------------------------------------------
00009C0A                            ; Subroutine to	move platform slightly when you	stand on it
00009C0A                            ; ---------------------------------------------------------------------------
00009C0A                            
00009C0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C0A                            
00009C0A                            
00009C0A                            Plat_Nudge:
00009C0A 1028 0038                  		move.b	$38(a0),d0
00009C0E 6100 9E72                  		bsr.w	CalcSine
00009C12 323C 0400                  		move.w	#$400,d1
00009C16 C1C1                       		muls.w	d1,d0
00009C18 4840                       		swap	d0
00009C1A D068 002C                  		add.w	$2C(a0),d0
00009C1E 3140 000C                  		move.w	d0,obY(a0)
00009C22 4E75                       		rts	
00009C24                            ; End of function Plat_Nudge
00009C24                            
00009C24                            ; ---------------------------------------------------------------------------
00009C24                            ; Subroutine to	move platforms
00009C24                            ; ---------------------------------------------------------------------------
00009C24                            
00009C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C24                            
00009C24                            
00009C24                            Plat_Move:
00009C24 7000                       		moveq	#0,d0
00009C26 1028 0028                  		move.b	obSubtype(a0),d0
00009C2A 0240 000F                  		andi.w	#$F,d0
00009C2E D040                       		add.w	d0,d0
00009C30 323B 0000                  		move.w	@index(pc,d0.w),d1
00009C34 4EFB 1000                  		jmp	@index(pc,d1.w)
00009C38                            ; End of function Plat_Move
00009C38                            
00009C38                            ; ===========================================================================
00009C38 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009C3C 0000 0000                  		dc.w @type02-@index, @type03-@index
00009C40 0000 0000                  		dc.w @type04-@index, @type05-@index
00009C44 0000 0000                  		dc.w @type06-@index, @type07-@index
00009C48 0000 0000                  		dc.w @type08-@index, @type00-@index
00009C4C 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009C50 0000                       		dc.w @type0C-@index
00009C52                            ; ===========================================================================
00009C52                            
00009C52                            @type00:
00009C52 4E75                       		rts			; platform 00 doesn't move
00009C54                            ; ===========================================================================
00009C54                            
00009C54                            @type05:
00009C54 3028 0032                  		move.w	$32(a0),d0
00009C58 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009C5C 4401                       		neg.b	d1		; reverse platform-motion
00009C5E 0601 0040                  		addi.b	#$40,d1
00009C62 6000                       		bra.s	@type01_move
00009C64                            ; ===========================================================================
00009C64                            
00009C64                            @type01:
00009C64 3028 0032                  		move.w	$32(a0),d0
00009C68 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009C6C 0401 0040                  		subi.b	#$40,d1
00009C70                            
00009C70                            	@type01_move:
00009C70 4881                       		ext.w	d1
00009C72 D041                       		add.w	d1,d0
00009C74 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00009C78 6000 0000                  		bra.w	@chgmotion
00009C7C                            ; ===========================================================================
00009C7C                            
00009C7C                            @type0C:
00009C7C 3028 0034                  		move.w	$34(a0),d0
00009C80 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009C84 4401                       		neg.b	d1		; reverse platform-motion
00009C86 0601 0030                  		addi.b	#$30,d1
00009C8A 6000                       		bra.s	@type02_move
00009C8C                            ; ===========================================================================
00009C8C                            
00009C8C                            @type0B:
00009C8C 3028 0034                  		move.w	$34(a0),d0
00009C90 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009C94 0401 0030                  		subi.b	#$30,d1
00009C98 6000                       		bra.s	@type02_move
00009C9A                            ; ===========================================================================
00009C9A                            
00009C9A                            @type06:
00009C9A 3028 0034                  		move.w	$34(a0),d0
00009C9E 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009CA2 4401                       		neg.b	d1		; reverse platform-motion
00009CA4 0601 0040                  		addi.b	#$40,d1
00009CA8 6000                       		bra.s	@type02_move
00009CAA                            ; ===========================================================================
00009CAA                            
00009CAA                            @type02:
00009CAA 3028 0034                  		move.w	$34(a0),d0
00009CAE 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009CB2 0401 0040                  		subi.b	#$40,d1
00009CB6                            
00009CB6                            	@type02_move:
00009CB6 4881                       		ext.w	d1
00009CB8 D041                       		add.w	d1,d0
00009CBA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009CBE 6000 0000                  		bra.w	@chgmotion
00009CC2                            ; ===========================================================================
00009CC2                            
00009CC2                            @type03:
00009CC2 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009CC6 6600                       		bne.s	@type03_wait	; if yes, branch
00009CC8 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009CCE 6700                       		beq.s	@type03_nomove	; if not, branch
00009CD0 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009CD6                            
00009CD6                            	@type03_nomove:
00009CD6 4E75                       		rts	
00009CD8                            
00009CD8                            	@type03_wait:
00009CD8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009CDC 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009CDE 317C 0020 003A             		move.w	#32,$3A(a0)
00009CE4 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
00009CE8 4E75                       		rts	
00009CEA                            ; ===========================================================================
00009CEA                            
00009CEA                            @type04:
00009CEA 4A68 003A                  		tst.w	$3A(a0)
00009CEE 6700                       		beq.s	@loc_8048
00009CF0 5368 003A                  		subq.w	#1,$3A(a0)
00009CF4 6600                       		bne.s	@loc_8048
00009CF6 0828 0003 0022             		btst	#3,obStatus(a0)
00009CFC 6700                       		beq.s	@loc_8042
00009CFE 08E9 0001 0022             		bset	#1,obStatus(a1)
00009D04 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009D0A 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009D10 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009D16 4228 0025                  		clr.b	$25(a0)
00009D1A 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009D20                            
00009D20                            	@loc_8042:
00009D20 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009D26                            
00009D26                            	@loc_8048:
00009D26 2628 002C                  		move.l	$2C(a0),d3
00009D2A 3028 0012                  		move.w	obVelY(a0),d0
00009D2E 48C0                       		ext.l	d0
00009D30 E180                       		asl.l	#8,d0
00009D32 D680                       		add.l	d0,d3
00009D34 2143 002C                  		move.l	d3,$2C(a0)
00009D38 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009D3E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009D42 0640 00E0                  		addi.w	#$E0,d0
00009D46 B068 002C                  		cmp.w	$2C(a0),d0
00009D4A 6400                       		bcc.s	@locret_8074
00009D4C 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009D52                            
00009D52                            	@locret_8074:
00009D52 4E75                       		rts	
00009D54                            ; ===========================================================================
00009D54                            
00009D54                            @type07:
00009D54 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009D58 6600                       		bne.s	@type07_wait	; if yes, branch
00009D5A 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009D5E 7000                       		moveq	#0,d0
00009D60 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009D64 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009D66 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009D6A 6700                       		beq.s	@type07_nomove	; if not, branch
00009D6C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009D72                            
00009D72                            	@type07_nomove:
00009D72 4E75                       		rts	
00009D74                            
00009D74                            	@type07_wait:
00009D74 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009D78 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009D7A 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009D7E 4E75                       		rts	
00009D80                            ; ===========================================================================
00009D80                            
00009D80                            @type08:
00009D80 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009D84 3028 0034                  		move.w	$34(a0),d0
00009D88 0440 0200                  		subi.w	#$200,d0
00009D8C B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009D90 6600                       		bne.s	@type08_nostop	; if not, branch
00009D92 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009D96                            
00009D96                            	@type08_nostop:
00009D96 4E75                       		rts	
00009D98                            ; ===========================================================================
00009D98                            
00009D98                            @type0A:
00009D98 3028 0034                  		move.w	$34(a0),d0
00009D9C 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009DA0 0401 0040                  		subi.b	#$40,d1
00009DA4 4881                       		ext.w	d1
00009DA6 E241                       		asr.w	#1,d1
00009DA8 D041                       		add.w	d1,d0
00009DAA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009DAE                            
00009DAE                            @chgmotion:
00009DAE 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009DB4 4E75                       		rts	
00009DB6                            ; ===========================================================================
00009DB6                            
00009DB6                            Plat_ChkDel:
00009DD2 4E75                       		rts	
00009DD4                            ; ===========================================================================
00009DD4                            
00009DD4                            Plat_Delete:	; Routine 6
00009DD4 6000 0000                  		bra.w	DeleteObject
00009DD4 6000 0000                  		bra.w	DeleteObject
00009DD8                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009DD8                            ; ---------------------------------------------------------------------------
00009DD8                            ; Sprite mappings - unused
00009DD8                            ; ---------------------------------------------------------------------------
00009DD8                            Map_Plat_Unused_internal:
00009DD8 0000                       		dc.w @small-Map_Plat_Unused_internal
00009DDA 0000                       		dc.w @large-Map_Plat_Unused_internal
00009DDC 02                         @small:		dc.b 2
00009DDD F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009DE2 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009DE7 0A                         @large:		dc.b $A
00009DE8 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009DED 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009DF2 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009DF7 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009DFC 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009E01 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009E06 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009E0B 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009E10 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009E15 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009E1A                            		even
00009E1A                            		even
00009E1A                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009E1A                            ; ---------------------------------------------------------------------------
00009E1A                            ; Sprite mappings - GHZ	platforms
00009E1A                            ; ---------------------------------------------------------------------------
00009E1A                            Map_Plat_GHZ_internal:
00009E1A 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009E1C 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009E1E 04                         @small:		dc.b 4
00009E1F F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009E24 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009E29 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009E2E F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009E33 0A                         @large:		dc.b $A
00009E34 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009E39 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009E3E 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009E43 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009E48 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009E4D F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009E52 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009E57 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009E5C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009E61 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009E66                            		even
00009E66                            		even
00009E66                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009E66                            ; ---------------------------------------------------------------------------
00009E66                            ; Sprite mappings - SYZ	platforms
00009E66                            ; ---------------------------------------------------------------------------
00009E66                            Map_Plat_SYZ_internal:
00009E66 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009E68 03                         @platform:	dc.b 3
00009E69 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009E6E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009E73 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009E78                            		even
00009E78                            		even
00009E78                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009E78                            ; ---------------------------------------------------------------------------
00009E78                            ; Sprite mappings - SLZ	platforms
00009E78                            ; ---------------------------------------------------------------------------
00009E78                            Map_Plat_SLZ_internal:
00009E78 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009E7A 02                         @platform:	dc.b 2
00009E7B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009E80 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009E86 00                         		even
00009E86 00                         		even
00009E86                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009E86                            ; ---------------------------------------------------------------------------
00009E86                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009E86                            ; ---------------------------------------------------------------------------
00009E86                            Map_GBall_internal:
00009E86 0000                       		dc.w @shiny-Map_GBall_internal
00009E88 0000                       		dc.w @check1-Map_GBall_internal
00009E8A 0000                       		dc.w @check2-Map_GBall_internal
00009E8C 0000                       		dc.w @check3-Map_GBall_internal
00009E8E 06                         @shiny:		dc.b 6
00009E8F F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009E94 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009E99 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009E9E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009EA3 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009EA8 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009EAD 04                         @check1:	dc.b 4
00009EAE E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009EB3 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009EB8 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009EBD 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009EC2 04                         @check2:	dc.b 4
00009EC3 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009EC8 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009ECD 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009ED2 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009ED7 04                         @check3:	dc.b 4
00009ED8 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009EDD E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009EE2 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009EE7 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009EEC                            		even
00009EEC                            		even
00009EEC                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009EEC                            ; ---------------------------------------------------------------------------
00009EEC                            ; Object 1A - GHZ collapsing ledge
00009EEC                            ; ---------------------------------------------------------------------------
00009EEC                            
00009EEC                            CollapseLedge:
00009EEC 7000                       		moveq	#0,d0
00009EEE 1028 0024                  		move.b	obRoutine(a0),d0
00009EF2 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009EF6 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009EFA                            ; ===========================================================================
00009EFA 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009EFE 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009F02 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009F06                            
00009F06 =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009F06 =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009F06                            ; ===========================================================================
00009F06                            
00009F06                            Ledge_Main:	; Routine 0
00009F06 5428 0024                  		addq.b	#2,obRoutine(a0)
00009F0A 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009F12 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009F18 0028 0004 0001             		ori.b	#4,obRender(a0)
00009F1E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009F24 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009F2A 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009F30 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009F36 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009F3C 08E8 0004 0001             		bset	#4,obRender(a0)
00009F42                            
00009F42                            Ledge_Touch:	; Routine 2
00009F42 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009F46 6700                       		beq.s	@slope		; if not, branch
00009F48 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009F4C 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009F50 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009F54                            
00009F54                            	@slope:
00009F54 323C 0030                  		move.w	#$30,d1
00009F58 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009F5E 6100 F2A6                  		bsr.w	SlopeObject
00009F62 6000 0000                  		bra.w	RememberState
00009F66                            ; ===========================================================================
00009F66                            
00009F66                            Ledge_Collapse:	; Routine 4
00009F66 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009F6A 6700 0000                  		beq.w	loc_847A
00009F6E 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009F74 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009F78                            
00009F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F78                            
00009F78                            
00009F78                            Ledge_WalkOff:	; Routine $A
00009F78 323C 0030                  		move.w	#$30,d1
00009F7C 6100 F328                  		bsr.w	ExitPlatform
00009F80 323C 0030                  		move.w	#$30,d1
00009F84 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009F8A 3428 0008                  		move.w	obX(a0),d2
00009F8E 6100 0000                  		bsr.w	SlopeObject2
00009F92 6000 0000                  		bra.w	RememberState
00009F96                            ; End of function Ledge_WalkOff
00009F96                            
00009F96                            ; ===========================================================================
00009F96                            
00009F96                            Ledge_Display:	; Routine 6
00009F96 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009F9A 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009F9C 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009FA0 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009FA4 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009FA8 6000 0000                  		bra.w	DisplaySprite
00009FAC                            ; ===========================================================================
00009FAC                            
00009FAC                            loc_82D0:
00009FAC 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009FB0 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009FB4 43F8 D000                  		lea	(v_player).w,a1
00009FB8 0829 0003 0022             		btst	#3,obStatus(a1)
00009FBE 6700                       		beq.s	loc_82FC
00009FC0 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009FC4 6600                       		bne.s	locret_8308
00009FC6 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009FCC 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009FD2 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009FD8                            
00009FD8                            loc_82FC:
00009FD8 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009FDE 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009FE4                            
00009FE4                            locret_8308:
00009FE4 4E75                       		rts	
00009FE6                            ; ===========================================================================
00009FE6                            
00009FE6                            Ledge_TimeZero:
00009FE6 6100 0000                  		bsr.w	ObjectFall
00009FEA 6100 0000                  		bsr.w	DisplaySprite
00009FEE 4A28 0001                  		tst.b	obRender(a0)
00009FF2 6A00                       		bpl.s	Ledge_Delete
00009FF4 4E75                       		rts	
00009FF6                            ; ===========================================================================
00009FF6                            
00009FF6                            Ledge_Delete:	; Routine 8
00009FF6 6100 0000                  		bsr.w	DeleteObject
00009FFA 4E75                       		rts	
00009FFA 4E75                       		rts	
00009FFC                            		include	"_incObj\53 Collapsing Floors.asm"
00009FFC                            ; ---------------------------------------------------------------------------
00009FFC                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009FFC                            ; ---------------------------------------------------------------------------
00009FFC                            
00009FFC                            CollapseFloor:
00009FFC 7000                       		moveq	#0,d0
00009FFE 1028 0024                  		move.b	obRoutine(a0),d0
0000A002 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
0000A006 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
0000A00A                            ; ===========================================================================
0000A00A 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
0000A00E 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
0000A012 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
0000A016                            
0000A016 =00000038                  cflo_timedelay:		equ $38
0000A016 =0000003A                  cflo_collapse_flag:	equ $3A
0000A016                            ; ===========================================================================
0000A016                            
0000A016                            CFlo_Main:	; Routine 0
0000A016 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A01A 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
0000A022 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
0000A028 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000A02E 6600                       		bne.s	@notSLZ
0000A030                            
0000A030 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
0000A036 5428 001A                  		addq.b	#2,obFrame(a0)
0000A03A                            
0000A03A                            	@notSLZ:
0000A03A 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0000A040 6600                       		bne.s	@notSBZ
0000A042 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
0000A048                            
0000A048                            	@notSBZ:
0000A048 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A04E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A054 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
0000A05A 117C 0044 0014             		move.b	#$44,obActWid(a0)
0000A060                            
0000A060                            CFlo_Touch:	; Routine 2
0000A060 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
0000A064 6700                       		beq.s	@solid		; if not, branch
0000A066 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
0000A06A 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
0000A06E 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
0000A072                            
0000A072                            	@solid:
0000A072 323C 0020                  		move.w	#$20,d1
0000A076 6100 F0BA                  		bsr.w	PlatformObject
0000A07A 4A28 0028                  		tst.b	obSubtype(a0)
0000A07E 6A00                       		bpl.s	@remstate
0000A080 0829 0003 0022             		btst	#3,obStatus(a1)
0000A086 6700                       		beq.s	@remstate
0000A088 08A8 0000 0001             		bclr	#0,obRender(a0)
0000A08E 3029 0008                  		move.w	obX(a1),d0
0000A092 9068 0008                  		sub.w	obX(a0),d0
0000A096 6400                       		bcc.s	@remstate
0000A098 08E8 0000 0001             		bset	#0,obRender(a0)
0000A09E                            
0000A09E                            	@remstate:
0000A09E 6000 0000                  		bra.w	RememberState
0000A0A2                            ; ===========================================================================
0000A0A2                            
0000A0A2                            CFlo_Collapse:	; Routine 4
0000A0A2 4A28 0038                  		tst.b	cflo_timedelay(a0)
0000A0A6 6700 0000                  		beq.w	loc_8458
0000A0AA 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
0000A0B0 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A0B4                            
0000A0B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0B4                            
0000A0B4                            
0000A0B4                            CFlo_WalkOff:	; Routine $A
0000A0B4 323C 0020                  		move.w	#$20,d1
0000A0B8 6100 F1EC                  		bsr.w	ExitPlatform
0000A0BC 3428 0008                  		move.w	obX(a0),d2
0000A0C0 6100 F74E                  		bsr.w	MvSonicOnPtfm2
0000A0C4 6000 0000                  		bra.w	RememberState
0000A0C8                            ; End of function CFlo_WalkOff
0000A0C8                            
0000A0C8                            ; ===========================================================================
0000A0C8                            
0000A0C8                            CFlo_Display:	; Routine 6
0000A0C8 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
0000A0CC 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
0000A0CE 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
0000A0D2 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000A0D6 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
0000A0DA 6000 0000                  		bra.w	DisplaySprite
0000A0DE                            ; ===========================================================================
0000A0DE                            
0000A0DE                            loc_8402:
0000A0DE 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A0E2 6100 FFD0                  		bsr.w	CFlo_WalkOff
0000A0E6 43F8 D000                  		lea	(v_player).w,a1
0000A0EA 0829 0003 0022             		btst	#3,obStatus(a1)
0000A0F0 6700                       		beq.s	loc_842E
0000A0F2 4A28 0038                  		tst.b	cflo_timedelay(a0)
0000A0F6 6600                       		bne.s	locret_843A
0000A0F8 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000A0FE 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A104 137C 0001 001D             		move.b	#1,obNextAni(a1)
0000A10A                            
0000A10A                            loc_842E:
0000A10A 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A110 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
0000A116                            
0000A116                            locret_843A:
0000A116 4E75                       		rts	
0000A118                            ; ===========================================================================
0000A118                            
0000A118                            CFlo_TimeZero:
0000A118 6100 0000                  		bsr.w	ObjectFall
0000A11C 6100 0000                  		bsr.w	DisplaySprite
0000A120 4A28 0001                  		tst.b	obRender(a0)
0000A124 6A00                       		bpl.s	CFlo_Delete
0000A126 4E75                       		rts	
0000A128                            ; ===========================================================================
0000A128                            
0000A128                            CFlo_Delete:	; Routine 8
0000A128 6100 0000                  		bsr.w	DeleteObject
0000A12C 4E75                       		rts	
0000A12E                            ; ===========================================================================
0000A12E                            
0000A12E                            CFlo_Fragment:
0000A12E 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A134                            
0000A134                            loc_8458:
0000A134 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
0000A13A 0828 0000 0028             		btst	#0,obSubtype(a0)
0000A140 6700                       		beq.s	loc_846C
0000A142 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
0000A148                            
0000A148                            loc_846C:
0000A148 7207                       		moveq	#7,d1
0000A14A 5228 001A                  		addq.b	#1,obFrame(a0)
0000A14E 6000                       		bra.s	loc_8486
0000A14E 6000                       		bra.s	loc_8486
0000A150                            
0000A150                            ; ===========================================================================
0000A150                            
0000A150                            Ledge_Fragment:
0000A150 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
0000A156                            
0000A156                            loc_847A:
0000A156 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
0000A15C 7218                       		moveq	#$18,d1
0000A15E 5428 001A                  		addq.b	#2,obFrame(a0)
0000A162                            
0000A162                            loc_8486:
0000A162 7000                       		moveq	#0,d0
0000A164 1028 001A                  		move.b	obFrame(a0),d0
0000A168 D040                       		add.w	d0,d0
0000A16A 2668 0004                  		movea.l	obMap(a0),a3
0000A16E D6F3 0000                  		adda.w	(a3,d0.w),a3
0000A172 524B                       		addq.w	#1,a3
0000A174 08E8 0005 0001             		bset	#5,obRender(a0)
0000A17A 1810                       		move.b	0(a0),d4
0000A17C 1A28 0001                  		move.b	obRender(a0),d5
0000A180 2248                       		movea.l	a0,a1
0000A182 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A188 1284                       		move.b	d4,0(a1)
0000A18A 234B 0004                  		move.l	a3,obMap(a1)
0000A18E 1345 0001                  		move.b	d5,obRender(a1)
0000A192 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A198 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A19E 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A1A4 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A1AA 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A1B0 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A1B4 5341                       		subq.w	#1,d1
0000A1B6 43F8 D800                  		lea		(v_lvlobjspace).w,a1
0000A1BA 303C 005F                  		move.w	#$5F,d0
0000A1BE                            ; ===========================================================================
0000A1BE                            
0000A1BE                            loc_84AA:
0000A1BE 4A11                       		tst.b	(a1)
0000A1C0 6700                       		beq.s	@cont		
0000A1C2 43E9 0040                  		lea		$40(a1),a1
0000A1C6 51C8 FFF6                  		dbf		d0,loc_84AA	
0000A1CA 6600                       		bne.s	loc_84F2	
0000A1CC                            	@cont:
0000A1CC 5A4B                       		addq.w	#5,a3
0000A1CE                            
0000A1CE                            loc_84B2:
0000A1CE 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A1D4 1284                       		move.b	d4,0(a1)
0000A1D6 234B 0004                  		move.l	a3,obMap(a1)
0000A1DA 1345 0001                  		move.b	d5,obRender(a1)
0000A1DE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A1E4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A1EA 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A1F0 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A1F6 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A1FC 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A200 6100 0000                  		bsr.w	DisplaySprite1
0000A204                            
0000A204                            loc_84EE:
0000A204 51C9 FFB8                  		dbf	d1,loc_84AA
0000A208                            
0000A208                            loc_84F2:
0000A208 6100 0000                  		bsr.w	DisplaySprite
0000A216                            ; ===========================================================================
0000A216                            ; ---------------------------------------------------------------------------
0000A216                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000A216                            ; ---------------------------------------------------------------------------
0000A216 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000A226 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000A230 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000A238 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000A240                            
0000A240                            ; ---------------------------------------------------------------------------
0000A240                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000A240                            ; ---------------------------------------------------------------------------
0000A240                            
0000A240                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A240                            
0000A240                            
0000A240                            SlopeObject2:
0000A240 43F8 D000                  		lea	(v_player).w,a1
0000A244 0829 0003 0022             		btst	#3,obStatus(a1)
0000A24A 6700                       		beq.s	locret_856E
0000A24C 3029 0008                  		move.w	obX(a1),d0
0000A250 9068 0008                  		sub.w	obX(a0),d0
0000A254 D041                       		add.w	d1,d0
0000A256 E248                       		lsr.w	#1,d0
0000A258 0828 0000 0001             		btst	#0,obRender(a0)
0000A25E 6700                       		beq.s	loc_854E
0000A260 4640                       		not.w	d0
0000A262 D041                       		add.w	d1,d0
0000A264                            
0000A264                            loc_854E:
0000A264 7200                       		moveq	#0,d1
0000A266 1232 0000                  		move.b	(a2,d0.w),d1
0000A26A 3028 000C                  		move.w	obY(a0),d0
0000A26E 9041                       		sub.w	d1,d0
0000A270 7200                       		moveq	#0,d1
0000A272 1229 0016                  		move.b	obHeight(a1),d1
0000A276 9041                       		sub.w	d1,d0
0000A278 3340 000C                  		move.w	d0,obY(a1)
0000A27C 9468 0008                  		sub.w	obX(a0),d2
0000A280 9569 0008                  		sub.w	d2,obX(a1)
0000A284                            
0000A284                            locret_856E:
0000A284 4E75                       		rts	
0000A286                            ; End of function SlopeObject2
0000A286                            
0000A286                            ; ===========================================================================
0000A286                            ; ---------------------------------------------------------------------------
0000A286                            ; Collision data for GHZ collapsing ledge
0000A286                            ; ---------------------------------------------------------------------------
0000A286                            Ledge_SlopeData:
0000A286                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
0000A2B6                            		even
0000A2B6                            
0000A2B6                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
0000A2B6                            ; ---------------------------------------------------------------------------
0000A2B6                            ; Sprite mappings - GHZ	collapsing ledge
0000A2B6                            ; ---------------------------------------------------------------------------
0000A2B6                            Map_Ledge_internal:
0000A2B6 0000                       		dc.w @left-Map_Ledge_internal
0000A2B8 0000                       		dc.w @right-Map_Ledge_internal
0000A2BA 0000                       		dc.w @leftsmash-Map_Ledge_internal
0000A2BC 0000                       		dc.w @rightsmash-Map_Ledge_internal
0000A2BE 10                         @left:		dc.b $10
0000A2BF C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000A2C4 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A2C9 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A2CE E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A2D3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A2D8 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A2DD F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A2E2 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A2E7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A2EC F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A2F1 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A2F6 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A2FB 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A300 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A305 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A30A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A30F 10                         @right:		dc.b $10
0000A310 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000A315 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A31A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A31F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A324 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A329 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A32E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A333 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A338 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A33D F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A342 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A347 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A34C 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A351 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A356 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A35B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A360 19                         @leftsmash:	dc.b $19
0000A361 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A366 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A36B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A370 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A375 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A37A E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A37F E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A384 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A389 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A38E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A393 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A398 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A39D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A3A2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A3A7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A3AC F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A3B1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A3B6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A3BB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A3C0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A3C5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A3CA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A3CF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A3D4 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A3D9 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A3DE 19                         @rightsmash:	dc.b $19
0000A3DF C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A3E4 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A3E9 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A3EE D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A3F3 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A3F8 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A3FD E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A402 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A407 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A40C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A411 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A416 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A41B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A420 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A425 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A42A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A42F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A434 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A439 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A43E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A443 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A448 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A44D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A452 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A457 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A45C                            		even
0000A45C                            		even
0000A45C                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
0000A45C                            ; --------------------------------------------------------------------------------
0000A45C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A45C                            ; --------------------------------------------------------------------------------
0000A45C                            
0000A45C                            SME_WNa9T:	
0000A45C 0000 0000                  		dc.w SME_WNa9T_8-SME_WNa9T, SME_WNa9T_31-SME_WNa9T	
0000A460 0000 0000                  		dc.w SME_WNa9T_5A-SME_WNa9T, SME_WNa9T_6F-SME_WNa9T	
0000A464 08                         SME_WNa9T_8:	dc.b 8	
0000A465 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000A46A 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
0000A46F F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
0000A474 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
0000A479 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000A47E 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
0000A483 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
0000A488 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
0000A48D 08                         SME_WNa9T_31:	dc.b 8	
0000A48E F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000A493 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
0000A498 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
0000A49D 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
0000A4A2 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000A4A7 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
0000A4AC F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
0000A4B1 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
0000A4B6 04                         SME_WNa9T_5A:	dc.b 4	
0000A4B7 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0000A4BC 080D 0008 E0               		dc.b 8, $D, 0, 8, $E0	
0000A4C1 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
0000A4C6 080D 0008 00               		dc.b 8, $D, 0, 8, 0	
0000A4CB 08                         SME_WNa9T_6F:	dc.b 8	
0000A4CC F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000A4D1 F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
0000A4D6 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000A4DB F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
0000A4E0 0805 0008 E0               		dc.b 8, 5, 0, 8, $E0	
0000A4E5 0805 000C F0               		dc.b 8, 5, 0, $C, $F0	
0000A4EA 0805 0008 00               		dc.b 8, 5, 0, 8, 0	
0000A4EF 0805 000C 10               		dc.b 8, 5, 0, $C, $10	
0000A4F4                            		even
0000A4F4                            		even
0000A4F4                            
0000A4F4                            		include	"_incObj\1C Scenery.asm"
0000A4F4                            ; ---------------------------------------------------------------------------
0000A4F4                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A4F4                            ; ---------------------------------------------------------------------------
0000A4F4                            
0000A4F4                            Scenery:
0000A4F4 7000                       		moveq	#0,d0
0000A4F6 1028 0024                  		move.b	obRoutine(a0),d0
0000A4FA 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A4FE 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A502                            ; ===========================================================================
0000A502 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A504 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A506                            ; ===========================================================================
0000A506                            
0000A506                            Scen_Main:	; Routine 0
0000A506 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A50A 7000                       		moveq	#0,d0
0000A50C 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A510 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A514 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A518 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A51C 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A520 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A526 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A52A 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A52E 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A532 3028 0018                  		move.w obPriority(a0),d0 
0000A536 E248                       		lsr.w #1,d0 
0000A538 0240 0380                  		andi.w #$380,d0 
0000A53C 3140 0018                  		move.w d0,obPriority(a0)		
0000A540 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A544                            
0000A544                            Scen_ChkDel:	; Routine 2
0000A562 6000 0000                  		bra.w	DisplaySprite
0000A566                            ; ===========================================================================
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            ; Variables for	object $1C are stored in an array
0000A566                            ; ---------------------------------------------------------------------------
0000A566 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A56A 44D8                       		dc.w $44D8		; VRAM setting
0000A56C 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A570 0000 0000                  		dc.l Map_Scen
0000A574 44D8                       		dc.w $44D8
0000A576 0008 0200                  		dc.b 0,	8, 2, 0
0000A57A 0000 0000                  		dc.l Map_Scen
0000A57E 44D8                       		dc.w $44D8
0000A580 0008 0200                  		dc.b 0,	8, 2, 0
0000A584 0000 961A                  		dc.l Map_Bri
0000A588 438E                       		dc.w $438E
0000A58A 0110 0100                  		dc.b 1,	$10, 1,	0
0000A58E                            		even
0000A58E                            		even
0000A58E                            Map_Scen:	include	"_maps\Scenery.asm"
0000A58E                            ; ---------------------------------------------------------------------------
0000A58E                            ; Sprite mappings - SLZ	lava thrower
0000A58E                            ; ---------------------------------------------------------------------------
0000A58E                            Map_Scen_internal:
0000A58E 0000                       		dc.w byte_8858-Map_Scen_internal
0000A590 01                         byte_8858:	dc.b 1
0000A591 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A596                            		even
0000A596                            		even
0000A596                            
0000A596                            		include	"_incObj\1D Unused Switch.asm"
0000A596                            ; ---------------------------------------------------------------------------
0000A596                            ; Object 1D - switch that activates when Sonic touches it
0000A596                            ; (this	is not used anywhere in	the game)
0000A596                            ; ---------------------------------------------------------------------------
0000A596                            
0000A596                            MagicSwitch:
0000A596 7000                       		moveq	#0,d0
0000A598 1028 0024                  		move.b	obRoutine(a0),d0
0000A59C 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A5A0 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A5A4                            ; ===========================================================================
0000A5A4 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A5A6 0000                       		dc.w Swi_Action-Swi_Index
0000A5A8 0000                       		dc.w Swi_Delete-Swi_Index
0000A5AA                            
0000A5AA =00000030                  swi_origY:	equ $30		; original y-axis position
0000A5AA                            ; ===========================================================================
0000A5AA                            
0000A5AA                            Swi_Main:	; Routine 0
0000A5AA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A5AE 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A5B6 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A5BC 117C 0004 0001             		move.b	#4,obRender(a0)
0000A5C2 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A5C8 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A5CE 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A5D4                            
0000A5D4                            Swi_Action:	; Routine 2
0000A5D4 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A5DA 323C 0010                  		move.w	#$10,d1
0000A5DE 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A5E2 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A5E4                            
0000A5E4 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A5E8 7001                       		moveq	#1,d0
0000A5EA 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A5EE                            
0000A5EE                            Swi_ChkDel:
0000A5EE 6100 0000                  		bsr.w	DisplaySprite
0000A610 4E75                       		rts	
0000A612                            ; ===========================================================================
0000A612                            
0000A612                            Swi_Delete:	; Routine 4
0000A612 6100 0000                  		bsr.w	DeleteObject
0000A616 4E75                       		rts	
0000A618                            
0000A618                            ; ---------------------------------------------------------------------------
0000A618                            ; Subroutine to	check if Sonic touches the object
0000A618                            ; ---------------------------------------------------------------------------
0000A618                            
0000A618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A618                            
0000A618                            
0000A618                            Swi_ChkTouch:
0000A618 43F8 D000                  		lea	(v_player).w,a1
0000A61C 3029 0008                  		move.w	obX(a1),d0
0000A620 9068 0008                  		sub.w	obX(a0),d0
0000A624 D041                       		add.w	d1,d0
0000A626 6B00                       		bmi.s	Swi_NoTouch
0000A628 D241                       		add.w	d1,d1
0000A62A B041                       		cmp.w	d1,d0
0000A62C 6400                       		bcc.s	Swi_NoTouch
0000A62E 3429 000C                  		move.w	obY(a1),d2
0000A632 1229 0016                  		move.b	obHeight(a1),d1
0000A636 4881                       		ext.w	d1
0000A638 D242                       		add.w	d2,d1
0000A63A 3028 000C                  		move.w	obY(a0),d0
0000A63E 0440 0010                  		subi.w	#$10,d0
0000A642 9041                       		sub.w	d1,d0
0000A644 6200                       		bhi.s	Swi_NoTouch
0000A646 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A64A 6500                       		bcs.s	Swi_NoTouch
0000A64C 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A64E 4E75                       		rts	
0000A650                            ; ===========================================================================
0000A650                            
0000A650                            Swi_NoTouch:
0000A650 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A652 4E75                       		rts	
0000A654                            ; End of function Swi_ChkTouch
0000A654                            ; End of function Swi_ChkTouch
0000A654                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A654                            ; ---------------------------------------------------------------------------
0000A654                            ; Sprite mappings - Unused switch thingy
0000A654                            ; ---------------------------------------------------------------------------
0000A654                            Map_Swi_internal:
0000A654 0000                       		dc.w byte_891E-Map_Swi_internal
0000A656 04                         byte_891E:	dc.b 4
0000A657 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A65C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A661 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A666 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A66C 00                         		even
0000A66C 00                         		even
0000A66C                            
0000A66C                            		include	"_incObj\2A SBZ Small Door.asm"
0000A66C                            ; ---------------------------------------------------------------------------
0000A66C                            ; Object 2A - small vertical door (SBZ)
0000A66C                            ; ---------------------------------------------------------------------------
0000A66C                            
0000A66C                            AutoDoor:
0000A66C 7000                       		moveq	#0,d0
0000A66E 1028 0024                  		move.b	obRoutine(a0),d0
0000A672 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A676 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A67A                            ; ===========================================================================
0000A67A 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A67C 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A67E                            ; ===========================================================================
0000A67E                            
0000A67E                            ADoor_Main:	; Routine 0
0000A67E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A682 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A68A 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A690 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A696 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A69C                            		;move.b	#4,obPriority(a0)
0000A69C                            
0000A69C                            ADoor_OpenShut:	; Routine 2
0000A69C 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A6A0 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A6A4 3038 D008                  		move.w	(v_player+obX).w,d0
0000A6A8 D041                       		add.w	d1,d0
0000A6AA B068 0008                  		cmp.w	obX(a0),d0
0000A6AE 6500                       		bcs.s	ADoor_Animate
0000A6B0 9041                       		sub.w	d1,d0
0000A6B2 9041                       		sub.w	d1,d0
0000A6B4 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A6B8 6400                       		bcc.s	ADoor_Animate	; close door
0000A6BA D041                       		add.w	d1,d0
0000A6BC B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A6C0 6400                       		bcc.s	loc_899A	; if yes, branch
0000A6C2 0828 0000 0022             		btst	#0,obStatus(a0)
0000A6C8 6600                       		bne.s	ADoor_Animate
0000A6CA 6000                       		bra.s	ADoor_Open
0000A6CC                            ; ===========================================================================
0000A6CC                            
0000A6CC                            loc_899A:
0000A6CC 0828 0000 0022             		btst	#0,obStatus(a0)
0000A6D2 6700                       		beq.s	ADoor_Animate
0000A6D4                            
0000A6D4                            ADoor_Open:
0000A6D4 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A6DA                            
0000A6DA                            ADoor_Animate:
0000A6DA 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A6E0 6100 0000                  		bsr.w	AnimateSprite
0000A6E4 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A6E8 6600                       		bne.s	@remember	; if yes, branch
0000A6EA 323C 0011                  		move.w	#$11,d1
0000A6EE 343C 0020                  		move.w	#$20,d2
0000A6F2 3602                       		move.w	d2,d3
0000A6F4 5243                       		addq.w	#1,d3
0000A6F6 3828 0008                  		move.w	obX(a0),d4
0000A6FA 6100 0000                  		bsr.w	SolidObject
0000A6FE                            
0000A6FE                            	@remember:
0000A6FE 6000 0000                  		bra.w	RememberState
0000A6FE 6000 0000                  		bra.w	RememberState
0000A702                            		include	"_anim\SBZ Small Door.asm"
0000A702                            ; ---------------------------------------------------------------------------
0000A702                            ; Animation script - doors (SBZ)
0000A702                            ; ---------------------------------------------------------------------------
0000A702 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A704 0000                       		dc.w @open-Ani_ADoor
0000A706 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A712 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A71E                            		even
0000A71E                            		even
0000A71E                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A71E                            ; --------------------------------------------------------------------------------
0000A71E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A71E                            ; --------------------------------------------------------------------------------
0000A71E                            
0000A71E                            SME_YnmwF:	
0000A71E 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A722 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A726 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A72A 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A72E 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A730 02                         SME_YnmwF_12:	dc.b 2	
0000A731 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A736 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A73B 02                         SME_YnmwF_1D:	dc.b 2	
0000A73C DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A741 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A746 02                         SME_YnmwF_28:	dc.b 2	
0000A747 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A74C 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A751 02                         SME_YnmwF_33:	dc.b 2	
0000A752 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A757 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A75C 02                         SME_YnmwF_3E:	dc.b 2	
0000A75D D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A762 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A767 02                         SME_YnmwF_49:	dc.b 2	
0000A768 CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A76D 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A772 02                         SME_YnmwF_54:	dc.b 2	
0000A773 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A778 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A77D 02                         SME_YnmwF_5F:	dc.b 2	
0000A77E C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A783 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A788 02                         SME_YnmwF_6A:	dc.b 2	
0000A789 C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A78E 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A794 00                         		even
0000A794 00                         		even
0000A794                            
0000A794                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A794                            
0000A794                            
0000A794                            Obj44_SolidWall:
0000A794 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A798 6700                       		beq.s	loc_8AA8
0000A79A 6B00 0000                  		bmi.w	loc_8AC4
0000A79E 4A40                       		tst.w	d0
0000A7A0 6700 0000                  		beq.w	loc_8A92
0000A7A4 6B00                       		bmi.s	loc_8A7C
0000A7A6 4A69 0010                  		tst.w	obVelX(a1)
0000A7AA 6B00                       		bmi.s	loc_8A92
0000A7AC 6000                       		bra.s	loc_8A82
0000A7AE                            ; ===========================================================================
0000A7AE                            
0000A7AE                            loc_8A7C:
0000A7AE 4A69 0010                  		tst.w	obVelX(a1)
0000A7B2 6A00                       		bpl.s	loc_8A92
0000A7B4                            
0000A7B4                            loc_8A82:
0000A7B4 9169 0008                  		sub.w	d0,obX(a1)
0000A7B8 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A7BE 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A7C4                            
0000A7C4                            loc_8A92:
0000A7C4 0829 0001 0022             		btst	#1,obStatus(a1)
0000A7CA 6600                       		bne.s	loc_8AB6
0000A7CC 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A7D2 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A7D8 4E75                       		rts	
0000A7DA                            ; ===========================================================================
0000A7DA                            
0000A7DA                            loc_8AA8:
0000A7DA 0828 0005 0022             		btst	#5,obStatus(a0)
0000A7E0 6700                       		beq.s	locret_8AC2
0000A7E2 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A7E8                            
0000A7E8                            loc_8AB6:
0000A7E8 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A7EE 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A7F4                            
0000A7F4                            locret_8AC2:
0000A7F4 4E75                       		rts	
0000A7F6                            ; ===========================================================================
0000A7F6                            
0000A7F6                            loc_8AC4:
0000A7F6 4A69 0012                  		tst.w	obVelY(a1)
0000A7FA 6A00                       		bpl.s	locret_8AD8
0000A7FC 4A43                       		tst.w	d3
0000A7FE 6A00                       		bpl.s	locret_8AD8
0000A800 9769 000C                  		sub.w	d3,obY(a1)
0000A804 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A80A                            
0000A80A                            locret_8AD8:
0000A80A 4E75                       		rts	
0000A80C                            ; End of function Obj44_SolidWall
0000A80C                            
0000A80C                            
0000A80C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A80C                            
0000A80C                            
0000A80C                            Obj44_SolidWall2:
0000A80C 43F8 D000                  		lea	(v_player).w,a1
0000A810 3029 0008                  		move.w	obX(a1),d0
0000A814 9068 0008                  		sub.w	obX(a0),d0
0000A818 D041                       		add.w	d1,d0
0000A81A 6B00                       		bmi.s	loc_8B48
0000A81C 3601                       		move.w	d1,d3
0000A81E D643                       		add.w	d3,d3
0000A820 B043                       		cmp.w	d3,d0
0000A822 6200                       		bhi.s	loc_8B48
0000A824 1629 0016                  		move.b	obHeight(a1),d3
0000A828 4883                       		ext.w	d3
0000A82A D443                       		add.w	d3,d2
0000A82C 3629 000C                  		move.w	obY(a1),d3
0000A830 9668 000C                  		sub.w	obY(a0),d3
0000A834 D642                       		add.w	d2,d3
0000A836 6B00                       		bmi.s	loc_8B48
0000A838 3802                       		move.w	d2,d4
0000A83A D844                       		add.w	d4,d4
0000A83C B644                       		cmp.w	d4,d3
0000A83E 6400                       		bhs.s	loc_8B48
0000A840 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A844 6B00                       		bmi.s	loc_8B48
0000A846 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A84C 6400                       		bhs.s	loc_8B48
0000A84E 4A78 FE08                  		tst.w	(v_debuguse).w
0000A852 6600                       		bne.s	loc_8B48
0000A854 3A00                       		move.w	d0,d5
0000A856 B240                       		cmp.w	d0,d1
0000A858 6400                       		bhs.s	loc_8B30
0000A85A D241                       		add.w	d1,d1
0000A85C 9041                       		sub.w	d1,d0
0000A85E 3A00                       		move.w	d0,d5
0000A860 4445                       		neg.w	d5
0000A862                            
0000A862                            loc_8B30:
0000A862 3203                       		move.w	d3,d1
0000A864 B443                       		cmp.w	d3,d2
0000A866 6400                       		bhs.s	loc_8B3C
0000A868 9644                       		sub.w	d4,d3
0000A86A 3203                       		move.w	d3,d1
0000A86C 4441                       		neg.w	d1
0000A86E                            
0000A86E                            loc_8B3C:
0000A86E BA41                       		cmp.w	d1,d5
0000A870 6200                       		bhi.s	loc_8B44
0000A872 7801                       		moveq	#1,d4
0000A874 4E75                       		rts	
0000A876                            ; ===========================================================================
0000A876                            
0000A876                            loc_8B44:
0000A876 78FF                       		moveq	#-1,d4
0000A878 4E75                       		rts	
0000A87A                            ; ===========================================================================
0000A87A                            
0000A87A                            loc_8B48:
0000A87A 7800                       		moveq	#0,d4
0000A87C 4E75                       		rts	
0000A87E                            ; End of function Obj44_SolidWall2
0000A87E                            
0000A87E                            ; ===========================================================================
0000A87E                            
0000A87E                            		include	"_incObj\1E Ball Hog.asm"
0000A87E                            ; ---------------------------------------------------------------------------
0000A87E                            ; Object 1E - Ball Hog enemy (SBZ)
0000A87E                            ; ---------------------------------------------------------------------------
0000A87E                            
0000A87E                            BallHog:
0000A87E 7000                       		moveq	#0,d0
0000A880 1028 0024                  		move.b	obRoutine(a0),d0
0000A884 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A888 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A88C                            ; ===========================================================================
0000A88C 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A88E 0000                       		dc.w Hog_Action-Hog_Index
0000A890                            
0000A890 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A890                            ; ===========================================================================
0000A890                            
0000A890                            Hog_Main:	; Routine 0
0000A890 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A896 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A89C 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A8A4 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A8AA 117C 0004 0001             		move.b	#4,obRender(a0)
0000A8B0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A8B6 117C 0005 0020             		move.b	#5,obColType(a0)
0000A8BC 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A8C2 6100 0000                  		bsr.w	ObjectFall
0000A8C6 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A8CC 4A41                       		tst.w	d1
0000A8CE 6A00                       		bpl.s	@floornotfound
0000A8D0 D368 000C                  		add.w	d1,obY(a0)
0000A8D4 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A8DA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A8DE                            
0000A8DE                            	@floornotfound:
0000A8DE 4E75                       		rts	
0000A8E0                            ; ===========================================================================
0000A8E0                            
0000A8E0                            Hog_Action:	; Routine 2
0000A8E0 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A8E6 6100 0000                  		bsr.w	AnimateSprite
0000A8EA 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A8F0 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A8F2 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A8F6 6700                       		beq.s	@makeball	; if yes, branch
0000A8F8 6000                       		bra.s	@remember
0000A8FA                            ; ===========================================================================
0000A8FA                            
0000A8FA                            @setlaunchflag:
0000A8FA 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A8FE                            
0000A8FE                            @remember:
0000A8FE 6000 0000                  		bra.w	RememberState
0000A902                            ; ===========================================================================
0000A902                            
0000A902                            @makeball:
0000A902 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A908 6100 0000                  		bsr.w	FindFreeObj
0000A90C 6600                       		bne.s	@fail
0000A90E 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A912 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A918 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A91E 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A924 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A92A 70FC                       		moveq	#-4,d0
0000A92C 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A932 6700                       		beq.s	@noflip		; if not, branch
0000A934 4440                       		neg.w	d0
0000A936 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A93A                            
0000A93A                            	@noflip:
0000A93A D169 0008                  		add.w	d0,obX(a1)
0000A93E 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A944 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A94A                            
0000A94A                            	@fail:
0000A94A 60B2                       		bra.s	@remember
0000A94A 60B2                       		bra.s	@remember
0000A94C                            		include	"_incObj\20 Cannonball.asm"
0000A94C                            ; ---------------------------------------------------------------------------
0000A94C                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A94C                            ; ---------------------------------------------------------------------------
0000A94C                            
0000A94C                            Cannonball:
0000A94C 7000                       		moveq	#0,d0
0000A94E 1028 0024                  		move.b	obRoutine(a0),d0
0000A952 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A956 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A95A                            ; ===========================================================================
0000A95A 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A95C 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A95E                            
0000A95E =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A95E                            ; ===========================================================================
0000A95E                            
0000A95E                            Cbal_Main:	; Routine 0
0000A95E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A962 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A968 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A970 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A976 117C 0004 0001             		move.b	#4,obRender(a0)
0000A97C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A982 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A988 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A98E 7000                       		moveq	#0,d0
0000A990 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A994 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A998 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A99C 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A9A2                            
0000A9A2                            Cbal_Bounce:	; Routine 2
0000A9A2 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A9A8 4A68 0012                  		tst.w	obVelY(a0)
0000A9AC 6B00                       		bmi.s	Cbal_ChkExplode
0000A9AE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A9B4 4A41                       		tst.w	d1		; has ball hit the floor?
0000A9B6 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A9B8                            
0000A9B8 D368 000C                  		add.w	d1,obY(a0)
0000A9BC 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A9C2 4A03                       		tst.b	d3
0000A9C4 6700                       		beq.s	Cbal_ChkExplode
0000A9C6 6B00                       		bmi.s	loc_8CA4
0000A9C8 4A68 0010                  		tst.w	obVelX(a0)
0000A9CC 6A00                       		bpl.s	Cbal_ChkExplode
0000A9CE 4468 0010                  		neg.w	obVelX(a0)
0000A9D2 6000                       		bra.s	Cbal_ChkExplode
0000A9D4                            ; ===========================================================================
0000A9D4                            
0000A9D4                            loc_8CA4:
0000A9D4 4A68 0010                  		tst.w	obVelX(a0)
0000A9D8 6B00                       		bmi.s	Cbal_ChkExplode
0000A9DA 4468 0010                  		neg.w	obVelX(a0)
0000A9DE                            
0000A9DE                            Cbal_ChkExplode:
0000A9DE 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A9E2 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A9E4                            
0000A9E4                            	Cbal_Explode:
0000A9E4 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A9E8 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A9EC 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A9F2 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A9F6                            ; ===========================================================================
0000A9F6                            
0000A9F6                            Cbal_Animate:
0000A9F6 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A9FA 6A00                       		bpl.s	Cbal_Display
0000A9FC 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000AA02 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000AA08                            
0000AA08                            Cbal_Display:
0000AA08 6100 0000                  		bsr.w	DisplaySprite
0000AA0C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000AA10 0640 00E0                  		addi.w	#$E0,d0
0000AA14 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000AA18 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000AA1C 4E75                       		rts	
0000AA1C 4E75                       		rts	
0000AA1E                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000AA1E                            ; ---------------------------------------------------------------------------
0000AA1E                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000AA1E                            ; ---------------------------------------------------------------------------
0000AA1E                            
0000AA1E                            MissileDissolve:
0000AA1E 7000                       		moveq	#0,d0
0000AA20 1028 0024                  		move.b	obRoutine(a0),d0
0000AA24 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000AA28 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000AA2C                            ; ===========================================================================
0000AA2C 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000AA2E 0000                       		dc.w MDis_Animate-MDis_Index
0000AA30                            ; ===========================================================================
0000AA30                            
0000AA30                            MDis_Main:	; Routine 0
0000AA30 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA34 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000AA3C 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000AA42 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA48 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AA4E 117C 0000 0020             		move.b	#0,obColType(a0)
0000AA54 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AA5A 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000AA60 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA70                            
0000AA70                            MDis_Animate:	; Routine 2
0000AA70 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000AA74 6A00                       		bpl.s	@display
0000AA76 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000AA7C 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000AA80 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000AA86 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000AA8A                            
0000AA8A                            	@display:
0000AA8A 6000 0000                  		bra.w	DisplaySprite
0000AA8E                            ; ===========================================================================
0000AA8E                            
0000AA8E                            ; ---------------------------------------------------------------------------
0000AA8E                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000AA8E                            ; ---------------------------------------------------------------------------
0000AA8E                            
0000AA8E                            ExplosionItem:
0000AA8E 7000                       		moveq	#0,d0
0000AA90 1028 0024                  		move.b	obRoutine(a0),d0
0000AA94 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000AA98 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000AA9C                            ; ===========================================================================
0000AA9C 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000AA9E 0000                       		dc.w ExItem_Main-ExItem_Index
0000AAA0 0000                       		dc.w ExItem_Animate-ExItem_Index
0000AAA2                            ; ===========================================================================
0000AAA2                            
0000AAA2                            ExItem_Animal:	; Routine 0
0000AAA2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AAA6 6100 0000                  		bsr.w	FindFreeObj
0000AAAA 6600                       		bne.s	ExItem_Main
0000AAAC 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000AAB0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AAB6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AABC 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000AAC2                            
0000AAC2                            ExItem_Main:	; Routine 2
0000AAC2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AAC6 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000AACE 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AAD4 117C 0004 0001             		move.b	#4,obRender(a0)
0000AADA 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AAE0 117C 0000 0020             		move.b	#0,obColType(a0)
0000AAE6 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AAEC 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AAF2 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AB02                            
0000AB02                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000AB02 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000AB06 6A00                       		bpl.s	@display
0000AB08 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AB0E 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000AB12 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000AB18 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000AB1C                            
0000AB1C                            	@display:
0000AB1C 6000 0000                  		bra.w	DisplaySprite
0000AB20                            ; ===========================================================================
0000AB20                            ; ---------------------------------------------------------------------------
0000AB20                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000AB20                            ; ---------------------------------------------------------------------------
0000AB20                            
0000AB20                            ExplosionBomb:
0000AB20 7000                       		moveq	#0,d0
0000AB22 1028 0024                  		move.b	obRoutine(a0),d0
0000AB26 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000AB2A 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000AB2E                            ; ===========================================================================
0000AB2E 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000AB30 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000AB32                            ; ===========================================================================
0000AB32                            
0000AB32                            ExBom_Main:	; Routine 0
0000AB32 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AB36 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000AB3E 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AB44 117C 0004 0001             		move.b	#4,obRender(a0)
0000AB4A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AB50 117C 0000 0020             		move.b	#0,obColType(a0)
0000AB56 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AB5C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AB62 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AB72                            		include	"_anim\Ball Hog.asm"
0000AB72                            ; ---------------------------------------------------------------------------
0000AB72                            ; Animation script - doors (SBZ)
0000AB72                            ; ---------------------------------------------------------------------------
0000AB72 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000AB74 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000AB8C 00                         		even
0000AB8C 00                         		even
0000AB8C                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000AB8C                            ; --------------------------------------------------------------------------------
0000AB8C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AB8C                            ; --------------------------------------------------------------------------------
0000AB8C                            
0000AB8C                            SME_ZER01:	
0000AB8C 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000AB90 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000AB94 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000AB98 02                         SME_ZER01_C:	dc.b 2	
0000AB99 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AB9E FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000ABA3 02                         SME_ZER01_17:	dc.b 2	
0000ABA4 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000ABA9 FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000ABAE 02                         SME_ZER01_22:	dc.b 2	
0000ABAF F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000ABB4 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000ABB9 02                         SME_ZER01_2D:	dc.b 2	
0000ABBA E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000ABBF F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000ABC4 01                         SME_ZER01_38:	dc.b 1	
0000ABC5 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000ABCA 01                         SME_ZER01_3E:	dc.b 1	
0000ABCB F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000ABD0                            		even
0000ABD0                            		even
0000ABD0                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000ABD0                            ; ---------------------------------------------------------------------------
0000ABD0                            ; Sprite mappings - buzz bomber missile vanishing
0000ABD0                            ; ---------------------------------------------------------------------------
0000ABD0                            Map_MisDissolve_internal:
0000ABD0 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000ABD2 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000ABD4 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000ABD6 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000ABD8 01                         byte_8EAE:	dc.b 1
0000ABD9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000ABDE 01                         byte_8EB4:	dc.b 1
0000ABDF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000ABE4 01                         byte_8EBA:	dc.b 1
0000ABE5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000ABEA 01                         byte_8EC0:	dc.b 1
0000ABEB F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000ABF0                            		even
0000ABF0                            		even
0000ABF0                            		include	"_maps\Explosions.asm"
0000ABF0                            ; ---------------------------------------------------------------------------
0000ABF0                            ; Sprite mappings - explosion from a badnik or monitor
0000ABF0                            ; ---------------------------------------------------------------------------
0000ABF0 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000ABF4 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000ABF8 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000ABFA 01                         byte_8ED0:	dc.b 1
0000ABFB F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000AC00 01                         byte_8ED6:	dc.b 1
0000AC01 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000AC06 01                         byte_8EDC:	dc.b 1
0000AC07 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000AC0C 04                         byte_8EE2:	dc.b 4
0000AC0D EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000AC12 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000AC17 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000AC1C FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000AC21 04                         byte_8EF7:	dc.b 4
0000AC22 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000AC27 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000AC2C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000AC31 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000AC36                            		even
0000AC36                            ; ---------------------------------------------------------------------------
0000AC36                            ; Sprite mappings - explosion from when	a boss is destroyed
0000AC36                            ; ---------------------------------------------------------------------------
0000AC36 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000AC38 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000AC3A 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000AC3C FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000AC3E FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000AC40 01                         byte_8F16:	dc.b 1
0000AC41 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000AC46 01                         byte_8F1C:	dc.b 1
0000AC47 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000AC4C                            		even
0000AC4C                            		even
0000AC4C                            
0000AC4C                            		include	"_incObj\28 Animals.asm"
0000AC4C                            ; ---------------------------------------------------------------------------
0000AC4C                            ; Object 28 - animals
0000AC4C                            ; ---------------------------------------------------------------------------
0000AC4C                            
0000AC4C                            Animals:
0000AC4C 7000                       		moveq	#0,d0
0000AC4E 1028 0024                  		move.b	obRoutine(a0),d0
0000AC52 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000AC56 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000AC5A                            ; ===========================================================================
0000AC5A 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000AC5E 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AC62 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000AC66 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AC6A 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000AC6E 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000AC72 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000AC76 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AC7A 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AC7E 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000AC82 0000                       		dc.w loc_92D6-Anml_Index
0000AC84                            
0000AC84 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000AC90                            
0000AC90 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000AC94 0000 0000                  		dc.l Map_Animal1
0000AC98 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000AC9C 0000 0000                  		dc.l Map_Animal2	; mappings address
0000ACA0 FE80 FD00                  		dc.w $FE80, $FD00
0000ACA4 0000 0000                  		dc.l Map_Animal1
0000ACA8 FEC0 FE80                  		dc.w $FEC0, $FE80
0000ACAC 0000 0000                  		dc.l Map_Animal2
0000ACB0 FE40 FD00                  		dc.w $FE40, $FD00
0000ACB4 0000 0000                  		dc.l Map_Animal3
0000ACB8 FD00 FC00                  		dc.w $FD00, $FC00
0000ACBC 0000 0000                  		dc.l Map_Animal2
0000ACC0 FD80 FC80                  		dc.w $FD80, $FC80
0000ACC4 0000 0000                  		dc.l Map_Animal3
0000ACC8                            
0000ACC8 FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000ACD8 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000ACE8 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000ACF4                            
0000ACF4 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AD08 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AD1C 0000 0000                  		dc.l Map_Animal3
0000AD20                            
0000AD20 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AD32 0565 05B3                  		dc.w $565, $5B3
0000AD36                            ; ===========================================================================
0000AD36                            
0000AD36                            Anml_Ending:	; Routine 0
0000AD36 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AD3A 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AD3E 7000                       		moveq	#0,d0
0000AD40 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AD44 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AD46 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AD4A 0440 0014                  		subi.w	#$14,d0
0000AD4E 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AD54 D040                       		add.w	d0,d0
0000AD56 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000AD5C 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000AD60 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AD66 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000AD6C 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AD72 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000AD78 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AD7E 117C 0004 0001             		move.b	#4,obRender(a0)
0000AD84 08E8 0000 0001             		bset	#0,obRender(a0)
0000AD8A 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AD90 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AD96 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AD9C 6000 0000                  		bra.w	DisplaySprite
0000ADA0                            ; ===========================================================================
0000ADA0                            
0000ADA0                            Anml_FromEnemy:
0000ADA0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ADA4 6100 8CB6                  		bsr.w	RandomNumber
0000ADA8 0240 0001                  		andi.w	#1,d0
0000ADAC 7200                       		moveq	#0,d1
0000ADAE 1238 FE10                  		move.b	(v_zone).w,d1
0000ADB2 D241                       		add.w	d1,d1
0000ADB4 D240                       		add.w	d0,d1
0000ADB6 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000ADBA 1031 1000                  		move.b	(a1,d1.w),d0
0000ADBE 1140 0030                  		move.b	d0,$30(a0)
0000ADC2 E748                       		lsl.w	#3,d0
0000ADC4 43FA FECA                  		lea	Anml_Variables(pc),a1
0000ADC8 D2C0                       		adda.w	d0,a1
0000ADCA 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000ADCE 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000ADD2 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000ADD6 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000ADDC 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000ADE2 6700                       		beq.s	loc_90C0	; if yes, branch
0000ADE4 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000ADEA                            
0000ADEA                            loc_90C0:
0000ADEA 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000ADF0 117C 0004 0001             		move.b	#4,obRender(a0)
0000ADF6 08E8 0000 0001             		bset	#0,obRender(a0)
0000ADFC 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AE02 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AE08 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AE0E 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AE14 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AE1A 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AE1E 6600                       		bne.s	loc_911C
0000AE20 6100 0000                  		bsr.w	FindFreeObj
0000AE24 6600                       		bne.s	Anml_Display
0000AE26 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AE2A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AE30 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AE36 3028 003E                  		move.w	$3E(a0),d0
0000AE3A E248                       		lsr.w	#1,d0
0000AE3C 1340 001A                  		move.b	d0,obFrame(a1)
0000AE40                            
0000AE40                            Anml_Display:
0000AE40 6000 0000                  		bra.w	DisplaySprite
0000AE44                            ; ===========================================================================
0000AE44                            
0000AE44                            loc_911C:
0000AE44 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AE4A 4268 0010                  		clr.w	obVelX(a0)
0000AE4E 6000 0000                  		bra.w	DisplaySprite
0000AE52                            ; ===========================================================================
0000AE52                            
0000AE52                            loc_912A:
0000AE52 4A28 0001                  		tst.b	obRender(a0)
0000AE56 6A00 0000                  		bpl.w	DeleteObject
0000AE5A 6100 0000                  		bsr.w	ObjectFall
0000AE5E 4A68 0012                  		tst.w	obVelY(a0)
0000AE62 6B00                       		bmi.s	loc_9180
0000AE64 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE6A 4A41                       		tst.w	d1
0000AE6C 6A00                       		bpl.s	loc_9180
0000AE6E D368 000C                  		add.w	d1,obY(a0)
0000AE72 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AE78 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE7E 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AE84 1028 0030                  		move.b	$30(a0),d0
0000AE88 D000                       		add.b	d0,d0
0000AE8A 5800                       		addq.b	#4,d0
0000AE8C 1140 0024                  		move.b	d0,obRoutine(a0)
0000AE90 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AE94 6700                       		beq.s	loc_9180
0000AE96 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000AE9C 6700                       		beq.s	loc_9180
0000AE9E 4468 0010                  		neg.w	obVelX(a0)
0000AEA2 0868 0000 0001             		bchg	#0,obRender(a0)
0000AEA8                            
0000AEA8                            loc_9180:
0000AEA8 6000 0000                  		bra.w	DisplaySprite
0000AEAC                            ; ===========================================================================
0000AEAC                            
0000AEAC                            loc_9184:
0000AEAC 6100 0000                  		bsr.w	ObjectFall
0000AEB0 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AEB6 4A68 0012                  		tst.w	obVelY(a0)
0000AEBA 6B00                       		bmi.s	loc_91AE
0000AEBC 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AEC2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AEC8 4A41                       		tst.w	d1
0000AECA 6A00                       		bpl.s	loc_91AE
0000AECC D368 000C                  		add.w	d1,obY(a0)
0000AED0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AED6                            
0000AED6                            loc_91AE:
0000AED6 4A28 0028                  		tst.b	obSubtype(a0)
0000AEDA 6600                       		bne.s	loc_9224
0000AEDC 4A28 0001                  		tst.b	obRender(a0)
0000AEE0 6A00 0000                  		bpl.w	DeleteObject
0000AEE4 6000 0000                  		bra.w	DisplaySprite
0000AEE8                            ; ===========================================================================
0000AEE8                            
0000AEE8                            loc_91C0:
0000AEE8 6100 0000                  		bsr.w	SpeedToPos
0000AEEC 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AEF2 4A68 0012                  		tst.w	obVelY(a0)
0000AEF6 6B00                       		bmi.s	loc_91FC
0000AEF8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AEFE 4A41                       		tst.w	d1
0000AF00 6A00                       		bpl.s	loc_91FC
0000AF02 D368 000C                  		add.w	d1,obY(a0)
0000AF06 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF0C 4A28 0028                  		tst.b	obSubtype(a0)
0000AF10 6700                       		beq.s	loc_91FC
0000AF12 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AF18 6700                       		beq.s	loc_91FC
0000AF1A 4468 0010                  		neg.w	obVelX(a0)
0000AF1E 0868 0000 0001             		bchg	#0,obRender(a0)
0000AF24                            
0000AF24                            loc_91FC:
0000AF24 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AF28 6A00                       		bpl.s	loc_9212
0000AF2A 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AF30 5228 001A                  		addq.b	#1,obFrame(a0)
0000AF34 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AF3A                            
0000AF3A                            loc_9212:
0000AF3A 4A28 0028                  		tst.b	obSubtype(a0)
0000AF3E 6600                       		bne.s	loc_9224
0000AF40 4A28 0001                  		tst.b	obRender(a0)
0000AF44 6A00 0000                  		bpl.w	DeleteObject
0000AF48 6000 0000                  		bra.w	DisplaySprite
0000AF4C                            ; ===========================================================================
0000AF4C                            
0000AF4C                            loc_9224:
0000AF4C 3028 0008                  		move.w	obX(a0),d0
0000AF50 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AF54 6500                       		bcs.s	loc_923C
0000AF56 0440 0180                  		subi.w	#$180,d0
0000AF5A 6A00                       		bpl.s	loc_923C
0000AF5C 4A28 0001                  		tst.b	obRender(a0)
0000AF60 6A00 0000                  		bpl.w	DeleteObject
0000AF64                            
0000AF64                            loc_923C:
0000AF64 6000 0000                  		bra.w	DisplaySprite
0000AF68                            ; ===========================================================================
0000AF68                            
0000AF68                            loc_9240:
0000AF68 4A28 0001                  		tst.b	obRender(a0)
0000AF6C 6A00 0000                  		bpl.w	DeleteObject
0000AF70 5368 0036                  		subq.w	#1,$36(a0)
0000AF74 6600 0000                  		bne.w	loc_925C
0000AF78 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AF7E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AF84                            
0000AF84                            loc_925C:
0000AF84 6000 0000                  		bra.w	DisplaySprite
0000AF88                            ; ===========================================================================
0000AF88                            
0000AF88                            loc_9260:
0000AF88 6100 0000                  		bsr.w	sub_9404
0000AF8C 6400                       		bcc.s	loc_927C
0000AF8E 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AF94 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF9A 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AFA0 6000 FF46                  		bra.w	loc_91C0
0000AFA4                            ; ===========================================================================
0000AFA4                            
0000AFA4                            loc_927C:
0000AFA4 6000 FFA6                  		bra.w	loc_9224
0000AFA8                            ; ===========================================================================
0000AFA8                            
0000AFA8                            loc_9280:
0000AFA8 6100 0000                  		bsr.w	sub_9404
0000AFAC 6A00                       		bpl.s	loc_92B6
0000AFAE 4268 0010                  		clr.w	obVelX(a0)
0000AFB2 4268 0032                  		clr.w	$32(a0)
0000AFB6 6100 0000                  		bsr.w	SpeedToPos
0000AFBA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AFC0 6100 0000                  		bsr.w	loc_93C4
0000AFC4 6100 0000                  		bsr.w	loc_93EC
0000AFC8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AFCC 6A00                       		bpl.s	loc_92B6
0000AFCE 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AFD4 5228 001A                  		addq.b	#1,obFrame(a0)
0000AFD8 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AFDE                            
0000AFDE                            loc_92B6:
0000AFDE 6000 FF6C                  		bra.w	loc_9224
0000AFE2                            ; ===========================================================================
0000AFE2                            
0000AFE2                            loc_92BA:
0000AFE2 6100 0000                  		bsr.w	sub_9404
0000AFE6 6A00                       		bpl.s	loc_9310
0000AFE8 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AFEE 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AFF4 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AFFA 6000 FEB0                  		bra.w	loc_9184
0000AFFE                            ; ===========================================================================
0000AFFE                            
0000AFFE                            loc_92D6:
0000AFFE 6100 0000                  		bsr.w	ObjectFall
0000B002 117C 0001 001A             		move.b	#1,obFrame(a0)
0000B008 4A68 0012                  		tst.w	obVelY(a0)
0000B00C 6B00                       		bmi.s	loc_9310
0000B00E 117C 0000 001A             		move.b	#0,obFrame(a0)
0000B014 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B01A 4A41                       		tst.w	d1
0000B01C 6A00                       		bpl.s	loc_9310
0000B01E 4628 0029                  		not.b	$29(a0)
0000B022 6600                       		bne.s	loc_9306
0000B024 4468 0010                  		neg.w	obVelX(a0)
0000B028 0868 0000 0001             		bchg	#0,obRender(a0)
0000B02E                            
0000B02E                            loc_9306:
0000B02E D368 000C                  		add.w	d1,obY(a0)
0000B032 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B038                            
0000B038                            loc_9310:
0000B038 6000 FF12                  		bra.w	loc_9224
0000B03C                            ; ===========================================================================
0000B03C                            
0000B03C                            loc_9314:
0000B03C 6100 0000                  		bsr.w	sub_9404
0000B040 6A00                       		bpl.s	loc_932E
0000B042 4268 0010                  		clr.w	obVelX(a0)
0000B046 4268 0032                  		clr.w	$32(a0)
0000B04A 6100 0000                  		bsr.w	ObjectFall
0000B04E 6100 0000                  		bsr.w	loc_93C4
0000B052 6100 0000                  		bsr.w	loc_93EC
0000B056                            
0000B056                            loc_932E:
0000B056 6000 FEF4                  		bra.w	loc_9224
0000B05A                            ; ===========================================================================
0000B05A                            
0000B05A                            loc_9332:
0000B05A 6100 0000                  		bsr.w	sub_9404
0000B05E 6A00                       		bpl.s	loc_936C
0000B060 6100 0000                  		bsr.w	ObjectFall
0000B064 117C 0001 001A             		move.b	#1,obFrame(a0)
0000B06A 4A68 0012                  		tst.w	obVelY(a0)
0000B06E 6B00                       		bmi.s	loc_936C
0000B070 117C 0000 001A             		move.b	#0,obFrame(a0)
0000B076 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B07C 4A41                       		tst.w	d1
0000B07E 6A00                       		bpl.s	loc_936C
0000B080 4468 0010                  		neg.w	obVelX(a0)
0000B084 0868 0000 0001             		bchg	#0,obRender(a0)
0000B08A D368 000C                  		add.w	d1,obY(a0)
0000B08E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B094                            
0000B094                            loc_936C:
0000B094 6000 FEB6                  		bra.w	loc_9224
0000B098                            ; ===========================================================================
0000B098                            
0000B098                            loc_9370:
0000B098 6100 0000                  		bsr.w	sub_9404
0000B09C 6A00                       		bpl.s	loc_93C0
0000B09E 6100 0000                  		bsr.w	SpeedToPos
0000B0A2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000B0A8 4A68 0012                  		tst.w	obVelY(a0)
0000B0AC 6B00                       		bmi.s	loc_93AA
0000B0AE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B0B4 4A41                       		tst.w	d1
0000B0B6 6A00                       		bpl.s	loc_93AA
0000B0B8 4628 0029                  		not.b	$29(a0)
0000B0BC 6600                       		bne.s	loc_93A0
0000B0BE 4468 0010                  		neg.w	obVelX(a0)
0000B0C2 0868 0000 0001             		bchg	#0,obRender(a0)
0000B0C8                            
0000B0C8                            loc_93A0:
0000B0C8 D368 000C                  		add.w	d1,obY(a0)
0000B0CC 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B0D2                            
0000B0D2                            loc_93AA:
0000B0D2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000B0D6 6A00                       		bpl.s	loc_93C0
0000B0D8 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000B0DE 5228 001A                  		addq.b	#1,obFrame(a0)
0000B0E2 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000B0E8                            
0000B0E8                            loc_93C0:
0000B0E8 6000 FE62                  		bra.w	loc_9224
0000B0EC                            ; ===========================================================================
0000B0EC                            
0000B0EC                            loc_93C4:
0000B0EC 117C 0001 001A             		move.b	#1,obFrame(a0)
0000B0F2 4A68 0012                  		tst.w	obVelY(a0)
0000B0F6 6B00                       		bmi.s	locret_93EA
0000B0F8 117C 0000 001A             		move.b	#0,obFrame(a0)
0000B0FE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B104 4A41                       		tst.w	d1
0000B106 6A00                       		bpl.s	locret_93EA
0000B108 D368 000C                  		add.w	d1,obY(a0)
0000B10C 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B112                            
0000B112                            locret_93EA:
0000B112 4E75                       		rts	
0000B114                            ; ===========================================================================
0000B114                            
0000B114                            loc_93EC:
0000B114 08E8 0000 0001             		bset	#0,obRender(a0)
0000B11A 3028 0008                  		move.w	obX(a0),d0
0000B11E 9078 D008                  		sub.w	(v_player+obX).w,d0
0000B122 6400                       		bcc.s	locret_9402
0000B124 08A8 0000 0001             		bclr	#0,obRender(a0)
0000B12A                            
0000B12A                            locret_9402:
0000B12A 4E75                       		rts	
0000B12C                            
0000B12C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B12C                            
0000B12C                            
0000B12C                            sub_9404:
0000B12C 3038 D008                  		move.w	(v_player+obX).w,d0
0000B130 9068 0008                  		sub.w	obX(a0),d0
0000B134 0440 00B8                  		subi.w	#$B8,d0
0000B138 4E75                       		rts	
0000B13A                            ; End of function sub_9404
0000B13A                            ; End of function sub_9404
0000B13A                            		include	"_incObj\29 Points.asm"
0000B13A                            ; ---------------------------------------------------------------------------
0000B13A                            ; Object 29 - points that appear when you destroy something
0000B13A                            ; ---------------------------------------------------------------------------
0000B13A                            
0000B13A                            Points:
0000B13A 7000                       		moveq	#0,d0
0000B13C 1028 0024                  		move.b	obRoutine(a0),d0
0000B140 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000B144 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000B148 6000 0000                  		bra.w	DisplaySprite
0000B14C                            ; ===========================================================================
0000B14C 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000B14E 0000                       		dc.w Poi_Slower-Poi_Index
0000B150                            ; ===========================================================================
0000B150                            
0000B150                            Poi_Main:	; Routine 0
0000B150 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B154 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000B15C 317C 2565 0002             		move.w	#$2565,obGfx(a0)
0000B162 117C 0004 0001             		move.b	#4,obRender(a0)
0000B168 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B16E 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B174 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000B17A                            
0000B17A                            Poi_Slower:	; Routine 2
0000B17A 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000B17E 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000B182 6100 0000                  		bsr.w	SpeedToPos
0000B186 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000B18C 4E75                       		rts	
0000B18C 4E75                       		rts	
0000B18E                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000B18E                            ; ---------------------------------------------------------------------------
0000B18E                            ; Sprite mappings - animals
0000B18E                            ; ---------------------------------------------------------------------------
0000B18E                            Map_Animal1_internal:
0000B18E 0000                       		dc.w byte_9472-Map_Animal1_internal
0000B190 0000                       		dc.w byte_9478-Map_Animal1_internal
0000B192 0000                       		dc.w byte_946C-Map_Animal1_internal
0000B194 01                         byte_946C:	dc.b 1
0000B195 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B19A 01                         byte_9472:	dc.b 1
0000B19B F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000B1A0 01                         byte_9478:	dc.b 1
0000B1A1 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000B1A6                            		even
0000B1A6                            		even
0000B1A6                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000B1A6                            ; ---------------------------------------------------------------------------
0000B1A6                            ; Sprite mappings - animals
0000B1A6                            ; ---------------------------------------------------------------------------
0000B1A6                            Map_Animal2_internal:
0000B1A6 0000                       		dc.w byte_948A-Map_Animal2_internal
0000B1A8 0000                       		dc.w byte_9490-Map_Animal2_internal
0000B1AA 0000                       		dc.w byte_9484-Map_Animal2_internal
0000B1AC 01                         byte_9484:	dc.b 1
0000B1AD F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B1B2 01                         byte_948A:	dc.b 1
0000B1B3 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000B1B8 01                         byte_9490:	dc.b 1
0000B1B9 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000B1BE                            		even
0000B1BE                            		even
0000B1BE                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000B1BE                            ; ---------------------------------------------------------------------------
0000B1BE                            ; Sprite mappings - animals
0000B1BE                            ; ---------------------------------------------------------------------------
0000B1BE                            Map_Animal3_internal:
0000B1BE 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000B1C0 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000B1C2 0000                       		dc.w byte_949C-Map_Animal3_internal
0000B1C4 01                         byte_949C:	dc.b 1
0000B1C5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B1CA 01                         byte_94A2:	dc.b 1
0000B1CB FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000B1D0 01                         byte_94A8:	dc.b 1
0000B1D1 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000B1D6                            		even
0000B1D6                            		even
0000B1D6                            Map_Poi:	include	"_maps\Points.asm"
0000B1D6                            ; --------------------------------------------------------------------------------
0000B1D6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B1D6                            ; --------------------------------------------------------------------------------
0000B1D6                            
0000B1D6                            SME_qLvsg:	
0000B1D6 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000B1DA 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000B1DE 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000B1E2 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000B1E4 01                         SME_qLvsg_E:	dc.b 1	
0000B1E5 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000B1EA 01                         SME_qLvsg_14:	dc.b 1	
0000B1EB FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000B1F0 01                         SME_qLvsg_1A:	dc.b 1	
0000B1F1 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000B1F6 01                         SME_qLvsg_20:	dc.b 1	
0000B1F7 FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000B1FC 01                         SME_qLvsg_26:	dc.b 1	
0000B1FD FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000B202 02                         SME_qLvsg_2C:	dc.b 2	
0000B203 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B208 FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000B20D 02                         SME_qLvsg_37:	dc.b 2	
0000B20E FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B213 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000B218                            		even
0000B218                            		even
0000B218                            
0000B218                            		include	"_incObj\1F Crabmeat.asm"
0000B218                            ; ---------------------------------------------------------------------------
0000B218                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000B218                            ; ---------------------------------------------------------------------------
0000B218                            
0000B218                            Crabmeat:
0000B218 7000                       		moveq	#0,d0
0000B21A 1028 0024                  		move.b	obRoutine(a0),d0
0000B21E 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000B222 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000B226                            ; ===========================================================================
0000B226                            Crab_Index:
0000B226 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000B228 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000B22A 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000B22C 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000B22E 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000B230                            
0000B230 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000B230 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000B230 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000B230 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000B230 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000B230                            
0000B230 =00000030                  crab_timedelay:	equ $30
0000B230 =00000032                  crab_mode:	equ $32
0000B230                            ; ===========================================================================
0000B230                            
0000B230                            Crab_Main:	; Routine 0
0000B230 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000B236 117C 0008 0017             		move.b	#8,obWidth(a0)
0000B23C 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B244 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B24A 117C 0004 0001             		move.b	#4,obRender(a0)
0000B250 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B256 117C 0006 0020             		move.b	#6,obColType(a0)
0000B25C 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000B262 6100 0000                  		bsr.w	ObjectFall
0000B266 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000B26C 4A41                       		tst.w	d1
0000B26E 6A00                       		bpl.s	@floornotfound
0000B270 D368 000C                  		add.w	d1,obY(a0)
0000B274 1143 0026                  		move.b	d3,obAngle(a0)
0000B278 317C 0000 0012             		move.w	#0,obVelY(a0)
0000B27E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B282                            
0000B282                            	@floornotfound:
0000B282 4E75                       		rts	
0000B284                            ; ===========================================================================
0000B284                            
0000B284                            Crab_Action:	; Routine 2
0000B284 7000                       		moveq	#0,d0
0000B286 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B28A 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B28E 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B292 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B298 6100 0000                  		bsr.w	AnimateSprite
0000B29C 6000 0000                  		bra.w	RememberState
0000B2A0                            ; ===========================================================================
0000B2A0 0000                       @index:		dc.w @waittofire-@index
0000B2A2 0000                       		dc.w @walkonfloor-@index
0000B2A4                            ; ===========================================================================
0000B2A4                            
0000B2A4                            @waittofire:
0000B2A4 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000B2A8 6A00                       		bpl.s	@dontmove
0000B2AA 4A28 0001                  		tst.b	obRender(a0)
0000B2AE 6A00                       		bpl.s	@movecrab
0000B2B0 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000B2B6 6600                       		bne.s	@fire
0000B2B8                            
0000B2B8                            	@movecrab:
0000B2B8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B2BC 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000B2C2 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000B2C8 6100 0000                  		bsr.w	Crab_SetAni
0000B2CC 5600                       		addq.b	#3,d0
0000B2CE 1140 001C                  		move.b	d0,obAnim(a0)
0000B2D2 0868 0000 0022             		bchg	#0,obStatus(a0)
0000B2D8 6600                       		bne.s	@noflip
0000B2DA 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000B2DE                            
0000B2DE                            	@dontmove:
0000B2DE                            	@noflip:
0000B2DE 4E75                       		rts	
0000B2E0                            ; ===========================================================================
0000B2E0                            
0000B2E0                            @fire:
0000B2E0 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B2E6 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B2EC 6100 0000                  		bsr.w	FindFreeObj
0000B2F0 6600                       		bne.s	@failleft
0000B2F2 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B2F6 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B2FC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B302 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B308 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B30E 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B314                            
0000B314                            	@failleft:
0000B314 6100 0000                  		bsr.w	FindFreeObj
0000B318 6600                       		bne.s	@failright
0000B31A 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B31E 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B324 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B32A 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B330 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B336 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B33C                            
0000B33C                            	@failright:
0000B33C 4E75                       		rts	
0000B33E                            ; ===========================================================================
0000B33E                            
0000B33E                            @walkonfloor:
0000B33E 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B342 6B00                       		bmi.s	loc_966E
0000B344 6100 0000                  		bsr.w	SpeedToPos
0000B348 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B34E 6600                       		bne.s	loc_9654
0000B350 3628 0008                  		move.w	obX(a0),d3
0000B354 0643 0010                  		addi.w	#$10,d3
0000B358 0828 0000 0022             		btst	#0,obStatus(a0)
0000B35E 6700                       		beq.s	loc_9640
0000B360 0443 0020                  		subi.w	#$20,d3
0000B364                            
0000B364                            loc_9640:
0000B364 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B36A 0C41 FFF8                  		cmpi.w	#-8,d1
0000B36E 6D00                       		blt.s	loc_966E
0000B370 0C41 000C                  		cmpi.w	#$C,d1
0000B374 6C00                       		bge.s	loc_966E
0000B376 4E75                       		rts	
0000B378                            ; ===========================================================================
0000B378                            
0000B378                            loc_9654:
0000B378 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B37E D368 000C                  		add.w	d1,obY(a0)
0000B382 1143 0026                  		move.b	d3,obAngle(a0)
0000B386 6100 0000                  		bsr.w	Crab_SetAni
0000B38A 5600                       		addq.b	#3,d0
0000B38C 1140 001C                  		move.b	d0,obAnim(a0)
0000B390 4E75                       		rts	
0000B392                            ; ===========================================================================
0000B392                            
0000B392                            loc_966E:
0000B392 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B396 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B39C 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B3A2 6100 0000                  		bsr.w	Crab_SetAni
0000B3A6 1140 001C                  		move.b	d0,obAnim(a0)
0000B3AA 4E75                       		rts	
0000B3AC                            ; ---------------------------------------------------------------------------
0000B3AC                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B3AC                            ; ---------------------------------------------------------------------------
0000B3AC                            
0000B3AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B3AC                            
0000B3AC                            
0000B3AC                            Crab_SetAni:
0000B3AC 7000                       		moveq	#0,d0
0000B3AE 1628 0026                  		move.b	obAngle(a0),d3
0000B3B2 6B00                       		bmi.s	loc_96A4
0000B3B4 0C03 0006                  		cmpi.b	#6,d3
0000B3B8 6500                       		bcs.s	locret_96A2
0000B3BA 7001                       		moveq	#1,d0
0000B3BC 0828 0000 0022             		btst	#0,obStatus(a0)
0000B3C2 6600                       		bne.s	locret_96A2
0000B3C4 7002                       		moveq	#2,d0
0000B3C6                            
0000B3C6                            locret_96A2:
0000B3C6 4E75                       		rts	
0000B3C8                            ; ===========================================================================
0000B3C8                            
0000B3C8                            loc_96A4:
0000B3C8 0C03 00FA                  		cmpi.b	#-6,d3
0000B3CC 6200                       		bhi.s	locret_96B6
0000B3CE 7002                       		moveq	#2,d0
0000B3D0 0828 0000 0022             		btst	#0,obStatus(a0)
0000B3D6 6600                       		bne.s	locret_96B6
0000B3D8 7001                       		moveq	#1,d0
0000B3DA                            
0000B3DA                            locret_96B6:
0000B3DA 4E75                       		rts	
0000B3DC                            ; End of function Crab_SetAni
0000B3DC                            
0000B3DC                            ; ===========================================================================
0000B3DC                            
0000B3DC                            Crab_Delete:	; Routine 4
0000B3DC 6100 0000                  		bsr.w	DeleteObject
0000B3E0 4E75                       		rts	
0000B3E2                            ; ===========================================================================
0000B3E2                            ; ---------------------------------------------------------------------------
0000B3E2                            ; Sub-object - missile that the	Crabmeat throws
0000B3E2                            ; ---------------------------------------------------------------------------
0000B3E2                            
0000B3E2                            Crab_BallMain:	; Routine 6
0000B3E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B3E6 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B3EE 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B3F4 117C 0004 0001             		move.b	#4,obRender(a0)
0000B3FA 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B400 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B406 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B40C 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B412 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B418                            
0000B418                            Crab_BallMove:	; Routine 8
0000B418 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B41E 6100 0000                  		bsr.w	AnimateSprite
0000B422 6100 0000                  		bsr.w	ObjectFall
0000B426 6100 0000                  		bsr.w	DisplaySprite
0000B42A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B42E 0640 00E0                  		addi.w	#$E0,d0
0000B432 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B436 6500                       		bcs.s	@delete		; if yes, branch
0000B438 4E75                       		rts	
0000B43A                            
0000B43A                            	@delete:
0000B43A 6000 0000                  		bra.w	DeleteObject
0000B43A 6000 0000                  		bra.w	DeleteObject
0000B43E                            		include	"_anim\Crabmeat.asm"
0000B43E                            ; ---------------------------------------------------------------------------
0000B43E                            ; Animation script - Crabmeat enemy
0000B43E                            ; ---------------------------------------------------------------------------
0000B43E 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B444 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B44A 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B44E 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B452 00                         		even
0000B452 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B456 00                         		even
0000B456 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B45A 00                         		even
0000B45A 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B460 00                         		even
0000B460 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B466 00                         		even
0000B466 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B46C 00                         		even
0000B46C 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B470 00                         		even
0000B470 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B474                            		even
0000B474                            		even
0000B474                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B474                            ; ---------------------------------------------------------------------------
0000B474                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B474                            ; ---------------------------------------------------------------------------
0000B474                            Map_Crab_internal:
0000B474 0000                       		dc.w @stand-Map_Crab_internal
0000B476 0000                       		dc.w @walk-Map_Crab_internal
0000B478 0000                       		dc.w @slope1-Map_Crab_internal
0000B47A 0000                       		dc.w @slope2-Map_Crab_internal
0000B47C 0000                       		dc.w @firing-Map_Crab_internal
0000B47E 0000                       		dc.w @ball1-Map_Crab_internal
0000B480 0000                       		dc.w @ball2-Map_Crab_internal
0000B482 04                         @stand:		dc.b 4
0000B483 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B488 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B48D 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B492 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B497 04                         @walk:		dc.b 4
0000B498 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B49D F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B4A2 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B4A7 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B4AC 04                         @slope1:	dc.b 4
0000B4AD EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B4B2 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B4B7 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B4BC FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B4C1 04                         @slope2:	dc.b 4
0000B4C2 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B4C7 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B4CC FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B4D1 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B4D6 06                         @firing:	dc.b 6
0000B4D7 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B4DC F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B4E1 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B4E6 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B4EB 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B4F0 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B4F5 01                         @ball1:		dc.b 1
0000B4F6 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B4FB 01                         @ball2:		dc.b 1
0000B4FC F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B502 00                         		even
0000B502 00                         		even
0000B502                            		include	"_incObj\06 Mozzietron.asm"
0000B502                            ; ===========================================================================
0000B502                            ; ---------------------------------------------------------------------------
0000B502                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B502                            ; ---------------------------------------------------------------------------
0000B502                            
0000B502                            Mozzietron:					; XREF: Obj_Index
0000B502 7000                       		moveq	#0,d0
0000B504 1028 0024                  		move.b	$24(a0),d0
0000B508 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B50C 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B510                            ; ===========================================================================
0000B510 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B512 0000                       		dc.w MozAction-MozIndex
0000B514 0000                       		dc.w MozDelete-MozIndex
0000B516                            ; ===========================================================================
0000B516                            
0000B516                            MozMain:				; XREF: MozIndex
0000B516 5428 0024                  		addq.b	#2,$24(a0)
0000B51A 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B522 317C 0444 0002             		move.w	#$444,2(a0)
0000B528 117C 0004 0001             		move.b	#4,1(a0)
0000B52E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B534 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B53A 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B540                            MozAction:				; XREF: MozIndex
0000B540 7000                       		moveq	#0,d0
0000B542 1028 0025                  		move.b	$25(a0),d0
0000B546 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B54A 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B54E 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B554 6100 0000                  		bsr.w	AnimateSprite
0000B558 6000 0000                  		bra.w	RememberState
0000B55C                            ; ===========================================================================
0000B55C 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B55E 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B560 0000                       		dc.w MozPinned-MozIndex2
0000B562                            ; ===========================================================================
0000B562                            
0000B562                            MozMove:				; XREF: MozIndex2
0000B562 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B566 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B568 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B56E 6600                       		bne.s	MozFire	; if yes, branch
0000B570 5428 0025                  		addq.b	#2,$25(a0)
0000B574 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B57A 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B580 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B586 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B58C 6600                       		bne.s	locret_986C	; if not, branch
0000B58E 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B592                            
0000B592                            locret_986C:
0000B592 4E75                       		rts	
0000B594                            ; ===========================================================================
0000B594                            
0000B594                            MozFire:				; XREF: MozMove
0000B594 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B59A 6100 0000                  		bsr.w	ObjectFall
0000B59E 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B5A4 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B5A6 6A00                       		bpl.s   @return ; if yes, branch 
0000B5A8 303C 00B6                  		move.w    #$B6,d0
0000B5AC 4EB9 0000 12A0             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B5B2 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B5B8 D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B5BC 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B5C0 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B5C4                            		@return:
0000B5C4 4E75                       	    		rts
0000B5C6                            		
0000B5C6                            
0000B5C6                            ; ===========================================================================
0000B5C6                            
0000B5C6                            MozPinned:
0000B5C6 4E75                               rts
0000B5C8                                    
0000B5C8                            ; ===========================================================================
0000B5C8                            
0000B5C8                            MozChkDel:				; XREF: Obj55_DropFly
0000B5C8 4A28 0001                  		tst.b	1(a0)
0000B5CC 6A00 0000                  		bpl.w	DeleteObject
0000B5D0 4E75                       		rts	
0000B5D2                            ; ===========================================================================
0000B5D2                            
0000B5D2                            MozChkNrSonic:			; XREF: MozIndex2
0000B5D2                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B5D2 6B00                       		bmi.s	MozChgDir
0000B5D4 6100 0000                  		bsr.w	SpeedToPos
0000B5D8 4A28 0034                  		tst.b	$34(a0)
0000B5DC 6600                       		bne.s	locret_992A
0000B5DE 3038 D008                  		move.w	($FFFFD008).w,d0
0000B5E2 9068 0008                  		sub.w	8(a0),d0
0000B5E6 6A00                       		bpl.s	MozSetNrSonic
0000B5E8 4440                       		neg.w	d0
0000B5EA                            
0000B5EA                            MozSetNrSonic:
0000B5EA 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B5EE 6400                       		bcc.s	locret_992A	; if not, branch
0000B5F0 4A28 0001                  		tst.b	1(a0)
0000B5F4 6A00                       		bpl.s	locret_992A
0000B5F6 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B5FC 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B602 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B608 6000                       		bra.s	MozStop
0000B60A                            ; ===========================================================================
0000B60A                            
0000B60A                            MozChgDir:				; XREF: MozChkNrSonic
0000B60A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B610 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B616 317C 003B 0032             		move.w	#59,$32(a0)
0000B61C                            
0000B61C                            MozStop:				; XREF: MozSetNrSonic
0000B61C 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B620 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B626 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B62C                            
0000B62C                            locret_992A:
0000B62C 4E75                       		rts	
0000B62E                            ; ===========================================================================
0000B62E                            
0000B62E                            MozDelete:				; XREF: MozIndex
0000B62E 6100 0000                  		bsr.w	DeleteObject
0000B632 4E75                       		rts	
0000B632 4E75                       		rts	
0000B634                            		include	"_incObj\22 Buzz Bomber.asm"
0000B634                            ; ===========================================================================
0000B634                            ; ---------------------------------------------------------------------------
0000B634                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B634                            ; ---------------------------------------------------------------------------
0000B634                            
0000B634                            BuzzBomber:
0000B634 7000                       		moveq	#0,d0
0000B636 1028 0024                  		move.b	obRoutine(a0),d0
0000B63A 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B63E 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B642                            ; ===========================================================================
0000B642 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B644 0000                       		dc.w Buzz_Action-Buzz_Index
0000B646 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B648                            
0000B648 =00000032                  buzz_timedelay:	equ $32
0000B648 =00000034                  buzz_buzzstatus:	equ $34
0000B648 =0000003C                  buzz_parent:	equ $3C
0000B648                            ; ===========================================================================
0000B648                            
0000B648                            Buzz_Main:	; Routine 0
0000B648 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B64C 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B654 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B65A 117C 0004 0001             		move.b	#4,obRender(a0)
0000B660 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B666 117C 0008 0020             		move.b	#8,obColType(a0)
0000B66C 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B672                            
0000B672                            Buzz_Action:	; Routine 2
0000B672 7000                       		moveq	#0,d0
0000B674 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B678 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B67C 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B680 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B686 6100 0000                  		bsr.w	AnimateSprite
0000B68A 6000 0000                  		bra.w	RememberState
0000B68E                            ; ===========================================================================
0000B68E 0000                       @index:		dc.w @move-@index
0000B690 0000                       		dc.w @chknearsonic-@index
0000B692                            ; ===========================================================================
0000B692                            
0000B692                            @move:
0000B692 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B696 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B698 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B69E 6600                       		bne.s	@fire		; if yes, branch
0000B6A0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B6A4 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B6AA 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B6B0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B6B6 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B6BC 6600                       		bne.s	@noflip		; if not, branch
0000B6BE 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B6C2                            
0000B6C2                            	@noflip:
0000B6C2 4E75                       		rts	
0000B6C4                            ; ===========================================================================
0000B6C4                            
0000B6C4                            	@fire:
0000B6C4 6100 0000                  		bsr.w	FindFreeObj
0000B6C8 6600                       		bne.s	@fail
0000B6CA 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B6CE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B6D4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B6DA 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B6E0 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B6E6 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B6EC 303C 0018                  		move.w	#$18,d0
0000B6F0 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B6F6 6600                       		bne.s	@noflip2	; if not, branch
0000B6F8 4440                       		neg.w	d0
0000B6FA 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B6FE                            
0000B6FE                            	@noflip2:
0000B6FE D169 0008                  		add.w	d0,obX(a1)
0000B702 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B708 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B70E 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B712 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B718 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B71E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B724                            
0000B724                            	@fail:
0000B724 4E75                       		rts	
0000B726                            ; ===========================================================================
0000B726                            
0000B726                            @chknearsonic:
0000B726 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B72A 6B00                       		bmi.s	@chgdirection
0000B72C 6100 0000                  		bsr.w	SpeedToPos
0000B730 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B734 6600                       		bne.s	@keepgoing
0000B736 3038 D008                  		move.w	(v_player+obX).w,d0
0000B73A 9068 0008                  		sub.w	obX(a0),d0
0000B73E 6A00                       		bpl.s	@isleft
0000B740 4440                       		neg.w	d0
0000B742                            
0000B742                            	@isleft:
0000B742 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B746 6400                       		bcc.s	@keepgoing	; if not, branch
0000B748 4A28 0001                  		tst.b	obRender(a0)
0000B74C 6A00                       		bpl.s	@keepgoing
0000B74E 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B754 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B75A 6000                       		bra.s	@stop
0000B75C                            ; ===========================================================================
0000B75C                            
0000B75C                            	@chgdirection:
0000B75C 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B762 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B768 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B76E                            
0000B76E                            	@stop:
0000B76E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B772 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B778 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B77E                            
0000B77E                            @keepgoing:
0000B77E 4E75                       		rts	
0000B780                            ; ===========================================================================
0000B780                            
0000B780                            Buzz_Delete:	; Routine 4
0000B780 6100 0000                  		bsr.w	DeleteObject
0000B784 4E75                       		rts	
0000B784 4E75                       		rts	
0000B786                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B786                            ; ---------------------------------------------------------------------------
0000B786                            ; Object 23 - missile that Buzz	Bomber throws
0000B786                            ; ---------------------------------------------------------------------------
0000B786                            
0000B786                            Missile:
0000B786 7000                       		moveq	#0,d0
0000B788 1028 0024                  		move.b	obRoutine(a0),d0
0000B78C 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B790 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B794                            ; ===========================================================================
0000B794 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B796 0000                       		dc.w Msl_Animate-Msl_Index
0000B798 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B79A 0000                       		dc.w Msl_Delete-Msl_Index
0000B79C 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B79E                            
0000B79E =0000003C                  msl_parent:	equ $3C
0000B79E                            ; ===========================================================================
0000B79E                            
0000B79E                            Msl_Main:	; Routine 0
0000B79E 5368 0032                  		subq.w	#1,$32(a0)
0000B7A2 6A00                       		bpl.s	Msl_ChkCancel
0000B7A4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B7A8 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B7B0 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B7B6 117C 0004 0001             		move.b	#4,obRender(a0)
0000B7BC 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B7C2 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B7C8 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B7CE 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B7D2 6700                       		beq.s	Msl_Animate	; if not, branch
0000B7D4                            
0000B7D4 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B7DA 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B7E0 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B7E6 6000                       		bra.s	Msl_Animate2
0000B7E8                            ; ===========================================================================
0000B7E8                            
0000B7E8                            Msl_Animate:	; Routine 2
0000B7E8 6100                       		bsr.s	Msl_ChkCancel
0000B7EA 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B7F0 6100 0000                  		bsr.w	AnimateSprite
0000B7F4 6000 0000                  		bra.w	DisplaySprite
0000B7F8                            
0000B7F8                            ; ---------------------------------------------------------------------------
0000B7F8                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B7F8                            ; destroyed, and if it has, then cancel	the missile
0000B7F8                            ; ---------------------------------------------------------------------------
0000B7F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7F8                            
0000B7F8                            
0000B7F8                            Msl_ChkCancel:
0000B7F8 2268 003C                  		movea.l	msl_parent(a0),a1
0000B7FC 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B800 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B802 4E75                       		rts	
0000B804                            ; End of function Msl_ChkCancel
0000B804                            
0000B804                            ; ===========================================================================
0000B804                            
0000B804                            Msl_FromBuzz:	; Routine 4
0000B804 0828 0007 0022             		btst	#7,obStatus(a0)
0000B80A 6600                       		bne.s	@explode
0000B80C 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B812 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B818 6100 0000                  		bsr.w	SpeedToPos
0000B81C 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B822 6100 0000                  		bsr.w	AnimateSprite
0000B826 6100 0000                  		bsr.w	DisplaySprite
0000B82A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B82E 0640 00E0                  		addi.w	#$E0,d0
0000B832 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B836 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B838 4E75                       		rts	
0000B83A                            ; ===========================================================================
0000B83A                            
0000B83A                            	@explode:
0000B83A 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B83E 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B844 6000 F1D8                  		bra.w	MissileDissolve
0000B848                            ; ===========================================================================
0000B848                            
0000B848                            Msl_Delete:	; Routine 6
0000B848 6100 0000                  		bsr.w	DeleteObject
0000B84C 4E75                       		rts	
0000B84E                            ; ===========================================================================
0000B84E                            
0000B84E                            Msl_FromNewt:	; Routine 8
0000B84E 4A28 0001                  		tst.b	obRender(a0)
0000B852 6AF4                       		bpl.s	Msl_Delete
0000B854 6100 0000                  		bsr.w	SpeedToPos
0000B858                            
0000B858                            Msl_Animate2:
0000B858 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B85E 6100 0000                  		bsr.w	AnimateSprite
0000B862 6100 0000                  		bsr.w	DisplaySprite
0000B866 4E75                       		rts	
0000B866 4E75                       		rts	
0000B868                            		include	"_anim\Mozzietron.asm"
0000B868                            ; ---------------------------------------------------------------------------
0000B868                            ; Animation script - Buzz Bomber enemy
0000B868                            ; ---------------------------------------------------------------------------
0000B868 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B86A 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B86C 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B86E 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B872 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B876 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B87E 00                         		even
0000B87E 00                         		even
0000B87E                            		include	"_anim\Buzz Bomber.asm"
0000B87E                            ; ---------------------------------------------------------------------------
0000B87E                            ; Animation script - Buzz Bomber enemy
0000B87E                            ; ---------------------------------------------------------------------------
0000B87E 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B880 0000                       		dc.w @fly2-Ani_Buzz
0000B882 0000                       		dc.w @fires-Ani_Buzz
0000B884 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B888 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B88C 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B890                            		even
0000B890                            		even
0000B890                            		include	"_anim\Buzz Bomber Missile.asm"
0000B890                            ; ---------------------------------------------------------------------------
0000B890                            ; Animation script - missile that Buzz Bomber throws
0000B890                            ; ---------------------------------------------------------------------------
0000B890 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B892 0000                       		dc.w @missile-Ani_Missile
0000B894 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B898 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B89C                            		even
0000B89C                            		even
0000B89C                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B89C                            ; --------------------------------------------------------------------------------
0000B89C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B89C                            ; --------------------------------------------------------------------------------
0000B89C                            
0000B89C                            SME_qvHIs:	
0000B89C 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B8A0 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B8A4 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B8A8 02                         SME_qvHIs_C:	dc.b 2	
0000B8A9 FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B8AE ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B8B3 01                         SME_qvHIs_17:	dc.b 1	
0000B8B4 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B8B9 02                         SME_qvHIs_1D:	dc.b 2	
0000B8BA E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B8BF F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B8C4 03                         SME_qvHIs_28:	dc.b 3	
0000B8C5 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B8CA E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B8CF FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B8D4 04                         SME_qvHIs_38:	dc.b 4	
0000B8D5 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B8DA F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B8DF F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B8E4 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B8E9 04                         SME_qvHIs_4D:	dc.b 4	
0000B8EA E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B8EF F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B8F4 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B8F9 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B8FE                            		even
0000B8FE                            		even
0000B8FE                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B8FE                            ; --------------------------------------------------------------------------------
0000B8FE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B8FE                            ; --------------------------------------------------------------------------------
0000B8FE                            
0000B8FE                            SME_yccqJ:	
0000B8FE 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B902 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B906 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B90A 06                         SME_yccqJ_C:	dc.b 6	
0000B90B F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B910 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B915 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B91A 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B91F EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B924 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B929 06                         SME_yccqJ_2B:	dc.b 6	
0000B92A F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B92F F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B934 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B939 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B93E F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B943 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B948 06                         SME_yccqJ_4A:	dc.b 6	
0000B949 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B94E F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B953 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B958 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B95D EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B962 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B967 06                         SME_yccqJ_69:	dc.b 6	
0000B968 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B96D F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B972 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B977 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B97C F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B981 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B986 07                         SME_yccqJ_88:	dc.b 7	
0000B987 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B98C 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B991 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B996 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B99B 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B9A0 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B9A5 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B9AA 04                         SME_yccqJ_AC:	dc.b 4	
0000B9AB F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B9B0 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B9B5 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B9BA 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B9C0 00                         		even
0000B9C0 00                         		even
0000B9C0                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B9C0                            ; ---------------------------------------------------------------------------
0000B9C0                            ; Sprite mappings - missile that Buzz Bomber throws
0000B9C0                            ; ---------------------------------------------------------------------------
0000B9C0                            Map_Missile_internal:
0000B9C0 0000                       		dc.w @Flare1-Map_Missile_internal
0000B9C2 0000                       		dc.w @Flare2-Map_Missile_internal
0000B9C4 0000                       		dc.w @Ball1-Map_Missile_internal
0000B9C6 0000                       		dc.w @Ball2-Map_Missile_internal
0000B9C8 01                         @Flare1:	dc.b 1
0000B9C9 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B9CE 01                         @Flare2:	dc.b 1
0000B9CF F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B9D4 01                         @Ball1:		dc.b 1
0000B9D5 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B9DA 01                         @Ball2:		dc.b 1
0000B9DB F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B9E0                            		even
0000B9E0                            		even
0000B9E0                            
0000B9E0                            		include	"_incObj\25 & 37 Rings.asm"
0000B9E0                            ; ---------------------------------------------------------------------------
0000B9E0                            ; Object 25 - rings
0000B9E0                            ; ---------------------------------------------------------------------------
0000B9E0                            
0000B9E0                            Rings:
0000B9E0 7000                       		moveq	#0,d0
0000B9E2 1028 0024                  		move.b	obRoutine(a0),d0
0000B9E6 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B9EA 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B9EE                            ; ===========================================================================
0000B9EE                            Ring_Index:
0000B9EE 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B9F0 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B9F2 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B9F4 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B9F6 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B9F8 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B9FA 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B9FC 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B9FE 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000BA00                            
0000BA00 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000BA00 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000BA00 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000BA00 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000BA00 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000BA00 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000BA00 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000BA00 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000BA00 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000BA00                            ; ---------------------------------------------------------------------------
0000BA00                            ; Distances between rings (format: horizontal, vertical)
0000BA00                            ; ---------------------------------------------------------------------------
0000BA00 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000BA02 1800                       		dc.b $18, 0		; horizontal normal
0000BA04 2000                       		dc.b $20, 0		; horizontal wide
0000BA06 0010                       		dc.b 0,	$10		; vertical tight
0000BA08 0018                       		dc.b 0,	$18		; vertical normal
0000BA0A 0020                       		dc.b 0,	$20		; vertical wide
0000BA0C 1010                       		dc.b $10, $10		; diagonal
0000BA0E 1818                       		dc.b $18, $18
0000BA10 2020                       		dc.b $20, $20
0000BA12 F010                       		dc.b $F0, $10
0000BA14 E818                       		dc.b $E8, $18
0000BA16 E020                       		dc.b $E0, $20
0000BA18 1008                       		dc.b $10, 8
0000BA1A 1810                       		dc.b $18, $10
0000BA1C F008                       		dc.b $F0, 8
0000BA1E E810                       		dc.b $E8, $10
0000BA20                            ; ===========================================================================
0000BA20                            
0000BA20                            Ring_Main:	; Routine 0
0000BA20 45F8 FC00                  		lea	(v_objstate).w,a2
0000BA24 7000                       		moveq	#0,d0
0000BA26 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BA2A 45F2 0002                  		lea	2(a2,d0.w),a2
0000BA2E 1812                       		move.b	(a2),d4
0000BA30 1228 0028                  		move.b	obSubtype(a0),d1
0000BA34 1001                       		move.b	d1,d0
0000BA36 0241 0007                  		andi.w	#7,d1
0000BA3A 0C41 0007                  		cmpi.w	#7,d1
0000BA3E 6600                       		bne.s	loc_9B80
0000BA40 7206                       		moveq	#6,d1
0000BA42                            
0000BA42                            	loc_9B80:
0000BA42 4841                       		swap	d1
0000BA44 323C 0000                  		move.w	#0,d1
0000BA48 E808                       		lsr.b	#4,d0
0000BA4A D040                       		add.w	d0,d0
0000BA4C 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000BA50 4885                       		ext.w	d5
0000BA52 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000BA56 4886                       		ext.w	d6
0000BA58 2248                       		movea.l	a0,a1
0000BA5A 3428 0008                  		move.w	obX(a0),d2
0000BA5E 3628 000C                  		move.w	obY(a0),d3
0000BA62 E20C                       		lsr.b	#1,d4
0000BA64 6500                       		bcs.s	loc_9C02
0000BA66 0892 0007                  		bclr	#7,(a2)
0000BA6A 6000                       		bra.s	loc_9BBA
0000BA6C                            ; ===========================================================================
0000BA6C                            
0000BA6C                            Ring_MakeRings:
0000BA6C 4841                       		swap	d1
0000BA6E E20C                       		lsr.b	#1,d4
0000BA70 6500                       		bcs.s	loc_9C02
0000BA72 0892 0007                  		bclr	#7,(a2)
0000BA76 6100 0000                  		bsr.w	FindFreeObj
0000BA7A 6600                       		bne.s	loc_9C0E
0000BA7C                            
0000BA7C                            loc_9BBA:
0000BA7C 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000BA80 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BA84 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000BA88 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000BA8E 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000BA92 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BA9A 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BAA0 137C 0004 0001             		move.b	#4,obRender(a1)
0000BAA6 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000BAAC 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BAB2 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BAB8 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000BABE 1341 0034                  		move.b	d1,$34(a1)
0000BAC2                            
0000BAC2                            loc_9C02:
0000BAC2 5241                       		addq.w	#1,d1
0000BAC4 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000BAC6 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000BAC8 4841                       		swap	d1
0000BACA 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000BACE                            
0000BACE                            loc_9C0E:
0000BACE 0812 0000                  		btst	#0,(a2)
0000BAD2 6600 0000                  		bne.w	DeleteObject
0000BAD6                            
0000BAD6                            Ring_Animate:	; Routine 2
0000BAD6 4A38 F5C9                  		tst.b	(v_gshield).w
0000BADA 6700                       		beq.s	@skip
0000BADC 4A28 0001                  		tst.b	obRender(a0)
0000BAE0 6A00                       		bpl.s	@skip
0000BAE2                            		
0000BAE2 43F8 D000                  		lea (v_player).w,a1
0000BAE6                            		
0000BAE6 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BAEA 9068 0008                  		sub.w	obX(a0),d0
0000BAEE 6A00                       		bpl.s	@a1
0000BAF0 4440                       		neg.w	d0
0000BAF2                            		
0000BAF2                            	@a1:
0000BAF2 0C40 0040                  		cmpi.w	#$40,d0
0000BAF6 6200                       		bhi.s	@skip
0000BAF8                            		
0000BAF8 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BAFC 9068 000C                  		sub.w	obY(a0),d0
0000BB00 6A00                       		bpl.s	@a2
0000BB02 4440                       		neg.w	d0
0000BB04                            		
0000BB04                            	@a2:
0000BB04 0C40 0040                  		cmpi.w	#$40,d0
0000BB08 6200                       		bhi.s	@skip
0000BB0A                            		
0000BB0A 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BB10 45F8 FC00                  		lea	(v_objstate).w,a2
0000BB14 7000                       		moveq	#0,d0
0000BB16 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BB1A 1228 0034                  		move.b	$34(a0),d1
0000BB1E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BB22                            		
0000BB22                            	@skip:
0000BB22 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000BB28 6100 0000                  		bsr.w	DisplaySprite
0000BB48 4E75                       		rts	
0000BB4A                            ; ===========================================================================
0000BB4A                            
0000BB4A                            Ring_Collect:	; Routine 4
0000BB4A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BB4E 117C 0000 0020             		move.b	#0,obColType(a0)
0000BB54 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000BB5A 6100 0000                  		bsr.w	CollectRing
0000BB5E 45F8 FC00                  		lea	(v_objstate).w,a2
0000BB62 7000                       		moveq	#0,d0
0000BB64 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BB68 1228 0034                  		move.b	$34(a0),d1
0000BB6C 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BB70                            
0000BB70                            Ring_Sparkle:	; Routine 6
0000BB70 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BB76 6100 0000                  		bsr.w	AnimateSprite
0000BB7A 6000 0000                  		bra.w	DisplaySprite
0000BB7E                            ; ===========================================================================
0000BB7E                            
0000BB7E                            Ring_Delete:	; Routine 8
0000BB7E 6000 0000                  		bra.w	DeleteObject
0000BB82                            
0000BB82                            Ring_Attract:	; Routine $A
0000BB82 4A38 F5C9                  		tst.b	(v_gshield).w
0000BB86 6600                       		bne.s	@skip
0000BB88 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000BB8C 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000BB92 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000BB98 6000                       		bra.s	@display
0000BB9A                            		
0000BB9A                            	@skip:
0000BB9A 323C 0030                  		move.w	#$30,d1	; horizontal
0000BB9E 3038 D008                  		move.w	(v_player+obX).w,d0
0000BBA2 B068 0008                  		cmp.w	obX(a0),d0
0000BBA6 6400                       		bcc.s	@a1
0000BBA8 4441                       		neg.w	d1
0000BBAA 4A68 0010                  		tst.w	obVelX(a0)
0000BBAE 6B00                       		bmi.s	@a2
0000BBB0 D241                       		add.w	d1,d1
0000BBB2 D241                       		add.w	d1,d1
0000BBB4 6000                       		bra.s	@a2
0000BBB6                            
0000BBB6                            	@a1:
0000BBB6 4A68 0010                  		tst.w	obVelX(a0)
0000BBBA 6A00                       		bpl.s	@a2
0000BBBC D241                       		add.w	d1,d1
0000BBBE D241                       		add.w	d1,d1
0000BBC0                            
0000BBC0                            	@a2:
0000BBC0 D368 0010                  		add.w	d1,obVelX(a0)
0000BBC4 323C 0030                  		move.w	#$30,d1	; vertical
0000BBC8 3038 D00C                  		move.w	(v_player+obY).w,d0
0000BBCC B068 000C                  		cmp.w	obY(a0),d0
0000BBD0 6400                       		bcc.s	@a3
0000BBD2 4441                       		neg.w	d1
0000BBD4 4A68 0012                  		tst.w	obVelY(a0)
0000BBD8 6B00                       		bmi.s	@a4
0000BBDA D241                       		add.w	d1,d1
0000BBDC D241                       		add.w	d1,d1
0000BBDE 6000                       		bra.s	@a4
0000BBE0                            
0000BBE0                            	@a3:
0000BBE0 4A68 0012                  		tst.w	obVelY(a0)
0000BBE4 6A00                       		bpl.s	@a4
0000BBE6 D241                       		add.w	d1,d1
0000BBE8 D241                       		add.w	d1,d1
0000BBEA                            
0000BBEA                            	@a4:
0000BBEA D368 0012                  		add.w	d1,obVelY(a0)
0000BBEE 6100 0000                  		bsr.w	SpeedToPos
0000BBF2                            		
0000BBF2                            	@display:
0000BBF2 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000BBF8 6000 0000                  		bra.w	DisplaySprite
0000BBFC                            
0000BBFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BBFC                            
0000BBFC                            
0000BBFC                            CollectRing:
0000BBFC 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000BC00 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000BC06 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000BC0A 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000BC10 6500                       		bcs.s	@playsnd	; if yes, branch
0000BC12 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000BC18 6700                       		beq.s	@got100
0000BC1A 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000BC20 6500                       		bcs.s	@playsnd	; if yes, branch
0000BC22 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000BC28 6600                       		bne.s	@playsnd
0000BC2A                            
0000BC2A                            	@got100:
0000BC2A 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BC2E 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BC32 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000BC36                            		
0000BC36                            
0000BC36                            	@playsnd:
0000BC36 4EF9 0000 12A0             		jmp	(PlaySound_Special).l
0000BC3C                            ; End of function CollectRing
0000BC3C                            
0000BC3C                            ; ===========================================================================
0000BC3C                            ; ---------------------------------------------------------------------------
0000BC3C                            ; Object 37 - rings flying out of Sonic	when he's hit
0000BC3C                            ; ---------------------------------------------------------------------------
0000BC3C                            
0000BC3C                            RingLoss:
0000BC3C 7000                       		moveq	#0,d0
0000BC3E 1028 0024                  		move.b	obRoutine(a0),d0
0000BC42 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000BC46 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000BC4A                            ; ===========================================================================
0000BC4A 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000BC4C 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000BC4E 0000                       		dc.w RLoss_Collect-RLoss_Index
0000BC50 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000BC52 0000                       		dc.w RLoss_Delete-RLoss_Index
0000BC54                            ; ===========================================================================
0000BC54                            
0000BC54                            RLoss_Count:	; Routine 0
0000BC54 2248                       		movea.l	a0,a1
0000BC56 7A00                       		moveq	#0,d5
0000BC58 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000BC5C 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000BC62 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000BC64 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000BC68 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000BC6E 6700                               beq.s   @cont                       ; if not, branch
0000BC70 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000BC76 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000BC78                            @cont:
0000BC78 BA40                               cmp.w   d0,d5
0000BC7A 6500                               bcs.s   @belowmax
0000BC7C 3A00                               move.w  d0,d5
0000BC7E                            
0000BC7E                            @belowmax:
0000BC7E 5345                               subq.w  #1,d5
0000BC80 383C 0288                          move.w  #$288,d4
0000BC84 6000                       		bra.s	@makerings
0000BC86                            ; ===========================================================================
0000BC86                            
0000BC86                            	@loop:
0000BC86 6100 0000                  		bsr.w	FindFreeObj
0000BC8A 6600 0000                  		bne.w	@resetcounter
0000BC8E                            
0000BC8E                            @makerings:
0000BC8E 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000BC92 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BC96 137C 0008 0016             		move.b	#8,obHeight(a1)
0000BC9C 137C 0008 0017             		move.b	#8,obWidth(a1)
0000BCA2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BCA8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BCAE 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BCB6 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BCBC 137C 0004 0001             		move.b	#4,obRender(a1)
0000BCC2 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BCC8 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BCCE 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BCD2 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000BCD4 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BCD8 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BCDC 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000BCDE E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BCE0 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BCE2                            @skiphalvingvel:
0000BCE2 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BCE6 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BCEA 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BCEE                            
0000BCEE                            @resetcounter:
0000BCEE 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BCF4 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BCFA 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BD00 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BD02 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BD06 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BD14                            
0000BD14                            RLoss_Bounce:	; Routine 2
0000BD14 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BD1A 6100 0000                  		bsr.w	SpeedToPos
0000BD1E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BD24 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BD28 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BD2A 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BD2E BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BD32 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BD34 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BD3A                            	@skipbounceslow:
0000BD3A 6B00                       		bmi.s	@chkdel
0000BD3C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BD40 D007                       		add.b	d7,d0
0000BD42 0200 0003                  		andi.b	#3,d0
0000BD46 6600                       		bne.s	@chkdel
0000BD48 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BD4E 4A41                       		tst.w	d1
0000BD50 6A00                       		bpl.s	@chkdel
0000BD52 D368 000C                  		add.w	d1,obY(a0)
0000BD56 3028 0012                  		move.w	obVelY(a0),d0
0000BD5A E440                       		asr.w	#2,d0
0000BD5C 9168 0012                  		sub.w	d0,obVelY(a0)
0000BD60 4468 0012                  		neg.w	obVelY(a0)
0000BD64                            
0000BD64                            	@chkdel:
0000BD64 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BD68 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BD6C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BD70 0640 00E0                  		addi.w	#$E0,d0
0000BD74 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BD78 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BD7C 4A38 F5C9                  		tst.b	(v_gshield).w
0000BD80 6700                       		beq.s	@skip
0000BD82 4A28 0001                  		tst.b	obRender(a0)
0000BD86 6A00                       		bpl.s	@skip
0000BD88                            		
0000BD88 43F8 D000                  		lea (v_player).w,a1
0000BD8C                            		
0000BD8C 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BD90 9068 0008                  		sub.w	obX(a0),d0
0000BD94 6A00                       		bpl.s	@a1
0000BD96 4440                       		neg.w	d0
0000BD98                            		
0000BD98                            	@a1:
0000BD98 0C40 00A0                  		cmpi.w	#$A0,d0
0000BD9C 6200                       		bhi.s	@skip
0000BD9E                            		
0000BD9E 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BDA2 9068 000C                  		sub.w	obY(a0),d0
0000BDA6 6A00                       		bpl.s	@a2
0000BDA8 4440                       		neg.w	d0
0000BDAA                            		
0000BDAA                            	@a2:
0000BDAA 0C40 00A0                  		cmpi.w	#$A0,d0
0000BDAE 6200                       		bhi.s	@skip
0000BDB0                            		
0000BDB0 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BDB6 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BDBA                            		
0000BDBA                            	@skip:		
0000BDBA 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BDBE D2FC 0080                          adda.w  #$80,a1
0000BDC2 0C51 007E                          cmpi.w  #$7E,(a1)
0000BDC6 6400                               bcc.s   @cont
0000BDC8 5451                               addq.w  #2,(a1)
0000BDCA D2D1                               adda.w  (a1),a1
0000BDCC 3288                               move.w  a0,(a1)
0000BDCE                            		
0000BDCE                            	@cont:
0000BDCE 4E75                               rts		
0000BDD0                            ; ===========================================================================
0000BDD0                            
0000BDD0                            RLoss_Collect:	; Routine 4
0000BDD0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BDD4 117C 0000 0020             		move.b	#0,obColType(a0)
0000BDDA 6100 FE20                  		bsr.w	CollectRing
0000BDDE                            
0000BDDE                            RLoss_Sparkle:	; Routine 6
0000BDDE 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BDE4 6100 0000                  		bsr.w	AnimateSprite
0000BDE8 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BDEC 0C51 007E                          cmpi.w  #$7E,(a1)
0000BDF0 6400                               bcc.s   @cont
0000BDF2 5451                               addq.w  #2,(a1)
0000BDF4 D2D1                               adda.w  (a1),a1
0000BDF6 3288                               move.w  a0,(a1)
0000BDF8                            			
0000BDF8                            	@cont:
0000BDF8 4E75                               rts
0000BDFA                            ; ===========================================================================
0000BDFA                            
0000BDFA                            RLoss_Delete:	; Routine 8
0000BDFA 6000 0000                  		bra.w	DeleteObject
0000BDFE                            
0000BDFE                            ; ----------------------------------------------------------------------------------------------
0000BDFE                            ; Ring Spawn Array 
0000BDFE                            ; ----------------------------------------------------------------------------------------------
0000BDFE                            
0000BDFE FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BE0E FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BE1E FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BE2E FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BE3E FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BE4E FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BE5E FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BE6E FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BE7E                                            even
0000BE7E                            ; ===========================================================================
0000BE7E                            ; -------------------------------------------------------------------------------------
0000BE7E                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BE7E                            ; -------------------------------------------------------------------------------------
0000BE7E                            
0000BE7E                            SpillRingData_Water:
0000BE7E FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BE8E FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BE9E FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BEAE FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BEBE FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BECE FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BEDE FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BEEE FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BEFE                                            even
0000BEFE                            ; ===========================================================================				
0000BEFE                            ; ===========================================================================				
0000BEFE                            		include	"_incObj\4B Giant Ring.asm"
0000BEFE                            ; ---------------------------------------------------------------------------
0000BEFE                            ; Object 4B - giant ring for entry to special stage
0000BEFE                            ; ---------------------------------------------------------------------------
0000BEFE                            
0000BEFE                            GiantRing:
0000BEFE 7000                       		moveq	#0,d0
0000BF00 1028 0024                  		move.b	obRoutine(a0),d0
0000BF04 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BF08 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BF0C                            ; ===========================================================================
0000BF0C 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BF0E 0000                       		dc.w GRing_Animate-GRing_Index
0000BF10 0000                       		dc.w GRing_Collect-GRing_Index
0000BF12 0000                       		dc.w GRing_Delete-GRing_Index
0000BF14                            ; ===========================================================================
0000BF14                            
0000BF14                            GRing_Main:    ; Routine 0
0000BF14 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BF1C 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BF22 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BF28 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BF2E 4A28 0001                  		tst.b	obRender(a0)
0000BF32 6A00                       		bpl.s	GRing_Animate
0000BF34 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BF3A 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BF3E 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BF44 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BF46                            
0000BF46 4E75                       		rts    
0000BF48                            ; ===========================================================================
0000BF48                            
0000BF48                            GRing_Okay:
0000BF48 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF4C 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BF52 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BF58 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BF5E                            
0000BF5E                            GRing_Animate:	; Routine 2
0000BF5E 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BF82 6000 0000                  		bra.w	DisplaySprite
0000BF86                            ; ===========================================================================
0000BF86                            
0000BF86                            GRing_Collect:	; Routine 4
0000BF86 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BF8A 117C 0000 0020             		move.b	#0,obColType(a0)
0000BF90 6100 0000                  		bsr.w	FindFreeObj
0000BF94 6600 0000                  		bne.w	GRing_PlaySnd
0000BF98 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BF9C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BFA2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BFA8 2348 003C                  		move.l	a0,$3C(a1)
0000BFAC 3038 D008                  		move.w	(v_player+obX).w,d0
0000BFB0 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BFB4 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BFB6 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BFBC 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BFC2 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BFC8                            		
0000BFC8                            GRing_PlaySnd:
0000BFD2 608A                       		bra.s	GRing_Animate
0000BFD4                            ; ===========================================================================
0000BFD4                            
0000BFD4                            GRing_Delete:	; Routine 6
0000BFD4 6000 0000                  		bra.w	DeleteObject
0000BFD4 6000 0000                  		bra.w	DeleteObject
0000BFD8                            		include	"_incObj\7C Ring Flash.asm"
0000BFD8                            ; ---------------------------------------------------------------------------
0000BFD8                            ; Object 7C - flash effect when	you collect the	giant ring
0000BFD8                            ; ---------------------------------------------------------------------------
0000BFD8                            
0000BFD8                            RingFlash:
0000BFD8 7000                       		moveq	#0,d0
0000BFDA 1028 0024                  		move.b	obRoutine(a0),d0
0000BFDE 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BFE2 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BFE6                            ; ===========================================================================
0000BFE6 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BFE8 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BFEA 0000                       		dc.w Flash_Delete-Flash_Index
0000BFEC                            ; ===========================================================================
0000BFEC                            
0000BFEC                            Flash_Main:	; Routine 0
0000BFEC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BFF0 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BFF8 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BFFE 0028 0004 0001             		ori.b	#4,obRender(a0)
0000C004 317C 0000 0018             		move.w	#0,obPriority(a0)
0000C00A 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000C010 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000C016                            
0000C016                            Flash_ChkDel:	; Routine 2
0000C016 6100                       		bsr.s	Flash_Collect
0000C036 6000 0000                  		bra.w	DisplaySprite
0000C03A                            
0000C03A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C03A                            
0000C03A                            
0000C03A                            Flash_Collect:
0000C03A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000C03E 6A00                       		bpl.s	locret_9F76
0000C040 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000C046 5228 001A                  		addq.b	#1,obFrame(a0)
0000C04A 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000C050 6400                       		bcc.s	Flash_End	; if yes, branch
0000C052 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000C058 6600                       		bne.s	locret_9F76	; if not, branch
0000C05A 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000C05E 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000C064 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000C06A 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000C070 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000C074 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000C078                            
0000C078                            locret_9F76:
0000C078 4E75                       		rts	
0000C07A                            ; ===========================================================================
0000C07A                            
0000C07A                            Flash_End:
0000C07A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C07E 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000C084 588F                       		addq.l	#4,sp
0000C086 4E75                       		rts	
0000C088                            ; End of function Flash_Collect
0000C088                            
0000C088                            ; ===========================================================================
0000C088                            
0000C088                            Flash_Delete:	; Routine 4
0000C088 6000 0000                  		bra.w	DeleteObject
0000C088 6000 0000                  		bra.w	DeleteObject
0000C08C                            
0000C08C                            		include	"_anim\Rings.asm"
0000C08C                            ; ---------------------------------------------------------------------------
0000C08C                            ; Animation script - ring
0000C08C                            ; ---------------------------------------------------------------------------
0000C08C 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000C08E 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000C094                            		even
0000C094                            		even
0000C094                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000C094                            ; --------------------------------------------------------------------------------
0000C094                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C094                            ; --------------------------------------------------------------------------------
0000C094                            
0000C094                            SME_aSMQh:	
0000C094 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000C098 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000C09C 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000C0A0 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000C0A4 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000C0A8 01                         SME_aSMQh_14:	dc.b 1	
0000C0A9 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000C0AE 01                         SME_aSMQh_1A:	dc.b 1	
0000C0AF F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000C0B4 01                         SME_aSMQh_20:	dc.b 1	
0000C0B5 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000C0BA 01                         SME_aSMQh_26:	dc.b 1	
0000C0BB F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000C0C0 01                         SME_aSMQh_2C:	dc.b 1	
0000C0C1 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000C0C6 01                         SME_aSMQh_32:	dc.b 1	
0000C0C7 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000C0CC 01                         SME_aSMQh_38:	dc.b 1	
0000C0CD F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000C0D2 01                         SME_aSMQh_3E:	dc.b 1	
0000C0D3 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000C0D8 01                         SME_aSMQh_44:	dc.b 1	
0000C0D9 F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000C0DE 01                         SME_aSMQh_4A:	dc.b 1	
0000C0DF F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000C0E4                            		even
0000C0E4                            		even
0000C0E4                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000C0E4                            ; ---------------------------------------------------------------------------
0000C0E4                            ; Sprite mappings - giant ring
0000C0E4                            ; ---------------------------------------------------------------------------
0000C0E4                            Map_GRing_internal:
0000C0E4 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000C0E6 0000                       		dc.w byte_A00D-Map_GRing_internal
0000C0E8 0000                       		dc.w byte_A036-Map_GRing_internal
0000C0EA 0000                       		dc.w byte_A04B-Map_GRing_internal
0000C0EC 0A                         byte_9FDA:	dc.b $A
0000C0ED E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000C0F2 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000C0F7 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000C0FC E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000C101 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000C106 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000C10B 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000C110 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000C115 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000C11A 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000C11F 08                         byte_A00D:	dc.b 8
0000C120 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000C125 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000C12A E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000C12F F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000C134 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000C139 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000C13E 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000C143 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000C148 04                         byte_A036:	dc.b 4
0000C149 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000C14E E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000C153 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000C158 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000C15D 08                         byte_A04B:	dc.b 8
0000C15E E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000C163 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000C168 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000C16D F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000C172 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000C177 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000C17C 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000C181 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000C186                            		even
0000C186                            		even
0000C186                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000C186                            ; ---------------------------------------------------------------------------
0000C186                            ; Sprite mappings - flash effect when you collect the giant ring
0000C186                            ; ---------------------------------------------------------------------------
0000C186                            Map_Flash_internal:
0000C186 0000                       		dc.w byte_A084-Map_Flash_internal
0000C188 0000                       		dc.w byte_A08F-Map_Flash_internal
0000C18A 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000C18C 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000C18E 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000C190 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000C192 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000C194 0000                       		dc.w byte_A103-Map_Flash_internal
0000C196 02                         byte_A084:	dc.b 2
0000C197 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000C19C 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000C1A1 04                         byte_A08F:	dc.b 4
0000C1A2 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000C1A7 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000C1AC 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000C1B1 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000C1B6 04                         byte_A0A4:	dc.b 4
0000C1B7 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000C1BC E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000C1C1 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000C1C6 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000C1CB 04                         byte_A0B9:	dc.b 4
0000C1CC E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000C1D1 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000C1D6 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000C1DB 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000C1E0 04                         byte_A0CE:	dc.b 4
0000C1E1 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000C1E6 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000C1EB 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000C1F0 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000C1F5 04                         byte_A0E3:	dc.b 4
0000C1F6 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000C1FB E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000C200 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000C205 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000C20A 02                         byte_A0F8:	dc.b 2
0000C20B E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000C210 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000C215 04                         byte_A103:	dc.b 4
0000C216 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000C21B E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000C220 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000C225 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000C22A                            		even
0000C22A                            		even
0000C22A                            		include	"_incObj\26 Monitor.asm"
0000C22A                            ; ---------------------------------------------------------------------------
0000C22A                            ; Object 26 - monitors
0000C22A                            ; ---------------------------------------------------------------------------
0000C22A                            
0000C22A                            Monitor:
0000C22A 7000                       		moveq	#0,d0
0000C22C 1028 0024                  		move.b	obRoutine(a0),d0
0000C230 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000C234 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000C238                            ; ===========================================================================
0000C238 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000C23A 0000                       		dc.w Mon_Solid-Mon_Index
0000C23C 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000C23E 0000                       		dc.w Mon_Animate-Mon_Index
0000C240 0000                       		dc.w Mon_Display-Mon_Index
0000C242                            ; ===========================================================================
0000C242                            
0000C242                            Mon_Main:	; Routine 0
0000C242 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C246 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000C24C 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000C252 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000C25A 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C260 117C 0004 0001             		move.b	#4,obRender(a0)
0000C266 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C26C 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000C272 45F8 FC00                  		lea	(v_objstate).w,a2
0000C276 7000                       		moveq	#0,d0
0000C278 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C27C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C282 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000C288 6700                       		beq.s	@notbroken	; if not, branch
0000C28A 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000C290 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000C296 4E75                       		rts	
0000C298                            ; ===========================================================================
0000C298                            
0000C298                            	@notbroken:
0000C298 117C 0046 0020             		move.b	#$46,obColType(a0)
0000C29E 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000C2A4                            
0000C2A4                            Mon_Solid:	; Routine 2
0000C2A4 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000C2A8 6700                       		beq.s	@normal		; if not, branch
0000C2AA 5500                       		subq.b	#2,d0
0000C2AC 6600                       		bne.s	@fall
0000C2AE                            
0000C2AE                            		; 2nd Routine 2
0000C2AE 7200                       		moveq	#0,d1
0000C2B0 1228 0014                  		move.b	obActWid(a0),d1
0000C2B4 0641 000B                  		addi.w	#$B,d1
0000C2B8 6100 CFEC                  		bsr.w	ExitPlatform
0000C2BC 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000C2C2 6600 0000                  		bne.w	@ontop		; if yes, branch
0000C2C6 4228 0025                  		clr.b	ob2ndRout(a0)
0000C2CA 6000 0000                  		bra.w	Mon_Animate
0000C2CE                            ; ===========================================================================
0000C2CE                            
0000C2CE                            	@ontop:
0000C2CE 363C 0010                  		move.w	#$10,d3
0000C2D2 3428 0008                  		move.w	obX(a0),d2
0000C2D6 6100 D52C                  		bsr.w	MvSonicOnPtfm
0000C2DA 6000 0000                  		bra.w	Mon_Animate
0000C2DE                            ; ===========================================================================
0000C2DE                            
0000C2DE                            @fall:		; 2nd Routine 4
0000C2DE 6100 0000                  		bsr.w	ObjectFall
0000C2E2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C2E8 4A41                       		tst.w	d1
0000C2EA 6A00 0000                  		bpl.w	Mon_Animate
0000C2EE D368 000C                  		add.w	d1,obY(a0)
0000C2F2 4268 0012                  		clr.w	obVelY(a0)
0000C2F6 4228 0025                  		clr.b	ob2ndRout(a0)
0000C2FA 6000 0000                  		bra.w	Mon_Animate
0000C2FE                            ; ===========================================================================
0000C2FE                            
0000C2FE                            @normal:	; 2nd Routine 0
0000C2FE 323C 001A                  		move.w	#$1A,d1
0000C302 343C 000F                  		move.w	#$F,d2
0000C306 6100 0000                  		bsr.w	Mon_SolidSides
0000C30A 6700 0000                  		beq.w	loc_A25C
0000C30E 4A69 0012                  		tst.w	obVelY(a1)
0000C312 6B00                       		bmi.s	loc_A20A
0000C314 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C31A 6700                       		beq.s	loc_A25C	; if yes, branch
0000C31C 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C322 6700                       		beq.s	loc_A25C	; if yes, branch
0000C324 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C32A 6700                       		beq.s	loc_A25C	; if yes, branch
0000C32C                            
0000C32C                            loc_A20A:
0000C32C 4A41                       		tst.w	d1
0000C32E 6A00                       		bpl.s	loc_A220
0000C330 9769 000C                  		sub.w	d3,obY(a1)
0000C334 6100 CE5E                  		bsr.w	loc_74AE
0000C338 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C33E 6000 0000                  		bra.w	Mon_Animate
0000C342                            ; ===========================================================================
0000C342                            
0000C342                            loc_A220:
0000C342 4A40                       		tst.w	d0
0000C344 6700 0000                  		beq.w	loc_A246
0000C348 6B00                       		bmi.s	loc_A230
0000C34A 4A69 0010                  		tst.w	obVelX(a1)
0000C34E 6B00                       		bmi.s	loc_A246
0000C350 6000                       		bra.s	loc_A236
0000C352                            ; ===========================================================================
0000C352                            
0000C352                            loc_A230:
0000C352 4A69 0010                  		tst.w	obVelX(a1)
0000C356 6A00                       		bpl.s	loc_A246
0000C358                            
0000C358                            loc_A236:
0000C358 9169 0008                  		sub.w	d0,obX(a1)
0000C35C 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C362 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C368                            
0000C368                            loc_A246:
0000C368 0829 0001 0022             		btst	#1,obStatus(a1)
0000C36E 6600                       		bne.s	loc_A26A
0000C370 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C376 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C37C 6000                       		bra.s	Mon_Animate
0000C37E                            ; ===========================================================================
0000C37E                            
0000C37E                            loc_A25C:
0000C37E 0828 0005 0022             		btst	#5,obStatus(a0)
0000C384 6700                       		beq.s	Mon_Animate
0000C386 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C38C 6700                       		beq.s	loc_A26A	; if so, branch
0000C38E 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C394                            
0000C394                            loc_A26A:
0000C394 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C39A 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C3A0                            
0000C3A0                            Mon_Animate:	; Routine 6
0000C3A0 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C3A6 6100 0000                  		bsr.w	AnimateSprite
0000C3AA                            
0000C3AA                            Mon_Display:	; Routine 8
0000C3AA 6100 0000                  		bsr.w	DisplaySprite
0000C3CC 4E75                       		rts	
0000C3CE                            ; ===========================================================================
0000C3CE                            
0000C3CE                            Mon_BreakOpen:	; Routine 4
0000C3CE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C3D2 117C 0000 0020             		move.b	#0,obColType(a0)
0000C3D8 6100 0000                  		bsr.w	FindFreeObj
0000C3DC 6600                       		bne.s	Mon_Explode
0000C3DE 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C3E2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C3E8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C3EE 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C3F4                            
0000C3F4                            Mon_Explode:
0000C3F4 6100 0000                  		bsr.w	FindFreeObj
0000C3F8 6600                       		bne.s	@fail
0000C3FA 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C3FE 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C402 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C408 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C40E                            
0000C40E                            	@fail:
0000C40E 45F8 FC00                  		lea	(v_objstate).w,a2
0000C412 7000                       		moveq	#0,d0
0000C414 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C418 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C41E 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C424 6000 0000                  		bra.w	DisplaySprite
0000C424 6000 0000                  		bra.w	DisplaySprite
0000C428                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C428                            ; ---------------------------------------------------------------------------
0000C428                            ; Object 2E - contents of monitors
0000C428                            ; ---------------------------------------------------------------------------
0000C428                            
0000C428                            PowerUp:
0000C428 7000                       		moveq	#0,d0
0000C42A 1028 0024                  		move.b	obRoutine(a0),d0
0000C42E 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C432 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C436 6000 0000                  		bra.w	DisplaySprite
0000C43A                            ; ===========================================================================
0000C43A 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C43C 0000                       		dc.w Pow_Move-Pow_Index
0000C43E 0000                       		dc.w Pow_Delete-Pow_Index
0000C440                            ; ===========================================================================
0000C440                            
0000C440                            Pow_Main:	; Routine 0
0000C440 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C444 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C44A 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C450 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C456 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C45C 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C462 7000                       		moveq	#0,d0
0000C464 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C468 5400                       		addq.b	#2,d0
0000C46A 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C46E 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C474 D000                       		add.b	d0,d0
0000C476 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C47A 5249                       		addq.w	#1,a1
0000C47C 2149 0004                  		move.l	a1,obMap(a0)
0000C480                            
0000C480                            Pow_Move:	; Routine 2
0000C480 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C484 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C488 6100 0000                  		bsr.w	SpeedToPos
0000C48C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C492 4E75                       		rts	
0000C494                            ; ===========================================================================
0000C494                            
0000C494                            Pow_Checks:
0000C494 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C498 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C49E                            
0000C49E                            Pow_ChkEggman:
0000C49E 1028 001C                  		move.b	obAnim(a0),d0
0000C4A2 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C4A6 6600                       		bne.s	Pow_ChkSonic
0000C4A8                            		
0000C4A8 4EF9 0000 0000             		jmp	Spik_Hurt
0000C4AE                            		
0000C4AE 4E75                       		rts
0000C4B0                            ; ===========================================================================
0000C4B0                            
0000C4B0                            Pow_ChkSonic:
0000C4B0 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C4B4 6600                       		bne.s	Pow_ChkShoes
0000C4B6                            
0000C4B6                            	ExtraLife:
0000C4B6 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C4BA 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C4C8                            
0000C4C8                            ; ===========================================================================
0000C4C8                            
0000C4C8                            Pow_ChkShoes:
0000C4C8 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C4CC 6600                       		bne.s	Pow_ChkShield
0000C4CE                            
0000C4CE 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C4D4 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C4DA 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C4E0 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C4E6 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C4EC 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C4F0 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C4F2 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C4F8 6300                       			bls.s	Pow_NoMus
0000C504                            ; ===========================================================================
0000C504                            
0000C504                            Pow_NoMus:
0000C504 4E75                       		rts	
0000C506                            ; ===========================================================================
0000C506                            
0000C506                            Pow_ChkShield:
0000C506 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000C50A 6600                       		bne.s	Pow_ChkInvinc
0000C50C                            
0000C50C 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C512 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C518 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C51E 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000C524 11FC 0000 D180             		move.b	#id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C534                            ; ===========================================================================
0000C534                            
0000C534                            Pow_ChkInvinc:
0000C534 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C538 6600                       		bne.s	Pow_ChkRings
0000C53A                            
0000C53A 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C540 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C546 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C54C 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C552 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C558 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C55E 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C564 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C56A 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C570 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C576 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C57A 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C57C 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C582 6300                       			bls.s	Pow_NoMusic
0000C58E                            ; ===========================================================================
0000C58E                            
0000C58E                            Pow_NoMusic:
0000C58E 4E75                       		rts	
0000C590                            ; ===========================================================================
0000C590                            
0000C590                            Pow_ChkRings:
0000C590 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C594 6600                       		bne.s	Pow_ChkS
0000C596                            
0000C596 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C59C 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C5A2 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C5A8 6500                       		bcs.s	Pow_RingSound
0000C5AA 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C5B0 6700 FF04                  		beq.w	ExtraLife
0000C5B4 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C5BA 6500                       		bcs.s	Pow_RingSound
0000C5BC 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C5C2 6700 FEF2                  		beq.w	ExtraLife
0000C5C6                            
0000C5C6                            	Pow_RingSound:
0000C5D0                            ; ===========================================================================
0000C5D0                            
0000C5D0                            Pow_ChkS:
0000C5D0 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C5D4 6600                       		bne.s	Pow_ChkSRing
0000C5D6                            		
0000C5D6 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C5DC 6700                       		beq.s	PowS2	; if yes, branch
0000C5DE 0404 003B                  		subi.b	#$3B,d4
0000C5E2 7000                       		moveq	#0,d0
0000C5E4 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C5EA 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C5F0 6000                       		bra.s	PowSPlay
0000C5F2                            
0000C5F2                            PowS2:
0000C5F2 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C5F8 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C5FE 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C604 6500                       		bcs.s	PowSPlay
0000C606 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C60C 6700 FEA8                  		beq.w	ExtraLife
0000C610 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C616 6500                       		bcs.s	PowSPlay
0000C618 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C61E 6700 FE96                  		beq.w	ExtraLife	
0000C622                            
0000C622                            PowSPlay:
0000C62C                            
0000C62C                            		
0000C62C                            
0000C62C                            
0000C62C                            Pow_ChkSRing:
0000C62C 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C630 6600                       		bne.s	Pow_ChkRShield
0000C632                            
0000C632                            		
0000C632 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C638 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C63E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C644 6500                       		bcs.s	Pow_ChkSRingSound
0000C646 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C64C 6700 FE68                  		beq.w	ExtraLife
0000C650 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C656 6500                       		bcs.s	Pow_ChkSRingSound
0000C658 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C65E 6700 FE56                  		beq.w	ExtraLife	
0000C662                            
0000C662                            Pow_ChkSRingSound:
0000C66C                            
0000C66C                            
0000C66C                            Pow_ChkRShield:
0000C66C 0C00 000A                  		cmpi.b	#10,d0		; does monitor contain a g shield?
0000C670 6600                       		bne.s	Pow_ChkGShield
0000C672                            
0000C672 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C678 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C67E 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C684 11FC 0002 F5C8             		move.b	#2,(v_rshield).w ; give Sonic a red shield
0000C68A 11FC 0000 D180             		move.b	#id_RShieldItem,(v_objspace+$180).w ; load red shield object ($38)
0000C69A                            
0000C69A                            Pow_ChkGShield:
0000C69A 0C00 000B                  		cmpi.b	#11,d0		; does monitor contain a g shield?
0000C69E 6600                       		bne.s	Pow_ChkSpShield
0000C6A0                            
0000C6A0                            
0000C6A0 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C6A6 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove r shield
0000C6AC 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C6B2 11FC 0001 F5C9             		move.b	#1,(v_gshield).w ; give Sonic a g shield
0000C6B8 11FC 0000 D180             		move.b	#id_GShieldItem,(v_objspace+$180).w ; load g shield object ($38)
0000C6BE                            		
0000C6BE 0678 0023 FE20             		addi.w	#35,(v_rings).w	; add 35 rings to the number of rings you have
0000C6C4 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C6CA 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C6D0 6500                       		bcs.s	Pow_ChkGSound
0000C6D2 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C6D8 6700 FDDC                  		beq.w	ExtraLife
0000C6DC 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C6E2 6500                       		bcs.s	Pow_ChkGSound
0000C6E4 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C6EA 6700 FDCA                  		beq.w	ExtraLife	
0000C6EE                            
0000C6EE                            Pow_ChkGSound:		
0000C6F8                            
0000C6F8                            Pow_ChkSpShield:
0000C6F8 0C00 000C                  		cmpi.b	#12,d0		; does monitor contain a g shield?
0000C6FC 6600                       		bne.s	Pow_ChkEnd
0000C6FE                            
0000C6FE 11FC 0000 FE2C             		move.b	#0,(v_shield).w 		; remove shield
0000C704 11FC 0000 F5C8             		move.b	#0,(v_rshield).w 		; remove r shield
0000C70A 11FC 0000 F5C9             		move.b	#0,(v_gshield).w 		; remove g shield
0000C710 11FC 0001 F5CA             		move.b	#1,(v_spshield).w 		; give sonic a s shield
0000C716 11FC 0000 D180             		move.b	#id_SpShieldItem,(v_objspace+$180).w ; load s shield object ($38)	
0000C726 4E71                       		nop
0000C728                            
0000C728                            Pow_ChkEnd:
0000C728 4E75                       		rts
0000C72A                            ; ===========================================================================
0000C72A                            
0000C72A                            Pow_Delete:	; Routine 4
0000C72A 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C72E 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C732 4E75                       		rts	
0000C732 4E75                       		rts	
0000C734                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C734                            ; ---------------------------------------------------------------------------
0000C734                            ; Subroutine to	make the sides of a monitor solid
0000C734                            ; ---------------------------------------------------------------------------
0000C734                            
0000C734                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C734                            
0000C734                            
0000C734                            Mon_SolidSides:
0000C734 43F8 D000                  		lea	(v_player).w,a1
0000C738 3029 0008                  		move.w	obX(a1),d0
0000C73C 9068 0008                  		sub.w	obX(a0),d0
0000C740 D041                       		add.w	d1,d0
0000C742 6B00                       		bmi.s	loc_A4E6
0000C744 3601                       		move.w	d1,d3
0000C746 D643                       		add.w	d3,d3
0000C748 B043                       		cmp.w	d3,d0
0000C74A 6200                       		bhi.s	loc_A4E6
0000C74C 1629 0016                  		move.b	obHeight(a1),d3
0000C750 4883                       		ext.w	d3
0000C752 D443                       		add.w	d3,d2
0000C754 3629 000C                  		move.w	obY(a1),d3
0000C758 9668 000C                  		sub.w	obY(a0),d3
0000C75C D642                       		add.w	d2,d3
0000C75E 6B00                       		bmi.s	loc_A4E6
0000C760 D442                       		add.w	d2,d2
0000C762 B642                       		cmp.w	d2,d3
0000C764 6400                       		bcc.s	loc_A4E6
0000C766 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C76A 6B00                       		bmi.s	loc_A4E6
0000C76C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C772 6400                       		bcc.s	loc_A4E6
0000C774 4A78 FE08                  		tst.w	(v_debuguse).w
0000C778 6600                       		bne.s	loc_A4E6
0000C77A B240                       		cmp.w	d0,d1
0000C77C 6400                       		bcc.s	loc_A4DC
0000C77E D241                       		add.w	d1,d1
0000C780 9041                       		sub.w	d1,d0
0000C782                            
0000C782                            loc_A4DC:
0000C782 0C43 0010                  		cmpi.w	#$10,d3
0000C786 6500                       		bcs.s	loc_A4EA
0000C788                            
0000C788                            loc_A4E2:
0000C788 7201                       		moveq	#1,d1
0000C78A 4E75                       		rts	
0000C78C                            ; ===========================================================================
0000C78C                            
0000C78C                            loc_A4E6:
0000C78C 7200                       		moveq	#0,d1
0000C78E 4E75                       		rts	
0000C790                            ; ===========================================================================
0000C790                            
0000C790                            loc_A4EA:
0000C790 7200                       		moveq	#0,d1
0000C792 1228 0014                  		move.b	obActWid(a0),d1
0000C796 5841                       		addq.w	#4,d1
0000C798 3401                       		move.w	d1,d2
0000C79A D442                       		add.w	d2,d2
0000C79C D269 0008                  		add.w	obX(a1),d1
0000C7A0 9268 0008                  		sub.w	obX(a0),d1
0000C7A4 6BE2                       		bmi.s	loc_A4E2
0000C7A6 B242                       		cmp.w	d2,d1
0000C7A8 64DE                       		bcc.s	loc_A4E2
0000C7AA 72FF                       		moveq	#-1,d1
0000C7AC 4E75                       		rts	
0000C7AE                            ; End of function Obj26_SolidSides
0000C7AE                            ; End of function Obj26_SolidSides
0000C7AE                            		include	"_anim\Monitor.asm"
0000C7AE                            ; ---------------------------------------------------------------------------
0000C7AE                            ; Animation script - monitors
0000C7AE                            ; ---------------------------------------------------------------------------
0000C7AE 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C7B4 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C7BA 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C7C0 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C7C6 0000                       		dc.w @spshield-Ani_Monitor
0000C7C8                            		
0000C7C8 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C7CE 00                         		even
0000C7CE 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C7DA 00                         		even
0000C7DA 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C7E6 00                         		even
0000C7E6 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C7F2 00                         		even
0000C7F2 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C7FE 00                         		even
0000C7FE 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C80A 00                         		even
0000C80A 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C816 00                         		even
0000C816 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C822 00                         		even
0000C822 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C82E 00                         		even
0000C82E 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C836 00                         		even
0000C836 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C842 00                         		even
0000C842 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C84E 00                         		even
0000C84E 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C85A 00                         		even
0000C85A 00                         		even
0000C85A                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C85A                            ; --------------------------------------------------------------------------------
0000C85A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C85A                            ; --------------------------------------------------------------------------------
0000C85A                            
0000C85A                            SME_YYb7z:	
0000C85A 0000 0000                  		dc.w SME_YYb7z_1E-SME_YYb7z, SME_YYb7z_24-SME_YYb7z	
0000C85E 0000 0000                  		dc.w SME_YYb7z_2F-SME_YYb7z, SME_YYb7z_3A-SME_YYb7z	
0000C862 0000 0000                  		dc.w SME_YYb7z_45-SME_YYb7z, SME_YYb7z_50-SME_YYb7z	
0000C866 0000 0000                  		dc.w SME_YYb7z_5B-SME_YYb7z, SME_YYb7z_66-SME_YYb7z	
0000C86A 0000 0000                  		dc.w SME_YYb7z_71-SME_YYb7z, SME_YYb7z_7C-SME_YYb7z	
0000C86E 0000 0000                  		dc.w SME_YYb7z_87-SME_YYb7z, SME_YYb7z_92-SME_YYb7z	
0000C872 0000 0000                  		dc.w SME_YYb7z_AC-SME_YYb7z, SME_YYb7z_B7-SME_YYb7z	
0000C876 0000                       		dc.w SME_YYb7z_C2-SME_YYb7z	
0000C878 01                         SME_YYb7z_1E:	dc.b 1	
0000C879 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C87E 02                         SME_YYb7z_24:	dc.b 2	
0000C87F F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C884 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C889 02                         SME_YYb7z_2F:	dc.b 2	
0000C88A F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C88F F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C894 02                         SME_YYb7z_3A:	dc.b 2	
0000C895 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C89A F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C89F 02                         SME_YYb7z_45:	dc.b 2	
0000C8A0 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C8A5 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8AA 02                         SME_YYb7z_50:	dc.b 2	
0000C8AB F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C8B0 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8B5 02                         SME_YYb7z_5B:	dc.b 2	
0000C8B6 F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C8BB F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8C0 02                         SME_YYb7z_66:	dc.b 2	
0000C8C1 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C8C6 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8CB 02                         SME_YYb7z_71:	dc.b 2	
0000C8CC F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C8D1 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8D6 02                         SME_YYb7z_7C:	dc.b 2	
0000C8D7 F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C8DC F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8E1 02                         SME_YYb7z_87:	dc.b 2	
0000C8E2 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C8E7 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8EC 05                         SME_YYb7z_92:	dc.b 5	
0000C8ED 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C8F2 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C8F7 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C8FC 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C901 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C906 02                         SME_YYb7z_AC:	dc.b 2	
0000C907 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C90C F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C911 02                         SME_YYb7z_B7:	dc.b 2	
0000C912 F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C917 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C91C 02                         SME_YYb7z_C2:	dc.b 2	
0000C91D F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C922 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C928 00                         		even
0000C928 00                         		even
0000C928                            
0000C928                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C928                            ; ---------------------------------------------------------------------------
0000C928                            ; Object 0E - Sonic on the title screen
0000C928                            ; ---------------------------------------------------------------------------
0000C928                            
0000C928                            TitleSonic:
0000C928 7000                       		moveq	#0,d0
0000C92A 1028 0024                  		move.b	obRoutine(a0),d0
0000C92E 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C932 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C936                            ; ===========================================================================
0000C936 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C938 0000                       		dc.w TSon_Delay-TSon_Index
0000C93A 0000                       		dc.w TSon_Move-TSon_Index
0000C93C 0000                       		dc.w TSon_Animate-TSon_Index
0000C93E                            ; ===========================================================================
0000C93E                            
0000C93E                            TSon_Main:	; Routine 0
0000C93E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C942 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C948 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C94E 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C956 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C95C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C962 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C968 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C96E 6100 0000                  		bsr.w	AnimateSprite
0000C972                            
0000C972                            TSon_Delay:	;Routine 2
0000C972 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C976 6A00                       		bpl.s	@wait		; if time remains, branch
0000C978 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C97C 6000 0000                  		bra.w	DisplaySprite
0000C980                            
0000C980                            	@wait:
0000C980 4E75                       		rts	
0000C982                            ; ===========================================================================
0000C982                            
0000C982                            TSon_Move:	; Routine 4
0000C982 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C986 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C98C 6600                       		bne.s	@display	; if not, branch
0000C98E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C992                            
0000C992                            	@display:
0000C992 6000 0000                  		bra.w	DisplaySprite
0000C996                            
0000C996 4E75                       		rts	
0000C998                            ; ===========================================================================
0000C998                            
0000C998                            TSon_Animate:	; Routine 6
0000C998 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C99E 6100 0000                  		bsr.w	AnimateSprite
0000C9A2 6000 0000                  		bra.w	DisplaySprite
0000C9A6                            
0000C9A6 4E75                       		rts	
0000C9A6 4E75                       		rts	
0000C9A8                            		include	"_incObj\0F Press Start and TM.asm"
0000C9A8                            ; ---------------------------------------------------------------------------
0000C9A8                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C9A8                            ; ---------------------------------------------------------------------------
0000C9A8                            
0000C9A8                            PSBTM:
0000C9A8 7000                       		moveq	#0,d0
0000C9AA 1028 0024                  		move.b	obRoutine(a0),d0
0000C9AE 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000C9B2 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000C9B6 6000 0000                  		bra.w	DisplaySprite
0000C9BA                            ; ===========================================================================
0000C9BA 0000                       Obj0F_Index:	dc.w Obj0F_Init-Obj0F_Index	
0000C9BC 0000                       		dc.w Obj0F_Main-Obj0F_Index
0000C9BE 0000                       		dc.w MENURTS-Obj0F_Index	
0000C9C0                            ; ===========================================================================
0000C9C0                            Obj0F_Init:
0000C9C0 5428 0024                  	addq.b	#2,obRoutine(a0) ; => Obj0F_Main
0000C9C4 217C 0000 0000 0004            move.l   #Map_TitleMenu,4(a0)
0000C9CC 317C 0101 0008                 move.w   #$101,8(a0)
0000C9D2 317C 0151 000A                 move.w   #$151,$A(a0)
0000C9D8 317C 056F 0002             	move.w	#$56F,2(a0)
0000C9DE 0238 0001 FFB0             	andi.b	#1,(Title_screen_option).w
0000C9E4 1178 FFB0 001A             	move.b	(Title_screen_option).w,mapping_frame(a0)
0000C9EA                            
0000C9EA                            
0000C9EA                            Obj0F_Main:
0000C9EA 7400                             moveq   #0,d2
0000C9EC 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C9F0 1038 F605                        move.b   ($FFFFF605).w,d0
0000C9F4 0800 0000                        btst   #0,d0
0000C9F8 6700                             beq.s   MAIN2
0000C9FA 5302                             subq.b   #1,d2
0000C9FC 6400                             bcc.s   MAIN2
0000C9FE 143C 0001                        move.b   #1,d2
0000CA02                            
0000CA02                            MAIN2:
0000CA02 0800 0001                        btst   #1,d0
0000CA06 6700                             beq.s   MAIN3
0000CA08 5202                             addq.b   #1,d2
0000CA0A 0C02 0002                        cmpi.b   #2,d2
0000CA0E 6500                             blo.s   MAIN3
0000CA10 7400                             moveq   #0,d2
0000CA12                            
0000CA12                            MAIN3:
0000CA12 1142 001A                        move.b   d2,$1A(a0)
0000CA16 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000CA1A 0200 0003                        andi.b   #3,d0
0000CA1E 6700                             beq.s   MENURTS   ; rts
0000CA20 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000CA24 4EB8 12A0                        jsr   PlaySound_Special
0000CA28                            
0000CA28                            MENURTS:
0000CA28 4E75                             rts															 
0000CA2A                            ; ===========================================================================
0000CA2A                            
0000CA2A                            Map_TitleMenu:
0000CA2A                            		include "_maps\Title Screen Menu.asm"		
0000CA2A                            ; --------------------------------------------------------------------------------
0000CA2A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CA2A                            ; --------------------------------------------------------------------------------
0000CA2A                            
0000CA2A                            SME_g2Qfx:	
0000CA2A 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000CA2E 10                         SME_g2Qfx_6:	dc.b $10	
0000CA2F E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000CA34 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000CA39 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000CA3E E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000CA43 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000CA48 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000CA4D E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000CA52 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000CA57 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000CA5C F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000CA61 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000CA66 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000CA6B F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000CA70 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000CA75 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000CA7A E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000CA7F 10                         SME_g2Qfx_6B:	dc.b $10	
0000CA80 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000CA85 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000CA8A E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000CA8F E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000CA94 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000CA99 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000CA9E E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000CAA3 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000CAA8 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000CAAD F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000CAB2 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000CAB7 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000CABC F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000CAC1 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000CAC6 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000CACB F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000CAD0                            		even
0000CAD0                            		even
0000CAD0                            		even
0000CAD0                            
0000CAD0                            		include	"_anim\Title Screen Sonic.asm"
0000CAD0                            ; ---------------------------------------------------------------------------
0000CAD0                            ; Animation script - Sonic on the title screen
0000CAD0                            ; ---------------------------------------------------------------------------
0000CAD0 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000CAD2 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000CADE 00                         		even
0000CADE 00                         		even
0000CADE                            		include	"_anim\Press Start and TM.asm"
0000CADE                            ; ---------------------------------------------------------------------------
0000CADE                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000CADE                            ; ---------------------------------------------------------------------------
0000CADE 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000CAE0 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000CAE4                            		even
0000CAE4                            		even
0000CAE4                            
0000CAE4                            		include	"_incObj\sub AnimateSprite.asm"
0000CAE4                            ; ---------------------------------------------------------------------------
0000CAE4                            ; Subroutine to	animate	a sprite using an animation script
0000CAE4                            ; ---------------------------------------------------------------------------
0000CAE4                            
0000CAE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CAE4                            
0000CAE4                            
0000CAE4                            AnimateSprite:
0000CAE4 7000                       		moveq	#0,d0
0000CAE6 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000CAEA B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000CAEE 6700                       		beq.s	Anim_Run	; if not, branch
0000CAF0                            
0000CAF0 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000CAF4 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000CAFA 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000CB00                            
0000CB00                            Anim_Run:
0000CB00 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000CB04 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000CB06 D040                       		add.w	d0,d0
0000CB08 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000CB0C 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000CB10 7200                       		moveq	#0,d1
0000CB12 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000CB16 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000CB1A 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000CB1C                            
0000CB1C                            Anim_Next:
0000CB1C 1200                       		move.b	d0,d1
0000CB1E 0200 001F                  		andi.b	#$1F,d0
0000CB22 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000CB26 1028 0022                  		move.b	obStatus(a0),d0
0000CB2A E719                       		rol.b	#3,d1
0000CB2C B101                       		eor.b	d0,d1
0000CB2E 0201 0003                  		andi.b	#3,d1
0000CB32 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000CB38 8328 0001                  		or.b	d1,obRender(a0)
0000CB3C 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000CB40                            
0000CB40                            Anim_Wait:
0000CB40 4E75                       		rts	
0000CB42                            ; ===========================================================================
0000CB42                            
0000CB42                            Anim_End_FF:
0000CB42 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000CB44 6600                       		bne.s	Anim_End_FE	; if not, branch
0000CB46 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000CB4C 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000CB50 60CA                       		bra.s	Anim_Next
0000CB52                            ; ===========================================================================
0000CB52                            
0000CB52                            Anim_End_FE:
0000CB52 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000CB54 6600                       		bne.s	Anim_End_FD	; if not, branch
0000CB56 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000CB5A 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000CB5E 9200                       		sub.b	d0,d1
0000CB60 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000CB64 60B6                       		bra.s	Anim_Next
0000CB66                            ; ===========================================================================
0000CB66                            
0000CB66                            Anim_End_FD:
0000CB66 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000CB68 6600                       		bne.s	Anim_End_FC	; if not, branch
0000CB6A 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000CB70                            
0000CB70                            Anim_End_FC:
0000CB70 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000CB72 6600                       		bne.s	Anim_End_FB	; if not, branch
0000CB74 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000CB78                            
0000CB78                            Anim_End_FB:
0000CB78 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000CB7A 6600                       		bne.s	Anim_End_FA	; if not, branch
0000CB7C 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000CB82 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000CB86                            
0000CB86                            Anim_End_FA:
0000CB86 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000CB88 6600                       		bne.s	Anim_End	; if not, branch
0000CB8A 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000CB8E                            
0000CB8E                            Anim_End:
0000CB8E 4E75                       		rts	
0000CB90                            ; End of function AnimateSprite
0000CB90                            ; End of function AnimateSprite
0000CB90                            
0000CB90                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000CB90                            ; ---------------------------------------------------------------------------
0000CB90                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000CB90                            ; ---------------------------------------------------------------------------
0000CB90                            Map_PSB_internal:
0000CB90 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000CB92 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000CB94 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000CB96 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000CB98 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000CB99 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000CB9E 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000CBA3 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000CBA8 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000CBAD 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000CBB2 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000CBB7 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000CBB8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CBBD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CBC2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CBC7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CBCC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CBD1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CBD6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CBDB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CBE0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CBE5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CBEA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CBEF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CBF4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CBF9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CBFE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC03 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC08 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC0D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC12 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC17 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC1C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC21 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC26 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC2B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC30 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC35 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC3A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC3F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC44 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC49 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC4E 01                         M_PSB_TM:	dc.b 1			; "TM"
0000CC4F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000CC54                            		even
0000CC54                            		even
0000CC54                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000CC54                            ; ---------------------------------------------------------------------------
0000CC54                            ; Sprite mappings - Sonic on the title screen
0000CC54                            ; ---------------------------------------------------------------------------
0000CC54                            Map_TSon_internal:
0000CC54 0000                       		dc.w byte_A898-Map_TSon_internal
0000CC56 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000CC58 0000                       		dc.w byte_A917-Map_TSon_internal
0000CC5A 0000                       		dc.w byte_A96D-Map_TSon_internal
0000CC5C 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000CC5E 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000CC60 0000                       		dc.w byte_AA47-Map_TSon_internal
0000CC62 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000CC64 0A                         byte_A898:	dc.b $A
0000CC65 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000CC6A 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000CC6F 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000CC74 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000CC79 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000CC7E 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000CC83 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000CC88 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000CC8D 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000CC92 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000CC97 0F                         byte_A8CB:	dc.b $F
0000CC98 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CC9D 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CCA2 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CCA7 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CCAC 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CCB1 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CCB6 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CCBB 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CCC0 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CCC5 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CCCA 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CCCF 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CCD4 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CCD9 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CCDE 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CCE3 11                         byte_A917:	dc.b $11
0000CCE4 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CCE9 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CCEE 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CCF3 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CCF8 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CCFD 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CD02 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CD07 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CD0C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CD11 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CD16 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CD1B 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CD20 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CD25 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CD2A 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CD2F 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CD34 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CD39 0D                         byte_A96D:	dc.b $D
0000CD3A 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CD3F 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CD44 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CD49 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CD4E 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CD53 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CD58 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CD5D 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CD62 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CD67 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CD6C 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CD71 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CD76 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CD7B 0B                         byte_A9AF:	dc.b $B
0000CD7C 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CD81 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CD86 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CD8B 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CD90 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CD95 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CD9A 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CD9F 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CDA4 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CDA9 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CDAE 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CDB3 13                         byte_A9E7:	dc.b $13
0000CDB4 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CDB9 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CDBE 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CDC3 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CDC8 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CDCD 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CDD2 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CDD7 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CDDC 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CDE1 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CDE6 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CDEB 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CDF0 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CDF5 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CDFA 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CDFF 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CE04 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CE09 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CE0E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CE13 15                         byte_AA47:	dc.b $15
0000CE14 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CE19 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CE1E 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CE23 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CE28 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CE2D 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CE32 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CE37 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CE3C 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CE41 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CE46 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CE4B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CE50 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CE55 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CE5A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CE5F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CE64 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CE69 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CE6E 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CE73 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CE78 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CE7D 16                         byte_AAB1:	dc.b $16
0000CE7E 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CE83 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CE88 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CE8D 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CE92 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CE97 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CE9C 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CEA1 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CEA6 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CEAB 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CEB0 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CEB5 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CEBA 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CEBF 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CEC4 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CEC9 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CECE 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CED3 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CED8 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CEDD 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CEE2 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CEE7 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CEEC                            		even
0000CEEC                            		even
0000CEEC                            
0000CEEC                            		include	"_incObj\2B Chopper.asm"
0000CEEC                            ; ---------------------------------------------------------------------------
0000CEEC                            ; Object 2B - Chopper enemy (GHZ)
0000CEEC                            ; ---------------------------------------------------------------------------
0000CEEC                            
0000CEEC                            Chopper:
0000CEEC 7000                       		moveq	#0,d0
0000CEEE 1028 0024                  		move.b	obRoutine(a0),d0
0000CEF2 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CEF6 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CEFA 6000 0000                  		bra.w	RememberState
0000CEFE                            ; ===========================================================================
0000CEFE 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CF00 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CF02                            
0000CF02 =00000030                  chop_origY:	equ $30
0000CF02                            ; ===========================================================================
0000CF02                            
0000CF02                            Chop_Main:	; Routine 0
0000CF02 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CF06 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CF0E 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CF14 117C 0004 0001             		move.b	#4,obRender(a0)
0000CF1A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CF20 117C 0009 0020             		move.b	#9,obColType(a0)
0000CF26 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CF2C 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CF32 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CF38                            
0000CF38                            Chop_ChgSpeed:	; Routine 2
0000CF38 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CF3E 6100 FBA4                  		bsr.w	AnimateSprite
0000CF42 6100 0000                  		bsr.w	SpeedToPos
0000CF46 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CF4C 3028 0030                  		move.w	chop_origY(a0),d0
0000CF50 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CF54 6400                       		bcc.s	@chganimation	; if not, branch
0000CF56 3140 000C                  		move.w	d0,obY(a0)
0000CF5A 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CF60                            
0000CF60                            	@chganimation:
0000CF60 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CF66 0440 00C0                  		subi.w	#$C0,d0
0000CF6A B068 000C                  		cmp.w	obY(a0),d0
0000CF6E 6400                       		bcc.s	@nochg
0000CF70 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CF76 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CF7A 6B00                       		bmi.s	@nochg		; if not, branch
0000CF7C 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CF82                            
0000CF82                            	@nochg:
0000CF82 4E75                       		rts	
0000CF82 4E75                       		rts	
0000CF84                            		include	"_anim\Chopper.asm"
0000CF84                            ; ---------------------------------------------------------------------------
0000CF84                            ; Animation script - Chopper enemy
0000CF84                            ; ---------------------------------------------------------------------------
0000CF84 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CF86 0000                       		dc.w @fast-Ani_Chop
0000CF88 0000                       		dc.w @still-Ani_Chop
0000CF8A 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CF8E 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CF92 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CF96 00                         		even
0000CF96 00                         		even
0000CF96                            Map_Chop:	include	"_maps\Chopper.asm"
0000CF96                            ; ---------------------------------------------------------------------------
0000CF96                            ; Sprite mappings - Chopper enemy (GHZ)
0000CF96                            ; ---------------------------------------------------------------------------
0000CF96                            Map_Chop_internal:
0000CF96 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CF98 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CF9A 01                         @mouthshut:	dc.b 1
0000CF9B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CFA0 01                         @mouthopen:	dc.b 1
0000CFA1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CFA6                            		even
0000CFA6                            		even
0000CFA6                            		include	"_incObj\2C Jaws.asm"
0000CFA6                            ; ---------------------------------------------------------------------------
0000CFA6                            ; Object 2C - Jaws enemy (LZ)
0000CFA6                            ; ---------------------------------------------------------------------------
0000CFA6                            
0000CFA6                            Jaws:
0000CFA6 7000                       		moveq	#0,d0
0000CFA8 1028 0024                  		move.b	obRoutine(a0),d0
0000CFAC 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CFB0 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CFB4                            ; ===========================================================================
0000CFB4 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CFB6 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CFB8                            
0000CFB8 =00000030                  jaws_timecount:	equ $30
0000CFB8 =00000032                  jaws_timedelay:	equ $32
0000CFB8                            ; ===========================================================================
0000CFB8                            
0000CFB8                            Jaws_Main:	; Routine 0
0000CFB8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CFBC 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CFC4 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CFCA 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CFD0 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CFD6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CFDC 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CFE2 7000                       		moveq	#0,d0
0000CFE4 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CFE8 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CFEA 5340                       		subq.w	#1,d0
0000CFEC 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CFF0 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CFF4 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CFFA 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000D000 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000D002 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000D006                            
0000D006                            Jaws_Turn:	; Routine 2
0000D006 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000D00A 6A00                       		bpl.s	@animate	; if time remains, branch
0000D00C 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000D012 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000D016 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000D01C 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000D022                            
0000D022                            	@animate:
0000D022 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000D028 6100 FABA                  		bsr.w	AnimateSprite
0000D02C 6100 0000                  		bsr.w	SpeedToPos
0000D030 6000 0000                  		bra.w	RememberState
0000D030 6000 0000                  		bra.w	RememberState
0000D034                            		include	"_anim\Jaws.asm"
0000D034                            ; ---------------------------------------------------------------------------
0000D034                            ; Animation script - Jaws enemy
0000D034                            ; ---------------------------------------------------------------------------
0000D034 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000D036 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000D03C                            		even
0000D03C                            		even
0000D03C                            Map_Jaws:	include	"_maps\Jaws.asm"
0000D03C                            ; --------------------------------------------------------------------------------
0000D03C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D03C                            ; --------------------------------------------------------------------------------
0000D03C                            
0000D03C                            SME_O5C0c:	
0000D03C 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000D040 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000D044 02                         SME_O5C0c_8:	dc.b 2	
0000D045 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000D04A F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000D04F 02                         SME_O5C0c_13:	dc.b 2	
0000D050 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000D055 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000D05A 02                         SME_O5C0c_1E:	dc.b 2	
0000D05B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000D060 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000D065 02                         SME_O5C0c_29:	dc.b 2	
0000D066 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000D06B F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000D070                            		even
0000D070                            		even
0000D070                            		include	"_incObj\2D Burrobot.asm"
0000D070                            ; ---------------------------------------------------------------------------
0000D070                            ; Object 2D - Burrobot enemy (LZ)
0000D070                            ; ---------------------------------------------------------------------------
0000D070                            
0000D070                            Burrobot:
0000D070 7000                       		moveq	#0,d0
0000D072 1028 0024                  		move.b	obRoutine(a0),d0
0000D076 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000D07A 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000D07E                            ; ===========================================================================
0000D07E 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000D080 0000                       		dc.w Burro_Action-Burro_Index
0000D082                            
0000D082 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000D082                            ; ===========================================================================
0000D082                            
0000D082                            Burro_Main:	; Routine 0
0000D082 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D086 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000D08C 117C 0008 0017             		move.b	#8,obWidth(a0)
0000D092 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000D09A 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000D0A0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000D0A6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000D0AC 117C 0005 0020             		move.b	#5,obColType(a0)
0000D0B2 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000D0B8 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000D0BC 117C 0002 001C             		move.b	#2,obAnim(a0)
0000D0C2                            
0000D0C2                            Burro_Action:	; Routine 2
0000D0C2 7000                       		moveq	#0,d0
0000D0C4 1028 0025                  		move.b	ob2ndRout(a0),d0
0000D0C8 323B 0000                  		move.w	@index(pc,d0.w),d1
0000D0CC 4EBB 1000                  		jsr	@index(pc,d1.w)
0000D0D0 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000D0D6 6100 FA0C                  		bsr.w	AnimateSprite
0000D0DA 6000 0000                  		bra.w	RememberState
0000D0DE                            ; ===========================================================================
0000D0DE 0000                       @index:		dc.w @changedir-@index
0000D0E0 0000                       		dc.w Burro_Move-@index
0000D0E2 0000                       		dc.w Burro_Jump-@index
0000D0E4 0000                       		dc.w Burro_ChkSonic-@index
0000D0E6                            ; ===========================================================================
0000D0E6                            
0000D0E6                            @changedir:
0000D0E6 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000D0EA 6A00                       		bpl.s	@nochg
0000D0EC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000D0F0 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000D0F6 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000D0FC 117C 0001 001C             		move.b	#1,obAnim(a0)
0000D102 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000D108 6700                       		beq.s	@nochg
0000D10A 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000D10E                            
0000D10E                            	@nochg:
0000D10E 4E75                       		rts	
0000D110                            ; ===========================================================================
0000D110                            
0000D110                            Burro_Move:
0000D110 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000D114 6B00                       		bmi.s	loc_AD84
0000D116 6100 0000                  		bsr.w	SpeedToPos
0000D11A 0868 0000 0032             		bchg	#0,$32(a0)
0000D120 6600                       		bne.s	loc_AD78
0000D122 3628 0008                  		move.w	obX(a0),d3
0000D126 0643 000C                  		addi.w	#$C,d3
0000D12A 0828 0000 0022             		btst	#0,obStatus(a0)
0000D130 6600                       		bne.s	loc_AD6A
0000D132 0443 0018                  		subi.w	#$18,d3
0000D136                            
0000D136                            loc_AD6A:
0000D136 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000D13C 0C41 000C                  		cmpi.w	#$C,d1
0000D140 6C00                       		bge.s	loc_AD84
0000D142 4E75                       		rts	
0000D144                            ; ===========================================================================
0000D144                            
0000D144                            loc_AD78:
0000D144 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000D14A D368 000C                  		add.w	d1,obY(a0)
0000D14E 4E75                       		rts	
0000D150                            ; ===========================================================================
0000D150                            
0000D150                            loc_AD84:
0000D150 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000D156 6700                       		beq.s	loc_ADA4
0000D158 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D15C 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000D162 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D168 117C 0000 001C             		move.b	#0,obAnim(a0)
0000D16E 4E75                       		rts	
0000D170                            ; ===========================================================================
0000D170                            
0000D170                            loc_ADA4:
0000D170 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000D174 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D17A 117C 0002 001C             		move.b	#2,obAnim(a0)
0000D180 4E75                       		rts	
0000D182                            ; ===========================================================================
0000D182                            
0000D182                            Burro_Jump:
0000D182 6100 0000                  		bsr.w	SpeedToPos
0000D186 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000D18C 6B00                       		bmi.s	locret_ADF0
0000D18E 117C 0003 001C             		move.b	#3,obAnim(a0)
0000D194 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000D19A 4A41                       		tst.w	d1
0000D19C 6A00                       		bpl.s	locret_ADF0
0000D19E D368 000C                  		add.w	d1,obY(a0)
0000D1A2 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D1A8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000D1AE 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000D1B4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D1B8 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D1BC                            
0000D1BC                            locret_ADF0:
0000D1BC 4E75                       		rts	
0000D1BE                            ; ===========================================================================
0000D1BE                            
0000D1BE                            Burro_ChkSonic:
0000D1BE 343C 0060                  		move.w	#$60,d2
0000D1C2 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D1C6 6400                       		bcc.s	locret_AE20
0000D1C8 3038 D00C                  		move.w	(v_player+obY).w,d0
0000D1CC 9068 000C                  		sub.w	obY(a0),d0
0000D1D0 6400                       		bcc.s	locret_AE20
0000D1D2 0C40 FF80                  		cmpi.w	#-$80,d0
0000D1D6 6500                       		bcs.s	locret_AE20
0000D1D8 4A78 FE08                  		tst.w	(v_debuguse).w
0000D1DC 6600                       		bne.s	locret_AE20
0000D1DE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D1E2 3141 0010                  		move.w	d1,obVelX(a0)
0000D1E6 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D1EC                            
0000D1EC                            locret_AE20:
0000D1EC 4E75                       		rts	
0000D1EE                            
0000D1EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D1EE                            
0000D1EE                            
0000D1EE                            Burro_ChkSonic2:
0000D1EE 323C 0080                  		move.w	#$80,d1
0000D1F2 08E8 0000 0022             		bset	#0,obStatus(a0)
0000D1F8 3038 D008                  		move.w	(v_player+obX).w,d0
0000D1FC 9068 0008                  		sub.w	obX(a0),d0
0000D200 6400                       		bcc.s	loc_AE40
0000D202 4440                       		neg.w	d0
0000D204 4441                       		neg.w	d1
0000D206 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000D20C                            
0000D20C                            loc_AE40:
0000D20C B042                       		cmp.w	d2,d0
0000D20E 4E75                       		rts	
0000D210                            ; End of function Burro_ChkSonic2
0000D210                            ; End of function Burro_ChkSonic2
0000D210                            		include	"_anim\Burrobot.asm"
0000D210                            ; ---------------------------------------------------------------------------
0000D210                            ; Animation script - Burrobot enemy
0000D210                            ; ---------------------------------------------------------------------------
0000D210 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000D212 0000                       		dc.w @walk2-Ani_Burro
0000D214 0000                       		dc.w @digging-Ani_Burro
0000D216 0000                       		dc.w @fall-Ani_Burro
0000D218 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000D21C 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000D220 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000D224 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000D228 00                         		even
0000D228 00                         		even
0000D228                            Map_Burro:	include	"_maps\Burrobot.asm"
0000D228                            ; --------------------------------------------------------------------------------
0000D228                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D228                            ; --------------------------------------------------------------------------------
0000D228                            
0000D228                            SME_Ag_86:	
0000D228 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000D22C 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000D230 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000D234 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000D236 02                         SME_Ag_86_E:	dc.b 2	
0000D237 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000D23C 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D241 02                         SME_Ag_86_19:	dc.b 2	
0000D242 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D247 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000D24C 02                         SME_Ag_86_24:	dc.b 2	
0000D24D E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000D252 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000D257 02                         SME_Ag_86_2F:	dc.b 2	
0000D258 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000D25D 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000D262 02                         SME_Ag_86_3A:	dc.b 2	
0000D263 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000D268 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000D26D 02                         SME_Ag_86_45:	dc.b 2	
0000D26E F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000D273 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000D278 02                         SME_Ag_86_50:	dc.b 2	
0000D279 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D27E 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D284 00                         		even
0000D284 00                         		even
0000D284                            
0000D284                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000D284                            ; ---------------------------------------------------------------------------
0000D284                            ; Object 2F - large grass-covered platforms (MZ)
0000D284                            ; ---------------------------------------------------------------------------
0000D284                            
0000D284                            LargeGrass:
0000D284 7000                       		moveq	#0,d0
0000D286 1028 0024                  		move.b	obRoutine(a0),d0
0000D28A 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000D28E 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000D292                            ; ===========================================================================
0000D292 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000D294 0000                       		dc.w LGrass_Action-LGrass_Index
0000D296                            
0000D296 =0000002A                  lgrass_origX:	equ $2A
0000D296 =0000002C                  lgrass_origY:	equ $2C
0000D296                            
0000D296 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000D298 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000D29A 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D29C 0140                       		dc.b 1,	$40
0000D29E 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D2A0 0220                       		dc.b 2,	$20
0000D2A2                            ; ===========================================================================
0000D2A2                            
0000D2A2                            LGrass_Main:	; Routine 0
0000D2A2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D2A6 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D2AE 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D2B4 117C 0004 0001             		move.b	#4,obRender(a0)
0000D2BA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000D2C0 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D2C6 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D2CC 7000                       		moveq	#0,d0
0000D2CE 1028 0028                  		move.b	obSubtype(a0),d0
0000D2D2 E448                       		lsr.w	#2,d0
0000D2D4 0240 001C                  		andi.w	#$1C,d0
0000D2D8 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D2DC 3019                       		move.w	(a1)+,d0
0000D2DE 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D2E2 214A 0030                  		move.l	a2,$30(a0)
0000D2E6 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D2EA 1151 0014                  		move.b	(a1),obActWid(a0)
0000D2EE 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D2F4 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D2FA 08E8 0004 0001             		bset	#4,1(a0)
0000D300                            
0000D300                            LGrass_Action:	; Routine 2
0000D300 6100 0000                  		bsr.w	LGrass_Types
0000D304 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D308 6700                       		beq.s	LGrass_Solid
0000D30A 7200                       		moveq	#0,d1
0000D30C 1228 0014                  		move.b	obActWid(a0),d1
0000D310 0641 000B                  		addi.w	#$B,d1
0000D314 6100 BF90                  		bsr.w	ExitPlatform
0000D318 0829 0003 0022             		btst	#3,obStatus(a1)
0000D31E 6600 0000                  		bne.w	LGrass_Slope
0000D322 4228 0025                  		clr.b	ob2ndRout(a0)
0000D326 6000                       		bra.s	LGrass_Display
0000D328                            ; ===========================================================================
0000D328                            
0000D328                            LGrass_Slope:
0000D328 7200                       		moveq	#0,d1
0000D32A 1228 0014                  		move.b	obActWid(a0),d1
0000D32E 0641 000B                  		addi.w	#$B,d1
0000D332 2468 0030                  		movea.l	$30(a0),a2
0000D336 3428 0008                  		move.w	obX(a0),d2
0000D33A 6100 CF04                  		bsr.w	SlopeObject2
0000D33E 6000                       		bra.s	LGrass_Display
0000D340                            ; ===========================================================================
0000D340                            
0000D340                            LGrass_Solid:
0000D340 7200                       		moveq	#0,d1
0000D342 1228 0014                  		move.b	obActWid(a0),d1
0000D346 0641 000B                  		addi.w	#$B,d1
0000D34A 343C 0020                  		move.w	#$20,d2
0000D34E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D354 6600                       		bne.s	loc_AF8E
0000D356 343C 0030                  		move.w	#$30,d2
0000D35A                            
0000D35A                            loc_AF8E:
0000D35A 2468 0030                  		movea.l	$30(a0),a2
0000D35E 6100 0000                  		bsr.w	SolidObject2F
0000D362                            
0000D362                            LGrass_Display:
0000D362 6100 0000                  		bsr.w	DisplaySprite
0000D366 6000 0000                  		bra.w	LGrass_ChkDel
0000D36A                            
0000D36A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D36A                            
0000D36A                            
0000D36A                            LGrass_Types:
0000D36A 7000                       		moveq	#0,d0
0000D36C 1028 0028                  		move.b	obSubtype(a0),d0
0000D370 0240 0007                  		andi.w	#7,d0
0000D374 D040                       		add.w	d0,d0
0000D376 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D37A 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D37E                            ; End of function LGrass_Types
0000D37E                            
0000D37E                            ; ===========================================================================
0000D37E 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D380 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D382 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D384 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D386 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D388 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D38A                            ; ===========================================================================
0000D38A                            
0000D38A                            LGrass_Type00:
0000D38A 4E75                       		rts			; type 00 platform doesn't move
0000D38C                            ; ===========================================================================
0000D38C                            
0000D38C                            LGrass_Type01:
0000D38C 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D390 323C 0020                  		move.w	#$20,d1
0000D394 6000                       		bra.s	LGrass_Move
0000D396                            ; ===========================================================================
0000D396                            
0000D396                            LGrass_Type02:
0000D396 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D39A 323C 0030                  		move.w	#$30,d1
0000D39E 6000                       		bra.s	LGrass_Move
0000D3A0                            ; ===========================================================================
0000D3A0                            
0000D3A0                            LGrass_Type03:
0000D3A0 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D3A4 323C 0040                  		move.w	#$40,d1
0000D3A8 6000                       		bra.s	LGrass_Move
0000D3AA                            ; ===========================================================================
0000D3AA                            
0000D3AA                            LGrass_Type04:
0000D3AA 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D3AE 323C 0060                  		move.w	#$60,d1
0000D3B2                            
0000D3B2                            LGrass_Move:
0000D3B2 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D3B8 6700                       		beq.s	loc_AFF2
0000D3BA 4440                       		neg.w	d0
0000D3BC D041                       		add.w	d1,d0
0000D3BE                            
0000D3BE                            loc_AFF2:
0000D3BE 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D3C2 9240                       		sub.w	d0,d1
0000D3C4 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D3C8 4E75                       		rts	
0000D3CA                            ; ===========================================================================
0000D3CA                            
0000D3CA                            LGrass_Type05:
0000D3CA 1028 0034                  		move.b	$34(a0),d0
0000D3CE 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D3D2 6600                       		bne.s	loc_B010
0000D3D4 5500                       		subq.b	#2,d0
0000D3D6 6400                       		bcc.s	loc_B01C
0000D3D8 7000                       		moveq	#0,d0
0000D3DA 6000                       		bra.s	loc_B01C
0000D3DC                            ; ===========================================================================
0000D3DC                            
0000D3DC                            loc_B010:
0000D3DC 5800                       		addq.b	#4,d0
0000D3DE 0C00 0040                  		cmpi.b	#$40,d0
0000D3E2 6500                       		bcs.s	loc_B01C
0000D3E4 103C 0040                  		move.b	#$40,d0
0000D3E8                            
0000D3E8                            loc_B01C:
0000D3E8 1140 0034                  		move.b	d0,$34(a0)
0000D3EC 4EB9 0000 3A82             		jsr	(CalcSine).l
0000D3F2 E848                       		lsr.w	#4,d0
0000D3F4 3200                       		move.w	d0,d1
0000D3F6 D068 002C                  		add.w	lgrass_origY(a0),d0
0000D3FA 3140 000C                  		move.w	d0,obY(a0)
0000D3FE 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D404 6600                       		bne.s	loc_B07A
0000D406 4A28 0035                  		tst.b	$35(a0)
0000D40A 6600                       		bne.s	loc_B07A
0000D40C 117C 0001 0035             		move.b	#1,$35(a0)
0000D412 6100 0000                  		bsr.w	FindNextFreeObj
0000D416 6600                       		bne.s	loc_B07A
0000D418 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D41C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D422 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D428 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D42C 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D430 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D436 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D43C 2348 0038                  		move.l	a0,$38(a1)
0000D440 2448                       		movea.l	a0,a2
0000D442 6100                       		bsr.s	sub_B09C
0000D444                            
0000D444                            loc_B07A:
0000D444 7400                       		moveq	#0,d2
0000D446 45E8 0036                  		lea	$36(a0),a2
0000D44A 141A                       		move.b	(a2)+,d2
0000D44C 5302                       		subq.b	#1,d2
0000D44E 6500                       		bcs.s	locret_B09A
0000D450                            
0000D450                            loc_B086:
0000D450 7000                       		moveq	#0,d0
0000D452 101A                       		move.b	(a2)+,d0
0000D454 ED48                       		lsl.w	#6,d0
0000D456 0640 D000                  		addi.w	#$D000,d0
0000D45A 3240                       		movea.w	d0,a1
0000D45C 3341 003C                  		move.w	d1,$3C(a1)
0000D460 51CA FFEE                  		dbf	d2,loc_B086
0000D464                            
0000D464                            locret_B09A:
0000D464 4E75                       		rts	
0000D466                            
0000D466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D466                            
0000D466                            
0000D466                            sub_B09C:
0000D466 45EA 0036                  		lea	$36(a2),a2
0000D46A 7000                       		moveq	#0,d0
0000D46C 1012                       		move.b	(a2),d0
0000D46E 5212                       		addq.b	#1,(a2)
0000D470 45F2 0001                  		lea	1(a2,d0.w),a2
0000D474 3009                       		move.w	a1,d0
0000D476 0440 D000                  		subi.w	#$D000,d0
0000D47A EC48                       		lsr.w	#6,d0
0000D47C 0240 007F                  		andi.w	#$7F,d0
0000D480 1480                       		move.b	d0,(a2)
0000D482 4E75                       		rts	
0000D484                            ; End of function sub_B09C
0000D484                            
0000D484                            ; ===========================================================================
0000D484                            
0000D484                            LGrass_ChkDel:
0000D484 4A28 0035                  		tst.b	$35(a0)
0000D488 6700                       		beq.s	loc_B0C6
0000D48A 4A28 0001                  		tst.b	obRender(a0)
0000D48E 6A00                       		bpl.s	LGrass_DelFlames
0000D490                            
0000D490                            loc_B0C6:
0000D4AE 4E75                       		rts	
0000D4B0                            ; ===========================================================================
0000D4B0                            
0000D4B0                            LGrass_DelFlames:
0000D4B0 7400                       		moveq	#0,d2
0000D4B2                            
0000D4B2                            loc_B0E8:
0000D4B2 45E8 0036                  		lea	$36(a0),a2
0000D4B6 1412                       		move.b	(a2),d2
0000D4B8 421A                       		clr.b	(a2)+
0000D4BA 5302                       		subq.b	#1,d2
0000D4BC 6500                       		bcs.s	locret_B116
0000D4BE                            
0000D4BE                            loc_B0F4:
0000D4BE 7000                       		moveq	#0,d0
0000D4C0 1012                       		move.b	(a2),d0
0000D4C2 421A                       		clr.b	(a2)+
0000D4C4 ED48                       		lsl.w	#6,d0
0000D4C6 0640 D000                  		addi.w	#$D000,d0
0000D4CA 3240                       		movea.w	d0,a1
0000D4CC 6100 0000                  		bsr.w	DeleteChild
0000D4D0 51CA FFEC                  		dbf	d2,loc_B0F4
0000D4D4 117C 0000 0035             		move.b	#0,$35(a0)
0000D4DA 117C 0000 0034             		move.b	#0,$34(a0)
0000D4E0                            
0000D4E0                            locret_B116:
0000D4E0 4E75                       		rts	
0000D4E2                            ; ===========================================================================
0000D4E2                            ; ---------------------------------------------------------------------------
0000D4E2                            ; Collision data for large moving platforms (MZ)
0000D4E2                            ; ---------------------------------------------------------------------------
0000D4E2                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D52E                            		even
0000D52E                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D55A                            		even
0000D55A                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D5A6                            		even
0000D5A6                            		even
0000D5A6                            		include	"_incObj\35 Burning Grass.asm"
0000D5A6                            ; ---------------------------------------------------------------------------
0000D5A6                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D5A6                            ; (appears when	you walk on sinking platforms)
0000D5A6                            ; ---------------------------------------------------------------------------
0000D5A6                            
0000D5A6                            GrassFire:
0000D5A6 7000                       		moveq	#0,d0
0000D5A8 1028 0024                  		move.b	obRoutine(a0),d0
0000D5AC 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D5B0 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D5B4                            ; ===========================================================================
0000D5B4 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D5B6 0000                       		dc.w loc_B238-GFire_Index
0000D5B8 0000                       		dc.w GFire_Move-GFire_Index
0000D5BA                            
0000D5BA =0000002A                  gfire_origX:	equ $2A
0000D5BA                            ; ===========================================================================
0000D5BA                            
0000D5BA                            GFire_Main:	; Routine 0
0000D5BA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D5BE 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D5C6 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D5CC 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D5D2 117C 0004 0001             		move.b	#4,obRender(a0)
0000D5D8 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D5DE 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D5E4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D5F4 4A28 0028                  		tst.b	obSubtype(a0)
0000D5F8 6700                       		beq.s	loc_B238
0000D5FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D5FE 6000 0000                  		bra.w	GFire_Move
0000D602                            ; ===========================================================================
0000D602                            
0000D602                            loc_B238:	; Routine 2
0000D602 2268 0030                  		movea.l	$30(a0),a1
0000D606 3228 0008                  		move.w	obX(a0),d1
0000D60A 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D60E 0641 000C                  		addi.w	#$C,d1
0000D612 3001                       		move.w	d1,d0
0000D614 E248                       		lsr.w	#1,d0
0000D616 1031 0000                  		move.b	(a1,d0.w),d0
0000D61A 4440                       		neg.w	d0
0000D61C D068 002C                  		add.w	$2C(a0),d0
0000D620 3400                       		move.w	d0,d2
0000D622 D068 003C                  		add.w	$3C(a0),d0
0000D626 3140 000C                  		move.w	d0,obY(a0)
0000D62A 0C41 0084                  		cmpi.w	#$84,d1
0000D62E 6400                       		bcc.s	loc_B2B0
0000D630 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D638 0C41 0080                  		cmpi.w	#$80,d1
0000D63C 6400                       		bcc.s	loc_B2B0
0000D63E 2028 0008                  		move.l	obX(a0),d0
0000D642 0680 0008 0000             		addi.l	#$80000,d0
0000D648 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D64E 6600                       		bne.s	loc_B2B0
0000D650 6100 0000                  		bsr.w	FindNextFreeObj
0000D654 6600                       		bne.s	loc_B2B0
0000D656 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D65A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D660 3342 002C                  		move.w	d2,$2C(a1)
0000D664 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D66A 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D670 2468 0038                  		movea.l	$38(a0),a2
0000D674 6100 FDF0                  		bsr.w	sub_B09C
0000D678                            
0000D678                            loc_B2B0:
0000D678 6000                       		bra.s	GFire_Animate
0000D67A                            ; ===========================================================================
0000D67A                            
0000D67A                            GFire_Move:	; Routine 4
0000D67A 3028 002C                  		move.w	$2C(a0),d0
0000D67E D068 003C                  		add.w	$3C(a0),d0
0000D682 3140 000C                  		move.w	d0,obY(a0)
0000D686                            
0000D686                            GFire_Animate:
0000D686 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D68C 6100 F456                  		bsr.w	AnimateSprite
0000D690 6000 0000                  		bra.w	DisplaySprite
0000D690 6000 0000                  		bra.w	DisplaySprite
0000D694                            		include	"_anim\Burning Grass.asm"
0000D694                            ; ---------------------------------------------------------------------------
0000D694                            ; Animation script - burning grass that sits on the floor (MZ)
0000D694                            ; ---------------------------------------------------------------------------
0000D694 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D696 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D69C                            		even
0000D69C                            		even
0000D69C                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D69C                            ; ---------------------------------------------------------------------------
0000D69C                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D69C                            ; ---------------------------------------------------------------------------
0000D69C                            Map_LGrass_internal:
0000D69C 0000                       		dc.w @wide-Map_LGrass_internal
0000D69E 0000                       		dc.w @sloped-Map_LGrass_internal
0000D6A0 0000                       		dc.w @narrow-Map_LGrass_internal
0000D6A2 0D                         @wide:		dc.b $D
0000D6A3 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D6A8 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D6AD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D6B2 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D6B7 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D6BC F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D6C1 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D6C6 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D6CB F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D6D0 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D6D5 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D6DA D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D6DF F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D6E4 0A                         @sloped:	dc.b $A
0000D6E5 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D6EA F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D6EF 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D6F4 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D6F9 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D6FE F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D703 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D708 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D70D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D712 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D717 06                         @narrow:	dc.b 6
0000D718 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D71D F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D722 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D727 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D72C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D731 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D736                            		even
0000D736                            		even
0000D736                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D736                            ; --------------------------------------------------------------------------------
0000D736                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D736                            ; --------------------------------------------------------------------------------
0000D736                            
0000D736                            SME_gyvTV:	
0000D736 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D73A 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D73E 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D742 01                         SME_gyvTV_C:	dc.b 1	
0000D743 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D748 01                         SME_gyvTV_12:	dc.b 1	
0000D749 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D74E 01                         SME_gyvTV_18:	dc.b 1	
0000D74F F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D754 01                         SME_gyvTV_1E:	dc.b 1	
0000D755 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D75A 01                         SME_gyvTV_24:	dc.b 1	
0000D75B F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D760 01                         SME_gyvTV_2A:	dc.b 1	
0000D761 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D766                            		even
0000D766                            		even
0000D766                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D766                            ; ---------------------------------------------------------------------------
0000D766                            ; Object 30 - large green glass blocks (MZ)
0000D766                            ; ---------------------------------------------------------------------------
0000D766                            
0000D766                            GlassBlock:
0000D766 7000                       		moveq	#0,d0
0000D768 1028 0024                  		move.b	obRoutine(a0),d0
0000D76C 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D770 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D792 6000 0000                  		bra.w	DisplaySprite
0000D796                            ; ===========================================================================
0000D796                            
0000D796                            Glass_Delete:
0000D796 6000 0000                  		bra.w	DeleteObject
0000D79A                            ; ===========================================================================
0000D79A 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D79C 0000                       		dc.w Glass_Block012-Glass_Index
0000D79E 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D7A0 0000                       		dc.w Glass_Block34-Glass_Index
0000D7A2 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D7A4                            
0000D7A4 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D7A4 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D7A4                            
0000D7A4 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D7A7 0400 01                    		dc.b 4,	0, 1
0000D7AA 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D7AD 0800 01                    		dc.b 8,	0, 1
0000D7B0                            ; ===========================================================================
0000D7B0                            
0000D7B0                            Glass_Main:	; Routine 0
0000D7B0 45F9 0000 D7A4             		lea	(Glass_Vars1).l,a2
0000D7B6 7201                       		moveq	#1,d1
0000D7B8 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D7BE 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D7C4 6500                       		bcs.s	@IsType012	; if yes, branch
0000D7C6                            
0000D7C6 45F9 0000 D7AA             		lea	(Glass_Vars2).l,a2
0000D7CC 7201                       		moveq	#1,d1
0000D7CE 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D7D4                            
0000D7D4                            	@IsType012:
0000D7D4 2248                       		movea.l	a0,a1
0000D7D6 6000                       		bra.s	@Load		; load main object
0000D7D8                            ; ===========================================================================
0000D7D8                            
0000D7D8                            	@Repeat:
0000D7D8 6100 0000                  		bsr.w	FindNextFreeObj
0000D7DC 6600                       		bne.s	@Fail
0000D7DE                            
0000D7DE                            @Load:
0000D7DE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D7E2 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D7E6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D7EC 101A                       		move.b	(a2)+,d0
0000D7EE 4880                       		ext.w	d0
0000D7F0 D068 000C                  		add.w	obY(a0),d0
0000D7F4 3340 000C                  		move.w	d0,obY(a1)
0000D7F8 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D800 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D806 137C 0004 0001             		move.b	#4,obRender(a1)
0000D80C 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D812 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D818 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D81E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D824 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D828 2348 003C                  		move.l	a0,glass_parent(a1)
0000D82C 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D830                            
0000D830 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D836 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D83C 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D840 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D846                            
0000D846                            	@Fail:
0000D846 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D84C 08E8 0004 0001             		bset	#4,obRender(a0)
0000D852                            
0000D852                            Glass_Block012:	; Routine 2
0000D852 6100 0000                  		bsr.w	Glass_Types
0000D856 323C 002B                  		move.w	#$2B,d1
0000D85A 343C 0048                  		move.w	#$48,d2
0000D85E 363C 0049                  		move.w	#$49,d3
0000D862 3828 0008                  		move.w	obX(a0),d4
0000D866 6000 0000                  		bra.w	SolidObject
0000D86A                            ; ===========================================================================
0000D86A                            
0000D86A                            Glass_Reflect012:
0000D86A                            		; Routine 4
0000D86A 2268 003C                  		movea.l	$3C(a0),a1
0000D86E 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D874 6000 0000                  		bra.w	Glass_Types
0000D878                            ; ===========================================================================
0000D878                            
0000D878                            Glass_Block34:	; Routine 6
0000D878 6100 0000                  		bsr.w	Glass_Types
0000D87C 323C 002B                  		move.w	#$2B,d1
0000D880 343C 0038                  		move.w	#$38,d2
0000D884 363C 0039                  		move.w	#$39,d3
0000D888 3828 0008                  		move.w	obX(a0),d4
0000D88C 6000 0000                  		bra.w	SolidObject
0000D890                            ; ===========================================================================
0000D890                            
0000D890                            Glass_Reflect34:
0000D890                            		; Routine 8
0000D890 2268 003C                  		movea.l	$3C(a0),a1
0000D894 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D89A 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D8A0 6000 0000                  		bra.w	Glass_Types
0000D8A4                            
0000D8A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8A4                            
0000D8A4                            
0000D8A4                            Glass_Types:
0000D8A4 7000                       		moveq	#0,d0
0000D8A6 1028 0028                  		move.b	obSubtype(a0),d0
0000D8AA 0240 0007                  		andi.w	#7,d0
0000D8AE D040                       		add.w	d0,d0
0000D8B0 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D8B4 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D8B8                            ; End of function Glass_Types
0000D8B8                            
0000D8B8                            ; ===========================================================================
0000D8B8 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D8BA 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D8BC 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D8BE 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D8C0 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D8C2                            ; ===========================================================================
0000D8C2                            
0000D8C2                            Glass_Type00:
0000D8C2 4E75                       		rts	
0000D8C4                            ; ===========================================================================
0000D8C4                            
0000D8C4                            Glass_Type01:
0000D8C4 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D8C8 323C 0040                  		move.w	#$40,d1
0000D8CC 6000                       		bra.s	loc_B514
0000D8CE                            ; ===========================================================================
0000D8CE                            
0000D8CE                            Glass_Type02:
0000D8CE 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D8D2 323C 0040                  		move.w	#$40,d1
0000D8D6 4440                       		neg.w	d0
0000D8D8 D041                       		add.w	d1,d0
0000D8DA                            
0000D8DA                            loc_B514:
0000D8DA 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D8E0 6700                       		beq.s	loc_B526
0000D8E2 4440                       		neg.w	d0
0000D8E4 D041                       		add.w	d1,d0
0000D8E6 E208                       		lsr.b	#1,d0
0000D8E8 0640 0020                  		addi.w	#$20,d0
0000D8EC                            
0000D8EC                            loc_B526:
0000D8EC 6000 0000                  		bra.w	loc_B5EE
0000D8F0                            ; ===========================================================================
0000D8F0                            
0000D8F0                            Glass_Type03:
0000D8F0 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D8F6 6700                       		beq.s	loc_B53E
0000D8F8 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D8FC 0440 0010                  		subi.w	#$10,d0
0000D900 6000 0000                  		bra.w	loc_B5EE
0000D904                            ; ===========================================================================
0000D904                            
0000D904                            loc_B53E:
0000D904 0828 0003 0022             		btst	#3,obStatus(a0)
0000D90A 6600                       		bne.s	loc_B54E
0000D90C 08A8 0000 0034             		bclr	#0,$34(a0)
0000D912 6000                       		bra.s	loc_B582
0000D914                            ; ===========================================================================
0000D914                            
0000D914                            loc_B54E:
0000D914 4A28 0034                  		tst.b	$34(a0)
0000D918 6600                       		bne.s	loc_B582
0000D91A 117C 0001 0034             		move.b	#1,$34(a0)
0000D920 08E8 0000 0035             		bset	#0,$35(a0)
0000D926 6700                       		beq.s	loc_B582
0000D928 08E8 0007 0034             		bset	#7,$34(a0)
0000D92E 317C 0010 0036             		move.w	#$10,$36(a0)
0000D934 117C 000A 0038             		move.b	#$A,$38(a0)
0000D93A 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D940 6600                       		bne.s	loc_B582
0000D942 317C 0040 0036             		move.w	#$40,$36(a0)
0000D948                            
0000D948                            loc_B582:
0000D948 4A28 0034                  		tst.b	$34(a0)
0000D94C 6A00                       		bpl.s	loc_B5AA
0000D94E 4A28 0038                  		tst.b	$38(a0)
0000D952 6700                       		beq.s	loc_B594
0000D954 5328 0038                  		subq.b	#1,$38(a0)
0000D958 6600                       		bne.s	loc_B5AA
0000D95A                            
0000D95A                            loc_B594:
0000D95A 4A68 0032                  		tst.w	glass_dist(a0)
0000D95E 6700                       		beq.s	loc_B5A4
0000D960 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D964 5368 0036                  		subq.w	#1,$36(a0)
0000D968 6600                       		bne.s	loc_B5AA
0000D96A                            
0000D96A                            loc_B5A4:
0000D96A 08A8 0007 0034             		bclr	#7,$34(a0)
0000D970                            
0000D970                            loc_B5AA:
0000D970 3028 0032                  		move.w	glass_dist(a0),d0
0000D974 6000                       		bra.s	loc_B5EE
0000D976                            ; ===========================================================================
0000D976                            
0000D976                            Glass_Type04:
0000D976 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D97C 6700                       		beq.s	Glass_ChkSwitch
0000D97E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D982 0440 0010                  		subi.w	#$10,d0
0000D986 6000                       		bra.s	loc_B5EE
0000D988                            ; ===========================================================================
0000D988                            
0000D988                            Glass_ChkSwitch:
0000D988 4A28 0034                  		tst.b	$34(a0)
0000D98C 6600                       		bne.s	loc_B5E0
0000D98E 45F8 F7E0                  		lea	(f_switch).w,a2
0000D992 7000                       		moveq	#0,d0
0000D994 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D998 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D99A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D99E 6700                       		beq.s	loc_B5EA	; if not, branch
0000D9A0 117C 0001 0034             		move.b	#1,$34(a0)
0000D9A6                            
0000D9A6                            loc_B5E0:
0000D9A6 4A68 0032                  		tst.w	glass_dist(a0)
0000D9AA 6700                       		beq.s	loc_B5EA
0000D9AC 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D9B0                            
0000D9B0                            loc_B5EA:
0000D9B0 3028 0032                  		move.w	glass_dist(a0),d0
0000D9B4                            
0000D9B4                            loc_B5EE:
0000D9B4 3228 0030                  		move.w	$30(a0),d1
0000D9B8 9240                       		sub.w	d0,d1
0000D9BA 3141 000C                  		move.w	d1,obY(a0)
0000D9BE 4E75                       		rts	
0000D9BE 4E75                       		rts	
0000D9C0                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D9C0                            ; --------------------------------------------------------------------------------
0000D9C0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D9C0                            ; --------------------------------------------------------------------------------
0000D9C0                            
0000D9C0                            SME_NEyTf:	
0000D9C0 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D9C4 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D9C6 0C                         SME_NEyTf_6:	dc.b $C	
0000D9C7 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D9CC B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D9D1 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D9D6 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D9DB E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D9E0 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D9E5 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D9EA 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D9EF 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D9F4 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D9F9 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D9FE 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000DA03 02                         SME_NEyTf_43:	dc.b 2	
0000DA04 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000DA09 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000DA0E 0A                         SME_NEyTf_4E:	dc.b $A	
0000DA0F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000DA14 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000DA19 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000DA1E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000DA23 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000DA28 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000DA2D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000DA32 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000DA37 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000DA3C 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000DA42 00                         		even
0000DA42 00                         		even
0000DA42                            		include	"_incObj\31 Chained Stompers.asm"
0000DA42                            ; ---------------------------------------------------------------------------
0000DA42                            ; Object 31 - stomping metal blocks on chains (MZ)
0000DA42                            ; ---------------------------------------------------------------------------
0000DA42                            
0000DA42                            ChainStomp:
0000DA42 7000                       		moveq	#0,d0
0000DA44 1028 0024                  		move.b	obRoutine(a0),d0
0000DA48 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000DA4C 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000DA50                            ; ===========================================================================
0000DA50 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000DA52 0000                       		dc.w loc_B798-CStom_Index
0000DA54 0000                       		dc.w loc_B7FE-CStom_Index
0000DA56 0000                       		dc.w CStom_Display2-CStom_Index
0000DA58 0000                       		dc.w loc_B7E2-CStom_Index
0000DA5A                            
0000DA5A =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000DA5A                            
0000DA5A 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000DA5C 0100                       		dc.b 1,	0
0000DA5E                            
0000DA5E 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000DA61 041C 01                    		dc.b 4,	$1C, 1
0000DA64 08CC 03                    		dc.b 8,	$CC, 3
0000DA67 06F0 02                    		dc.b 6,	$F0, 2
0000DA6A                            
0000DA6A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000DA6E 5000 7800                  		dc.w $5000, $7800
0000DA72 3800 5800                  		dc.w $3800, $5800
0000DA76 B800                       		dc.w $B800
0000DA78                            ; ===========================================================================
0000DA78                            
0000DA78                            CStom_Main:	; Routine 0
0000DA78 7000                       		moveq	#0,d0
0000DA7A 1028 0028                  		move.b	obSubtype(a0),d0
0000DA7E 6A00                       		bpl.s	loc_B6CE
0000DA80 0240 007F                  		andi.w	#$7F,d0
0000DA84 D040                       		add.w	d0,d0
0000DA86 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000DA8A 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000DA8E 101A                       		move.b	(a2)+,d0
0000DA90 1140 0028                  		move.b	d0,obSubtype(a0)
0000DA94                            
0000DA94                            loc_B6CE:
0000DA94 0200 000F                  		andi.b	#$F,d0
0000DA98 D040                       		add.w	d0,d0
0000DA9A 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000DA9E 4A40                       		tst.w	d0
0000DAA0 6600                       		bne.s	loc_B6E0
0000DAA2 3142 0032                  		move.w	d2,$32(a0)
0000DAA6                            
0000DAA6                            loc_B6E0:
0000DAA6 45F9 0000 DA5E             		lea	(CStom_Var).l,a2
0000DAAC 2248                       		movea.l	a0,a1
0000DAAE 7203                       		moveq	#3,d1
0000DAB0 6000                       		bra.s	CStom_MakeStomper
0000DAB2                            ; ===========================================================================
0000DAB2                            
0000DAB2                            CStom_Loop:
0000DAB2 6100 0000                  		bsr.w	FindNextFreeObj
0000DAB6 6600 0000                  		bne.w	CStom_SetSize
0000DABA                            
0000DABA                            CStom_MakeStomper:
0000DABA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DABE 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000DAC2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000DAC8 101A                       		move.b	(a2)+,d0
0000DACA 4880                       		ext.w	d0
0000DACC D068 000C                  		add.w	obY(a0),d0
0000DAD0 3340 000C                  		move.w	d0,obY(a1)
0000DAD4 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000DADC 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DAE2 137C 0004 0001             		move.b	#4,obRender(a1)
0000DAE8 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000DAEE 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DAF4 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000DAFA 3342 0034                  		move.w	d2,$34(a1)
0000DAFE 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DB04 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DB08 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000DB0E 6600                       		bne.s	loc_B76A
0000DB10 5341                       		subq.w	#1,d1
0000DB12 1028 0028                  		move.b	obSubtype(a0),d0
0000DB16 0240 00F0                  		andi.w	#$F0,d0
0000DB1A 0C40 0020                  		cmpi.w	#$20,d0
0000DB1E 679A                       		beq.s	CStom_MakeStomper
0000DB20 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000DB26 137C 0090 0020             		move.b	#$90,obColType(a1)
0000DB2C 5241                       		addq.w	#1,d1
0000DB2E                            
0000DB2E                            loc_B76A:
0000DB2E 2348 003C                  		move.l	a0,$3C(a1)
0000DB32 51C9 FF7E                  		dbf	d1,CStom_Loop
0000DB36                            
0000DB36 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DB3C                            
0000DB3C                            CStom_SetSize:
0000DB3C 7000                       		moveq	#0,d0
0000DB3E 1028 0028                  		move.b	obSubtype(a0),d0
0000DB42 E648                       		lsr.w	#3,d0
0000DB44 0200 000E                  		andi.b	#$E,d0
0000DB48 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000DB4C 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000DB50 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000DB54 6000                       		bra.s	loc_B798
0000DB56                            ; ===========================================================================
0000DB56 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000DB58 3009                       		dc.b $30, 9
0000DB5A 100A                       		dc.b $10, $A
0000DB5C                            ; ===========================================================================
0000DB5C                            
0000DB5C                            loc_B798:	; Routine 2
0000DB5C 6100 0000                  		bsr.w	CStom_Types
0000DB60 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000DB66 7200                       		moveq	#0,d1
0000DB68 1228 0014                  		move.b	obActWid(a0),d1
0000DB6C 0641 000B                  		addi.w	#$B,d1
0000DB70 343C 000C                  		move.w	#$C,d2
0000DB74 363C 000D                  		move.w	#$D,d3
0000DB78 3828 0008                  		move.w	obX(a0),d4
0000DB7C 6100 0000                  		bsr.w	SolidObject
0000DB80 0828 0003 0022             		btst	#3,obStatus(a0)
0000DB86 6700                       		beq.s	CStom_Display
0000DB88 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DB8E 6400                       		bcc.s	CStom_Display
0000DB90 2448                       		movea.l	a0,a2
0000DB92 41F8 D000                  		lea	(v_player).w,a0
0000DB96 4EB9 0000 0000             		jsr	(KillSonic).l
0000DB9C 204A                       		movea.l	a2,a0
0000DB9E                            
0000DB9E                            CStom_Display:
0000DB9E 6100 0000                  		bsr.w	DisplaySprite
0000DBA2 6000 0000                  		bra.w	CStom_ChkDel
0000DBA6                            ; ===========================================================================
0000DBA6                            
0000DBA6                            loc_B7E2:	; Routine 8
0000DBA6 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000DBAC 08E8 0004 0001             		bset	#4,obRender(a0)
0000DBB2 2268 003C                  		movea.l	$3C(a0),a1
0000DBB6 1029 0032                  		move.b	$32(a1),d0
0000DBBA EA08                       		lsr.b	#5,d0
0000DBBC 5600                       		addq.b	#3,d0
0000DBBE 1140 001A                  		move.b	d0,obFrame(a0)
0000DBC2                            
0000DBC2                            loc_B7FE:	; Routine 4
0000DBC2 2268 003C                  		movea.l	$3C(a0),a1
0000DBC6 7000                       		moveq	#0,d0
0000DBC8 1029 0032                  		move.b	$32(a1),d0
0000DBCC D068 0030                  		add.w	$30(a0),d0
0000DBD0 3140 000C                  		move.w	d0,obY(a0)
0000DBD4                            
0000DBD4                            CStom_Display2:	; Routine 6
0000DBD4 6100 0000                  		bsr.w	DisplaySprite
0000DBD8                            
0000DBD8                            CStom_ChkDel:
0000DBF6 4E75                       		rts	
0000DBF8                            ; ===========================================================================
0000DBF8                            
0000DBF8                            CStom_Types:
0000DBF8 1028 0028                  		move.b	obSubtype(a0),d0
0000DBFC 0240 000F                  		andi.w	#$F,d0
0000DC00 D040                       		add.w	d0,d0
0000DC02 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000DC06 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000DC0A                            ; ===========================================================================
0000DC0A 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000DC0C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DC0E 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DC10 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DC12 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DC14 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DC16 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DC18                            ; ===========================================================================
0000DC18                            
0000DC18                            CStom_Type00:
0000DC18 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000DC1C 7000                       		moveq	#0,d0
0000DC1E 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000DC22 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000DC26 6700                       		beq.s	loc_B8A8	; if not, branch
0000DC28 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000DC2C 6A00                       		bpl.s	loc_B872
0000DC2E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DC34 6700                       		beq.s	loc_B8A0
0000DC36                            
0000DC36                            loc_B872:
0000DC36 4A68 0032                  		tst.w	$32(a0)
0000DC3A 6700                       		beq.s	loc_B8A0
0000DC3C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DC40 0200 000F                  		andi.b	#$F,d0
0000DC44 6600                       		bne.s	loc_B892
0000DC46 4A28 0001                  		tst.b	1(a0)
0000DC4A 6A00                       		bpl.s	loc_B892
0000DC56                            
0000DC56                            loc_B892:
0000DC56 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DC5C 6400                       		bcc.s	CStom_Restart
0000DC5E 317C 0000 0032             		move.w	#0,$32(a0)
0000DC64                            
0000DC64                            loc_B8A0:
0000DC64 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DC6A 6000                       		bra.s	CStom_Restart
0000DC6C                            ; ===========================================================================
0000DC6C                            
0000DC6C                            loc_B8A8:
0000DC6C 3228 0034                  		move.w	$34(a0),d1
0000DC70 B268 0032                  		cmp.w	$32(a0),d1
0000DC74 6700                       		beq.s	CStom_Restart
0000DC76 3028 0012                  		move.w	obVelY(a0),d0
0000DC7A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DC80 D168 0032                  		add.w	d0,$32(a0)
0000DC84 B268 0032                  		cmp.w	$32(a0),d1
0000DC88 6200                       		bhi.s	CStom_Restart
0000DC8A 3141 0032                  		move.w	d1,$32(a0)
0000DC8E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DC94 4A28 0001                  		tst.b	obRender(a0)
0000DC98 6A00                       		bpl.s	CStom_Restart
0000DCA4                            
0000DCA4                            CStom_Restart:
0000DCA4 7000                       		moveq	#0,d0
0000DCA6 1028 0032                  		move.b	$32(a0),d0
0000DCAA D068 0030                  		add.w	$30(a0),d0
0000DCAE 3140 000C                  		move.w	d0,obY(a0)
0000DCB2 4E75                       		rts	
0000DCB4                            ; ===========================================================================
0000DCB4                            
0000DCB4                            CStom_Type01:
0000DCB4 4A68 0036                  		tst.w	$36(a0)
0000DCB8 6700                       		beq.s	loc_B938
0000DCBA 4A68 0038                  		tst.w	$38(a0)
0000DCBE 6700                       		beq.s	loc_B902
0000DCC0 5368 0038                  		subq.w	#1,$38(a0)
0000DCC4 6000                       		bra.s	loc_B97C
0000DCC6                            ; ===========================================================================
0000DCC6                            
0000DCC6                            loc_B902:
0000DCC6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DCCA 0200 000F                  		andi.b	#$F,d0
0000DCCE 6600                       		bne.s	loc_B91C
0000DCD0 4A28 0001                  		tst.b	obRender(a0)
0000DCD4 6A00                       		bpl.s	loc_B91C
0000DCE0                            
0000DCE0                            loc_B91C:
0000DCE0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DCE6 6400                       		bcc.s	loc_B97C
0000DCE8 317C 0000 0032             		move.w	#0,$32(a0)
0000DCEE 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DCF4 317C 0000 0036             		move.w	#0,$36(a0)
0000DCFA 6000                       		bra.s	loc_B97C
0000DCFC                            ; ===========================================================================
0000DCFC                            
0000DCFC                            loc_B938:
0000DCFC 3228 0034                  		move.w	$34(a0),d1
0000DD00 B268 0032                  		cmp.w	$32(a0),d1
0000DD04 6700                       		beq.s	loc_B97C
0000DD06 3028 0012                  		move.w	obVelY(a0),d0
0000DD0A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DD10 D168 0032                  		add.w	d0,$32(a0)
0000DD14 B268 0032                  		cmp.w	$32(a0),d1
0000DD18 6200                       		bhi.s	loc_B97C
0000DD1A 3141 0032                  		move.w	d1,$32(a0)
0000DD1E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DD24 317C 0001 0036             		move.w	#1,$36(a0)
0000DD2A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DD30 4A28 0001                  		tst.b	obRender(a0)
0000DD34 6A00                       		bpl.s	loc_B97C
0000DD40                            
0000DD40                            loc_B97C:
0000DD40 6000 FF62                  		bra.w	CStom_Restart
0000DD44                            ; ===========================================================================
0000DD44                            
0000DD44                            CStom_Type03:
0000DD44 3038 D008                  		move.w	(v_player+obX).w,d0
0000DD48 9068 0008                  		sub.w	obX(a0),d0
0000DD4C 6400                       		bcc.s	loc_B98C
0000DD4E 4440                       		neg.w	d0
0000DD50                            
0000DD50                            loc_B98C:
0000DD50 0C40 0090                  		cmpi.w	#$90,d0
0000DD54 6400                       		bcc.s	loc_B996
0000DD56 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DD5A                            
0000DD5A                            loc_B996:
0000DD5A 6000 FF48                  		bra.w	CStom_Restart
0000DD5A 6000 FF48                  		bra.w	CStom_Restart
0000DD5E                            		include	"_incObj\45 Sideways Stomper.asm"
0000DD5E                            ; ---------------------------------------------------------------------------
0000DD5E                            ; Object 45 - spiked metal block from beta version (MZ)
0000DD5E                            ; ---------------------------------------------------------------------------
0000DD5E                            
0000DD5E                            SideStomp:
0000DD5E 7000                       		moveq	#0,d0
0000DD60 1028 0024                  		move.b	obRoutine(a0),d0
0000DD64 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DD68 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DD6C                            ; ===========================================================================
0000DD6C 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DD6E 0000                       		dc.w SStom_Solid-SStom_Index
0000DD70 0000                       		dc.w loc_BA8E-SStom_Index
0000DD72 0000                       		dc.w SStom_Display-SStom_Index
0000DD74 0000                       		dc.w SStom_Pole-SStom_Index
0000DD76                            
0000DD76                            		;	routine		frame
0000DD76                            		;		 xpos
0000DD76 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DD79 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DD7C 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DD7F 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DD82                            
0000DD82                            ;word_B9BE:	; Note that this indicates three subtypes
0000DD82 3800                       SStom_Len:	dc.w $3800	; short
0000DD84 A000                       		dc.w $A000	; long
0000DD86 5000                       		dc.w $5000	; medium
0000DD88                            ; ===========================================================================
0000DD88                            
0000DD88                            SStom_Main:	; Routine 0
0000DD88 7000                       		moveq	#0,d0
0000DD8A 1028 0028                  		move.b	obSubtype(a0),d0
0000DD8E D040                       		add.w	d0,d0
0000DD90 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DD94 45F9 0000 DD76             		lea	(SStom_Var).l,a2
0000DD9A 2248                       		movea.l	a0,a1
0000DD9C 7203                       		moveq	#3,d1
0000DD9E 6000                       		bra.s	@load
0000DDA0                            
0000DDA0                            	@loop:
0000DDA0 6100 0000                  		bsr.w	FindNextFreeObj
0000DDA4 6600                       		bne.s	@fail
0000DDA6                            
0000DDA6                            	@load:
0000DDA6 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DDAA 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DDAE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DDB4 101A                       		move.b	(a2)+,d0
0000DDB6 4880                       		ext.w	d0
0000DDB8 D068 0008                  		add.w	obX(a0),d0
0000DDBC 3340 0008                  		move.w	d0,obX(a1)
0000DDC0 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DDC8 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DDCE 137C 0004 0001             		move.b	#4,obRender(a1)
0000DDD4 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DDDA 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DDE0 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DDE6 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DDEC 3342 0034                  		move.w	d2,$34(a1)
0000DDF0 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DDF6 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DDFA 6600                       		bne.s	@notspikes	; if not, branch
0000DDFC 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DE02                            
0000DE02                            	@notspikes:
0000DE02 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DE06 2348 003C                  		move.l	a0,$3C(a1)
0000DE0A 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DE0E                            
0000DE0E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DE14                            
0000DE14                            	@fail:
0000DE14 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DE1A                            
0000DE1A                            SStom_Solid:	; Routine 2
0000DE1A 3F28 0008                  		move.w	obX(a0),-(sp)
0000DE1E 6100 0000                  		bsr.w	SStom_Move
0000DE22 323C 0017                  		move.w	#$17,d1
0000DE26 343C 0020                  		move.w	#$20,d2
0000DE2A 363C 0020                  		move.w	#$20,d3
0000DE2E 381F                       		move.w	(sp)+,d4
0000DE30 6100 0000                  		bsr.w	SolidObject
0000DE34 6100 0000                  		bsr.w	DisplaySprite
0000DE38 6000 0000                  		bra.w	SStom_ChkDel
0000DE3C                            ; ===========================================================================
0000DE3C                            
0000DE3C                            SStom_Pole:	; Routine 8
0000DE3C 2268 003C                  		movea.l	$3C(a0),a1
0000DE40 1029 0032                  		move.b	$32(a1),d0
0000DE44 0600 0010                  		addi.b	#$10,d0
0000DE48 EA08                       		lsr.b	#5,d0
0000DE4A 5600                       		addq.b	#3,d0
0000DE4C 1140 001A                  		move.b	d0,obFrame(a0)
0000DE50                            
0000DE50                            loc_BA8E:	; Routine 4
0000DE50 2268 003C                  		movea.l	$3C(a0),a1
0000DE54 7000                       		moveq	#0,d0
0000DE56 1029 0032                  		move.b	$32(a1),d0
0000DE5A 4440                       		neg.w	d0
0000DE5C D068 0030                  		add.w	$30(a0),d0
0000DE60 3140 0008                  		move.w	d0,obX(a0)
0000DE64                            
0000DE64                            SStom_Display:	; Routine 6
0000DE64 6100 0000                  		bsr.w	DisplaySprite
0000DE68                            
0000DE68                            SStom_ChkDel:
0000DE86 4E75                       		rts	
0000DE88                            
0000DE88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE88                            
0000DE88                            
0000DE88                            SStom_Move:
0000DE88 7000                       		moveq	#0,d0
0000DE8A 1028 0028                  		move.b	obSubtype(a0),d0
0000DE8E D040                       		add.w	d0,d0
0000DE90 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DE94 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DE98                            ; End of function SStom_Move
0000DE98                            
0000DE98                            ; ===========================================================================
0000DE98                            		; This indicates only two subtypes... that do the same thing
0000DE98                            		; Compare to SStom_Len. This breaks subtype 02
0000DE98 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DE9A 0000                       		dc.w loc_BADA-off_BAD6
0000DE9C                            ; ===========================================================================
0000DE9C                            
0000DE9C                            loc_BADA:
0000DE9C 4A68 0036                  		tst.w	$36(a0)
0000DEA0 6700                       		beq.s	loc_BB08
0000DEA2 4A68 0038                  		tst.w	$38(a0)
0000DEA6 6700                       		beq.s	loc_BAEC
0000DEA8 5368 0038                  		subq.w	#1,$38(a0)
0000DEAC 6000                       		bra.s	loc_BB3C
0000DEAE                            ; ===========================================================================
0000DEAE                            
0000DEAE                            loc_BAEC:
0000DEAE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DEB4 6400                       		bcc.s	loc_BB3C
0000DEB6 317C 0000 0032             		move.w	#0,$32(a0)
0000DEBC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DEC2 317C 0000 0036             		move.w	#0,$36(a0)
0000DEC8 6000                       		bra.s	loc_BB3C
0000DECA                            ; ===========================================================================
0000DECA                            
0000DECA                            loc_BB08:
0000DECA 3228 0034                  		move.w	$34(a0),d1
0000DECE B268 0032                  		cmp.w	$32(a0),d1
0000DED2 6700                       		beq.s	loc_BB3C
0000DED4 3028 0010                  		move.w	obVelX(a0),d0
0000DED8 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DEDE D168 0032                  		add.w	d0,$32(a0)
0000DEE2 B268 0032                  		cmp.w	$32(a0),d1
0000DEE6 6200                       		bhi.s	loc_BB3C
0000DEE8 3141 0032                  		move.w	d1,$32(a0)
0000DEEC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DEF2 317C 0001 0036             		move.w	#1,$36(a0)
0000DEF8 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DEFE                            
0000DEFE                            loc_BB3C:
0000DEFE 7000                       		moveq	#0,d0
0000DF00 1028 0032                  		move.b	$32(a0),d0
0000DF04 4440                       		neg.w	d0
0000DF06 D068 0030                  		add.w	$30(a0),d0
0000DF0A 3140 0008                  		move.w	d0,obX(a0)
0000DF0E 4E75                       		rts	
0000DF0E 4E75                       		rts	
0000DF10                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DF10                            ; ---------------------------------------------------------------------------
0000DF10                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DF10                            ; ---------------------------------------------------------------------------
0000DF10                            Map_CStom_internal:
0000DF10 0000                       		dc.w @wideblock-Map_CStom_internal
0000DF12 0000                       		dc.w @spikes-Map_CStom_internal
0000DF14 0000                       		dc.w @ceiling-Map_CStom_internal
0000DF16 0000                       		dc.w @chain1-Map_CStom_internal
0000DF18 0000                       		dc.w @chain2-Map_CStom_internal
0000DF1A 0000                       		dc.w @chain3-Map_CStom_internal
0000DF1C 0000                       		dc.w @chain4-Map_CStom_internal
0000DF1E 0000                       		dc.w @chain5-Map_CStom_internal
0000DF20 0000                       		dc.w @chain5-Map_CStom_internal
0000DF22 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DF24 0000                       		dc.w @smallblock-Map_CStom_internal
0000DF26 05                         @wideblock:	dc.b 5
0000DF27 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DF2C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DF31 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DF36 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DF3B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DF40 05                         @spikes:	dc.b 5
0000DF41 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DF46 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DF4B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DF50 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DF55 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DF5A 01                         @ceiling:	dc.b 1
0000DF5B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DF60 02                         @chain1:	dc.b 2
0000DF61 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DF66 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DF6B 04                         @chain2:	dc.b 4
0000DF6C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DF71 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DF76 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DF7B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DF80 06                         @chain3:	dc.b 6
0000DF81 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DF86 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DF8B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DF90 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DF95 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DF9A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DF9F 08                         @chain4:	dc.b 8
0000DFA0 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DFA5 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DFAA C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DFAF D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DFB4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DFB9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DFBE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DFC3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DFC8 0A                         @chain5:	dc.b $A
0000DFC9 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DFCE 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DFD3 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DFD8 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DFDD C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DFE2 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DFE7 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DFEC F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DFF1 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DFF6 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DFFB 05                         @mediumblock:	dc.b 5
0000DFFC F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000E001 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000E006 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000E00B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000E010 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000E015 01                         @smallblock:	dc.b 1
0000E016 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000E01C 00                         		even
0000E01C 00                         		even
0000E01C                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000E01C                            ; ---------------------------------------------------------------------------
0000E01C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000E01C                            ; ---------------------------------------------------------------------------
0000E01C                            Map_SStom_internal:
0000E01C 0000                       		dc.w @block-Map_SStom_internal
0000E01E 0000                       		dc.w @spikes-Map_SStom_internal
0000E020 0000                       		dc.w @wallbracket-Map_SStom_internal
0000E022 0000                       		dc.w @pole1-Map_SStom_internal
0000E024 0000                       		dc.w @pole2-Map_SStom_internal
0000E026 0000                       		dc.w @pole3-Map_SStom_internal
0000E028 0000                       		dc.w @pole4-Map_SStom_internal
0000E02A 0000                       		dc.w @pole5-Map_SStom_internal
0000E02C 0000                       		dc.w @pole5-Map_SStom_internal
0000E02E 03                         @block:		dc.b 3
0000E02F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000E034 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000E039 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000E03E 03                         @spikes:	dc.b 3
0000E03F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000E044 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000E049 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000E04E 01                         @wallbracket:	dc.b 1
0000E04F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000E054 02                         @pole1:		dc.b 2
0000E055 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000E05A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E05F 04                         @pole2:		dc.b 4
0000E060 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000E065 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E06A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000E06F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000E074 06                         @pole3:		dc.b 6
0000E075 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000E07A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E07F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000E084 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000E089 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000E08E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000E093 08                         @pole4:		dc.b 8
0000E094 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000E099 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E09E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000E0A3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000E0A8 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000E0AD F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000E0B2 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000E0B7 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000E0BC 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000E0BD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000E0C2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E0C7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000E0CC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000E0D1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000E0D6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000E0DB F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000E0E0 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000E0E5 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000E0EA F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000E0EF                            		; @pole6 should be here, but it isn't...
0000E0F0 00                         		even
0000E0F0 00                         		even
0000E0F0                            
0000E0F0                            		include	"_incObj\32 Button.asm"
0000E0F0                            ; ---------------------------------------------------------------------------
0000E0F0                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000E0F0                            ; ---------------------------------------------------------------------------
0000E0F0                            
0000E0F0                            Button:
0000E0F0 7000                       		moveq	#0,d0
0000E0F2 1028 0024                  		move.b	obRoutine(a0),d0
0000E0F6 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000E0FA 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000E0FE                            ; ===========================================================================
0000E0FE 0000                       But_Index:	dc.w But_Main-But_Index
0000E100 0000                       		dc.w But_Pressed-But_Index
0000E102                            ; ===========================================================================
0000E102                            
0000E102                            But_Main:	; Routine 0
0000E102 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E106 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000E10E 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000E114 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000E11A 6700                       		beq.s	But_IsMZ	; if yes, branch
0000E11C                            
0000E11C 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000E122                            
0000E122                            	But_IsMZ:
0000E122 117C 0004 0001             		move.b	#4,obRender(a0)
0000E128 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000E12E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000E134 5668 000C                  		addq.w	#3,obY(a0)
0000E138                            
0000E138                            But_Pressed:	; Routine 2
0000E138 4A28 0001                  		tst.b	obRender(a0)
0000E13C 6A00                       		bpl.s	But_Display
0000E13E 323C 001B                  		move.w	#$1B,d1
0000E142 343C 0005                  		move.w	#5,d2
0000E146 363C 0005                  		move.w	#5,d3
0000E14A 3828 0008                  		move.w	obX(a0),d4
0000E14E 6100 0000                  		bsr.w	SolidObject
0000E152 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000E158 1028 0028                  		move.b	obSubtype(a0),d0
0000E15C 0240 000F                  		andi.w	#$F,d0
0000E160 47F8 F7E0                  		lea	(f_switch).w,a3
0000E164 47F3 0000                  		lea	(a3,d0.w),a3
0000E168 7600                       		moveq	#0,d3
0000E16A 0828 0006 0028             		btst	#6,obSubtype(a0)
0000E170 6700                       		beq.s	loc_BDB2
0000E172 7607                       		moveq	#7,d3
0000E174                            
0000E174                            loc_BDB2:
0000E174 4A28 0028                  		tst.b	obSubtype(a0)
0000E178 6A00                       		bpl.s	loc_BDBE
0000E17A 6100 0000                  		bsr.w	But_MZBlock
0000E17E 6600                       		bne.s	loc_BDC8
0000E180                            
0000E180                            loc_BDBE:
0000E180 4A28 0025                  		tst.b	ob2ndRout(a0)
0000E184 6600                       		bne.s	loc_BDC8
0000E186 0793                       		bclr	d3,(a3)
0000E188 6000                       		bra.s	loc_BDDE
0000E18A                            ; ===========================================================================
0000E18A                            
0000E18A                            loc_BDC8:
0000E18A 4A13                       		tst.b	(a3)
0000E18C 6600                       		bne.s	loc_BDD6
0000E198                            
0000E198                            loc_BDD6:
0000E198 07D3                       		bset	d3,(a3)
0000E19A 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000E1A0                            
0000E1A0                            loc_BDDE:
0000E1A0 0828 0005 0028             		btst	#5,obSubtype(a0)
0000E1A6 6700                       		beq.s	But_Display
0000E1A8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000E1AC 6A00                       		bpl.s	But_Display
0000E1AE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000E1B4 0868 0001 001A             		bchg	#1,obFrame(a0)
0000E1BA                            
0000E1BA                            But_Display:
0000E1BA 6100 0000                  		bsr.w	DisplaySprite
0000E1DC 4E75                       		rts	
0000E1DE                            ; ===========================================================================
0000E1DE                            
0000E1DE                            But_Delete:
0000E1DE 6100 0000                  		bsr.w	DeleteObject
0000E1E2 4E75                       		rts	
0000E1E4                            
0000E1E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1E4                            
0000E1E4                            
0000E1E4                            But_MZBlock:
0000E1E4 3F03                       		move.w	d3,-(sp)
0000E1E6 3428 0008                  		move.w	obX(a0),d2
0000E1EA 3628 000C                  		move.w	obY(a0),d3
0000E1EE 0442 0010                  		subi.w	#$10,d2
0000E1F2 5143                       		subq.w	#8,d3
0000E1F4 383C 0020                  		move.w	#$20,d4
0000E1F8 3A3C 0010                  		move.w	#$10,d5
0000E1FC 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000E200 3C3C 005F                  		move.w	#$5F,d6
0000E204                            
0000E204                            But_MZLoop:
0000E204 4A29 0001                  		tst.b	obRender(a1)
0000E208 6A00                       		bpl.s	loc_BE4E
0000E20A 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000E20E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000E210                            
0000E210                            loc_BE4E:
0000E210 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000E214 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000E218                            
0000E218 361F                       		move.w	(sp)+,d3
0000E21A 7000                       		moveq	#0,d0
0000E21C                            
0000E21C                            locret_BE5A:
0000E21C 4E75                       		rts	
0000E21E                            ; ===========================================================================
0000E21E 1010                       But_MZData:	dc.b $10, $10
0000E220                            ; ===========================================================================
0000E220                            
0000E220                            loc_BE5E:
0000E220 7001                       		moveq	#1,d0
0000E222 0240 003F                  		andi.w	#$3F,d0
0000E226 D040                       		add.w	d0,d0
0000E228 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000E22C 121A                       		move.b	(a2)+,d1
0000E22E 4881                       		ext.w	d1
0000E230 3029 0008                  		move.w	obX(a1),d0
0000E234 9041                       		sub.w	d1,d0
0000E236 9042                       		sub.w	d2,d0
0000E238 6400                       		bcc.s	loc_BE80
0000E23A D241                       		add.w	d1,d1
0000E23C D041                       		add.w	d1,d0
0000E23E 6500                       		bcs.s	loc_BE84
0000E240 60CE                       		bra.s	loc_BE4E
0000E242                            ; ===========================================================================
0000E242                            
0000E242                            loc_BE80:
0000E242 B044                       		cmp.w	d4,d0
0000E244 62CA                       		bhi.s	loc_BE4E
0000E246                            
0000E246                            loc_BE84:
0000E246 121A                       		move.b	(a2)+,d1
0000E248 4881                       		ext.w	d1
0000E24A 3029 000C                  		move.w	obY(a1),d0
0000E24E 9041                       		sub.w	d1,d0
0000E250 9043                       		sub.w	d3,d0
0000E252 6400                       		bcc.s	loc_BE9A
0000E254 D241                       		add.w	d1,d1
0000E256 D041                       		add.w	d1,d0
0000E258 6500                       		bcs.s	loc_BE9E
0000E25A 60B4                       		bra.s	loc_BE4E
0000E25C                            ; ===========================================================================
0000E25C                            
0000E25C                            loc_BE9A:
0000E25C B045                       		cmp.w	d5,d0
0000E25E 62B0                       		bhi.s	loc_BE4E
0000E260                            
0000E260                            loc_BE9E:
0000E260 361F                       		move.w	(sp)+,d3
0000E262 7001                       		moveq	#1,d0
0000E264 4E75                       		rts	
0000E266                            ; End of function But_MZBlock
0000E266                            ; End of function But_MZBlock
0000E266                            Map_But:	include	"_maps\Button.asm"
0000E266                            ; ---------------------------------------------------------------------------
0000E266                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000E266                            ; ---------------------------------------------------------------------------
0000E266                            Map_But_internal:
0000E266 0000                       		dc.w byte_BEAC-Map_But_internal
0000E268 0000                       		dc.w byte_BEB7-Map_But_internal
0000E26A 0000                       		dc.w byte_BEC2-Map_But_internal
0000E26C 0000                       		dc.w byte_BEB7-Map_But_internal
0000E26E 02                         byte_BEAC:	dc.b 2
0000E26F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000E274 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000E279 02                         byte_BEB7:	dc.b 2
0000E27A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000E27F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000E284 02                         byte_BEC2:	dc.b 2
0000E285 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000E28A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000E28F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E294                            		even
0000E294                            		even
0000E294                            
0000E294                            		include	"_incObj\33 Pushable Blocks.asm"
0000E294                            ; ---------------------------------------------------------------------------
0000E294                            ; Object 33 - pushable blocks (MZ, LZ)
0000E294                            ; ---------------------------------------------------------------------------
0000E294                            
0000E294                            PushBlock:
0000E294 7000                       		moveq	#0,d0
0000E296 1028 0024                  		move.b	obRoutine(a0),d0
0000E29A 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E29E 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E2A2                            ; ===========================================================================
0000E2A2 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E2A4 0000                       		dc.w loc_BF6E-PushB_Index
0000E2A6 0000                       		dc.w loc_C02C-PushB_Index
0000E2A8                            
0000E2A8 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E2AA 4001                       		dc.b $40, 1
0000E2AC                            ; ===========================================================================
0000E2AC                            
0000E2AC                            PushB_Main:	; Routine 0
0000E2AC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E2B0 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E2B6 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E2BC 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E2C4 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E2CA 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E2D0 6600                       		bne.s	@notLZ
0000E2D2 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E2D8                            
0000E2D8                            	@notLZ:
0000E2D8 117C 0004 0001             		move.b	#4,obRender(a0)
0000E2DE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E2E4 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E2EA 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E2F0 7000                       		moveq	#0,d0
0000E2F2 1028 0028                  		move.b	obSubtype(a0),d0
0000E2F6 D040                       		add.w	d0,d0
0000E2F8 0240 000E                  		andi.w	#$E,d0
0000E2FC 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E300 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E304 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E308 4A28 0028                  		tst.b	obSubtype(a0)
0000E30C 6700                       		beq.s	@chkgone
0000E30E 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E314                            
0000E314                            	@chkgone:
0000E314 45F8 FC00                  		lea	(v_objstate).w,a2
0000E318 7000                       		moveq	#0,d0
0000E31A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E31E 6700                       		beq.s	loc_BF6E
0000E320 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E326 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E32C 6600 0000                  		bne.w	DeleteObject
0000E330                            
0000E330                            loc_BF6E:	; Routine 2
0000E330 4A28 0032                  		tst.b	$32(a0)
0000E334 6600 0000                  		bne.w	loc_C046
0000E338 7200                       		moveq	#0,d1
0000E33A 1228 0014                  		move.b	obActWid(a0),d1
0000E33E 0641 000B                  		addi.w	#$B,d1
0000E342 343C 0010                  		move.w	#$10,d2
0000E346 363C 0011                  		move.w	#$11,d3
0000E34A 3828 0008                  		move.w	obX(a0),d4
0000E34E 6100 0000                  		bsr.w	loc_C186
0000E352 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E358 6600                       		bne.s	loc_BFC6	; if not, branch
0000E35A 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E360 3028 0008                  		move.w	obX(a0),d0
0000E364 0C40 0A20                  		cmpi.w	#$A20,d0
0000E368 6500                       		bcs.s	loc_BFC6
0000E36A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E36E 6400                       		bcc.s	loc_BFC6
0000E370 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E374 0440 001C                  		subi.w	#$1C,d0
0000E378 3140 000C                  		move.w	d0,obY(a0)
0000E37C 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E382 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E388                            
0000E388                            	loc_BFC6:
0000E3A4 6000 0000                  		bra.w	DisplaySprite
0000E3A8                            ; ===========================================================================
0000E3A8                            
0000E3A8                            loc_ppppp:
0000E3C4 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E3CA 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E3D0 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E3D6 6000                       		bra.s	loc_C02C
0000E3D8                            ; ===========================================================================
0000E3D8                            
0000E3D8                            loc_C016:
0000E3D8 45F8 FC00                  		lea	(v_objstate).w,a2
0000E3DC 7000                       		moveq	#0,d0
0000E3DE 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E3E2 6700                       		beq.s	loc_C028
0000E3E4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E3EA                            
0000E3EA                            loc_C028:
0000E3EA 6000 0000                  		bra.w	DeleteObject
0000E3EE                            ; ===========================================================================
0000E3EE                            
0000E3EE                            loc_C02C:	; Routine 4
0000E3EE 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E3F2 6700                       		beq.s	locret_C044
0000E3F4 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E3FA 4228 0032                  		clr.b	$32(a0)
0000E3FE 4268 0010                  		clr.w	obVelX(a0)
0000E402 4268 0012                  		clr.w	obVelY(a0)
0000E406                            
0000E406                            locret_C044:
0000E406 4E75                       		rts	
0000E408                            ; ===========================================================================
0000E408                            
0000E408                            loc_C046:
0000E408 3F28 0008                  		move.w	obX(a0),-(sp)
0000E40C 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E412 6400                       		bcc.s	loc_C056
0000E414 6100 0000                  		bsr.w	SpeedToPos
0000E418                            
0000E418                            loc_C056:
0000E418 0828 0001 0022             		btst	#1,obStatus(a0)
0000E41E 6700                       		beq.s	loc_C0A0
0000E420 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E426 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E42C 4A41                       		tst.w	d1
0000E42E 6A00 0000                  		bpl.w	loc_C09E
0000E432 D368 000C                  		add.w	d1,obY(a0)
0000E436 4268 0012                  		clr.w	obVelY(a0)
0000E43A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E440 3011                       		move.w	(a1),d0
0000E442 0240 03FF                  		andi.w	#$3FF,d0
0000E446 0C40 016A                  		cmpi.w	#$16A,d0
0000E44A 6500                       		bcs.s	loc_C09E
0000E44C 3028 0030                  		move.w	$30(a0),d0
0000E450 E640                       		asr.w	#3,d0
0000E452 3140 0010                  		move.w	d0,obVelX(a0)
0000E456 117C 0001 0032             		move.b	#1,$32(a0)
0000E45C 4268 000E                  		clr.w	$E(a0)
0000E460                            
0000E460                            loc_C09E:
0000E460 6000                       		bra.s	loc_C0E6
0000E462                            ; ===========================================================================
0000E462                            
0000E462                            loc_C0A0:
0000E462 4A68 0010                  		tst.w	obVelX(a0)
0000E466 6700 0000                  		beq.w	loc_C0D6
0000E46A 6B00                       		bmi.s	loc_C0BC
0000E46C 7600                       		moveq	#0,d3
0000E46E 1628 0014                  		move.b	obActWid(a0),d3
0000E472 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E478 4A41                       		tst.w	d1		; has block touched a wall?
0000E47A 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E47C 6000                       		bra.s	loc_C0E6
0000E47E                            ; ===========================================================================
0000E47E                            
0000E47E                            loc_C0BC:
0000E47E 7600                       		moveq	#0,d3
0000E480 1628 0014                  		move.b	obActWid(a0),d3
0000E484 4643                       		not.w	d3
0000E486 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E48C 4A41                       		tst.w	d1		; has block touched a wall?
0000E48E 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E490 6000                       		bra.s	loc_C0E6
0000E492                            ; ===========================================================================
0000E492                            
0000E492                            PushB_StopPush:
0000E492 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E496 6000                       		bra.s	loc_C0E6
0000E498                            ; ===========================================================================
0000E498                            
0000E498                            loc_C0D6:
0000E498 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E4A0 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E4A6 6400                       		bcc.s	loc_C104
0000E4A8                            
0000E4A8                            loc_C0E6:
0000E4A8 7200                       		moveq	#0,d1
0000E4AA 1228 0014                  		move.b	obActWid(a0),d1
0000E4AE 0641 000B                  		addi.w	#$B,d1
0000E4B2 343C 0010                  		move.w	#$10,d2
0000E4B6 363C 0011                  		move.w	#$11,d3
0000E4BA 381F                       		move.w	(sp)+,d4
0000E4BC 6100 0000                  		bsr.w	loc_C186
0000E4C0 6100                       		bsr.s	PushB_ChkLava
0000E4C2 6000 FEC4                  		bra.w	loc_BFC6
0000E4C6                            ; ===========================================================================
0000E4C6                            
0000E4C6                            loc_C104:
0000E4C6 381F                       		move.w	(sp)+,d4
0000E4C8 43F8 D000                  		lea	(v_player).w,a1
0000E4CC 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E4D2 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E4D8 6000 FECE                  		bra.w	loc_ppppp
0000E4DC                            ; ===========================================================================
0000E4DC                            
0000E4DC                            PushB_ChkLava:
0000E4DC 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E4E2 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E4E4 343C FFE0                  		move.w	#-$20,d2
0000E4E8 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E4EE 6700                       		beq.s	PushB_LoadLava
0000E4F0 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E4F6 6700                       		beq.s	PushB_LoadLava
0000E4F8 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E4FE 6700                       		beq.s	PushB_LoadLava
0000E500 4E75                       		rts	
0000E502                            ; ===========================================================================
0000E502                            
0000E502                            PushB_ChkLava2:
0000E502 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E508 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E50A 343C 0020                  		move.w	#$20,d2
0000E50E 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E514 6700                       		beq.s	PushB_LoadLava
0000E516 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E51C 6700                       		beq.s	PushB_LoadLava
0000E51E                            
0000E51E                            PushB_NoLava:
0000E51E 4E75                       		rts	
0000E520                            ; ===========================================================================
0000E520                            
0000E520                            PushB_LoadLava:
0000E520 6100 0000                  		bsr.w	FindFreeObj
0000E524 6600                       		bne.s	locret_C184
0000E526 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E52A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E530 D569 0008                  		add.w	d2,obX(a1)
0000E534 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E53A 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E540 2348 003C                  		move.l	a0,$3C(a1)
0000E544                            
0000E544                            locret_C184:
0000E544 4E75                       		rts	
0000E546                            ; ===========================================================================
0000E546                            
0000E546                            loc_C186:
0000E546 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E54A 6700 0000                  		beq.w	loc_C218
0000E54E 5500                       		subq.b	#2,d0
0000E550 6600                       		bne.s	loc_C1AA
0000E552 6100 AD52                  		bsr.w	ExitPlatform
0000E556 0829 0003 0022             		btst	#3,obStatus(a1)
0000E55C 6600                       		bne.s	loc_C1A4
0000E55E 4228 0025                  		clr.b	ob2ndRout(a0)
0000E562 4E75                       		rts	
0000E564                            ; ===========================================================================
0000E564                            
0000E564                            loc_C1A4:
0000E564 3404                       		move.w	d4,d2
0000E566 6000 B29C                  		bra.w	MvSonicOnPtfm
0000E56A                            ; ===========================================================================
0000E56A                            
0000E56A                            loc_C1AA:
0000E56A 5500                       		subq.b	#2,d0
0000E56C 6600                       		bne.s	loc_C1F2
0000E56E 6100 0000                  		bsr.w	SpeedToPos
0000E572 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E578 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E57E 4A41                       		tst.w	d1
0000E580 6A00 0000                  		bpl.w	locret_C1F0
0000E584 D368 000C                  		add.w	d1,obY(a0)
0000E588 4268 0012                  		clr.w	obVelY(a0)
0000E58C 4228 0025                  		clr.b	ob2ndRout(a0)
0000E590 3011                       		move.w	(a1),d0
0000E592 0240 03FF                  		andi.w	#$3FF,d0
0000E596 0C40 016A                  		cmpi.w	#$16A,d0
0000E59A 6500                       		bcs.s	locret_C1F0
0000E59C 3028 0030                  		move.w	$30(a0),d0
0000E5A0 E640                       		asr.w	#3,d0
0000E5A2 3140 0010                  		move.w	d0,obVelX(a0)
0000E5A6 117C 0001 0032             		move.b	#1,$32(a0)
0000E5AC 4268 000E                  		clr.w	obY+2(a0)
0000E5B0                            
0000E5B0                            locret_C1F0:
0000E5B0 4E75                       		rts	
0000E5B2                            ; ===========================================================================
0000E5B2                            
0000E5B2                            loc_C1F2:
0000E5B2 6100 0000                  		bsr.w	SpeedToPos
0000E5B6 3028 0008                  		move.w	obX(a0),d0
0000E5BA 0240 000C                  		andi.w	#$C,d0
0000E5BE 6600 0000                  		bne.w	locret_C2E4
0000E5C2 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E5C8 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E5CE 4268 0010                  		clr.w	obVelX(a0)
0000E5D2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E5D6 4E75                       		rts	
0000E5D8                            ; ===========================================================================
0000E5D8                            
0000E5D8                            loc_C218:
0000E5D8 6100 0000                  		bsr.w	Solid_ChkEnter
0000E5DC 4A44                       		tst.w	d4
0000E5DE 6700 0000                  		beq.w	locret_C2E4
0000E5E2 6B00 0000                  		bmi.w	locret_C2E4
0000E5E6 4A28 0032                  		tst.b	$32(a0)
0000E5EA 6700                       		beq.s	loc_C230
0000E5EC 6000 0000                  		bra.w	locret_C2E4
0000E5F0                            ; ===========================================================================
0000E5F0                            
0000E5F0                            loc_C230:
0000E5F0 4A40                       		tst.w	d0
0000E5F2 6700 0000                  		beq.w	locret_C2E4
0000E5F6 6B00                       		bmi.s	loc_C268
0000E5F8 0829 0000 0022             		btst	#0,obStatus(a1)
0000E5FE 6600 0000                  		bne.w	locret_C2E4
0000E602 3F00                       		move.w	d0,-(sp)
0000E604 7600                       		moveq	#0,d3
0000E606 1628 0014                  		move.b	obActWid(a0),d3
0000E60A 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E610 301F                       		move.w	(sp)+,d0
0000E612 4A41                       		tst.w	d1
0000E614 6B00 0000                  		bmi.w	locret_C2E4
0000E618 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E620 7001                       		moveq	#1,d0
0000E622 323C 0040                  		move.w	#$40,d1
0000E626 6000                       		bra.s	loc_C294
0000E628                            ; ===========================================================================
0000E628                            
0000E628                            loc_C268:
0000E628 0829 0000 0022             		btst	#0,obStatus(a1)
0000E62E 6700                       		beq.s	locret_C2E4
0000E630 3F00                       		move.w	d0,-(sp)
0000E632 7600                       		moveq	#0,d3
0000E634 1628 0014                  		move.b	obActWid(a0),d3
0000E638 4643                       		not.w	d3
0000E63A 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E640 301F                       		move.w	(sp)+,d0
0000E642 4A41                       		tst.w	d1
0000E644 6B00                       		bmi.s	locret_C2E4
0000E646 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E64E 70FF                       		moveq	#-1,d0
0000E650 323C FFC0                  		move.w	#-$40,d1
0000E654                            
0000E654                            loc_C294:
0000E654 43F8 D000                  		lea	(v_player).w,a1
0000E658 D169 0008                  		add.w	d0,obX(a1)
0000E65C 3341 0020                  		move.w	d1,obInertia(a1)
0000E660 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E666 3F00                       		move.w	d0,-(sp)
0000E672 301F                       		move.w	(sp)+,d0
0000E674 4A28 0028                  		tst.b	obSubtype(a0)
0000E678 6B00                       		bmi.s	locret_C2E4
0000E67A 3F00                       		move.w	d0,-(sp)
0000E67C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E682 301F                       		move.w	(sp)+,d0
0000E684 0C41 0004                  		cmpi.w	#4,d1
0000E688 6F00                       		ble.s	loc_C2E0
0000E68A 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E690 4A40                       		tst.w	d0
0000E692 6A00                       		bpl.s	loc_C2D8
0000E694 4468 0010                  		neg.w	obVelX(a0)
0000E698                            
0000E698                            loc_C2D8:
0000E698 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E69E 6000                       		bra.s	locret_C2E4
0000E6A0                            ; ===========================================================================
0000E6A0                            
0000E6A0                            loc_C2E0:
0000E6A0 D368 000C                  		add.w	d1,obY(a0)
0000E6A4                            
0000E6A4                            locret_C2E4:
0000E6A4 4E75                       		rts	
0000E6A4 4E75                       		rts	
0000E6A6                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E6A6                            ; ---------------------------------------------------------------------------
0000E6A6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E6A6                            ; ---------------------------------------------------------------------------
0000E6A6                            Map_Push_internal:
0000E6A6 0000                       		dc.w @single-Map_Push_internal
0000E6A8 0000                       		dc.w @four-Map_Push_internal
0000E6AA 01                         @single:	dc.b 1
0000E6AB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E6B0 04                         @four:		dc.b 4
0000E6B1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E6B6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E6BB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E6C0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E6C6 00                         		even
0000E6C6 00                         		even
0000E6C6                            
0000E6C6                            		include	"_incObj\34 Title Cards.asm"
0000E6C6                            ; ---------------------------------------------------------------------------
0000E6C6                            ; Object 34 - zone title cards
0000E6C6                            ; ---------------------------------------------------------------------------
0000E6C6                            
0000E6C6                            TitleCard:
0000E6C6 7000                       		moveq	#0,d0
0000E6C8 1028 0024                  		move.b	obRoutine(a0),d0
0000E6CC 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E6D0 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E6D4                            ; ===========================================================================
0000E6D4 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E6D6 0000                       		dc.w Card_ChkPos-Card_Index
0000E6D8 0000                       		dc.w Card_Wait-Card_Index
0000E6DA 0000                       		dc.w Card_Wait-Card_Index
0000E6DC                            
0000E6DC =00000030                  card_mainX:	equ $30		; position for card to display on
0000E6DC =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E6DC                            ; ===========================================================================
0000E6DC                            
0000E6DC                            Card_CheckSBZ3:	; Routine 0
0000E6DC 2248                       		movea.l	a0,a1
0000E6DE 7000                       		moveq	#0,d0
0000E6E0 1038 FE10                  		move.b	(v_zone).w,d0
0000E6E4 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E6EA 6600                       		bne.s	Card_CheckFZ
0000E6EC 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E6EE                            
0000E6EE                            	Card_CheckFZ:
0000E6EE 3400                       		move.w	d0,d2
0000E6F0 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E6F6 6600                       		bne.s	Card_LoadConfig
0000E6F8 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E6FA 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E6FC                            
0000E6FC                            	Card_LoadConfig:
0000E6FC 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E702 E948                       		lsl.w	#4,d0
0000E704 D6C0                       		adda.w	d0,a3
0000E706 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E70C 7203                       		moveq	#3,d1
0000E70E                            
0000E70E                            Card_Loop:
0000E70E 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E712 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E716 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E71A 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E71E 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E722 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E726 101A                       		move.b	(a2)+,d0
0000E728 6600                       		bne.s	Card_ActNumber
0000E72A 1002                       		move.b	d2,d0
0000E72C                            
0000E72C                            	Card_ActNumber:
0000E72C 0C00 0007                  		cmpi.b	#7,d0
0000E730 6600                       		bne.s	Card_MakeSprite
0000E732 D038 FE11                  		add.b	(v_act).w,d0
0000E736 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E73C 6600                       		bne.s	Card_MakeSprite
0000E73E 5300                       		subq.b	#1,d0
0000E740                            
0000E740                            	Card_MakeSprite:
0000E740 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E744 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E74C 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E752 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E758 137C 0000 0001             		move.b	#0,obRender(a1)
0000E75E 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E764 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E76A 43E9 0040                  		lea	$40(a1),a1	; next object
0000E76E 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E772                            
0000E772                            Card_ChkPos:	; Routine 2
0000E772 7210                       		moveq	#$10,d1		; set horizontal speed
0000E774 3028 0030                  		move.w	card_mainX(a0),d0
0000E778 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E77C 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E77E 6C00                       		bge.s	Card_Move
0000E780 4441                       		neg.w	d1
0000E782                            
0000E782                            Card_Move:
0000E782 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E786                            
0000E786                            Card_NoMove:
0000E786 3028 0008                  		move.w	obX(a0),d0
0000E78A 6B00                       		bmi.s	locret_C3D8
0000E78C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E790 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E792 6000 0000                  		bra.w	DisplaySprite
0000E796                            ; ===========================================================================
0000E796                            
0000E796                            locret_C3D8:
0000E796 4E75                       		rts	
0000E798                            ; ===========================================================================
0000E798                            
0000E798                            Card_Wait:	; Routine 4/6
0000E798 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E79C 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E79E 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E7A2 6000 0000                  		bra.w	DisplaySprite
0000E7A6                            ; ===========================================================================
0000E7A6                            
0000E7A6                            Card_ChkPos2:
0000E7A6 4A28 0001                  		tst.b	obRender(a0)
0000E7AA 6A00                       		bpl.s	Card_ChangeArt
0000E7AC 7220                       		moveq	#$20,d1
0000E7AE 3028 0032                  		move.w	card_finalX(a0),d0
0000E7B2 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E7B6 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E7B8 6C00                       		bge.s	Card_Move2
0000E7BA 4441                       		neg.w	d1
0000E7BC                            
0000E7BC                            Card_Move2:
0000E7BC D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E7C0 3028 0008                  		move.w	obX(a0),d0
0000E7C4 6B00                       		bmi.s	locret_C412
0000E7C6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E7CA 6400                       		bcc.s	locret_C412	; if yes, branch
0000E7CC 6000 0000                  		bra.w	DisplaySprite
0000E7D0                            ; ===========================================================================
0000E7D0                            
0000E7D0                            locret_C412:
0000E7D0 4E75                       		rts	
0000E7D2                            ; ===========================================================================
0000E7D2                            
0000E7D2                            Card_ChangeArt:
0000E7D2 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E7D8 6600                       		bne.s	Card_Delete
0000E7DA 7000                       		moveq	#plcid_Explode,d0
0000E7DC 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion patterns
0000E7E2 7000                       		moveq	#0,d0
0000E7E4 1038 FE10                  		move.b	(v_zone).w,d0
0000E7E8 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E7EC 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal patterns
0000E7F2                            
0000E7F2                            Card_Delete:
0000E7F2 6000 0000                  		bra.w	DeleteObject
0000E7F6                            ; ===========================================================================
0000E7F6 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E7F8 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E7FA 00E4                       		dc.w $E4
0000E7FC 0206                       		dc.b 2,	6
0000E7FE 00EA                       		dc.w $EA
0000E800 0207                       		dc.b 2,	7
0000E802 00E0                       		dc.w $E0
0000E804 020A                       		dc.b 2,	$A
0000E806                            ; ---------------------------------------------------------------------------
0000E806                            ; Title	card configuration data
0000E806                            ; Format:
0000E806                            ; 4 bytes per item (YYYY XXXX)
0000E806                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E806                            ; ---------------------------------------------------------------------------
0000E806 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E816 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E826 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E836 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E846 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E856 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E866 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E876                            ; ===========================================================================
0000E876                            ; ===========================================================================
0000E876                            		include	"_incObj\39 Game Over.asm"
0000E876                            ; ---------------------------------------------------------------------------
0000E876                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E876                            ; ---------------------------------------------------------------------------
0000E876                            
0000E876                            GameOverCard:
0000E876 7000                       		moveq	#0,d0
0000E878 1028 0024                  		move.b	obRoutine(a0),d0
0000E87C 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E880 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E884                            ; ===========================================================================
0000E884 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E886 0000                       		dc.w Over_Move-Over_Index
0000E888 0000                       		dc.w Over_Wait-Over_Index
0000E88A                            ; ===========================================================================
0000E88A                            
0000E88A                            Over_ChkPLC:	; Routine 0
0000E88A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E88E 6700                       		beq.s	Over_Main	; if yes, branch
0000E890 4E75                       		rts	
0000E892                            ; ===========================================================================
0000E892                            
0000E892                            Over_Main:
0000E892 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E896 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E89C 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E8A2 6700                       		beq.s	Over_1stWord	; if not, branch
0000E8A4 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E8AA                            
0000E8AA                            	Over_1stWord:
0000E8AA 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E8B0 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E8B8 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E8BE 117C 0000 0001             		move.b	#0,obRender(a0)
0000E8C4 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E8CA                            
0000E8CA                            Over_Move:	; Routine 2
0000E8CA 7210                       		moveq	#$10,d1		; set horizontal speed
0000E8CC 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E8D2 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E8D4 6500                       		bcs.s	Over_UpdatePos
0000E8D6 4441                       		neg.w	d1
0000E8D8                            
0000E8D8                            	Over_UpdatePos:
0000E8D8 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E8DC 6000 0000                  		bra.w	DisplaySprite
0000E8E0                            ; ===========================================================================
0000E8E0                            
0000E8E0                            Over_SetWait:
0000E8E0 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E8E6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E8EA 4E75                       		rts	
0000E8EC                            ; ===========================================================================
0000E8EC                            
0000E8EC                            Over_Wait:	; Routine 4
0000E8EC 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E8F0 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E8F4 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E8F6 0828 0000 001A             		btst	#0,obFrame(a0)
0000E8FC 6600                       		bne.s	Over_Display
0000E8FE 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E902 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E904 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E908 6000 0000                  		bra.w	DisplaySprite
0000E90C                            ; ===========================================================================
0000E90C                            
0000E90C                            Over_ChgMode:
0000E90C 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E910 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E912 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E918 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E91C 6600                       		bne.s	Over_Display	; if yes, branch
0000E91E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E924 6000                       		bra.s	Over_Display
0000E926                            ; ===========================================================================
0000E926                            
0000E926                            Over_ResetLvl:
0000E926 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E92A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E930                            
0000E930                            Over_Display:
0000E930 6000 0000                  		bra.w	DisplaySprite
0000E930 6000 0000                  		bra.w	DisplaySprite
0000E934                            		include	"_incObj\3A Got Through Card.asm"
0000E934                            ; ---------------------------------------------------------------------------
0000E934                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E934                            ; ---------------------------------------------------------------------------
0000E934                            
0000E934                            GotThroughCard:
0000E934 7000                       		moveq	#0,d0
0000E936 1028 0024                  		move.b	obRoutine(a0),d0
0000E93A 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E93E 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E942                            ; ===========================================================================
0000E942 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E944 0000                       		dc.w Got_Move-Got_Index
0000E946 0000                       		dc.w Got_Wait-Got_Index
0000E948 0000                       		dc.w Got_TimeBonus-Got_Index
0000E94A 0000                       		dc.w Got_Wait-Got_Index
0000E94C 0000                       		dc.w Got_NextLevel-Got_Index
0000E94E 0000                       		dc.w Got_Wait-Got_Index
0000E950 0000                       		dc.w Got_Move2-Got_Index
0000E952 0000                       		dc.w loc_C766-Got_Index
0000E954                            
0000E954 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E954 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E954                            ; ===========================================================================
0000E954                            
0000E954                            Got_ChkPLC:	; Routine 0
0000E954 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E958 6700                       		beq.s	Got_Main	; if yes, branch
0000E95A 4E75                       		rts	
0000E95C                            ; ===========================================================================
0000E95C                            
0000E95C                            Got_Main:
0000E95C 2248                       		movea.l	a0,a1
0000E95E 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E964 7206                       		moveq	#6,d1
0000E966                            
0000E966                            Got_Loop:
0000E966 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E96A 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E96E 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E972 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E976 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E97A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E97E 101A                       		move.b	(a2)+,d0
0000E980 0C00 0006                  		cmpi.b	#6,d0
0000E984 6600                       		bne.s	loc_C5CA
0000E986 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E98A                            
0000E98A                            	loc_C5CA:
0000E98A 1340 001A                  		move.b	d0,obFrame(a1)
0000E98E 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E996 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E99C 137C 0000 0001             		move.b	#0,obRender(a1)
0000E9A2 43E9 0040                  		lea	$40(a1),a1
0000E9A6 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E9AA                            
0000E9AA                            Got_Move:	; Routine 2
0000E9AA 7210                       		moveq	#$10,d1		; set horizontal speed
0000E9AC 3028 0030                  		move.w	got_mainX(a0),d0
0000E9B0 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E9B4 6700                       		beq.s	loc_C61A	; if yes, branch
0000E9B6 6C00                       		bge.s	Got_ChgPos
0000E9B8 4441                       		neg.w	d1
0000E9BA                            
0000E9BA                            	Got_ChgPos:
0000E9BA D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E9BE                            
0000E9BE                            	loc_C5FE:
0000E9BE 3028 0008                  		move.w	obX(a0),d0
0000E9C2 6B00                       		bmi.s	locret_C60E
0000E9C4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E9C8 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E9CA 6000 0000                  		bra.w	DisplaySprite
0000E9CE                            ; ===========================================================================
0000E9CE                            
0000E9CE                            locret_C60E:
0000E9CE 4E75                       		rts	
0000E9D0                            ; ===========================================================================
0000E9D0                            
0000E9D0                            loc_C610:
0000E9D0 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E9D6 6000 0000                  		bra.w	Got_Move2
0000E9DA                            ; ===========================================================================
0000E9DA                            
0000E9DA                            loc_C61A:
0000E9DA 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E9E0 67EE                       		beq.s	loc_C610
0000E9E2 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E9E8 66D4                       		bne.s	loc_C5FE
0000E9EA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9EE 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E9F4                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E9F4                            
0000E9F4                            Got_Wait:	; Routine 4, 8, $C
0000E9F4 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E9F8 6600                       		bne.s	Got_Display
0000E9FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9FE                            
0000E9FE                            Got_Display:
0000E9FE 6000 0000                  		bra.w	DisplaySprite
0000EA02                            ; ===========================================================================
0000EA02                            
0000EA02                            Got_TimeBonus:	; Routine 6
0000EA02 6100 0000                  		bsr.w	DisplaySprite
0000EA06 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000EA0C 7000                       		moveq	#0,d0
0000EA0E 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000EA12 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000EA14 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000EA18 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000EA1E                            
0000EA1E                            Got_RingBonus:
0000EA1E 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000EA22 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000EA24 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000EA28 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000EA2E                            
0000EA2E                            Got_ChkBonus:
0000EA2E 4A40                       		tst.w	d0		; is there any bonus?
0000EA30 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000EA3C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA40 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w
0000EA46 6600                       		bne.s	Got_SetDelay
0000EA48 5828 0024                  		addq.b	#4,obRoutine(a0)
0000EA4C                            
0000EA4C                            Got_SetDelay:
0000EA4C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EA52                            
0000EA52                            locret_C692:
0000EA52 4E75                       		rts	
0000EA54                            ; ===========================================================================
0000EA54                            
0000EA54                            Got_AddBonus:
0000EA54 4EB9 0000 0000             		jsr	(AddPoints).l
0000EA5A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EA5E 0200 0003                  		andi.b	#3,d0
0000EA62 66EE                       		bne.s	locret_C692
0000EA6E                            ; ===========================================================================
0000EA6E                            
0000EA6E                            Got_NextLevel:	; Routine $A
0000EA6E 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000EA74 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000EA7A 1038 FE10                  		move.b	(v_zone).w,d0
0000EA7E 0240 0007                  		andi.w	#7,d0
0000EA82 E748                       		lsl.w	#3,d0
0000EA84 1238 FE11                  		move.b	(v_act).w,d1
0000EA88 0241 0003                  		andi.w	#3,d1
0000EA8C D241                       		add.w	d1,d1
0000EA8E D041                       		add.w	d1,d0
0000EA90 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000EA94 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000EA98 4A40                       		tst.w	d0
0000EA9A 6600                       		bne.s	Got_ChkSS
0000EA9C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000EAA2 6000                       		bra.s	Got_Display2
0000EAA4                            ; ===========================================================================
0000EAA4                            
0000EAA4                            Got_ChkSS:	
0000EAA4 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000EAA8                            		;tst.b	(f_emeraldm).w
0000EAA8                            		;beq.s	VBla_08A
0000EAA8                            		;addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000EAA8                            		;sfx		bgm_Emerald,1,0,0 ;	play emerald music
0000EAA8                            		;bra.s	Got_Display2
0000EAA8 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000EAAE                            		
0000EAAE                            ; ===========================================================================
0000EAAE                            
0000EAAE                            VBla_08A:
0000EAAE 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EAB4                            
0000EAB4                            Got_Display2:
0000EAB4 6000 0000                  		bra.w	DisplaySprite
0000EAB8                            ; ===========================================================================
0000EAB8                            ; ---------------------------------------------------------------------------
0000EAB8                            ; Level	order array
0000EAB8                            ; ---------------------------------------------------------------------------
0000EAB8                            LevelOrder:
0000EAB8                            		; Green Hill Zone
0000EAB8 0001                       		dc.b id_GHZ, 1	; Act 2
0000EABA 0002                       		dc.b id_GHZ, 2	; Act 2
0000EABC 0200                       		dc.b id_MZ, 0	; Act 3
0000EABE 0000                       		dc.b 0, 0
0000EAC0                            
0000EAC0                            		; Labyrinth Zone
0000EAC0 0101                       		dc.b id_LZ, 1	; Act 1
0000EAC2 0102                       		dc.b id_LZ, 2	; Act 2
0000EAC4 0000                       		dc.b id_GHZ, 0 	; Act 3
0000EAC6 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000EAC8                            
0000EAC8                            		; Marble Zone
0000EAC8 0201                       		dc.b id_MZ, 1	; Act 1
0000EACA 0202                       		dc.b id_MZ, 2	; Act 2
0000EACC 0502                       		dc.b id_SBZ, 2	; Act 3
0000EACE 0000                       		dc.b 0, 0
0000EAD0                            
0000EAD0                            		; Star Light Zone
0000EAD0 0301                       		dc.b id_SLZ, 1	; Act 1
0000EAD2 0302                       		dc.b id_SLZ, 2	; Act 2
0000EAD4 0500                       		dc.b id_SBZ, 0	; Act 3
0000EAD6 0000                       		dc.b 0, 0
0000EAD8                            
0000EAD8                            		; Spring Yard Zone
0000EAD8 0502                       		dc.b id_SBZ, 2	; Act 1
0000EADA 0402                       		dc.b id_SYZ, 2	; Act 2
0000EADC 0200                       		dc.b id_MZ,	 0	; Act 3
0000EADE 0000                       		dc.b 0, 0
0000EAE0                            
0000EAE0                            		; Scrap Brain Zone
0000EAE0 0501                       		dc.b id_SBZ, 1	; Act 1
0000EAE2 0103                       		dc.b id_LZ, 3	; Act 2
0000EAE4 0000                       		dc.b 0, 0	; Final Zone
0000EAE6 0000                       		dc.b 0, 0
0000EAE8                            		even
0000EAE8                            ; ===========================================================================
0000EAE8                            
0000EAE8                            Got_Move2:	; Routine $E
0000EAE8 7220                       		moveq	#$20,d1		; set horizontal speed
0000EAEA 3028 0032                  		move.w	got_finalX(a0),d0
0000EAEE B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000EAF2 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000EAF4 6C00                       		bge.s	Got_ChgPos2
0000EAF6 4441                       		neg.w	d1
0000EAF8                            
0000EAF8                            	Got_ChgPos2:
0000EAF8 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EAFC 3028 0008                  		move.w	obX(a0),d0
0000EB00 6B00                       		bmi.s	locret_C748
0000EB02 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EB06 6400                       		bcc.s	locret_C748	; if yes, branch
0000EB08 6000 0000                  		bra.w	DisplaySprite
0000EB0C                            ; ===========================================================================
0000EB0C                            
0000EB0C                            locret_C748:
0000EB0C 4E75                       		rts	
0000EB0E                            ; ===========================================================================
0000EB0E                            
0000EB0E                            Got_SBZ2:
0000EB0E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000EB14 6600 0000                  		bne.w	DeleteObject
0000EB18 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EB1C 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000EB20 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000EB30                            ; ===========================================================================
0000EB30                            
0000EB30                            loc_C766:	; Routine $10
0000EB30 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000EB34 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000EB3A 6700 0000                  		beq.w	DeleteObject
0000EB3E 4E75                       		rts	
0000EB40                            ; ===========================================================================
0000EB40                            		;    x-start,	x-main,	y-main,
0000EB40                            		;				routine, frame number
0000EB40                            
0000EB40 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000EB46 0200                       		dc.b 				2,	0
0000EB48                            
0000EB48 FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000EB4E 0201                       		dc.b 				2,	1
0000EB50                            
0000EB50 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000EB56 0206                       		dc.b 				2,	6
0000EB58                            
0000EB58 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000EB5E 0202                       		dc.b 				2,	2
0000EB60                            
0000EB60 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000EB66 0203                       		dc.b 				2,	3
0000EB68                            
0000EB68 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000EB6E 0204                       		dc.b 				2,	4
0000EB70                            
0000EB70 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000EB76 0205                       		dc.b 				2,	5
0000EB76 0205                       		dc.b 				2,	5
0000EB78                            		include	"_incObj\7E Special Stage Results.asm"
0000EB78                            ; ---------------------------------------------------------------------------
0000EB78                            ; Object 7E - special stage results screen
0000EB78                            ; ---------------------------------------------------------------------------
0000EB78                            
0000EB78                            SSResult:
0000EB78 7000                       		moveq	#0,d0
0000EB7A 1028 0024                  		move.b	obRoutine(a0),d0
0000EB7E 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000EB82 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000EB86                            ; ===========================================================================
0000EB86 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000EB88 0000                       		dc.w SSR_Move-SSR_Index
0000EB8A 0000                       		dc.w SSR_Wait-SSR_Index
0000EB8C 0000                       		dc.w SSR_RingBonus-SSR_Index
0000EB8E 0000                       		dc.w SSR_Wait-SSR_Index
0000EB90 0000                       		dc.w SSR_Exit-SSR_Index
0000EB92 0000                       		dc.w SSR_Wait-SSR_Index
0000EB94 0000                       		dc.w SSR_Continue-SSR_Index
0000EB96 0000                       		dc.w SSR_Wait-SSR_Index
0000EB98 0000                       		dc.w SSR_Exit-SSR_Index
0000EB9A 0000                       		dc.w loc_C91A-SSR_Index
0000EB9C                            
0000EB9C =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000EB9C                            ; ===========================================================================
0000EB9C                            
0000EB9C                            SSR_ChkPLC:	; Routine 0
0000EB9C 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000EBA0 6700                       		beq.s	SSR_Main	; if yes, branch
0000EBA2 4E75                       		rts	
0000EBA4                            ; ===========================================================================
0000EBA4                            
0000EBA4                            SSR_Main:
0000EBA4 2248                       		movea.l	a0,a1
0000EBA6 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000EBAC 7203                       		moveq	#3,d1
0000EBAE 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000EBB4 6500                       		bcs.s	SSR_Loop	; if no, branch
0000EBB6 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000EBB8                            
0000EBB8                            	SSR_Loop:
0000EBB8 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000EBBC 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000EBC0 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000EBC4 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000EBC8 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000EBCC 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000EBD0 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000EBD8 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000EBDE 137C 0000 0001             		move.b	#0,obRender(a1)
0000EBE4 43E9 0040                  		lea	$40(a1),a1
0000EBE8 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000EBEC                            
0000EBEC 7007                       		moveq	#7,d0
0000EBEE 1238 FE57                  		move.b	(v_emeralds).w,d1
0000EBF2 6700                       		beq.s	loc_C842
0000EBF4 7000                       		moveq	#0,d0
0000EBF6 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000EBFA 6600                       		bne.s	loc_C842	; if not, branch
0000EBFC 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000EBFE 317C 0018 0008             		move.w	#$18,obX(a0)
0000EC04 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000EC0A                            
0000EC0A                            loc_C842:
0000EC0A 1140 001A                  		move.b	d0,obFrame(a0)
0000EC0E                            
0000EC0E                            SSR_Move:	; Routine 2
0000EC0E 7210                       		moveq	#$10,d1		; set horizontal speed
0000EC10 3028 0030                  		move.w	ssr_mainX(a0),d0
0000EC14 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000EC18 6700                       		beq.s	loc_C86C	; if yes, branch
0000EC1A 6C00                       		bge.s	SSR_ChgPos
0000EC1C 4441                       		neg.w	d1
0000EC1E                            
0000EC1E                            SSR_ChgPos:
0000EC1E D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EC22                            
0000EC22                            loc_C85A:
0000EC22 3028 0008                  		move.w	obX(a0),d0
0000EC26 6B00                       		bmi.s	locret_C86A
0000EC28 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EC2C 6400                       		bcc.s	locret_C86A	; if yes, branch
0000EC2E 6000 0000                  		bra.w	DisplaySprite
0000EC32                            ; ===========================================================================
0000EC32                            
0000EC32                            locret_C86A:
0000EC32 4E75                       		rts	
0000EC34                            ; ===========================================================================
0000EC34                            
0000EC34                            loc_C86C:
0000EC34 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000EC3A 66E6                       		bne.s	loc_C85A
0000EC3C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EC40 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EC46 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000EC4C                            
0000EC4C                            SSR_Wait:	; Routine 4, 8, $C, $10
0000EC4C 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000EC50 6600                       		bne.s	SSR_Display
0000EC52 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EC56                            
0000EC56                            SSR_Display:
0000EC56 6000 0000                  		bra.w	DisplaySprite
0000EC5A                            ; ===========================================================================
0000EC5A                            
0000EC5A                            SSR_RingBonus:	; Routine 6
0000EC5A 6100 0000                  		bsr.w	DisplaySprite
0000EC5E 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000EC64 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000EC68 6700                       		beq.s	loc_C8C4	; if yes, branch
0000EC6A 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000EC70 700A                       		moveq	#10,d0		; add 10 to score
0000EC72 4EB9 0000 0000             		jsr	(AddPoints).l
0000EC78 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EC7C 0200 0003                  		andi.b	#3,d0
0000EC80 6600                       		bne.s	locret_C8EA
0000EC8C                            ; ===========================================================================
0000EC8C                            
0000EC8C                            loc_C8C4:
0000EC96 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EC9A 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000ECA0 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000ECA6 6500                       		bcs.s	locret_C8EA	; if not, branch
0000ECA8 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000ECAE 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000ECB2                            
0000ECB2                            locret_C8EA:
0000ECB2 4E75                       		rts	
0000ECB4                            ; ===========================================================================
0000ECB4                            
0000ECB4                            SSR_Exit:	; Routine $A, $12
0000ECB4 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000ECBA 6000 0000                  		bra.w	DisplaySprite
0000ECBE                            ; ===========================================================================
0000ECBE                            
0000ECBE                            SSR_Continue:	; Routine $E
0000ECBE 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000ECC4 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000ECD4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ECD8 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000ECDE 6000 0000                  		bra.w	DisplaySprite
0000ECE2                            ; ===========================================================================
0000ECE2                            
0000ECE2                            loc_C91A:	; Routine $14
0000ECE2 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000ECE6 0200 000F                  		andi.b	#$F,d0
0000ECEA 6600                       		bne.s	SSR_Display2
0000ECEC 0868 0000 001A             		bchg	#0,obFrame(a0)
0000ECF2                            
0000ECF2                            SSR_Display2:
0000ECF2 6000 0000                  		bra.w	DisplaySprite
0000ECF6                            ; ===========================================================================
0000ECF6 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000ECFC 0200                       		dc.b 2,	0		; rountine number, frame number
0000ECFE 0320 0120 0118             		dc.w $320, $120, $118
0000ED04 0201                       		dc.b 2,	1
0000ED06 0360 0120 0128             		dc.w $360, $120, $128
0000ED0C 0202                       		dc.b 2,	2
0000ED0E 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000ED14 0203                       		dc.b 2,	3
0000ED16 03A0 0120 0138             		dc.w $3A0, $120, $138
0000ED1C 0206                       		dc.b 2,	6
0000ED1C 0206                       		dc.b 2,	6
0000ED1E                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000ED1E                            ; ---------------------------------------------------------------------------
0000ED1E                            ; Object 7F - chaos emeralds from the special stage results screen
0000ED1E                            ; ---------------------------------------------------------------------------
0000ED1E                            
0000ED1E                            SSRChaos:
0000ED1E 7000                       		moveq	#0,d0
0000ED20 1028 0024                  		move.b	obRoutine(a0),d0
0000ED24 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000ED28 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000ED2C                            ; ===========================================================================
0000ED2C 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000ED2E 0000                       		dc.w SSRC_Flash-SSRC_Index
0000ED30                            
0000ED30                            ; ---------------------------------------------------------------------------
0000ED30                            ; X-axis positions for chaos emeralds
0000ED30                            ; ---------------------------------------------------------------------------
0000ED30 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000ED3C                            ; ===========================================================================
0000ED3C                            
0000ED3C                            SSRC_Main:	; Routine 0
0000ED3C 2248                       		movea.l	a0,a1
0000ED3E 45F9 0000 ED30             		lea	(SSRC_PosData).l,a2
0000ED44 7400                       		moveq	#0,d2
0000ED46 7200                       		moveq	#0,d1
0000ED48 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000ED4C 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000ED4E 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000ED52                            
0000ED52                            	SSRC_Loop:
0000ED52 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000ED56 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000ED5A 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000ED60 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000ED64 1633 2000                  		move.b	(a3,d2.w),d3
0000ED68 1343 001A                  		move.b	d3,obFrame(a1)
0000ED6C 1343 001C                  		move.b	d3,obAnim(a1)
0000ED70 5202                       		addq.b	#1,d2
0000ED72 5429 0024                  		addq.b	#2,obRoutine(a1)
0000ED76 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000ED7E 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000ED84 137C 0000 0001             		move.b	#0,obRender(a1)
0000ED8A 43E9 0040                  		lea	$40(a1),a1	; next object
0000ED8E 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000ED92                            
0000ED92                            SSRC_Flash:	; Routine 2
0000ED92 1028 001A                  		move.b	obFrame(a0),d0
0000ED96 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000ED9C 0C00 0006                  		cmpi.b	#6,d0
0000EDA0 6600                       		bne.s	SSRC_Display
0000EDA2 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EDA8                            
0000EDA8                            	SSRC_Display:
0000EDA8 6000 0000                  		bra.w	DisplaySprite
0000EDA8 6000 0000                  		bra.w	DisplaySprite
0000EDAC                            
0000EDAC                            ; ---------------------------------------------------------------------------
0000EDAC                            ; Sprite mappings - zone title cards
0000EDAC                            ; ---------------------------------------------------------------------------
0000EDAC 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EDAE 0000                       		dc.w M_Card_LZ-Map_Card
0000EDB0 0000                       		dc.w M_Card_MZ-Map_Card
0000EDB2 0000                       		dc.w M_Card_SLZ-Map_Card
0000EDB4 0000                       		dc.w M_Card_SYZ-Map_Card
0000EDB6 0000                       		dc.w M_Card_SBZ-Map_Card
0000EDB8 0000                       		dc.w M_Card_Zone-Map_Card
0000EDBA 0000                       		dc.w M_Card_Act1-Map_Card
0000EDBC 0000                       		dc.w M_Card_Act2-Map_Card
0000EDBE 0000                       		dc.w M_Card_Act3-Map_Card
0000EDC0 0000                       		dc.w M_Card_Oval-Map_Card
0000EDC2 0000                       		dc.w M_Card_FZ-Map_Card
0000EDC4 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EDC5 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EDCA F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EDCF F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EDD4 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EDD9 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EDDE F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EDE3 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EDE8 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EDED F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EDF2                            		even
0000EDF2 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000EDF3 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000EDF8 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000EDFD F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000EE02 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000EE07 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000EE0C F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000EE11 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000EE16 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EE1B F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000EE20                            		even
0000EE20 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EE21 F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000EE26 F805 0008 90               		dc.b $F8, 5, 0, 8, $90		; C
0000EE2B F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000EE30 F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0		; A
0000EE35 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000EE3A F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000EE3F F805 003A E0               		dc.b $F8, 5, 0, $3A, $E0	; R
0000EE44 F805 0046 F0               		dc.b $F8, 5, 0, $46, $F0	; U
0000EE49 F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000EE4E F805 002E 08               		dc.b $F8, 5, 0, $2E, $8	; N
0000EE53 F805 003E 18               		dc.b $F8, 5, 0, $3E, $18	; S
0000EE58 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EE59 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EE5E F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EE63 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EE68 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EE6D F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EE72 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EE77 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EE7C F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EE81 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EE86                            		even
0000EE86 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000EE87 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EE8C F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000EE91 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EE96 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EE9B F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000EEA0 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000EEA5 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000EEAA F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000EEAF F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000EEB4 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000EEBA 00                         		even
0000EEBA 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EEBB F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EEC0 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EEC5 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EECA F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EECF F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EED4 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EED9 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EEDE F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EEE3 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EEE8 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EEEE 00                         		even
0000EEEE 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EEEF F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EEF4 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EEF9 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EEFE F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EF04 00                         		even
0000EF04 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EF05 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EF0A F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EF0F 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EF10 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EF15 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000EF1A 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000EF1B 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EF20 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000EF25 0D                         M_Card_Oval:	dc.b $D			; Oval
0000EF26 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000EF2B E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000EF30 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000EF35 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000EF3A 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000EF3F 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000EF44 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000EF49 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000EF4E EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000EF53 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000EF58 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000EF5D 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000EF62 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000EF68 00                         		even
0000EF68 05                         M_Card_FZ:	dc.b 5			; FINAL
0000EF69 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EF6E F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EF73 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EF78 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EF7D F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000EF82                            		even
0000EF82                            
0000EF82                            Map_Over:	include	"_maps\Game Over.asm"
0000EF82                            ; ---------------------------------------------------------------------------
0000EF82                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000EF82                            ; ---------------------------------------------------------------------------
0000EF82                            Map_Over_internal:
0000EF82 0000                       		dc.w byte_CBAC-Map_Over_internal
0000EF84 0000                       		dc.w byte_CBB7-Map_Over_internal
0000EF86 0000                       		dc.w byte_CBC2-Map_Over_internal
0000EF88 0000                       		dc.w byte_CBCD-Map_Over_internal
0000EF8A 02                         byte_CBAC:	dc.b 2			; GAME
0000EF8B F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000EF90 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000EF95 02                         byte_CBB7:	dc.b 2			; OVER
0000EF96 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000EF9B F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000EFA0 02                         byte_CBC2:	dc.b 2			; TIME
0000EFA1 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000EFA6 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000EFAB 02                         byte_CBCD:	dc.b 2			; OVER
0000EFAC F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000EFB1 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000EFB6                            		even
0000EFB6                            		even
0000EFB6                            
0000EFB6                            ; ---------------------------------------------------------------------------
0000EFB6                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000EFB6                            ; ---------------------------------------------------------------------------
0000EFB6 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000EFB8 0000                       		dc.w M_Got_Passed-Map_Got
0000EFBA 0000                       		dc.w M_Got_Score-Map_Got
0000EFBC 0000                       		dc.w M_Got_TBonus-Map_Got
0000EFBE 0000                       		dc.w M_Got_RBonus-Map_Got
0000EFC0 FF6F                       		dc.w M_Card_Oval-Map_Got
0000EFC2 FF4E                       		dc.w M_Card_Act1-Map_Got
0000EFC4 FF59                       		dc.w M_Card_Act2-Map_Got
0000EFC6 FF64                       		dc.w M_Card_Act3-Map_Got
0000EFC8 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000EFC9 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000EFCE F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000EFD3 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000EFD8 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000EFDD F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000EFE2 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000EFE7 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000EFEC F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000EFF1 06                         M_Got_Passed:	dc.b 6			; PASSED
0000EFF2 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000EFF7 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EFFC F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000F001 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000F006 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000F00B F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000F010 06                         M_Got_Score:	dc.b 6			; SCORE
0000F011 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000F016 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000F01B F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000F020 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000F025 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000F02A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000F02F 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000F030 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000F035 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000F03A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000F03F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000F044 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000F049 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000F04E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000F053 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000F054 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000F059 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000F05E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000F063 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000F068 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000F06D F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000F072 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000F078 00                         		even
0000F078                            ; ---------------------------------------------------------------------------
0000F078                            ; Sprite mappings - special stage results screen
0000F078                            ; ---------------------------------------------------------------------------
0000F078 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000F07A 0000                       		dc.w M_SSR_Score-Map_SSR
0000F07C 0000                       		dc.w byte_CD0D-Map_SSR
0000F07E FEAD                       		dc.w M_Card_Oval-Map_SSR
0000F080 0000                       		dc.w byte_CD31-Map_SSR
0000F082 0000                       		dc.w byte_CD46-Map_SSR
0000F084 0000                       		dc.w byte_CD5B-Map_SSR
0000F086 0000                       		dc.w byte_CD6B-Map_SSR
0000F088 0000                       		dc.w byte_CDA8-Map_SSR
0000F08A 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000F08B F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000F090 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000F095 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000F09A F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000F09F F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000F0A4 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000F0A9 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000F0AE F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000F0B3 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000F0B8 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000F0BD F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000F0C2 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000F0C7 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000F0CC 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000F0CD F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000F0D2 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000F0D7 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000F0DC F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000F0E1 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000F0E6 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000F0EB 07                         byte_CD0D:	dc.b 7
0000F0EC F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000F0F1 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000F0F6 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000F0FB F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000F100 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000F105 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000F10A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000F10F 04                         byte_CD31:	dc.b 4
0000F110 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F115 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F11A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F11F F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000F124 04                         byte_CD46:	dc.b 4
0000F125 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F12A F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F12F F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F134 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000F139 03                         byte_CD5B:	dc.b 3
0000F13A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F13F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F144 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F149 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000F14A F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000F14F F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000F154 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000F159 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000F15E F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000F163 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000F168 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000F16D F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000F172 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000F177 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000F17C F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000F181 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000F186 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000F187 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000F18C F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000F191 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000F196 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000F19B F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000F1A0 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000F1A5 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000F1AA F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000F1AF F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000F1B4 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000F1B9 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000F1BE F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000F1C3 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000F1C8 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000F1CD F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000F1D2                            		even
0000F1D2                            
0000F1D2                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000F1D2                            ; ---------------------------------------------------------------------------
0000F1D2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000F1D2                            ; ---------------------------------------------------------------------------
0000F1D2                            Map_SSRC_internal:
0000F1D2 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000F1D4 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000F1D6 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000F1D8 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000F1DA 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000F1DC 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000F1DE 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000F1E0 01                         byte_CE02:	dc.b 1
0000F1E1 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000F1E6 01                         byte_CE08:	dc.b 1
0000F1E7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F1EC 01                         byte_CE0E:	dc.b 1
0000F1ED F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000F1F2 01                         byte_CE14:	dc.b 1
0000F1F3 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000F1F8 01                         byte_CE1A:	dc.b 1
0000F1F9 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000F1FE 01                         byte_CE20:	dc.b 1
0000F1FF F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000F204 00                         byte_CE26:	dc.b 0			; Blank frame
0000F206 00                         		even
0000F206 00                         		even
0000F206                            
0000F206                            		include	"_incObj\36 Spikes.asm"
0000F206                            ; ---------------------------------------------------------------------------
0000F206                            ; Object 36 - spikes
0000F206                            ; ---------------------------------------------------------------------------
0000F206                            
0000F206                            Spikes:
0000F206 7000                       		moveq	#0,d0
0000F208 1028 0024                  		move.b	obRoutine(a0),d0
0000F20C 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000F210 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000F214                            ; ===========================================================================
0000F214 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000F216 0000                       		dc.w Spik_Solid-Spik_Index
0000F218                            
0000F218 =00000030                  spik_origX:	equ $30		; start X position
0000F218 =00000032                  spik_origY:	equ $32		; start Y position
0000F218                            
0000F218 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000F21A 0110                       		dc.b 1,	$10
0000F21C 0204                       		dc.b 2,	4
0000F21E 031C                       		dc.b 3,	$1C
0000F220 0440                       		dc.b 4,	$40
0000F222 0510                       		dc.b 5,	$10
0000F224                            ; ===========================================================================
0000F224                            
0000F224                            Spik_Main:	; Routine 0
0000F224 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F228 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000F230 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000F236 0028 0004 0001             		ori.b	#4,obRender(a0)
0000F23C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F242 1028 0028                  		move.b	obSubtype(a0),d0
0000F246 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000F24C 0240 00F0                  		andi.w	#$F0,d0
0000F250 43F9 0000 F218             		lea	(Spik_Var).l,a1
0000F256 E648                       		lsr.w	#3,d0
0000F258 D2C0                       		adda.w	d0,a1
0000F25A 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000F25E 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000F262 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000F268 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000F26E                            
0000F26E                            Spik_Solid:	; Routine 2
0000F26E 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000F272 343C 0004                  		move.w	#4,d2
0000F276 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000F27C 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000F27E 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000F284 6600                       		bne.s	Spik_Upright	; if not, branch
0000F286 343C 0014                  		move.w	#$14,d2
0000F28A                            
0000F28A                            ; Spikes types $1x and $5x face	sideways
0000F28A                            
0000F28A                            Spik_SideWays:
0000F28A 323C 001B                  		move.w	#$1B,d1
0000F28E 3602                       		move.w	d2,d3
0000F290 5243                       		addq.w	#1,d3
0000F292 3828 0008                  		move.w	obX(a0),d4
0000F296 6100 0000                  		bsr.w	SolidObject
0000F29A 0828 0003 0022             		btst	#3,obStatus(a0)
0000F2A0 6600                       		bne.s	Spik_Display
0000F2A2 0C44 0001                  		cmpi.w	#1,d4
0000F2A6 6700                       		beq.s	Spik_Hurt
0000F2A8 6000                       		bra.s	Spik_Display
0000F2AA                            ; ===========================================================================
0000F2AA                            
0000F2AA                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F2AA                            
0000F2AA                            Spik_Upright:
0000F2AA 7200                       		moveq	#0,d1
0000F2AC 1228 0014                  		move.b	obActWid(a0),d1
0000F2B0 0641 000B                  		addi.w	#$B,d1
0000F2B4 343C 0010                  		move.w	#$10,d2
0000F2B8 363C 0011                  		move.w	#$11,d3
0000F2BC 3828 0008                  		move.w	obX(a0),d4
0000F2C0 6100 0000                  		bsr.w	SolidObject
0000F2C4 0828 0003 0022             		btst	#3,obStatus(a0)
0000F2CA 6600                       		bne.s	Spik_Hurt
0000F2CC 4A44                       		tst.w	d4
0000F2CE 6A00                       		bpl.s	Spik_Display
0000F2D0                            
0000F2D0                            Spik_Hurt:
0000F2D0 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F2D4 6600                       		bne.s	Spik_Display	; if yes, branch
0000F2D6 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F2DA 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F2DC 2F08                       		move.l	a0,-(sp)
0000F2DE 2448                       		movea.l	a0,a2
0000F2E0 41F8 D000                  		lea	(v_player).w,a0
0000F2E4 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F2EA 6400                       		bcc.s	loc_CF20
0000F2EC                            		; This fixes the infamous "spike bug"
0000F2EC 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F2F0 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F2F2 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F2F8                            loc_D5A2:
0000F2F8 9680                       		sub.l	d0,d3
0000F2FA 2143 000C                  		move.l	d3,obY(a0)
0000F2FE 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F304                            
0000F304                            loc_CF20:
0000F304 205F                       		movea.l	(sp)+,a0
0000F306                            
0000F306                            Spik_Display:
0000F306 6100 0000                  		bsr.w	DisplaySprite
0000F328 4E75                       		rts	
0000F32A                            ; ===========================================================================
0000F32A                            
0000F32A                            Spik_Type0x:
0000F32A 7000                       		moveq	#0,d0
0000F32C 1028 0028                  		move.b	obSubtype(a0),d0
0000F330 D040                       		add.w	d0,d0
0000F332 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F336 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F33A                            ; ===========================================================================
0000F33A 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F33C 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F33E 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F340                            ; ===========================================================================
0000F340                            
0000F340                            Spik_Type00:
0000F340 4E75                       		rts			; don't move the object
0000F342                            ; ===========================================================================
0000F342                            
0000F342                            Spik_Type01:
0000F342 6100 0000                  		bsr.w	Spik_Wait
0000F346 7000                       		moveq	#0,d0
0000F348 1028 0034                  		move.b	$34(a0),d0
0000F34C D068 0032                  		add.w	spik_origY(a0),d0
0000F350 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F354 4E75                       		rts	
0000F356                            ; ===========================================================================
0000F356                            
0000F356                            Spik_Type02:
0000F356 6100 0000                  		bsr.w	Spik_Wait
0000F35A 7000                       		moveq	#0,d0
0000F35C 1028 0034                  		move.b	$34(a0),d0
0000F360 D068 0030                  		add.w	spik_origX(a0),d0
0000F364 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F368 4E75                       		rts	
0000F36A                            ; ===========================================================================
0000F36A                            
0000F36A                            Spik_Wait:
0000F36A 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F36E 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F370 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F374 6600                       		bne.s	locret_CFE6
0000F376 4A28 0001                  		tst.b	obRender(a0)
0000F37A 6A00                       		bpl.s	locret_CFE6
0000F386 6000                       		bra.s	locret_CFE6
0000F388                            ; ===========================================================================
0000F388                            
0000F388                            loc_CFA4:
0000F388 4A68 0036                  		tst.w	$36(a0)
0000F38C 6700                       		beq.s	loc_CFC6
0000F38E 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F394 6400                       		bcc.s	locret_CFE6
0000F396 317C 0000 0034             		move.w	#0,$34(a0)
0000F39C 317C 0000 0036             		move.w	#0,$36(a0)
0000F3A2 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F3A8 6000                       		bra.s	locret_CFE6
0000F3AA                            ; ===========================================================================
0000F3AA                            
0000F3AA                            loc_CFC6:
0000F3AA 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F3B0 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F3B6 6500                       		bcs.s	locret_CFE6
0000F3B8 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F3BE 317C 0001 0036             		move.w	#1,$36(a0)
0000F3C4 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F3CA                            
0000F3CA                            locret_CFE6:
0000F3CA 4E75                       		rts	
0000F3CA 4E75                       		rts	
0000F3CC                            Map_Spike:	include	"_maps\Spikes.asm"
0000F3CC                            ; --------------------------------------------------------------------------------
0000F3CC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F3CC                            ; --------------------------------------------------------------------------------
0000F3CC                            
0000F3CC                            SME_XgeaQ:	
0000F3CC 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F3D0 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F3D4 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F3D8 03                         SME_XgeaQ_C:	dc.b 3	
0000F3D9 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F3DE F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F3E3 F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F3E8 03                         SME_XgeaQ_1C:	dc.b 3	
0000F3E9 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F3EE FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F3F3 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F3F8 01                         SME_XgeaQ_2C:	dc.b 1	
0000F3F9 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F3FE 03                         SME_XgeaQ_32:	dc.b 3	
0000F3FF F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F404 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F409 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F40E 06                         SME_XgeaQ_42:	dc.b 6	
0000F40F F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F414 F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F419 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F41E F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F423 F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F428 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F42D 01                         SME_XgeaQ_61:	dc.b 1	
0000F42E FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F434 00                         		even
0000F434 00                         		even
0000F434                            		include	"_incObj\3B Purple Rock.asm"
0000F434                            ; ---------------------------------------------------------------------------
0000F434                            ; Object 3B - purple rock (GHZ)
0000F434                            ; ---------------------------------------------------------------------------
0000F434                            
0000F434                            PurpleRock:
0000F434 7000                       		moveq	#0,d0
0000F436 1028 0024                  		move.b	obRoutine(a0),d0
0000F43A 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F43E 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F442                            ; ===========================================================================
0000F442 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F444 0000                       		dc.w Rock_Solid-Rock_Index
0000F446                            ; ===========================================================================
0000F446                            
0000F446                            Rock_Main:	; Routine 0
0000F446 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F44A 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F452 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F458 117C 0004 0001             		move.b	#4,obRender(a0)
0000F45E 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F464 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F46A                            
0000F46A                            Rock_Solid:	; Routine 2
0000F46A 323C 001B                  		move.w	#$1B,d1
0000F46E 343C 0010                  		move.w	#$10,d2
0000F472 363C 0010                  		move.w	#$10,d3
0000F476 3828 0008                  		move.w	obX(a0),d4
0000F47A 6100 0000                  		bsr.w	SolidObject
0000F47E 6100 0000                  		bsr.w	DisplaySprite
0000F4A0 4E75                       		rts	
0000F4A0 4E75                       		rts	
0000F4A2                            		include	"_incObj\49 Waterfall Sound.asm"
0000F4A2                            ; ---------------------------------------------------------------------------
0000F4A2                            ; Object 49 - waterfall	sound effect (GHZ)
0000F4A2                            ; ---------------------------------------------------------------------------
0000F4A2                            
0000F4A2                            WaterSound:
0000F4A2 7000                       		moveq	#0,d0
0000F4A4 1028 0024                  		move.b	obRoutine(a0),d0
0000F4A8 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F4AC 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F4B0                            ; ===========================================================================
0000F4B0 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F4B2 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F4B4                            ; ===========================================================================
0000F4B4                            
0000F4B4                            WSnd_Main:	; Routine 0
0000F4B4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F4B8 117C 0004 0001             		move.b	#4,obRender(a0)
0000F4BE                            
0000F4BE                            WSnd_PlaySnd:	; Routine 2
0000F4BE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F4C2 0200 003F                  		andi.b	#$3F,d0
0000F4C6 6600                       		bne.s	WSnd_ChkDel
0000F4D2                            
0000F4D2                            	WSnd_ChkDel:
0000F4F0 4E75                       		rts	
0000F4F0 4E75                       		rts	
0000F4F2                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F4F2                            ; ---------------------------------------------------------------------------
0000F4F2                            ; Sprite mappings - purple rock	(GHZ)
0000F4F2                            ; ---------------------------------------------------------------------------
0000F4F2                            Map_PRock_internal:
0000F4F2 0000                       		dc.w byte_D110-Map_PRock_internal
0000F4F4 02                         byte_D110:	dc.b 2
0000F4F5 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F4FA F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F500 00                         		even
0000F500 00                         		even
0000F500                            		include	"_incObj\3C Smashable Wall.asm"
0000F500                            ; ---------------------------------------------------------------------------
0000F500                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F500                            ; ---------------------------------------------------------------------------
0000F500                            
0000F500                            SmashWall:
0000F500 7000                       		moveq	#0,d0
0000F502 1028 0024                  		move.b	obRoutine(a0),d0
0000F506 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F50A 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F50E 6000 0000                  		bra.w	RememberState
0000F512                            ; ===========================================================================
0000F512 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F514 0000                       		dc.w Smash_Solid-Smash_Index
0000F516 0000                       		dc.w Smash_FragMove-Smash_Index
0000F518                            
0000F518 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F518                            ; ===========================================================================
0000F518                            
0000F518                            Smash_Main:	; Routine 0
0000F518 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F51C 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F524 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F52A 117C 0004 0001             		move.b	#4,obRender(a0)
0000F530 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F536 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F53C 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F542                            
0000F542                            Smash_Solid:	; Routine 2
0000F542 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F548 323C 001B                  		move.w	#$1B,d1
0000F54C 343C 0020                  		move.w	#$20,d2
0000F550 363C 0020                  		move.w	#$20,d3
0000F554 3828 0008                  		move.w	obX(a0),d4
0000F558 6100 0000                  		bsr.w	SolidObject	
0000F55C 4A04                       		tst.b	d4
0000F55E 6E00 0000                  		bgt.w	@chkroll	
0000F562 6700 0000                  		beq.w	@donothing								
0000F566 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F56C 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F570                            ; ===========================================================================
0000F570                            
0000F570                            @chkroll:
0000F570 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F576 6600                       		bne.s	@donothing	; if not, branch	
0000F578 3028 0030                  		move.w	smash_speed(a0),d0
0000F57C 6A00                       		bpl.s	@chkspeed
0000F57E 4440                       		neg.w	d0
0000F580                            
0000F580                            	@chkspeed:
0000F580 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F584 6500                       		bcs.s	@donothing	; if not, branch	
0000F586                            		
0000F586                            	@continue:	
0000F586 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F58C 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F592 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F598 3028 0008                  		move.w	obX(a0),d0
0000F59C B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F5A0 6500                       		bcs.s	@smash		; if yes, branch
0000F5A2 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F5A8                            
0000F5A8                            	@smash:
0000F5A8 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F5AE 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F5B4 7206                       		moveq	#6,d1		; load 7 fragments
0000F5B6 343C 0070                  		move.w	#$70,d2
0000F5BA 6100                       		bsr.s	SmashObject
0000F5BC                            
0000F5BC                            @donothing:
0000F5BC 4E75                       		rts	
0000F5BE                            
0000F5BE                            Smash_FragMove:	; Routine 4
0000F5BE 588F                       		addq.l	#4,sp
0000F5C0 6100 0000                  		bsr.w	SpeedToPos
0000F5C4 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F5CA 4A28 0001                  		tst.b	obRender(a0)
0000F5CE 6A00 0000                  		bpl.w	DeleteObject
0000F5D2 6000 0000                  		bra.w	DisplaySprite
0000F5D6                            
0000F5D6                            
0000F5D6                            
0000F5D6                            		include	"_incObj\sub SmashObject.asm"
0000F5D6                            ; ---------------------------------------------------------------------------
0000F5D6                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F5D6                            ; ---------------------------------------------------------------------------
0000F5D6                            
0000F5D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F5D6                            
0000F5D6                            
0000F5D6                            SmashObject:
0000F5D6 7000                       		moveq	#0,d0
0000F5D8 1028 001A                  		move.b	obFrame(a0),d0
0000F5DC D040                       		add.w	d0,d0
0000F5DE 2668 0004                  		movea.l	obMap(a0),a3
0000F5E2 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F5E6 524B                       		addq.w	#1,a3
0000F5E8 08E8 0005 0001             		bset	#5,obRender(a0)
0000F5EE 1810                       		move.b	0(a0),d4
0000F5F0 1A28 0001                  		move.b	obRender(a0),d5
0000F5F4 2248                       		movea.l	a0,a1
0000F5F6 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F5FC 1284                       		move.b	d4,0(a1)
0000F5FE 234B 0004                  		move.l	a3,obMap(a1)
0000F602 1345 0001                  		move.b	d5,obRender(a1)
0000F606 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F60C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F612 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F618 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F61E 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F624 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F628 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F62C 5341                       		subq.w #1,d1
0000F62E 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F632 303C 005F                  		move.w #$5F,d0
0000F636                            ; ===========================================================================
0000F636                            
0000F636                            Smash_Loop:
0000F636 4A11                       		tst.b	(a1)
0000F638 6700                       		beq.s	@cont
0000F63A 43E9 0040                  		lea		$40(a1),a1
0000F63E 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F642 6600                       		bne.s	Smash_PlaySnd
0000F644                            
0000F644                            	@cont:
0000F644 5A4B                       		addq.w #5,a3
0000F646                            
0000F646                            Smash_LoadFrag:				; XREF: SmashObject
0000F646 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F64C 1284                       		move.b	d4,0(a1)
0000F64E 234B 0004                  		move.l	a3,obMap(a1)
0000F652 1345 0001                  		move.b	d5,obRender(a1)
0000F656 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F65C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F662 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F668 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F66E 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F674 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F678 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F67C 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F680                            
0000F680                            Smash_PlaySnd:
0000F680 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F684 4EF9 0000 12A0             		jmp	(PlaySound_Special).l ; play smashing sound
0000F68A                            
0000F68A                            ; End of function SmashObject
0000F68A                            ; End of function SmashObject
0000F68A                            
0000F68A                            ; ===========================================================================
0000F68A                            ; Smashed block	fragment speeds
0000F68A                            ;
0000F68A 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F68E 0600 FF00                  		dc.w $600, -$100
0000F692 0600 0100                  		dc.w $600, $100
0000F696 0400 0500                  		dc.w $400, $500
0000F69A 0600 FA00                  		dc.w $600, -$600
0000F69E 0800 FE00                  		dc.w $800, -$200
0000F6A2 0800 0200                  		dc.w $800, $200
0000F6A6 0600 0600                  		dc.w $600, $600
0000F6AA                            
0000F6AA FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F6AE F800 FE00                  		dc.w -$800, -$200
0000F6B2 F800 0200                  		dc.w -$800, $200
0000F6B6 FA00 0600                  		dc.w -$600, $600
0000F6BA FC00 FB00                  		dc.w -$400, -$500
0000F6BE FA00 FF00                  		dc.w -$600, -$100
0000F6C2 FA00 0100                  		dc.w -$600, $100
0000F6C6 FC00 0500                  		dc.w -$400, $500
0000F6CA                            
0000F6CA                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F6CA                            ; ---------------------------------------------------------------------------
0000F6CA                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F6CA                            ; ---------------------------------------------------------------------------
0000F6CA                            Map_Smash_internal:
0000F6CA 0000                       		dc.w @left-Map_Smash_internal
0000F6CC 0000                       		dc.w @middle-Map_Smash_internal
0000F6CE 0000                       		dc.w @right-Map_Smash_internal
0000F6D0 08                         @left:		dc.b 8
0000F6D1 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F6D6 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F6DB 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F6E0 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F6E5 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F6EA F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F6EF 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F6F4 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F6F9 08                         @middle:	dc.b 8
0000F6FA E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F6FF F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F704 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F709 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F70E E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F713 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F718 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F71D 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F722 08                         @right:		dc.b 8
0000F723 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F728 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F72D 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F732 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F737 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F73C F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F741 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F746 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F74C 00                         		even
0000F74C 00                         		even
0000F74C                            
0000F74C                            ; ---------------------------------------------------------------------------
0000F74C                            ; Object code execution subroutine
0000F74C                            ; ---------------------------------------------------------------------------
0000F74C                            
0000F74C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F74C                            
0000F74C                            
0000F74C                            
0000F74C                            ExecuteObjects: ; XREF: GM_Title; et al
0000F74C 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F750 7E7F                       		moveq #$7F,d7
0000F752 7000                       		moveq #0,d0
0000F754 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F75A 6400                       		bcc.s loc_D362
0000F75C                            
0000F75C                            loc_D348:
0000F75C 1010                       		move.b (a0),d0 ; load object number from RAM
0000F75E 6700                       		beq.s loc_D358
0000F760 D040                       		add.w d0,d0
0000F762 D040                       		add.w d0,d0
0000F764 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F768 4E91                       		jsr (a1) ; run the object's code
0000F76A 7000                       		moveq #0,d0
0000F76C                            
0000F76C                            loc_D358:
0000F76C 41E8 0040                  		lea $40(a0),a0 ; next object
0000F770 51CF FFEA                  		dbf d7,loc_D348
0000F774 4E75                       		rts
0000F776                            ; ===========================================================================
0000F776                            
0000F776                            loc_D362:
0000F776 7E1F                       		moveq #$1F,d7
0000F778 61E2                       		bsr.s loc_D348
0000F77A 7E5F                       		moveq #$5F,d7
0000F77C                            
0000F77C                            loc_D368:
0000F77C 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F77E 1010                       		move.b (a0),d0 ; get the object's ID
0000F780 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F782 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F786 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F788 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F78C 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F792 6700                       		beq.s loc_D378 ; if not, branch
0000F794 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F798                            
0000F798                            loc_D378:
0000F798 6100 0000                  		bsr.w DisplaySprite2
0000F79C                            		
0000F79C                            loc_D37C:
0000F79C 41E8 0040                  		lea $40(a0),a0
0000F7A0 51CF FFDA                  		dbf d7,loc_D368
0000F7A4 4E75                       		rts
0000F7A6                            ; End of function ExecuteObjects
0000F7A6                            
0000F7A6                            ; ===========================================================================
0000F7A6                            ; ---------------------------------------------------------------------------
0000F7A6                            ; Object pointers
0000F7A6                            ; ---------------------------------------------------------------------------
0000F7A6                            Obj_Index:
0000F7A6                            		include	"_inc\Object Pointers.asm"
0000F7A6                            ; ---------------------------------------------------------------------------
0000F7A6                            ; Object pointers
0000F7A6                            ; ---------------------------------------------------------------------------
0000F7A6 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F7AA 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F7AE 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F7B2 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F7B6 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F7BA 0000 B502                  ptr_Mozzietron:		dc.l Mozzietron
0000F7BE 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F7C2 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F7C6 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F7CA 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F7CE 0000 0000                  ptr_Pole:		dc.l Pole
0000F7D2 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F7D6 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F7DA 0000 C928                  ptr_TitleSonic:		dc.l TitleSonic
0000F7DE 0000 C9A8                  ptr_PSBTM:		dc.l PSBTM
0000F7E2 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F7E6 0000 9012                  ptr_Bridge:		dc.l Bridge
0000F7EA 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F7EE 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F7F2 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F7F6 0000 9638                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F7FA 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F7FE 0000 9984                  ptr_Helix:		dc.l Helix
0000F802 0000 9B10                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F806 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F80A 0000 9EEC                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F80E 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F812 0000 A4F4                  ptr_Scenery:		dc.l Scenery
0000F816 0000 A596                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F81A 0000 A87E                  ptr_BallHog:		dc.l BallHog
0000F81E 0000 B218                  ptr_Crabmeat:		dc.l Crabmeat
0000F822 0000 A94C                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F826 0000 0000                  ptr_HUD:		dc.l HUD
0000F82A 0000 B634                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F82E 0000 B786                  ptr_Missile:		dc.l Missile
0000F832 0000 AA1E                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F836 0000 B9E0                  ptr_Rings:		dc.l Rings
0000F83A 0000 C22A                  ptr_Monitor:		dc.l Monitor
0000F83E 0000 AA8E                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F842 0000 AC4C                  ptr_Animals:		dc.l Animals		; $28
0000F846 0000 B13A                  ptr_Points:		dc.l Points
0000F84A 0000 A66C                  ptr_AutoDoor:		dc.l AutoDoor
0000F84E 0000 CEEC                  ptr_Chopper:		dc.l Chopper
0000F852 0000 CFA6                  ptr_Jaws:		dc.l Jaws
0000F856 0000 D070                  ptr_Burrobot:		dc.l Burrobot
0000F85A 0000 C428                  ptr_PowerUp:		dc.l PowerUp
0000F85E 0000 D284                  ptr_LargeGrass:		dc.l LargeGrass
0000F862 0000 D766                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F866 0000 DA42                  ptr_ChainStomp:		dc.l ChainStomp
0000F86A 0000 E0F0                  ptr_Button:		dc.l Button
0000F86E 0000 E294                  ptr_PushBlock:		dc.l PushBlock
0000F872 0000 E6C6                  ptr_TitleCard:		dc.l TitleCard
0000F876 0000 D5A6                  ptr_GrassFire:		dc.l GrassFire
0000F87A 0000 F206                  ptr_Spikes:		dc.l Spikes
0000F87E 0000 BC3C                  ptr_RingLoss:		dc.l RingLoss
0000F882 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F886 0000 E876                  ptr_GameOverCard:	dc.l GameOverCard
0000F88A 0000 E934                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F88E 0000 F434                  ptr_PurpleRock:		dc.l PurpleRock
0000F892 0000 F500                  ptr_SmashWall:		dc.l SmashWall
0000F896 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F89A 0000 0000                  ptr_Prison:		dc.l Prison
0000F89E 0000 AB20                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F8A2 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F8A6 0000 0000                  ptr_Springs:		dc.l Springs
0000F8AA 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F8AE 0000 0000                  ptr_Roller:		dc.l Roller
0000F8B2 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F8B6 0000 DD5E                  ptr_SideStomp:		dc.l SideStomp
0000F8BA 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F8BE 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F8C2 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F8C6 0000 F4A2                  ptr_WaterSound:		dc.l WaterSound
0000F8CA 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F8CE 0000 BEFE                  ptr_GiantRing:		dc.l GiantRing
0000F8D2 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F8D6 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F8DA 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F8DE 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F8E2 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F8E6 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F8EA 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F8EE 0000 9FFC                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F8F2 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F8F6 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F8FA 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F8FE 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F902 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F906 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F90A 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F90E 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F912 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F916 0000 0000                  ptr_Fan:		dc.l Fan
0000F91A 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F91E 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F922 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F926 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F92A 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F92E 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F932 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F936 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F93A 0000 0000                  ptr_Junction:		dc.l Junction
0000F93E 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F942 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F946 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F94A 0000 0000                  ptr_Saws:		dc.l Saws
0000F94E 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F952 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F956 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F95A 0000 0000                  ptr_Electro:		dc.l Electro
0000F95E 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F962 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F966 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F96A 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F96E 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F972 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F976 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F97A 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F97E 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F982 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F986 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F98A 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F98E 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F992 0000 BFD8                  ptr_RingFlash:		dc.l RingFlash
0000F996 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F99A 0000 EB78                  ptr_SSResult:		dc.l SSResult
0000F99E 0000 ED1E                  ptr_SSRChaos:		dc.l SSRChaos
0000F9A2 0000 5EB2                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F9A6 0000 5FCA                  ptr_ContSonic:		dc.l ContSonic
0000F9AA 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F9AE 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F9B2 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F9B6 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F9BA 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F9BE 0000 6458                  ptr_EndSonic:		dc.l EndSonic
0000F9C2 0000 65B2                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F9C6 0000 668C                  ptr_EndSTH:		dc.l EndSTH
0000F9CA 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F9CE 0000 68F2                  ptr_EndEggman:		dc.l EndEggman
0000F9D2 0000 69D2                  ptr_TryChaos:		dc.l TryChaos
0000F9D6                            
0000F9D6                            NullObject:
0000F9D6                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F9D6                            
0000F9D6 =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F9D6 =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F9D6 =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F9D6 =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F9D6 =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F9D6 =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F9D6 =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F9D6 =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F9D6 =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F9D6 =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F9D6 =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F9D6 =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F9D6 =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F9D6 =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F9D6 =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F9D6 =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F9D6 =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F9D6 =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F9D6 =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F9D6 =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F9D6 =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F9D6 =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F9D6 =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F9D6 =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F9D6 =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F9D6 =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F9D6 =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F9D6 =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F9D6 =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F9D6 =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F9D6 =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F9D6 =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F9D6 =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F9D6 =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F9D6 =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F9D6 =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F9D6 =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F9D6 =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F9D6 =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F9D6 =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F9D6 =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F9D6 =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F9D6 =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F9D6 =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F9D6 =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F9D6 =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F9D6 =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F9D6 =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F9D6 =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F9D6 =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F9D6 =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F9D6 =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F9D6 =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F9D6 =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F9D6 =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F9D6 =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F9D6 =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F9D6 =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F9D6 =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F9D6 =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F9D6 =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F9D6 =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F9D6 =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F9D6 =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F9D6 =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F9D6 =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F9D6 =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F9D6 =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F9D6 =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F9D6 =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F9D6 =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F9D6 =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F9D6 =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F9D6 =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F9D6 =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F9D6 =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F9D6 =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F9D6 =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F9D6 =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F9D6 =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F9D6 =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F9D6 =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F9D6 =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F9D6 =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F9D6 =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F9D6 =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F9D6 =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F9D6 =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F9D6 =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F9D6 =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F9D6 =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F9D6 =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F9D6 =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F9D6 =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F9D6 =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F9D6 =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F9D6 =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F9D6 =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F9D6 =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F9D6 =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F9D6 =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F9D6 =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F9D6 =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F9D6 =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F9D6 =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F9D6 =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F9D6 =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F9D6 =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F9D6 =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F9D6 =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F9D6 =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F9D6 =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F9D6 =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F9D6 =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F9D6 =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F9D6 =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F9D6 =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F9D6 =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F9D6 =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F9D6 =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F9D6 =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F9D6 =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F9D6 =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F9D6 =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F9D6 =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F9D6 =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F9D6 =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F9D6 =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F9D6 =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F9D6 =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F9D6 =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F9D6 =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F9D6 =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F9D6 =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F9D6 =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F9D6 =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F9D6 =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F9D6 =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F9D6 =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F9D6 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F9D6 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F9D6                            
0000F9D6                            		include	"_incObj\sub ObjectFall.asm"
0000F9D6                            ; ---------------------------------------------------------------------------
0000F9D6                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F9D6                            ; ---------------------------------------------------------------------------
0000F9D6                            
0000F9D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9D6                            
0000F9D6                            
0000F9D6                            ObjectFall:
0000F9D6 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F9DC 6700                       		beq.s	@donothing
0000F9DE 3028 0010                  		move.w	obVelX(a0),d0
0000F9E2 48C0                       		ext.l	d0
0000F9E4 E188                       		lsl.l	#8,d0
0000F9E6 D1A8 0008                  		add.l	d0,obX(a0)
0000F9EA 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F9F0 6F00                               ble.s   @skipline       ; if yes, branch
0000F9F2 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F9F8                                @skipline:		
0000F9F8 3028 0012                  		move.w	obVelY(a0),d0
0000F9FC 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000FA02 48C0                       		ext.l	d0
0000FA04 E188                       		lsl.l	#8,d0
0000FA06 D1A8 000C                  		add.l	d0,obY(a0)
0000FA0A 4E75                       		rts	
0000FA0C                            	
0000FA0C                            	@donothing:
0000FA0C 4E75                       		rts
0000FA0E                            
0000FA0E                            ; End of function ObjectFall
0000FA0E                            ; End of function ObjectFall
0000FA0E                            		include	"_incObj\sub SpeedToPos.asm"
0000FA0E                            ; ---------------------------------------------------------------------------
0000FA0E                            ; Subroutine translating object	speed to update	object position
0000FA0E                            ; ---------------------------------------------------------------------------
0000FA0E                            
0000FA0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA0E                            
0000FA0E                            
0000FA0E                            SpeedToPos:
0000FA0E 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000FA14 E188                       		lsl.l	#8,d0
0000FA16 D1A8 0008                  		add.l	d0,obX(a0)
0000FA1A E18A                       		lsl.l	#8,d2
0000FA1C D5A8 000C                  		add.l	d2,obY(a0)
0000FA20 4E75                       		rts
0000FA22                            ; End of function SpeedToPos
0000FA22                            ; End of function SpeedToPos
0000FA22                            		include	"_incObj\sub DisplaySprite.asm"
0000FA22                            ; ---------------------------------------------------------------------------
0000FA22                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000FA22                            ; ---------------------------------------------------------------------------
0000FA22                            
0000FA22                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000FA22                            
0000FA22                            
0000FA22                            DisplaySprite:
0000FA22 43F8 AC00                          lea    (v_spritequeue).w,a1
0000FA26 D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000FA2A 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000FA2E 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000FA30 5451                               addq.w    #2,(a1)        ; increment sprite count
0000FA32 D2D1                               adda.w    (a1),a1        ; jump to empty position
0000FA34 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000FA36                            
0000FA36                                DSpr_Full:
0000FA36 4E75                               rts    
0000FA38                            
0000FA38                            ; End of function DisplaySprite
0000FA38                            
0000FA38                            
0000FA38                            ; ---------------------------------------------------------------------------
0000FA38                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000FA38                            ; ---------------------------------------------------------------------------
0000FA38                            
0000FA38                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000FA38                            
0000FA38                            
0000FA38                            DisplaySprite1:
0000FA38 45F8 AC00                          lea    (v_spritequeue).w,a2
0000FA3C D4E9 0018                          adda.w  obpriority(a1),a2
0000FA40 0C52 007E                          cmpi.w    #$7E,(a2)
0000FA44 6400                               bcc.s    DSpr1_Full
0000FA46 5452                               addq.w    #2,(a2)
0000FA48 D4D2                               adda.w    (a2),a2
0000FA4A 3489                               move.w    a1,(a2)
0000FA4C                            
0000FA4C                                DSpr1_Full:
0000FA4C 4E75                               rts    
0000FA4E                            
0000FA4E                            ; End of function DisplaySprite1
0000FA4E                            
0000FA4E                            ; ---------------------------------------------------------------------------
0000FA4E                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000FA4E                            ; and d0 is already (priority/2)&$380
0000FA4E                            ; ---------------------------------------------------------------------------
0000FA4E                            
0000FA4E                            ; loc_16530:
0000FA4E                            DisplaySprite2:
0000FA4E 43F8 AC00                      lea    (v_spritequeue).w,a1
0000FA52 D2C0                           adda.w    d0,a1
0000FA54 0C51 007E                      cmpi.w    #$7E,(a1)
0000FA58 6400                           bhs.s    return_16542
0000FA5A 5451                           addq.w    #2,(a1)
0000FA5C D2D1                           adda.w    (a1),a1
0000FA5E 3288                           move.w    a0,(a1)
0000FA60                            
0000FA60                            return_16542:
0000FA60 4E75                           rts
0000FA60 4E75                           rts
0000FA62                            		include	"_incObj\sub DeleteObject.asm"
0000FA62                            ; ---------------------------------------------------------------------------
0000FA62                            ; Subroutine to	delete an object
0000FA62                            ; ---------------------------------------------------------------------------
0000FA62                            
0000FA62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA62                            
0000FA62                            
0000FA62                            DeleteObject:
0000FA62 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000FA64                            
0000FA64                            DeleteChild:				; child objects are already in (a1)
0000FA64 7200                       		moveq	#0,d1
0000FA66 700F                       		moveq	#$F,d0
0000FA68                            
0000FA68                            	DelObj_Loop:
0000FA68 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000FA6A 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000FA6E 4E75                       		rts	
0000FA70                            
0000FA70                            ; End of function DeleteObject
0000FA70                            ; End of function DeleteObject
0000FA70                            
0000FA70                            ; ===========================================================================
0000FA70 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000FA74 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000FA78 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000FA7C 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000FA80                            ; ---------------------------------------------------------------------------
0000FA80                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000FA80                            ; ---------------------------------------------------------------------------
0000FA80                            
0000FA80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA80                            
0000FA80                            
0000FA80                            BuildSprites:
0000FA80 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000FA84 7A00                       		moveq	#0,d5
0000FA86 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000FA8A 7E07                       		moveq	#7,d7
0000FA8C                            
0000FA8C                            	@priorityLoop:
0000FA8C 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000FA8E 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000FA92 7C02                       		moveq	#2,d6
0000FA94                            
0000FA94                            	@objectLoop:
0000FA94 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000FA98 4A10                       		tst.b	(a0)		; if null, branch
0000FA9A 6700 0000                  		beq.w	@skipObject
0000FA9E 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000FAA4                            
0000FAA4 1028 0001                  		move.b	obRender(a0),d0
0000FAA8 1800                       		move.b	d0,d4
0000FAAA 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000FAAE 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000FAB0 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000FAB4                            	; check object bounds
0000FAB4 7000                       		moveq	#0,d0
0000FAB6 1028 0014                  		move.b	obActWid(a0),d0
0000FABA 3628 0008                  		move.w	obX(a0),d3
0000FABE 9651                       		sub.w	(a1),d3
0000FAC0 3203                       		move.w	d3,d1
0000FAC2 D240                       		add.w	d0,d1
0000FAC4 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000FAC8 3203                       		move.w	d3,d1
0000FACA 9240                       		sub.w	d0,d1
0000FACC 0C41 0140                  		cmpi.w	#320,d1
0000FAD0 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000FAD2 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000FAD6                            
0000FAD6 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000FADA 6700                       		beq.s	@assumeHeight	; if yes, branch
0000FADC 7000                       		moveq	#0,d0
0000FADE 1028 0016                  		move.b	obHeight(a0),d0
0000FAE2 3428 000C                  		move.w	obY(a0),d2
0000FAE6 9469 0004                  		sub.w	4(a1),d2
0000FAEA 3202                       		move.w	d2,d1
0000FAEC D240                       		add.w	d0,d1
0000FAEE 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000FAF0 3202                       		move.w	d2,d1
0000FAF2 9240                       		sub.w	d0,d1
0000FAF4 0C41 00E0                  		cmpi.w	#224,d1
0000FAF8 6C00                       		bge.s	@skipObject
0000FAFA 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000FAFE 6000                       		bra.s	@drawObject
0000FB00                            ; ===========================================================================
0000FB00                            
0000FB00                            	@screenCoords:
0000FB00 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000FB04 3628 0008                  		move.w	obX(a0),d3
0000FB08 6000                       		bra.s	@drawObject
0000FB0A                            ; ===========================================================================
0000FB0A                            
0000FB0A                            	@assumeHeight:
0000FB0A 3428 000C                  		move.w	obY(a0),d2
0000FB0E 9469 0004                  		sub.w	obMap(a1),d2
0000FB12 0642 0080                  		addi.w	#$80,d2
0000FB16 0C42 0060                  		cmpi.w	#$60,d2
0000FB1A 6500                       		blo.s	@skipObject
0000FB1C 0C42 0180                  		cmpi.w	#$180,d2
0000FB20 6400                       		bhs.s	@skipObject
0000FB22                            
0000FB22                            	@drawObject:
0000FB22 2268 0004                  		movea.l	obMap(a0),a1
0000FB26 7200                       		moveq	#0,d1
0000FB28 0804 0005                  		btst	#5,d4
0000FB2C 6600                       		bne.s	@drawFrame
0000FB2E 1228 001A                  		move.b	$1A(a0),d1
0000FB32 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000FB34 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000FB38 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000FB3A 1219                       		move.b	(a1)+,d1
0000FB3C 5301                       		subq.b	#1,d1
0000FB3E 6B00                       		bmi.s	@setVisible
0000FB40                            
0000FB40                            	@drawFrame:
0000FB40 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000FB44                            
0000FB44                            	@setVisible:
0000FB44 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000FB4A                            
0000FB4A                            	@skipObject:
0000FB4A 5446                       		addq.w	#2,d6
0000FB4C 5554                       		subq.w	#2,(a4)			; number of objects left
0000FB4E 6600 FF44                  		bne.w	@objectLoop
0000FB52                            
0000FB52                            	@nextPriority:
0000FB52 49EC 0080                  		lea	$80(a4),a4
0000FB56 51CF FF34                  		dbf	d7,@priorityLoop
0000FB5A 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000FB5E 0C05 0050                  		cmpi.b	#$50,d5
0000FB62 6700                       		beq.s	@spriteLimit
0000FB64 24BC 0000 0000             		move.l	#0,(a2)
0000FB6A 4E75                       		rts	
0000FB6C                            ; ===========================================================================
0000FB6C                            
0000FB6C                            	@spriteLimit:
0000FB6C 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000FB72 4E75                       		rts	
0000FB74                            ; End of function BuildSprites
0000FB74                            
0000FB74                            
0000FB74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB74                            
0000FB74                            
0000FB74                            BuildSpr_Draw:
0000FB74 3668 0002                  		movea.w	obGfx(a0),a3
0000FB78 0804 0000                  		btst	#0,d4
0000FB7C 6600                       		bne.s	BuildSpr_FlipX
0000FB7E 0804 0001                  		btst	#1,d4
0000FB82 6600 0000                  		bne.w	BuildSpr_FlipY
0000FB86                            ; End of function BuildSpr_Draw
0000FB86                            
0000FB86                            
0000FB86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB86                            
0000FB86                            
0000FB86                            BuildSpr_Normal:
0000FB86 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FB8A 6700                       		beq.s	@return
0000FB8C 1019                       		move.b	(a1)+,d0	; get y-offset
0000FB8E 4880                       		ext.w	d0
0000FB90 D042                       		add.w	d2,d0		; add y-position
0000FB92 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB94 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000FB96 5205                       		addq.b	#1,d5		; increase sprite counter
0000FB98 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000FB9A 1019                       		move.b	(a1)+,d0	; get art tile
0000FB9C E148                       		lsl.w	#8,d0
0000FB9E 1019                       		move.b	(a1)+,d0
0000FBA0 D04B                       		add.w	a3,d0		; add art tile offset
0000FBA2 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FBA4 1019                       		move.b	(a1)+,d0	; get x-offset
0000FBA6 4880                       		ext.w	d0
0000FBA8 D043                       		add.w	d3,d0		; add x-position
0000FBAA 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FBAE 6600                       		bne.s	@writeX
0000FBB0 5240                       		addq.w	#1,d0
0000FBB2                            
0000FBB2                            	@writeX:
0000FBB2 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FBB4 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000FBB8                            
0000FBB8                            	@return:
0000FBB8 4E75                       		rts	
0000FBBA                            ; End of function BuildSpr_Normal
0000FBBA                            
0000FBBA                            ; ===========================================================================
0000FBBA                            
0000FBBA                            BuildSpr_FlipX:
0000FBBA 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000FBBE 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000FBC2                            
0000FBC2                            	@loop:
0000FBC2 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FBC6 6700                       		beq.s	@return
0000FBC8 1019                       		move.b	(a1)+,d0	; y position
0000FBCA 4880                       		ext.w	d0
0000FBCC D042                       		add.w	d2,d0
0000FBCE 34C0                       		move.w	d0,(a2)+
0000FBD0 1819                       		move.b	(a1)+,d4	; size
0000FBD2 14C4                       		move.b	d4,(a2)+	
0000FBD4 5205                       		addq.b	#1,d5		; link
0000FBD6 14C5                       		move.b	d5,(a2)+
0000FBD8 1019                       		move.b	(a1)+,d0	; art tile
0000FBDA E148                       		lsl.w	#8,d0
0000FBDC 1019                       		move.b	(a1)+,d0	
0000FBDE D04B                       		add.w	a3,d0
0000FBE0 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000FBE4 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FBE6 1019                       		move.b	(a1)+,d0	; get x-offset
0000FBE8 4880                       		ext.w	d0
0000FBEA 4440                       		neg.w	d0			; negate it
0000FBEC D804                       		add.b	d4,d4		; calculate flipped position by size
0000FBEE 0244 0018                  		andi.w	#$18,d4
0000FBF2 5044                       		addq.w	#8,d4
0000FBF4 9044                       		sub.w	d4,d0
0000FBF6 D043                       		add.w	d3,d0
0000FBF8 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FBFC 6600                       		bne.s	@writeX
0000FBFE 5240                       		addq.w	#1,d0
0000FC00                            
0000FC00                            	@writeX:
0000FC00 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FC02 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000FC06                            
0000FC06                            	@return:
0000FC06 4E75                       		rts	
0000FC08                            ; ===========================================================================
0000FC08                            
0000FC08                            BuildSpr_FlipY:
0000FC08 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FC0C 6700                       		beq.s	@return
0000FC0E 1019                       		move.b	(a1)+,d0	; get y-offset
0000FC10 1811                       		move.b	(a1),d4		; get size
0000FC12 4880                       		ext.w	d0
0000FC14 4440                       		neg.w	d0		; negate y-offset
0000FC16 E70C                       		lsl.b	#3,d4	; calculate flip offset
0000FC18 0244 0018                  		andi.w	#$18,d4
0000FC1C 5044                       		addq.w	#8,d4
0000FC1E 9044                       		sub.w	d4,d0
0000FC20 D042                       		add.w	d2,d0	; add y-position
0000FC22 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FC24 14D9                       		move.b	(a1)+,(a2)+	; size
0000FC26 5205                       		addq.b	#1,d5
0000FC28 14C5                       		move.b	d5,(a2)+	; link
0000FC2A 1019                       		move.b	(a1)+,d0	; art tile
0000FC2C E148                       		lsl.w	#8,d0
0000FC2E 1019                       		move.b	(a1)+,d0
0000FC30 D04B                       		add.w	a3,d0
0000FC32 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000FC36 34C0                       		move.w	d0,(a2)+
0000FC38 1019                       		move.b	(a1)+,d0	; x-position
0000FC3A 4880                       		ext.w	d0
0000FC3C D043                       		add.w	d3,d0
0000FC3E 0240 01FF                  		andi.w	#$1FF,d0
0000FC42 6600                       		bne.s	@writeX
0000FC44 5240                       		addq.w	#1,d0
0000FC46                            
0000FC46                            	@writeX:
0000FC46 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FC48 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000FC4C                            
0000FC4C                            	@return:
0000FC4C 4E75                       		rts	
0000FC4E                            ; ===========================================================================
0000FC4E                            
0000FC4E                            BuildSpr_FlipXY:
0000FC4E 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FC52 6700                       		beq.s	@return
0000FC54 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000FC56 1811                       		move.b	(a1),d4
0000FC58 4880                       		ext.w	d0
0000FC5A 4440                       		neg.w	d0
0000FC5C E70C                       		lsl.b	#3,d4
0000FC5E 0244 0018                  		andi.w	#$18,d4
0000FC62 5044                       		addq.w	#8,d4
0000FC64 9044                       		sub.w	d4,d0
0000FC66 D042                       		add.w	d2,d0
0000FC68 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FC6A 1819                       		move.b	(a1)+,d4	; size
0000FC6C 14C4                       		move.b	d4,(a2)+	; link
0000FC6E 5205                       		addq.b	#1,d5
0000FC70 14C5                       		move.b	d5,(a2)+	; art tile
0000FC72 1019                       		move.b	(a1)+,d0
0000FC74 E148                       		lsl.w	#8,d0
0000FC76 1019                       		move.b	(a1)+,d0
0000FC78 D04B                       		add.w	a3,d0
0000FC7A 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000FC7E 34C0                       		move.w	d0,(a2)+
0000FC80 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000FC82 4880                       		ext.w	d0
0000FC84 4440                       		neg.w	d0
0000FC86 D804                       		add.b	d4,d4
0000FC88 0244 0018                  		andi.w	#$18,d4
0000FC8C 5044                       		addq.w	#8,d4
0000FC8E 9044                       		sub.w	d4,d0
0000FC90 D043                       		add.w	d3,d0
0000FC92 0240 01FF                  		andi.w	#$1FF,d0
0000FC96 6600                       		bne.s	@writeX
0000FC98 5240                       		addq.w	#1,d0
0000FC9A                            
0000FC9A                            	@writeX:
0000FC9A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FC9C 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000FCA0                            
0000FCA0                            	@return:
0000FCA0 4E75                       		rts	
0000FCA2                            
0000FCA2                            		include	"_incObj\sub ChkObjectVisible.asm"
0000FCA2                            ; ---------------------------------------------------------------------------
0000FCA2                            ; Subroutine to	check if an object is off screen
0000FCA2                            
0000FCA2                            ; output:
0000FCA2                            ;	d0 = flag set if object is off screen
0000FCA2                            ; ---------------------------------------------------------------------------
0000FCA2                            
0000FCA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FCA2                            
0000FCA2                            
0000FCA2                            ChkObjectVisible:
0000FCA2 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FCA6 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FCAA 6B00                       		bmi.s	@offscreen
0000FCAC 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000FCB0 6C00                       		bge.s	@offscreen	; if not, branch
0000FCB2                            
0000FCB2 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000FCB6 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000FCBA 6B00                       		bmi.s	@offscreen
0000FCBC 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000FCC0 6C00                       		bge.s	@offscreen	; if not, branch
0000FCC2                            
0000FCC2 7000                       		moveq	#0,d0		; set flag to 0
0000FCC4 4E75                       		rts	
0000FCC6                            
0000FCC6                            	@offscreen:
0000FCC6 7001                       		moveq	#1,d0		; set flag to 1
0000FCC8 4E75                       		rts	
0000FCCA                            ; End of function ChkObjectVisible
0000FCCA                            
0000FCCA                            ; ---------------------------------------------------------------------------
0000FCCA                            ; Subroutine to	check if an object is off screen
0000FCCA                            ; More precise than above subroutine, taking width into account
0000FCCA                            
0000FCCA                            ; output:
0000FCCA                            ;	d0 = flag set if object is off screen
0000FCCA                            ; ---------------------------------------------------------------------------
0000FCCA                            
0000FCCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FCCA                            
0000FCCA                            
0000FCCA                            ChkPartiallyVisible:
0000FCCA 7200                       		moveq	#0,d1
0000FCCC 1228 0014                  		move.b	obActWid(a0),d1
0000FCD0 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FCD4 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FCD8 D041                       		add.w	d1,d0		; add object width
0000FCDA 6B00                       		bmi.s	@offscreen2
0000FCDC D241                       		add.w	d1,d1
0000FCDE 9041                       		sub.w	d1,d0
0000FCE0 0C40 0140                  		cmpi.w	#320,d0
0000FCE4 6C00                       		bge.s	@offscreen2
0000FCE6                            
0000FCE6 3228 000C                  		move.w	obY(a0),d1
0000FCEA 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FCEE 6B00                       		bmi.s	@offscreen2
0000FCF0 0C41 00E0                  		cmpi.w	#224,d1
0000FCF4 6C00                       		bge.s	@offscreen2
0000FCF6                            
0000FCF6 7000                       		moveq	#0,d0
0000FCF8 4E75                       		rts	
0000FCFA                            
0000FCFA                            	@offscreen2:
0000FCFA 7001                       		moveq	#1,d0
0000FCFC 4E75                       		rts	
0000FCFE                            ; End of function ChkPartiallyVisible
0000FCFE                            ; End of function ChkPartiallyVisible
0000FCFE                            
0000FCFE                            ; ---------------------------------------------------------------------------
0000FCFE                            ; Subroutine to	load a level's objects
0000FCFE                            ; ---------------------------------------------------------------------------
0000FCFE                            
0000FCFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FCFE                            
0000FCFE                            
0000FCFE                            ObjPosLoad:
0000FCFE 7000                       		moveq	#0,d0
0000FD00 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FD04 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FD08 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FD0C                            ; End of function ObjPosLoad
0000FD0C                            
0000FD0C                            ; ===========================================================================
0000FD0C 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FD0E 0000                       		dc.w OPL_Next-OPL_Index
0000FD10                            ; ===========================================================================
0000FD10                            
0000FD10                            OPL_Main:
0000FD10 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FD14 3038 FE10                  		move.w	(v_zone).w,d0
0000FD18 ED08                       		lsl.b	#6,d0
0000FD1A E848                       		lsr.w	#4,d0
0000FD1C 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FD22 2248                       		movea.l	a0,a1
0000FD24 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FD28 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FD2C 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FD30 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FD34 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FD38 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FD3C 45F8 FC00                  		lea	(v_objstate).w,a2
0000FD40 34FC 0101                  		move.w	#$101,(a2)+
0000FD44 303C 005E                  		move.w	#$5E,d0
0000FD48                            
0000FD48                            OPL_ClrList:
0000FD48 429A                       		clr.l	(a2)+
0000FD4A 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FD4E                            
0000FD4E 45F8 FC00                  		lea	(v_objstate).w,a2
0000FD52 7400                       		moveq	#0,d2
0000FD54 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FD58 0446 0080                  		subi.w	#$80,d6
0000FD5C 6400                       		bhs.s	loc_D93C
0000FD5E 7C00                       		moveq	#0,d6
0000FD60                            
0000FD60                            loc_D93C:
0000FD60 0246 FF80                  		andi.w	#$FF80,d6
0000FD64 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FD68                            
0000FD68                            loc_D944:
0000FD68 BC50                       		cmp.w	(a0),d6
0000FD6A 6300                       		bls.s	loc_D956
0000FD6C 4A28 0004                  		tst.b	4(a0)
0000FD70 6A00                       		bpl.s	loc_D952
0000FD72 1412                       		move.b	(a2),d2
0000FD74 5212                       		addq.b	#1,(a2)
0000FD76                            
0000FD76                            loc_D952:
0000FD76 5C48                       		addq.w	#6,a0
0000FD78 60EE                       		bra.s	loc_D944
0000FD7A                            ; ===========================================================================
0000FD7A                            
0000FD7A                            loc_D956:
0000FD7A 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FD7E 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FD82 0446 0080                  		subi.w	#$80,d6
0000FD86 6500                       		blo.s	loc_D976
0000FD88                            
0000FD88                            loc_D964:
0000FD88 BC50                       		cmp.w	(a0),d6
0000FD8A 6300                       		bls.s	loc_D976
0000FD8C 4A28 0004                  		tst.b	4(a0)
0000FD90 6A00                       		bpl.s	loc_D972
0000FD92 522A 0001                  		addq.b	#1,1(a2)
0000FD96                            
0000FD96                            loc_D972:
0000FD96 5C48                       		addq.w	#6,a0
0000FD98 60EE                       		bra.s	loc_D964
0000FD9A                            ; ===========================================================================
0000FD9A                            
0000FD9A                            loc_D976:
0000FD9A 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FD9E 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FDA4                            
0000FDA4                            OPL_Next:
0000FDA4 45F8 FC00                  		lea	(v_objstate).w,a2
0000FDA8 7400                       		moveq	#0,d2
0000FDAA 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FDAE 0246 FF80                  		andi.w	#$FF80,d6
0000FDB2 BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FDB6 6700 0000                  		beq.w	locret_DA3A
0000FDBA 6C00                       		bge.s	loc_D9F6
0000FDBC 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FDC0 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FDC4 0446 0080                  		subi.w	#$80,d6
0000FDC8 6500                       		blo.s	loc_D9D2
0000FDCA                            
0000FDCA                            loc_D9A6:
0000FDCA BC68 FFFA                  		cmp.w	-6(a0),d6
0000FDCE 6C00                       		bge.s	loc_D9D2
0000FDD0 5D48                       		subq.w	#6,a0
0000FDD2 4A28 0004                  		tst.b	4(a0)
0000FDD6 6A00                       		bpl.s	loc_D9BC
0000FDD8 532A 0001                  		subq.b	#1,1(a2)
0000FDDC 142A 0001                  		move.b	1(a2),d2
0000FDE0                            
0000FDE0                            loc_D9BC:
0000FDE0 6100 0000                  		bsr.w	loc_DA3C
0000FDE4 6600                       		bne.s	loc_D9C6
0000FDE6 5D48                       		subq.w	#6,a0
0000FDE8 60E0                       		bra.s	loc_D9A6
0000FDEA                            ; ===========================================================================
0000FDEA                            
0000FDEA                            loc_D9C6:
0000FDEA 4A28 0004                  		tst.b	4(a0)
0000FDEE 6A00                       		bpl.s	loc_D9D0
0000FDF0 522A 0001                  		addq.b	#1,1(a2)
0000FDF4                            
0000FDF4                            loc_D9D0:
0000FDF4 5C48                       		addq.w	#6,a0
0000FDF6                            
0000FDF6                            loc_D9D2:
0000FDF6 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FDFA 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FDFE 0646 0300                  		addi.w	#$300,d6
0000FE02                            
0000FE02                            loc_D9DE:
0000FE02 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FE06 6E00                       		bgt.s	loc_D9F0
0000FE08 4A28 FFFE                  		tst.b	-2(a0)
0000FE0C 6A00                       		bpl.s	loc_D9EC
0000FE0E 5312                       		subq.b	#1,(a2)
0000FE10                            
0000FE10                            loc_D9EC:
0000FE10 5D48                       		subq.w	#6,a0
0000FE12 60EE                       		bra.s	loc_D9DE
0000FE14                            ; ===========================================================================
0000FE14                            
0000FE14                            loc_D9F0:
0000FE14 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FE18 4E75                       		rts	
0000FE1A                            ; ===========================================================================
0000FE1A                            
0000FE1A                            loc_D9F6:
0000FE1A 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FE1E 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FE22 0646 0280                  		addi.w	#$280,d6
0000FE26                            
0000FE26                            loc_DA02:
0000FE26 BC50                       		cmp.w	(a0),d6
0000FE28 6300                       		bls.s	loc_DA16
0000FE2A 4A28 0004                  		tst.b	4(a0)
0000FE2E 6A00                       		bpl.s	loc_DA10
0000FE30 1412                       		move.b	(a2),d2
0000FE32 5212                       		addq.b	#1,(a2)
0000FE34                            
0000FE34                            loc_DA10:
0000FE34 6100 0000                  		bsr.w	loc_DA3C
0000FE38 67EC                       		beq.s	loc_DA02
0000FE3A                            
0000FE3A                            loc_DA16:
0000FE3A 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FE3E 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FE42 0446 0300                  		subi.w	#$300,d6
0000FE46 6500                       		blo.s	loc_DA36
0000FE48                            
0000FE48                            loc_DA24:
0000FE48 BC50                       		cmp.w	(a0),d6
0000FE4A 6300                       		bls.s	loc_DA36
0000FE4C 4A28 0004                  		tst.b	4(a0)
0000FE50 6A00                       		bpl.s	loc_DA32
0000FE52 522A 0001                  		addq.b	#1,1(a2)
0000FE56                            
0000FE56                            loc_DA32:
0000FE56 5C48                       		addq.w	#6,a0
0000FE58 60EE                       		bra.s	loc_DA24
0000FE5A                            ; ===========================================================================
0000FE5A                            
0000FE5A                            loc_DA36:
0000FE5A 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FE5E                            
0000FE5E                            locret_DA3A:
0000FE5E 4E75                       		rts	
0000FE60                            ; ===========================================================================
0000FE60                            
0000FE60                            loc_DA3C:
0000FE60 4A28 0004                  		tst.b	4(a0)
0000FE64 6A00                       		bpl.s	OPL_MakeItem
0000FE66 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FE6C 6700                       		beq.s	OPL_MakeItem
0000FE6E 5C48                       		addq.w	#6,a0
0000FE70 7000                       		moveq	#0,d0
0000FE72 4E75                       		rts	
0000FE74                            ; ===========================================================================
0000FE74                            
0000FE74                            OPL_MakeItem:
0000FE74 6100 0000                  		bsr.w	FindFreeObj
0000FE78 6600                       		bne.s	locret_DA8A
0000FE7A 3358 0008                  		move.w	(a0)+,obX(a1)
0000FE7E 3018                       		move.w	(a0)+,d0
0000FE80 3200                       		move.w	d0,d1
0000FE82 0240 0FFF                  		andi.w	#$FFF,d0
0000FE86 3340 000C                  		move.w	d0,obY(a1)
0000FE8A E559                       		rol.w	#2,d1
0000FE8C 0201 0003                  		andi.b	#3,d1
0000FE90 1341 0001                  		move.b	d1,obRender(a1)
0000FE94 1341 0022                  		move.b	d1,obStatus(a1)
0000FE98 1018                       		move.b	(a0)+,d0
0000FE9A 6A00                       		bpl.s	loc_DA80
0000FE9C 0200 007F                  		andi.b	#$7F,d0
0000FEA0 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FEA4                            
0000FEA4                            loc_DA80:
0000FEA4 1280                       		move.b	d0,0(a1)
0000FEA6 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FEAA 7000                       		moveq	#0,d0
0000FEAC                            
0000FEAC                            locret_DA8A:
0000FEAC 4E75                       		rts	
0000FEAE                            
0000FEAE                            		include	"_incObj\sub FindFreeObj.asm"
0000FEAE                            ; ---------------------------------------------------------------------------
0000FEAE                            ; Subroutine to find a free object space
0000FEAE                            
0000FEAE                            ; output:
0000FEAE                            ;	a1 = free position in object RAM
0000FEAE                            ; ---------------------------------------------------------------------------
0000FEAE                            
0000FEAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FEAE                            
0000FEAE                            
0000FEAE                            FindFreeObj:
0000FEAE 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FEB2 303C 005F                  		move.w	#$5F,d0
0000FEB6                            
0000FEB6                            	FFree_Loop:
0000FEB6 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FEB8 6700                       		beq.s	FFree_Found	; if yes, branch
0000FEBA 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FEBE 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FEC2                            
0000FEC2                            	FFree_Found:
0000FEC2 4E75                       		rts	
0000FEC4                            
0000FEC4                            ; End of function FindFreeObj
0000FEC4                            
0000FEC4                            
0000FEC4                            ; ---------------------------------------------------------------------------
0000FEC4                            ; Subroutine to find a free object space AFTER the current one
0000FEC4                            
0000FEC4                            ; output:
0000FEC4                            ;	a1 = free position in object RAM
0000FEC4                            ; ---------------------------------------------------------------------------
0000FEC4                            
0000FEC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FEC4                            
0000FEC4                            
0000FEC4                            FindNextFreeObj:
0000FEC4 2248                       		movea.l	a0,a1
0000FEC6 303C F000                  		move.w	#$F000,d0
0000FECA 9048                       		sub.w	a0,d0
0000FECC EC48                       		lsr.w	#6,d0
0000FECE 5340                       		subq.w	#1,d0
0000FED0 6500                       		bcs.s	NFree_Found
0000FED2                            
0000FED2                            	NFree_Loop:
0000FED2 4A11                       		tst.b	(a1)
0000FED4 6700                       		beq.s	NFree_Found
0000FED6 43E9 0040                  		lea	$40(a1),a1
0000FEDA 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FEDE                            
0000FEDE                            	NFree_Found:
0000FEDE 4E75                       		rts	
0000FEE0                            
0000FEE0                            ; End of function FindNextFreeObj
0000FEE0                            ; End of function FindNextFreeObj
0000FEE0                            		include	"_incObj\41 Springs.asm"
0000FEE0                            ; ---------------------------------------------------------------------------
0000FEE0                            ; Object 41 - springs
0000FEE0                            ; ---------------------------------------------------------------------------
0000FEE0                            
0000FEE0                            Springs:
0000FEE0 7000                       		moveq	#0,d0
0000FEE2 1028 0024                  		move.b	obRoutine(a0),d0
0000FEE6 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FEEA 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FEEE 6100 FB32                  		bsr.w	DisplaySprite
0000FF10 4E75                       		rts	
0000FF12                            ; ===========================================================================
0000FF12 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FF14 0000                       		dc.w Spring_Up-Spring_Index
0000FF16 0000                       		dc.w Spring_AniUp-Spring_Index
0000FF18 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FF1A 0000                       		dc.w Spring_LR-Spring_Index
0000FF1C 0000                       		dc.w Spring_AniLR-Spring_Index
0000FF1E 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FF20 0000                       		dc.w Spring_Dwn-Spring_Index
0000FF22 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FF24 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FF26                            
0000FF26 =00000030                  spring_pow:	equ $30			; power of current spring
0000FF26                            
0000FF26 F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FF28 F600                       		dc.w -$A00		; power	of yellow spring
0000FF2A                            ; ===========================================================================
0000FF2A                            
0000FF2A                            Spring_Main:	; Routine 0
0000FF2A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF2E 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FF36 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FF3C 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FF42 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FF48 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FF4E 1028 0028                  		move.b	obSubtype(a0),d0
0000FF52 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FF56 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FF58                            
0000FF58 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FF5E 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FF64 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FF6A 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FF70 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FF76                            
0000FF76                            	Spring_NotLR:
0000FF76 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FF7A 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FF7C                            
0000FF7C 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FF82 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FF88                            
0000FF88                            	Spring_NotDwn:
0000FF88 0800 0001                  		btst	#1,d0
0000FF8C 6700                       		beq.s	loc_DB72
0000FF8E 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FF94                            
0000FF94                            loc_DB72:
0000FF94 0240 000F                  		andi.w	#$F,d0
0000FF98 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FF9E 4E75                       		rts	
0000FFA0                            ; ===========================================================================
0000FFA0                            
0000FFA0                            Spring_Up:	; Routine 2
0000FFA0 323C 001B                  		move.w	#$1B,d1
0000FFA4 343C 0008                  		move.w	#8,d2
0000FFA8 363C 0010                  		move.w	#$10,d3
0000FFAC 3828 0008                  		move.w	obX(a0),d4
0000FFB0 6100 0000                  		bsr.w	SolidObject
0000FFB4 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FFB8 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FFBA 4E75                       		rts	
0000FFBC                            ; ===========================================================================
0000FFBC                            
0000FFBC                            Spring_BounceUp:
0000FFBC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FFC0 5069 000C                  		addq.w	#8,obY(a1)
0000FFC4 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FFCA 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FFD0 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FFD6 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FFDC 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FFE2 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FFE8 4228 0025                  		clr.b	obSolid(a0)
0000FFF6                            
0000FFF6                            Spring_AniUp:	; Routine 4
0000FFF6 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FFFC 6000 CAE6                  		bra.w	AnimateSprite
00010000                            ; ===========================================================================
00010000                            
00010000                            Spring_ResetUp:	; Routine 6
00010000 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
00010006 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0001000A 4E75                       		rts	
0001000C                            ; ===========================================================================
0001000C                            
0001000C                            Spring_LR:	; Routine 8
0001000C 323C 0013                  		move.w	#$13,d1
00010010 343C 000E                  		move.w	#$E,d2
00010014 363C 000F                  		move.w	#$F,d3
00010018 3828 0008                  		move.w	obX(a0),d4
0001001C 6100 0000                  		bsr.w	SolidObject
00010020 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00010026 6600                       		bne.s	loc_DC0C
00010028 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001002E                            
0001002E                            loc_DC0C:
0001002E 0828 0005 0022             		btst	#5,obStatus(a0)
00010034 6600                       		bne.s	Spring_BounceLR
00010036 4E75                       		rts	
00010038                            ; ===========================================================================
00010038                            
00010038                            Spring_BounceLR:
00010038 5428 0024                  		addq.b	#2,obRoutine(a0)
0001003C 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
00010042 5069 0008                  		addq.w	#8,obX(a1)
00010046 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0001004C 6600                       		bne.s	Spring_Flipped	; if yes, branch
0001004E 0469 0010 0008             		subi.w	#$10,obX(a1)
00010054 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
00010058                            
00010058                            	Spring_Flipped:
00010058 337C 000F 003E             		move.w	#$F,$3E(a1)
0001005E 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00010064 0869 0000 0022             		bchg	#0,obStatus(a1)
0001006A 0829 0002 0022             		btst	#2,obStatus(a1)
00010070 6600                       		bne.s	loc_DC56
00010072 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00010078                            
00010078                            loc_DC56:
00010078 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001007E 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001008E                            
0001008E                            Spring_AniLR:	; Routine $A
0001008E 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
00010092 43F9 0000 0000             		lea	(Ani_Spring).l,a1
00010098 6000 CA4A                  		bra.w	AnimateSprite
0001009C                            ; ===========================================================================
0001009C                            
0001009C                            Spring_ResetLR:	; Routine $C
0001009C 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
000100A2 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
000100A6 4E75                       		rts	
000100A8                            ; ===========================================================================
000100A8                            
000100A8                            Spring_Dwn:	; Routine $E
000100A8 323C 001B                  		move.w	#$1B,d1
000100AC 343C 0008                  		move.w	#8,d2
000100B0 363C 0010                  		move.w	#$10,d3
000100B4 3828 0008                  		move.w	obX(a0),d4
000100B8 6100 0000                  		bsr.w	SolidObject
000100BC 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
000100C2 6600                       		bne.s	loc_DCA4
000100C4 117C 000E 0024             		move.b	#$E,obRoutine(a0)
000100CA                            
000100CA                            loc_DCA4:
000100CA 4A28 0025                  		tst.b	obSolid(a0)
000100CE 6600                       		bne.s	locret_DCAE
000100D0 4A44                       		tst.w	d4
000100D2 6B00                       		bmi.s	Spring_BounceDwn
000100D4                            
000100D4                            locret_DCAE:
000100D4 4E75                       		rts	
000100D6                            ; ===========================================================================
000100D6                            
000100D6                            Spring_BounceDwn:
000100D6 5428 0024                  		addq.b	#2,obRoutine(a0)
000100DA 5169 000C                  		subq.w	#8,obY(a1)
000100DE 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
000100E4 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
000100E8 08E9 0001 0022             		bset	#1,obStatus(a1)
000100EE 08A9 0003 0022             		bclr	#3,obStatus(a1)
000100F4 137C 0002 0024             		move.b	#2,obRoutine(a1)
000100FA 08A8 0003 0022             		bclr	#3,obStatus(a0)
00010100 4228 0025                  		clr.b	obSolid(a0)
0001010E                            
0001010E                            Spring_AniDwn:	; Routine $10
0001010E 43F9 0000 0000             		lea	(Ani_Spring).l,a1
00010114 6000 C9CE                  		bra.w	AnimateSprite
00010118                            ; ===========================================================================
00010118                            
00010118                            Spring_ResetDwn:
00010118                            		; Routine $12
00010118 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0001011E 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
00010122 4E75                       		rts	
00010122 4E75                       		rts	
00010124                            		include	"_anim\Springs.asm"
00010124                            ; ---------------------------------------------------------------------------
00010124                            ; Animation script - springs
00010124                            ; ---------------------------------------------------------------------------
00010124 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
00010126 0000                       		dc.w byte_DD0E-Ani_Spring
00010128 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
00010134 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
00010140                            		even
00010140                            		even
00010140                            Map_Spring:	include	"_maps\Springs.asm"
00010140                            ; ---------------------------------------------------------------------------
00010140                            ; Sprite mappings - springs
00010140                            ; ---------------------------------------------------------------------------
00010140                            Map_Spring_internal:
00010140 0000                       		dc.w M_Spg_Up-Map_Spring_internal
00010142 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
00010144 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
00010146 0000                       		dc.w M_Spg_Left-Map_Spring_internal
00010148 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0001014A 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0001014C 02                         M_Spg_Up:	dc.b 2			; facing up
0001014D F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
00010152 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
00010157 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
00010158 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0001015D 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0001015E E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
00010163 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010168 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0001016D 01                         M_Spg_Left:	dc.b 1			; facing left
0001016E F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00010173 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
00010174 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
00010179 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0001017A F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0001017F F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
00010184 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
00010189 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0001018E                            		even
0001018E                            		even
0001018E                            
0001018E                            		include	"_incObj\42 Newtron.asm"
0001018E                            ; ---------------------------------------------------------------------------
0001018E                            ; Object 42 - Newtron enemy (GHZ)
0001018E                            ; ---------------------------------------------------------------------------
0001018E                            
0001018E                            Newtron:
0001018E 7000                       		moveq	#0,d0
00010190 1028 0024                  		move.b	obRoutine(a0),d0
00010194 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
00010198 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
0001019C                            ; ===========================================================================
0001019C 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
0001019E 0000                       		dc.w Newt_Action-Newt_Index
000101A0 0000                       		dc.w Newt_Delete-Newt_Index
000101A2                            ; ===========================================================================
000101A2                            
000101A2                            Newt_Main:	; Routine 0
000101A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000101A6 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
000101AE 317C 049B 0002             		move.w	#$49B,obGfx(a0)
000101B4 117C 0004 0001             		move.b	#4,obRender(a0)
000101BA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000101C0 117C 0014 0014             		move.b	#$14,obActWid(a0)
000101C6 117C 0010 0016             		move.b	#$10,obHeight(a0)
000101CC 117C 0008 0017             		move.b	#8,obWidth(a0)
000101D2                            
000101D2                            Newt_Action:	; Routine 2
000101D2 7000                       		moveq	#0,d0
000101D4 1028 0025                  		move.b	ob2ndRout(a0),d0
000101D8 323B 0000                  		move.w	@index(pc,d0.w),d1
000101DC 4EBB 1000                  		jsr	@index(pc,d1.w)
000101E0 43F9 0000 0000             		lea	(Ani_Newt).l,a1
000101E6 6100 C8FC                  		bsr.w	AnimateSprite
000101EA 6000 0000                  		bra.w	RememberState
000101EE                            ; ===========================================================================
000101EE 0000                       @index:		dc.w @chkdistance-@index
000101F0 0000                       		dc.w @type00-@index
000101F2 0000                       		dc.w @matchfloor-@index
000101F4 0000                       		dc.w @speed-@index
000101F6 0000                       		dc.w @type01-@index
000101F8                            ; ===========================================================================
000101F8                            
000101F8                            @chkdistance:
000101F8 08E8 0000 0022             		bset	#0,obStatus(a0)
000101FE 3038 D008                  		move.w	(v_player+obX).w,d0
00010202 9068 0008                  		sub.w	obX(a0),d0
00010206 6400                       		bcc.s	@sonicisright
00010208 4440                       		neg.w	d0
0001020A 08A8 0000 0022             		bclr	#0,obStatus(a0)
00010210                            
00010210                            	@sonicisright:
00010210 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
00010214 6400                       		bcc.s	@outofrange	; if not, branch
00010216 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0001021A 117C 0001 001C             		move.b	#1,obAnim(a0)
00010220 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
00010224 6700                       		beq.s	@istype00	; if type is 00, branch
00010226                            
00010226 317C 249B 0002             		move.w	#$249B,obGfx(a0)
0001022C 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
00010232 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
00010238                            
00010238                            	@outofrange:
00010238                            	@istype00:
00010238 4E75                       		rts	
0001023A                            ; ===========================================================================
0001023A                            
0001023A                            @type00:
0001023A 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
00010240 6400                       		bcc.s	@fall		; is yes, branch
00010242 08E8 0000 0022             		bset	#0,obStatus(a0)
00010248 3038 D008                  		move.w	(v_player+obX).w,d0
0001024C 9068 0008                  		sub.w	obX(a0),d0
00010250 6400                       		bcc.s	@sonicisright2
00010252 08A8 0000 0022             		bclr	#0,obStatus(a0)
00010258                            
00010258                            	@sonicisright2:
00010258 4E75                       		rts	
0001025A                            ; ===========================================================================
0001025A                            
0001025A                            	@fall:
0001025A 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
00010260 6600                       		bne.s	@loc_DE42
00010262 117C 000C 0020             		move.b	#$C,obColType(a0)
00010268                            
00010268                            	@loc_DE42:
00010268 6100 F76C                  		bsr.w	ObjectFall
0001026C 6100 0000                  		bsr.w	ObjFloorDist
00010270 4A41                       		tst.w	d1		; has newtron hit the floor?
00010272 6A00                       		bpl.s	@keepfalling	; if not, branch
00010274                            
00010274 D368 000C                  		add.w	d1,obY(a0)
00010278 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
0001027E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010282 117C 0002 001C             		move.b	#2,obAnim(a0)
00010288 0828 0005 0002             		btst	#5,obGfx(a0)
0001028E 6700                       		beq.s	@pppppppp
00010290 5228 001C                  		addq.b	#1,obAnim(a0)
00010294                            
00010294                            	@pppppppp:
00010294 117C 000D 0020             		move.b	#$D,obColType(a0)
0001029A 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
000102A0 0828 0000 0022             		btst	#0,obStatus(a0)
000102A6 6600                       		bne.s	@keepfalling
000102A8 4468 0010                  		neg.w	obVelX(a0)
000102AC                            
000102AC                            	@keepfalling:
000102AC 4E75                       		rts	
000102AE                            ; ===========================================================================
000102AE                            
000102AE                            @matchfloor:
000102AE 6100 F75E                  		bsr.w	SpeedToPos
000102B2 6100 0000                  		bsr.w	ObjFloorDist
000102B6 0C41 FFF8                  		cmpi.w	#-8,d1
000102BA 6D00                       		blt.s	@nextroutine
000102BC 0C41 000C                  		cmpi.w	#$C,d1
000102C0 6C00                       		bge.s	@nextroutine
000102C2 D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
000102C6 4E75                       		rts	
000102C8                            ; ===========================================================================
000102C8                            
000102C8                            	@nextroutine:
000102C8 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
000102CC 4E75                       		rts	
000102CE                            ; ===========================================================================
000102CE                            
000102CE                            @speed:
000102CE 6100 F73E                  		bsr.w	SpeedToPos
000102D2 4E75                       		rts	
000102D4                            ; ===========================================================================
000102D4                            
000102D4                            @type01:
000102D4 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
000102DA 6600                       		bne.s	@firemissile
000102DC 117C 000C 0020             		move.b	#$C,obColType(a0)
000102E2                            
000102E2                            	@firemissile:
000102E2 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
000102E8 6600                       		bne.s	@fail
000102EA 4A28 0032                  		tst.b	$32(a0)
000102EE 6600                       		bne.s	@fail
000102F0 117C 0001 0032             		move.b	#1,$32(a0)
000102F6 6100 FBB6                  		bsr.w	FindFreeObj
000102FA 6600                       		bne.s	@fail
000102FC 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
00010300 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010306 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001030C 5169 000C                  		subq.w	#8,obY(a1)
00010310 337C 0200 0010             		move.w	#$200,obVelX(a1)
00010316 303C 0014                  		move.w	#$14,d0
0001031A 0828 0000 0022             		btst	#0,obStatus(a0)
00010320 6600                       		bne.s	@noflip
00010322 4440                       		neg.w	d0
00010324 4469 0010                  		neg.w	obVelX(a1)
00010328                            
00010328                            	@noflip:
00010328 D169 0008                  		add.w	d0,obX(a1)
0001032C 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00010332 137C 0001 0028             		move.b	#1,obSubtype(a1)
00010338                            
00010338                            	@fail:
00010338 4E75                       		rts	
0001033A                            ; ===========================================================================
0001033A                            
0001033A                            Newt_Delete:	; Routine 4
0001033A 6000 F726                  		bra.w	DeleteObject
0001033A 6000 F726                  		bra.w	DeleteObject
0001033E                            		include	"_anim\Newtron.asm"
0001033E                            ; ---------------------------------------------------------------------------
0001033E                            ; Animation script - Newtron enemy
0001033E                            ; ---------------------------------------------------------------------------
0001033E 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
00010340 0000                       		dc.w A_Newt_Drop-Ani_Newt
00010342 0000                       		dc.w A_Newt_Fly1-Ani_Newt
00010344 0000                       		dc.w A_Newt_Fly2-Ani_Newt
00010346 0000                       		dc.w A_Newt_Fires-Ani_Newt
00010348 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
0001034C 00                         		even
0001034C 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
00010354 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
00010358 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
0001035C 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
00010366 00                         		even
00010366 00                         		even
00010366                            Map_Newt:	include	"_maps\Newtron.asm"
00010366                            ; ---------------------------------------------------------------------------
00010366                            ; Sprite mappings - Newtron enemy (GHZ)
00010366                            ; ---------------------------------------------------------------------------
00010366                            Map_Newt_internal:
00010366 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
00010368 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
0001036A 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
0001036C 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
0001036E 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
00010370 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
00010372 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
00010374 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
00010376 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
00010378 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
0001037A 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
0001037C 03                         M_Newt_Trans:	dc.b 3
0001037D EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
00010382 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
00010387 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0001038C 03                         M_Newt_Norm:	dc.b 3
0001038D EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
00010392 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010397 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0001039C 03                         M_Newt_Fires:	dc.b 3
0001039D EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
000103A2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000103A7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
000103AC 04                         M_Newt_Drop1:	dc.b 4
000103AD EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
000103B2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000103B7 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
000103BC 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
000103C1 03                         M_Newt_Drop2:	dc.b 3
000103C2 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
000103C7 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
000103CC 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
000103D1 02                         M_Newt_Drop3:	dc.b 2
000103D2 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000103D7 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000103DC 03                         M_Newt_Fly1a:	dc.b 3
000103DD F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
000103E2 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000103E7 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
000103EC 03                         M_Newt_Fly1b:	dc.b 3
000103ED F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000103F2 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000103F7 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
000103FC 03                         M_Newt_Fly2a:	dc.b 3
000103FD F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010402 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010407 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0001040C 03                         M_Newt_Fly2b:	dc.b 3
0001040D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010412 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010417 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0001041C 00                         M_Newt_Blank:	dc.b 0
0001041E 00                         		even
0001041E 00                         		even
0001041E                            		include	"_incObj\43 Roller.asm"
0001041E                            ; ---------------------------------------------------------------------------
0001041E                            ; Object 43 - Roller enemy (SYZ)
0001041E                            ; ---------------------------------------------------------------------------
0001041E                            
0001041E                            Roller:
0001041E 7000                       		moveq	#0,d0
00010420 1028 0024                  		move.b	obRoutine(a0),d0
00010424 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
00010428 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
0001042C                            ; ===========================================================================
0001042C 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
0001042E 0000                       		dc.w Roll_Action-Roll_Index
00010430                            ; ===========================================================================
00010430                            
00010430                            Roll_Main:	; Routine 0
00010430 117C 000E 0016             		move.b	#$E,obHeight(a0)
00010436 117C 0008 0017             		move.b	#8,obWidth(a0)
0001043C 6100 F598                  		bsr.w	ObjectFall
00010440 6100 0000                  		bsr.w	ObjFloorDist
00010444 4A41                       		tst.w	d1
00010446 6A00                       		bpl.s	locret_E052
00010448 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
0001044C 317C 0000 0012             		move.w	#0,obVelY(a0)
00010452 5428 0024                  		addq.b	#2,obRoutine(a0)
00010456 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
0001045E 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
00010464 117C 0004 0001             		move.b	#4,obRender(a0)
0001046A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010470 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010476                            
00010476                            	locret_E052:
00010476 4E75                       		rts	
00010478                            ; ===========================================================================
00010478                            
00010478                            Roll_Action:	; Routine 2
00010478 7000                       		moveq	#0,d0
0001047A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001047E 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
00010482 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
00010486 43F9 0000 0000             		lea	(Ani_Roll).l,a1
0001048C 6100 C656                  		bsr.w	AnimateSprite
00010490 3028 0008                  		move.w	obX(a0),d0
00010494 0240 FF80                  		andi.w	#$FF80,d0
00010498 3238 F700                  		move.w	(v_screenposx).w,d1
0001049C 0441 0080                  		subi.w	#$80,d1
000104A0 0241 FF80                  		andi.w	#$FF80,d1
000104A4 9041                       		sub.w	d1,d0
000104A6 0C40 0280                  		cmpi.w	#$280,d0
000104AA 6E00 0000                  		bgt.w	Roll_ChkGone
000104AE 6000 F572                  		bra.w	DisplaySprite
000104B2                            ; ===========================================================================
000104B2                            
000104B2                            Roll_ChkGone:
000104B2 45F8 FC00                  		lea	(v_objstate).w,a2
000104B6 7000                       		moveq	#0,d0
000104B8 1028 0023                  		move.b	obRespawnNo(a0),d0
000104BC 6700                       		beq.s	Roll_Delete
000104BE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000104C4                            
000104C4                            Roll_Delete:
000104C4 6000 F59C                  		bra.w	DeleteObject
000104C8                            ; ===========================================================================
000104C8 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
000104CA 0000                       		dc.w Roll_RollNoChk-Roll_Index2
000104CC 0000                       		dc.w Roll_ChkJump-Roll_Index2
000104CE 0000                       		dc.w Roll_MatchFloor-Roll_Index2
000104D0                            ; ===========================================================================
000104D0                            
000104D0                            Roll_RollChk:
000104D0 3038 D008                  		move.w	(v_player+obX).w,d0
000104D4 0440 0100                  		subi.w	#$100,d0
000104D8 6500                       		bcs.s	loc_E0D2
000104DA 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
000104DE 6500                       		bcs.s	loc_E0D2
000104E0 5828 0025                  		addq.b	#4,ob2ndRout(a0)
000104E4 117C 0002 001C             		move.b	#2,obAnim(a0)
000104EA 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
000104F0 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
000104F6                            
000104F6                            loc_E0D2:
000104F6 588F                       		addq.l	#4,sp
000104F8 4E75                       		rts	
000104FA                            ; ===========================================================================
000104FA                            
000104FA                            Roll_RollNoChk:
000104FA 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
00010500 6700                       		beq.s	loc_E0F8
00010502 5368 0030                  		subq.w	#1,$30(a0)
00010506 6A00                       		bpl.s	locret_E0F6
00010508 117C 0001 001C             		move.b	#1,obAnim(a0)
0001050E 317C 0700 0010             		move.w	#$700,obVelX(a0)
00010514 117C 008E 0020             		move.b	#$8E,obColType(a0)
0001051A                            
0001051A                            locret_E0F6:
0001051A 4E75                       		rts	
0001051C                            ; ===========================================================================
0001051C                            
0001051C                            loc_E0F8:
0001051C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010520 4E75                       		rts	
00010522                            ; ===========================================================================
00010522                            
00010522                            Roll_ChkJump:
00010522 6100 0000                  		bsr.w	Roll_Stop
00010526 6100 F4E6                  		bsr.w	SpeedToPos
0001052A 6100 0000                  		bsr.w	ObjFloorDist
0001052E 0C41 FFF8                  		cmpi.w	#-8,d1
00010532 6D00                       		blt.s	Roll_Jump
00010534 0C41 000C                  		cmpi.w	#$C,d1
00010538 6C00                       		bge.s	Roll_Jump
0001053A D368 000C                  		add.w	d1,obY(a0)
0001053E 4E75                       		rts	
00010540                            ; ===========================================================================
00010540                            
00010540                            Roll_Jump:
00010540 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010544 08E8 0000 0032             		bset	#0,$32(a0)
0001054A 6700                       		beq.s	locret_E12E
0001054C 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
00010552                            
00010552                            locret_E12E:
00010552 4E75                       		rts	
00010554                            ; ===========================================================================
00010554                            
00010554                            Roll_MatchFloor:
00010554 6100 F480                  		bsr.w	ObjectFall
00010558 4A68 0012                  		tst.w	obVelY(a0)
0001055C 6B00                       		bmi.s	locret_E150
0001055E 6100 0000                  		bsr.w	ObjFloorDist
00010562 4A41                       		tst.w	d1
00010564 6A00                       		bpl.s	locret_E150
00010566 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
0001056A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001056E 317C 0000 0012             		move.w	#0,obVelY(a0)
00010574                            
00010574                            locret_E150:
00010574 4E75                       		rts	
00010576                            
00010576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010576                            
00010576                            
00010576                            Roll_Stop:
00010576 4A28 0032                  		tst.b	$32(a0)
0001057A 6B00                       		bmi.s	locret_E188
0001057C 3038 D008                  		move.w	(v_player+obX).w,d0
00010580 0440 0030                  		subi.w	#$30,d0
00010584 9068 0008                  		sub.w	obX(a0),d0
00010588 6400                       		bcc.s	locret_E188
0001058A 117C 0000 001C             		move.b	#0,obAnim(a0)
00010590 117C 000E 0020             		move.b	#$E,obColType(a0)
00010596 4268 0010                  		clr.w	obVelX(a0)
0001059A 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
000105A0 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
000105A6 08E8 0007 0032             		bset	#7,$32(a0)
000105AC                            
000105AC                            locret_E188:
000105AC 4E75                       		rts	
000105AE                            ; End of function Roll_Stop
000105AE                            ; End of function Roll_Stop
000105AE                            		include	"_anim\Roller.asm"
000105AE                            ; ---------------------------------------------------------------------------
000105AE                            ; Animation script - Roller enemy
000105AE                            ; ---------------------------------------------------------------------------
000105AE 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
000105B0 0000                       		dc.w A_Roll_Fold-Ani_Roll
000105B2 0000                       		dc.w A_Roll_Roll-Ani_Roll
000105B4 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
000105BA 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
000105C0 00                         		even
000105C0 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
000105C6 00                         		even
000105C6 00                         		even
000105C6                            Map_Roll:	include	"_maps\Roller.asm"
000105C6                            ; --------------------------------------------------------------------------------
000105C6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000105C6                            ; --------------------------------------------------------------------------------
000105C6                            
000105C6                            SME_q3BmU:	
000105C6 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
000105CA 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
000105CE 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
000105D0 02                         SME_q3BmU_A:	dc.b 2	
000105D1 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
000105D6 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
000105DB 02                         SME_q3BmU_15:	dc.b 2	
000105DC E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
000105E1 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
000105E6 01                         SME_q3BmU_20:	dc.b 1	
000105E7 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
000105EC 01                         SME_q3BmU_26:	dc.b 1	
000105ED F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
000105F2 01                         SME_q3BmU_2C:	dc.b 1	
000105F3 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
000105F8                            		even
000105F8                            		even
000105F8                            
000105F8                            		include	"_incObj\44 GHZ Edge Walls.asm"
000105F8                            ; ---------------------------------------------------------------------------
000105F8                            ; Object 44 - edge walls (GHZ)
000105F8                            ; ---------------------------------------------------------------------------
000105F8                            
000105F8                            EdgeWalls:
000105F8 7000                       		moveq	#0,d0
000105FA 1028 0024                  		move.b	obRoutine(a0),d0
000105FE 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
00010602 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
00010606                            ; ===========================================================================
00010606 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
00010608 0000                       		dc.w Edge_Solid-Edge_Index
0001060A 0000                       		dc.w Edge_Display-Edge_Index
0001060C                            ; ===========================================================================
0001060C                            
0001060C                            Edge_Main:	; Routine 0
0001060C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010610 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
00010618 317C 434C 0002             		move.w	#$434C,obGfx(a0)
0001061E 0028 0004 0001             		ori.b	#4,obRender(a0)
00010624 117C 0008 0014             		move.b	#8,obActWid(a0)
0001062A 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010630 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
00010636 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
0001063C 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
0001063E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010642 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
00010644                            ; ===========================================================================
00010644                            
00010644                            Edge_Solid:	; Routine 2
00010644 323C 0013                  		move.w	#$13,d1
00010648 343C 0028                  		move.w	#$28,d2
0001064C 6100 A146                  		bsr.w	Obj44_SolidWall
00010650                            
00010650                            Edge_Display:	; Routine 4
00010650 6100 F3D0                  		bsr.w	DisplaySprite
00010672 4E75                       		rts	
00010672 4E75                       		rts	
00010674                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
00010674                            ; ---------------------------------------------------------------------------
00010674                            ; Sprite mappings - walls (GHZ)
00010674                            ; ---------------------------------------------------------------------------
00010674                            Map_Edge_internal:
00010674 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
00010676 0000                       		dc.w M_Edge_Light-Map_Edge_internal
00010678 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
0001067A 04                         M_Edge_Shadow:	dc.b 4
0001067B E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
00010680 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010685 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0001068A 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0001068F 04                         M_Edge_Light:	dc.b 4
00010690 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
00010695 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0001069A 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0001069F 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000106A4 04                         M_Edge_Dark:	dc.b 4
000106A5 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
000106AA F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
000106AF 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
000106B4 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
000106BA 00                         		even
000106BA 00                         		even
000106BA                            
000106BA                            		include	"_incObj\13 Lava Ball Maker.asm"
000106BA                            ; ---------------------------------------------------------------------------
000106BA                            ; Object 13 - lava ball	maker (MZ, SLZ)
000106BA                            ; ---------------------------------------------------------------------------
000106BA                            
000106BA                            LavaMaker:
000106BA 7000                       		moveq	#0,d0
000106BC 1028 0024                  		move.b	obRoutine(a0),d0
000106C0 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
000106C4 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
000106C8 6000 0000                  		bra.w	LBall_ChkDel
000106CC                            ; ===========================================================================
000106CC 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
000106CE 0000                       		dc.w LavaM_MakeLava-LavaM_Index
000106D0                            ; ---------------------------------------------------------------------------
000106D0                            ;
000106D0                            ; Lava ball production rates
000106D0                            ;
000106D0 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
000106D6                            ; ===========================================================================
000106D6                            
000106D6                            LavaM_Main:	; Routine 0
000106D6 5428 0024                  		addq.b	#2,obRoutine(a0)
000106DA 1028 0028                  		move.b	obSubtype(a0),d0
000106DE E848                       		lsr.w	#4,d0
000106E0 0240 000F                  		andi.w	#$F,d0
000106E4 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
000106EA 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
000106F0 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000106F6                            
000106F6                            LavaM_MakeLava:	; Routine 2
000106F6 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
000106FA 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
000106FC 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
00010702 6100 F59E                  		bsr.w	ChkObjectVisible
00010706 6600                       		bne.s	LavaM_Wait
00010708 6100 F7A4                  		bsr.w	FindFreeObj
0001070C 6600                       		bne.s	LavaM_Wait
0001070E 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
00010712 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010718 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001071E 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010724                            
00010724                            	LavaM_Wait:
00010724 4E75                       		rts	
00010724 4E75                       		rts	
00010726                            		include	"_incObj\14 Lava Ball.asm"
00010726                            ; ---------------------------------------------------------------------------
00010726                            ; Object 14 - lava balls (MZ, SLZ)
00010726                            ; ---------------------------------------------------------------------------
00010726                            
00010726                            LavaBall:
00010726 7000                       		moveq	#0,d0
00010728 1028 0024                  		move.b	obRoutine(a0),d0
0001072C 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
00010730 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
00010734 6000 F2EC                  		bra.w	DisplaySprite
00010738                            ; ===========================================================================
00010738 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
0001073A 0000                       		dc.w LBall_Action-LBall_Index
0001073C 0000                       		dc.w LBall_Delete-LBall_Index
0001073E                            
0001073E FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
00010748 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
00010750                            ; ===========================================================================
00010750                            
00010750                            LBall_Main:	; Routine 0
00010750 5428 0024                  		addq.b	#2,obRoutine(a0)
00010754 117C 0008 0016             		move.b	#8,obHeight(a0)
0001075A 117C 0008 0017             		move.b	#8,obWidth(a0)
00010760 217C 0000 D736 0004        		move.l	#Map_Fire,obMap(a0)
00010768 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001076E 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
00010774 6600                       		bne.s	@notSLZ
00010776 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
0001077C                            
0001077C                            	@notSLZ:
0001077C 117C 0004 0001             		move.b	#4,obRender(a0)
00010782 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010788 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001078E 3168 000C 0030             		move.w	obY(a0),$30(a0)
00010794 4A28 0029                  		tst.b	$29(a0)
00010798 6700                       		beq.s	@speed
0001079A 5428 0018                  		addq.b	#2,obPriority(a0)
0001079E                            
0001079E                            	@speed:
0001079E 7000                       		moveq	#0,d0
000107A0 1028 0028                  		move.b	obSubtype(a0),d0
000107A4 D040                       		add.w	d0,d0
000107A6 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
000107AC 117C 0008 0014             		move.b	#8,obActWid(a0)
000107B2 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
000107B8 6500                       		bcs.s	@sound		; if yes, branch
000107BA                            
000107BA 117C 0010 0014             		move.b	#$10,obActWid(a0)
000107C0 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
000107C6 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
000107CC 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
000107D2                            
000107D2                            	@sound:
000107DC                            
000107DC                            LBall_Action:	; Routine 2
000107DC 7000                       		moveq	#0,d0
000107DE 1028 0028                  		move.b	obSubtype(a0),d0
000107E2 D040                       		add.w	d0,d0
000107E4 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
000107E8 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
000107EC 6100 F220                  		bsr.w	SpeedToPos
000107F0 43F9 0000 0000             		lea	(Ani_Fire).l,a1
000107F6 6100 C2EC                  		bsr.w	AnimateSprite
000107FA                            
000107FA                            LBall_ChkDel:
00010818 4E75                       		rts	
0001081A                            ; ===========================================================================
0001081A 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
0001081E 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010822 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
00010826 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
0001082A 0000                       		dc.w LBall_Type08-LBall_TypeIndex
0001082C                            ; ===========================================================================
0001082C                            ; lavaball types 00-03 fly up and fall back down
0001082C                            
0001082C                            LBall_Type00:
0001082C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
00010832 3028 0030                  		move.w	$30(a0),d0
00010836 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
0001083A 6400                       		bcc.s	loc_E41E	; if not, branch
0001083C 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
00010840                            
00010840                            loc_E41E:
00010840 08A8 0001 0022             		bclr	#1,obStatus(a0)
00010846 4A68 0012                  		tst.w	obVelY(a0)
0001084A 6A00                       		bpl.s	locret_E430
0001084C 08E8 0001 0022             		bset	#1,obStatus(a0)
00010852                            
00010852                            locret_E430:
00010852 4E75                       		rts	
00010854                            ; ===========================================================================
00010854                            ; lavaball type	04 flies up until it hits the ceiling
00010854                            
00010854                            LBall_Type04:
00010854 08E8 0001 0022             		bset	#1,obStatus(a0)
0001085A 6100 0000                  		bsr.w	ObjHitCeiling
0001085E 4A41                       		tst.w	d1
00010860 6A00                       		bpl.s	locret_E452
00010862 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010868 117C 0001 001C             		move.b	#1,obAnim(a0)
0001086E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
00010874                            
00010874                            locret_E452:
00010874 4E75                       		rts	
00010876                            ; ===========================================================================
00010876                            ; lavaball type	05 falls down until it hits the	floor
00010876                            
00010876                            LBall_Type05:
00010876 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001087C 6100 0000                  		bsr.w	ObjFloorDist
00010880 4A41                       		tst.w	d1
00010882 6A00                       		bpl.s	locret_E474
00010884 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001088A 117C 0001 001C             		move.b	#1,obAnim(a0)
00010890 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
00010896                            
00010896                            locret_E474:
00010896 4E75                       		rts	
00010898                            ; ===========================================================================
00010898                            ; lavaball types 06-07 move sideways
00010898                            
00010898                            LBall_Type06:
00010898 08E8 0000 0022             		bset	#0,obStatus(a0)
0001089E 76F8                       		moveq	#-8,d3
000108A0 6100 0000                  		bsr.w	ObjHitWallLeft
000108A4 4A41                       		tst.w	d1
000108A6 6A00                       		bpl.s	locret_E498
000108A8 117C 0008 0028             		move.b	#8,obSubtype(a0)
000108AE 117C 0003 001C             		move.b	#3,obAnim(a0)
000108B4 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000108BA                            
000108BA                            locret_E498:
000108BA 4E75                       		rts	
000108BC                            ; ===========================================================================
000108BC                            
000108BC                            LBall_Type07:
000108BC 08A8 0000 0022             		bclr	#0,obStatus(a0)
000108C2 7608                       		moveq	#8,d3
000108C4 6100 0000                  		bsr.w	ObjHitWallRight
000108C8 4A41                       		tst.w	d1
000108CA 6A00                       		bpl.s	locret_E4BC
000108CC 117C 0008 0028             		move.b	#8,obSubtype(a0)
000108D2 117C 0003 001C             		move.b	#3,obAnim(a0)
000108D8 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000108DE                            
000108DE                            locret_E4BC:
000108DE 4E75                       		rts	
000108E0                            ; ===========================================================================
000108E0                            
000108E0                            LBall_Type08:
000108E0 4E75                       		rts	
000108E2                            ; ===========================================================================
000108E2                            
000108E2                            LBall_Delete:
000108E2 6000 F17E                  		bra.w	DeleteObject
000108E2 6000 F17E                  		bra.w	DeleteObject
000108E6                            		include	"_anim\Fireballs.asm"
000108E6                            ; ---------------------------------------------------------------------------
000108E6                            ; Animation script - lava balls
000108E6                            ; ---------------------------------------------------------------------------
000108E6 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
000108E8 0000                       		dc.w @vertcollide-Ani_Fire
000108EA 0000                       		dc.w @horizontal-Ani_Fire
000108EC 0000                       		dc.w @horicollide-Ani_Fire
000108EE 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
000108F4 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
000108F8 00                         		even
000108F8 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
000108FE 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
00010902 00                         		even
00010902 00                         		even
00010902                            
00010902                            		include	"_incObj\6D Flamethrower.asm"
00010902                            ; ---------------------------------------------------------------------------
00010902                            ; Object 6D - flame thrower (SBZ)
00010902                            ; ---------------------------------------------------------------------------
00010902                            
00010902                            Flamethrower:
00010902 7000                       		moveq	#0,d0
00010904 1028 0024                  		move.b	obRoutine(a0),d0
00010908 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
0001090C 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
00010910                            ; ===========================================================================
00010910 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
00010912 0000                       		dc.w Flame_Action-Flame_Index
00010914                            ; ===========================================================================
00010914                            
00010914                            Flame_Main:	; Routine 0
00010914 5428 0024                  		addq.b	#2,obRoutine(a0)
00010918 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
00010920 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
00010926 0028 0004 0001             		ori.b	#4,obRender(a0)
0001092C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010932 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
00010938 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001093E 1028 0028                  		move.b	obSubtype(a0),d0
00010942 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
00010946 D040                       		add.w	d0,d0		; multiply by 2
00010948 3140 0030                  		move.w	d0,$30(a0)
0001094C 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
00010950 1028 0028                  		move.b	obSubtype(a0),d0
00010954 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
00010958 EB48                       		lsl.w	#5,d0		; multiply by $20
0001095A 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0001095E 117C 000A 0036             		move.b	#$A,$36(a0)
00010964 0828 0001 0022             		btst	#1,obStatus(a0)
0001096A 6700                       		beq.s	Flame_Action
0001096C 117C 0002 001C             		move.b	#2,obAnim(a0)
00010972 117C 0015 0036             		move.b	#$15,$36(a0)
00010978                            
00010978                            Flame_Action:	; Routine 2
00010978 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0001097C 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0001097E 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
00010984 0868 0000 001C             		bchg	#0,obAnim(a0)
0001098A 6700                       		beq.s	loc_E57A
0001098C 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0001099C                            
0001099C                            loc_E57A:
0001099C 43F9 0000 0000             		lea	(Ani_Flame).l,a1
000109A2 6100 C140                  		bsr.w	AnimateSprite
000109A6 117C 0000 0020             		move.b	#0,obColType(a0)
000109AC 1028 0036                  		move.b	$36(a0),d0
000109B0 B028 001A                  		cmp.b	obFrame(a0),d0
000109B4 6600                       		bne.s	Flame_ChkDel
000109B6 117C 00A3 0020             		move.b	#$A3,obColType(a0)
000109BC                            
000109BC                            Flame_ChkDel:
000109DA 6000 F046                  		bra.w	DisplaySprite
000109DA 6000 F046                  		bra.w	DisplaySprite
000109DE                            		include	"_anim\Flamethrower.asm"
000109DE                            ; ---------------------------------------------------------------------------
000109DE                            ; Animation script - flamethrower (SBZ)
000109DE                            ; ---------------------------------------------------------------------------
000109DE 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
000109E0 0000                       		dc.w @pipe2-Ani_Flame
000109E2 0000                       		dc.w @valve1-Ani_Flame
000109E4 0000                       		dc.w @valve2-Ani_Flame
000109E6 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
000109F4 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
000109FE 00                         		even
000109FE 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
00010A0C 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
00010A16 00                         		even
00010A16 00                         		even
00010A16                            Map_Flame:	include	"_maps\Flamethrower.asm"
00010A16                            ; ---------------------------------------------------------------------------
00010A16                            ; Sprite mappings - flame thrower (SBZ)
00010A16                            ; ---------------------------------------------------------------------------
00010A16                            Map_Flame_internal:
00010A16 0000                       		dc.w @pipe1-Map_Flame_internal
00010A18 0000                       		dc.w @pipe2-Map_Flame_internal
00010A1A 0000                       		dc.w @pipe3-Map_Flame_internal
00010A1C 0000                       		dc.w @pipe4-Map_Flame_internal
00010A1E 0000                       		dc.w @pipe5-Map_Flame_internal
00010A20 0000                       		dc.w @pipe6-Map_Flame_internal
00010A22 0000                       		dc.w @pipe7-Map_Flame_internal
00010A24 0000                       		dc.w @pipe8-Map_Flame_internal
00010A26 0000                       		dc.w @pipe9-Map_Flame_internal
00010A28 0000                       		dc.w @pipe10-Map_Flame_internal
00010A2A 0000                       		dc.w @pipe11-Map_Flame_internal
00010A2C 0000                       		dc.w @valve1-Map_Flame_internal
00010A2E 0000                       		dc.w @valve2-Map_Flame_internal
00010A30 0000                       		dc.w @valve3-Map_Flame_internal
00010A32 0000                       		dc.w @valve4-Map_Flame_internal
00010A34 0000                       		dc.w @valve5-Map_Flame_internal
00010A36 0000                       		dc.w @valve6-Map_Flame_internal
00010A38 0000                       		dc.w @valve7-Map_Flame_internal
00010A3A 0000                       		dc.w @valve8-Map_Flame_internal
00010A3C 0000                       		dc.w @valve9-Map_Flame_internal
00010A3E 0000                       		dc.w @valve10-Map_Flame_internal
00010A40 0000                       		dc.w @valve11-Map_Flame_internal
00010A42 01                         @pipe1:		dc.b 1
00010A43 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
00010A48 02                         @pipe2:		dc.b 2
00010A49 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A4E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A53 02                         @pipe3:		dc.b 2
00010A54 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A59 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A5E 03                         @pipe4:		dc.b 3
00010A5F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A64 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A69 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A6E 03                         @pipe5:		dc.b 3
00010A6F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A74 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A79 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A7E 04                         @pipe6:		dc.b 4
00010A7F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A84 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A89 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A8E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A93 04                         @pipe7:		dc.b 4
00010A94 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A99 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A9E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010AA3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010AA8 05                         @pipe8:		dc.b 5
00010AA9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010AAE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AB3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010AB8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010ABD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010AC2 05                         @pipe9:		dc.b 5
00010AC3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010AC8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010ACD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010AD2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010AD7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010ADC 06                         @pipe10:	dc.b 6
00010ADD E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010AE2 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010AE7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AEC 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010AF1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AF6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010AFB 06                         @pipe11:	dc.b 6
00010AFC E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010B01 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010B06 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010B0B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B10 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B15 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010B1A 01                         @valve1:	dc.b 1
00010B1B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
00010B20 02                         @valve2:	dc.b 2
00010B21 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B26 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010B2B 02                         @valve3:	dc.b 2
00010B2C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B31 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B36 03                         @valve4:	dc.b 3
00010B37 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010B3C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B41 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010B46 03                         @valve5:	dc.b 3
00010B47 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B4C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B51 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B56 04                         @valve6:	dc.b 4
00010B57 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010B5C 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010B61 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B66 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010B6B 04                         @valve7:	dc.b 4
00010B6C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010B71 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B76 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B7B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B80 05                         @valve8:	dc.b 5
00010B81 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010B86 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010B8B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010B90 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B95 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010B9A 05                         @valve9:	dc.b 5
00010B9B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010BA0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010BA5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010BAA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010BAF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010BB4 06                         @valve10:	dc.b 6
00010BB5 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010BBA F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010BBF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010BC4 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010BC9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010BCE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010BD3 06                         @valve11:	dc.b 6
00010BD4 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010BD9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010BDE 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010BE3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010BE8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010BED 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010BF2                            		even
00010BF2                            		even
00010BF2                            
00010BF2                            		include	"_incObj\46 MZ Bricks.asm"
00010BF2                            ; ---------------------------------------------------------------------------
00010BF2                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010BF2                            ; ---------------------------------------------------------------------------
00010BF2                            
00010BF2                            MarbleBrick:
00010BF2 7000                       		moveq	#0,d0
00010BF4 1028 0024                  		move.b	obRoutine(a0),d0
00010BF8 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010BFC 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010C00                            ; ===========================================================================
00010C00 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010C02 0000                       		dc.w Brick_Action-Brick_Index
00010C04                            
00010C04 =00000030                  brick_origY:	equ $30
00010C04                            ; ===========================================================================
00010C04                            
00010C04                            Brick_Main:	; Routine 0
00010C04 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C08 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010C0E 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010C14 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010C1C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010C22 117C 0004 0001             		move.b	#4,obRender(a0)
00010C28 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010C2E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010C34 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010C3A 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010C40                            
00010C40                            Brick_Action:	; Routine 2
00010C40 4A28 0001                  		tst.b	obRender(a0)
00010C44 6A00                       		bpl.s	@chkdel
00010C46 7000                       		moveq	#0,d0
00010C48 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010C4C 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010C50 D040                       		add.w	d0,d0
00010C52 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010C56 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010C5A 323C 001B                  		move.w	#$1B,d1
00010C5E 343C 0010                  		move.w	#$10,d2
00010C62 363C 0011                  		move.w	#$11,d3
00010C66 3828 0008                  		move.w	obX(a0),d4
00010C6A 6100 0000                  		bsr.w	SolidObject
00010C6E                            
00010C6E                            	@chkdel:
00010C8C 6000 ED94                  			bra.w	DisplaySprite
00010C90                            ; ===========================================================================
00010C90 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010C92 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010C94 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010C96 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010C98 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010C9A                            ; ===========================================================================
00010C9A                            
00010C9A                            Brick_Type00:
00010C9A 4E75                       		rts	
00010C9C                            ; ===========================================================================
00010C9C                            
00010C9C                            Brick_Type02:
00010C9C 3038 D008                  		move.w	(v_player+obX).w,d0
00010CA0 9068 0008                  		sub.w	obX(a0),d0
00010CA4 6400                       		bcc.s	loc_E888
00010CA6 4440                       		neg.w	d0
00010CA8                            
00010CA8                            loc_E888:
00010CA8 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010CAC 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010CAE 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010CB4                            
00010CB4                            Brick_Type01:
00010CB4 7000                       		moveq	#0,d0
00010CB6 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010CBA 0828 0003 0028             		btst	#3,obSubtype(a0)
00010CC0 6700                       		beq.s	loc_E8A8
00010CC2 4440                       		neg.w	d0
00010CC4 0640 0010                  		addi.w	#$10,d0
00010CC8                            
00010CC8                            loc_E8A8:
00010CC8 3228 0030                  		move.w	brick_origY(a0),d1
00010CCC 9240                       		sub.w	d0,d1
00010CCE 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010CD2 4E75                       		rts	
00010CD4                            ; ===========================================================================
00010CD4                            
00010CD4                            Brick_Type03:
00010CD4 6100 ED38                  		bsr.w	SpeedToPos
00010CD8 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010CDE 6100 0000                  		bsr.w	ObjFloorDist
00010CE2 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010CE4 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010CE8 D368 000C                  		add.w	d1,obY(a0)
00010CEC 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010CF0 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010CF6 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010CFC 3011                       		move.w	(a1),d0
00010CFE 0240 03FF                  		andi.w	#$3FF,d0
00010D02 0C40 016A                  			cmpi.w	#$16A,d0
00010D06 6400                       		bcc.s	locret_E8EE
00010D08 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010D0E                            
00010D0E                            locret_E8EE:
00010D0E 4E75                       		rts	
00010D10                            ; ===========================================================================
00010D10                            
00010D10                            Brick_Type04:
00010D10 7000                       		moveq	#0,d0
00010D12 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010D16 E648                       		lsr.w	#3,d0
00010D18 3228 0030                  		move.w	brick_origY(a0),d1
00010D1C 9240                       		sub.w	d0,d1
00010D1E 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010D22 4E75                       		rts	
00010D22 4E75                       		rts	
00010D24                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010D24                            ; ---------------------------------------------------------------------------
00010D24                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010D24                            ; ---------------------------------------------------------------------------
00010D24                            Map_Brick_internal:
00010D24 0000                       		dc.w @brick-Map_Brick_internal
00010D26 01                         @brick:		dc.b 1
00010D27 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010D2C                            		even
00010D2C                            		even
00010D2C                            
00010D2C                            		include	"_incObj\12 Light.asm"
00010D2C                            ; ---------------------------------------------------------------------------
00010D2C                            ; Object 12 - lamp (SYZ)
00010D2C                            ; ---------------------------------------------------------------------------
00010D2C                            
00010D2C                            SpinningLight:
00010D2C 7000                       		moveq	#0,d0
00010D2E 1028 0024                  		move.b	obRoutine(a0),d0
00010D32 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010D36 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010D3A                            ; ===========================================================================
00010D3A 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010D3C 0000                       		dc.w Light_Animate-Light_Index
00010D3E                            ; ===========================================================================
00010D3E                            
00010D3E                            Light_Main:	; Routine 0
00010D3E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D42 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010D4A 317C 0000 0002             		move.w	#0,obGfx(a0)
00010D50 117C 0004 0001             		move.b	#4,obRender(a0)
00010D56 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010D5C 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010D62                            
00010D62                            Light_Animate:	; Routine 2
00010D62 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010D66 6A00                       		bpl.s	@chkdel
00010D68 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010D6E 5228 001A                  		addq.b	#1,obFrame(a0)
00010D72 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010D78 6500                       		bcs.s	@chkdel
00010D7A 117C 0000 001A             		move.b	#0,obFrame(a0)
00010D80                            
00010D80                            	@chkdel:
00010D9E 6000 EC82                  		bra.w	DisplaySprite
00010D9E 6000 EC82                  		bra.w	DisplaySprite
00010DA2                            Map_Light	include	"_maps\Light.asm"
00010DA2                            ; --------------------------------------------------------------------------------
00010DA2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010DA2                            ; --------------------------------------------------------------------------------
00010DA2                            
00010DA2                            SME_FBl1X:	
00010DA2 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010DA6 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010DAA 05                         SME_FBl1X_8:	dc.b 5	
00010DAB E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010DB0 E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010DB5 F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010DBA F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010DBF F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010DC4 05                         SME_FBl1X_22:	dc.b 5	
00010DC5 E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010DCA E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010DCF E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010DD4 F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010DD9 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010DDE 06                         SME_FBl1X_3C:	dc.b 6	
00010DDF E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010DE4 E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010DE9 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010DEE F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010DF3 F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010DF8 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010DFD 05                         SME_FBl1X_5B:	dc.b 5	
00010DFE E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010E03 E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010E08 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010E0D F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010E12 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010E18 00                         		even
00010E18 00                         		even
00010E18                            		include	"_incObj\47 Bumper.asm"
00010E18                            ; ---------------------------------------------------------------------------
00010E18                            ; Object 47 - pinball bumper (SYZ)
00010E18                            ; ---------------------------------------------------------------------------
00010E18                            
00010E18                            Bumper:
00010E18 7000                       		moveq	#0,d0
00010E1A 1028 0024                  		move.b	obRoutine(a0),d0
00010E1E 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010E22 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010E26                            ; ===========================================================================
00010E26 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010E28 0000                       		dc.w Bump_Hit-Bump_Index
00010E2A                            ; ===========================================================================
00010E2A                            
00010E2A                            Bump_Main:	; Routine 0
00010E2A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E2E 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010E36 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010E3C 117C 0004 0001             		move.b	#4,obRender(a0)
00010E42 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010E48 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010E4E 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010E54                            
00010E54                            Bump_Hit:	; Routine 2
00010E54 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010E58 6700 0000                  		beq.w	@display	; if not, branch
00010E5C 4228 0021                  		clr.b	obColProp(a0)
00010E60 43F8 D000                  		lea	(v_player).w,a1
00010E64 3228 0008                  		move.w	obX(a0),d1
00010E68 3428 000C                  		move.w	obY(a0),d2
00010E6C 9269 0008                  		sub.w	obX(a1),d1
00010E70 9469 000C                  		sub.w	obY(a1),d2
00010E74 4EB9 0000 3D14             		jsr	(CalcAngle).l
00010E7A 4EB9 0000 3A82             		jsr	(CalcSine).l
00010E80 C3FC F900                  		muls.w	#-$700,d1
00010E84 E081                       		asr.l	#8,d1
00010E86 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010E8A C1FC F900                  		muls.w	#-$700,d0
00010E8E E080                       		asr.l	#8,d0
00010E90 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010E94 08E9 0001 0022             		bset	#1,obStatus(a1)
00010E9A 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010EA0 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010EA6 4229 003C                  		clr.b	$3C(a1)
00010EAA 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010EBA 45F8 FC00                  		lea	(v_objstate).w,a2
00010EBE 7000                       		moveq	#0,d0
00010EC0 1028 0023                  		move.b	obRespawnNo(a0),d0
00010EC4 6700                       		beq.s	@addscore
00010EC6 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010ECC 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010ECE 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010ED2                            
00010ED2                            	@addscore:
00010ED2 7001                       		moveq	#1,d0
00010ED4 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010EDA 6100 EFD2                  		bsr.w	FindFreeObj
00010EDE 6600                       		bne.s	@display
00010EE0 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010EE4 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010EEA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010EF0 137C 0004 001A             		move.b	#4,obFrame(a1)
00010EF6                            
00010EF6                            	@display:
00010EF6 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010EFC 6100 BBE6                  		bsr.w	AnimateSprite
00010F1C 6000 EB04                  		bra.w	DisplaySprite
00010F20                            ; ===========================================================================
00010F20                            
00010F20                            @resetcount:
00010F20 45F8 FC00                  		lea	(v_objstate).w,a2
00010F24 7000                       		moveq	#0,d0
00010F26 1028 0023                  		move.b	obRespawnNo(a0),d0
00010F2A 6700                       		beq.s	@delete
00010F2C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010F32                            
00010F32                            	@delete:
00010F32 6000 EB2E                  		bra.w	DeleteObject
00010F32 6000 EB2E                  		bra.w	DeleteObject
00010F36                            		include	"_anim\Bumper.asm"
00010F36                            ; ---------------------------------------------------------------------------
00010F36                            ; Animation script - flamethrower (SBZ)
00010F36                            ; ---------------------------------------------------------------------------
00010F36 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010F38 0000                       		dc.w byte_EAF8-Ani_Bump
00010F3A 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010F3E 00                         		even
00010F3E 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010F46 00                         		even
00010F46 00                         		even
00010F46                            Map_Bump:	include	"_maps\Bumper.asm"
00010F46                            ; ---------------------------------------------------------------------------
00010F46                            ; Sprite mappings - pinball bumper (SYZ)
00010F46                            ; ---------------------------------------------------------------------------
00010F46                            Map_Bump_internal:
00010F46 0000                       		dc.w @normal-Map_Bump_internal
00010F48 0000                       		dc.w @bumped1-Map_Bump_internal
00010F4A 0000                       		dc.w @bumped2-Map_Bump_internal
00010F4C 02                         @normal:	dc.b 2
00010F4D F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010F52 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010F57 02                         @bumped1:	dc.b 2
00010F58 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010F5D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010F62 02                         @bumped2:	dc.b 2
00010F63 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010F68 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010F6E 00                         		even
00010F6E 00                         		even
00010F6E                            
00010F6E                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010F6E                            ; ---------------------------------------------------------------------------
00010F6E                            ; Object 0D - signpost at the end of a level
00010F6E                            ; ---------------------------------------------------------------------------
00010F6E                            
00010F6E                            Signpost:
00010F6E 7000                       		moveq	#0,d0
00010F70 1028 0024                  		move.b	obRoutine(a0),d0
00010F74 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010F78 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010F7C 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010F82 6100 BB60                  		bsr.w	AnimateSprite
00010F86 6100 EA9A                  		bsr.w	DisplaySprite
00010FA8 4E75                       		rts	
00010FAA                            ; ===========================================================================
00010FAA 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010FAC 0000                       		dc.w Sign_Touch-Sign_Index
00010FAE 0000                       		dc.w Sign_Spin-Sign_Index
00010FB0 0000                       		dc.w Sign_SonicRun-Sign_Index
00010FB2 0000                       		dc.w Sign_Exit-Sign_Index
00010FB4                            
00010FB4 =00000030                  spintime:	equ $30		; time for signpost to spin
00010FB4 =00000032                  sparkletime:	equ $32		; time between sparkles
00010FB4 =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010FB4                            ; ===========================================================================
00010FB4                            
00010FB4                            Sign_Main:	; Routine 0
00010FB4 5428 0024                  		addq.b	#2,obRoutine(a0)
00010FB8 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010FC0 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010FC6 117C 0004 0001             		move.b	#4,obRender(a0)
00010FCC 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010FD2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010FD8                            
00010FD8                            Sign_Touch:	; Routine 2
00010FD8 3038 D008                  		move.w	(v_player+obX).w,d0
00010FDC 9068 0008                  		sub.w	obX(a0),d0
00010FE0 6500                       		bcs.s	@notouch
00010FE2 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010FE6 6400                       		bcc.s	@notouch	; if not, branch
00010FE8 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010FF8 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010FFC 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00011002 5428 0024                  		addq.b	#2,obRoutine(a0)
00011006 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
0001100C 4A38 F5C3                  		tst.b	(f_emeraldm).w
00011010 6700                       		beq.s	@notouch
00011012 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
00011020                            
00011020                            	@notouch:
00011020 4E75                       		rts	
00011022                            	
00011022                            ; ===========================================================================
00011022                            
00011022                            Sign_Spin:	; Routine 4
00011022 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00011026 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00011028 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
0001102E 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00011032 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00011038 6600                       		bne.s	@chksparkle	; if not, branch
0001103A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001103E                            
0001103E                            	@chksparkle:
0001103E 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00011042 6A00                       		bpl.s	@fail		; if time remains, branch
00011044 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
0001104A 7000                       		moveq	#0,d0
0001104C 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00011050 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00011054 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
0001105A 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
0001105E 6100 EE4E                  		bsr.w	FindFreeObj
00011062 6600                       		bne.s	@fail
00011064 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00011068 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
0001106E 101A                       		move.b	(a2)+,d0
00011070 4880                       		ext.w	d0
00011072 D068 0008                  		add.w	obX(a0),d0
00011076 3340 0008                  		move.w	d0,obX(a1)
0001107A 101A                       		move.b	(a2)+,d0
0001107C 4880                       		ext.w	d0
0001107E D068 000C                  		add.w	obY(a0),d0
00011082 3340 000C                  		move.w	d0,obY(a1)
00011086 237C 0000 C094 0004        		move.l	#Map_Ring,obMap(a1)
0001108E 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00011094 137C 0004 0001             		move.b	#4,obRender(a1)
0001109A 337C 0100 0018             		move.w	#$100,obPriority(a1)
000110A0 137C 0008 0014             		move.b	#8,obActWid(a1)
000110A6                            
000110A6                            	@fail:
000110A6 4E75                       		rts	
000110A8                            ; ===========================================================================
000110A8 E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
000110AA 0808                       		dc.b	8,   8
000110AC F000                       		dc.b -$10,   0
000110AE 18F8                       		dc.b  $18,  -8
000110B0 00F8                       		dc.b	0,  -8
000110B2 1000                       		dc.b  $10,   0
000110B4 E808                       		dc.b -$18,   8
000110B6 1810                       		dc.b  $18, $10
000110B8                            ; ===========================================================================
000110B8                            
000110B8                            Sign_SonicRun:	; Routine 6
000110B8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000110BC 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
000110C0 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
000110C6                            		
000110C6                            
000110C6                            	loc_EC86:
000110C6 5428 0024                  		addq.b	#2,obRoutine(a0)
000110CA                            
000110CA                            ; ---------------------------------------------------------------------------
000110CA                            ; Subroutine to	set up bonuses at the end of an	act
000110CA                            ; ---------------------------------------------------------------------------
000110CA                            
000110CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000110CA                            
000110CA                            
000110CA                            GotThroughAct:
000110CA 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
000110CE 6600                       		bne.s	locret_ECEE
000110D0 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
000110D6 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
000110DA 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
000110DE 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000110E2 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
000110E8 7000                       		moveq	#plcid_TitleCard,d0
000110EA 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
000110F0 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
000110F6 7000                       		moveq	#0,d0
000110F8 1038 FE23                  		move.b	(v_timemin).w,d0
000110FC C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00011100 7200                       		moveq	#0,d1
00011102 1238 FE24                  		move.b	(v_timesec).w,d1
00011106 D041                       		add.w	d1,d0		; add up your time
00011108 80FC 000F                  		divu.w	#15,d0		; divide by 15
0001110C 7214                       		moveq	#$14,d1
0001110E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011110 6500                       		bcs.s	hastimebonus	; if not, branch
00011112 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011114                            
00011114                            	hastimebonus:
00011114 D040                       		add.w	d0,d0
00011116 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
0001111C 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011120 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011124 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011132 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00011138                            
00011138                            locret_ECEE:
00011138 4E75                       		rts	
0001113A                            
0001113A                            ; End of function GotThroughAct
0001113A                            
0001113A                            ; ===========================================================================
0001113A 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0001114E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011164                            ; ===========================================================================
00011164                            
00011164                            Sign_Exit:	; Routine 8
00011164 4E75                       		rts	
00011166                            
00011166                            ; ---------------------------------------------------------------------------
00011166                            ; Subroutine to	set up bonuses at the end of an	zone
00011166                            ; ---------------------------------------------------------------------------
00011166                            
00011166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011166                            
00011166                            
00011166                            GotThroughAct1:
00011166 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
0001116A 6600                       		bne.s	locret_ECEE1
0001116C 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00011172 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00011176 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
0001117A 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001117E 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00011184 7000                       		moveq	#plcid_TitleCard,d0
00011186 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
0001118C 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00011192 7000                       		moveq	#0,d0
00011194 1038 FE23                  		move.b	(v_timemin).w,d0
00011198 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0001119C 7200                       		moveq	#0,d1
0001119E 1238 FE24                  		move.b	(v_timesec).w,d1
000111A2 D041                       		add.w	d1,d0		; add up your time
000111A4 80FC 000F                  		divu.w	#15,d0		; divide by 15
000111A8 7214                       		moveq	#$14,d1
000111AA B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
000111AC 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
000111B0 3001                       		move.w	d1,d0		; use minimum time bonus (0)
000111B2                            
000111B2                            	hastimebonus2:
000111B2 D040                       		add.w	d0,d0
000111B4 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
000111BA 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
000111BE C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
000111C2 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
000111D0 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
000111D6                            
000111D6                            locret_ECEE1:
000111D6 4E75                       		rts	
000111D8                            
000111D8                            ; End of function GotThroughAct		
000111D8                            
000111D8 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000111EC 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000111EC 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011202                            		include	"_anim\Signpost.asm"
00011202                            ; ---------------------------------------------------------------------------
00011202                            ; Animation script - signpost
00011202                            ; ---------------------------------------------------------------------------
00011202 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00011204 0000                       		dc.w @spin1-Ani_Sign
00011206 0000                       		dc.w @spin2-Ani_Sign
00011208 0000                       		dc.w @sonic-Ani_Sign
0001120A 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
0001120E 00                         		even
0001120E 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00011214 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
0001121A 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
0001121E 00                         		even
0001121E 00                         		even
0001121E                            Map_Sign:	include	"_maps\Signpost.asm"
0001121E                            ; --------------------------------------------------------------------------------
0001121E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001121E                            ; --------------------------------------------------------------------------------
0001121E                            
0001121E                            SME_KvSue:	
0001121E 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00011222 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00011226 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00011228 04                         SME_KvSue_A:	dc.b 4	
00011229 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
0001122E F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00011233 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00011238 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001123D 03                         SME_KvSue_1F:	dc.b 3	
0001123E F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00011243 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00011248 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001124D 03                         SME_KvSue_2F:	dc.b 3	
0001124E F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00011253 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00011258 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001125D 03                         SME_KvSue_3F:	dc.b 3	
0001125E F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00011263 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00011268 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001126D 04                         SME_KvSue_4F:	dc.b 4	
0001126E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00011273 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
00011278 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001127D 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011282                            		even
00011282                            		even
00011282                            
00011282                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00011282                            ; ---------------------------------------------------------------------------
00011282                            ; Object 4C - lava geyser / lavafall producer (MZ)
00011282                            ; ---------------------------------------------------------------------------
00011282                            
00011282                            GeyserMaker:
00011282 7000                       		moveq	#0,d0
00011284 1028 0024                  		move.b	obRoutine(a0),d0
00011288 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
0001128C 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00011290 6000 0000                  		bra.w	Geyser_ChkDel
00011294                            ; ===========================================================================
00011294 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
00011296 0000                       		dc.w GMake_Wait-GMake_Index
00011298 0000                       		dc.w GMake_ChkType-GMake_Index
0001129A 0000                       		dc.w GMake_MakeLava-GMake_Index
0001129C 0000                       		dc.w GMake_Display-GMake_Index
0001129E 0000                       		dc.w GMake_Delete-GMake_Index
000112A0                            
000112A0 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
000112A0 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
000112A0 =0000003C                  gmake_parent:	equ $3C		; address of parent object
000112A0                            ; ===========================================================================
000112A0                            
000112A0                            GMake_Main:	; Routine 0
000112A0 5428 0024                  		addq.b	#2,obRoutine(a0)
000112A4 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
000112AC 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
000112B2 117C 0004 0001             		move.b	#4,obRender(a0)
000112B8 317C 0080 0018             		move.w	#$80,obPriority(a0)
000112BE 117C 0038 0014             		move.b	#$38,obActWid(a0)
000112C4 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
000112CA                            
000112CA                            GMake_Wait:	; Routine 2
000112CA 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
000112CE 6A00                       		bpl.s	@cancel		; if time remains, branch
000112D0                            
000112D0 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
000112D6 3038 D00C                  		move.w	(v_player+obY).w,d0
000112DA 3228 000C                  		move.w	obY(a0),d1
000112DE B041                       		cmp.w	d1,d0
000112E0 6400                       		bcc.s	@cancel
000112E2 0441 0170                  		subi.w	#$170,d1
000112E6 B041                       		cmp.w	d1,d0
000112E8 6500                       		bcs.s	@cancel
000112EA 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
000112EE                            
000112EE                            	@cancel:
000112EE 4E75                       		rts	
000112F0                            ; ===========================================================================
000112F0                            
000112F0                            GMake_MakeLava:	; Routine 6
000112F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000112F4 6100 EBCE                  		bsr.w	FindNextFreeObj
000112F8 6600                       		bne.s	@fail
000112FA 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
000112FE 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011304 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001130A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011310 2348 003C                  		move.l	a0,gmake_parent(a1)
00011314                            
00011314                            	@fail:
00011314 117C 0001 001C             		move.b	#1,obAnim(a0)
0001131A 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
0001131E 6700                       		beq.s	@isgeyser	; if yes, branch
00011320 117C 0004 001C             		move.b	#4,obAnim(a0)
00011326 6000                       		bra.s	GMake_Display
00011328                            ; ===========================================================================
00011328                            
00011328                            	@isgeyser:
00011328 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
0001132C 08E9 0001 0022             		bset	#1,obStatus(a1)
00011332 337C FA80 0012             		move.w	#-$580,obVelY(a1)
00011338 6000                       		bra.s	GMake_Display
0001133A                            ; ===========================================================================
0001133A                            
0001133A                            GMake_ChkType:	; Routine 4
0001133A 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
0001133E 6700                       		beq.s	GMake_Display	; if yes, branch
00011340 5428 0024                  		addq.b	#2,obRoutine(a0)
00011344 4E75                       		rts	
00011346                            ; ===========================================================================
00011346                            
00011346                            GMake_Display:	; Routine 8
00011346 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
0001134C 6100 B796                  		bsr.w	AnimateSprite
00011350 6100 E6D0                  		bsr.w	DisplaySprite
00011354 4E75                       		rts	
00011356                            ; ===========================================================================
00011356                            
00011356                            GMake_Delete:	; Routine $A
00011356 117C 0000 001C             		move.b	#0,obAnim(a0)
0001135C 117C 0002 0024             		move.b	#2,obRoutine(a0)
00011362 4A28 0028                  		tst.b	obSubtype(a0)
00011366 6700 E6FA                  		beq.w	DeleteObject
0001136A 4E75                       		rts	
0001136C                            
0001136C                            
0001136C                            ; ---------------------------------------------------------------------------
0001136C                            ; Object 4D - lava geyser / lavafall (MZ)
0001136C                            ; ---------------------------------------------------------------------------
0001136C                            
0001136C                            LavaGeyser:
0001136C 7000                       		moveq	#0,d0
0001136E 1028 0024                  		move.b	obRoutine(a0),d0
00011372 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
00011376 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
0001137A 6000 E6A6                  		bra.w	DisplaySprite
0001137E                            ; ===========================================================================
0001137E 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
00011380 0000                       		dc.w Geyser_Action-Geyser_Index
00011382 0000                       		dc.w loc_EFFC-Geyser_Index
00011384 0000                       		dc.w Geyser_Delete-Geyser_Index
00011386                            
00011386 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
0001138A                            ; ===========================================================================
0001138A                            
0001138A                            Geyser_Main:	; Routine 0
0001138A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001138E 3168 000C 0030             		move.w	obY(a0),$30(a0)
00011394 4A28 0028                  		tst.b	obSubtype(a0)
00011398 6700                       		beq.s	@isgeyser
0001139A 0468 0250 000C             		subi.w	#$250,obY(a0)
000113A0                            
000113A0                            	@isgeyser:
000113A0 7000                       		moveq	#0,d0
000113A2 1028 0028                  		move.b	obSubtype(a0),d0
000113A6 D040                       		add.w	d0,d0
000113A8 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
000113AE 2248                       		movea.l	a0,a1
000113B0 7201                       		moveq	#1,d1
000113B2 6100                       		bsr.s	@makelava
000113B4 6000                       		bra.s	@activate
000113B6                            ; ===========================================================================
000113B6                            
000113B6                            	@loop:
000113B6 6100 EB0C                  		bsr.w	FindNextFreeObj
000113BA 6600                       		bne.s	@fail
000113BC                            
000113BC                            @makelava:
000113BC 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
000113C0 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
000113C8 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
000113CE 137C 0004 0001             		move.b	#4,obRender(a1)
000113D4 137C 0020 0014             		move.b	#$20,obActWid(a1)
000113DA 3368 0008 0008             		move.w	obX(a0),obX(a1)
000113E0 3368 000C 000C             		move.w	obY(a0),obY(a1)
000113E6 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000113EC 337C 0080 0018             		move.w	#$80,obPriority(a1)
000113F2 137C 0005 001C             		move.b	#5,obAnim(a1)
000113F8 4A28 0028                  		tst.b	obSubtype(a0)
000113FC 6700                       		beq.s	@fail
000113FE 137C 0002 001C             		move.b	#2,obAnim(a1)
00011404                            
00011404                            	@fail:
00011404 51C9 FFB0                  		dbf	d1,@loop
00011408 4E75                       		rts	
0001140A                            ; ===========================================================================
0001140A                            
0001140A                            @activate:
0001140A 0669 0060 000C             		addi.w	#$60,obY(a1)
00011410 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011416 0669 0060 0030             		addi.w	#$60,$30(a1)
0001141C 137C 0093 0020             		move.b	#$93,obColType(a1)
00011422 137C 0080 0016             		move.b	#$80,obHeight(a1)
00011428 08E9 0004 0001             		bset	#4,obRender(a1)
0001142E 5829 0024                  		addq.b	#4,obRoutine(a1)
00011432 2348 003C                  		move.l	a0,$3C(a1)
00011436 4A28 0028                  		tst.b	obSubtype(a0)
0001143A 6700                       		beq.s	@sound
0001143C 7200                       		moveq	#0,d1
0001143E 6100 FF76                  		bsr.w	@loop
00011442 5429 0024                  		addq.b	#2,obRoutine(a1)
00011446 08E9 0004 0002             		bset	#4,obGfx(a1)
0001144C 0669 0100 000C             		addi.w	#$100,obY(a1)
00011452 337C 0000 0018             		move.w	#0,obPriority(a1)
00011458 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001145E 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00011464 117C 0000 0028             		move.b	#0,obSubtype(a0)
0001146A                            
0001146A                            	@sound:
00011474                            
00011474                            Geyser_Action:	; Routine 2
00011474 7000                       		moveq	#0,d0
00011476 1028 0028                  		move.b	obSubtype(a0),d0
0001147A D040                       		add.w	d0,d0
0001147C 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
00011480 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
00011484 6100 E588                  		bsr.w	SpeedToPos
00011488 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
0001148E 6100 B654                  		bsr.w	AnimateSprite
00011492                            
00011492                            Geyser_ChkDel:
000114B0 4E75                       		rts	
000114B2                            ; ===========================================================================
000114B2 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
000114B4 0000                       		dc.w Geyser_Type01-Geyser_Types
000114B6                            ; ===========================================================================
000114B6                            
000114B6                            Geyser_Type00:
000114B6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000114BC 3028 0030                  		move.w	$30(a0),d0
000114C0 B068 000C                  		cmp.w	obY(a0),d0
000114C4 6400                       		bcc.s	locret_EFDA
000114C6 5828 0024                  		addq.b	#4,obRoutine(a0)
000114CA 2268 003C                  		movea.l	$3C(a0),a1
000114CE 137C 0003 001C             		move.b	#3,obAnim(a1)
000114D4                            
000114D4                            locret_EFDA:
000114D4 4E75                       		rts	
000114D6                            ; ===========================================================================
000114D6                            
000114D6                            Geyser_Type01:
000114D6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000114DC 3028 0030                  		move.w	$30(a0),d0
000114E0 B068 000C                  		cmp.w	obY(a0),d0
000114E4 6400                       		bcc.s	locret_EFFA
000114E6 5828 0024                  		addq.b	#4,obRoutine(a0)
000114EA 2268 003C                  		movea.l	$3C(a0),a1
000114EE 137C 0001 001C             		move.b	#1,obAnim(a1)
000114F4                            
000114F4                            locret_EFFA:
000114F4 4E75                       		rts	
000114F6                            ; ===========================================================================
000114F6                            
000114F6                            loc_EFFC:	; Routine 4
000114F6 2268 003C                  		movea.l	$3C(a0),a1
000114FA 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00011500 6700 0000                  		beq.w	Geyser_Delete
00011504 3029 000C                  		move.w	obY(a1),d0
00011508 0640 0060                  		addi.w	#$60,d0
0001150C 3140 000C                  		move.w	d0,obY(a0)
00011510 9068 0030                  		sub.w	$30(a0),d0
00011514 4440                       		neg.w	d0
00011516 7208                       		moveq	#8,d1
00011518 0C40 0040                  		cmpi.w	#$40,d0
0001151C 6C00                       		bge.s	loc_F026
0001151E 720B                       		moveq	#$B,d1
00011520                            
00011520                            loc_F026:
00011520 0C40 0080                  		cmpi.w	#$80,d0
00011524 6F00                       		ble.s	loc_F02E
00011526 720E                       		moveq	#$E,d1
00011528                            
00011528                            loc_F02E:
00011528 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001152C 6A00                       		bpl.s	loc_F04C
0001152E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00011534 5228 001B                  		addq.b	#1,obAniFrame(a0)
00011538 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
0001153E 6500                       		bcs.s	loc_F04C
00011540 117C 0000 001B             		move.b	#0,obAniFrame(a0)
00011546                            
00011546                            loc_F04C:
00011546 1028 001B                  		move.b	obAniFrame(a0),d0
0001154A D001                       		add.b	d1,d0
0001154C 1140 001A                  		move.b	d0,obFrame(a0)
00011550 6000 FF40                  		bra.w	Geyser_ChkDel
00011554                            ; ===========================================================================
00011554                            
00011554                            Geyser_Delete:	; Routine 6
00011554 6000 E50C                  		bra.w	DeleteObject
00011554 6000 E50C                  		bra.w	DeleteObject
00011558                            		include	"_incObj\54 Lava Tag.asm"
00011558                            ; ---------------------------------------------------------------------------
00011558                            ; Object 54 - invisible	lava tag (MZ)
00011558                            ; ---------------------------------------------------------------------------
00011558                            
00011558                            LavaTag:
00011558 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
0001155E 6E00 0000                  		bgt	WaterTag	;TIS
00011562 7000                       		moveq	#0,d0
00011564 1028 0024                  		move.b	obRoutine(a0),d0
00011568 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
0001156C 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
00011570                            ; ===========================================================================
00011570 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
00011572 0000                       		dc.w LTag_ChkDel-LTag_Index
00011574                            
00011574 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
00011578 00                         		even
00011578                            ; ===========================================================================
00011578                            
00011578                            LTag_Main:	; Routine 0
00011578 5428 0024                  		addq.b	#2,obRoutine(a0)
0001157C 7000                       		moveq	#0,d0
0001157E 1028 0028                  		move.b	obSubtype(a0),d0
00011582 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
00011588 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
00011590 117C 0084 0001             		move.b	#$84,obRender(a0)
00011596                            
00011596                            LTag_ChkDel:	; Routine 2
00011596 3028 0008                  		move.w	obX(a0),d0
0001159A 0240 FF80                  		andi.w	#$FF80,d0
0001159E 3238 F700                  		move.w	(v_screenposx).w,d1
000115A2 0441 0080                  		subi.w	#$80,d1
000115A6 0241 FF80                  		andi.w	#$FF80,d1
000115AA 9041                       		sub.w	d1,d0
000115AC 6B00 E4B4                  		bmi.w	DeleteObject
000115B0 0C40 0280                  		cmpi.w	#$280,d0
000115B4 6200 E4AC                  		bhi.w	DeleteObject
000115B8 4E75                       		rts
000115BA                            
000115BA                            
000115BA                            ; ---------------------------------------------------------------------------
000115BA                            ; Object 54a - invisible	water tag (MZ) - TIS
000115BA                            ; ---------------------------------------------------------------------------
000115BA                            
000115BA                            WaterTag:	
000115BA 7000                       		moveq	#0,d0
000115BC 1028 0024                  		move.b	obRoutine(a0),d0
000115C0 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
000115C4 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
000115C8                            ; ===========================================================================
000115C8 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
000115CA 0000                       		dc.w WTag_ChkDel-WTag_Index
000115CC                            
000115CC 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
000115D0 00                         		even
000115D0                            ; ===========================================================================
000115D0                            
000115D0                            
000115D0                            WTag_Main:	; Routine 0
000115D0 5428 0024                  		addq.b	#2,obRoutine(a0)
000115D4 7000                       		moveq	#0,d0
000115D6                            		;move.b	obSubtype(a0),d0
000115D6                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
000115D6 0400 00F0                  		sub.b	#$F0,d0
000115DA 1178 0096 0020             		move.b	$96,obColType(a0)							
000115E0                            		;move.l	#Map_LTag,obMap(a0)
000115E0                            		;move.b	#$84,obRender(a0)
000115E0                            
000115E0                            WTag_ChkDel:	; Routine 2
000115E0 3028 0008                  		move.w	obX(a0),d0
000115E4 0240 FF80                  		andi.w	#$FF80,d0
000115E8 3238 F700                  		move.w	(v_screenposx).w,d1
000115EC 0441 0080                  		subi.w	#$80,d1
000115F0 0241 FF80                  		andi.w	#$FF80,d1
000115F4 9041                       		sub.w	d1,d0
000115F6 6B00 E46A                  		bmi.w	DeleteObject
000115FA 0C40 0280                  		cmpi.w	#$280,d0
000115FE 6200 E462                  		bhi.w	DeleteObject
00011602 4E75                       		rts
00011604                            
00011604                            
00011604                            Map_LTag:	include	"_maps\Lava Tag.asm"
00011604                            ; ---------------------------------------------------------------------------
00011604                            ; Sprite mappings - invisible lava tag (MZ)
00011604                            ; ---------------------------------------------------------------------------
00011604                            Map_LTag_internal:
00011604 0000                       		dc.w @0-Map_LTag_internal
00011606 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
00011608 00                         		even
00011608 00                         		even
00011608                            		include	"_anim\Lava Geyser.asm"
00011608                            ; ---------------------------------------------------------------------------
00011608                            ; Animation script - geyser of lava (MZ)
00011608                            ; ---------------------------------------------------------------------------
00011608 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
0001160A 0000                       		dc.w @bubble2-Ani_Geyser
0001160C 0000                       		dc.w @end-Ani_Geyser
0001160E 0000                       		dc.w @bubble3-Ani_Geyser
00011610 0000                       		dc.w @blank-Ani_Geyser
00011612 0000                       		dc.w @bubble4-Ani_Geyser
00011614 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
0001161E 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
00011622 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
00011626 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
0001162E 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011632 00                         		even
00011632 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
00011636                            		even
00011636                            		even
00011636                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
00011636                            ; ---------------------------------------------------------------------------
00011636                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00011636                            ; ---------------------------------------------------------------------------
00011636                            Map_Geyser_internal:
00011636 0000                       		dc.w @bubble1-Map_Geyser_internal
00011638 0000                       		dc.w @bubble2-Map_Geyser_internal
0001163A 0000                       		dc.w @bubble3-Map_Geyser_internal
0001163C 0000                       		dc.w @bubble4-Map_Geyser_internal
0001163E 0000                       		dc.w @bubble5-Map_Geyser_internal
00011640 0000                       		dc.w @bubble6-Map_Geyser_internal
00011642 0000                       		dc.w @end1-Map_Geyser_internal
00011644 0000                       		dc.w @end2-Map_Geyser_internal
00011646 0000                       		dc.w @medcolumn1-Map_Geyser_internal
00011648 0000                       		dc.w @medcolumn2-Map_Geyser_internal
0001164A 0000                       		dc.w @medcolumn3-Map_Geyser_internal
0001164C 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
0001164E 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011650 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011652 0000                       		dc.w @longcolumn1-Map_Geyser_internal
00011654 0000                       		dc.w @longcolumn2-Map_Geyser_internal
00011656 0000                       		dc.w @longcolumn3-Map_Geyser_internal
00011658 0000                       		dc.w @bubble7-Map_Geyser_internal
0001165A 0000                       		dc.w @bubble8-Map_Geyser_internal
0001165C 0000                       		dc.w @blank-Map_Geyser_internal
0001165E 02                         @bubble1:	dc.b 2
0001165F EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00011664 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00011669 02                         @bubble2:	dc.b 2
0001166A EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0001166F EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00011674 04                         @bubble3:	dc.b 4
00011675 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001167A F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0001167F F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011684 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00011689 04                         @bubble4:	dc.b 4
0001168A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0001168F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00011694 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011699 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0001169E 06                         @bubble5:	dc.b 6
0001169F EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000116A4 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000116A9 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000116AE EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000116B3 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000116B8 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000116BD 06                         @bubble6:	dc.b 6
000116BE EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000116C3 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000116C8 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000116CD EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000116D2 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
000116D7 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
000116DC 02                         @end1:		dc.b 2
000116DD E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
000116E2 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
000116E7 02                         @end2:		dc.b 2
000116E8 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
000116ED E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
000116F2 0A                         @medcolumn1:	dc.b $A
000116F3 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000116F8 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000116FD B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011702 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011707 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001170C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011711 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011716 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001171B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011720 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011725 0A                         @medcolumn2:	dc.b $A
00011726 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001172B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011730 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011735 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001173A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001173F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011744 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011749 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0001174E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011753 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011758 0A                         @medcolumn3:	dc.b $A
00011759 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001175E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011763 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011768 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001176D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011772 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011777 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0001177C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011781 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00011786 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001178B 06                         @shortcolumn1:	dc.b 6
0001178C 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011791 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011796 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001179B B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000117A0 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000117A5 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000117AA 06                         @shortcolumn2:	dc.b 6
000117AB 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000117B0 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000117B5 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000117BA B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000117BF D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000117C4 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000117C9 06                         @shortcolumn3:	dc.b 6
000117CA 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000117CF 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000117D4 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000117D9 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000117DE D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000117E3 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000117E8 10                         @longcolumn1:	dc.b $10
000117E9 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000117EE 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000117F3 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000117F8 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000117FD D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011802 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011807 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001180C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011811 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011816 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001181B 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00011820 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00011825 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0001182A 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0001182F 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00011834 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00011839 10                         @longcolumn2:	dc.b $10
0001183A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001183F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011844 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011849 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001184E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011853 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011858 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001185D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011862 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011867 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001186C 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00011871 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00011876 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0001187B 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00011880 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00011885 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0001188A 10                         @longcolumn3:	dc.b $10
0001188B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011890 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011895 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001189A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001189F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000118A4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000118A9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000118AE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000118B3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000118B8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000118BD 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
000118C2 300F 0860 00               		dc.b $30, $F, 8, $60, 0
000118C7 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
000118CC 500F 0860 00               		dc.b $50, $F, 8, $60, 0
000118D1 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
000118D6 700F 0860 00               		dc.b $70, $F, 8, $60, 0
000118DB 06                         @bubble7:	dc.b 6
000118DC E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
000118E1 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
000118E6 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
000118EB E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
000118F0 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
000118F5 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
000118FA 06                         @bubble8:	dc.b 6
000118FB E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011900 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00011905 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001190A E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0001190F D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00011914 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00011919 00                         @blank:	dc.b 0
0001191A                            		even
0001191A                            		even
0001191A                            
0001191A                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
0001191A                            ; ---------------------------------------------------------------------------
0001191A                            ; Object 40 - Moto Bug enemy (GHZ)
0001191A                            ; ---------------------------------------------------------------------------
0001191A                            
0001191A                            MotoBug:
0001191A 7000                       		moveq	#0,d0
0001191C 1028 0024                  		move.b	obRoutine(a0),d0
00011920 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
00011924 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
00011928                            ; ===========================================================================
00011928 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
0001192A 0000                       		dc.w Moto_Action-Moto_Index
0001192C 0000                       		dc.w Moto_Animate-Moto_Index
0001192E 0000                       		dc.w Moto_Delete-Moto_Index
00011930                            ; ===========================================================================
00011930                            
00011930                            Moto_Main:	; Routine 0
00011930 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
00011938 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
0001193E 117C 0004 0001             		move.b	#4,obRender(a0)
00011944 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001194A 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011950 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
00011954 6600                       		bne.s	@smoke		; if yes, branch
00011956 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001195C 117C 0008 0017             		move.b	#8,obWidth(a0)
00011962 117C 000C 0020             		move.b	#$C,obColType(a0)
00011968 6100 E06C                  		bsr.w	ObjectFall
0001196C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011972 4A41                       		tst.w	d1
00011974 6A00                       		bpl.s	@notonfloor
00011976 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001197A 317C 0000 0012             		move.w	#0,obVelY(a0)
00011980 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
00011984 0868 0000 0022             		bchg	#0,obStatus(a0)
0001198A                            
0001198A                            	@notonfloor:
0001198A 4E75                       		rts	
0001198C                            ; ===========================================================================
0001198C                            
0001198C                            @smoke:
0001198C 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
00011990 6000 0000                  		bra.w	Moto_Animate
00011994                            ; ===========================================================================
00011994                            
00011994                            Moto_Action:	; Routine 2
00011994 7000                       		moveq	#0,d0
00011996 1028 0025                  		move.b	ob2ndRout(a0),d0
0001199A 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
0001199E 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000119A2 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000119A8 6100 B13A                  		bsr.w	AnimateSprite
000119AC                            
000119AC                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
000119AC                            ; ---------------------------------------------------------------------------
000119AC                            ; Subroutine to remember whether an object is destroyed/collected
000119AC                            ; ---------------------------------------------------------------------------
000119AC                            
000119AC                            RememberState:
000119CA 6000 E056                  		bra.w	DisplaySprite
000119CE                            
000119CE                            	@offscreen:
000119CE 45F8 FC00                  		lea	(v_objstate).w,a2
000119D2 7000                       		moveq	#0,d0
000119D4 1028 0023                  		move.b	obRespawnNo(a0),d0
000119D8 6700                       		beq.s	@delete
000119DA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000119E0                            
000119E0                            	@delete:
000119E0 6000 E080                  		bra.w	DeleteObject
000119E0 6000 E080                  		bra.w	DeleteObject
000119E4                            
000119E4                            ; ===========================================================================
000119E4 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
000119E6 0000                       		dc.w @findfloor-Moto_ActIndex
000119E8                            
000119E8 =00000030                  @time:		equ $30
000119E8 =00000033                  @smokedelay:	equ $33
000119E8                            ; ===========================================================================
000119E8                            
000119E8                            @move:
000119E8 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
000119EC 6A00                       		bpl.s	@wait		; if time remains, branch
000119EE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000119F2 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
000119F8 117C 0001 001C             		move.b	#1,obAnim(a0)
000119FE 0868 0000 0022             		bchg	#0,obStatus(a0)
00011A04 6600                       		bne.s	@wait
00011A06 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011A0A                            
00011A0A                            	@wait:
00011A0A 4E75                       		rts	
00011A0C                            ; ===========================================================================
00011A0C                            
00011A0C                            @findfloor:
00011A0C 6100 E000                  		bsr.w	SpeedToPos
00011A10 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011A16 0C41 FFF8                  		cmpi.w	#-8,d1
00011A1A 6D00                       		blt.s	@pause
00011A1C 0C41 000C                  		cmpi.w	#$C,d1
00011A20 6C00                       		bge.s	@pause
00011A22 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011A26 5328 0033                  		subq.b	#1,@smokedelay(a0)
00011A2A 6A00                       		bpl.s	@nosmoke
00011A2C 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011A32 6100 E47A                  		bsr.w	FindFreeObj
00011A36 6600                       		bne.s	@nosmoke
00011A38 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
00011A3C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011A42 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011A48 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011A4E 137C 0002 001C             		move.b	#2,obAnim(a1)
00011A54                            
00011A54                            	@nosmoke:
00011A54 4E75                       		rts	
00011A56                            
00011A56                            @pause:
00011A56 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011A5A 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
00011A60 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
00011A66 117C 0000 001C             		move.b	#0,obAnim(a0)
00011A6C 4E75                       		rts	
00011A6E                            ; ===========================================================================
00011A6E                            
00011A6E                            Moto_Animate:	; Routine 4
00011A6E 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011A74 6100 B06E                  		bsr.w	AnimateSprite
00011A78 6000 DFA8                  		bra.w	DisplaySprite
00011A7C                            ; ===========================================================================
00011A7C                            
00011A7C                            Moto_Delete:	; Routine 6
00011A7C 6000 DFE4                  		bra.w	DeleteObject
00011A7C 6000 DFE4                  		bra.w	DeleteObject
00011A80                            		include	"_anim\Moto Bug.asm"
00011A80                            ; ---------------------------------------------------------------------------
00011A80                            ; Animation script - Motobug enemy
00011A80                            ; ---------------------------------------------------------------------------
00011A80 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
00011A82 0000                       		dc.w @walk-Ani_Moto
00011A84 0000                       		dc.w @smoke-Ani_Moto
00011A86                            
00011A86 0F02 FF                    @stand:		dc.b $F, 2, afEnd
00011A8A 00                         		even
00011A8A 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
00011A90 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
00011A9E 00                         		even
00011A9E 00                         		even
00011A9E                            Map_Moto:	include	"_maps\Moto Bug.asm"
00011A9E                            ; --------------------------------------------------------------------------------
00011A9E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011A9E                            ; --------------------------------------------------------------------------------
00011A9E                            
00011A9E                            SME_TTY9T:	
00011A9E 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
00011AA2 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
00011AA6 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
00011AAA 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
00011AAC 04                         SME_TTY9T_E:	dc.b 4	
00011AAD F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011AB2 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
00011AB7 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011ABC 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011AC1 04                         SME_TTY9T_23:	dc.b 4	
00011AC2 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
00011AC7 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011ACC F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011AD1 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
00011AD6 05                         SME_TTY9T_38:	dc.b 5	
00011AD7 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011ADC 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011AE1 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011AE6 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011AEB 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011AF0 01                         SME_TTY9T_52:	dc.b 1	
00011AF1 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011AF6 01                         SME_TTY9T_58:	dc.b 1	
00011AF7 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011AFC 01                         SME_TTY9T_5E:	dc.b 1	
00011AFD FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011B02 00                         SME_TTY9T_64:	dc.b 0	
00011B04 00                         		even
00011B04 00                         		even
00011B04                            		include	"_incObj\4F.asm"
00011B04                            ; ---------------------------------------------------------------------------
00011B04                            ; Object 4F - Splats
00011B04                            ; ---------------------------------------------------------------------------
00011B04                            
00011B04                            Obj4F:
00011B04 7000                                       moveq   #0,d0
00011B06 1028 0024                                  move.b  $24(a0),d0
00011B0A 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
00011B0E 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011B12                            ; ---------------------------------------------------------------------------
00011B12 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
00011B14 0000                                       dc.w loc_D246-ObjSplats_Index
00011B16 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
00011B18 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011B1A                            ; ---------------------------------------------------------------------------
00011B1A                            
00011B1A                            ObjSplats_Init:
00011B1A 5428 0024                                  addq.b  #2,$24(a0)
00011B1E 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
00011B26 317C 24E4 0002                             move.w  #$24E4,2(a0)
00011B2C 117C 0004 0001                             move.b  #4,1(a0)
00011B32 117C 0004 0014                             move.b  #4,obActWid(a0)
00011B38 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011B3E 117C 0014 0016                             move.b  #$14,$16(a0)
00011B44 117C 0002 0020                             move.b  #2,$20(a0)
00011B4A 4A28 0028                                  tst.b   $28(a0)
00011B4E 6700                                       beq.s   loc_D246
00011B50 343C 0300                                  move.w  #$300,d2
00011B54 6000                                       bra.s   ObjSplats_FaceRight
00011B56                            ; ---------------------------------------------------------------------------
00011B56                            
00011B56                            loc_D246:
00011B56 343C 00E0                                  move.w  #$E0,d2
00011B5A                            
00011B5A                            ObjSplats_FaceRight:
00011B5A 323C 0100                                  move.w  #$100,d1
00011B5E 08E8 0000 0001                             bset    #0,1(a0)
00011B64 3038 D008                                  move.w  ($FFFFD008).w,d0
00011B68 9068 0008                                  sub.w   8(a0),d0
00011B6C 6400                                       bcc.s   ObjSplats_Move
00011B6E 4440                                       neg.w   d0
00011B70 4441                                       neg.w   d1
00011B72 08A8 0000 0001                             bclr    #0,1(a0)
00011B78                            
00011B78                            ObjSplats_Move:
00011B78 B042                                       cmp.w   d2,d0
00011B7A 6400                                       bcc.s   ObjSplats_Bounce
00011B7C 3141 0010                                  move.w  d1,$10(a0)
00011B80 5428 0024                                  addq.b  #2,$24(a0)
00011B84                            
00011B84                            ObjSplats_Bounce:
00011B84 6100 DE50                                  bsr.w   ObjectFall
00011B88 117C 0001 001A                             move.b  #1,$1A(a0)
00011B8E 4A68 0012                                  tst.w   $12(a0)
00011B92 6B00                                       bmi.s   ObjSplats_Turn
00011B94 117C 0000 001A                             move.b  #0,$1A(a0)
00011B9A 6100 0000                                  bsr.w   ObjFloorDist
00011B9E 4A41                                       tst.w   d1
00011BA0 6A00                                       bpl.s   ObjSplats_Turn
00011BA2 3011                                       move.w  (a1),d0
00011BA4 0240 03FF                                  andi.w  #$3FF,d0
00011BA8 0C40 02D2                                  cmpi.w  #$2D2,d0
00011BAC 6500                                       bcs.s   ObjSplats_Fall
00011BAE 5428 0024                                  addq.b  #2,$24(a0)
00011BB2 6000                                       bra.s   ObjSplats_Turn
00011BB4                            ; ---------------------------------------------------------------------------
00011BB4                            
00011BB4                            ObjSplats_Fall:
00011BB4 D368 000C                                  add.w   d1,$C(a0)
00011BB8 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011BBE                            
00011BBE                            ObjSplats_Turn:
00011BBE 6100 0000                                  bsr.w   Yad_ChkWall
00011BC2 6700                                       beq.s   loc_D2C4
00011BC4 4468 0010                                  neg.w   $10(a0)
00011BC8 0868 0000 0001                             bchg    #0,1(a0)
00011BCE 0868 0000 0022                             bchg    #0,$22(a0)
00011BD4                            
00011BD4                            loc_D2C4:
00011BD4 6000 FDD6                                  bra.w   RememberState
00011BD8                            ; ---------------------------------------------------------------------------
00011BD8                            
00011BD8                            loc_D2C8:
00011BD8 6100 DDFC                                  bsr.w   ObjectFall
00011BDC 6100 DE44                                  bsr.w   DisplaySprite
00011BE0 4A28 0001                                  tst.b   1(a0)
00011BE4 6A00 DE7C                                  bpl.w   DeleteObject
00011BE8 4E75                                       rts
00011BE8 4E75                                       rts
00011BEA                            Map_Splats:	include	"_maps\Splats.asm"
00011BEA 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011BEC 0000                                       dc.w unk_D31B-Map_Splats_internal
00011BEE 02                         unk_D310:       dc.b   2
00011BEF EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011BF9 02                         unk_D31B:       dc.b   2
00011BFA EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011BFA EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011C04                            
00011C04                            		include	"_incObj\50 Yadrin.asm"
00011C04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011C04                            
00011C04                            
00011C04                            Yad_ChkWall:
00011C04 3038 FE04                  		move.w	(v_framecount).w,d0
00011C08 D047                       		add.w	d7,d0
00011C0A 0240 0003                  		andi.w	#3,d0
00011C0E 6600                       		bne.s	loc_F836
00011C10 7600                       		moveq	#0,d3
00011C12 1628 0014                  		move.b	obActWid(a0),d3
00011C16 4A68 0010                  		tst.w	obVelX(a0)
00011C1A 6B00                       		bmi.s	loc_F82C
00011C1C 6100 0000                  		bsr.w	ObjHitWallRight
00011C20 4A41                       		tst.w	d1
00011C22 6A00                       		bpl.s	loc_F836
00011C24                            
00011C24                            loc_F828:
00011C24 7001                       		moveq	#1,d0
00011C26 4E75                       		rts	
00011C28                            ; ===========================================================================
00011C28                            
00011C28                            loc_F82C:
00011C28 4643                       		not.w	d3
00011C2A 6100 0000                  		bsr.w	ObjHitWallLeft
00011C2E 4A41                       		tst.w	d1
00011C30 6BF2                       		bmi.s	loc_F828
00011C32                            
00011C32                            loc_F836:
00011C32 7000                       		moveq	#0,d0
00011C34 4E75                       		rts	
00011C36                            ; End of function Yad_ChkWall
00011C36                            
00011C36                            ; ===========================================================================
00011C36                            ; ---------------------------------------------------------------------------
00011C36                            ; Object 50 - Yadrin enemy (SYZ)
00011C36                            ; ---------------------------------------------------------------------------
00011C36                            
00011C36                            Yadrin:
00011C36 7000                       		moveq	#0,d0
00011C38 1028 0024                  		move.b	obRoutine(a0),d0
00011C3C 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011C40 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011C44                            ; ===========================================================================
00011C44 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011C46 0000                       		dc.w Yad_Action-Yad_Index
00011C48                            
00011C48 =00000030                  yad_timedelay:	equ $30
00011C48                            ; ===========================================================================
00011C48                            
00011C48                            Yad_Main:	; Routine 0
00011C48 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011C50 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011C56 117C 0004 0001             		move.b	#4,obRender(a0)
00011C5C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011C62 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011C68 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011C6E 117C 0008 0017             		move.b	#8,obWidth(a0)
00011C74 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011C7A 6100 DD5A                  		bsr.w	ObjectFall
00011C7E 6100 0000                  		bsr.w	ObjFloorDist
00011C82 4A41                       		tst.w	d1
00011C84 6A00                       		bpl.s	locret_F89E
00011C86 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011C8A 317C 0000 0012             		move.w	#0,obVelY(a0)
00011C90 5428 0024                  		addq.b	#2,obRoutine(a0)
00011C94 0868 0000 0022             		bchg	#0,obStatus(a0)
00011C9A                            
00011C9A                            	locret_F89E:
00011C9A 4E75                       		rts	
00011C9C                            ; ===========================================================================
00011C9C                            
00011C9C                            Yad_Action:	; Routine 2
00011C9C 7000                       		moveq	#0,d0
00011C9E 1028 0025                  		move.b	ob2ndRout(a0),d0
00011CA2 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011CA6 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011CAA 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011CB0 6100 AE32                  		bsr.w	AnimateSprite
00011CB4 6000 FCF6                  		bra.w	RememberState
00011CB8                            ; ===========================================================================
00011CB8 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011CBA 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011CBC                            ; ===========================================================================
00011CBC                            
00011CBC                            Yad_Move:
00011CBC 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011CC0 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011CC2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011CC6 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011CCC 117C 0001 001C             		move.b	#1,obAnim(a0)
00011CD2 0868 0000 0022             		bchg	#0,obStatus(a0)
00011CD8 6600                       		bne.s	locret_F8E2
00011CDA 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011CDE                            
00011CDE                            	locret_F8E2:
00011CDE 4E75                       		rts	
00011CE0                            ; ===========================================================================
00011CE0                            
00011CE0                            Yad_FixToFloor:
00011CE0 6100 DD2C                  		bsr.w	SpeedToPos
00011CE4 6100 0000                  		bsr.w	ObjFloorDist
00011CE8 0C41 FFF8                  		cmpi.w	#-8,d1
00011CEC 6D00                       		blt.s	Yad_Pause
00011CEE 0C41 000C                  		cmpi.w	#$C,d1
00011CF2 6C00                       		bge.s	Yad_Pause
00011CF4 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011CF8 6100 FF0A                  		bsr.w	Yad_ChkWall
00011CFC 6600                       		bne.s	Yad_Pause
00011CFE 4E75                       		rts	
00011D00                            ; ===========================================================================
00011D00                            
00011D00                            Yad_Pause:
00011D00 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011D04 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011D0A 317C 0000 0010             		move.w	#0,obVelX(a0)
00011D10 117C 0000 001C             		move.b	#0,obAnim(a0)
00011D16 4E75                       		rts	
00011D16 4E75                       		rts	
00011D18                            		include	"_anim\Yadrin.asm"
00011D18                            ; ---------------------------------------------------------------------------
00011D18                            ; Animation script - Yadrin enemy
00011D18                            ; ---------------------------------------------------------------------------
00011D18 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011D1A 0000                       		dc.w @walk-Ani_Yad
00011D1C                            
00011D1C 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011D20 00                         		even
00011D20 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011D2E                            		even
00011D2E                            		even
00011D2E                            Map_Yad:	include	"_maps\Yadrin.asm"
00011D2E                            ; --------------------------------------------------------------------------------
00011D2E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011D2E                            ; --------------------------------------------------------------------------------
00011D2E                            
00011D2E                            SME_4WhIu:	
00011D2E 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011D32 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011D36 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011D3A 09                         SME_4WhIu_C:	dc.b 9	
00011D3B F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011D40 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011D45 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011D4A FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011D4F FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011D54 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011D59 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011D5E F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011D63 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011D68 09                         SME_4WhIu_3A:	dc.b 9	
00011D69 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011D6E FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011D73 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011D78 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011D7D FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011D82 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011D87 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011D8C EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011D91 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011D96 0C                         SME_4WhIu_68:	dc.b $C	
00011D97 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011D9C FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011DA1 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011DA6 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011DAB FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011DB0 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011DB5 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011DBA FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011DBF FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011DC4 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011DC9 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011DCE 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011DD3 0C                         SME_4WhIu_A5:	dc.b $C	
00011DD4 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011DD9 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011DDE FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011DE3 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011DE8 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011DED F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011DF2 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011DF7 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011DFC FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011E01 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011E06 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011E0B 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011E10 05                         SME_4WhIu_E2:	dc.b 5	
00011E11 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011E16 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011E1B EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011E20 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011E25 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011E2A 05                         SME_4WhIu_FC:	dc.b 5	
00011E2B F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011E30 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011E35 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011E3A F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011E3F 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011E44                            		even
00011E44                            		even
00011E44                            
00011E44                            		include	"_incObj\sub SolidObject.asm"
00011E44                            ; ---------------------------------------------------------------------------
00011E44                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011E44                            ;
00011E44                            ; input:
00011E44                            ;	d1 = width
00011E44                            ;	d2 = height / 2 (when jumping)
00011E44                            ;	d3 = height / 2 (when walking)
00011E44                            ;	d4 = x-axis position
00011E44                            ; ---------------------------------------------------------------------------
00011E44                            
00011E44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011E44                            
00011E44                            
00011E44                            SolidObject:
00011E44 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011E48 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011E4C 3401                       		move.w	d1,d2
00011E4E D442                       		add.w	d2,d2
00011E50 43F8 D000                  		lea	(v_player).w,a1
00011E54 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011E5A 6600                       		bne.s	@leave		; if yes, branch
00011E5C 3029 0008                  		move.w	obX(a1),d0
00011E60 9068 0008                  		sub.w	obX(a0),d0
00011E64 D041                       		add.w	d1,d0
00011E66 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011E68 B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011E6A 6500                       		bcs.s	@stand		; if not, branch
00011E6C                            
00011E6C                            	@leave:
00011E6C 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011E72 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011E78 4228 0025                  		clr.b	obSolid(a0)
00011E7C 7800                       		moveq	#0,d4
00011E7E 4E75                       		rts	
00011E80                            
00011E80                            	@stand:
00011E80 3404                       		move.w	d4,d2
00011E82 4EB9 0000 9804             		jsr	MvSonicOnPtfm
00011E88 7800                       		moveq	#0,d4
00011E8A 4E75                       		rts	
00011E8C                            ; ===========================================================================
00011E8C                            
00011E8C                            SolidObject71:
00011E8C 4A28 0025                  		tst.b	obSolid(a0)
00011E90 6700 0000                  		beq.w	loc_FAD0
00011E94 3401                       		move.w	d1,d2
00011E96 D442                       		add.w	d2,d2
00011E98 43F8 D000                  		lea	(v_player).w,a1
00011E9C 0829 0001 0022             		btst	#1,obStatus(a1)
00011EA2 6600                       		bne.s	@leave
00011EA4 3029 0008                  		move.w	obX(a1),d0
00011EA8 9068 0008                  		sub.w	obX(a0),d0
00011EAC D041                       		add.w	d1,d0
00011EAE 6B00                       		bmi.s	@leave
00011EB0 B042                       		cmp.w	d2,d0
00011EB2 6500                       		bcs.s	@stand
00011EB4                            
00011EB4                            	@leave:
00011EB4 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011EBA 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011EC0 4228 0025                  		clr.b	obSolid(a0)
00011EC4 7800                       		moveq	#0,d4
00011EC6 4E75                       		rts	
00011EC8                            
00011EC8                            	@stand:
00011EC8 3404                       		move.w	d4,d2
00011ECA 4EB9 0000 9804             		jsr	MvSonicOnPtfm
00011ED0 7800                       		moveq	#0,d4
00011ED2 4E75                       		rts	
00011ED4                            ; ===========================================================================
00011ED4                            
00011ED4                            SolidObject2F:
00011ED4 43F8 D000                  		lea	(v_player).w,a1
00011ED8 4A28 0001                  		tst.b	obRender(a0)
00011EDC 6A00 0000                  		bpl.w	Solid_Ignore
00011EE0 3029 0008                  		move.w	obX(a1),d0
00011EE4 9068 0008                  		sub.w	obX(a0),d0
00011EE8 D041                       		add.w	d1,d0
00011EEA 6B00 0000                  		bmi.w	Solid_Ignore
00011EEE 3601                       		move.w	d1,d3
00011EF0 D643                       		add.w	d3,d3
00011EF2 B043                       		cmp.w	d3,d0
00011EF4 6200 0000                  		bhi.w	Solid_Ignore
00011EF8 3A00                       		move.w	d0,d5
00011EFA 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011F00 6700                       		beq.s	@notflipped	; if not, branch
00011F02 4645                       		not.w	d5
00011F04 DA43                       		add.w	d3,d5
00011F06                            
00011F06                            	@notflipped:
00011F06 E24D                       		lsr.w	#1,d5
00011F08 7600                       		moveq	#0,d3
00011F0A 1632 5000                  		move.b	(a2,d5.w),d3
00011F0E 9612                       		sub.b	(a2),d3
00011F10 3A28 000C                  		move.w	obY(a0),d5
00011F14 9A43                       		sub.w	d3,d5
00011F16 1629 0016                  		move.b	obHeight(a1),d3
00011F1A 4883                       		ext.w	d3
00011F1C D443                       		add.w	d3,d2
00011F1E 3629 000C                  		move.w	obY(a1),d3
00011F22 9645                       		sub.w	d5,d3
00011F24 5843                       		addq.w	#4,d3
00011F26 D642                       		add.w	d2,d3
00011F28 6B00 0000                  		bmi.w	Solid_Ignore
00011F2C 3802                       		move.w	d2,d4
00011F2E D844                       		add.w	d4,d4
00011F30 B644                       		cmp.w	d4,d3
00011F32 6400 0000                  		bcc.w	Solid_Ignore
00011F36 6000 0000                  		bra.w	loc_FB0E
00011F3A                            ; ===========================================================================
00011F3A                            
00011F3A                            Solid_ChkEnter:
00011F3A 4A28 0001                  		tst.b	obRender(a0)
00011F3E 6A00 0000                  		bpl.w	Solid_Ignore
00011F42                            
00011F42                            loc_FAD0:
00011F42 43F8 D000                  		lea	(v_player).w,a1
00011F46 3029 0008                  		move.w	obX(a1),d0
00011F4A 9068 0008                  		sub.w	obX(a0),d0
00011F4E D041                       		add.w	d1,d0
00011F50 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011F54 3601                       		move.w	d1,d3
00011F56 D643                       		add.w	d3,d3
00011F58 B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011F5A 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011F5E 1629 0016                  		move.b	obHeight(a1),d3
00011F62 4883                       		ext.w	d3
00011F64 D443                       		add.w	d3,d2
00011F66 3629 000C                  		move.w	obY(a1),d3
00011F6A 9668 000C                  		sub.w	obY(a0),d3
00011F6E 5843                       		addq.w	#4,d3
00011F70 D642                       		add.w	d2,d3
00011F72 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011F76 3802                       		move.w	d2,d4
00011F78 D844                       		add.w	d4,d4
00011F7A B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011F7C 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011F80                            
00011F80                            loc_FB0E:
00011F80 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011F84 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011F88 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011F8E 6400 0000                  			bcc.w	Solid_Debug
00011F92 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011F96 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011F9A 3A00                       		move.w	d0,d5
00011F9C B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011F9E 6400                       		bcc.s	@isright	; if yes, branch
00011FA0 D241                       		add.w	d1,d1
00011FA2 9041                       		sub.w	d1,d0
00011FA4 3A00                       		move.w	d0,d5
00011FA6 4445                       		neg.w	d5
00011FA8                            
00011FA8                            	@isright:
00011FA8 3203                       		move.w	d3,d1
00011FAA B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011FAC 6400                       		bcc.s	@isbelow	; if yes, branch
00011FAE                            
00011FAE 5943                       		subq.w	#4,d3
00011FB0 9644                       		sub.w	d4,d3
00011FB2 3203                       		move.w	d3,d1
00011FB4 4441                       		neg.w	d1
00011FB6                            
00011FB6                            	@isbelow:
00011FB6 BA41                       		cmp.w	d1,d5
00011FB8 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011FBC 0C41 0004                  		cmpi.w	#4,d1
00011FC0 6300                       		bls.s	Solid_SideAir
00011FC2 4A40                       		tst.w	d0		; where is Sonic?
00011FC4 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011FC6 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011FC8 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011FCC 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011FCE 6000                       		bra.s	Solid_Left
00011FD0                            ; ===========================================================================
00011FD0                            
00011FD0                            Solid_Right:
00011FD0 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011FD4 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011FD6                            
00011FD6                            Solid_Left:
00011FD6 337C 0000 0020             		move.w	#0,obInertia(a1)
00011FDC 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011FE2                            
00011FE2                            Solid_Centre:
00011FE2 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011FE6 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011FEC 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011FEE 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011FF4 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011FFA 7801                       		moveq	#1,d4		; return side collision
00011FFC 4E75                       		rts	
00011FFE                            ; ===========================================================================
00011FFE                            
00011FFE                            Solid_SideAir:
00011FFE 6100                       		bsr.s	Solid_NotPushing
00012000 7801                       		moveq	#1,d4		; return side collision
00012002 4E75                       		rts	
00012004                            ; ===========================================================================
00012004                            
00012004                            Solid_Ignore:
00012004 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
0001200A 6700                       		beq.s	Solid_Debug	; if not, branch
0001200C 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00012012 6700                       		beq.s	Solid_NotPushing	; if so, branch
00012014 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
0001201A 6700                       		beq.s	Solid_NotPushing	; if so, branch
0001201C 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00012022 6700                       		beq.s	Solid_NotPushing	; if so, branch
00012024 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
0001202A                            
0001202A                            
0001202A                            Solid_NotPushing:
0001202A 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00012030 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00012036                            
00012036                            Solid_Debug:
00012036 7800                       		moveq	#0,d4		; return no collision
00012038 4E75                       		rts	
0001203A                            ; ===========================================================================
0001203A                            
0001203A                            Solid_TopBottom:
0001203A 4A43                       		tst.w	d3		; is Sonic below the object?
0001203C 6B00                       		bmi.s	Solid_Below	; if yes, branch
0001203E 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00012042 6500                       		bcs.s	Solid_Landed	; if yes, branch
00012044 60BE                       		bra.s	Solid_Ignore
00012046                            ; ===========================================================================
00012046                            
00012046                            Solid_Below:
00012046 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
0001204A 6700                       		beq.s	Solid_Squash	; if not, branch
0001204C 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
0001204E 4A43                       		tst.w	d3		; is Sonic above the object?
00012050 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00012052 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00012056 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
0001205C                            
0001205C                            Solid_TopBtmAir:
0001205C 78FF                       		moveq	#-1,d4
0001205E 4E75                       		rts	
00012060                            ; ===========================================================================
00012060                            
00012060                            Solid_Squash:
00012060 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00012066 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00012068 2F08                       		move.l	a0,-(sp)
0001206A 2049                       		movea.l	a1,a0
0001206C 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00012072 205F                       		movea.l	(sp)+,a0
00012074 78FF                       		moveq	#-1,d4
00012076 4E75                       		rts	
00012078                            ; ===========================================================================
00012078                            
00012078                            Solid_Landed:
00012078 5943                       		subq.w	#4,d3
0001207A 7200                       		moveq	#0,d1
0001207C 1228 0014                  		move.b	obActWid(a0),d1
00012080 3401                       		move.w	d1,d2
00012082 D442                       		add.w	d2,d2
00012084 D269 0008                  		add.w	obX(a1),d1
00012088 9268 0008                  		sub.w	obX(a0),d1
0001208C 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
0001208E B242                       		cmp.w	d2,d1		; is Sonic left of object?
00012090 6400                       		bcc.s	Solid_Miss	; if yes, branch
00012092 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00012096 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00012098 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
0001209C 5369 000C                  		subq.w	#1,obY(a1)
000120A0 6100                       		bsr.s	Solid_ResetFloor
000120A2 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
000120A8 08E8 0003 0022             		bset	#3,obStatus(a0)
000120AE 78FF                       		moveq	#-1,d4		; return top/bottom collision
000120B0 4E75                       		rts	
000120B2                            ; ===========================================================================
000120B2                            
000120B2                            Solid_Miss:
000120B2 7800                       		moveq	#0,d4
000120B4 4E75                       		rts	
000120B6                            ; End of function SolidObject
000120B6                            
000120B6                            
000120B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000120B6                            
000120B6                            
000120B6                            Solid_ResetFloor:
000120B6 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
000120BC 6700                       		beq.s	@notonobj	; if not, branch
000120BE                            
000120BE 7000                       		moveq	#0,d0
000120C0 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
000120C4 ED48                       		lsl.w	#6,d0
000120C6 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
000120CC 2440                       		movea.l	d0,a2
000120CE 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
000120D4 422A 0025                  		clr.b	obSolid(a2)
000120D8                            
000120D8                            	@notonobj:
000120D8 3008                       		move.w	a0,d0
000120DA 0440 D000                  		subi.w	#$D000,d0
000120DE EC48                       		lsr.w	#6,d0
000120E0 0240 007F                  		andi.w	#$7F,d0
000120E4 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
000120E8 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
000120EE 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
000120F4 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
000120FA 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00012100 6700                       		beq.s	@notinair	; if not, branch
00012102 2F08                       		move.l	a0,-(sp)
00012104 2049                       		movea.l	a1,a0
00012106 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
0001210C 205F                       		movea.l	(sp)+,a0
0001210E                            
0001210E                            	@notinair:
0001210E 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00012114 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
0001211A 4E75                       		rts	
0001211C                            ; End of function Solid_ResetFloor
0001211C                            ; End of function Solid_ResetFloor
0001211C                            
0001211C                            		include	"_incObj\51 Smashable Green Block.asm"
0001211C                            ; ---------------------------------------------------------------------------
0001211C                            ; Object 51 - smashable	green block (MZ)
0001211C                            ; ---------------------------------------------------------------------------
0001211C                            
0001211C                            SmashBlock:
0001211C 7000                       		moveq	#0,d0
0001211E 1028 0024                  		move.b	obRoutine(a0),d0
00012122 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00012126 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
0001212A 6000 F880                  		bra.w	RememberState
0001212E                            ; ===========================================================================
0001212E 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00012130 0000                       		dc.w Smab_Solid-Smab_Index
00012132 0000                       		dc.w Smab_Points-Smab_Index
00012134                            ; ===========================================================================
00012134                            
00012134                            Smab_Main:	; Routine 0
00012134 5428 0024                  		addq.b	#2,obRoutine(a0)
00012138 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00012140 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00012146 117C 0004 0001             		move.b	#4,obRender(a0)
0001214C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012152 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012158 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001215E                            
0001215E                            Smab_Solid:	; Routine 2
0001215E                            
0001215E =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
0001215E =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
0001215E                            
0001215E 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00012164 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
0001216A 323C 001B                  		move.w	#$1B,d1
0001216E 343C 0010                  		move.w	#$10,d2
00012172 363C 0011                  		move.w	#$11,d3
00012176 3828 0008                  		move.w	obX(a0),d4
0001217A 6100 FCC8                  		bsr.w	SolidObject
0001217E 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00012184 6600                       		bne.s	@smash		; if yes, branch
00012186                            
00012186                            	@notspinning:
00012186 4E75                       		rts	
00012188                            ; ===========================================================================
00012188                            
00012188                            @smash:
00012188 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
0001218E 66F6                       		bne.s	@notspinning	; if not, branch
00012190 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00012196 08E9 0002 0022             		bset	#2,obStatus(a1)
0001219C 137C 000E 0016             		move.b	#$E,obHeight(a1)
000121A2 137C 0007 0017             		move.b	#7,obWidth(a1)
000121A8 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
000121AE 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
000121B4 08E9 0001 0022             		bset	#1,obStatus(a1)
000121BA 08A9 0003 0022             		bclr	#3,obStatus(a1)
000121C0 137C 0002 0024             		move.b	#2,obRoutine(a1)
000121C6 08A8 0003 0022             		bclr	#3,obStatus(a0)
000121CC 4228 0025                  		clr.b	obSolid(a0)
000121D0 117C 0001 001A             		move.b	#1,obFrame(a0)
000121D6 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
000121DC 7203                       		moveq	#3,d1		; set number of	fragments to 4
000121DE 343C 0038                  		move.w	#$38,d2
000121E2 6100 D3F2                  		bsr.w	SmashObject
000121E6 6100 DCC6                  		bsr.w	FindFreeObj
000121EA 6600                       		bne.s	Smab_Points
000121EC 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
000121F0 3368 0008 0008             		move.w	obX(a0),obX(a1)
000121F6 3368 000C 000C             		move.w	obY(a0),obY(a1)
000121FC 3438 F7D0                  		move.w	(v_itembonus).w,d2
00012200 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00012204 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00012208 6500                       		bcs.s	@bonus		; if yes, branch
0001220A 7406                       		moveq	#6,d2		; set cap for points
0001220C                            
0001220C                            	@bonus:
0001220C 7000                       		moveq	#0,d0
0001220E 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00012212 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00012218 6500                       		bcs.s	@givepoints	; if not, branch
0001221A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001221E 740A                       		moveq	#10,d2
00012220                            
00012220                            	@givepoints:
00012220 4EB9 0000 0000             		jsr	(AddPoints).l
00012226 E24A                       		lsr.w	#1,d2
00012228 1342 001A                  		move.b	d2,obFrame(a1)
0001222C                            
0001222C                            Smab_Points:	; Routine 4
0001222C 6100 D7E0                  		bsr.w	SpeedToPos
00012230 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00012236 6100 D7EA                  		bsr.w	DisplaySprite
0001223A 4A28 0001                  		tst.b	obRender(a0)
0001223E 6A00 D822                  		bpl.w	DeleteObject
00012242 4E75                       		rts	
00012244                            ; ===========================================================================
00012244 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
00012248 FF00 FF00                  		dc.w -$100, -$100
0001224C 0200 FE00                  		dc.w $200, -$200
00012250 0100 FF00                  		dc.w $100, -$100
00012254                            
00012254 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00012254 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
0001225C                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
0001225C                            ; --------------------------------------------------------------------------------
0001225C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001225C                            ; --------------------------------------------------------------------------------
0001225C                            
0001225C                            SME_TrHmw:	
0001225C 0000 0000                  		dc.w SME_TrHmw_6-SME_TrHmw, SME_TrHmw_1B-SME_TrHmw	
00012260 0000                       		dc.w SME_TrHmw_30-SME_TrHmw	
00012262 04                         SME_TrHmw_6:	dc.b 4	
00012263 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00012268 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
0001226D 0005 0000 E0               		dc.b 0, 5, 0, 0, $E0	
00012272 F005 0000 E0               		dc.b $F0, 5, 0, 0, $E0	
00012277 04                         SME_TrHmw_1B:	dc.b 4	
00012278 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
0001227D 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00012282 0005 0000 E0               		dc.b 0, 5, 0, 0, $E0	
00012287 F005 0000 E0               		dc.b $F0, 5, 0, 0, $E0	
0001228C 00                         SME_TrHmw_30:	dc.b 0	
0001228E 00                         		even
0001228E 00                         		even
0001228E                            
0001228E                            		include	"_incObj\52 Moving Blocks.asm"
0001228E                            ; ---------------------------------------------------------------------------
0001228E                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0001228E                            ; ---------------------------------------------------------------------------
0001228E                            
0001228E                            MovingBlock:
0001228E 7000                       		moveq	#0,d0
00012290 1028 0024                  		move.b	obRoutine(a0),d0
00012294 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
00012298 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
0001229C                            ; ===========================================================================
0001229C 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
0001229E 0000                       		dc.w MBlock_Platform-MBlock_Index
000122A0 0000                       		dc.w MBlock_StandOn-MBlock_Index
000122A2                            
000122A2 =00000030                  mblock_origX:	equ $30
000122A2 =00000032                  mblock_origY:	equ $32
000122A2                            
000122A2 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
000122A4 2001                       		dc.b $20, 1
000122A6 2002                       		dc.b $20, 2
000122A8 4003                       		dc.b $40, 3
000122AA 3004                       		dc.b $30, 4
000122AC                            ; ===========================================================================
000122AC                            
000122AC                            MBlock_Main:	; Routine 0
000122AC 5428 0024                  		addq.b	#2,obRoutine(a0)
000122B0 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
000122B8 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
000122BE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000122C4 6600                       		bne.s	loc_FE44
000122C6 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
000122CE 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
000122D4 117C 0007 0016             		move.b	#7,obHeight(a0)
000122DA                            
000122DA                            loc_FE44:
000122DA 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000122E0 6600                       		bne.s	loc_FE60
000122E2 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
000122E8 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
000122EE 6700                       		beq.s	loc_FE60	; if yes, branch
000122F0 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
000122F6                            
000122F6                            loc_FE60:
000122F6 117C 0004 0001             		move.b	#4,obRender(a0)
000122FC 7000                       		moveq	#0,d0
000122FE 1028 0028                  		move.b	obSubtype(a0),d0
00012302 E648                       		lsr.w	#3,d0
00012304 0240 001E                  		andi.w	#$1E,d0
00012308 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
0001230C 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012310 115A 001A                  		move.b	(a2)+,obFrame(a0)
00012314 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001231A 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012320 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00012326 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001232C                            
0001232C                            MBlock_Platform: ; Routine 2
0001232C 6100 0000                  		bsr.w	MBlock_Move
00012330 7200                       		moveq	#0,d1
00012332 1228 0014                  		move.b	obActWid(a0),d1
00012336 4EB9 0000 9132             		jsr	(PlatformObject).l
0001233C 6000                       		bra.s	MBlock_ChkDel
0001233E                            ; ===========================================================================
0001233E                            
0001233E                            MBlock_StandOn:	; Routine 4
0001233E 7200                       		moveq	#0,d1
00012340 1228 0014                  		move.b	obActWid(a0),d1
00012344 4EB9 0000 92A6             		jsr	(ExitPlatform).l
0001234A 3F28 0008                  		move.w	obX(a0),-(sp)
0001234E 6100 0000                  		bsr.w	MBlock_Move
00012352 341F                       		move.w	(sp)+,d2
00012354 4EB9 0000 9810             		jsr	(MvSonicOnPtfm2).l
0001235A                            
0001235A                            MBlock_ChkDel:
00012378 6000 D6A8                  		bra.w	DisplaySprite
0001237C                            ; ===========================================================================
0001237C                            
0001237C                            MBlock_Move:
0001237C 7000                       		moveq	#0,d0
0001237E 1028 0028                  		move.b	obSubtype(a0),d0
00012382 0240 000F                  		andi.w	#$F,d0
00012386 D040                       		add.w	d0,d0
00012388 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
0001238C 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
00012390                            ; ===========================================================================
00012390 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
00012394 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
00012398 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
0001239C 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
000123A0 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
000123A4 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
000123A6                            ; ===========================================================================
000123A6                            
000123A6                            MBlock_Type00:
000123A6 4E75                       		rts	
000123A8                            ; ===========================================================================
000123A8                            
000123A8                            MBlock_Type01:
000123A8 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000123AC 323C 0060                  		move.w	#$60,d1
000123B0 0828 0000 0022             		btst	#0,obStatus(a0)
000123B6 6700                       		beq.s	loc_FF26
000123B8 4440                       		neg.w	d0
000123BA D041                       		add.w	d1,d0
000123BC                            
000123BC                            loc_FF26:
000123BC 3228 0030                  		move.w	mblock_origX(a0),d1
000123C0 9240                       		sub.w	d0,d1
000123C2 3141 0008                  		move.w	d1,obX(a0)
000123C6 4E75                       		rts	
000123C8                            ; ===========================================================================
000123C8                            
000123C8                            MBlock_Type02:
000123C8 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
000123CE 6600                       		bne.s	MBlock_02_Wait
000123D0 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
000123D4                            
000123D4                            MBlock_02_Wait:
000123D4 4E75                       		rts	
000123D6                            ; ===========================================================================
000123D6                            
000123D6                            MBlock_Type03:
000123D6 7600                       		moveq	#0,d3
000123D8 1628 0014                  		move.b	obActWid(a0),d3
000123DC 6100 0000                  		bsr.w	ObjHitWallRight
000123E0 4A41                       		tst.w	d1		; has the platform hit a wall?
000123E2 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
000123E4 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
000123E8 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000123EE 4E75                       		rts	
000123F0                            ; ===========================================================================
000123F0                            
000123F0                            MBlock_03_End:
000123F0 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
000123F4 4E75                       		rts	
000123F6                            ; ===========================================================================
000123F6                            
000123F6                            MBlock_Type05:
000123F6 7600                       		moveq	#0,d3
000123F8 1628 0014                  		move.b	obActWid(a0),d3
000123FC 6100 0000                  		bsr.w	ObjHitWallRight
00012400 4A41                       		tst.w	d1		; has the platform hit a wall?
00012402 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
00012404 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012408 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
0001240E 4E75                       		rts	
00012410                            ; ===========================================================================
00012410                            
00012410                            MBlock_05_End:
00012410 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
00012414 4E75                       		rts	
00012416                            ; ===========================================================================
00012416                            
00012416                            MBlock_Type06:
00012416 6100 D5F6                  		bsr.w	SpeedToPos
0001241A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00012420 6100 0000                  		bsr.w	ObjFloorDist
00012424 4A41                       		tst.w	d1		; has platform hit the floor?
00012426 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001242A D368 000C                  		add.w	d1,obY(a0)
0001242E 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00012432 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
00012436                            
00012436                            locret_FFA0:
00012436 4E75                       		rts	
00012438                            ; ===========================================================================
00012438                            
00012438                            MBlock_Type07:
00012438 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
0001243C 6700                       		beq.s	MBlock_07_ChkDel
0001243E 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00012442                            
00012442                            MBlock_07_ChkDel:
00012442 588F                       		addq.l	#4,sp
00012462 4E75                       		rts	
00012464                            ; ===========================================================================
00012464                            
00012464                            MBlock_Type08:
00012464 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012468 323C 0080                  		move.w	#$80,d1
0001246C 0828 0000 0022             		btst	#0,obStatus(a0)
00012472 6700                       		beq.s	loc_FFE2
00012474 4440                       		neg.w	d0
00012476 D041                       		add.w	d1,d0
00012478                            
00012478                            loc_FFE2:
00012478 3228 0032                  		move.w	mblock_origY(a0),d1
0001247C 9240                       		sub.w	d0,d1
0001247E 3141 000C                  		move.w	d1,obY(a0)
00012482 4E75                       		rts	
00012484                            ; ===========================================================================
00012484                            
00012484                            MBlock_Type0A:
00012484 7600                       		moveq	#0,d3
00012486 1628 0014                  		move.b	obActWid(a0),d3
0001248A D643                       		add.w	d3,d3
0001248C 7208                       		moveq	#8,d1
0001248E 0828 0000 0022             		btst	#0,obStatus(a0)
00012494 6700                       		beq.s	loc_10004
00012496 4441                       		neg.w	d1
00012498 4443                       		neg.w	d3
0001249A                            
0001249A                            loc_10004:
0001249A 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0001249E 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
000124A0 3028 0008                  		move.w	obX(a0),d0
000124A4 9068 0030                  		sub.w	mblock_origX(a0),d0
000124A8 B043                       		cmp.w	d3,d0
000124AA 6700                       		beq.s	MBlock_0A_Wait
000124AC D368 0008                  		add.w	d1,obX(a0)	; move platform
000124B0 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000124B6 4E75                       		rts	
000124B8                            ; ===========================================================================
000124B8                            
000124B8                            MBlock_0A_Wait:
000124B8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000124BC 6600                       		bne.s	locret_1002E	; if time remains, branch
000124BE 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000124C4                            
000124C4                            locret_1002E:
000124C4 4E75                       		rts	
000124C6                            ; ===========================================================================
000124C6                            
000124C6                            MBlock_0A_Back:
000124C6 3028 0008                  		move.w	obX(a0),d0
000124CA 9068 0030                  		sub.w	mblock_origX(a0),d0
000124CE 6700                       		beq.s	MBlock_0A_Reset
000124D0 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
000124D4 4E75                       		rts	
000124D6                            ; ===========================================================================
000124D6                            
000124D6                            MBlock_0A_Reset:
000124D6 4268 0036                  		clr.w	$36(a0)
000124DA 5328 0028                  		subq.b	#1,obSubtype(a0)
000124DE 4E75                       		rts	
000124DE 4E75                       		rts	
000124E0                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
000124E0                            ; ---------------------------------------------------------------------------
000124E0                            ; Sprite mappings - moving blocks (MZ, SBZ)
000124E0                            ; ---------------------------------------------------------------------------
000124E0                            Map_MBlock_internal:
000124E0 0000                       		dc.w @mz1-Map_MBlock_internal
000124E2 0000                       		dc.w @mz2-Map_MBlock_internal
000124E4 0000                       		dc.w @sbz-Map_MBlock_internal
000124E6 0000                       		dc.w @sbzwide-Map_MBlock_internal
000124E8 0000                       		dc.w @mz3-Map_MBlock_internal
000124EA 01                         @mz1:		dc.b 1
000124EB F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000124F0 02                         @mz2:		dc.b 2
000124F1 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000124F6 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000124FB 04                         @sbz:		dc.b 4
000124FC F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00012501 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00012506 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001250B 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00012510 04                         @sbzwide:	dc.b 4
00012511 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00012516 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001251B F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00012520 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00012525 03                         @mz3:		dc.b 3
00012526 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001252B F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012530 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00012536 00                         		even
00012536 00                         		even
00012536                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
00012536                            ; ---------------------------------------------------------------------------
00012536                            ; Sprite mappings - moving block (LZ)
00012536                            ; ---------------------------------------------------------------------------
00012536                            Map_MBlockLZ_internal:
00012536 0000                       		dc.w @0-Map_MBlockLZ_internal
00012538 01                         @0:		dc.b 1
00012539 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001253E                            		even
0001253E                            		even
0001253E                            
0001253E                            		include	"_incObj\55 Basaran.asm"
0001253E                            ; ---------------------------------------------------------------------------
0001253E                            ; Object 55 - Basaran enemy (MZ)
0001253E                            ; ---------------------------------------------------------------------------
0001253E                            
0001253E                            Basaran:
0001253E 7000                       		moveq	#0,d0
00012540 1028 0024                  		move.b	obRoutine(a0),d0
00012544 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
00012548 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
0001254C                            ; ===========================================================================
0001254C 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
0001254E 0000                       		dc.w Bas_Action-Bas_Index
00012550                            ; ===========================================================================
00012550                            
00012550                            Bas_Main:	; Routine 0
00012550 5428 0024                  		addq.b	#2,obRoutine(a0)
00012554 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
0001255C 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00012562 117C 0004 0001             		move.b	#4,obRender(a0)
00012568 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001256E 317C 0100 0018             		move.w	#$100,obPriority(a0)
00012574 117C 000B 0020             		move.b	#$B,obColType(a0)
0001257A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012580                            
00012580                            Bas_Action:	; Routine 2
00012580 7000                       		moveq	#0,d0
00012582 1028 0025                  		move.b	ob2ndRout(a0),d0
00012586 323B 0000                  		move.w	@index(pc,d0.w),d1
0001258A 4EBB 1000                  		jsr	@index(pc,d1.w)
0001258E 43F9 0000 0000             		lea	(Ani_Bas).l,a1
00012594 6100 A54E                  		bsr.w	AnimateSprite
00012598 6000 F412                  		bra.w	RememberState
0001259C                            ; ===========================================================================
0001259C 0000                       @index:		dc.w @dropcheck-@index
0001259E 0000                       		dc.w @dropfly-@index
000125A0 0000                       		dc.w @flapsound-@index
000125A2 0000                       		dc.w @flyup-@index
000125A4                            ; ===========================================================================
000125A4                            
000125A4                            @dropcheck:
000125A4 343C 0080                  		move.w	#$80,d2
000125A8 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000125AC 6400                       		bcc.s	@nodrop		; if not, branch
000125AE 3038 D00C                  		move.w	(v_player+obY).w,d0
000125B2 3140 0036                  		move.w	d0,$36(a0)
000125B6 9068 000C                  		sub.w	obY(a0),d0
000125BA 6500                       		bcs.s	@nodrop
000125BC 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
000125C0 6400                       		bcc.s	@nodrop		; if not, branch
000125C2 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000125C6 6600                       		bne.s	@nodrop		; if yes, branch
000125C8                            
000125C8 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000125CC D007                       		add.b	d7,d0
000125CE 0200 0007                  		andi.b	#7,d0
000125D2 6600                       		bne.s	@nodrop
000125D4 117C 0001 001C             		move.b	#1,obAnim(a0)
000125DA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000125DE                            
000125DE                            	@nodrop:
000125DE 4E75                       		rts	
000125E0                            ; ===========================================================================
000125E0                            
000125E0                            @dropfly:
000125E0 6100 D42C                  		bsr.w	SpeedToPos
000125E4 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
000125EA 343C 0080                  		move.w	#$80,d2
000125EE 6100 0000                  		bsr.w	@chkdistance
000125F2 3028 0036                  		move.w	$36(a0),d0
000125F6 9068 000C                  		sub.w	obY(a0),d0
000125FA 6500                       		bcs.s	@chkdel
000125FC 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00012600 6400                       		bcc.s	@dropmore	; if not, branch
00012602 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
00012606 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
0001260C 117C 0002 001C             		move.b	#2,obAnim(a0)
00012612 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012616                            
00012616                            	@dropmore:
00012616 4E75                       		rts	
00012618                            
00012618                            	@chkdel:
00012618 4A28 0001                  		tst.b	obRender(a0)
0001261C 6A00 D444                  		bpl.w	DeleteObject
00012620 4E75                       		rts	
00012622                            ; ===========================================================================
00012622                            
00012622                            @flapsound:
00012622 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012626 0200 000F                  		andi.b	#$F,d0
0001262A 6600                       		bne.s	@nosound
00012636                            
00012636                            	@nosound:
00012636 6100 D3D6                  		bsr.w	SpeedToPos
0001263A 3038 D008                  		move.w	(v_player+obX).w,d0
0001263E 9068 0008                  		sub.w	obX(a0),d0
00012642 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
00012644 4440                       		neg.w	d0
00012646                            
00012646                            	@isright:
00012646 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
0001264A 6500                       		bcs.s	@dontflyup	; if yes, branch
0001264C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012650 D007                       		add.b	d7,d0
00012652 0200 0007                  		andi.b	#7,d0
00012656 6600                       		bne.s	@dontflyup
00012658 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001265C                            
0001265C                            @dontflyup:
0001265C 4E75                       		rts	
0001265E                            ; ===========================================================================
0001265E                            
0001265E                            @flyup:
0001265E 6100 D3AE                  		bsr.w	SpeedToPos
00012662 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
00012668 6100 0000                  		bsr.w	ObjHitCeiling
0001266C 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001266E 6A00                       		bpl.s	@noceiling	; if not, branch
00012670 9368 000C                  		sub.w	d1,obY(a0)
00012674 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
0001267A 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
0001267E 4268 0012                  		clr.w	obVelY(a0)
00012682 4228 001C                  		clr.b	obAnim(a0)
00012686 4228 0025                  		clr.b	ob2ndRout(a0)
0001268A                            
0001268A                            	@noceiling:
0001268A 4E75                       		rts	
0001268C                            ; ===========================================================================
0001268C                            
0001268C                            ; Subroutine to check Sonic's distance from the basaran
0001268C                            
0001268C                            ; input:
0001268C                            ;	d2 = distance to compare
0001268C                            
0001268C                            ; output:
0001268C                            ;	d0 = distance between Sonic and basaran
0001268C                            ;	d1 = speed/direction for basaran to fly
0001268C                            
0001268C                            @chkdistance:
0001268C 323C 0100                  		move.w	#$100,d1
00012690 08E8 0000 0022             		bset	#0,obStatus(a0)
00012696 3038 D008                  		move.w	(v_player+obX).w,d0
0001269A 9068 0008                  		sub.w	obX(a0),d0
0001269E 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000126A0 4440                       		neg.w	d0
000126A2 4441                       		neg.w	d1
000126A4 08A8 0000 0022             		bclr	#0,obStatus(a0)
000126AA                            
000126AA                            	@right:
000126AA B042                       		cmp.w	d2,d0
000126AC 4E75                       		rts	
000126AE                            ; ===========================================================================
000126AE                            ; unused crap
000126AE 6100 D35E                  		bsr.w	SpeedToPos
000126B2 6100 D36E                  		bsr.w	DisplaySprite
000126B6 4A28 0001                  		tst.b	obRender(a0)
000126BA 6A00 D3A6                  		bpl.w	DeleteObject
000126BE 4E75                       		rts	
000126BE 4E75                       		rts	
000126C0                            		include	"_anim\Basaran.asm"
000126C0                            ; ---------------------------------------------------------------------------
000126C0                            ; Animation script - Basaran enemy
000126C0                            ; ---------------------------------------------------------------------------
000126C0 0000                       Ani_Bas:	dc.w @still-Ani_Bas
000126C2 0000                       		dc.w @fall-Ani_Bas
000126C4 0000                       		dc.w @fly-Ani_Bas
000126C6 0F00 FF                    @still:		dc.b $F, 0, afEnd
000126CA 00                         		even
000126CA 0F01 FF                    @fall:		dc.b $F, 1, afEnd
000126CE 00                         		even
000126CE 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
000126D4                            		even
000126D4                            		even
000126D4                            Map_Bas:	include	"_maps\Basaran.asm"
000126D4                            ; --------------------------------------------------------------------------------
000126D4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000126D4                            ; --------------------------------------------------------------------------------
000126D4                            
000126D4                            SME_RhYYA:	
000126D4 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
000126D8 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
000126DC 01                         SME_RhYYA_8:	dc.b 1	
000126DD F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
000126E2 03                         SME_RhYYA_E:	dc.b 3	
000126E3 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
000126E8 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
000126ED 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
000126F2 04                         SME_RhYYA_1E:	dc.b 4	
000126F3 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
000126F8 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
000126FD 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
00012702 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
00012707 04                         SME_RhYYA_33:	dc.b 4	
00012708 F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
0001270D 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
00012712 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
00012717 FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
0001271C                            		even
0001271C                            		even
0001271C                            
0001271C                            		include	"_incObj\56 Floating Blocks and Doors.asm"
0001271C                            ; ---------------------------------------------------------------------------
0001271C                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
0001271C                            ; ---------------------------------------------------------------------------
0001271C                            
0001271C                            FloatingBlock:
0001271C 7000                       		moveq	#0,d0
0001271E 1028 0024                  		move.b	obRoutine(a0),d0
00012722 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
00012726 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
0001272A                            ; ===========================================================================
0001272A 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
0001272C 0000                       		dc.w FBlock_Action-FBlock_Index
0001272E                            
0001272E =00000034                  fb_origX:	equ $34		; original x-axis position
0001272E =00000030                  fb_origY:	equ $30		; original y-axis position
0001272E =0000003A                  fb_height:	equ $3A		; total object height
0001272E =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
0001272E                            
0001272E                            FBlock_Var:	; width/2, height/2
0001272E 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012730 2020                       		dc.b  $20, $20	; subtype 1x/9x
00012732 1020                       		dc.b  $10, $20	; subtype 2x/Ax
00012734 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
00012736 1027                       		dc.b  $10, $27	; subtype 4x/Cx
00012738 1010                       		dc.b  $10, $10	; subtype 5x/Dx
0001273A 0820                       		dc.b	8, $20	; subtype 6x/Ex
0001273C 4010                       		dc.b  $40, $10	; subtype 7x/Fx
0001273E                            ; ===========================================================================
0001273E                            
0001273E                            FBlock_Main:	; Routine 0
0001273E 5428 0024                  		addq.b	#2,obRoutine(a0)
00012742 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
0001274A 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012750 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012756 6600                       		bne.s	@notLZ
00012758 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
0001275E                            
0001275E                            	@notLZ:
0001275E 117C 0004 0001             		move.b	#4,obRender(a0)
00012764 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001276A 7000                       		moveq	#0,d0
0001276C 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
00012770 E648                       		lsr.w	#3,d0
00012772 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
00012776 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
0001277A 115A 0014                  		move.b	(a2)+,obActWid(a0)
0001277E 1152 0016                  		move.b	(a2),obHeight(a0)
00012782 E248                       		lsr.w	#1,d0
00012784 1140 001A                  		move.b	d0,obFrame(a0)
00012788 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
0001278E 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
00012794 7000                       		moveq	#0,d0
00012796 1012                       		move.b	(a2),d0
00012798 D040                       		add.w	d0,d0
0001279A 3140 003A                  		move.w	d0,fb_height(a0)
0001279E 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000127A4 6600                       			bne.s	@dontdelete
000127A6 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000127AC 6600                       			bne.s	@notatpos
000127AE 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000127B2 6700                       			beq.s	@dontdelete
000127B4 4EF9 0000 FA62             			jmp	(DeleteObject).l
000127BA                            	@notatpos:
000127BA 4228 0028                  			clr.b	obSubtype(a0)
000127BE 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000127C2 6600                       			bne.s	@dontdelete
000127C4 4EF9 0000 FA62             			jmp	(DeleteObject).l
000127CA                            	@dontdelete:
000127CA 7000                       		moveq	#0,d0
000127CC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000127D2 6700                       		beq.s	@stillnotLZ
000127D4 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
000127D8 0240 000F                  		andi.w	#$F,d0
000127DC 5140                       		subq.w	#8,d0
000127DE 6500                       		bcs.s	@stillnotLZ
000127E0 E548                       		lsl.w	#2,d0
000127E2 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
000127E6 45F2 0000                  		lea	(a2,d0.w),a2
000127EA 4A52                       		tst.w	(a2)
000127EC 6A00                       		bpl.s	@stillnotLZ
000127EE 0868 0000 0022             		bchg	#0,obStatus(a0)
000127F4                            
000127F4                            	@stillnotLZ:
000127F4 1028 0028                  		move.b	obSubtype(a0),d0
000127F8 6A00                       		bpl.s	FBlock_Action
000127FA 0200 000F                  		andi.b	#$F,d0
000127FE 1140 003C                  		move.b	d0,fb_type(a0)
00012802 117C 0005 0028             		move.b	#5,obSubtype(a0)
00012808 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
0001280E 6600                       		bne.s	@chkstate
00012810 117C 000C 0028             		move.b	#$C,obSubtype(a0)
00012816 317C 0080 003A             		move.w	#$80,fb_height(a0)
0001281C                            
0001281C                            @chkstate:
0001281C 45F8 FC00                  		lea	(v_objstate).w,a2
00012820 7000                       		moveq	#0,d0
00012822 1028 0023                  		move.b	obRespawnNo(a0),d0
00012826 6700                       		beq.s	FBlock_Action
00012828 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001282E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00012834 6700                       		beq.s	FBlock_Action
00012836 5228 0028                  		addq.b	#1,obSubtype(a0)
0001283A 4268 003A                  		clr.w	fb_height(a0)
0001283E                            
0001283E                            FBlock_Action:	; Routine 2
0001283E 3F28 0008                  		move.w	obX(a0),-(sp)
00012842 7000                       		moveq	#0,d0
00012844 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
00012848 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001284C D040                       		add.w	d0,d0
0001284E 323B 0000                  		move.w	@index(pc,d0.w),d1
00012852 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
00012856 381F                       		move.w	(sp)+,d4
00012858 4A28 0001                  		tst.b	obRender(a0)
0001285C 6A00                       		bpl.s	@chkdel
0001285E 7200                       		moveq	#0,d1
00012860 1228 0014                  		move.b	obActWid(a0),d1
00012864 0641 000B                  		addi.w	#$B,d1
00012868 7400                       		moveq	#0,d2
0001286A 1428 0016                  		move.b	obHeight(a0),d2
0001286E 3602                       		move.w	d2,d3
00012870 5243                       		addq.w	#1,d3
00012872 6100 F5D0                  		bsr.w	SolidObject
00012876                            
00012876                            	@chkdel:
00012892                            		@display:
00012892 6000 D18E                  			bra.w	DisplaySprite
00012896                            		@chkdel2:
00012896 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
0001289C 6600                       			bne.s	@delete
0001289E 4A28 0038                  			tst.b	$38(a0)
000128A2 66EE                       			bne.s	@display
000128A4                            		@delete:
000128A4 4EF9 0000 FA62             			jmp	(DeleteObject).l
000128AA                            ; ===========================================================================
000128AA 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000128AE 0000 0000                  		dc.w @type02-@index, @type03-@index
000128B2 0000 0000                  		dc.w @type04-@index, @type05-@index
000128B6 0000 0000                  		dc.w @type06-@index, @type07-@index
000128BA 0000 0000                  		dc.w @type08-@index, @type09-@index
000128BE 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000128C2 0000 0000                  		dc.w @type0C-@index, @type0D-@index
000128C6                            ; ===========================================================================
000128C6                            
000128C6                            @type00:
000128C6                            ; doesn't move
000128C6 4E75                       		rts	
000128C8                            ; ===========================================================================
000128C8                            
000128C8                            @type01:
000128C8                            ; moves side-to-side
000128C8 323C 0040                  		move.w	#$40,d1		; set move distance
000128CC 7000                       		moveq	#0,d0
000128CE 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
000128D2 6000                       		bra.s	@moveLR
000128D4                            ; ===========================================================================
000128D4                            
000128D4                            @type02:
000128D4                            ; moves side-to-side
000128D4 323C 0080                  		move.w	#$80,d1		; set move distance
000128D8 7000                       		moveq	#0,d0
000128DA 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000128DE                            
000128DE                            	@moveLR:
000128DE 0828 0000 0022             		btst	#0,obStatus(a0)
000128E4 6700                       		beq.s	@noflip
000128E6 4440                       		neg.w	d0
000128E8 D041                       		add.w	d1,d0
000128EA                            
000128EA                            	@noflip:
000128EA 3228 0034                  		move.w	fb_origX(a0),d1
000128EE 9240                       		sub.w	d0,d1
000128F0 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
000128F4 4E75                       		rts	
000128F6                            ; ===========================================================================
000128F6                            
000128F6                            @type03:
000128F6                            ; moves up/down
000128F6 323C 0040                  		move.w	#$40,d1		; set move distance
000128FA 7000                       		moveq	#0,d0
000128FC 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012900 6000                       		bra.s	@moveUD
00012902                            ; ===========================================================================
00012902                            
00012902                            @type04:
00012902                            ; moves up/down
00012902 323C 0080                  		move.w	#$80,d1		; set move distance
00012906 7000                       		moveq	#0,d0
00012908 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001290C                            
0001290C                            	@moveUD:
0001290C 0828 0000 0022             		btst	#0,obStatus(a0)
00012912 6700                       		beq.s	@noflip04
00012914 4440                       		neg.w	d0
00012916 D041                       		add.w	d1,d0
00012918                            
00012918                            	@noflip04:
00012918 3228 0030                  		move.w	fb_origY(a0),d1
0001291C 9240                       		sub.w	d0,d1
0001291E 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012922 4E75                       		rts	
00012924                            ; ===========================================================================
00012924                            
00012924                            @type05:
00012924                            ; moves up when a switch is pressed
00012924 4A28 0038                  		tst.b	$38(a0)
00012928 6600                       		bne.s	@loc_104A4
0001292A 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012930 6600                       		bne.s	@aaa		; if not, branch
00012932 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
00012938 6600                       		bne.s	@aaa
0001293A 4238 F7C9                  		clr.b	(f_wtunnelallow).w
0001293E 3038 D008                  		move.w	(v_player+obX).w,d0
00012942 B068 0008                  		cmp.w	obX(a0),d0
00012946 6400                       		bcc.s	@aaa
00012948 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
0001294E                            
0001294E                            	@aaa:
0001294E 45F8 F7E0                  		lea	(f_switch).w,a2
00012952 7000                       		moveq	#0,d0
00012954 1028 003C                  		move.b	fb_type(a0),d0
00012958 0832 0000 0000             		btst	#0,(a2,d0.w)
0001295E 6700                       		beq.s	@loc_104AE
00012960 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012966 6600                       		bne.s	@loc_1049E	; if not, branch
00012968 0C00 0003                  		cmpi.b	#3,d0
0001296C 6600                       		bne.s	@loc_1049E
0001296E 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012972                            
00012972                            @loc_1049E:
00012972 117C 0001 0038             		move.b	#1,$38(a0)
00012978                            
00012978                            @loc_104A4:
00012978 4A68 003A                  		tst.w	fb_height(a0)
0001297C 6700                       		beq.s	@loc_104C8
0001297E 5568 003A                  		subq.w	#2,fb_height(a0)
00012982                            
00012982                            @loc_104AE:
00012982 3028 003A                  		move.w	fb_height(a0),d0
00012986 0828 0000 0022             		btst	#0,$22(a0)
0001298C 6700                       		beq.s	@loc_104BC
0001298E 4440                       		neg.w	d0
00012990                            
00012990                            @loc_104BC:
00012990 3228 0030                  		move.w	fb_origY(a0),d1
00012994 D240                       		add.w	d0,d1
00012996 3141 000C                  		move.w	d1,obY(a0)
0001299A 4E75                       		rts	
0001299C                            ; ===========================================================================
0001299C                            
0001299C                            @loc_104C8:
0001299C 5228 0028                  		addq.b	#1,$28(a0)
000129A0 4228 0038                  		clr.b	$38(a0)
000129A4 45F8 FC00                  		lea	(v_objstate).w,a2
000129A8 7000                       		moveq	#0,d0
000129AA 1028 0023                  		move.b	obRespawnNo(a0),d0
000129AE 67D2                       		beq.s	@loc_104AE
000129B0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000129B6 60CA                       		bra.s	@loc_104AE
000129B8                            ; ===========================================================================
000129B8                            
000129B8                            @type06:
000129B8 4A28 0038                  		tst.b	$38(a0)
000129BC 6600                       		bne.s	@loc_10500
000129BE 45F8 F7E0                  		lea	(f_switch).w,a2
000129C2 7000                       		moveq	#0,d0
000129C4 1028 003C                  		move.b	fb_type(a0),d0
000129C8 4A32 0000                  		tst.b	(a2,d0.w)
000129CC 6A00                       		bpl.s	@loc_10512
000129CE 117C 0001 0038             		move.b	#1,$38(a0)
000129D4                            
000129D4                            @loc_10500:
000129D4 7000                       		moveq	#0,d0
000129D6 1028 0016                  		move.b	obHeight(a0),d0
000129DA D040                       		add.w	d0,d0
000129DC B068 003A                  		cmp.w	fb_height(a0),d0
000129E0 6700                       		beq.s	@loc_1052C
000129E2 5468 003A                  		addq.w	#2,fb_height(a0)
000129E6                            
000129E6                            @loc_10512:
000129E6 3028 003A                  		move.w	fb_height(a0),d0
000129EA 0828 0000 0022             		btst	#0,obStatus(a0)
000129F0 6700                       		beq.s	@loc_10520
000129F2 4440                       		neg.w	d0
000129F4                            
000129F4                            @loc_10520:
000129F4 3228 0030                  		move.w	fb_origY(a0),d1
000129F8 D240                       		add.w	d0,d1
000129FA 3141 000C                  		move.w	d1,obY(a0)
000129FE 4E75                       		rts	
00012A00                            ; ===========================================================================
00012A00                            
00012A00                            @loc_1052C:
00012A00 5328 0028                  		subq.b	#1,obSubtype(a0)
00012A04 4228 0038                  		clr.b	$38(a0)
00012A08 45F8 FC00                  		lea	(v_objstate).w,a2
00012A0C 7000                       		moveq	#0,d0
00012A0E 1028 0023                  		move.b	obRespawnNo(a0),d0
00012A12 67D2                       		beq.s	@loc_10512
00012A14 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012A1A 60CA                       		bra.s	@loc_10512
00012A1C                            ; ===========================================================================
00012A1C                            
00012A1C                            @type07:
00012A1C 4A28 0038                  		tst.b	$38(a0)
00012A20 6600                       		bne.s	@loc_1055E
00012A22 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
00012A26 6700                       		beq.s	@locret_10578
00012A28 117C 0001 0038             		move.b	#1,$38(a0)
00012A2E 4268 003A                  		clr.w	fb_height(a0)
00012A32                            
00012A32                            @loc_1055E:
00012A32 5268 0008                  		addq.w	#1,obX(a0)
00012A36 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012A3C 5268 003A                  		addq.w	#1,fb_height(a0)
00012A40 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
00012A46 6600                       		bne.s	@locret_10578
00012A48 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012A4E 4228 0038                  			clr.b	$38(a0)
00012A52 4228 0028                  		clr.b	obSubtype(a0)
00012A56                            
00012A56                            @locret_10578:
00012A56 4E75                       		rts	
00012A58                            ; ===========================================================================
00012A58                            
00012A58                            @type0C:
00012A58 4A28 0038                  		tst.b	$38(a0)
00012A5C 6600                       		bne.s	@loc_10598
00012A5E 45F8 F7E0                  		lea	(f_switch).w,a2
00012A62 7000                       		moveq	#0,d0
00012A64 1028 003C                  		move.b	fb_type(a0),d0
00012A68 0832 0000 0000             		btst	#0,(a2,d0.w)
00012A6E 6700                       		beq.s	@loc_105A2
00012A70 117C 0001 0038             		move.b	#1,$38(a0)
00012A76                            
00012A76                            @loc_10598:
00012A76 4A68 003A                  		tst.w	fb_height(a0)
00012A7A 6700                       		beq.s	@loc_105C0
00012A7C 5568 003A                  		subq.w	#2,fb_height(a0)
00012A80                            
00012A80                            @loc_105A2:
00012A80 3028 003A                  		move.w	fb_height(a0),d0
00012A84 0828 0000 0022             		btst	#0,obStatus(a0)
00012A8A 6700                       		beq.s	@loc_105B4
00012A8C 4440                       		neg.w	d0
00012A8E 0640 0080                  		addi.w	#$80,d0
00012A92                            
00012A92                            @loc_105B4:
00012A92 3228 0034                  		move.w	fb_origX(a0),d1
00012A96 D240                       		add.w	d0,d1
00012A98 3141 0008                  		move.w	d1,obX(a0)
00012A9C 4E75                       		rts	
00012A9E                            ; ===========================================================================
00012A9E                            
00012A9E                            @loc_105C0:
00012A9E 5228 0028                  		addq.b	#1,obSubtype(a0)
00012AA2 4228 0038                  		clr.b	$38(a0)
00012AA6 45F8 FC00                  		lea	(v_objstate).w,a2
00012AAA 7000                       		moveq	#0,d0
00012AAC 1028 0023                  		move.b	obRespawnNo(a0),d0
00012AB0 67CE                       		beq.s	@loc_105A2
00012AB2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012AB8 60C6                       		bra.s	@loc_105A2
00012ABA                            ; ===========================================================================
00012ABA                            
00012ABA                            @type0D:
00012ABA 4A28 0038                  		tst.b	$38(a0)
00012ABE 6600                       		bne.s	@loc_105F8
00012AC0 45F8 F7E0                  		lea	(f_switch).w,a2
00012AC4 7000                       		moveq	#0,d0
00012AC6 1028 003C                  		move.b	fb_type(a0),d0
00012ACA 4A32 0000                  		tst.b	(a2,d0.w)
00012ACE 6A00                       		bpl.s	@wtf
00012AD0 117C 0001 0038             		move.b	#1,$38(a0)
00012AD6                            
00012AD6                            @loc_105F8:
00012AD6 303C 0080                  		move.w	#$80,d0
00012ADA B068 003A                  		cmp.w	fb_height(a0),d0
00012ADE 6700                       		beq.s	@loc_10624
00012AE0 5468 003A                  		addq.w	#2,fb_height(a0)
00012AE4                            
00012AE4                            @wtf:
00012AE4 3028 003A                  		move.w	fb_height(a0),d0
00012AE8 0828 0000 0022             		btst	#0,obStatus(a0)
00012AEE 6700                       		beq.s	@loc_10618
00012AF0 4440                       		neg.w	d0
00012AF2 0640 0080                  		addi.w	#$80,d0
00012AF6                            
00012AF6                            @loc_10618:
00012AF6 3228 0034                  		move.w	fb_origX(a0),d1
00012AFA D240                       		add.w	d0,d1
00012AFC 3141 0008                  		move.w	d1,obX(a0)
00012B00 4E75                       		rts	
00012B02                            ; ===========================================================================
00012B02                            
00012B02                            @loc_10624:
00012B02 5328 0028                  		subq.b	#1,obSubtype(a0)
00012B06 4228 0038                  		clr.b	$38(a0)
00012B0A 45F8 FC00                  		lea	(v_objstate).w,a2
00012B0E 7000                       		moveq	#0,d0
00012B10 1028 0023                  		move.b	obRespawnNo(a0),d0
00012B14 67CE                       		beq.s	@wtf
00012B16 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012B1C 60C6                       		bra.s	@wtf
00012B1E                            ; ===========================================================================
00012B1E                            
00012B1E                            @type08:
00012B1E 323C 0010                  		move.w	#$10,d1
00012B22 7000                       		moveq	#0,d0
00012B24 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012B28 E248                       		lsr.w	#1,d0
00012B2A 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012B2E 6000                       		bra.s	@square
00012B30                            ; ===========================================================================
00012B30                            
00012B30                            @type09:
00012B30 323C 0030                  		move.w	#$30,d1
00012B34 7000                       		moveq	#0,d0
00012B36 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012B3A 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012B3E 6000                       		bra.s	@square
00012B40                            ; ===========================================================================
00012B40                            
00012B40                            @type0A:
00012B40 323C 0050                  		move.w	#$50,d1
00012B44 7000                       		moveq	#0,d0
00012B46 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012B4A 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012B4E 6000                       		bra.s	@square
00012B50                            ; ===========================================================================
00012B50                            
00012B50                            @type0B:
00012B50 323C 0070                  		move.w	#$70,d1
00012B54 7000                       		moveq	#0,d0
00012B56 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012B5A 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012B5E                            
00012B5E                            @square:
00012B5E 4A43                       		tst.w	d3
00012B60 6600                       		bne.s	@loc_1068E
00012B62 5228 0022                  		addq.b	#1,obStatus(a0)
00012B66 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012B6C                            
00012B6C                            @loc_1068E:
00012B6C 1428 0022                  		move.b	obStatus(a0),d2
00012B70 0202 0003                  		andi.b	#3,d2
00012B74 6600                       		bne.s	@loc_106AE
00012B76 9041                       		sub.w	d1,d0
00012B78 D068 0034                  		add.w	fb_origX(a0),d0
00012B7C 3140 0008                  		move.w	d0,obX(a0)
00012B80 4441                       		neg.w	d1
00012B82 D268 0030                  		add.w	fb_origY(a0),d1
00012B86 3141 000C                  		move.w	d1,obY(a0)
00012B8A 4E75                       		rts	
00012B8C                            ; ===========================================================================
00012B8C                            
00012B8C                            @loc_106AE:
00012B8C 5302                       		subq.b	#1,d2
00012B8E 6600                       		bne.s	@loc_106CC
00012B90 5341                       		subq.w	#1,d1
00012B92 9041                       		sub.w	d1,d0
00012B94 4440                       		neg.w	d0
00012B96 D068 0030                  		add.w	fb_origY(a0),d0
00012B9A 3140 000C                  		move.w	d0,obY(a0)
00012B9E 5241                       		addq.w	#1,d1
00012BA0 D268 0034                  		add.w	fb_origX(a0),d1
00012BA4 3141 0008                  		move.w	d1,obX(a0)
00012BA8 4E75                       		rts	
00012BAA                            ; ===========================================================================
00012BAA                            
00012BAA                            @loc_106CC:
00012BAA 5302                       		subq.b	#1,d2
00012BAC 6600                       		bne.s	@loc_106EA
00012BAE 5341                       		subq.w	#1,d1
00012BB0 9041                       		sub.w	d1,d0
00012BB2 4440                       		neg.w	d0
00012BB4 D068 0034                  		add.w	fb_origX(a0),d0
00012BB8 3140 0008                  		move.w	d0,obX(a0)
00012BBC 5241                       		addq.w	#1,d1
00012BBE D268 0030                  		add.w	fb_origY(a0),d1
00012BC2 3141 000C                  		move.w	d1,obY(a0)
00012BC6 4E75                       		rts	
00012BC8                            ; ===========================================================================
00012BC8                            
00012BC8                            @loc_106EA:
00012BC8 9041                       		sub.w	d1,d0
00012BCA D068 0030                  		add.w	fb_origY(a0),d0
00012BCE 3140 000C                  		move.w	d0,obY(a0)
00012BD2 4441                       		neg.w	d1
00012BD4 D268 0034                  		add.w	fb_origX(a0),d1
00012BD8 3141 0008                  		move.w	d1,obX(a0)
00012BDC 4E75                       		rts	
00012BDC 4E75                       		rts	
00012BDE                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012BDE                            ; ---------------------------------------------------------------------------
00012BDE                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012BDE                            ; ---------------------------------------------------------------------------
00012BDE                            Map_FBlock_internal:
00012BDE 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012BE0 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012BE2 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012BE4 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012BE6 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012BE8 0000                       		dc.w @slz-Map_FBlock_internal
00012BEA 0000                       		dc.w @lzvert-Map_FBlock_internal
00012BEC 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012BEE 01                         @syz1x1:	dc.b 1
00012BEF F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012BF4 04                         @syz2x2:	dc.b 4
00012BF5 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012BFA E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012BFF 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012C04 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012C09 02                         @syz1x2:	dc.b 2
00012C0A E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012C0F 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012C14 04                         @syzrect2x2:	dc.b 4
00012C15 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012C1A E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012C1F 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012C24 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012C29 03                         @syzrect1x3:	dc.b 3
00012C2A D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012C2F F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012C34 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012C39 01                         @slz:		dc.b 1
00012C3A F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012C3F 02                         @lzvert:	dc.b 2
00012C40 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012C45 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012C4A 04                         @lzhoriz:	dc.b 4
00012C4B F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012C50 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012C55 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012C5A F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012C60 00                         		even
00012C60 00                         		even
00012C60                            
00012C60                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012C60                            ; ---------------------------------------------------------------------------
00012C60                            ; Object 57 - spiked balls (SYZ, LZ)
00012C60                            ; ---------------------------------------------------------------------------
00012C60                            
00012C60                            SpikeBall:
00012C60 7000                       		moveq	#0,d0
00012C62 1028 0024                  		move.b	obRoutine(a0),d0
00012C66 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012C6A 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012C6E                            ; ===========================================================================
00012C6E 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012C70 0000                       		dc.w SBall_Move-SBall_Index
00012C72 0000                       		dc.w SBall_Display-SBall_Index
00012C74                            
00012C74 =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012C74                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012C74 =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012C74 =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012C74 =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012C74 =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012C74                            ; ===========================================================================
00012C74                            
00012C74                            SBall_Main:	; Routine 0
00012C74 5428 0024                  		addq.b	#2,obRoutine(a0)
00012C78 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012C80 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012C86 117C 0004 0001             		move.b	#4,obRender(a0)
00012C8C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012C92 117C 0008 0014             		move.b	#8,obActWid(a0)
00012C98 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012C9E 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012CA4 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012CAA 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012CB0 6600                       		bne.s	@notlz
00012CB2                            
00012CB2 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012CB8 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012CBE 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012CC6                            
00012CC6                            	@notlz:
00012CC6 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012CCA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012CCE 4881                       		ext.w	d1
00012CD0 E741                       		asl.w	#3,d1		; multiply by 8
00012CD2 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012CD6 1028 0022                  		move.b	obStatus(a0),d0
00012CDA E418                       		ror.b	#2,d0
00012CDC 0200 00C0                  		andi.b	#$C0,d0
00012CE0 1140 0026                  		move.b	d0,obAngle(a0)
00012CE4 45E8 0029                  		lea	sball_childs(a0),a2
00012CE8 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012CEC 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012CF0 14FC 0000                  		move.b	#0,(a2)+
00012CF4 3601                       		move.w	d1,d3
00012CF6 E94B                       		lsl.w	#4,d3
00012CF8 1143 003C                  		move.b	d3,sball_radius(a0)
00012CFC 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012CFE 6500                       		bcs.s	@fail
00012D00 0828 0003 0028             		btst	#3,obSubtype(a0)
00012D06 6700                       		beq.s	@makechain
00012D08 5341                       		subq.w	#1,d1
00012D0A 6500                       		bcs.s	@fail
00012D0C                            
00012D0C                            @makechain:
00012D0C 6100 D1A0                  		bsr.w	FindFreeObj
00012D10 6600                       		bne.s	@fail
00012D12 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012D16 3A09                       		move.w	a1,d5		; get child object RAM address
00012D18 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012D1C EC4D                       		lsr.w	#6,d5		; divide by $40
00012D1E 0245 007F                  		andi.w	#$7F,d5
00012D22 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012D24 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012D2A 1290                       		move.b	0(a0),0(a1)
00012D2C 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012D32 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012D38 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012D3E 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012D44 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012D4A 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012D50 0403 0010                  		subi.b	#$10,d3
00012D54 1343 003C                  		move.b	d3,sball_radius(a1)
00012D58 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012D5E 6600                       		bne.s	@notlzagain
00012D60                            
00012D60 4A03                       		tst.b	d3
00012D62 6600                       		bne.s	@notlzagain
00012D64 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012D6A                            
00012D6A                            	@notlzagain:
00012D6A 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012D6E                            
00012D6E                            	@fail:
00012D6E 3A08                       		move.w	a0,d5
00012D70 0445 D000                  		subi.w	#$D000,d5
00012D74 EC4D                       		lsr.w	#6,d5
00012D76 0245 007F                  		andi.w	#$7F,d5
00012D7A 14C5                       		move.b	d5,(a2)+
00012D7C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012D82 6600                       		bne.s	SBall_Move
00012D84                            
00012D84 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012D8A 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012D90                            
00012D90                            SBall_Move:	; Routine 2
00012D90 6100 0000                  		bsr.w	@movesub
00012D94 6000 0000                  		bra.w	@chkdel
00012D98                            ; ===========================================================================
00012D98                            
00012D98                            @movesub:
00012D98 3028 003E                  		move.w	sball_speed(a0),d0
00012D9C D168 0026                  		add.w	d0,obAngle(a0)
00012DA0 1028 0026                  		move.b	obAngle(a0),d0
00012DA4 4EB9 0000 3A82             		jsr	(CalcSine).l
00012DAA 3428 0038                  		move.w	sball_origY(a0),d2
00012DAE 3628 003A                  		move.w	sball_origX(a0),d3
00012DB2 45E8 0029                  		lea	sball_childs(a0),a2
00012DB6 7C00                       		moveq	#0,d6
00012DB8 1C1A                       		move.b	(a2)+,d6
00012DBA                            
00012DBA                            	@loop:
00012DBA 7800                       		moveq	#0,d4
00012DBC 181A                       		move.b	(a2)+,d4
00012DBE ED4C                       		lsl.w	#6,d4
00012DC0 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012DC6 2244                       		movea.l	d4,a1
00012DC8 7800                       		moveq	#0,d4
00012DCA 1829 003C                  		move.b	sball_radius(a1),d4
00012DCE 2A04                       		move.l	d4,d5
00012DD0 C9C0                       		muls.w	d0,d4
00012DD2 E084                       		asr.l	#8,d4
00012DD4 CBC1                       		muls.w	d1,d5
00012DD6 E085                       		asr.l	#8,d5
00012DD8 D842                       		add.w	d2,d4
00012DDA DA43                       		add.w	d3,d5
00012DDC 3344 000C                  		move.w	d4,obY(a1)
00012DE0 3345 0008                  		move.w	d5,obX(a1)
00012DE4 51CE FFD4                  		dbf	d6,@loop
00012DE8 4E75                       		rts	
00012DEA                            ; ===========================================================================
00012DEA                            
00012DEA                            @chkdel:
00012E08 6000 CC18                  		bra.w	DisplaySprite
00012E0C                            ; ===========================================================================
00012E0C                            
00012E0C                            @delete:
00012E0C 7400                       		moveq	#0,d2
00012E0E 45E8 0029                  		lea	sball_childs(a0),a2
00012E12 141A                       		move.b	(a2)+,d2
00012E14                            
00012E14                            	@deleteloop:
00012E14 7000                       		moveq	#0,d0
00012E16 101A                       		move.b	(a2)+,d0
00012E18 ED48                       		lsl.w	#6,d0
00012E1A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012E20 2240                       		movea.l	d0,a1
00012E22 6100 CC40                  		bsr.w	DeleteChild
00012E26 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012E2A                            
00012E2A 4E75                       		rts	
00012E2C                            ; ===========================================================================
00012E2C                            
00012E2C                            SBall_Display:	; Routine 4
00012E2C 6000 CBF4                  		bra.w	DisplaySprite
00012E2C 6000 CBF4                  		bra.w	DisplaySprite
00012E30                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012E30                            ; ---------------------------------------------------------------------------
00012E30                            ; Sprite mappings - chain of spiked balls (SYZ)
00012E30                            ; ---------------------------------------------------------------------------
00012E30                            Map_SBall_internal:
00012E30 0000                       		dc.w @0-Map_SBall_internal
00012E32 01                         @0:		dc.b 1
00012E33 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012E38                            		even
00012E38                            		even
00012E38                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012E38                            ; ---------------------------------------------------------------------------
00012E38                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012E38                            ; ---------------------------------------------------------------------------
00012E38                            Map_SBall2_internal:
00012E38 0000                       		dc.w @chain-Map_SBall2_internal
00012E3A 0000                       		dc.w @spikeball-Map_SBall2_internal
00012E3C 0000                       		dc.w @base-Map_SBall2_internal
00012E3E 01                         @chain:		dc.b 1
00012E3F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012E44 01                         @spikeball:	dc.b 1
00012E45 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012E4A 01                         @base:		dc.b 1
00012E4B F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012E50                            		even
00012E50                            		even
00012E50                            		include	"_incObj\58 Big Spiked Ball.asm"
00012E50                            ; ---------------------------------------------------------------------------
00012E50                            ; Object 58 - giant spiked balls (SYZ)
00012E50                            ; ---------------------------------------------------------------------------
00012E50                            
00012E50                            BigSpikeBall:
00012E50 7000                       		moveq	#0,d0
00012E52 1028 0024                  		move.b	obRoutine(a0),d0
00012E56 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012E5A 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012E5E                            ; ===========================================================================
00012E5E 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012E60 0000                       		dc.w BBall_Move-BBall_Index
00012E62                            
00012E62 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012E62 =00000038                  bball_origY:	equ $38		; original y-axis position
00012E62 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012E62 =0000003E                  bball_speed:	equ $3E		; speed
00012E62                            ; ===========================================================================
00012E62                            
00012E62                            BBall_Main:	; Routine 0
00012E62 5428 0024                  		addq.b	#2,obRoutine(a0)
00012E66 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012E6E 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012E74 117C 0004 0001             		move.b	#4,obRender(a0)
00012E7A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012E80 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012E86 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012E8C 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012E92 117C 0086 0020             		move.b	#$86,obColType(a0)
00012E98 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012E9C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012EA0 4881                       		ext.w	d1
00012EA2 E741                       		asl.w	#3,d1		; multiply by 8
00012EA4 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012EA8 1028 0022                  		move.b	obStatus(a0),d0
00012EAC E418                       		ror.b	#2,d0
00012EAE 0200 00C0                  		andi.b	#$C0,d0
00012EB2 1140 0026                  		move.b	d0,obAngle(a0)
00012EB6 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012EBC                            
00012EBC                            BBall_Move:	; Routine 2
00012EBC 7000                       		moveq	#0,d0
00012EBE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012EC2 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012EC6 D040                       		add.w	d0,d0
00012EC8 323B 0000                  		move.w	@index(pc,d0.w),d1
00012ECC 4EBB 1000                  		jsr	@index(pc,d1.w)
00012EEE 6000 CB32                  		bra.w	DisplaySprite
00012EF2                            ; ===========================================================================
00012EF2 0000                       @index:		dc.w @type00-@index
00012EF4 0000                       		dc.w @type01-@index
00012EF6 0000                       		dc.w @type02-@index
00012EF8 0000                       		dc.w @type03-@index
00012EFA                            ; ===========================================================================
00012EFA                            
00012EFA                            @type00:
00012EFA 4E75                       		rts	
00012EFC                            ; ===========================================================================
00012EFC                            
00012EFC                            @type01:
00012EFC 323C 0060                  		move.w	#$60,d1
00012F00 7000                       		moveq	#0,d0
00012F02 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012F06 0828 0000 0022             		btst	#0,obStatus(a0)
00012F0C 6700                       		beq.s	@noflip1
00012F0E 4440                       		neg.w	d0
00012F10 D041                       		add.w	d1,d0
00012F12                            
00012F12                            	@noflip1:
00012F12 3228 003A                  		move.w	bball_origX(a0),d1
00012F16 9240                       		sub.w	d0,d1
00012F18 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012F1C 4E75                       		rts	
00012F1E                            ; ===========================================================================
00012F1E                            
00012F1E                            @type02:
00012F1E 323C 0060                  		move.w	#$60,d1
00012F22 7000                       		moveq	#0,d0
00012F24 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012F28 0828 0000 0022             		btst	#0,obStatus(a0)
00012F2E 6700                       		beq.s	@noflip2
00012F30 4440                       		neg.w	d0
00012F32 0640 0080                  		addi.w	#$80,d0
00012F36                            
00012F36                            	@noflip2:
00012F36 3228 0038                  		move.w	bball_origY(a0),d1
00012F3A 9240                       		sub.w	d0,d1
00012F3C 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012F40 4E75                       		rts	
00012F42                            ; ===========================================================================
00012F42                            
00012F42                            @type03:
00012F42 3028 003E                  		move.w	bball_speed(a0),d0
00012F46 D168 0026                  		add.w	d0,obAngle(a0)
00012F4A 1028 0026                  		move.b	obAngle(a0),d0
00012F4E 4EB9 0000 3A82             		jsr	(CalcSine).l
00012F54 3428 0038                  		move.w	bball_origY(a0),d2
00012F58 3628 003A                  		move.w	bball_origX(a0),d3
00012F5C 7800                       		moveq	#0,d4
00012F5E 1828 003C                  		move.b	bball_radius(a0),d4
00012F62 2A04                       		move.l	d4,d5
00012F64 C9C0                       		muls.w	d0,d4
00012F66 E084                       		asr.l	#8,d4
00012F68 CBC1                       		muls.w	d1,d5
00012F6A E085                       		asr.l	#8,d5
00012F6C D842                       		add.w	d2,d4
00012F6E DA43                       		add.w	d3,d5
00012F70 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012F74 3145 0008                  		move.w	d5,obX(a0)
00012F78 4E75                       		rts	
00012F78 4E75                       		rts	
00012F7A                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012F7A                            ; --------------------------------------------------------------------------------
00012F7A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012F7A                            ; --------------------------------------------------------------------------------
00012F7A                            
00012F7A                            SME_u_DKx:	
00012F7A 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012F7E 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012F80 05                         SME_u_DKx_6:	dc.b 5	
00012F81 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012F86 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012F8B F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012F90 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012F95 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012F9A 01                         SME_u_DKx_20:	dc.b 1	
00012F9B F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012FA0 02                         SME_u_DKx_26:	dc.b 2	
00012FA1 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012FA6 E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012FAC 00                         		even
00012FAC 00                         		even
00012FAC                            		include	"_incObj\59 SLZ Elevators.asm"
00012FAC                            ; ---------------------------------------------------------------------------
00012FAC                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012FAC                            ; ---------------------------------------------------------------------------
00012FAC                            
00012FAC                            Elevator:
00012FAC 7000                       		moveq	#0,d0
00012FAE 1028 0024                  		move.b	obRoutine(a0),d0
00012FB2 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012FB6 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012FD8 6000 CA48                  		bra.w	DisplaySprite
00012FDC                            ; ===========================================================================
00012FDC 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012FDE 0000                       		dc.w Elev_Platform-Elev_Index
00012FE0 0000                       		dc.w Elev_Action-Elev_Index
00012FE2 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012FE4                            
00012FE4 =00000032                  elev_origX:	equ $32		; original x-axis position
00012FE4 =00000030                  elev_origY:	equ $30		; original y-axis position
00012FE4 =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012FE4                            
00012FE4 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012FE6                            
00012FE6 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012FE8 2001                       		dc.b $20, 1
00012FEA 3401                       		dc.b $34, 1
00012FEC 1003                       		dc.b $10, 3
00012FEE 2003                       		dc.b $20, 3
00012FF0 3403                       		dc.b $34, 3
00012FF2 1401                       		dc.b $14, 1
00012FF4 2401                       		dc.b $24, 1
00012FF6 2C01                       		dc.b $2C, 1
00012FF8 1403                       		dc.b $14, 3
00012FFA 2403                       		dc.b $24, 3
00012FFC 2C03                       		dc.b $2C, 3
00012FFE 2005                       		dc.b $20, 5
00013000 2007                       		dc.b $20, 7
00013002 3009                       		dc.b $30, 9
00013004                            ; ===========================================================================
00013004                            
00013004                            Elev_Main:	; Routine 0
00013004 5428 0024                  		addq.b	#2,obRoutine(a0)
00013008 7000                       		moveq	#0,d0
0001300A 1028 0028                  		move.b	obSubtype(a0),d0
0001300E 6A00                       		bpl.s	@normal		; branch for types 00-7F
00013010 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00013014 0240 007F                  		andi.w	#$7F,d0
00013018 C0FC 0006                  		mulu.w	#6,d0
0001301C 3140 003C                  		move.w	d0,elev_dist(a0)
00013020 3140 003E                  		move.w	d0,$3E(a0)
00013024 588F                       		addq.l	#4,sp
00013026 4E75                       		rts	
00013028                            ; ===========================================================================
00013028                            
00013028                            	@normal:
00013028 E648                       		lsr.w	#3,d0
0001302A 0240 001E                  		andi.w	#$1E,d0
0001302E 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00013032 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00013036 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
0001303A 7000                       		moveq	#0,d0
0001303C 1028 0028                  		move.b	obSubtype(a0),d0
00013040 D040                       		add.w	d0,d0
00013042 0240 001E                  		andi.w	#$1E,d0
00013046 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
0001304A 101A                       		move.b	(a2)+,d0
0001304C E548                       		lsl.w	#2,d0
0001304E 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00013052 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00013056 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
0001305E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00013064 117C 0004 0001             		move.b	#4,obRender(a0)
0001306A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013070 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00013076 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
0001307C                            
0001307C                            Elev_Platform:	; Routine 2
0001307C 7200                       		moveq	#0,d1
0001307E 1228 0014                  		move.b	obActWid(a0),d1
00013082 4EB9 0000 9132             		jsr	(PlatformObject).l
00013088 6000 0000                  		bra.w	Elev_Types
0001308C                            ; ===========================================================================
0001308C                            
0001308C                            Elev_Action:	; Routine 4
0001308C 7200                       		moveq	#0,d1
0001308E 1228 0014                  		move.b	obActWid(a0),d1
00013092 4EB9 0000 92A6             		jsr	(ExitPlatform).l
00013098 3F28 0008                  		move.w	obX(a0),-(sp)
0001309C 6100 0000                  		bsr.w	Elev_Types
000130A0 341F                       		move.w	(sp)+,d2
000130A2 4A10                       		tst.b	0(a0)
000130A4 6700                       		beq.s	@deleted
000130A6 4EF9 0000 9810             		jmp	(MvSonicOnPtfm2).l
000130AC                            
000130AC                            	@deleted:
000130AC 4E75                       		rts	
000130AE                            ; ===========================================================================
000130AE                            
000130AE                            Elev_Types:
000130AE 7000                       		moveq	#0,d0
000130B0 1028 0028                  		move.b	obSubtype(a0),d0
000130B4 0240 000F                  		andi.w	#$F,d0
000130B8 D040                       		add.w	d0,d0
000130BA 323B 0000                  		move.w	@index(pc,d0.w),d1
000130BE 4EFB 1000                  		jmp	@index(pc,d1.w)
000130C2                            ; ===========================================================================
000130C2 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000130C6 0000 0000                  		dc.w @type02-@index, @type01-@index
000130CA 0000 0000                  		dc.w @type04-@index, @type01-@index
000130CE 0000 0000                  		dc.w @type06-@index, @type01-@index
000130D2 0000 0000                  		dc.w @type08-@index, @type09-@index
000130D6                            ; ===========================================================================
000130D6                            
000130D6                            @type00:
000130D6 4E75                       		rts	
000130D8                            ; ===========================================================================
000130D8                            
000130D8                            @type01:
000130D8 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
000130DE 6600                       		bne.s	@notstanding
000130E0 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
000130E4                            
000130E4                            	@notstanding:
000130E4 4E75                       		rts	
000130E6                            ; ===========================================================================
000130E6                            
000130E6                            @type02:
000130E6 6100 0000                  		bsr.w	Elev_Move
000130EA 3028 0034                  		move.w	$34(a0),d0
000130EE 4440                       		neg.w	d0
000130F0 D068 0030                  		add.w	elev_origY(a0),d0
000130F4 3140 000C                  		move.w	d0,obY(a0)
000130F8 4E75                       		rts	
000130FA                            ; ===========================================================================
000130FA                            
000130FA                            @type04:
000130FA 6100 0000                  		bsr.w	Elev_Move
000130FE 3028 0034                  		move.w	$34(a0),d0
00013102 D068 0030                  		add.w	elev_origY(a0),d0
00013106 3140 000C                  		move.w	d0,obY(a0)
0001310A 4E75                       		rts	
0001310C                            ; ===========================================================================
0001310C                            
0001310C                            @type06:
0001310C 6100 0000                  		bsr.w	Elev_Move
00013110 3028 0034                  		move.w	$34(a0),d0
00013114 E240                       		asr.w	#1,d0
00013116 4440                       		neg.w	d0
00013118 D068 0030                  		add.w	elev_origY(a0),d0
0001311C 3140 000C                  		move.w	d0,obY(a0)
00013120 3028 0034                  		move.w	$34(a0),d0
00013124 D068 0032                  		add.w	elev_origX(a0),d0
00013128 3140 0008                  		move.w	d0,obX(a0)
0001312C 4E75                       		rts	
0001312E                            ; ===========================================================================
0001312E                            
0001312E                            @type08:
0001312E 6100 0000                  		bsr.w	Elev_Move
00013132 3028 0034                  		move.w	$34(a0),d0
00013136 E240                       		asr.w	#1,d0
00013138 D068 0030                  		add.w	elev_origY(a0),d0
0001313C 3140 000C                  		move.w	d0,obY(a0)
00013140 3028 0034                  		move.w	$34(a0),d0
00013144 4440                       		neg.w	d0
00013146 D068 0032                  		add.w	elev_origX(a0),d0
0001314A 3140 0008                  		move.w	d0,obX(a0)
0001314E 4E75                       		rts	
00013150                            ; ===========================================================================
00013150                            
00013150                            @type09:
00013150 6100 0000                  		bsr.w	Elev_Move
00013154 3028 0034                  		move.w	$34(a0),d0
00013158 4440                       		neg.w	d0
0001315A D068 0030                  		add.w	elev_origY(a0),d0
0001315E 3140 000C                  		move.w	d0,obY(a0)
00013162 4A28 0028                  		tst.b	obSubtype(a0)
00013166 6700 0000                  		beq.w	@typereset
0001316A 4E75                       		rts	
0001316C                            ; ===========================================================================
0001316C                            
0001316C                            	@typereset:
0001316C 0828 0003 0022             		btst	#3,obStatus(a0)
00013172 6700                       		beq.s	@delete
00013174 08E9 0001 0022             		bset	#1,obStatus(a1)
0001317A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013180 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013186                            
00013186                            	@delete:
00013186 6000 C8DA                  		bra.w	DeleteObject
0001318A                            
0001318A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001318A                            
0001318A                            
0001318A                            Elev_Move:
0001318A 3028 0038                  		move.w	$38(a0),d0
0001318E 4A28 003A                  		tst.b	$3A(a0)
00013192 6600                       		bne.s	loc_10CC8
00013194 0C40 0800                  		cmpi.w	#$800,d0
00013198 6400                       		bcc.s	loc_10CD0
0001319A 0640 0010                  		addi.w	#$10,d0
0001319E 6000                       		bra.s	loc_10CD0
000131A0                            ; ===========================================================================
000131A0                            
000131A0                            loc_10CC8:
000131A0 4A40                       		tst.w	d0
000131A2 6700                       		beq.s	loc_10CD0
000131A4 0440 0010                  		subi.w	#$10,d0
000131A8                            
000131A8                            loc_10CD0:
000131A8 3140 0038                  		move.w	d0,$38(a0)
000131AC 48C0                       		ext.l	d0
000131AE E180                       		asl.l	#8,d0
000131B0 D0A8 0034                  		add.l	$34(a0),d0
000131B4 2140 0034                  		move.l	d0,$34(a0)
000131B8 4840                       		swap	d0
000131BA 3428 003C                  		move.w	elev_dist(a0),d2
000131BE B042                       		cmp.w	d2,d0
000131C0 6300                       		bls.s	loc_10CF0
000131C2 117C 0001 003A             		move.b	#1,$3A(a0)
000131C8                            
000131C8                            loc_10CF0:
000131C8 D442                       		add.w	d2,d2
000131CA B042                       		cmp.w	d2,d0
000131CC 6600                       		bne.s	locret_10CFA
000131CE 4228 0028                  		clr.b	obSubtype(a0)
000131D2                            
000131D2                            locret_10CFA:
000131D2 4E75                       		rts	
000131D4                            ; End of function Elev_Move
000131D4                            
000131D4                            ; ===========================================================================
000131D4                            
000131D4                            Elev_MakeMulti:	; Routine 6
000131D4 5368 003C                  		subq.w	#1,elev_dist(a0)
000131D8 6600                       		bne.s	@chkdel
000131DA 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
000131E0 6100 CCCC                  		bsr.w	FindFreeObj
000131E4 6600                       		bne.s	@chkdel
000131E6 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
000131EA 3368 0008 0008             		move.w	obX(a0),obX(a1)
000131F0 3368 000C 000C             		move.w	obY(a0),obY(a1)
000131F6 137C 000E 0028             		move.b	#$E,obSubtype(a1)
000131FC                            
000131FC                            @chkdel:
000131FC 588F                       		addq.l	#4,sp
0001321C 4E75                       		rts	
0001321C 4E75                       		rts	
0001321E                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
0001321E                            ; ---------------------------------------------------------------------------
0001321E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001321E                            ; ---------------------------------------------------------------------------
0001321E                            Map_Elev_internal:
0001321E 0000                       		dc.w @elevator-Map_Elev_internal
00013220 03                         @elevator:	dc.b 3
00013221 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00013226 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001322B F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00013230                            		even
00013230                            		even
00013230                            		include	"_incObj\5A SLZ Circling Platform.asm"
00013230                            ; ---------------------------------------------------------------------------
00013230                            ; Object 5A - platforms	moving in circles (SLZ)
00013230                            ; ---------------------------------------------------------------------------
00013230                            
00013230                            CirclingPlatform:
00013230 7000                       		moveq	#0,d0
00013232 1028 0024                  		move.b	obRoutine(a0),d0
00013236 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
0001323A 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
0001325C 6000 C7C4                  		bra.w	DisplaySprite
00013260                            ; ===========================================================================
00013260 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00013262 0000                       		dc.w Circ_Platform-Circ_Index
00013264 0000                       		dc.w Circ_Action-Circ_Index
00013266                            
00013266 =00000032                  circ_origX:	equ $32		; original x-axis position
00013266 =00000030                  circ_origY:	equ $30		; original y-axis position
00013266                            ; ===========================================================================
00013266                            
00013266                            Circ_Main:	; Routine 0
00013266 5428 0024                  		addq.b	#2,obRoutine(a0)
0001326A 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00013272 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00013278 117C 0004 0001             		move.b	#4,obRender(a0)
0001327E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013284 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001328A 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00013290 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
00013296                            
00013296                            Circ_Platform:	; Routine 2
00013296 7200                       		moveq	#0,d1
00013298 1228 0014                  		move.b	obActWid(a0),d1
0001329C 4EB9 0000 9132             		jsr	(PlatformObject).l
000132A2 6000 0000                  		bra.w	Circ_Types
000132A6                            ; ===========================================================================
000132A6                            
000132A6                            Circ_Action:	; Routine 4
000132A6 7200                       		moveq	#0,d1
000132A8 1228 0014                  		move.b	obActWid(a0),d1
000132AC 4EB9 0000 92A6             		jsr	(ExitPlatform).l
000132B2 3F28 0008                  		move.w	obX(a0),-(sp)
000132B6 6100 0000                  		bsr.w	Circ_Types
000132BA 341F                       		move.w	(sp)+,d2
000132BC 4EF9 0000 9810             		jmp	(MvSonicOnPtfm2).l
000132C2                            ; ===========================================================================
000132C2                            
000132C2                            Circ_Types:
000132C2 7000                       		moveq	#0,d0
000132C4 1028 0028                  		move.b	obSubtype(a0),d0
000132C8 0240 000C                  		andi.w	#$C,d0
000132CC E248                       		lsr.w	#1,d0
000132CE 323B 0000                  		move.w	@index(pc,d0.w),d1
000132D2 4EFB 1000                  		jmp	@index(pc,d1.w)
000132D6                            ; ===========================================================================
000132D6 0000                       @index:		dc.w @type00-@index
000132D8 0000                       		dc.w @type04-@index
000132DA                            ; ===========================================================================
000132DA                            
000132DA                            @type00:
000132DA 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
000132DE 0401 0050                  		subi.b	#$50,d1		; set radius of circle
000132E2 4881                       		ext.w	d1
000132E4 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
000132E8 0402 0050                  		subi.b	#$50,d2
000132EC 4882                       		ext.w	d2
000132EE 0828 0000 0028             		btst	#0,obSubtype(a0)
000132F4 6700                       		beq.s	@noshift00a
000132F6 4441                       		neg.w	d1
000132F8 4442                       		neg.w	d2
000132FA                            
000132FA                            	@noshift00a:
000132FA 0828 0001 0028             		btst	#1,obSubtype(a0)
00013300 6700                       		beq.s	@noshift00b
00013302 4441                       		neg.w	d1
00013304 C342                       		exg	d1,d2
00013306                            
00013306                            	@noshift00b:
00013306 D268 0032                  		add.w	circ_origX(a0),d1
0001330A 3141 0008                  		move.w	d1,obX(a0)
0001330E D468 0030                  		add.w	circ_origY(a0),d2
00013312 3142 000C                  		move.w	d2,obY(a0)
00013316 4E75                       		rts	
00013318                            ; ===========================================================================
00013318                            
00013318                            @type04:
00013318 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
0001331C 0401 0050                  		subi.b	#$50,d1
00013320 4881                       		ext.w	d1
00013322 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00013326 0402 0050                  		subi.b	#$50,d2
0001332A 4882                       		ext.w	d2
0001332C 0828 0000 0028             		btst	#0,obSubtype(a0)
00013332 6700                       		beq.s	@noshift04a
00013334 4441                       		neg.w	d1
00013336 4442                       		neg.w	d2
00013338                            
00013338                            	@noshift04a:
00013338 0828 0001 0028             		btst	#1,obSubtype(a0)
0001333E 6700                       		beq.s	@noshift04b
00013340 4441                       		neg.w	d1
00013342 C342                       		exg	d1,d2
00013344                            
00013344                            	@noshift04b:
00013344 4441                       		neg.w	d1
00013346 D268 0032                  		add.w	circ_origX(a0),d1
0001334A 3141 0008                  		move.w	d1,obX(a0)
0001334E D468 0030                  		add.w	circ_origY(a0),d2
00013352 3142 000C                  		move.w	d2,obY(a0)
00013356 4E75                       		rts	
00013356 4E75                       		rts	
00013358                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
00013358                            ; ---------------------------------------------------------------------------
00013358                            ; Sprite mappings - platforms that move	in circles (SLZ)
00013358                            ; ---------------------------------------------------------------------------
00013358                            Map_Circ_internal:
00013358 0000                       		dc.w @platform-Map_Circ_internal
0001335A 02                         @platform:	dc.b 2
0001335B F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013360 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00013366 00                         		even
00013366 00                         		even
00013366                            		include	"_incObj\5B Staircase.asm"
00013366                            ; ---------------------------------------------------------------------------
00013366                            ; Object 5B - blocks that form a staircase (SLZ)
00013366                            ; ---------------------------------------------------------------------------
00013366                            
00013366                            Staircase:
00013366 7000                       		moveq	#0,d0
00013368 1028 0024                  		move.b	obRoutine(a0),d0
0001336C 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
00013370 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
00013392 6000 C68E                  		bra.w	DisplaySprite
00013396                            ; ===========================================================================
00013396 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
00013398 0000                       		dc.w Stair_Move-Stair_Index
0001339A 0000                       		dc.w Stair_Solid-Stair_Index
0001339C                            
0001339C =00000030                  stair_origX:	equ $30		; original x-axis position
0001339C =00000032                  stair_origY:	equ $32		; original y-axis position
0001339C                            
0001339C =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
0001339C                            ; ===========================================================================
0001339C                            
0001339C                            Stair_Main:	; Routine 0
0001339C 5428 0024                  		addq.b	#2,obRoutine(a0)
000133A0 7638                       		moveq	#$38,d3
000133A2 7801                       		moveq	#1,d4
000133A4 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
000133AA 6700                       		beq.s	@notflipped	; if not, branch
000133AC 763B                       		moveq	#$3B,d3
000133AE 78FF                       		moveq	#-1,d4
000133B0                            
000133B0                            	@notflipped:
000133B0 3428 0008                  		move.w	obX(a0),d2
000133B4 2248                       		movea.l	a0,a1
000133B6 7203                       		moveq	#3,d1
000133B8 6000                       		bra.s	@makeblocks
000133BA                            ; ===========================================================================
000133BA                            
000133BA                            @loop:
000133BA 6100 CB08                  		bsr.w	FindNextFreeObj
000133BE 6600 0000                  		bne.w	@fail
000133C2 137C 0004 0024             		move.b	#4,obRoutine(a1)
000133C8                            
000133C8                            @makeblocks:
000133C8 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
000133CC 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
000133D4 337C 4000 0002             		move.w	#$4000,obGfx(a1)
000133DA 137C 0004 0001             		move.b	#4,obRender(a1)
000133E0 337C 0180 0018             		move.w	#$180,obPriority(a1)
000133E6 137C 0010 0014             		move.b	#$10,obActWid(a1)
000133EC 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000133F2 3342 0008                  		move.w	d2,obX(a1)
000133F6 3368 000C 000C             		move.w	obY(a0),obY(a1)
000133FC 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00013402 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
00013408 0642 0020                  		addi.w	#$20,d2
0001340C 1343 0037                  		move.b	d3,$37(a1)
00013410 2348 003C                  		move.l	a0,stair_parent(a1)
00013414 D604                       		add.b	d4,d3
00013416 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
0001341A                            
0001341A                            	@fail:
0001341A                            
0001341A                            Stair_Move:	; Routine 2
0001341A 7000                       		moveq	#0,d0
0001341C 1028 0028                  		move.b	obSubtype(a0),d0
00013420 0240 0007                  		andi.w	#7,d0
00013424 D040                       		add.w	d0,d0
00013426 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
0001342A 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
0001342E                            
0001342E                            Stair_Solid:	; Routine 4
0001342E 2468 003C                  		movea.l	stair_parent(a0),a2
00013432 7000                       		moveq	#0,d0
00013434 1028 0037                  		move.b	$37(a0),d0
00013438 1032 0000                  		move.b	(a2,d0.w),d0
0001343C D068 0032                  		add.w	stair_origY(a0),d0
00013440 3140 000C                  		move.w	d0,obY(a0)
00013444 7200                       		moveq	#0,d1
00013446 1228 0014                  		move.b	obActWid(a0),d1
0001344A 0641 000B                  		addi.w	#$B,d1
0001344E 343C 0010                  		move.w	#$10,d2
00013452 363C 0011                  		move.w	#$11,d3
00013456 3828 0008                  		move.w	obX(a0),d4
0001345A 6100 E9E8                  		bsr.w	SolidObject
0001345E 4A04                       		tst.b	d4
00013460 6A00                       		bpl.s	loc_10F92
00013462 1544 0036                  		move.b	d4,$36(a2)
00013466                            
00013466                            loc_10F92:
00013466 0828 0003 0022             		btst	#3,obStatus(a0)
0001346C 6700                       		beq.s	locret_10FA0
0001346E 157C 0001 0036             		move.b	#1,$36(a2)
00013474                            
00013474                            locret_10FA0:
00013474 4E75                       		rts	
00013476                            ; ===========================================================================
00013476 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
00013478 0000                       		dc.w Stair_Type01-Stair_TypeIndex
0001347A 0000                       		dc.w Stair_Type02-Stair_TypeIndex
0001347C 0000                       		dc.w Stair_Type01-Stair_TypeIndex
0001347E                            ; ===========================================================================
0001347E                            
0001347E                            Stair_Type00:
0001347E 4A68 0034                  		tst.w	$34(a0)
00013482 6600                       		bne.s	loc_10FC0
00013484 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001348A 6600                       		bne.s	locret_10FBE
0001348C 317C 001E 0034             		move.w	#$1E,$34(a0)
00013492                            
00013492                            locret_10FBE:
00013492 4E75                       		rts	
00013494                            ; ===========================================================================
00013494                            
00013494                            loc_10FC0:
00013494 5368 0034                  		subq.w	#1,$34(a0)
00013498 66F8                       		bne.s	locret_10FBE
0001349A 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
0001349E 4E75                       		rts	
000134A0                            ; ===========================================================================
000134A0                            
000134A0                            Stair_Type02:
000134A0 4A68 0034                  		tst.w	$34(a0)
000134A4 6600                       		bne.s	loc_10FE0
000134A6 4A28 0036                  		tst.b	$36(a0)
000134AA 6A00                       		bpl.s	locret_10FDE
000134AC 317C 003C 0034             		move.w	#$3C,$34(a0)
000134B2                            
000134B2                            locret_10FDE:
000134B2 4E75                       		rts	
000134B4                            ; ===========================================================================
000134B4                            
000134B4                            loc_10FE0:
000134B4 5368 0034                  		subq.w	#1,$34(a0)
000134B8 6600                       		bne.s	loc_10FEC
000134BA 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000134BE 4E75                       		rts	
000134C0                            ; ===========================================================================
000134C0                            
000134C0                            loc_10FEC:
000134C0 43E8 0038                  		lea	$38(a0),a1
000134C4 3028 0034                  		move.w	$34(a0),d0
000134C8 E408                       		lsr.b	#2,d0
000134CA 0200 0001                  		andi.b	#1,d0
000134CE 12C0                       		move.b	d0,(a1)+
000134D0 0A00 0001                  		eori.b	#1,d0
000134D4 12C0                       		move.b	d0,(a1)+
000134D6 0A00 0001                  		eori.b	#1,d0
000134DA 12C0                       		move.b	d0,(a1)+
000134DC 0A00 0001                  		eori.b	#1,d0
000134E0 12C0                       		move.b	d0,(a1)+
000134E2 4E75                       		rts	
000134E4                            ; ===========================================================================
000134E4                            
000134E4                            Stair_Type01:
000134E4 43E8 0038                  		lea	$38(a0),a1
000134E8 0C11 0080                  		cmpi.b	#$80,(a1)
000134EC 6700                       		beq.s	locret_11038
000134EE 5211                       		addq.b	#1,(a1)
000134F0 7200                       		moveq	#0,d1
000134F2 1219                       		move.b	(a1)+,d1
000134F4 4841                       		swap	d1
000134F6 E289                       		lsr.l	#1,d1
000134F8 2401                       		move.l	d1,d2
000134FA E289                       		lsr.l	#1,d1
000134FC 2601                       		move.l	d1,d3
000134FE D682                       		add.l	d2,d3
00013500 4841                       		swap	d1
00013502 4842                       		swap	d2
00013504 4843                       		swap	d3
00013506 12C3                       		move.b	d3,(a1)+
00013508 12C2                       		move.b	d2,(a1)+
0001350A 12C1                       		move.b	d1,(a1)+
0001350C                            
0001350C                            locret_11038:
0001350C 4E75                       		rts	
0001350E 4E75                       		rts	
0001350E 4E75                       		rts	
00013510                            Map_Stair:	include	"_maps\Staircase.asm"
00013510                            ; ---------------------------------------------------------------------------
00013510                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00013510                            ; ---------------------------------------------------------------------------
00013510                            Map_Stair_internal:
00013510 0000                       		dc.w @block-Map_Stair_internal
00013512 01                         @block:		dc.b 1
00013513 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00013518                            		even
00013518                            		even
00013518                            		include	"_incObj\5C Pylon.asm"
00013518                            ; ---------------------------------------------------------------------------
00013518                            ; Object 5C - metal pylons in foreground (SLZ)
00013518                            ; ---------------------------------------------------------------------------
00013518                            
00013518                            Pylon:
00013518 7000                       		moveq	#0,d0
0001351A 1028 0024                  		move.b	obRoutine(a0),d0
0001351E 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
00013522 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
00013526                            ; ===========================================================================
00013526 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
00013528 0000                       		dc.w Pyl_Display-Pyl_Index
0001352A                            ; ===========================================================================
0001352A                            
0001352A                            Pyl_Main:	; Routine 0
0001352A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001352E 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
00013536 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
0001353C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013542                            
00013542                            Pyl_Display:	; Routine 2
00013542 2238 F700                  		move.l	(v_screenposx).w,d1
00013546 D281                       		add.l	d1,d1
00013548 4841                       		swap	d1
0001354A 4441                       		neg.w	d1
0001354C 3141 0008                  		move.w	d1,obX(a0)
00013550 2238 F704                  		move.l	(v_screenposy).w,d1
00013554 D281                       		add.l	d1,d1
00013556 4841                       		swap	d1
00013558 0241 003F                  		andi.w	#$3F,d1
0001355C 4441                       		neg.w	d1
0001355E 0641 0100                  		addi.w	#$100,d1
00013562 3141 000A                  		move.w	d1,obScreenY(a0)
00013566 6000 C4BA                  		bra.w	DisplaySprite
00013566 6000 C4BA                  		bra.w	DisplaySprite
0001356A                            Map_Pylon:	include	"_maps\Pylon.asm"
0001356A                            ; ---------------------------------------------------------------------------
0001356A                            ; Sprite mappings - metal pylons in foreground (SLZ)
0001356A                            ; ---------------------------------------------------------------------------
0001356A                            Map_Pylon_internal:
0001356A 0000                       		dc.w @pylon-Map_Pylon_internal
0001356C 09                         @pylon:		dc.b 9
0001356D 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00013572 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00013577 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001357C E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00013581 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00013586 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001358B 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00013590 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00013595 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001359A                            		even
0001359A                            		even
0001359A                            
0001359A                            		include	"_incObj\1B Water Surface.asm"
0001359A                            ; ---------------------------------------------------------------------------
0001359A                            ; Object 1B - water surface (LZ)
0001359A                            ; ---------------------------------------------------------------------------
0001359A                            
0001359A                            WaterSurface:
0001359A 7000                       		moveq	#0,d0
0001359C 1028 0024                  		move.b	obRoutine(a0),d0
000135A0 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000135A4 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000135A8                            ; ===========================================================================
000135A8 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000135AA 0000                       		dc.w Surf_Action-Surf_Index
000135AC                            
000135AC =00000030                  surf_origX:	equ $30		; original x-axis position
000135AC =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000135AC                            ; ===========================================================================
000135AC                            
000135AC                            Surf_Main:	; Routine 0
000135AC 5428 0024                  		addq.b	#2,obRoutine(a0)
000135B0 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000135B8 317C C300 0002             		move.w	#$C300,obGfx(a0)
000135BE 117C 0004 0001             		move.b	#4,obRender(a0)
000135C4 117C 0080 0014             		move.b	#$80,obActWid(a0)
000135CA 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
000135D0                            
000135D0                            Surf_Action:	; Routine 2
000135D0 3238 F700                  		move.w	(v_screenposx).w,d1
000135D4 0241 FFE0                  		andi.w	#$FFE0,d1
000135D8 D268 0030                  		add.w	surf_origX(a0),d1
000135DC 0838 0000 FE05             		btst	#0,(v_framebyte).w
000135E2 6700                       		beq.s	@even		; branch on even frames
000135E4 0641 0020                  		addi.w	#$20,d1
000135E8                            
000135E8                            	@even:
000135E8 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
000135EC 3238 F646                  		move.w	(v_waterpos1).w,d1
000135F0 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
000135F4 4A28 0032                  		tst.b	surf_freeze(a0)
000135F8 6600                       		bne.s	@stopped
000135FA 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00013600 6700                       		beq.s	@animate	; if not, branch
00013602 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
00013606 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
0001360C 6000                       		bra.s	@display
0001360E                            ; ===========================================================================
0001360E                            
0001360E                            @stopped:
0001360E 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00013612 6600                       		bne.s	@display	; if yes, branch
00013614 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
0001361A 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
0001361E                            
0001361E                            @animate:
0001361E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013622 6A00                       		bpl.s	@display
00013624 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001362A 5228 001A                  		addq.b	#1,obFrame(a0)
0001362E 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
00013634 6500                       		bcs.s	@display
00013636 117C 0000 001A             		move.b	#0,obFrame(a0)
0001363C                            
0001363C                            @display:
0001363C 6000 C3E4                  		bra.w	DisplaySprite
0001363C 6000 C3E4                  		bra.w	DisplaySprite
00013640                            Map_Surf:	include	"_maps\Water Surface.asm"
00013640                            ; --------------------------------------------------------------------------------
00013640                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013640                            ; --------------------------------------------------------------------------------
00013640                            
00013640                            SME_LGSi8:	
00013640 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
00013644 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
00013648 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
0001364C 03                         SME_LGSi8_C:	dc.b 3	
0001364D F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013652 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013657 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
0001365C 03                         SME_LGSi8_1C:	dc.b 3	
0001365D F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013662 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013667 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
0001366C 03                         SME_LGSi8_2C:	dc.b 3	
0001366D F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013672 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013677 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001367C 06                         SME_LGSi8_3C:	dc.b 6	
0001367D F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013682 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
00013687 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001368C F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00013691 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013696 F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
0001369B 06                         SME_LGSi8_5B:	dc.b 6	
0001369C F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000136A1 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000136A6 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000136AB F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000136B0 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000136B5 F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
000136BA 06                         SME_LGSi8_7A:	dc.b 6	
000136BB F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000136C0 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
000136C5 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000136CA F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
000136CF F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000136D4 F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
000136DA 00                         		even
000136DA 00                         		even
000136DA                            		include	"_incObj\0B Pole that Breaks.asm"
000136DA                            ; ---------------------------------------------------------------------------
000136DA                            ; Object 0B - pole that	breaks (LZ)
000136DA                            ; ---------------------------------------------------------------------------
000136DA                            
000136DA                            Pole:
000136DA 7000                       		moveq	#0,d0
000136DC 1028 0024                  		move.b	obRoutine(a0),d0
000136E0 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
000136E4 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
000136E8                            ; ===========================================================================
000136E8 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
000136EA 0000                       		dc.w Pole_Action-Pole_Index
000136EC 0000                       		dc.w Pole_Display-Pole_Index
000136EE                            
000136EE =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
000136EE =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
000136EE                            ; ===========================================================================
000136EE                            
000136EE                            Pole_Main:	; Routine 0
000136EE 5428 0024                  		addq.b	#2,obRoutine(a0)
000136F2 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
000136FA 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
00013700 117C 0004 0001             		move.b	#4,obRender(a0)
00013706 117C 0008 0014             		move.b	#8,obActWid(a0)
0001370C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013712 117C 00E1 0020             		move.b	#$E1,obColType(a0)
00013718 7000                       		moveq	#0,d0
0001371A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001371E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013722 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
00013726                            
00013726                            Pole_Action:	; Routine 2
00013726 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
0001372A 6700                       		beq.s	@grab		; if not, branch
0001372C 4A68 0030                  		tst.w	pole_time(a0)
00013730 6700                       		beq.s	@moveup
00013732 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
00013736 6600                       		bne.s	@moveup
00013738 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
0001373E 6000                       		bra.s	@release
00013740                            ; ===========================================================================
00013740                            
00013740                            @moveup:
00013740 43F8 D000                  		lea	(v_player).w,a1
00013744 3028 000C                  		move.w	obY(a0),d0
00013748 0440 0018                  		subi.w	#$18,d0
0001374C 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013752 6700                       		beq.s	@movedown	; if not, branch
00013754 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
00013758 B069 000C                  		cmp.w	obY(a1),d0
0001375C 6500                       		bcs.s	@movedown
0001375E 3340 000C                  		move.w	d0,obY(a1)
00013762                            
00013762                            @movedown:
00013762 0640 0024                  		addi.w	#$24,d0
00013766 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
0001376C 6700                       		beq.s	@letgo		; if not, branch
0001376E 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
00013772 B069 000C                  		cmp.w	obY(a1),d0
00013776 6400                       		bcc.s	@letgo
00013778 3340 000C                  		move.w	d0,obY(a1)
0001377C                            
0001377C                            @letgo:
0001377C 1038 F603                  		move.b	(v_jpadpress2).w,d0
00013780 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
00013784 6700                       		beq.s	Pole_Display	; if not, branch
00013786                            
00013786                            @release:
00013786 4228 0020                  		clr.b	obColType(a0)
0001378A 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
0001378E 4238 F7C8                  		clr.b	(f_lockmulti).w
00013792 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00013796 4228 0032                  		clr.b	pole_grabbed(a0)
0001379A 6000                       		bra.s	Pole_Display
0001379C                            ; ===========================================================================
0001379C                            
0001379C                            @grab:
0001379C 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000137A0 6700                       		beq.s	Pole_Display	; if not, branch
000137A2 43F8 D000                  		lea	(v_player).w,a1
000137A6 3028 0008                  		move.w	obX(a0),d0
000137AA 0640 0014                  		addi.w	#$14,d0
000137AE B069 0008                  		cmp.w	obX(a1),d0
000137B2 6400                       		bcc.s	Pole_Display
000137B4 4228 0021                  		clr.b	obColProp(a0)
000137B8 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
000137BE 6400                       		bcc.s	Pole_Display
000137C0 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
000137C4 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
000137C8 3028 0008                  		move.w	obX(a0),d0
000137CC 0640 0014                  		addi.w	#$14,d0
000137D0 3340 0008                  		move.w	d0,obX(a1)
000137D4 08A9 0000 0022             		bclr	#0,obStatus(a1)
000137DA 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
000137E0 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
000137E6 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000137EC 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
000137F2                            
000137F2                            Pole_Display:	; Routine 4
000137F2 6000 E1B8                  		bra.w	RememberState
000137F2 6000 E1B8                  		bra.w	RememberState
000137F6                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
000137F6                            ; ---------------------------------------------------------------------------
000137F6                            ; Sprite mappings - pole that breaks (LZ)
000137F6                            ; ---------------------------------------------------------------------------
000137F6                            Map_Pole_internal:
000137F6 0000                       		dc.w @normal-Map_Pole_internal
000137F8 0000                       		dc.w @broken-Map_Pole_internal
000137FA 02                         @normal:	dc.b 2			; normal pole
000137FB E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00013800 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00013805 04                         @broken:	dc.b 4			; broken pole
00013806 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001380B F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00013810 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00013815 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001381A                            		even
0001381A                            		even
0001381A                            		include	"_incObj\0C Flapping Door.asm"
0001381A                            ; ---------------------------------------------------------------------------
0001381A                            ; Object 0C - flapping door (LZ)
0001381A                            ; ---------------------------------------------------------------------------
0001381A                            
0001381A                            FlapDoor:
0001381A 7000                       		moveq	#0,d0
0001381C 1028 0024                  		move.b	obRoutine(a0),d0
00013820 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
00013824 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
00013828                            ; ===========================================================================
00013828 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
0001382A 0000                       		dc.w Flap_OpenClose-Flap_Index
0001382C                            
0001382C =00000032                  flap_time:	equ $32		; time between opening/closing
0001382C =00000030                  flap_wait:	equ $30		; time until change
0001382C                            ; ===========================================================================
0001382C                            
0001382C                            Flap_Main:	; Routine 0
0001382C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013830 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
00013838 317C 4328 0002             		move.w	#$4328,obGfx(a0)
0001383E 0028 0004 0001             		ori.b	#4,obRender(a0)
00013844 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001384A 7000                       		moveq	#0,d0
0001384C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013850 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013854 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
00013858                            
00013858                            Flap_OpenClose:	; Routine 2
00013858 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
0001385C 6A00                       		bpl.s	@wait		; if time remains, branch
0001385E 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
00013864 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
0001386A 4A28 0001                  		tst.b	obRender(a0)
0001386E 6A00                       		bpl.s	@nosound
0001387A                            
0001387A                            	@wait:
0001387A                            	@nosound:
0001387A 43F9 0000 0000             		lea	(Ani_Flap).l,a1
00013880 6100 9262                  		bsr.w	AnimateSprite
00013884 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
00013888 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0001388C 6600                       		bne.s	@display	; if yes, branch
0001388E 3038 D008                  		move.w	(v_player+obX).w,d0
00013892 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
00013896 6400                       		bcc.s	@display	; if yes, branch
00013898 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
0001389E 323C 0013                  		move.w	#$13,d1
000138A2 343C 0020                  		move.w	#$20,d2
000138A6 3602                       		move.w	d2,d3
000138A8 5243                       		addq.w	#1,d3
000138AA 3828 0008                  		move.w	obX(a0),d4
000138AE 6100 E594                  		bsr.w	SolidObject	; make the door	solid
000138B2                            
000138B2                            	@display:
000138B2 6000 E0F8                  		bra.w	RememberState
000138B2 6000 E0F8                  		bra.w	RememberState
000138B6                            		include	"_anim\Flapping Door.asm"
000138B6                            ; ---------------------------------------------------------------------------
000138B6                            ; Animation script - flapping door (LZ)
000138B6                            ; ---------------------------------------------------------------------------
000138B6 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
000138B8 0000                       		dc.w @closing-Ani_Flap
000138BA 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
000138C0 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
000138C6                            		even
000138C6                            		even
000138C6                            Map_Flap:	include	"_maps\Flapping Door.asm"
000138C6                            ; ---------------------------------------------------------------------------
000138C6                            ; Sprite mappings - flapping door (LZ)
000138C6                            ; ---------------------------------------------------------------------------
000138C6                            Map_Flap_internal:
000138C6 0000                       		dc.w @closed-Map_Flap_internal
000138C8 0000                       		dc.w @halfway-Map_Flap_internal
000138CA 0000                       		dc.w @open-Map_Flap_internal
000138CC 02                         @closed:	dc.b 2
000138CD E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000138D2 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000138D7 02                         @halfway:	dc.b 2
000138D8 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000138DD 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000138E2 02                         @open:		dc.b 2
000138E3 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000138E8 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000138EE 00                         		even
000138EE 00                         		even
000138EE                            
000138EE                            		include	"_incObj\71 Invisible Barriers.asm"
000138EE                            ; ---------------------------------------------------------------------------
000138EE                            ; Object 71 - invisible	solid barriers
000138EE                            ; ---------------------------------------------------------------------------
000138EE                            
000138EE                            Invisibarrier:
000138EE 7000                       		moveq	#0,d0
000138F0 1028 0024                  		move.b	obRoutine(a0),d0
000138F4 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
000138F8 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
000138FC                            ; ===========================================================================
000138FC 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
000138FE 0000                       		dc.w Invis_Solid-Invis_Index
00013900                            
00013900 =00000016                  invis_height:	equ $16		; height in pixels
00013900                            ; ===========================================================================
00013900                            
00013900                            Invis_Main:	; Routine 0
00013900 5428 0024                  		addq.b	#2,obRoutine(a0)
00013904 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
0001390C 317C 8680 0002             		move.w	#$8680,obGfx(a0)
00013912 0028 0004 0001             		ori.b	#4,obRender(a0)
00013918 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001391C 1200                       		move.b	d0,d1
0001391E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00013922 0640 0010                  		addi.w	#$10,d0
00013926 E248                       		lsr.w	#1,d0
00013928 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
0001392C 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013930 5241                       		addq.w	#1,d1
00013932 E749                       		lsl.w	#3,d1
00013934 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
00013938                            
00013938                            Invis_Solid:	; Routine 2
00013938 6100 C368                  		bsr.w	ChkObjectVisible
0001393C 6600                       		bne.s	@chkdel
0001393E 7200                       		moveq	#0,d1
00013940 1228 0014                  		move.b	obActWid(a0),d1
00013944 0641 000B                  		addi.w	#$B,d1
00013948 7400                       		moveq	#0,d2
0001394A 1428 0016                  		move.b	invis_height(a0),d2
0001394E 3602                       		move.w	d2,d3
00013950 5243                       		addq.w	#1,d3
00013952 3828 0008                  		move.w	obX(a0),d4
00013956 6100 E534                  		bsr.w	SolidObject71
0001395A                            
0001395A                            @chkdel:
00013976 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
0001397A 6700                       		beq.s	@nodisplay	; if not, branch
0001397C 4EF9 0000 FA22             		jmp	(DisplaySprite).l	; if yes, display the object
00013982                            
00013982                            	@nodisplay:
00013982 4E75                       		rts	
00013984                            
00013984                            	@delete:
00013984 4EF9 0000 FA62             		jmp	(DeleteObject).l
00013984 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001398A                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
0001398A                            ; --------------------------------------------------------------------------------
0001398A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001398A                            ; --------------------------------------------------------------------------------
0001398A                            
0001398A                            SME_t60cE:	
0001398A 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
0001398E 0000                       		dc.w SME_t60cE_30-SME_t60cE	
00013990 04                         SME_t60cE_6:	dc.b 4	
00013991 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
00013996 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
0001399B F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000139A0 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000139A5 04                         SME_t60cE_1B:	dc.b 4	
000139A6 E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000139AB E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000139B0 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000139B5 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
000139BA 04                         SME_t60cE_30:	dc.b 4	
000139BB E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
000139C0 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
000139C5 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
000139CA 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
000139D0 00                         		even
000139D0 00                         		even
000139D0                            
000139D0                            		include	"_incObj\5D Fan.asm"
000139D0                            ; ---------------------------------------------------------------------------
000139D0                            ; Object 5D - fans (SLZ)
000139D0                            ; ---------------------------------------------------------------------------
000139D0                            
000139D0                            Fan:
000139D0 7000                       		moveq	#0,d0
000139D2 1028 0024                  		move.b	obRoutine(a0),d0
000139D6 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
000139DA 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
000139DE                            ; ===========================================================================
000139DE 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
000139E0 0000                       		dc.w Fan_Delay-Fan_Index
000139E2                            
000139E2 =00000030                  fan_time:	equ $30		; time between switching on/off
000139E2 =00000032                  fan_switch:	equ $32		; on/off switch
000139E2                            ; ===========================================================================
000139E2                            
000139E2                            Fan_Main:	; Routine 0
000139E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000139E6 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
000139EE 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
000139F4 0028 0004 0001             		ori.b	#4,obRender(a0)
000139FA 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013A00 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013A06                            
00013A06                            Fan_Delay:	; Routine 2
00013A06 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
00013A0C 6600                       		bne.s	@blow		; if yes, branch
00013A0E 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
00013A12 6A00                       		bpl.s	@blow		; if time remains, branch
00013A14 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
00013A1A 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013A20 6700                       		beq.s	@blow		; if fan is off, branch
00013A22 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
00013A28                            
00013A28                            @blow:
00013A28 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
00013A2C 6600 0000                  		bne.w	@chkdel		; if not, branch
00013A30 43F8 D000                  		lea	(v_player).w,a1
00013A34 3029 0008                  		move.w	obX(a1),d0
00013A38 9068 0008                  		sub.w	obX(a0),d0
00013A3C 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013A42 6600                       		bne.s	@chksonic	; if yes, branch
00013A44 4440                       		neg.w	d0
00013A46                            
00013A46                            @chksonic:
00013A46 0640 0050                  		addi.w	#$50,d0
00013A4A 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013A4E 6400                       		bcc.s	@animate	; if yes, branch
00013A50 3229 000C                  		move.w	obY(a1),d1
00013A54 0641 0060                  		addi.w	#$60,d1
00013A58 9268 000C                  		sub.w	obY(a0),d1
00013A5C 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013A5E 0C41 0070                  		cmpi.w	#$70,d1
00013A62 6400                       		bcc.s	@animate	; branch if Sonic is too high
00013A64 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
00013A68 6400                       		bcc.s	@faraway	; if yes, branch
00013A6A 4640                       		not.w	d0
00013A6C D040                       		add.w	d0,d0
00013A6E                            
00013A6E                            	@faraway:
00013A6E 0640 0060                  		addi.w	#$60,d0
00013A72 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013A78 6600                       		bne.s	@right		; if yes, branch
00013A7A 4440                       		neg.w	d0
00013A7C                            
00013A7C                            	@right:
00013A7C 4400                       		neg.b	d0
00013A7E E840                       		asr.w	#4,d0
00013A80 0828 0000 0028             		btst	#0,obSubtype(a0)
00013A86 6700                       		beq.s	@movesonic
00013A88 4440                       		neg.w	d0
00013A8A                            
00013A8A                            	@movesonic:
00013A8A D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
00013A8E                            
00013A8E                            @animate:
00013A8E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013A92 6A00                       		bpl.s	@chkdel
00013A94 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
00013A9A 5228 001B                  		addq.b	#1,obAniFrame(a0)
00013A9E 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
00013AA4 6500                       		bcs.s	@noreset
00013AA6 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
00013AAC                            
00013AAC                            	@noreset:
00013AAC 7000                       		moveq	#0,d0
00013AAE 0828 0000 0028             		btst	#0,obSubtype(a0)
00013AB4 6700                       		beq.s	@noflip
00013AB6 7002                       		moveq	#2,d0
00013AB8                            
00013AB8                            	@noflip:
00013AB8 D028 001B                  		add.b	obAniFrame(a0),d0
00013ABC 1140 001A                  		move.b	d0,obFrame(a0)
00013AC0                            
00013AC0                            @chkdel:
00013AC0 6100 BF60                  		bsr.w	DisplaySprite
00013AE2 4E75                       		rts	
00013AE2 4E75                       		rts	
00013AE4                            Map_Fan:	include	"_maps\Fan.asm"
00013AE4                            ; ---------------------------------------------------------------------------
00013AE4                            ; Sprite mappings - fans (SLZ)
00013AE4                            ; ---------------------------------------------------------------------------
00013AE4                            Map_Fan_internal:
00013AE4 0000                       		dc.w @fan1-Map_Fan_internal
00013AE6 0000                       		dc.w @fan2-Map_Fan_internal
00013AE8 0000                       		dc.w @fan3-Map_Fan_internal
00013AEA 0000                       		dc.w @fan2-Map_Fan_internal
00013AEC 0000                       		dc.w @fan1-Map_Fan_internal
00013AEE 02                         @fan1:		dc.b 2
00013AEF F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00013AF4 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013AF9 02                         @fan2:		dc.b 2
00013AFA F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013AFF 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013B04 02                         @fan3:		dc.b 2
00013B05 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013B0A 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013B10 00                         		even
00013B10 00                         		even
00013B10                            		include	"_incObj\5E Seesaw.asm"
00013B10                            ; ---------------------------------------------------------------------------
00013B10                            ; Object 5E - seesaws (SLZ)
00013B10                            ; ---------------------------------------------------------------------------
00013B10                            
00013B10                            Seesaw:
00013B10 7000                       		moveq	#0,d0
00013B12 1028 0024                  		move.b	obRoutine(a0),d0
00013B16 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013B1A 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013B1E 3028 0000                  		move.w	see_origX(a0),d0
00013B22 0240 FF80                  		andi.w	#$FF80,d0
00013B26 3238 F700                  		move.w	(v_screenposx).w,d1
00013B2A 0441 0080                  		subi.w	#$80,d1
00013B2E 0241 FF80                  		andi.w	#$FF80,d1
00013B32 9041                       		sub.w	d1,d0
00013B34 6B00 BF2C                  		bmi.w	DeleteObject
00013B38 0C40 0280                  		cmpi.w	#$280,d0
00013B3C 6200 BF24                  		bhi.w	DeleteObject
00013B40 6000 BEE0                  		bra.w	DisplaySprite
00013B44                            ; ===========================================================================
00013B44 0000                       See_Index:	dc.w See_Main-See_Index
00013B46 0000                       		dc.w See_Slope-See_Index
00013B48 0000                       		dc.w See_Slope2-See_Index
00013B4A 0000                       		dc.w See_Spikeball-See_Index
00013B4C 0000                       		dc.w See_MoveSpike-See_Index
00013B4E 0000                       		dc.w See_SpikeFall-See_Index
00013B50                            
00013B50 =00000030                  see_origX:	equ $30		; original x-axis position
00013B50 =00000034                  see_origY:	equ $34		; original y-axis position
00013B50 =00000038                  see_speed:	equ $38		; speed of collision
00013B50 =0000003A                  see_frame:	equ $3A		; 
00013B50 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013B50                            ; ===========================================================================
00013B50                            
00013B50                            See_Main:	; Routine 0
00013B50 5428 0024                  		addq.b	#2,obRoutine(a0)
00013B54 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013B5C 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013B62 0028 0004 0001             		ori.b	#4,obRender(a0)
00013B68 117C 0004 0018             		move.b	#4,obPriority(a0)
00013B6E 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013B74 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013B7A 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013B7E 6600                       		bne.s	@noball		; if not, branch
00013B80                            
00013B80 6100 C342                  		bsr.w	FindNextFreeObj
00013B84 6600                       		bne.s	@noball
00013B86 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013B8A 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013B8E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013B94 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013B9A 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013BA0 2348 003C                  		move.l	a0,see_parent(a1)
00013BA4                            
00013BA4                            	@noball:
00013BA4 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013BAA 6700                       		beq.s	@noflip		; if not, branch
00013BAC 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013BB2                            
00013BB2                            	@noflip:
00013BB2 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013BB8                            
00013BB8                            See_Slope:	; Routine 2
00013BB8 1228 003A                  		move.b	see_frame(a0),d1
00013BBC 6100 0000                  		bsr.w	See_ChgFrame
00013BC0 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013BC6 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013BCC 6700                       		beq.s	@notflat	; if not, branch
00013BCE 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013BD4                            
00013BD4                            	@notflat:
00013BD4 43F8 D000                  		lea	(v_player).w,a1
00013BD8 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013BDE 323C 0030                  		move.w	#$30,d1
00013BE2 4EB9 0000 9206             		jsr	(SlopeObject).l
00013BE8 4E75                       		rts	
00013BEA                            ; ===========================================================================
00013BEA                            
00013BEA                            See_Slope2:	; Routine 4
00013BEA 6100 0000                  		bsr.w	See_ChkSide
00013BEE 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013BF4 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013BFA 6700                       		beq.s	@notflat	; if not, branch
00013BFC 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013C02                            
00013C02                            	@notflat:
00013C02 323C 0030                  		move.w	#$30,d1
00013C06 4EB9 0000 92A6             		jsr	(ExitPlatform).l
00013C0C 323C 0030                  		move.w	#$30,d1
00013C10 3428 0008                  		move.w	obX(a0),d2
00013C14 4EB9 0000 A240             		jsr	(SlopeObject2).l
00013C1A 4E75                       		rts	
00013C1C                            ; ===========================================================================
00013C1C                            
00013C1C                            See_ChkSide:
00013C1C 7202                       		moveq	#2,d1
00013C1E 43F8 D000                  		lea	(v_player).w,a1
00013C22 3028 0008                  		move.w	obX(a0),d0
00013C26 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013C2A 6400                       		bcc.s	@leftside	; if yes, branch
00013C2C 4440                       		neg.w	d0
00013C2E 7200                       		moveq	#0,d1
00013C30                            
00013C30                            	@leftside:
00013C30 0C40 0008                  		cmpi.w	#8,d0
00013C34 6400                       		bcc.s	See_ChgFrame
00013C36 7201                       		moveq	#1,d1
00013C38                            
00013C38                            See_ChgFrame:
00013C38 1028 001A                  		move.b	obFrame(a0),d0
00013C3C B001                       		cmp.b	d1,d0		; does frame need to change?
00013C3E 6700                       		beq.s	@noflip		; if not, branch
00013C40 6400                       		bcc.s	@loc_11772
00013C42 5400                       		addq.b	#2,d0
00013C44                            
00013C44                            	@loc_11772:
00013C44 5300                       		subq.b	#1,d0
00013C46 1140 001A                  		move.b	d0,obFrame(a0)
00013C4A 1141 003A                  		move.b	d1,see_frame(a0)
00013C4E 08A8 0000 0001             		bclr	#0,obRender(a0)
00013C54 0828 0001 001A             		btst	#1,obFrame(a0)
00013C5A 6700                       		beq.s	@noflip
00013C5C 08E8 0000 0001             		bset	#0,obRender(a0)
00013C62                            
00013C62                            	@noflip:
00013C62 4E75                       		rts	
00013C64                            ; ===========================================================================
00013C64                            
00013C64                            See_Spikeball:	; Routine 6
00013C64 5428 0024                  		addq.b	#2,obRoutine(a0)
00013C68 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013C70 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013C76 0028 0004 0001             		ori.b	#4,obRender(a0)
00013C7C 117C 0004 0018             		move.b	#4,obPriority(a0)
00013C82 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013C88 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013C8E 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013C94 0668 0028 0008             		addi.w	#$28,obX(a0)
00013C9A 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013CA0 117C 0001 001A             		move.b	#1,obFrame(a0)
00013CA6 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013CAC 6700                       		beq.s	See_MoveSpike	; if not, branch
00013CAE 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013CB4 117C 0002 003A             		move.b	#2,see_frame(a0)
00013CBA                            
00013CBA                            See_MoveSpike:	; Routine 8
00013CBA 2268 003C                  		movea.l	see_parent(a0),a1
00013CBE 7000                       		moveq	#0,d0
00013CC0 1028 003A                  		move.b	see_frame(a0),d0
00013CC4 9029 003A                  		sub.b	see_frame(a1),d0
00013CC8 6700                       		beq.s	loc_1183E
00013CCA 6400                       		bcc.s	loc_117FC
00013CCC 4400                       		neg.b	d0
00013CCE                            
00013CCE                            loc_117FC:
00013CCE 323C F7E8                  		move.w	#-$818,d1
00013CD2 343C FEEC                  		move.w	#-$114,d2
00013CD6 0C00 0001                  		cmpi.b	#1,d0
00013CDA 6700                       		beq.s	loc_11822
00013CDC 323C F510                  		move.w	#-$AF0,d1
00013CE0 343C FF34                  		move.w	#-$CC,d2
00013CE4 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013CEA 6D00                       		blt.s	loc_11822
00013CEC 323C F200                  		move.w	#-$E00,d1
00013CF0 343C FF60                  		move.w	#-$A0,d2
00013CF4                            
00013CF4                            loc_11822:
00013CF4 3141 0012                  		move.w	d1,obVelY(a0)
00013CF8 3142 0010                  		move.w	d2,obVelX(a0)
00013CFC 3028 0008                  		move.w	obX(a0),d0
00013D00 9068 0030                  		sub.w	see_origX(a0),d0
00013D04 6400                       		bcc.s	loc_11838
00013D06 4468 0010                  		neg.w	obVelX(a0)
00013D0A                            
00013D0A                            loc_11838:
00013D0A 5428 0024                  		addq.b	#2,obRoutine(a0)
00013D0E 6000                       		bra.s	See_SpikeFall
00013D10                            ; ===========================================================================
00013D10                            
00013D10                            loc_1183E:
00013D10 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013D16 7000                       		moveq	#0,d0
00013D18 1029 001A                  		move.b	obFrame(a1),d0
00013D1C 343C 0028                  		move.w	#$28,d2
00013D20 3228 0008                  		move.w	obX(a0),d1
00013D24 9268 0030                  		sub.w	see_origX(a0),d1
00013D28 6400                       		bcc.s	loc_1185C
00013D2A 4442                       		neg.w	d2
00013D2C 5440                       		addq.w	#2,d0
00013D2E                            
00013D2E                            loc_1185C:
00013D2E D040                       		add.w	d0,d0
00013D30 3228 0034                  		move.w	see_origY(a0),d1
00013D34 D272 0000                  		add.w	(a2,d0.w),d1
00013D38 3141 000C                  		move.w	d1,obY(a0)
00013D3C D468 0030                  		add.w	see_origX(a0),d2
00013D40 3142 0008                  		move.w	d2,obX(a0)
00013D44 4268 000E                  		clr.w	obY+2(a0)
00013D48 4268 000A                  		clr.w	obX+2(a0)
00013D4C 4E75                       		rts	
00013D4E                            ; ===========================================================================
00013D4E                            
00013D4E                            See_SpikeFall:	; Routine $A
00013D4E 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013D52 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013D54 6100 BC80                  		bsr.w	ObjectFall
00013D58 3028 0034                  		move.w	see_origY(a0),d0
00013D5C 0440 002F                  		subi.w	#$2F,d0
00013D60 B068 000C                  		cmp.w	obY(a0),d0
00013D64 6E00                       		bgt.s	locret_11898
00013D66 6100 BC6E                  		bsr.w	ObjectFall
00013D6A                            
00013D6A                            locret_11898:
00013D6A 4E75                       		rts	
00013D6C                            ; ===========================================================================
00013D6C                            
00013D6C                            loc_1189A:
00013D6C 6100 BC68                  		bsr.w	ObjectFall
00013D70 2268 003C                  		movea.l	see_parent(a0),a1
00013D74 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013D7A 7000                       		moveq	#0,d0
00013D7C 1029 001A                  		move.b	obFrame(a1),d0
00013D80 3228 0008                  		move.w	obX(a0),d1
00013D84 9268 0030                  		sub.w	see_origX(a0),d1
00013D88 6400                       		bcc.s	loc_118BA
00013D8A 5440                       		addq.w	#2,d0
00013D8C                            
00013D8C                            loc_118BA:
00013D8C D040                       		add.w	d0,d0
00013D8E 3228 0034                  		move.w	see_origY(a0),d1
00013D92 D272 0000                  		add.w	(a2,d0.w),d1
00013D96 B268 000C                  		cmp.w	obY(a0),d1
00013D9A 6E00                       		bgt.s	locret_11938
00013D9C 2268 003C                  		movea.l	see_parent(a0),a1
00013DA0 7202                       		moveq	#2,d1
00013DA2 4A68 0010                  		tst.w	obVelX(a0)
00013DA6 6B00                       		bmi.s	See_Spring
00013DA8 7200                       		moveq	#0,d1
00013DAA                            
00013DAA                            See_Spring:
00013DAA 1341 003A                  		move.b	d1,$3A(a1)
00013DAE 1141 003A                  		move.b	d1,see_frame(a0)
00013DB2 B229 001A                  		cmp.b	obFrame(a1),d1
00013DB6 6700                       		beq.s	loc_1192C
00013DB8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013DBE 6700                       		beq.s	loc_1192C
00013DC0 4229 0025                  		clr.b	ob2ndRout(a1)
00013DC4 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013DCA 45F8 D000                  		lea	(v_player).w,a2
00013DCE 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013DD4 446A 0012                  		neg.w	obVelY(a2)
00013DD8 08EA 0001 0022             		bset	#1,obStatus(a2)
00013DDE 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013DE4 422A 003C                  		clr.b	$3C(a2)
00013DE8 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013DEE 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013DFE                            
00013DFE                            loc_1192C:
00013DFE 4268 0010                  		clr.w	obVelX(a0)
00013E02 4268 0012                  		clr.w	obVelY(a0)
00013E06 5528 0024                  		subq.b	#2,obRoutine(a0)
00013E0A                            
00013E0A                            locret_11938:
00013E0A 4E75                       		rts	
00013E0C                            ; ===========================================================================
00013E0C FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013E16                            
00013E16                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013E46                            		even
00013E46                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013E76                            		even
00013E76                            		even
00013E76                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013E76                            ; ---------------------------------------------------------------------------
00013E76                            ; Sprite mappings - seesaws (SLZ)
00013E76                            ; ---------------------------------------------------------------------------
00013E76                            Map_Seesaw_internal:
00013E76 0000                       		dc.w @sloping-Map_Seesaw_internal
00013E78 0000                       		dc.w @flat-Map_Seesaw_internal
00013E7A 0000                       		dc.w @sloping-Map_Seesaw_internal
00013E7C 0000                       		dc.w @flat-Map_Seesaw_internal
00013E7E 07                         @sloping:	dc.b 7
00013E7F D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013E84 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013E89 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013E8E EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013E93 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013E98 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013E9D FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013EA2 04                         @flat:		dc.b 4
00013EA3 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013EA8 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013EAD E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013EB2 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013EB8 00                         		even
00013EB8 00                         		even
00013EB8                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013EB8                            ; ---------------------------------------------------------------------------
00013EB8                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013EB8                            ; ---------------------------------------------------------------------------
00013EB8                            Map_SSawBall_internal:
00013EB8 0000                       		dc.w @red-Map_SSawBall_internal
00013EBA 0000                       		dc.w @silver-Map_SSawBall_internal
00013EBC 01                         @red:		dc.b 1
00013EBD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013EC2 01                         @silver:	dc.b 1
00013EC3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013EC8                            		even
00013EC8                            		even
00013EC8                            		include	"_incObj\5F Bomb Enemy.asm"
00013EC8                            ; ---------------------------------------------------------------------------
00013EC8                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013EC8                            ; ---------------------------------------------------------------------------
00013EC8                            
00013EC8                            Bomb:
00013EC8 7000                       		moveq	#0,d0
00013ECA 1028 0024                  		move.b	obRoutine(a0),d0
00013ECE 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013ED2 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013ED6                            ; ===========================================================================
00013ED6 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013ED8 0000                       		dc.w Bom_Action-Bom_Index
00013EDA 0000                       		dc.w Bom_Display-Bom_Index
00013EDC 0000                       		dc.w Bom_End-Bom_Index
00013EDE                            
00013EDE =00000030                  bom_time:	equ $30		; time of fuse
00013EDE =00000034                  bom_origY:	equ $34		; original y-axis position
00013EDE =0000003C                  bom_parent:	equ $3C		; address of parent object
00013EDE                            ; ===========================================================================
00013EDE                            
00013EDE                            Bom_Main:	; Routine 0
00013EDE 5428 0024                  		addq.b	#2,obRoutine(a0)
00013EE2 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013EEA 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013EF0 0028 0004 0001             		ori.b	#4,obRender(a0)
00013EF6 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013EFC 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013F02 1028 0028                  		move.b	obSubtype(a0),d0
00013F06 6700                       		beq.s	loc_11A3C
00013F08 1140 0024                  		move.b	d0,obRoutine(a0)
00013F0C 4E75                       		rts	
00013F0E                            ; ===========================================================================
00013F0E                            
00013F0E                            loc_11A3C:
00013F0E 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013F14 0868 0000 0022             		bchg	#0,obStatus(a0)
00013F1A                            
00013F1A                            Bom_Action:	; Routine 2
00013F1A 7000                       		moveq	#0,d0
00013F1C 1028 0025                  		move.b	ob2ndRout(a0),d0
00013F20 323B 0000                  		move.w	@index(pc,d0.w),d1
00013F24 4EBB 1000                  		jsr	@index(pc,d1.w)
00013F28 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013F2E 6100 8BB4                  		bsr.w	AnimateSprite
00013F32 6000 DA78                  		bra.w	RememberState
00013F36                            ; ===========================================================================
00013F36 0000                       @index:		dc.w @walk-@index
00013F38 0000                       		dc.w @wait-@index
00013F3A 0000                       		dc.w @explode-@index
00013F3C                            ; ===========================================================================
00013F3C                            
00013F3C                            @walk:
00013F3C 6100 0000                  		bsr.w	@chksonic
00013F40 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013F44 6A00                       		bpl.s	@noflip		; if time remains, branch
00013F46 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013F4A 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013F50 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013F56 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013F5C 0868 0000 0022             		bchg	#0,obStatus(a0)
00013F62 6700                       		beq.s	@noflip
00013F64 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013F68                            
00013F68                            	@noflip:
00013F68 4E75                       		rts	
00013F6A                            ; ===========================================================================
00013F6A                            
00013F6A                            @wait:
00013F6A 6100 0000                  		bsr.w	@chksonic
00013F6E 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013F72 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013F74 6100 BA98                  		bsr.w	SpeedToPos
00013F78 4E75                       		rts	
00013F7A                            ; ===========================================================================
00013F7A                            
00013F7A                            	@stopwalking:
00013F7A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013F7E 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013F84 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013F88 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013F8E 4E75                       		rts	
00013F90                            ; ===========================================================================
00013F90                            
00013F90                            @explode:
00013F90 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013F94 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013F96 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013F9A 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013FA0                            
00013FA0                            	@noexplode:
00013FA0 4E75                       		rts	
00013FA2                            ; ===========================================================================
00013FA2                            
00013FA2                            @chksonic:
00013FA2 3038 D008                  		move.w	(v_player+obX).w,d0
00013FA6 9068 0008                  		sub.w	obX(a0),d0
00013FAA 6400                       		bcc.s	@isleft
00013FAC 4440                       		neg.w	d0
00013FAE                            
00013FAE                            	@isleft:
00013FAE 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013FB2 6400                       		bcc.s	@outofrange	; if not, branch
00013FB4 3038 D00C                  		move.w	(v_player+obY).w,d0
00013FB8 9068 000C                  		sub.w	obY(a0),d0
00013FBC 6400                       		bcc.s	@isabove
00013FBE 4440                       		neg.w	d0
00013FC0                            
00013FC0                            	@isabove:
00013FC0 0C40 0060                  		cmpi.w	#$60,d0
00013FC4 6400                       		bcc.s	@outofrange
00013FC6 4A78 FE08                  		tst.w	(v_debuguse).w
00013FCA 6600                       		bne.s	@outofrange
00013FCC                            
00013FCC 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013FD2 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013FD8 4268 0010                  		clr.w	obVelX(a0)
00013FDC 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013FE2 6100 BEE0                  		bsr.w	FindNextFreeObj
00013FE6 6600                       		bne.s	@outofrange
00013FE8 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013FEC 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013FF2 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013FF8 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013FFE 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00014004 137C 0004 0028             		move.b	#4,obSubtype(a1)
0001400A 137C 0003 001C             		move.b	#3,obAnim(a1)
00014010 337C 0010 0012             		move.w	#$10,obVelY(a1)
00014016 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
0001401C 6700                       		beq.s	@normal		; if not, branch
0001401E 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00014022                            
00014022                            	@normal:
00014022 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00014028 2348 003C                  		move.l	a0,bom_parent(a1)
0001402C                            
0001402C                            @outofrange:
0001402C 4E75                       		rts	
0001402E                            ; ===========================================================================
0001402E                            
0001402E                            Bom_Display:	; Routine 4
0001402E 6100                       		bsr.s	loc_11B70
00014030 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00014036 6100 8AAC                  		bsr.w	AnimateSprite
0001403A 6000 D970                  		bra.w	RememberState
0001403E                            ; ===========================================================================
0001403E                            
0001403E                            loc_11B70:
0001403E 5368 0030                  		subq.w	#1,bom_time(a0)
00014042 6B00                       		bmi.s	loc_11B7C
00014044 6100 B9C8                  		bsr.w	SpeedToPos
00014048 4E75                       		rts	
0001404A                            ; ===========================================================================
0001404A                            
0001404A                            loc_11B7C:
0001404A 4268 0030                  		clr.w	bom_time(a0)
0001404E 4228 0024                  		clr.b	obRoutine(a0)
00014052 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00014058 7203                       		moveq	#3,d1
0001405A 2248                       		movea.l	a0,a1
0001405C 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00014062 6000                       		bra.s	@makeshrapnel
00014064                            ; ===========================================================================
00014064                            
00014064                            	@loop:
00014064 6100 BE5E                  		bsr.w	FindNextFreeObj
00014068 6600                       		bne.s	@fail
0001406A                            
0001406A                            @makeshrapnel:
0001406A 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
0001406E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014074 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001407A 137C 0006 0028             		move.b	#6,obSubtype(a1)
00014080 137C 0004 001C             		move.b	#4,obAnim(a1)
00014086 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001408A 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001408E 137C 0098 0020             		move.b	#$98,obColType(a1)
00014094 08E9 0007 0001             		bset	#7,obRender(a1)
0001409A                            
0001409A                            	@fail:
0001409A 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
0001409E                            
0001409E 117C 0006 0024             		move.b	#6,obRoutine(a0)
000140A4                            
000140A4                            Bom_End:	; Routine 6
000140A4 6100 B968                  		bsr.w	SpeedToPos
000140A8 0668 0018 0012             		addi.w	#$18,obVelY(a0)
000140AE 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
000140B4 6100 8A2E                  		bsr.w	AnimateSprite
000140B8 4A28 0001                  		tst.b	obRender(a0)
000140BC 6A00 B9A4                  		bpl.w	DeleteObject
000140C0 6000 B960                  		bra.w	DisplaySprite
000140C4                            ; ===========================================================================
000140C4 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
000140C4 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
000140D4                            		include	"_anim\Bomb Enemy.asm"
000140D4                            ; ---------------------------------------------------------------------------
000140D4                            ; Animation script - Bomb enemy
000140D4                            ; ---------------------------------------------------------------------------
000140D4 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
000140D6 0000                       		dc.w @walk-Ani_Bomb
000140D8 0000                       		dc.w @activated-Ani_Bomb
000140DA 0000                       		dc.w @fuse-Ani_Bomb
000140DC 0000                       		dc.w @shrapnel-Ani_Bomb
000140DE 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
000140E2 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
000140E8 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
000140EC 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
000140F0 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
000140F4                            		even
000140F4                            		even
000140F4                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
000140F4                            ; ---------------------------------------------------------------------------
000140F4                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000140F4                            ; ---------------------------------------------------------------------------
000140F4                            Map_Bomb_internal:
000140F4 0000                       		dc.w @stand1-Map_Bomb_internal
000140F6 0000                       		dc.w @stand2-Map_Bomb_internal
000140F8 0000                       		dc.w @walk1-Map_Bomb_internal
000140FA 0000                       		dc.w @walk2-Map_Bomb_internal
000140FC 0000                       		dc.w @walk3-Map_Bomb_internal
000140FE 0000                       		dc.w @walk4-Map_Bomb_internal
00014100 0000                       		dc.w @activate1-Map_Bomb_internal
00014102 0000                       		dc.w @activate2-Map_Bomb_internal
00014104 0000                       		dc.w @fuse1-Map_Bomb_internal
00014106 0000                       		dc.w @fuse2-Map_Bomb_internal
00014108 0000                       		dc.w @shrapnel1-Map_Bomb_internal
0001410A 0000                       		dc.w @shrapnel2-Map_Bomb_internal
0001410C 03                         @stand1:	dc.b 3
0001410D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00014112 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014117 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001411C 03                         @stand2:	dc.b 3
0001411D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014122 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014127 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001412C 03                         @walk1:		dc.b 3
0001412D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00014132 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00014137 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001413C 03                         @walk2:		dc.b 3
0001413D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014142 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00014147 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001414C 03                         @walk3:		dc.b 3
0001414D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00014152 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00014157 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001415C 03                         @walk4:		dc.b 3
0001415D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014162 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00014167 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001416C 02                         @activate1:	dc.b 2
0001416D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00014172 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014177 02                         @activate2:	dc.b 2
00014178 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001417D 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014182 01                         @fuse1:		dc.b 1
00014183 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
00014188 01                         @fuse2:		dc.b 1
00014189 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001418E 01                         @shrapnel1:	dc.b 1
0001418F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00014194 01                         @shrapnel2:	dc.b 1
00014195 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001419A                            		even
0001419A                            		even
0001419A                            
0001419A                            		include	"_incObj\60 Orbinaut.asm"
0001419A                            ; ---------------------------------------------------------------------------
0001419A                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001419A                            ; ---------------------------------------------------------------------------
0001419A                            
0001419A                            Orbinaut:
0001419A 7000                       		moveq	#0,d0
0001419C 1028 0024                  		move.b	obRoutine(a0),d0
000141A0 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
000141A4 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
000141A8                            ; ===========================================================================
000141A8 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
000141AA 0000                       		dc.w Orb_ChkSonic-Orb_Index
000141AC 0000                       		dc.w Orb_Display-Orb_Index
000141AE 0000                       		dc.w Orb_MoveOrb-Orb_Index
000141B0 0000                       		dc.w Orb_ChkDel2-Orb_Index
000141B2                            
000141B2 =0000003C                  orb_parent:	equ $3C		; address of parent object
000141B2                            ; ===========================================================================
000141B2                            
000141B2                            Orb_Main:	; Routine 0
000141B2 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
000141BA 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
000141C0 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000141C6 6700                       		beq.s	@isscrap
000141C8 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
000141CE                            
000141CE                            	@isscrap:
000141CE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000141D4 6600                       		bne.s	@notlabyrinth
000141D6 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
000141DC                            
000141DC                            	@notlabyrinth:
000141DC 0028 0004 0001             		ori.b	#4,obRender(a0)
000141E2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000141E8 117C 000B 0020             		move.b	#$B,obColType(a0)
000141EE 117C 000C 0014             		move.b	#$C,obActWid(a0)
000141F4 7400                       		moveq	#0,d2
000141F6 45E8 0037                  		lea	$37(a0),a2
000141FA 264A                       		movea.l	a2,a3
000141FC 524A                       		addq.w	#1,a2
000141FE 7203                       		moveq	#3,d1
00014200                            
00014200                            @makesatellites:
00014200 6100 BCC2                  		bsr.w	FindNextFreeObj
00014204 6600                       		bne.s	@fail
00014206 5213                       		addq.b	#1,(a3)
00014208 3A09                       		move.w	a1,d5
0001420A 0445 D000                  		subi.w	#$D000,d5
0001420E EC4D                       		lsr.w	#6,d5
00014210 0245 007F                  		andi.w	#$7F,d5
00014214 14C5                       		move.b	d5,(a2)+
00014216 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00014218 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
0001421E 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00014224 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001422A 0029 0004 0001             		ori.b	#4,obRender(a1)
00014230 337C 0200 0018             		move.w	#$200,obPriority(a1)
00014236 137C 0008 0014             		move.b	#8,obActWid(a1)
0001423C 137C 0003 001A             		move.b	#3,obFrame(a1)
00014242 137C 0098 0020             		move.b	#$98,obColType(a1)
00014248 1342 0026                  		move.b	d2,obAngle(a1)
0001424C 0602 0040                  		addi.b	#$40,d2
00014250 2348 003C                  		move.l	a0,orb_parent(a1)
00014254 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
00014258                            
00014258                            	@fail:
00014258 7001                       		moveq	#1,d0
0001425A 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00014260 6700                       		beq.s	@noflip		; if not, branch
00014262 4440                       		neg.w	d0
00014264                            
00014264                            	@noflip:
00014264 1140 0036                  		move.b	d0,$36(a0)
00014268 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
0001426E 5428 0024                  		addq.b	#2,obRoutine(a0)
00014272 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
00014278 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
0001427E 6700                       		beq.s	@noflip2	; if not, branch
00014280 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00014284                            
00014284                            	@noflip2:
00014284 4E75                       		rts	
00014286                            ; ===========================================================================
00014286                            
00014286                            Orb_ChkSonic:	; Routine 2
00014286 3038 D008                  		move.w	(v_player+obX).w,d0
0001428A 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
0001428E 6400                       		bcc.s	@isright	; if yes, branch
00014290 4440                       		neg.w	d0
00014292                            
00014292                            	@isright:
00014292 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00014296 6400                       		bcc.s	@animate	; if not, branch
00014298 3038 D00C                  		move.w	(v_player+obY).w,d0
0001429C 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
000142A0 6400                       		bcc.s	@isabove	; if yes, branch
000142A2 4440                       		neg.w	d0
000142A4                            
000142A4                            	@isabove:
000142A4 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000142A8 6400                       		bcc.s	@animate	; if not, branch
000142AA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000142AE 6600                       		bne.s	@animate	; if yes, branch
000142B0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
000142B6                            
000142B6                            @animate:
000142B6 43F9 0000 0000             		lea	(Ani_Orb).l,a1
000142BC 6100 8826                  		bsr.w	AnimateSprite
000142C0 6000 0000                  		bra.w	Orb_ChkDel
000142C4                            ; ===========================================================================
000142C4                            
000142C4                            Orb_Display:	; Routine 4
000142C4 6100 B748                  		bsr.w	SpeedToPos
000142C8                            
000142C8                            Orb_ChkDel:
000142E6 6000 B73A                  		bra.w	DisplaySprite
000142EA                            
000142EA                            @chkgone:
000142EA 45F8 FC00                  		lea	(v_objstate).w,a2
000142EE 7000                       		moveq	#0,d0
000142F0 1028 0023                  		move.b	obRespawnNo(a0),d0
000142F4 6700                       		beq.s	loc_11E34
000142F6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000142FC                            
000142FC                            loc_11E34:
000142FC 45E8 0037                  		lea	$37(a0),a2
00014300 7400                       		moveq	#0,d2
00014302 141A                       		move.b	(a2)+,d2
00014304 5342                       		subq.w	#1,d2
00014306 6500                       		bcs.s	Orb_Delete
00014308                            
00014308                            loc_11E40:
00014308 7000                       		moveq	#0,d0
0001430A 101A                       		move.b	(a2)+,d0
0001430C ED48                       		lsl.w	#6,d0
0001430E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00014314 2240                       		movea.l	d0,a1
00014316 6100 B74C                  		bsr.w	DeleteChild
0001431A 51CA FFEC                  		dbf	d2,loc_11E40
0001431E                            
0001431E                            Orb_Delete:
0001431E 6000 B742                  		bra.w	DeleteObject
00014322                            ; ===========================================================================
00014322                            
00014322                            Orb_MoveOrb:	; Routine 6
00014322 2268 003C                  		movea.l	orb_parent(a0),a1
00014326 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
0001432A 6600 B736                  		bne.w	DeleteObject	; if not, delete
0001432E 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00014334 6600                       		bne.s	@circle		; if not, branch
00014336 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
0001433C 6600                       		bne.s	@circle		; if not, branch
0001433E 5428 0024                  		addq.b	#2,obRoutine(a0)
00014342 5329 0037                  		subq.b	#1,$37(a1)
00014346 6600                       		bne.s	@fire
00014348 5429 0024                  		addq.b	#2,obRoutine(a1)
0001434C                            
0001434C                            	@fire:
0001434C 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00014352 0829 0000 0022             		btst	#0,obStatus(a1)
00014358 6700                       		beq.s	@noflip
0001435A 4468 0010                  		neg.w	obVelX(a0)
0001435E                            
0001435E                            	@noflip:
0001435E 6000 B6C2                  		bra.w	DisplaySprite
00014362                            ; ===========================================================================
00014362                            
00014362                            @circle:
00014362 1028 0026                  		move.b	obAngle(a0),d0
00014366 4EB9 0000 3A82             		jsr	(CalcSine).l
0001436C E841                       		asr.w	#4,d1
0001436E D269 0008                  		add.w	obX(a1),d1
00014372 3141 0008                  		move.w	d1,obX(a0)
00014376 E840                       		asr.w	#4,d0
00014378 D069 000C                  		add.w	obY(a1),d0
0001437C 3140 000C                  		move.w	d0,obY(a0)
00014380 1029 0036                  		move.b	$36(a1),d0
00014384 D128 0026                  		add.b	d0,obAngle(a0)
00014388 6000 B698                  		bra.w	DisplaySprite
0001438C                            ; ===========================================================================
0001438C                            
0001438C                            Orb_ChkDel2:	; Routine 8
0001438C 6100 B680                  		bsr.w	SpeedToPos
00014390 4A28 0001                  		tst.b	obRender(a0)
00014394 6A00 B6CC                  		bpl.w	DeleteObject
00014398 6000 B688                  		bra.w	DisplaySprite
00014398 6000 B688                  		bra.w	DisplaySprite
0001439C                            		include	"_anim\Orbinaut.asm"
0001439C                            ; ---------------------------------------------------------------------------
0001439C                            ; Animation script - Orbinaut enemy
0001439C                            ; ---------------------------------------------------------------------------
0001439C 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
0001439E 0000                       		dc.w @angers-Ani_Orb
000143A0 0F00 FF                    @normal:	dc.b $F, 0, afEnd
000143A4 00                         		even
000143A4 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
000143AA 00                         		even
000143AA 00                         		even
000143AA                            Map_Orb:	include	"_maps\Orbinaut.asm"
000143AA                            ; ---------------------------------------------------------------------------
000143AA                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000143AA                            ; ---------------------------------------------------------------------------
000143AA                            Map_Orb_internal:
000143AA 0000                       		dc.w @normal-Map_Orb_internal
000143AC 0000                       		dc.w @medium-Map_Orb_internal
000143AE 0000                       		dc.w @angry-Map_Orb_internal
000143B0 0000                       		dc.w @spikeball-Map_Orb_internal
000143B2 01                         @normal:	dc.b 1
000143B3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000143B8 01                         @medium:	dc.b 1
000143B9 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000143BE 01                         @angry:		dc.b 1
000143BF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000143C4 01                         @spikeball:	dc.b 1
000143C5 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000143CA                            		even
000143CA                            		even
000143CA                            
000143CA                            		include	"_incObj\16 Harpoon.asm"
000143CA                            ; ---------------------------------------------------------------------------
000143CA                            ; Object 16 - harpoon (LZ)
000143CA                            ; ---------------------------------------------------------------------------
000143CA                            
000143CA                            Harpoon:
000143CA 7000                       		moveq	#0,d0
000143CC 1028 0024                  		move.b	obRoutine(a0),d0
000143D0 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
000143D4 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
000143D8                            ; ===========================================================================
000143D8 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
000143DA 0000                       		dc.w Harp_Move-Harp_Index
000143DC 0000                       		dc.w Harp_Wait-Harp_Index
000143DE                            
000143DE =00000030                  harp_time:	equ $30		; time between stabbing/retracting
000143DE                            ; ===========================================================================
000143DE                            
000143DE                            Harp_Main:	; Routine 0
000143DE 5428 0024                  		addq.b	#2,obRoutine(a0)
000143E2 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
000143EA 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
000143F0 0028 0004 0001             		ori.b	#4,obRender(a0)
000143F6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000143FC 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
00014402 117C 0014 0014             		move.b	#$14,obActWid(a0)
00014408 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
0001440E                            
0001440E                            Harp_Move:	; Routine 2
0001440E 43F9 0000 0000             		lea	(Ani_Harp).l,a1
00014414 6100 86CE                  		bsr.w	AnimateSprite
00014418 7000                       		moveq	#0,d0
0001441A 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
0001441E 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
00014424 6000 D586                  		bra.w	RememberState
00014428                            
00014428                            	@types:
00014428 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001442E                            		even
0001442E                            
0001442E                            Harp_Wait:	; Routine 4
0001442E 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00014432 6A00                       		bpl.s	@chkdel		; branch if time remains
00014434 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
0001443A 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
0001443E 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
00014444                            
00014444                            	@chkdel:
00014444 6000 D566                  		bra.w	RememberState
00014444 6000 D566                  		bra.w	RememberState
00014448                            		include	"_anim\Harpoon.asm"
00014448                            ; ---------------------------------------------------------------------------
00014448                            ; Animation script - harpoon (LZ)
00014448                            ; ---------------------------------------------------------------------------
00014448 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
0001444A 0000                       		dc.w @h_retracting-Ani_Harp
0001444C 0000                       		dc.w @v_extending-Ani_Harp
0001444E 0000                       		dc.w @v_retracting-Ani_Harp
00014450 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00014454 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
00014458 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
0001445C 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00014460                            		even
00014460                            		even
00014460                            Map_Harp:	include	"_maps\Harpoon.asm"
00014460                            ; --------------------------------------------------------------------------------
00014460                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00014460                            ; --------------------------------------------------------------------------------
00014460                            
00014460                            SME_JPFHb:	
00014460 0000 0000                  		dc.w SME_JPFHb_C-SME_JPFHb, SME_JPFHb_12-SME_JPFHb	
00014464 0000 0000                  		dc.w SME_JPFHb_18-SME_JPFHb, SME_JPFHb_23-SME_JPFHb	
00014468 0000 0000                  		dc.w SME_JPFHb_29-SME_JPFHb, SME_JPFHb_2F-SME_JPFHb	
0001446C 01                         SME_JPFHb_C:	dc.b 1	
0001446D FC04 2000 F8               		dc.b $FC, 4, $20, 0, $F8	
00014472 01                         SME_JPFHb_12:	dc.b 1	
00014473 FC0C 2002 F8               		dc.b $FC, $C, $20, 2, $F8	
00014478 02                         SME_JPFHb_18:	dc.b 2	
00014479 FC08 2006 F8               		dc.b $FC, 8, $20, 6, $F8	
0001447E FC08 2003 10               		dc.b $FC, 8, $20, 3, $10	
00014483 01                         SME_JPFHb_23:	dc.b 1	
00014484 F801 2009 FC               		dc.b $F8, 1, $20, 9, $FC	
00014489 01                         SME_JPFHb_29:	dc.b 1	
0001448A E803 200B FC               		dc.b $E8, 3, $20, $B, $FC	
0001448F 02                         SME_JPFHb_2F:	dc.b 2	
00014490 D802 200B FC               		dc.b $D8, 2, $20, $B, $FC	
00014495 F002 200F FC               		dc.b $F0, 2, $20, $F, $FC	
0001449A                            		even
0001449A                            		even
0001449A                            		include	"_incObj\61 LZ Blocks.asm"
0001449A                            ; ---------------------------------------------------------------------------
0001449A                            ; Object 61 - blocks (LZ)
0001449A                            ; ---------------------------------------------------------------------------
0001449A                            
0001449A                            LabyrinthBlock:
0001449A 7000                       		moveq	#0,d0
0001449C 1028 0024                  		move.b	obRoutine(a0),d0
000144A0 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
000144A4 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
000144A8                            ; ===========================================================================
000144A8 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
000144AA 0000                       		dc.w LBlk_Action-LBlk_Index
000144AC                            
000144AC 1010                       LBlk_Var:	dc.b $10, $10		; width, height
000144AE 200C                       		dc.b $20, $C
000144B0 1010                       		dc.b $10, $10
000144B2 1010                       		dc.b $10, $10
000144B4                            
000144B4 =00000016                  lblk_height:	equ $16		; block height
000144B4 =00000034                  lblk_origX:	equ $34		; original x-axis position
000144B4 =00000030                  lblk_origY:	equ $30		; original y-axis position
000144B4 =00000036                  lblk_time:	equ $36		; time delay for block movement
000144B4 =00000038                  lblk_untouched:	equ $38		; flag block as untouched
000144B4                            ; ===========================================================================
000144B4                            
000144B4                            LBlk_Main:	; Routine 0
000144B4 5428 0024                  		addq.b	#2,obRoutine(a0)
000144B8 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
000144C0 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
000144C6 117C 0004 0001             		move.b	#4,obRender(a0)
000144CC 317C 0180 0018             		move.w	#$180,obPriority(a0)
000144D2 7000                       		moveq	#0,d0
000144D4 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
000144D8 E648                       		lsr.w	#3,d0		; read only the 1st digit
000144DA 0240 000E                  		andi.w	#$E,d0
000144DE 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
000144E2 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
000144E6 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
000144EA E248                       		lsr.w	#1,d0
000144EC 1140 001A                  		move.b	d0,obFrame(a0)
000144F0 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
000144F6 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
000144FC 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014500 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
00014504 6700                       		beq.s	LBlk_Action	; branch if 0
00014506 0C00 0007                  		cmpi.b	#7,d0
0001450A 6700                       		beq.s	LBlk_Action	; branch if 7
0001450C 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
00014512                            
00014512                            LBlk_Action:	; Routine 2
00014512 3F28 0008                  		move.w	obX(a0),-(sp)
00014516 7000                       		moveq	#0,d0
00014518 1028 0028                  		move.b	obSubtype(a0),d0
0001451C 0240 000F                  		andi.w	#$F,d0
00014520 D040                       		add.w	d0,d0
00014522 323B 0000                  		move.w	@index(pc,d0.w),d1
00014526 4EBB 1000                  		jsr	@index(pc,d1.w)
0001452A 381F                       		move.w	(sp)+,d4
0001452C 4A28 0001                  		tst.b	obRender(a0)
00014530 6A00                       		bpl.s	@chkdel
00014532 7200                       		moveq	#0,d1
00014534 1228 0014                  		move.b	obActWid(a0),d1
00014538 0641 000B                  		addi.w	#$B,d1
0001453C 7400                       		moveq	#0,d2
0001453E 1428 0016                  		move.b	lblk_height(a0),d2
00014542 3602                       		move.w	d2,d3
00014544 5243                       		addq.w	#1,d3
00014546 6100 D8FC                  		bsr.w	SolidObject
0001454A 1144 003F                  		move.b	d4,$3F(a0)
0001454E 6100 0000                  		bsr.w	loc_12180
00014552                            
00014552                            @chkdel:
00014570 6000 B4B0                  		bra.w	DisplaySprite
00014574                            ; ===========================================================================
00014574 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00014578 0000 0000                  		dc.w @type02-@index, @type03-@index
0001457C 0000 0000                  		dc.w @type04-@index, @type05-@index
00014580 0000 0000                  		dc.w @type06-@index, @type07-@index
00014584                            ; ===========================================================================
00014584                            
00014584                            @type00:
00014584 4E75                       		rts	
00014586                            ; ===========================================================================
00014586                            
00014586                            @type01:
00014586                            @type03:
00014586 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
0001458A 6600                       		bne.s	@wait01		; if yes, branch
0001458C 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
00014592 6700                       		beq.s	@donothing01	; if not, branch
00014594 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
0001459A                            
0001459A                            	@donothing01:
0001459A 4E75                       		rts	
0001459C                            ; ===========================================================================
0001459C                            
0001459C                            	@wait01:
0001459C 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000145A0 66F8                       		bne.s	@donothing01	; if time remains, branch
000145A2 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000145A6 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000145AA 4E75                       		rts	
000145AC                            ; ===========================================================================
000145AC                            
000145AC                            @type02:
000145AC                            @type06:
000145AC 6100 B460                  		bsr.w	SpeedToPos
000145B0 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000145B4 6100 0000                  		bsr.w	ObjFloorDist
000145B8 4A41                       		tst.w	d1		; has block hit the floor?
000145BA 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
000145BE 5241                       		addq.w	#1,d1
000145C0 D368 000C                  		add.w	d1,obY(a0)
000145C4 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
000145C8 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000145CC                            
000145CC                            	@nofloor02:
000145CC 4E75                       		rts	
000145CE                            ; ===========================================================================
000145CE                            
000145CE                            @type04:
000145CE 6100 B43E                  		bsr.w	SpeedToPos
000145D2 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
000145D6 6100 0000                  		bsr.w	ObjHitCeiling
000145DA 4A41                       		tst.w	d1		; has block hit the ceiling?
000145DC 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
000145E0 9368 000C                  		sub.w	d1,obY(a0)
000145E4 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
000145E8 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000145EC                            
000145EC                            	@noceiling04:
000145EC 4E75                       		rts	
000145EE                            ; ===========================================================================
000145EE                            
000145EE                            @type05:
000145EE 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
000145F4 6600                       		bne.s	@notouch05	; if not, branch
000145F6 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
000145FA 4228 0038                  		clr.b	lblk_untouched(a0)
000145FE                            
000145FE                            	@notouch05:
000145FE 4E75                       		rts	
00014600                            ; ===========================================================================
00014600                            
00014600                            @type07:
00014600 3038 F646                  		move.w	(v_waterpos1).w,d0
00014604 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
00014608 6700                       		beq.s	@stop07		; if yes, branch
0001460A 6400                       		bcc.s	@fall07		; branch if block is above water
0001460C 0C40 FFFE                  		cmpi.w	#-2,d0
00014610 6C00                       		bge.s	@loc_1214E
00014612 70FE                       		moveq	#-2,d0
00014614                            
00014614                            	@loc_1214E:
00014614 D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
00014618 6100 0000                  		bsr.w	ObjHitCeiling
0001461C 4A41                       		tst.w	d1		; has block hit the ceiling?
0001461E 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
00014622 9368 000C                  		sub.w	d1,obY(a0)	; stop block
00014626                            
00014626                            	@noceiling07:
00014626 4E75                       		rts	
00014628                            ; ===========================================================================
00014628                            
00014628                            @fall07:
00014628 0C40 0002                  		cmpi.w	#2,d0
0001462C 6F00                       		ble.s	@loc_1216A
0001462E 7002                       		moveq	#2,d0
00014630                            
00014630                            	@loc_1216A:
00014630 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
00014634 6100 0000                  		bsr.w	ObjFloorDist
00014638 4A41                       		tst.w	d1
0001463A 6A00 0000                  		bpl.w	@stop07
0001463E 5241                       		addq.w	#1,d1
00014640 D368 000C                  		add.w	d1,obY(a0)
00014644                            
00014644                            	@stop07:
00014644 4E75                       		rts	
00014646                            ; ===========================================================================
00014646                            
00014646                            loc_12180:
00014646 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
0001464A 6700                       		beq.s	locret_121C0	; if yes, branch
0001464C 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014652 6600                       		bne.s	loc_1219A	; if yes, branch
00014654 4A28 003E                  		tst.b	$3E(a0)
00014658 6700                       		beq.s	locret_121C0
0001465A 5928 003E                  		subq.b	#4,$3E(a0)
0001465E 6000                       		bra.s	loc_121A6
00014660                            ; ===========================================================================
00014660                            
00014660                            loc_1219A:
00014660 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00014666 6700                       		beq.s	locret_121C0
00014668 5828 003E                  		addq.b	#4,$3E(a0)
0001466C                            
0001466C                            loc_121A6:
0001466C 1028 003E                  		move.b	$3E(a0),d0
00014670 4EB9 0000 3A82             		jsr	(CalcSine).l
00014676 323C 0400                  		move.w	#$400,d1
0001467A C1C1                       		muls.w	d1,d0
0001467C 4840                       		swap	d0
0001467E D068 0030                  		add.w	lblk_origY(a0),d0
00014682 3140 000C                  		move.w	d0,obY(a0)
00014686                            
00014686                            locret_121C0:
00014686 4E75                       		rts	
00014686 4E75                       		rts	
00014688                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
00014688                            Map_6865:
00014688 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
0001468A 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
0001468C 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
0001468E 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
00014690 01                         Map_6865_8: 	dc.b $1
00014691 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
00014696 02                         Map_6865_E: 	dc.b $2
00014697 F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
0001469C F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000146A1 01                         Map_6865_19: 	dc.b $1
000146A2 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000146A7 01                         Map_6865_1F: 	dc.b $1
000146A8 F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000146AE 00                         	even
000146AE 00                         	even
000146AE                            		include	"_incObj\62 Gargoyle.asm"
000146AE                            ; ---------------------------------------------------------------------------
000146AE                            ; Object 62 - gargoyle head (LZ)
000146AE                            ; ---------------------------------------------------------------------------
000146AE                            
000146AE                            Gargoyle:
000146AE 7000                       		moveq	#0,d0
000146B0 1028 0024                  		move.b	obRoutine(a0),d0
000146B4 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000146B8 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
000146BC 6000 D2EE                  		bra.w	RememberState
000146C0                            ; ===========================================================================
000146C0 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
000146C2 0000                       		dc.w Gar_MakeFire-Gar_Index
000146C4 0000                       		dc.w Gar_FireBall-Gar_Index
000146C6 0000                       		dc.w Gar_AniFire-Gar_Index
000146C8                            
000146C8 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000146D0                            ; ===========================================================================
000146D0                            
000146D0                            Gar_Main:	; Routine 0
000146D0 5428 0024                  		addq.b	#2,obRoutine(a0)
000146D4 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000146DC 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
000146E2 0028 0004 0001             		ori.b	#4,obRender(a0)
000146E8 317C 0180 0018             		move.w	#$180,obPriority(a0)
000146EE 117C 0010 0014             		move.b	#$10,obActWid(a0)
000146F4 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000146F8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000146FC 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
00014702 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00014708 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001470E                            
0001470E                            Gar_MakeFire:	; Routine 2
0001470E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
00014712 6600                       		bne.s	@nofire		; if time remains, branch
00014714                            
00014714 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
0001471A 6100 B586                  		bsr.w	ChkObjectVisible
0001471E 6600                       		bne.s	@nofire
00014720 6100 B78C                  		bsr.w	FindFreeObj
00014724 6600                       		bne.s	@nofire
00014726 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
0001472A 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
0001472E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014734 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001473A 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014740 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00014746                            
00014746                            	@nofire:
00014746 4E75                       		rts	
00014748                            ; ===========================================================================
00014748                            
00014748                            Gar_FireBall:	; Routine 4
00014748 5428 0024                  		addq.b	#2,obRoutine(a0)
0001474C 117C 0008 0016             		move.b	#8,obHeight(a0)
00014752 117C 0008 0017             		move.b	#8,obWidth(a0)
00014758 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014760 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
00014766 0028 0004 0001             		ori.b	#4,obRender(a0)
0001476C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014772 117C 0098 0020             		move.b	#$98,obColType(a0)
00014778 117C 0008 0014             		move.b	#8,obActWid(a0)
0001477E 117C 0002 001A             		move.b	#2,obFrame(a0)
00014784 5068 000C                  		addq.w	#8,obY(a0)
00014788 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001478E 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
00014794 6600                       		bne.s	@noflip		; if not, branch
00014796 4468 0010                  		neg.w	obVelX(a0)
0001479A                            
0001479A                            	@noflip:
000147A4                            
000147A4                            Gar_AniFire:	; Routine 6
000147A4 1038 FE05                  		move.b	(v_framebyte).w,d0
000147A8 0200 0007                  		andi.b	#7,d0
000147AC 6600                       		bne.s	@nochg
000147AE 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000147B4                            
000147B4                            	@nochg:
000147B4 6100 B258                  		bsr.w	SpeedToPos
000147B8 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
000147BE 6600                       		bne.s	@isright	; if not, branch
000147C0 76F8                       		moveq	#-8,d3
000147C2 6100 0000                  		bsr.w	ObjHitWallLeft
000147C6 4A41                       		tst.w	d1
000147C8 6B00 B298                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000147CC 4E75                       		rts	
000147CE                            
000147CE                            	@isright:
000147CE 7608                       		moveq	#8,d3
000147D0 6100 0000                  		bsr.w	ObjHitWallRight
000147D4 4A41                       		tst.w	d1
000147D6 6B00 B28A                  		bmi.w	DeleteObject
000147DA 4E75                       		rts	
000147DA 4E75                       		rts	
000147DC                            Map_Gar:	include	"_maps\Gargoyle.asm"
000147DC                            ; ---------------------------------------------------------------------------
000147DC                            ; Sprite mappings - gargoyle head (LZ)
000147DC                            ; ---------------------------------------------------------------------------
000147DC                            Map_Gar_internal:
000147DC 0000                       		dc.w @head-Map_Gar_internal
000147DE 0000                       		dc.w @head-Map_Gar_internal
000147E0 0000                       		dc.w @fireball1-Map_Gar_internal
000147E2 0000                       		dc.w @fireball2-Map_Gar_internal
000147E4 03                         @head:		dc.b 3
000147E5 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000147EA F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000147EF 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000147F4 01                         @fireball1:	dc.b 1
000147F5 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000147FA 01                         @fireball2:	dc.b 1
000147FB FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00014800                            		even
00014800                            		even
00014800                            		include	"_incObj\63 LZ Conveyor.asm"
00014800                            ; ---------------------------------------------------------------------------
00014800                            ; Object 63 - platforms	on a conveyor belt (LZ)
00014800                            ; ---------------------------------------------------------------------------
00014800                            
00014800                            LabyrinthConvey:
00014800 7000                       		moveq	#0,d0
00014802 1028 0024                  		move.b	obRoutine(a0),d0
00014806 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
0001480A 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
0001482A                            
0001482A                            LCon_Display:
0001482A 6000 B1F6                  		bra.w	DisplaySprite
0001482E                            ; ===========================================================================
0001482E                            
0001482E                            loc_1236A:
0001482E 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
00014834 6600                       		bne.s	loc_12378
00014836 0C40 FF80                  		cmpi.w	#-$80,d0
0001483A 64EE                       		bcc.s	LCon_Display
0001483C                            
0001483C                            loc_12378:
0001483C 1028 002F                  		move.b	$2F(a0),d0
00014840 6A00 B220                  		bpl.w	DeleteObject
00014844 0240 007F                  		andi.w	#$7F,d0
00014848 45F8 F7C1                  		lea	(v_obj63).w,a2
0001484C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014852 6000 B20E                  		bra.w	DeleteObject
00014856                            ; ===========================================================================
00014856 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
00014858 0000                       		dc.w loc_124B2-LCon_Index
0001485A 0000                       		dc.w loc_124C2-LCon_Index
0001485C 0000                       		dc.w loc_124DE-LCon_Index
0001485E                            ; ===========================================================================
0001485E                            
0001485E                            LCon_Main:	; Routine 0
0001485E 1028 0028                  		move.b	obSubtype(a0),d0
00014862 6B00 0000                  		bmi.w	loc_12460
00014866 5428 0024                  		addq.b	#2,obRoutine(a0)
0001486A 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
00014872 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
00014878 0028 0004 0001             		ori.b	#4,obRender(a0)
0001487E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014884 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001488A 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
00014890 6600                       		bne.s	loc_123E2
00014892 5828 0024                  		addq.b	#4,obRoutine(a0)
00014896 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
0001489C 317C 0080 0018             		move.w	#$80,obPriority(a0)
000148A2 6000 0000                  		bra.w	loc_124DE
000148A6                            ; ===========================================================================
000148A6                            
000148A6                            loc_123E2:
000148A6 117C 0004 001A             		move.b	#4,obFrame(a0)
000148AC 7000                       		moveq	#0,d0
000148AE 1028 0028                  		move.b	obSubtype(a0),d0
000148B2 3200                       		move.w	d0,d1
000148B4 E648                       		lsr.w	#3,d0
000148B6 0240 001E                  		andi.w	#$1E,d0
000148BA 45FA 0000                  		lea	LCon_Data(pc),a2
000148BE D4F2 0000                  		adda.w	(a2,d0.w),a2
000148C2 315A 0038                  		move.w	(a2)+,$38(a0)
000148C6 315A 0030                  		move.w	(a2)+,$30(a0)
000148CA 214A 003C                  		move.l	a2,$3C(a0)
000148CE 0241 000F                  		andi.w	#$F,d1
000148D2 E549                       		lsl.w	#2,d1
000148D4 1141 0038                  		move.b	d1,$38(a0)
000148D8 117C 0004 003A             		move.b	#4,$3A(a0)
000148DE 4A38 F7C0                  		tst.b	(f_conveyrev).w
000148E2 6700                       		beq.s	loc_1244C
000148E4 117C 0001 003B             		move.b	#1,$3B(a0)
000148EA 4428 003A                  		neg.b	$3A(a0)
000148EE 7200                       		moveq	#0,d1
000148F0 1228 0038                  		move.b	$38(a0),d1
000148F4 D228 003A                  		add.b	$3A(a0),d1
000148F8 B228 0039                  		cmp.b	$39(a0),d1
000148FC 6500                       		bcs.s	loc_12448
000148FE 1001                       		move.b	d1,d0
00014900 7200                       		moveq	#0,d1
00014902 4A00                       		tst.b	d0
00014904 6A00                       		bpl.s	loc_12448
00014906 1228 0039                  		move.b	$39(a0),d1
0001490A 5901                       		subq.b	#4,d1
0001490C                            
0001490C                            loc_12448:
0001490C 1141 0038                  		move.b	d1,$38(a0)
00014910                            
00014910                            loc_1244C:
00014910 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00014916 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001491C 6100 0000                  		bsr.w	LCon_ChangeDir
00014920 6000 0000                  		bra.w	loc_124B2
00014924                            ; ===========================================================================
00014924                            
00014924                            loc_12460:
00014924 1140 002F                  		move.b	d0,$2F(a0)
00014928 0240 007F                  		andi.w	#$7F,d0
0001492C 45F8 F7C1                  		lea	(v_obj63).w,a2
00014930 08F2 0000 0000             		bset	#0,(a2,d0.w)
00014936 6600 B12A                  		bne.w	DeleteObject
0001493A D040                       		add.w	d0,d0
0001493C 0240 001E                  		andi.w	#$1E,d0
00014940 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
00014944 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001494A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001494E 321A                       		move.w	(a2)+,d1
00014950 2248                       		movea.l	a0,a1
00014952 6000                       		bra.s	LCon_MakePtfms
00014954                            ; ===========================================================================
00014954                            
00014954                            LCon_Loop:
00014954 6100 B558                  		bsr.w	FindFreeObj
00014958 6600                       		bne.s	loc_124AA
0001495A                            
0001495A                            LCon_MakePtfms:
0001495A 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
0001495E 335A 0008                  		move.w	(a2)+,obX(a1)
00014962 335A 000C                  		move.w	(a2)+,obY(a1)
00014966 301A                       		move.w	(a2)+,d0
00014968 1340 0028                  		move.b	d0,obSubtype(a1)
0001496C                            
0001496C                            loc_124AA:
0001496C 51C9 FFE6                  		dbf	d1,LCon_Loop
00014970                            
00014970 588F                       		addq.l	#4,sp
00014972 4E75                       		rts	
00014974                            ; ===========================================================================
00014974                            
00014974                            loc_124B2:	; Routine 2
00014974 7200                       		moveq	#0,d1
00014976 1228 0014                  		move.b	obActWid(a0),d1
0001497A 4EB9 0000 9132             		jsr	(PlatformObject).l
00014980 6000 0000                  		bra.w	sub_12502
00014984                            ; ===========================================================================
00014984                            
00014984                            loc_124C2:	; Routine 4
00014984 7200                       		moveq	#0,d1
00014986 1228 0014                  		move.b	obActWid(a0),d1
0001498A 4EB9 0000 92A6             		jsr	(ExitPlatform).l
00014990 3F28 0008                  		move.w	obX(a0),-(sp)
00014994 6100 0000                  		bsr.w	sub_12502
00014998 341F                       		move.w	(sp)+,d2
0001499A 4EF9 0000 9810             		jmp	(MvSonicOnPtfm2).l
000149A0                            ; ===========================================================================
000149A0                            
000149A0                            loc_124DE:	; Routine 6
000149A0 3038 FE04                  		move.w	(v_framecount).w,d0
000149A4 0240 0003                  		andi.w	#3,d0
000149A8 6600                       		bne.s	loc_124FC
000149AA 7201                       		moveq	#1,d1
000149AC 4A38 F7C0                  		tst.b	(f_conveyrev).w
000149B0 6700                       		beq.s	loc_124F2
000149B2 4401                       		neg.b	d1
000149B4                            
000149B4                            loc_124F2:
000149B4 D328 001A                  		add.b	d1,obFrame(a0)
000149B8 0228 0003 001A             		andi.b	#3,obFrame(a0)
000149BE                            
000149BE                            loc_124FC:
000149BE 588F                       		addq.l	#4,sp
000149C0 6000 CFEA                  		bra.w	RememberState
000149C4                            
000149C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149C4                            
000149C4                            
000149C4                            sub_12502:
000149C4 4A38 F7EE                  		tst.b	(f_switch+$E).w
000149C8 6700                       		beq.s	loc_12520
000149CA 4A28 003B                  		tst.b	$3B(a0)
000149CE 6600                       		bne.s	loc_12520
000149D0 117C 0001 003B             		move.b	#1,$3B(a0)
000149D6 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
000149DC 4428 003A                  		neg.b	$3A(a0)
000149E0 6000                       		bra.s	loc_12534
000149E2                            ; ===========================================================================
000149E2                            
000149E2                            loc_12520:
000149E2 3028 0008                  		move.w	obX(a0),d0
000149E6 B068 0034                  		cmp.w	$34(a0),d0
000149EA 6600                       		bne.s	loc_1256A
000149EC 3028 000C                  		move.w	obY(a0),d0
000149F0 B068 0036                  		cmp.w	$36(a0),d0
000149F4 6600                       		bne.s	loc_1256A
000149F6                            
000149F6                            loc_12534:
000149F6 7200                       		moveq	#0,d1
000149F8 1228 0038                  		move.b	$38(a0),d1
000149FC D228 003A                  		add.b	$3A(a0),d1
00014A00 B228 0039                  		cmp.b	$39(a0),d1
00014A04 6500                       		bcs.s	loc_12552
00014A06 1001                       		move.b	d1,d0
00014A08 7200                       		moveq	#0,d1
00014A0A 4A00                       		tst.b	d0
00014A0C 6A00                       		bpl.s	loc_12552
00014A0E 1228 0039                  		move.b	$39(a0),d1
00014A12 5901                       		subq.b	#4,d1
00014A14                            
00014A14                            loc_12552:
00014A14 1141 0038                  		move.b	d1,$38(a0)
00014A18 2268 003C                  		movea.l	$3C(a0),a1
00014A1C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014A22 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00014A28 6100 0000                  		bsr.w	LCon_ChangeDir
00014A2C                            
00014A2C                            loc_1256A:
00014A2C 6100 AFE0                  		bsr.w	SpeedToPos
00014A30 4E75                       		rts	
00014A32                            ; End of function sub_12502
00014A32                            
00014A32                            
00014A32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A32                            
00014A32                            
00014A32                            LCon_ChangeDir:
00014A32 7000                       		moveq	#0,d0
00014A34 343C FF00                  		move.w	#-$100,d2
00014A38 3028 0008                  		move.w	obX(a0),d0
00014A3C 9068 0034                  		sub.w	$34(a0),d0
00014A40 6400                       		bcc.s	loc_12584
00014A42 4440                       		neg.w	d0
00014A44 4442                       		neg.w	d2
00014A46                            
00014A46                            loc_12584:
00014A46 7200                       		moveq	#0,d1
00014A48 363C FF00                  		move.w	#-$100,d3
00014A4C 3228 000C                  		move.w	obY(a0),d1
00014A50 9268 0036                  		sub.w	$36(a0),d1
00014A54 6400                       		bcc.s	loc_12598
00014A56 4441                       		neg.w	d1
00014A58 4443                       		neg.w	d3
00014A5A                            
00014A5A                            loc_12598:
00014A5A B240                       		cmp.w	d0,d1
00014A5C 6500                       		bcs.s	loc_125C2
00014A5E 3028 0008                  		move.w	obX(a0),d0
00014A62 9068 0034                  		sub.w	$34(a0),d0
00014A66 6700                       		beq.s	loc_125AE
00014A68 48C0                       		ext.l	d0
00014A6A E180                       		asl.l	#8,d0
00014A6C 81C1                       		divs.w	d1,d0
00014A6E 4440                       		neg.w	d0
00014A70                            
00014A70                            loc_125AE:
00014A70 3140 0010                  		move.w	d0,obVelX(a0)
00014A74 3143 0012                  		move.w	d3,obVelY(a0)
00014A78 4840                       		swap	d0
00014A7A 3140 000A                  		move.w	d0,obX+2(a0)
00014A7E 4268 000E                  		clr.w	obY+2(a0)
00014A82 4E75                       		rts	
00014A84                            ; ===========================================================================
00014A84                            
00014A84                            loc_125C2:
00014A84 3228 000C                  		move.w	obY(a0),d1
00014A88 9268 0036                  		sub.w	$36(a0),d1
00014A8C 6700                       		beq.s	loc_125D4
00014A8E 48C1                       		ext.l	d1
00014A90 E181                       		asl.l	#8,d1
00014A92 83C0                       		divs.w	d0,d1
00014A94 4441                       		neg.w	d1
00014A96                            
00014A96                            loc_125D4:
00014A96 3141 0012                  		move.w	d1,obVelY(a0)
00014A9A 3142 0010                  		move.w	d2,obVelX(a0)
00014A9E 4841                       		swap	d1
00014AA0 3141 000E                  		move.w	d1,obY+2(a0)
00014AA4 4268 000A                  		clr.w	obX+2(a0)
00014AA8 4E75                       		rts	
00014AAA                            ; End of function LCon_ChangeDir
00014AAA                            
00014AAA                            ; ===========================================================================
00014AAA 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
00014AAC 0000                       		dc.w word_12610-LCon_Data
00014AAE 0000                       		dc.w word_12628-LCon_Data
00014AB0 0000                       		dc.w word_1263C-LCon_Data
00014AB2 0000                       		dc.w word_12650-LCon_Data
00014AB4 0000                       		dc.w word_12668-LCon_Data
00014AB6 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00014AC6 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014AD2 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014AE2 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014AEA 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014AFE 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014B12 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014B2A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014B2A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014B3E                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014B3E                            ; ---------------------------------------------------------------------------
00014B3E                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014B3E                            ; ---------------------------------------------------------------------------
00014B3E                            Map_LConv_internal:
00014B3E 0000                       		dc.w @wheel1-Map_LConv_internal
00014B40 0000                       		dc.w @wheel2-Map_LConv_internal
00014B42 0000                       		dc.w @wheel3-Map_LConv_internal
00014B44 0000                       		dc.w @wheel4-Map_LConv_internal
00014B46 0000                       		dc.w @platform-Map_LConv_internal
00014B48 01                         @wheel1:	dc.b 1
00014B49 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014B4E 01                         @wheel2:	dc.b 1
00014B4F F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014B54 01                         @wheel3:	dc.b 1
00014B55 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014B5A 01                         @wheel4:	dc.b 1
00014B5B F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014B60 01                         @platform:	dc.b 1
00014B61 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014B66                            		even
00014B66                            		even
00014B66                            		include	"_incObj\64 Bubbles.asm"
00014B66                            ; ---------------------------------------------------------------------------
00014B66                            ; Object 64 - bubbles (LZ)
00014B66                            ; ---------------------------------------------------------------------------
00014B66                            
00014B66                            Bubble:
00014B66 7000                       		moveq	#0,d0
00014B68 1028 0024                  		move.b	obRoutine(a0),d0
00014B6C 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014B70 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014B74                            ; ===========================================================================
00014B74 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014B76 0000                       		dc.w Bub_Animate-Bub_Index
00014B78 0000                       		dc.w Bub_ChkWater-Bub_Index
00014B7A 0000                       		dc.w Bub_Display-Bub_Index
00014B7C 0000                       		dc.w Bub_Delete-Bub_Index
00014B7E 0000                       		dc.w Bub_BblMaker-Bub_Index
00014B80                            
00014B80 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014B80 =00000030                  bub_origX:	equ $30		; original x-axis position
00014B80 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014B80 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014B80                            ; ===========================================================================
00014B80                            
00014B80                            Bub_Main:	; Routine 0
00014B80 5428 0024                  		addq.b	#2,obRoutine(a0)
00014B84 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014B8C 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014B92 117C 0084 0001             		move.b	#$84,obRender(a0)
00014B98 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014B9E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014BA4 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014BA8 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014BAA                            
00014BAA 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014BAE 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014BB2 1140 0032                  		move.b	d0,bub_time(a0)
00014BB6 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014BBA 117C 0006 001C             		move.b	#6,obAnim(a0)
00014BC0 6000 0000                  		bra.w	Bub_BblMaker
00014BC4                            ; ===========================================================================
00014BC4                            
00014BC4                            @bubble:
00014BC4 1140 001C                  		move.b	d0,obAnim(a0)
00014BC8 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014BCE 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014BD4 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00014BDA 1140 0026                  		move.b	d0,obAngle(a0)
00014BDE                            
00014BDE                            Bub_Animate:	; Routine 2
00014BDE 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014BE4 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
00014BEA 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014BF0 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014BF2                            
00014BF2 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014BF8                            
00014BF8                            Bub_ChkWater:	; Routine 4
00014BF8 3038 F646                  		move.w	(v_waterpos1).w,d0
00014BFC B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014C00 6500                       		bcs.s	@wobble		; if yes, branch
00014C02                            
00014C02                            @burst:
00014C02 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014C08 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014C0C 6000 0000                  		bra.w	Bub_Display
00014C10                            ; ===========================================================================
00014C10                            
00014C10                            @wobble:
00014C10 1028 0026                  		move.b	obAngle(a0),d0
00014C14 5228 0026                  		addq.b	#1,obAngle(a0)
00014C18 0240 007F                  		andi.w	#$7F,d0
00014C1C 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014C22 1031 0000                  		move.b	(a1,d0.w),d0
00014C26 4880                       		ext.w	d0
00014C28 D068 0030                  		add.w	bub_origX(a0),d0
00014C2C 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014C30 4A28 002E                  		tst.b	bub_inhalable(a0)
00014C34 6700                       		beq.s	@display
00014C36 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014C3A 6700                       		beq.s	@display	; if not, branch
00014C3C                            
00014C3C 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014C4A 43F8 D000                  		lea	(v_player).w,a1
00014C4E 4269 0010                  		clr.w	obVelX(a1)
00014C52 4269 0012                  		clr.w	obVelY(a1)
00014C56 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014C5A 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014C60 337C 0023 003E             		move.w	#$23,$3E(a1)
00014C66 137C 0000 003C             		move.b	#0,$3C(a1)
00014C6C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014C72 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014C78 0829 0002 0022             		btst	#2,obStatus(a1)
00014C7E 6700 FF82                  		beq.w	@burst
00014C82 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014C88 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014C8E 137C 0009 0017             		move.b	#9,obWidth(a1)
00014C94 5B69 000C                  		subq.w	#5,obY(a1)
00014C98 6000 FF68                  		bra.w	@burst
00014C9C                            ; ===========================================================================
00014C9C                            
00014C9C                            @display:
00014C9C 6100 AD70                  		bsr.w	SpeedToPos
00014CA0 4A28 0001                  		tst.b	obRender(a0)
00014CA4 6A00                       		bpl.s	@delete
00014CA6 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00014CAC                            
00014CAC                            	@delete:
00014CAC 4EF9 0000 FA62             		jmp	(DeleteObject).l
00014CB2                            ; ===========================================================================
00014CB2                            
00014CB2                            Bub_Display:	; Routine 6
00014CB2 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014CB8 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
00014CBE 4A28 0001                  		tst.b	obRender(a0)
00014CC2 6A00                       		bpl.s	@delete
00014CC4 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00014CCA                            
00014CCA                            	@delete:
00014CCA 4EF9 0000 FA62             		jmp	(DeleteObject).l
00014CD0                            ; ===========================================================================
00014CD0                            
00014CD0                            Bub_Delete:	; Routine 8
00014CD0 6000 AD90                  		bra.w	DeleteObject
00014CD4                            ; ===========================================================================
00014CD4                            
00014CD4                            Bub_BblMaker:	; Routine $A
00014CD4 4A68 0036                  		tst.w	$36(a0)
00014CD8 6600                       		bne.s	@loc_12874
00014CDA 3038 F646                  		move.w	(v_waterpos1).w,d0
00014CDE B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014CE2 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014CE6 4A28 0001                  		tst.b	obRender(a0)
00014CEA 6A00 0000                  		bpl.w	@chkdel
00014CEE 5368 0038                  		subq.w	#1,$38(a0)
00014CF2 6A00 0000                  		bpl.w	@loc_12914
00014CF6 317C 0001 0036             		move.w	#1,$36(a0)
00014CFC                            
00014CFC                            	@tryagain:
00014CFC 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00014D02 3200                       		move.w	d0,d1
00014D04 0240 0007                  		andi.w	#7,d0
00014D08 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014D0C 64EE                       		bcc.s	@tryagain	; if yes, branch
00014D0E                            
00014D0E 1140 0034                  		move.b	d0,$34(a0)
00014D12 0241 000C                  		andi.w	#$C,d1
00014D16 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014D1C D2C1                       		adda.w	d1,a1
00014D1E 2149 003C                  		move.l	a1,$3C(a0)
00014D22 5328 0032                  		subq.b	#1,bub_time(a0)
00014D26 6A00                       		bpl.s	@loc_12872
00014D28 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014D2E 08E8 0007 0036             		bset	#7,$36(a0)
00014D34                            
00014D34                            @loc_12872:
00014D34 6000                       		bra.s	@loc_1287C
00014D36                            ; ===========================================================================
00014D36                            
00014D36                            @loc_12874:
00014D36 5368 0038                  		subq.w	#1,$38(a0)
00014D3A 6A00 0000                  		bpl.w	@loc_12914
00014D3E                            
00014D3E                            @loc_1287C:
00014D3E 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00014D44 0240 001F                  		andi.w	#$1F,d0
00014D48 3140 0038                  		move.w	d0,$38(a0)
00014D4C 6100 B160                  		bsr.w	FindFreeObj
00014D50 6600                       		bne.s	@fail
00014D52 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014D56 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014D5C 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00014D62 0240 000F                  		andi.w	#$F,d0
00014D66 5140                       		subq.w	#8,d0
00014D68 D169 0008                  		add.w	d0,obX(a1)
00014D6C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014D72 7000                       		moveq	#0,d0
00014D74 1028 0034                  		move.b	$34(a0),d0
00014D78 2468 003C                  		movea.l	$3C(a0),a2
00014D7C 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014D82 0828 0007 0036             		btst	#7,$36(a0)
00014D88 6700                       		beq.s	@fail
00014D8A 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00014D90 0240 0003                  		andi.w	#3,d0
00014D94 6600                       		bne.s	@loc_buh
00014D96 08E8 0006 0036             		bset	#6,$36(a0)
00014D9C 6600                       		bne.s	@fail
00014D9E 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014DA4                            
00014DA4                            @loc_buh:
00014DA4 4A28 0034                  		tst.b	$34(a0)
00014DA8 6600                       		bne.s	@fail
00014DAA 08E8 0006 0036             		bset	#6,$36(a0)
00014DB0 6600                       		bne.s	@fail
00014DB2 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014DB8                            
00014DB8                            	@fail:
00014DB8 5328 0034                  		subq.b	#1,$34(a0)
00014DBC 6A00                       		bpl.s	@loc_12914
00014DBE 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00014DC4 0240 007F                  		andi.w	#$7F,d0
00014DC8 0640 0080                  		addi.w	#$80,d0
00014DCC D168 0038                  		add.w	d0,$38(a0)
00014DD0 4268 0036                  		clr.w	$36(a0)
00014DD4                            
00014DD4                            @loc_12914:
00014DD4 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014DDA 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
00014DE0                            
00014DE0                            @chkdel:
00014DFE 3038 F646                  		move.w	(v_waterpos1).w,d0
00014E02 B068 000C                  		cmp.w	obY(a0),d0
00014E06 6500 AC1A                  		bcs.w	DisplaySprite
00014E0A 4E75                       		rts	
00014E0C                            ; ===========================================================================
00014E0C                            ; bubble production sequence
00014E0C                            
00014E0C                            ; 0 = small bubble, 1 =	large bubble
00014E0C                            
00014E0C 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014E1E                            
00014E1E                            ; ===========================================================================
00014E1E                            
00014E1E                            Bub_ChkSonic:
00014E1E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014E22 6B00                       		bmi.s	@loc_12998
00014E24 43F8 D000                  		lea	(v_player).w,a1
00014E28 3029 0008                  		move.w	obX(a1),d0
00014E2C 3228 0008                  		move.w	obX(a0),d1
00014E30 0441 0010                  		subi.w	#$10,d1
00014E34 B240                       		cmp.w	d0,d1
00014E36 6400                       		bcc.s	@loc_12998
00014E38 0641 0020                  		addi.w	#$20,d1
00014E3C B240                       		cmp.w	d0,d1
00014E3E 6500                       		bcs.s	@loc_12998
00014E40 3029 000C                  		move.w	obY(a1),d0
00014E44 3228 000C                  		move.w	obY(a0),d1
00014E48 B240                       		cmp.w	d0,d1
00014E4A 6400                       		bcc.s	@loc_12998
00014E4C 0641 0010                  		addi.w	#$10,d1
00014E50 B240                       		cmp.w	d0,d1
00014E52 6500                       		bcs.s	@loc_12998
00014E54 7001                       		moveq	#1,d0
00014E56 4E75                       		rts	
00014E58                            ; ===========================================================================
00014E58                            
00014E58                            @loc_12998:
00014E58 7000                       		moveq	#0,d0
00014E5A 4E75                       		rts	
00014E5A 4E75                       		rts	
00014E5C                            		include	"_anim\Bubbles.asm"
00014E5C                            ; ---------------------------------------------------------------------------
00014E5C                            ; Animation script - bubbles (LZ)
00014E5C                            ; ---------------------------------------------------------------------------
00014E5C 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014E5E 0000                       		dc.w @medium-Ani_Bub
00014E60 0000                       		dc.w @large-Ani_Bub
00014E62 0000                       		dc.w @incroutine-Ani_Bub
00014E64 0000                       		dc.w @incroutine-Ani_Bub
00014E66 0000                       		dc.w @burst-Ani_Bub
00014E68 0000                       		dc.w @bubmaker-Ani_Bub
00014E6A 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014E70 00                         		even
00014E70 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014E76 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014E7E 00                         		even
00014E7E 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014E80 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014E86 00                         		even
00014E86 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014E8C 00                         		even
00014E8C 00                         		even
00014E8C                            Map_Bub:	include	"_maps\Bubbles.asm"
00014E8C                            ; ---------------------------------------------------------------------------
00014E8C                            ; Sprite mappings - bubbles (LZ)
00014E8C                            ; ---------------------------------------------------------------------------
00014E8C                            Map_Bub_internal:
00014E8C 0000                       		dc.w @bubble1-Map_Bub_internal
00014E8E 0000                       		dc.w @bubble2-Map_Bub_internal
00014E90 0000                       		dc.w @bubble3-Map_Bub_internal
00014E92 0000                       		dc.w @bubble4-Map_Bub_internal
00014E94 0000                       		dc.w @bubble5-Map_Bub_internal
00014E96 0000                       		dc.w @bubble6-Map_Bub_internal
00014E98 0000                       		dc.w @bubblefull-Map_Bub_internal
00014E9A 0000                       		dc.w @burst1-Map_Bub_internal
00014E9C 0000                       		dc.w @burst2-Map_Bub_internal
00014E9E 0000                       		dc.w @zero_sm-Map_Bub_internal
00014EA0 0000                       		dc.w @five_sm-Map_Bub_internal
00014EA2 0000                       		dc.w @three_sm-Map_Bub_internal
00014EA4 0000                       		dc.w @one_sm-Map_Bub_internal
00014EA6 0000                       		dc.w @zero-Map_Bub_internal
00014EA8 0000                       		dc.w @five-Map_Bub_internal
00014EAA 0000                       		dc.w @four-Map_Bub_internal
00014EAC 0000                       		dc.w @three-Map_Bub_internal
00014EAE 0000                       		dc.w @two-Map_Bub_internal
00014EB0 0000                       		dc.w @one-Map_Bub_internal
00014EB2 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014EB4 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014EB6 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014EB8 0000                       		dc.w @blank-Map_Bub_internal
00014EBA 01                         @bubble1:	dc.b 1
00014EBB FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014EC0 01                         @bubble2:	dc.b 1
00014EC1 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014EC6 01                         @bubble3:	dc.b 1
00014EC7 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014ECC 01                         @bubble4:	dc.b 1
00014ECD F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014ED2 01                         @bubble5:	dc.b 1
00014ED3 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014ED8 01                         @bubble6:	dc.b 1
00014ED9 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014EDE 01                         @bubblefull:	dc.b 1
00014EDF F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014EE4 04                         @burst1:	dc.b 4
00014EE5 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014EEA F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014EEF 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014EF4 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014EF9 04                         @burst2:	dc.b 4
00014EFA F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014EFF F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014F04 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014F09 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014F0E 01                         @zero_sm:	dc.b 1
00014F0F F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014F14 01                         @five_sm:	dc.b 1
00014F15 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014F1A 01                         @three_sm:	dc.b 1
00014F1B F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014F20 01                         @one_sm:	dc.b 1
00014F21 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014F26 01                         @zero:		dc.b 1
00014F27 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014F2C 01                         @five:		dc.b 1
00014F2D F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014F32 01                         @four:		dc.b 1
00014F33 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014F38 01                         @three:		dc.b 1
00014F39 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014F3E 01                         @two:		dc.b 1
00014F3F F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014F44 01                         @one:		dc.b 1
00014F45 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014F4A 01                         @bubmaker1:	dc.b 1
00014F4B F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014F50 01                         @bubmaker2:	dc.b 1
00014F51 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014F56 01                         @bubmaker3:	dc.b 1
00014F57 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014F5C 00                         @blank:		dc.b 0
00014F5E 00                         		even
00014F5E 00                         		even
00014F5E                            		include	"_incObj\65 Waterfalls.asm"
00014F5E                            ; ---------------------------------------------------------------------------
00014F5E                            ; Object 65 - waterfalls (LZ)
00014F5E                            ; ---------------------------------------------------------------------------
00014F5E                            
00014F5E                            Waterfall:
00014F5E 7000                       		moveq	#0,d0
00014F60 1028 0024                  		move.b	obRoutine(a0),d0
00014F64 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014F68 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014F6C                            ; ===========================================================================
00014F6C 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014F6E 0000                       		dc.w WFall_Animate-WFall_Index
00014F70 0000                       		dc.w WFall_ChkDel-WFall_Index
00014F72 0000                       		dc.w WFall_OnWater-WFall_Index
00014F74 0000                       		dc.w loc_12B36-WFall_Index
00014F76                            ; ===========================================================================
00014F76                            
00014F76                            WFall_Main:	; Routine 0
00014F76 5828 0024                  		addq.b	#4,obRoutine(a0)
00014F7A 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014F82 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014F88 0028 0004 0001             		ori.b	#4,obRender(a0)
00014F8E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014F94 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014F9A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014F9E 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014FA0 08E8 0007 0002             		bset	#7,obGfx(a0)
00014FA6                            
00014FA6                            	@under80:
00014FA6 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014FAA 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014FAE 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014FB2 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014FB4                            
00014FB4 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014FB8 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014FBC 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014FC2 6700                       		beq.s	@not49		; if not, branch
00014FC4                            
00014FC4 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014FCA                            
00014FCA                            	@not49:
00014FCA 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014FD0 6700                       		beq.s	WFall_Animate	; if not, branch
00014FD2 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014FD8                            
00014FD8                            WFall_Animate:	; Routine 2
00014FD8 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014FDE 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
00014FE4                            
00014FE4                            WFall_ChkDel:	; Routine 4
00014FE4 6000 C9C6                  		bra.w	RememberState
00014FE8                            ; ===========================================================================
00014FE8                            
00014FE8                            WFall_OnWater:	; Routine 6
00014FE8 3038 F646                  		move.w	(v_waterpos1).w,d0
00014FEC 0440 0010                  		subi.w	#$10,d0
00014FF0 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014FF4 60E2                       		bra.s	WFall_Animate
00014FF6                            ; ===========================================================================
00014FF6                            
00014FF6                            loc_12B36:	; Routine 8
00014FF6 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014FFC 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00015002 6600                       		bne.s	@animate
00015004 08E8 0007 0002             		bset	#7,obGfx(a0)
0001500A                            
0001500A                            	@animate:
0001500A 60CC                       		bra.s	WFall_Animate
0001500A 60CC                       		bra.s	WFall_Animate
0001500C                            		include	"_anim\Waterfalls.asm"
0001500C                            ; ---------------------------------------------------------------------------
0001500C                            ; Animation script - waterfall (LZ)
0001500C                            ; ---------------------------------------------------------------------------
0001500C 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
0001500E 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00015014 00                         		even
00015014 00                         		even
00015014                            Map_WFall	include	"_maps\Waterfalls.asm"
00015014                            ; ---------------------------------------------------------------------------
00015014                            ; Sprite mappings - waterfalls (LZ)
00015014                            ; ---------------------------------------------------------------------------
00015014                            Map_WFall_internal:
00015014 0000                       		dc.w @vertnarrow-Map_WFall_internal
00015016 0000                       		dc.w @cornerwide-Map_WFall_internal
00015018 0000                       		dc.w @cornermedium-Map_WFall_internal
0001501A 0000                       		dc.w @cornernarrow-Map_WFall_internal
0001501C 0000                       		dc.w @cornermedium2-Map_WFall_internal
0001501E 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00015020 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00015022 0000                       		dc.w @vertwide-Map_WFall_internal
00015024 0000                       		dc.w @diagonal-Map_WFall_internal
00015026 0000                       		dc.w @splash1-Map_WFall_internal
00015028 0000                       		dc.w @splash2-Map_WFall_internal
0001502A 0000                       		dc.w @splash3-Map_WFall_internal
0001502C 01                         @vertnarrow:	dc.b 1
0001502D F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00015032 02                         @cornerwide:	dc.b 2
00015033 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00015038 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001503D 02                         @cornermedium:	dc.b 2
0001503E F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00015043 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00015048 01                         @cornernarrow:	dc.b 1
00015049 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001504E 02                         @cornermedium2:	dc.b 2
0001504F F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00015054 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00015059 01                         @cornernarrow2:	dc.b 1
0001505A F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001505F 01                         @cornernarrow3:	dc.b 1
00015060 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00015065 01                         @vertwide:	dc.b 1
00015066 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001506B 02                         @diagonal:	dc.b 2
0001506C F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00015071 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00015076 02                         @splash1:	dc.b 2
00015077 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001507C F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00015081 02                         @splash2:	dc.b 2
00015082 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00015087 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001508C 02                         @splash3:	dc.b 2
0001508D F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00015092 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00015098 00                         		even
00015098 00                         		even
00015098                            
00015098                            
00015098                            SpinDash_dust:
00015098                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00015098 7000                       		moveq	#0,d0
0001509A 1028 0024                  		move.b	$24(a0),d0
0001509E 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
000150A2 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
000150A6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150A6 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
000150A8 0000                       		dc loc_1DD90-off_1DD2E; 1
000150AA 0000                       		dc loc_1DE46-off_1DD2E; 2
000150AC 0000                       		dc loc_1DE4A-off_1DD2E; 3
000150AE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150AE                            
000150AE                            loc_1DD36:				; DATA XREF: h+6DBA?o
000150AE 5428 0024                  		addq.b	#2,$24(a0)
000150B2 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
000150BA 0028 0004 0001             		or.b	#4,1(a0)
000150C0 317C 0080 0018             		move.w	#$80,obPriority(a0)
000150C6 117C 0010 0014             		move.b	#$10,obActWid(a0)
000150CC 317C 07AC 0002             		move	#$7AC,2(a0)
000150D2 317C D000 003E             		move	#-$3000,$3E(a0)
000150D8 317C F580 003C             		move	#$F580,$3C(a0)
000150DE B0FC D1C0                  		cmp	#-$2E40,a0
000150E2 6700                       		beq.s	loc_1DD8C
000150E4 117C 0001 0034             		move.b	#1,$34(a0)
000150EA                            ;		cmp	#2,($FFFFFF70).w
000150EA                            ;		beq.s	loc_1DD8C
000150EA                            ;		move	#$48C,2(a0)
000150EA                            ;		move	#-$4FC0,$3E(a0)
000150EA                            ;		move	#-$6E80,$3C(a0)
000150EA                            
000150EA                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
000150EA                            ;		bsr.w	sub_16D6E
000150EA                            
000150EA                            loc_1DD90:				; DATA XREF: h+6DBA?o
000150EA 3468 003E                  		movea.w	$3E(a0),a2
000150EE 7000                       		moveq	#0,d0
000150F0 1028 001C                  		move.b	$1C(a0),d0
000150F4 D040                       		add	d0,d0
000150F6 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
000150FA 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
000150FE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150FE 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00015100 0000                       		dc loc_1DDAC-off_1DDA4; 1
00015102 0000                       		dc loc_1DDCC-off_1DDA4; 2
00015104 0000                       		dc loc_1DE20-off_1DDA4; 3
00015106                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015106                            
00015106                            loc_1DDAC:				; DATA XREF: h+6E30?o
00015106 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
0001510C 4A28 001D                  		tst.b	$1D(a0)
00015110 6600                       		bne.s	loc_1DE28
00015112 316A 0008 0008             		move	8(a2),8(a0)
00015118 117C 0000 0022             		move.b	#0,$22(a0)
0001511E 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015124 6000                       		bra.s	loc_1DE28
00015126                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015126                            
00015126                            loc_1DDCC:				; DATA XREF: h+6E30?o
00015126                            ;		cmp.b	#$C,$28(a2)
00015126                            ;		bcs.s	loc_1DE3E
00015126 0C2A 0004 0024             		cmp.b	#4,$24(a2)
0001512C 6400                       		bcc.s	loc_1DE3E
0001512E 4A2A 0039                  		tst.b	$39(a2)
00015132 6700                       		beq.s	loc_1DE3E
00015134 316A 0008 0008             		move	8(a2),8(a0)
0001513A 316A 000C 000C             		move	$C(a2),$C(a0)
00015140 116A 0022 0022             		move.b	$22(a2),$22(a0)
00015146 0228 0001 0022             		and.b	#1,$22(a0)
0001514C 4A28 0034                  		tst.b	$34(a0)
00015150 6700                       		beq.s	loc_1DE06
00015152 5968 000C                  		sub	#4,$C(a0)
00015156                            
00015156                            loc_1DE06:				; CODE XREF: h+6E8A?j
00015156 4A28 001D                  		tst.b	$1D(a0)
0001515A 6600                       		bne.s	loc_1DE28
0001515C 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015162 4A6A 0002                  		tst	2(a2)
00015166 6A00                       		bpl.s	loc_1DE28
00015168 0068 8000 0002             		or	#-$8000,2(a0)
0001516E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001516E                            
0001516E                            loc_1DE20:				; DATA XREF: h+6E30?o
0001516E                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
0001516E 43F9 0000 0000             		lea	(off_1DF38).l,a1
00015174 4EB9 0000 CAE4             		jsr	AnimateSprite
0001517A 6100 0000                  		bsr.w	loc_1DEE4
0001517E 4EFA A8A2                  		jmp	DisplaySprite
00015182                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015182                            
00015182                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00015182 117C 0000 001C             		move.b	#0,$1C(a0)
00015188 4E75                       		rts	
0001518A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001518A                            
0001518A                            loc_1DE46:				; DATA XREF: h+6DBA?o
0001518A 6000 A8D6                  		bra.w	DeleteObject
0001518E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001518E                            
0001518E                            
0001518E                            
0001518E                            loc_1DE4A:
0001518E 3468 003E                  	movea.w	$3E(a0),a2
00015192 7210                       	moveq	#$10,d1
00015194 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
0001519A 6700                       	beq.s	loc_1DE64
0001519C 7206                       	moveq	#$6,d1
0001519E 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
000151A4 6700                       	beq.s	loc_1DE64
000151A6 117C 0002 0024             	move.b	#2,$24(a0)
000151AC 117C 0000 0032             	move.b	#0,$32(a0)
000151B2 4E75                       	rts
000151B4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000151B4                            
000151B4                            loc_1DE64:				; CODE XREF: h+6EE0?j
000151B4 5328 0032                  		subq.b	#1,$32(a0)
000151B8 6A00                       		bpl.s	loc_1DEE0
000151BA 117C 0003 0032             		move.b	#3,$32(a0)
000151C0 4EBA ACEC                  		jsr	FindFreeObj
000151C4 6600                       		bne.s	loc_1DEE0
000151C6 1290                       		move.b	0(a0),0(a1)
000151C8 336A 0008 0008             		move	8(a2),8(a1)
000151CE 336A 000C 000C             		move	$C(a2),$C(a1)
000151D4 4A28 0034                  		tst.b	$34(a0)
000151D8 6700                       		beq.s	loc_1DE9A
000151DA 5941                       		sub	#4,d1
000151DC                            
000151DC                            loc_1DE9A:				; CODE XREF: h+6F1E?j
000151DC D369 000C                  		add	d1,$C(a1)
000151E0 137C 0000 0022             		move.b	#0,$22(a1)
000151E6 137C 0003 001C             		move.b	#3,$1C(a1)
000151EC 5429 0024                  		addq.b	#2,$24(a1)
000151F0 2368 0004 0004             		move.l	4(a0),4(a1)
000151F6 1368 0001 0001             		move.b	1(a0),1(a1)
000151FC 337C 0080 0018             		move.w	#$80,obPriority(a1)
00015202 137C 0004 0014             		move.b	#4,obActWid(a1)
00015208 3368 0002 0002             		move	2(a0),2(a1)
0001520E 3368 003E 003E             		move	$3E(a0),$3E(a1)
00015214 0269 7FFF 0002             		and	#$7FFF,2(a1)
0001521A 4A6A 0002                  		tst	2(a2)
0001521E 6A00                       		bpl.s	loc_1DEE0
00015220 0069 8000 0002             		or	#-$8000,2(a1)
00015226                            
00015226                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00015226 6100                       		bsr.s	loc_1DEE4
00015228 4E75                       		rts	
0001522A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001522A                            
0001522A                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
0001522A 7000                       		moveq	#0,d0
0001522C 1028 001A                  		move.b	$1A(a0),d0
00015230 B028 0030                  		cmp.b	$30(a0),d0
00015234 6700 0000                  		beq.w	locret_1DF36
00015238 1140 0030                  		move.b	d0,$30(a0)
0001523C 45F9 0000 0000             		lea	(off_1E074).l,a2
00015242 D040                       		add	d0,d0
00015244 D4F2 0000                  		add	(a2,d0.w),a2
00015248 3A1A                       		move	(a2)+,d5
0001524A 5345                       		subq	#1,d5
0001524C 6B00 0000                  		bmi.w	locret_1DF36
00015250 3828 003C                  		move $3C(a0),d4
00015254                            
00015254                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00015254 7200                       		moveq	#0,d1
00015256 321A                       		move	(a2)+,d1
00015258 3601                       		move	d1,d3
0001525A E04B                       		lsr.w	#8,d3
0001525C 0243 00F0                  		and	#$F0,d3	; 'ð'
00015260 0643 0010                  		add	#$10,d3
00015264 0241 0FFF                  		and	#$FFF,d1
00015268 EB89                       		lsl.l	#5,d1
0001526A 0681 0000 0000             		add.l	#Art_Dust,d1
00015270 3404                       		move	d4,d2
00015272 D843                       		add	d3,d4
00015274 D843                       		add	d3,d4
00015276 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
0001527C 51CD FFD6                  		dbf	d5,loc_1DF0A
00015280 4E75                           rts
00015282                            
00015282                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00015282 4E75                       		rts	
00015284                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015284 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00015286 0000                       		dc byte_1DF43-off_1DF38; 1
00015288 0000                       		dc byte_1DF4F-off_1DF38; 2
0001528A 0000                       		dc byte_1DF58-off_1DF38; 3
0001528C 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
0001528F 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
0001529B 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
000152A4 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
000152AA                            ; -------------------------------------------------------------------------------
000152AA                            ; Unknown Sprite Mappings
000152AA                            ; -------------------------------------------------------------------------------
000152AA                            MapUnc_1DF5E:
000152AA 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
000152AC 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
000152AE 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
000152B0 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
000152B2 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
000152B4 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
000152B6 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
000152B8 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
000152BA 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
000152BC 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
000152BE 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
000152C0 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
000152C2 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
000152C4 0000                       	dc word_1E004-MapUnc_1DF5E; 13
000152C6 0000                       	dc word_1E016-MapUnc_1DF5E; 14
000152C8 0000                       	dc word_1E028-MapUnc_1DF5E; 15
000152CA 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
000152CC 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
000152CE 0000                       	dc word_1E056-MapUnc_1DF5E; 18
000152D0 0000                       	dc word_1E060-MapUnc_1DF5E; 19
000152D2 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
000152D4 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
000152D6 00                         word_1DF8A:	dc.b 0
000152D7 01                         word_1DF8C:	dc.b 1
000152D8 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000152DD 01                         word_1DF96:	dc.b 1
000152DE E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000152E3 01                         word_1DFA0:	dc.b 1
000152E4 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000152E9 01                         word_1DFAA:	dc.b 1
000152EA E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000152EF 01                         word_1DFB4:	dc.b 1
000152F0 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000152F5 01                         word_1DFBE:	dc.b 1
000152F6 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000152FB 01                         word_1DFC8:	dc.b 1
000152FC F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015301 01                         word_1DFD2:	dc.b 1
00015302 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015307 01                         word_1DFDC:	dc.b 1
00015308 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001530D 01                         word_1DFE6:	dc.b 1
0001530E 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015313 01                         word_1DFF0:	dc.b 1
00015314 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015319 01                         word_1DFFA:	dc.b 1
0001531A 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001531F 02                         word_1E004:	dc.b 2
00015320 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00015325 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001532A 02                         word_1E016:	dc.b 2
0001532B F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00015330 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00015335 02                         word_1E028:	dc.b 2
00015336 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001533B 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015340 02                         word_1E03A:	dc.b 2
00015341 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015346 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001534B 01                         word_1E04C:	dc.b 1
0001534C F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015351 01                         word_1E056:	dc.b 1
00015352 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00015357 01                         word_1E060:	dc.b 1
00015358 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001535D 01                         word_1E06A:	dc.b 1
0001535E F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00015363 00                         	dc.b 0
00015364 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00015366 0000                       	dc word_1E0A2-off_1E074; 1
00015368 0000                       	dc word_1E0A6-off_1E074; 2
0001536A 0000                       	dc word_1E0AA-off_1E074; 3
0001536C 0000                       	dc word_1E0AE-off_1E074; 4
0001536E 0000                       	dc word_1E0B2-off_1E074; 5
00015370 0000                       	dc word_1E0B6-off_1E074; 6
00015372 0000                       	dc word_1E0BA-off_1E074; 7
00015374 0000                       	dc word_1E0BE-off_1E074; 8
00015376 0000                       	dc word_1E0C2-off_1E074; 9
00015378 0000                       	dc word_1E0C6-off_1E074; 10
0001537A 0000                       	dc word_1E0CA-off_1E074; 11
0001537C 0000                       	dc word_1E0CE-off_1E074; 12
0001537E 0000                       	dc word_1E0D2-off_1E074; 13
00015380 0000                       	dc word_1E0D8-off_1E074; 14
00015382 0000                       	dc word_1E0DE-off_1E074; 15
00015384 0000                       	dc word_1E0E4-off_1E074; 16
00015386 0000                       	dc word_1E0EA-off_1E074; 17
00015388 0000                       	dc word_1E0EA-off_1E074; 18
0001538A 0000                       	dc word_1E0EA-off_1E074; 19
0001538C 0000                       	dc word_1E0EA-off_1E074; 20
0001538E 0000                       	dc word_1E0EC-off_1E074; 21
00015390 0000                       word_1E0A0:	dc 0
00015392 0001                       word_1E0A2:	dc 1
00015394 7000                       	dc $7000
00015396 0001                       word_1E0A6:	dc 1
00015398 F008                       	dc $F008
0001539A 0001                       word_1E0AA:	dc 1
0001539C F018                       	dc $F018
0001539E 0001                       word_1E0AE:	dc 1
000153A0 F028                       	dc $F028
000153A2 0001                       word_1E0B2:	dc 1
000153A4 F038                       	dc $F038
000153A6 0001                       word_1E0B6:	dc 1
000153A8 F048                       	dc $F048
000153AA 0001                       word_1E0BA:	dc 1
000153AC 7058                       	dc $7058
000153AE 0001                       word_1E0BE:	dc 1
000153B0 7060                       	dc $7060
000153B2 0001                       word_1E0C2:	dc 1
000153B4 7068                       	dc $7068
000153B6 0001                       word_1E0C6:	dc 1
000153B8 7070                       	dc $7070
000153BA 0001                       word_1E0CA:	dc 1
000153BC 7078                       	dc $7078
000153BE 0001                       word_1E0CE:	dc 1
000153C0 7080                       	dc $7080
000153C2 0002                       word_1E0D2:	dc 2
000153C4 1088                       	dc $1088
000153C6 708A                       	dc $708A
000153C8 0002                       word_1E0D8:	dc 2
000153CA 3092                       	dc $3092
000153CC 7096                       	dc $7096
000153CE 0002                       word_1E0DE:	dc 2
000153D0 509E                       	dc $509E
000153D2 70A4                       	dc $70A4
000153D4 0002                       word_1E0E4:	dc 2
000153D6 50AC                       	dc $50AC
000153D8 70B2                       	dc $70B2
000153DA 0000                       word_1E0EA:	dc 0
000153DC 0001                       word_1E0EC:	dc 1
000153DE F0BA                       	dc $F0BA
000153E0                            	even
000153E0                            
000153E0                            ; ===========================================================================
000153E0                            
000153E0                            LoadPlayerPal:
000153E0 7000                       		moveq	#0,d0
000153E2 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000153E6 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
000153EA 4E75                       		rts
000153EC                            
000153EC                            	@palLUT:
000153EC 0315 1617 18               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
000153F1 191A 1B1C 1D               		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10
000153F6                            
000153F6                            LoadPlayerWaterPal:
000153F6 7000                       		moveq	#0,d0
000153F8 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000153FC 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015400 4E75                       		rts
00015402                            
00015402                            	@palLUT:
00015402 101E 1F20 21               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
00015407 2223 2425 26               		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10
0001540C                            
0001540C                            ; ---------------------------------------------------------------------------
0001540C                            ; Object 01 - Sonic
0001540C                            ; ---------------------------------------------------------------------------
0001540C                            
0001540C                            SonicPlayer:
0001540C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015410 6700                       		beq.s	Sonic_Normal	; if not, branch
00015412 4EF9 0000 0000             		jmp	(DebugMode).l
00015418                            ; ===========================================================================
00015418                            
00015418                            Sonic_Normal:
00015418 7000                       		moveq	#0,d0
0001541A 1028 0024                  		move.b	obRoutine(a0),d0
0001541E 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00015422 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
00015426                            ; ===========================================================================
00015426 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
00015428 0000                       		dc.w Sonic_Control-Sonic_Index
0001542A 0000                       		dc.w Sonic_Hurt-Sonic_Index
0001542C 0000                       		dc.w Sonic_Death-Sonic_Index
0001542E 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015430                            ; ===========================================================================
00015430                            
00015430                            Sonic_Main:	; Routine 0
00015430 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015436 5428 0024                  		addq.b	#2,obRoutine(a0)
0001543A 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015440 117C 0009 0017             		move.b	#9,obWidth(a0)
00015446 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001544E 317C 0780 0002             		move.w	#$780,obGfx(a0)
00015454 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001545A 117C 0018 0014             		move.b	#$18,obActWid(a0)
00015460 117C 0004 0001             		move.b	#4,obRender(a0)
00015466 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
0001546C 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
00015472 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
00015478 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001547E                            
0001547E                            Sonic_Control:    ; Routine 2
0001547E 4A38 FF8B                   		tst.b	($FFFFFF8B).w
00015482 6700 0000                  		beq.w	@cont    
00015486 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
00015488                             
00015488                            	@cont: 
00015488 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
0001548C 6700                       		beq.s    loc_12C58    ; if not, branch
0001548E 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
00015494 6700                       		beq.s    loc_12C58    ; if not, branch
00015496 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
0001549C 4238 F7CC                  		clr.b    (f_lockctrl).w
000154A0 4E75                       		rts
000154A2                            		
000154A2                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
000154A2                            ; ---------------------------------------------------------------------------
000154A2                            ; Subroutine to    horizontally pan the camera view ahead of the player
000154A2                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
000154A2                            ; ---------------------------------------------------------------------------
000154A2                            
000154A2                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000154A2                            
000154A2                            
000154A2                            Sonic_PanCamera:
000154A2 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
000154A6 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000154AA 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000154AC 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000154AE                            
000154AE                                @abs_inertia:
000154AE                            
000154AE                            ; These lines were intended to prevent the Camera from panning while
000154AE                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000154AE                            ; However, given that no such object exists in Sonic 1, I just went
000154AE                            ; ahead and commented these out.
000154AE                            ;        btst    #1,$2C(a0)                ; is sonic going up a giant ramp in PPZ?
000154AE                            ;        beq.s    @skip                    ; if not, branch
000154AE                            ;        cmpi.w    #$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000154AE                            ;        bcs.s    @reset_pan                ; if so, branch
000154AE                            
000154AE                            ; These lines aren't part of the original routine; I added them myself.
000154AE                            ; If you've ported the Spin Dash, uncomment the following lines of code
000154AE                            ; to allow the camera to pan ahead while charging the Spin Dash:
000154AE 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000154B2 6700                               beq.s    @skip                    ; if not, branch
000154B4 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
000154BA 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
000154BC 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
000154BE                            
000154BE                                @skip:
000154BE 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
000154C2 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
000154C4 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
000154C8 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
000154CA                            
000154CA                                @pan_right:
000154CA 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000154CC 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
000154D0 6500                               bcs.s    @update_pan                ; if not, branch
000154D2 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
000154D6 6000                               bra.s    @update_pan                ; branch
000154D8                            ; ---------------------------------------------------------------------------
000154D8                            
000154D8                                @pan_left:
000154D8 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000154DA 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
000154DE 6400                               bcc.s    @update_pan                ; if not, branch
000154E0 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
000154E4 6000                               bra.s    @update_pan                ; branch
000154E6                            ; ---------------------------------------------------------------------------
000154E6                            
000154E6                                @reset_pan:
000154E6 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
000154EA 6700                               beq.s    @update_pan                ; if so, branch
000154EC 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
000154EE                                 
000154EE                                @reset_right:
000154EE 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000154F0 6000                               bra.s    @update_pan                ; branch
000154F2                            ; ---------------------------------------------------------------------------
000154F2                            
000154F2                                @reset_left:
000154F2 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000154F4                            
000154F4                                @update_pan:
000154F4 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
000154F8 4E75                               rts                                ; return
000154FA                                 
000154FA                            ; End of function Sonic_PanCamera
000154FA                            
000154FA                            
000154FA                            ; ===========================================================================
000154FA                            
000154FA                            loc_12C58:
000154FA 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
000154FE 6600                       		bne.s	loc_12C64	; if yes, branch
00015500 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
00015506                            
00015506                            loc_12C64:
00015506 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
0001550C 6600                       		bne.s	loc_12C7E	; if yes, branch
0001550E 7000                       		moveq	#0,d0
00015510 1028 0022                  		move.b	obStatus(a0),d0
00015514 0240 0006                  		andi.w	#6,d0
00015518 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
0001551C 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015520                            
00015520                            loc_12C7E:
00015520 6100                       		bsr.s	Sonic_Display
00015522 6100 0000                  		bsr.w	Sonic_RecordPosition
00015526 6100 0000                  		bsr.w	Sonic_Water
0001552A 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015530 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00015536 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
0001553A 6700                       		beq.s	loc_12CA6
0001553C 4A28 001C                  		tst.b	obAnim(a0)
00015540 6600                       		bne.s	loc_12CA6
00015542 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
00015548                            
00015548                            loc_12CA6:
00015548 6100 0000                  		bsr.w	Sonic_Animate
0001554C 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015550 6B00                       		bmi.s	loc_12CB6
00015552 4EB9 0000 0000             		jsr	(ReactToItem).l
00015558                            
00015558                            loc_12CB6:
00015558 6100 0000                  		bsr.w	Sonic_Loops
0001555C 6100 0000                  		bsr.w	Sonic_LoadGfx
00015560 4E75                       		rts	
00015562                            ; ===========================================================================
00015562 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
00015564 0000                       		dc.w Sonic_MdJump-Sonic_Modes
00015566 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
00015568 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
0001556A                            ; ---------------------------------------------------------------------------
0001556A                            ; Music	to play	after invincibility wears off
0001556A                            ; ---------------------------------------------------------------------------
0001556A                            MusicList2:
0001556A 00                         		dc.b bgm_GHZ
0001556B 00                         		dc.b bgm_LZ
0001556C 00                         		dc.b bgm_MZ
0001556D 00                         		dc.b bgm_SLZ
0001556E 00                         		dc.b bgm_SYZ
0001556F 00                         		dc.b bgm_SBZ
00015570                            		; The ending doesn't get an entry
00015570                            		even
00015570                            
00015570                            		include	"_incObj\Sonic Display.asm"
00015570                            ; ---------------------------------------------------------------------------
00015570                            ; Subroutine to display Sonic and set music
00015570                            ; ---------------------------------------------------------------------------
00015570                            
00015570                            Sonic_Display:
00015570 3028 0030                  		move.w    flashtime(a0),d0
00015574 6700                       		beq.s    @showAfterImage
00015576 5368 0030                  		subq.w    #1,flashtime(a0)
0001557A E648                               	lsr.w    #3,d0
0001557C 6400                               	bcc.s    @chkinvincible
0001557E                            
0001557E                            	@showAfterImage:
0001557E 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
00015582 4A40                       		tst.w    d0                    ; is inertia greater than 0?
00015584 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
00015586 4440                       		neg        d0                    ; if not, negate it
00015588                            
00015588                            	@AfterImage_Start:        
00015588 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001558C 6700                       		beq.s	@display	; if not, don't show the After Image
0001558E                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
0001558E                            		;blt.s    @display	; if not, don't show the After Image
0001558E                            	
0001558E                            	@AfterImage_Start2:    
0001558E 6100 A91E                          	bsr.w    FindFreeObj    ; search a free space in object RAM
00015592 6600                               	bne.s    @display    ; if not have, don't load the After Image
00015594 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
00015598 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
0001559E 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000155A4 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000155AA                            
000155AA                                	@display:
000155AA 4EB9 0000 FA22                     	jsr    (DisplaySprite).l
000155B0                            
000155B0                            	@chkinvincible:
000155B0 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000155B4 6700                       		beq.s	@chkshoes	; if not, branch
000155B6 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000155BA 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000155BC 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000155C0 6600                       		bne.s	@chkshoes
000155C2 4A38 F7AA                  		tst.b	(f_lockscreen).w
000155C6 6600                       		bne.s	@removeinvincible
000155C8 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
000155CE 6500                       		bcs.s	@removeinvincible
000155D0 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000155D4 4EB9 0000 129A                     	jsr	(PlaySound).l    ; play normal music
000155DA                            
000155DA                            	@removeinvincible:
000155DA 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
000155E0                            
000155E0                            	@chkshoes:
000155E0 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000155E4 6700                       		beq.s	@exit		; if not, branch
000155E6 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
000155EA 6700                       		beq.s	@exit
000155EC 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
000155F0 6600                       		bne.s	@exit
000155F2 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000155F8 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
000155FE 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015604 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
0001560A 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001560E 4EB9 0000 129A                     	jsr	(PlaySound).l    ; play normal music
00015614                            		
00015614                            	@exit:
00015614 4E75                       		rts	
00015614 4E75                       		rts	
00015616                            		include	"_incObj\Sonic RecordPosition.asm"
00015616                            ; ---------------------------------------------------------------------------
00015616                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00015616                            ; ---------------------------------------------------------------------------
00015616                            
00015616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015616                            
00015616                            
00015616                            Sonic_RecordPosition:
00015616 3038 F7A8                  		move.w	(v_trackpos).w,d0
0001561A 43F8 CB00                  		lea	(v_tracksonic).w,a1
0001561E 43F1 0000                  		lea	(a1,d0.w),a1
00015622 32E8 0008                  		move.w	obX(a0),(a1)+
00015626 32E8 000C                  		move.w	obY(a0),(a1)+
0001562A 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
0001562E 4E75                       		rts	
00015630                            ; End of function Sonic_RecordPosition
00015630                            ; End of function Sonic_RecordPosition
00015630                            		include	"_incObj\Sonic Water.asm"
00015630                            ; ---------------------------------------------------------------------------
00015630                            ; Subroutine for Sonic when he's underwater
00015630                            ; ---------------------------------------------------------------------------
00015630                            
00015630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015630                            
00015630                            
00015630                            Sonic_Water:
00015630 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
00015636 6700                       		beq.s	WaterTagforMZ	; if yes, branch
00015638 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
0001563E 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
00015640                            
00015640                            	Sonic_Water_Exit:
00015640 4E75                       		rts	
00015642                            ; ===========================================================================
00015642                            
00015642                            	Sonic_Water_LZ:
00015642 3038 F646                  		move.w	(v_waterpos1).w,d0
00015646 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
0001564A 6C00 0000                  		bge.w	Abovewater	; if yes, branch
0001564E 6000 0000                  		bra	WaterStatus
00015652                            	WaterTagforMZ:
00015652 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
00015658 6700 0000                  		beq.w	Abovewater	; if yes, branch
0001565C                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0001565C                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0001565C                                ;    lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0001565C                            	;	jsr	Palload_Loop
0001565C                            	WaterStatus:
0001565C 08E8 0006 0022             		bset	#6,obStatus(a0)
00015662 6600 FFDC                  		bne.w	Sonic_Water_Exit
00015666 6100 0000                  		bsr.w	ResumeMusic
0001566A 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015670                            
00015670 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
00015676 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
0001567C 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
00015682 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
00015688 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
0001568E E0E8 0010                  		asr	obVelX(a0)
00015692 E0E8 0012                  		asr	obVelY(a0)
00015696 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
0001569A 6700 FFA4                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
0001569E                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
0001569E 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000156AE 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000156B4 6600 0000                  		bne.w	@return
000156B8                            		
000156B8                            		
000156B8                            	@return:
000156B8 4E75                       		rts
000156BA                            ; ===========================================================================
000156BA                            
000156BA                            Abovewater:
000156BA 08A8 0006 0022             		bclr	#6,obStatus(a0)
000156C0 6700 FF7E                  		beq.w	Sonic_Water_Exit
000156C4 6100 0000                  		bsr.w	ResumeMusic
000156C8 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000156CE                            
000156CE 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000156D4 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
000156DA 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
000156E0 E1E8 0012                  		asl	obVelY(a0)
000156E4 6700 FF5A                  		beq.w	Sonic_Water_Exit
000156E8 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000156EE 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
000156F4 6E00                       		bgt.s	@belowmaxspeed
000156F6 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
000156FC                            
000156FC                            	@belowmaxspeed:
00015706                            ; End of function Sonic_Water
00015706                            ; End of function Sonic_Water
00015706                            		include "_incObj\03 Hangable Sprite.asm"
00015706                            ; ===========================================================================
00015706                            ; ----------------------------------------------------------------------------
00015706                            ; Object 03 - Invisible sprite that you can hang on to
00015706                            ; ----------------------------------------------------------------------------
00015706                            ; Sprite_2C92C:
00015706                            Obj03:
00015706 7000                       	moveq    #0,d0
00015708 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
0001570C 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
00015710 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
00015714                            ; ===========================================================================
00015714                            ; off_2C93A:
00015714                            Obj03_Index:
00015714 0000                           dc.w Obj03_Main-Obj03_Index
00015716 0000                               dc.w Obj03_Init-Obj03_Index
00015718                            ; ===========================================================================
00015718                            ; loc_2C93E:
00015718                            Obj03_Init:
00015718 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
0001571C 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
00015722 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
00015728 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
0001572E                            ; loc_2C954:
0001572E                            Obj03_Main:
0001572E 45E8 0030                      lea    $30(a0),a2
00015732 43F8 D000                      lea    (v_player).w,a1 ; a1=character
00015736 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
0001573A 6100                           bsr.s    Obj03_Check
0001573C                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
0001573C                            ;    addq.w    #1,a2                          ;disabled
0001573C                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
0001573C                            ;    bsr.s    Obj03_Check         	;disabled
0001573C 4EF9 0000 0000             	jmp		bonu_chkdel
00015742                            ; ===========================================================================
00015742                            ; loc_2C972:
00015742                            Obj03_Check:
00015742 4A12                       		tst.b	(a2)
00015744 6700                       		beq.s	loc_2C9A0
00015746 0200 0070                  		andi.b	#btnABC,d0
0001574A 6700 0000                  		beq.w	Obj03_Check_End
0001574E 4238 F7C8                  		clr.b	f_lockmulti.w
00015752 4212                       		clr.b	(a2)
00015754 157C 0012 0002             		move.b	#$12,2(a2)
0001575A 0240 0F00                  		andi.w	#$F00,d0
0001575E 6700                       		beq.s	loc_2C954
00015760 157C 003C 0002             		move.b	#$3C,2(a2)
00015766                            	
00015766                            loc_2C954:
00015766 337C FD00 0012             		move.w	#-$300,y_vel(a1)
0001576C 6000 0000                  		bra.w	Obj03_Check_End
00015770                            ; ===========================================================================
00015770                            
00015770                            loc_2C9A0:
00015770 4A2A 0002                  		tst.b	2(a2)
00015774 6700                       		beq.s	loc_2C972
00015776 532A 0002                  		subq.b	#1,2(a2)
0001577A 6600 0000                  		bne.w	Obj03_Check_End
0001577E                            
0001577E                            loc_2C972:
0001577E 3029 0008                  		move.w	obX(a1),d0
00015782 9068 0008                  		sub.w	obX(a0),d0
00015786 0640 0018                  		addi.w	#$18,d0
0001578A 0C40 0030                  		cmpi.w	#$30,d0
0001578E 6400 0000                  		bhs.w	Obj03_Check_End
00015792 3229 000C                  		move.w	obY(a1),d1
00015796 9268 000C                  		sub.w	obY(a0),d1
0001579A 0C41 0010                  		cmpi.w	#$10,d1
0001579E 6400 0000                  		bhs.w	Obj03_Check_End
000157A2 4A38 F7C8                  		tst.b	f_lockmulti.w
000157A6 6B00                       		bmi.s	Obj03_Check_End
000157A8 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000157AE 6400                       		bhs.s	Obj03_Check_End
000157B0 4A78 FFFA                  		tst.w	(f_debugmode).w
000157B4 6600                       		bne.s	Obj03_Check_End
000157B6 4269 0010                  		clr.w	x_vel(a1)
000157BA 4269 0012                  		clr.w	y_vel(a1)
000157BE 4269 0020                  		clr.w	obInertia(a1)
000157C2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000157C8 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
000157CE 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
000157D4 14BC 0001                  		move.b	#1,(a2)
000157D8                            
000157D8                            ; return_2CA08:
000157D8                            Obj03_Check_End:
000157D8 4E75                       		rts
000157D8 4E75                       		rts
000157DA                            
000157DA                            ; ===========================================================================
000157DA                            ; ---------------------------------------------------------------------------
000157DA                            ; Modes	for controlling	Sonic
000157DA                            ; ---------------------------------------------------------------------------
000157DA                            
000157DA                            Sonic_MdNormal:
000157DA 6100 0000                  		bsr.w	Sonic_Peelout
000157DE 6100 0000                  		bsr.w	Sonic_SpinDash
000157E2 6100 0000                  		bsr.w	Sonic_Jump
000157E6 6100 0000                  		bsr.w	Sonic_SlopeResist
000157EA 6100 0000                  		bsr.w	Sonic_Move
000157EE 6100 0000                  		bsr.w	Sonic_Roll
000157F2 6100 0000                  		bsr.w	Sonic_LevelBound
000157F6 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
000157FC 6100 0000                  		bsr.w	Sonic_AnglePos
00015800 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015804 4E75                       		rts	
00015806                            
00015806                            ; ===========================================================================
00015806                            
00015806                            Sonic_MdJump:
00015806 6100 0000                  		bsr.w   Sonic_AirRoll
0001580A 6100 0000                  		bsr.w	Sonic_JumpHeight
0001580E 6100 0000                  		bsr.w	Sonic_JumpDirection
00015812 6100 0000                  		bsr.w	Sonic_LevelBound
00015816 4EB9 0000 F9D6             		jsr	(ObjectFall).l
0001581C 0828 0006 0022             		btst	#6,obStatus(a0)
00015822 6700                       		beq.s	loc_12E5C
00015824 0468 0028 0012             		subi.w	#$28,obVelY(a0)
0001582A                            
0001582A                            loc_12E5C:
0001582A 6100 0000                  		bsr.w	Sonic_JumpAngle
0001582E 6100 0000                  		bsr.w	Sonic_Floor
00015832 4E75                       		rts	
00015834                            ; ===========================================================================
00015834                            
00015834                            Sonic_MdRoll:
00015834 6100 0000                  		bsr.w	Sonic_Jump
00015838 6100 0000                  		bsr.w	Sonic_RollRepel
0001583C 6100 0000                  		bsr.w	Sonic_RollSpeed
00015840 6100 0000                  		bsr.w	Sonic_LevelBound
00015844 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
0001584A 6100 0000                  		bsr.w	Sonic_AnglePos
0001584E 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015852 4E75                       		rts	
00015854                            ; ===========================================================================
00015854                            
00015854                            Sonic_MdJump2:
00015854 6100 0000                  		bsr.w	Sonic_JumpHeight
00015858 6100 0000                  		bsr.w	Sonic_JumpDirection
0001585C 6100 0000                  		bsr.w	Sonic_LevelBound
00015860 4EB9 0000 F9D6             		jsr	(ObjectFall).l
00015866 0828 0006 0022             		btst	#6,obStatus(a0)
0001586C 6700                       		beq.s	loc_12EA6
0001586E 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015874                            
00015874                            loc_12EA6:
00015874 6100 0000                  		bsr.w	Sonic_JumpAngle
00015878 6100 0000                  		bsr.w	Sonic_Floor
0001587C 4E75                       		rts	
0001587E                            
0001587E                            		include	"_incObj\Sonic Move.asm"
0001587E                            ; ---------------------------------------------------------------------------
0001587E                            ; Subroutine to	make Sonic walk/run
0001587E                            ; ---------------------------------------------------------------------------
0001587E                            
0001587E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001587E                            
0001587E                            
0001587E                            Sonic_Move:
0001587E 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015882 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
00015886 3838 F764                  		move.w	(v_sonspeeddec).w,d4
0001588A 4A38 F7CA                  		tst.b	(f_jumponly).w
0001588E 6600 0000                  		bne.w	loc_12FEE
00015892 4A68 003E                  		tst.w	$3E(a0)
00015896 6600 0000                  		bne.w	Sonic_ResetScr
0001589A 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000158A0 6700                       		beq.s	@notleft	; if not, branch
000158A2 6100 0000                  		bsr.w	Sonic_MoveLeft
000158A6                            
000158A6                            	@notleft:
000158A6 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000158AC 6700                       		beq.s	@notright	; if not, branch
000158AE 6100 0000                  		bsr.w	Sonic_MoveRight
000158B2                            
000158B2                            	@notright:
000158B2 1028 0026                  		move.b	obAngle(a0),d0
000158B6 0600 0020                  		addi.b	#$20,d0
000158BA 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000158BE 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000158C2 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000158C6 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000158CA 08A8 0005 0022             		bclr	#5,obStatus(a0)
000158D0 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
000158D6 0828 0003 0022             		btst	#3,obStatus(a0)
000158DC 6700                       		beq.s	Sonic_Balance
000158DE 7000                       		moveq	#0,d0
000158E0 1028 003D                  		move.b	$3D(a0),d0
000158E4 ED48                       		lsl.w	#6,d0
000158E6 43F8 D000                  		lea	(v_objspace).w,a1
000158EA 43F1 0000                  		lea	(a1,d0.w),a1
000158EE 4A29 0022                  		tst.b	obStatus(a1)
000158F2 6B00                       		bmi.s	Sonic_LookUp
000158F4 7200                       		moveq	#0,d1
000158F6 1229 0014                  		move.b	obActWid(a1),d1
000158FA 3401                       		move.w	d1,d2
000158FC D442                       		add.w	d2,d2
000158FE 5942                       		subq.w	#4,d2
00015900 D268 0008                  		add.w	obX(a0),d1
00015904 9269 0008                  		sub.w	obX(a1),d1
00015908 0C41 0004                  		cmpi.w	#4,d1
0001590C 6D00                       		blt.s	loc_12F6A
0001590E B242                       		cmp.w	d2,d1
00015910 6C00                       		bge.s	loc_12F5A
00015912 6000                       		bra.s	Sonic_LookUp
00015914                            ; ===========================================================================
00015914                            
00015914                            Sonic_Balance:
00015914 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001591A 0C41 000C                  		cmpi.w	#$C,d1
0001591E 6D00                       		blt.s	Sonic_LookUp
00015920 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00015926 6600                       		bne.s	loc_12F62
00015928                            
00015928                            loc_12F5A:
00015928 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001592E 6000                       		bra.s	loc_12F70
00015930                            ; ===========================================================================
00015930                            
00015930                            loc_12F62:
00015930 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00015936 6600                       		bne.s	Sonic_LookUp
00015938                            
00015938                            loc_12F6A:
00015938 08E8 0000 0022             		bset	#0,obStatus(a0)
0001593E                            
0001593E                            loc_12F70:
0001593E 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
00015944 6000 0000                  		bra.w	Sonic_ResetScr
00015948                            ; ===========================================================================
00015948                            
00015948                            Sonic_LookUp:
00015948 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001594E 6700                       		beq.s	Sonic_Duck	; if not, branch
00015950 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00015956 5238 C903                  		addq.b	#1,($FFFFC903).w
0001595A 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00015960 6500                       		bcs.s	Sonic_ResetScr_Part2
00015962 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00015968 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001596E 6700                       		beq.s	loc_12FC2
00015970 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00015974 6000                       		bra.s	loc_12FC2
00015976                            ; ===========================================================================
00015976                            
00015976                            Sonic_Duck:
00015976 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001597C 6700                       		beq.s	Sonic_ResetScr	; if not, branch
0001597E 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00015984 5238 C903                  		addq.b	#1,($FFFFC903).w
00015988 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
0001598E 6500                       		bcs.s	Sonic_ResetScr_Part2
00015990 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00015996 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
0001599C 6700                       		beq.s	loc_12FC2
0001599E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000159A2 6000                       		bra.s	loc_12FC2
000159A4                            ; ===========================================================================
000159A4                            
000159A4                            Sonic_ResetScr:
000159A4 11FC 0000 C903             		move.b	#0,($FFFFC903).w
000159AA                            		
000159AA                            Sonic_ResetScr_Part2:
000159AA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000159B0 6700                       		beq.s	loc_12FC2	; if yes, branch
000159B2 6400                       		bcc.s	loc_12FBE
000159B4 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000159B8                            
000159B8                            loc_12FBE:
000159B8 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000159BC                            
000159BC                            loc_12FC2:
000159BC 1038 F602                  		move.b	(v_jpadhold2).w,d0
000159C0 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
000159C4 6600                       		bne.s	loc_12FEE	; if yes, branch
000159C6 3028 0020                  		move.w	obInertia(a0),d0
000159CA 6700                       		beq.s	loc_12FEE
000159CC 6B00                       		bmi.s	loc_12FE2
000159CE 9045                       		sub.w	d5,d0
000159D0 6400                       		bcc.s	loc_12FDC
000159D2 303C 0000                  		move.w	#0,d0
000159D6                            
000159D6                            loc_12FDC:
000159D6 3140 0020                  		move.w	d0,obInertia(a0)
000159DA 6000                       		bra.s	loc_12FEE
000159DC                            ; ===========================================================================
000159DC                            
000159DC                            loc_12FE2:
000159DC D045                       		add.w	d5,d0
000159DE 6400                       		bcc.s	loc_12FEA
000159E0 303C 0000                  		move.w	#0,d0
000159E4                            
000159E4                            loc_12FEA:
000159E4 3140 0020                  		move.w	d0,obInertia(a0)
000159E8                            
000159E8                            loc_12FEE:
000159E8 4A28 0039                  		tst.b	$39(a0) 	;Peelout
000159EC 6600                       		bne.s	loc_1300C 	;Peelout
000159EE 1028 0026                  		move.b	obAngle(a0),d0
000159F2 4EB9 0000 3A82             		jsr	(CalcSine).l
000159F8 C3E8 0020                  		muls.w	obInertia(a0),d1
000159FC E081                       		asr.l	#8,d1
000159FE 3141 0010                  		move.w	d1,obVelX(a0)
00015A02 C1E8 0020                  		muls.w	obInertia(a0),d0
00015A06 E080                       		asr.l	#8,d0
00015A08 3140 0012                  		move.w	d0,obVelY(a0)
00015A0C                            
00015A0C                            loc_1300C:
00015A0C 1028 0026                  		move.b	obAngle(a0),d0
00015A10 0600 0040                  		addi.b	#$40,d0
00015A14 6B00                       		bmi.s	locret_1307C
00015A16 123C 0040                  		move.b	#$40,d1
00015A1A 4A68 0020                  		tst.w	obInertia(a0)
00015A1E 6700                       		beq.s	locret_1307C
00015A20 6B00                       		bmi.s	loc_13024
00015A22 4441                       		neg.w	d1
00015A24                            
00015A24                            loc_13024:
00015A24 1028 0026                  		move.b	obAngle(a0),d0
00015A28 D001                       		add.b	d1,d0
00015A2A 3F00                       		move.w	d0,-(sp)
00015A2C 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015A30 301F                       		move.w	(sp)+,d0
00015A32 4A41                       		tst.w	d1
00015A34 6A00                       		bpl.s	locret_1307C
00015A36 E141                       		asl.w	#8,d1
00015A38 0600 0020                  		addi.b	#$20,d0
00015A3C 0200 00C0                  		andi.b	#$C0,d0
00015A40 6700                       		beq.s	loc_13078
00015A42 0C00 0040                  		cmpi.b	#$40,d0
00015A46 6700                       		beq.s	loc_13066
00015A48 0C00 0080                  		cmpi.b	#$80,d0
00015A4C 6700                       		beq.s	loc_13060
00015A4E D368 0010                  		add.w	d1,obVelX(a0)
00015A52 08E8 0005 0022             		bset	#5,obStatus(a0)
00015A58 317C 0000 0020             		move.w	#0,obInertia(a0)
00015A5E 4E75                       		rts	
00015A60                            ; ===========================================================================
00015A60                            
00015A60                            loc_13060:
00015A60 9368 0012                  		sub.w	d1,obVelY(a0)
00015A64 4E75                       		rts	
00015A66                            ; ===========================================================================
00015A66                            
00015A66                            loc_13066:
00015A66 9368 0010                  		sub.w	d1,obVelX(a0)
00015A6A 08E8 0005 0022             		bset	#5,obStatus(a0)
00015A70 317C 0000 0020             		move.w	#0,obInertia(a0)
00015A76 4E75                       		rts	
00015A78                            ; ===========================================================================
00015A78                            
00015A78                            loc_13078:
00015A78 D368 0012                  		add.w	d1,obVelY(a0)
00015A7C                            
00015A7C                            locret_1307C:
00015A7C 4E75                       		rts	
00015A7E                            ; End of function Sonic_Move
00015A7E                            
00015A7E                            
00015A7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A7E                            
00015A7E                            
00015A7E                            Sonic_MoveLeft:
00015A7E 3028 0020                  		move.w	obInertia(a0),d0
00015A82 6700                       		beq.s	loc_13086
00015A84 6A00                       		bpl.s	loc_130B2
00015A86                            
00015A86                            loc_13086:
00015A86 08E8 0000 0022             		bset	#0,$22(a0)
00015A8C 6600                       		bne.s	loc_1309A
00015A8E 08A8 0005 0022             		bclr	#5,$22(a0)
00015A94 117C 0001 001D             		move.b	#1,$1D(a0)
00015A9A                            
00015A9A                            loc_1309A:
00015A9A 9045                       		sub.w	d5,d0
00015A9C 3206                       		move.w	d6,d1
00015A9E 4441                       		neg.w	d1
00015AA0 B041                       		cmp.w	d1,d0
00015AA2 6E00                       		bgt.s	loc_130A6
00015AA4 D045                       		add.w	d5,d0
00015AA6 B041                       		cmp.w	d1,d0
00015AA8 6F00                       		ble.s	loc_130A6
00015AAA 3001                       		move.w	d1,d0
00015AAC                            
00015AAC                            loc_130A6:
00015AAC 3140 0020                  		move.w	d0,obInertia(a0)
00015AB0 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015AB6 4E75                       		rts
00015AB8                            ; ===========================================================================
00015AB8                            
00015AB8                            loc_130B2:
00015AB8 9044                       		sub.w	d4,d0
00015ABA 6400                       		bcc.s	loc_130BA
00015ABC 303C FF80                  		move.w	#-$80,d0
00015AC0                            
00015AC0                            loc_130BA:
00015AC0 3140 0020                  		move.w	d0,obInertia(a0)
00015AC4 1228 0026                  		move.b	obAngle(a0),d1
00015AC8 0601 0020                  		addi.b	#$20,d1
00015ACC 0201 00C0                  		andi.b	#$C0,d1
00015AD0 6600                       		bne.s	locret_130E8
00015AD2 0C40 0400                  		cmpi.w	#$400,d0
00015AD6 6D00                       		blt.s	locret_130E8
00015AD8 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015ADE 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015AEE 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015AF4 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015AFA                            		
00015AFA                            locret_130E8:
00015AFA 4E75                       		rts	
00015AFC                            ; End of function Sonic_MoveLeft
00015AFC                            
00015AFC                            
00015AFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AFC                            
00015AFC                            
00015AFC                            Sonic_MoveRight:
00015AFC 3028 0020                  		move.w	obInertia(a0),d0
00015B00 6B00                       		bmi.s	loc_13118
00015B02 08A8 0000 0022             		bclr	#0,$22(a0)
00015B08 6700                       		beq.s	loc_13104
00015B0A 08A8 0005 0022             		bclr	#5,$22(a0)
00015B10 117C 0001 001D             		move.b	#1,$1D(a0)
00015B16                            
00015B16                            loc_13104:
00015B16 D045                       		add.w	d5,d0
00015B18 B046                       		cmp.w	d6,d0
00015B1A 6D00                       		blt.s	loc_1310C
00015B1C 9045                       		sub.w	d5,d0
00015B1E B046                       		cmp.w	d6,d0
00015B20 6C00                       		bge.s	loc_1310C
00015B22 3006                       		move.w	d6,d0
00015B24                            
00015B24                            loc_1310C:
00015B24 3140 0020                  		move.w	d0,obInertia(a0)
00015B28 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015B2E 4E75                       		rts
00015B30                            ; ===========================================================================
00015B30                            
00015B30                            loc_13118:
00015B30 D044                       		add.w	d4,d0
00015B32 6400                       		bcc.s	loc_13120
00015B34 303C 0080                  		move.w	#$80,d0
00015B38                            
00015B38                            loc_13120:
00015B38 3140 0020                  		move.w	d0,obInertia(a0)
00015B3C 1228 0026                  		move.b	obAngle(a0),d1
00015B40 0601 0020                  		addi.b	#$20,d1
00015B44 0201 00C0                  		andi.b	#$C0,d1
00015B48 6600                       		bne.s	locret_1314E
00015B4A 0C40 FC00                  		cmpi.w	#-$400,d0
00015B4E 6E00                       		bgt.s	locret_1314E
00015B50 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015B56 08E8 0000 0022             		bset	#0,obStatus(a0)
00015B66 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015B6C 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015B72                            		
00015B72                            locret_1314E:
00015B72 4E75                       		rts	
00015B74                            ; End of function Sonic_MoveRight
00015B74                            ; End of function Sonic_MoveRight
00015B74                            		include	"_incObj\Sonic RollSpeed.asm"
00015B74                            ; ---------------------------------------------------------------------------
00015B74                            ; Subroutine to	change Sonic's speed as he rolls
00015B74                            ; ---------------------------------------------------------------------------
00015B74                            
00015B74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B74                            
00015B74                            
00015B74                            Sonic_RollSpeed:
00015B74 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015B78 E346                       		asl.w	#1,d6
00015B7A 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015B7C 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015B80 E444                       		asr.w	#2,d4
00015B82 4A38 F7CA                  		tst.b	(f_jumponly).w
00015B86 6600 0000                  		bne.w	loc_131CC
00015B8A 4A68 003E                  		tst.w	$3E(a0)
00015B8E 6600                       		bne.s	@notright
00015B90 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015B96 6700                       		beq.s	@notleft	; if not, branch
00015B98 6100 0000                  		bsr.w	Sonic_RollLeft
00015B9C                            
00015B9C                            	@notleft:
00015B9C 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015BA2 6700                       		beq.s	@notright	; if not, branch
00015BA4 6100 0000                  		bsr.w	Sonic_RollRight
00015BA8                            
00015BA8                            	@notright:
00015BA8 3028 0020                  		move.w	obInertia(a0),d0
00015BAC 6700                       		beq.s	loc_131AA
00015BAE 6B00                       		bmi.s	loc_1319E
00015BB0 9045                       		sub.w	d5,d0
00015BB2 6400                       		bcc.s	loc_13198
00015BB4 303C 0000                  		move.w	#0,d0
00015BB8                            
00015BB8                            loc_13198:
00015BB8 3140 0020                  		move.w	d0,obInertia(a0)
00015BBC 6000                       		bra.s	loc_131AA
00015BBE                            ; ===========================================================================
00015BBE                            
00015BBE                            loc_1319E:
00015BBE D045                       		add.w	d5,d0
00015BC0 6400                       		bcc.s	loc_131A6
00015BC2 303C 0000                  		move.w	#0,d0
00015BC6                            
00015BC6                            loc_131A6:
00015BC6 3140 0020                  		move.w	d0,obInertia(a0)
00015BCA                            
00015BCA                            loc_131AA:
00015BCA 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015BCE 6600                       		bne.s	loc_131CC	; if yes, branch
00015BD0 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015BD6 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015BDC 117C 0009 0017             		move.b	#9,obWidth(a0)
00015BE2 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015BE8 5B68 000C                  		subq.w	#5,obY(a0)
00015BEC                            
00015BEC                            loc_131CC:
00015BEC 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015BF2 6700                       		beq.s	@cont2
00015BF4 6400                       		bcc.s	@cont1
00015BF6 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015BFA                            		
00015BFA                            @cont1:
00015BFA 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015BFE                            		
00015BFE                            @cont2:
00015BFE 1028 0026                  		move.b	obAngle(a0),d0
00015C02 4EB9 0000 3A82             		jsr	(CalcSine).l
00015C08 C1E8 0020                  		muls.w	obInertia(a0),d0
00015C0C E080                       		asr.l	#8,d0
00015C0E 3140 0012                  		move.w	d0,obVelY(a0)
00015C12 C3E8 0020                  		muls.w	obInertia(a0),d1
00015C16 E081                       		asr.l	#8,d1
00015C18 0C41 1000                  		cmpi.w	#$1000,d1
00015C1C 6F00                       		ble.s	loc_131F0
00015C1E 323C 1000                  		move.w	#$1000,d1
00015C22                            
00015C22                            loc_131F0:
00015C22 0C41 F000                  		cmpi.w	#-$1000,d1
00015C26 6C00                       		bge.s	loc_131FA
00015C28 323C F000                  		move.w	#-$1000,d1
00015C2C                            
00015C2C                            loc_131FA:
00015C2C 3141 0010                  		move.w	d1,obVelX(a0)
00015C30 6000 FDDA                  		bra.w	loc_1300C
00015C34                            ; End of function Sonic_RollSpeed
00015C34                            
00015C34                            
00015C34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C34                            
00015C34                            
00015C34                            Sonic_RollLeft:
00015C34 3028 0020                  		move.w	obInertia(a0),d0
00015C38 6700                       		beq.s	loc_1320A
00015C3A 6A00                       		bpl.s	loc_13218
00015C3C                            
00015C3C                            loc_1320A:
00015C3C 08E8 0000 0022             		bset	#0,obStatus(a0)
00015C42 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015C48 4E75                       		rts	
00015C4A                            ; ===========================================================================
00015C4A                            
00015C4A                            loc_13218:
00015C4A 9044                       		sub.w	d4,d0
00015C4C 6400                       		bcc.s	loc_13220
00015C4E 303C FF80                  		move.w	#-$80,d0
00015C52                            
00015C52                            loc_13220:
00015C52 3140 0020                  		move.w	d0,obInertia(a0)
00015C56 4E75                       		rts	
00015C58                            ; End of function Sonic_RollLeft
00015C58                            
00015C58                            
00015C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C58                            
00015C58                            
00015C58                            Sonic_RollRight:
00015C58 3028 0020                  		move.w	obInertia(a0),d0
00015C5C 6B00                       		bmi.s	loc_1323A
00015C5E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015C64 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015C6A 4E75                       		rts	
00015C6C                            ; ===========================================================================
00015C6C                            
00015C6C                            loc_1323A:
00015C6C D044                       		add.w	d4,d0
00015C6E 6400                       		bcc.s	loc_13242
00015C70 303C 0080                  		move.w	#$80,d0
00015C74                            
00015C74                            loc_13242:
00015C74 3140 0020                  		move.w	d0,obInertia(a0)
00015C78 4E75                       		rts	
00015C7A                            ; End of function Sonic_RollRight
00015C7A                            ; End of function Sonic_RollRight
00015C7A                            		include	"_incObj\Sonic JumpDirection.asm"
00015C7A                            ; ---------------------------------------------------------------------------
00015C7A                            ; Subroutine to	change Sonic's direction while jumping
00015C7A                            ; ---------------------------------------------------------------------------
00015C7A                            
00015C7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C7A                            
00015C7A                            
00015C7A                            Sonic_JumpDirection:
00015C7A 3C38 F760                  		move.w	($FFFFF760).w,d6
00015C7E 3A38 F762                  		move.w	($FFFFF762).w,d5
00015C82 E345                       		asl.w	#1,d5
00015C84 3028 0010                  		move.w	$10(a0),d0	
00015C88 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015C8E 6700                       		beq.s	loc_13278; if not, branch	
00015C90 08E8 0000 0022             		bset	#0,$22(a0)	
00015C96 9045                       		sub.w	d5,d0	
00015C98 3206                       		move.w	d6,d1	
00015C9A 4441                       		neg.w	d1	
00015C9C B041                       		cmp.w	d1,d0	
00015C9E 6E00                       		bgt.s	loc_13278	
00015CA0 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015CA2 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015CA4 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015CA6 3001                       		move.w	d1,d0
00015CA8                            
00015CA8                            loc_13278:
00015CA8 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015CAE 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015CB0 08A8 0000 0022             		bclr	#0,$22(a0)	
00015CB6 D045                       		add.w	d5,d0	
00015CB8 B046                       		cmp.w	d6,d0	
00015CBA 6D00                       		blt.s	Obj01_JumpMove
00015CBC 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015CBE B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015CC0 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015CC2 3006                       		move.w	d6,d0
00015CC4                            
00015CC4                            Obj01_JumpMove:
00015CC4 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015CC8                            
00015CC8                            Obj01_ResetScr2:
00015CC8 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015CCE 6700                       		beq.s	loc_132A4	; if yes, branch
00015CD0 6400                       		bcc.s	loc_132A0
00015CD2 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015CD6                            
00015CD6                            loc_132A0:
00015CD6 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015CDA                            
00015CDA                            loc_132A4:
00015CDA 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015CE0 6500                       		bcs.s	locret_132D2	; if yes, branch
00015CE2 3028 0010                  		move.w	obVelX(a0),d0
00015CE6 3200                       		move.w	d0,d1
00015CE8 EA41                       		asr.w	#5,d1
00015CEA 6700                       		beq.s	locret_132D2
00015CEC 6B00                       		bmi.s	loc_132C6
00015CEE 9041                       		sub.w	d1,d0
00015CF0 6400                       		bcc.s	loc_132C0
00015CF2 303C 0000                  		move.w	#0,d0
00015CF6                            
00015CF6                            loc_132C0:
00015CF6 3140 0010                  		move.w	d0,obVelX(a0)
00015CFA 4E75                       		rts	
00015CFC                            ; ===========================================================================
00015CFC                            
00015CFC                            loc_132C6:
00015CFC 9041                       		sub.w	d1,d0
00015CFE 6500                       		bcs.s	loc_132CE
00015D00 303C 0000                  		move.w	#0,d0
00015D04                            
00015D04                            loc_132CE:
00015D04 3140 0010                  		move.w	d0,obVelX(a0)
00015D08                            
00015D08                            locret_132D2:
00015D08 4E75                       		rts	
00015D0A                            ; End of function Sonic_JumpDirection
00015D0A                            ; End of function Sonic_JumpDirection
00015D0A                            		include "_incObj\Sonic Peelout.asm"
00015D0A                            ; ---------------------------------------------------------------------------
00015D0A                            ; Subroutine to make Sonic perform a peelout
00015D0A                            ; ---------------------------------------------------------------------------
00015D0A                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015D0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D0A                            
00015D0A                            Sonic_Peelout:
00015D0A 0828 0001 0039             		btst	#1,$39(a0)
00015D10 6600                       		bne.s	SCDPeelout_Launch
00015D12 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015D18 6600                       		bne.s	@return
00015D1A 1038 F603                  		move.b	($FFFFF603).w,d0
00015D1E 0200 0070                  		andi.b	#%01110000,d0
00015D22 6700 0000                  		beq.w	@return
00015D26 117C 0001 001C             		move.b	#1,$1C(a0)
00015D2C 317C 0000 003A             		move.w	#0,$3A(a0)
00015D32 303C 00D2                  		move.w	#$D2,d0
00015D36 4EB9 0000 12A0             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015D3C                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015D3C 588F                       		addq.l	#4,sp
00015D3E 08E8 0001 0039             		bset	#1,$39(a0)
00015D44                            		
00015D44 4268 0020                  		clr.w	obInertia(a0)
00015D48                             
00015D48 6100 0000                  		bsr.w	Sonic_LevelBound
00015D4C 6100 0000                  		bsr.w	Sonic_AnglePos
00015D50                             
00015D50                            	@return:
00015D50 4E75                       		rts	
00015D52                            ; ---------------------------------------------------------------------------
00015D52                             
00015D52                            SCDPeelout_Launch:
00015D52 0828 0001 0039             		btst	#1,$39(a0)
00015D58 1038 F602                  		move.b	($FFFFF602).w,d0
00015D5C 0800 0000                  		btst	#0,d0
00015D60 6600 0000                  		bne.w	SCDPeelout_Charge
00015D64 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015D6A 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015D70 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015D74 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015D7A 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015D80 3028 0020                  		move.w	obInertia(a0),d0
00015D84 0440 0800                  		subi.w	#$800,d0
00015D88 D040                       		add.w	d0,d0
00015D8A 0240 1F00                  		andi.w	#$1F00,d0
00015D8E 4440                       		neg.w	d0
00015D90 0640 2000                  		addi.w	#$2000,d0
00015D94 31C0 C904                  		move.w	d0,($FFFFC904).w
00015D98 0828 0000 0022             		btst	#0,$22(a0)
00015D9E 6700                       		beq.s	@dontflip
00015DA0 4468 0020                  		neg.w	obInertia(a0)
00015DA4                             
00015DA4                            @dontflip:
00015DA4 08A8 0007 0022             		bclr	#7,$22(a0)
00015DAA 303C 00D3                  		move.w	#$D3,d0
00015DAE 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
00015DB4                            	;	sfx 	sfx_PeeloutRelease
00015DB4 1028 0026                  		move.b	obAngle(a0),d0
00015DB8 4EB9 0000 3A82             		jsr	(CalcSine).l
00015DBE C3E8 0020                  		muls.w	obInertia(a0),d1
00015DC2 E081                       		asr.l	#8,d1
00015DC4 3141 0010                  		move.w	d1,obVelX(a0)
00015DC8 C1E8 0020                  		muls.w	obInertia(a0),d0
00015DCC E080                       		asr.l	#8,d0
00015DCE 3140 0012                  		move.w	d0,obVelY(a0)	
00015DD2 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015DD6                            ; ---------------------------------------------------------------------------
00015DD6                             
00015DD6                            SCDPeelout_Charge:				; If still charging the dash...
00015DD6 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015DDA 3401                       		move.w	d1,d2
00015DDC D241                       		add.w	d1,d1
00015DDE 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015DE2 6700                       		beq.s	@noshoes
00015DE4 E242                       		asr.w	#1,d2
00015DE6 9242                       		sub.w	d2,d1
00015DE8                            
00015DE8                            @noshoes:
00015DE8 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015DEE B268 0020                  		cmp.w	obInertia(a0),d1
00015DF2 6E00                       		bgt.s	@inctimer
00015DF4 3141 0020                  		move.w	d1,obInertia(a0)
00015DF8                            
00015DF8                            @inctimer:
00015DF8 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015DFC 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015E02 6500                       		bcs.s	SCDPeelout_ResetScr
00015E04 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015E0A 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015E10                            		
00015E10                            SCDPeelout_Stop_Sound:
00015E10 303C 00D4                  		move.w	#$D4,d0
00015E14 4EB9 0000 12A0             		jsr		(PlaySound_Special).l
00015E1A                            	;	sfx 	sfx_PeeloutStop
00015E1A 4268 0020                  		clr.w	obInertia(a0)
00015E1E                            
00015E1E                            SCDPeelout_ResetScr:
00015E1E 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015E20 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015E26 6700                       		beq.s	@finish
00015E28 6400                       		bcc.s	@skip
00015E2A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015E2E                             
00015E2E                            	@skip:
00015E2E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015E32                             
00015E32                            	@finish:
00015E32 6100 0000                  		bsr.w	Sonic_LevelBound
00015E36 6100 0000                  		bsr.w	Sonic_AnglePos
00015E3A 4E75                       		rts
00015E3C                            		
00015E3C                            		
00015E3C                            		include "_incObj\Sonic Spindash.asm"
00015E3C                            ; ---------------------------------------------------------------------------
00015E3C                            ; Subroutine to make Sonic perform a spindash
00015E3C                            ; ---------------------------------------------------------------------------
00015E3C                             
00015E3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E3C                             
00015E3C                             
00015E3C                            Sonic_SpinDash:
00015E3C 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015E40 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015E42 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015E48 6600                       		bne.s	locret2_1AC8C		; if not, return
00015E4A 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015E4E 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015E52 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015E56 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015E5C 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015E60 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play spin sound
00015E66 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015E68 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015E6E 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015E74                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015E74                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015E74 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015E7A                            						; the smoke/dust object
00015E7A                            loc2_1AC84:
00015E7A 6100 0000                  		bsr.w	Sonic_LevelBound
00015E7E 6100 0000                  		bsr.w	Sonic_AnglePos
00015E82                            
00015E82                            locret2_1AC8C:
00015E82 4E75                       		rts	
00015E84                            ; ---------------------------------------------------------------------------
00015E84                            
00015E84                            loc2_1AC8E:	
00015E84 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015E8A 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015E8E 0800 0001                  		btst	#1,d0			; check down button
00015E92 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015E96 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015E9C 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015EA2 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015EA8 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015EAC 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015EB2 7000                       		moveq	#0,d0
00015EB4 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015EB8 D040                       		add.w	d0,d0			; double it
00015EBA 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015EC0 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015EC4 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015EC8 D040                       		add.w	d0,d0			; double it
00015ECA 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015ECE 4440                       		neg.w	d0			; negate it
00015ED0 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015ED4 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015ED8 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015EDE 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015EE0 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015EE4                            
00015EE4                            loc2_1ACF4:
00015EE4 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015EEA 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015EF0 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015EF4 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play it!
00015EFA 1028 0026                  		move.b	obAngle(a0),d0
00015EFE 4EB9 0000 3A82             		jsr	(CalcSine).l
00015F04 C3E8 0020                  		muls.w	obInertia(a0),d1
00015F08 E081                       		asr.l	#8,d1
00015F0A 3141 0010                  		move.w	d1,obVelX(a0)
00015F0E C1E8 0020                  		muls.w	obInertia(a0),d0
00015F12 E080                       		asr.l	#8,d0
00015F14 3140 0012                  		move.w	d0,obVelY(a0)
00015F18                            	
00015F18 6000                       		bra.s	loc2_1AD78
00015F1A                            ; ===========================================================================
00015F1A                            Dash_Speeds:
00015F1A 0600                       		dc.w  $600		; 0
00015F1C 0680                       		dc.w  $680		; 1
00015F1E 0700                       		dc.w  $700		; 2
00015F20 0780                       		dc.w  $780		; 3
00015F22 0800                       		dc.w  $800		; 4
00015F24 0880                       		dc.w  $880		; 5
00015F26 0900                       		dc.w  $900		; 6
00015F28 0980                       		dc.w  $980		; 7
00015F2A 0A00                       		dc.w  $A00		; 8
00015F2C                            ; ===========================================================================
00015F2C                            
00015F2C                            loc2_1AD30:				; If still charging the dash...
00015F2C 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015F30 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015F32 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015F36 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015F38 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015F3C 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015F3E 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015F44                            
00015F44                            loc2_1AD48:
00015F44 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015F48 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015F4C 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015F50 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015F56 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015F5A 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015F60 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play charge sound
00015F66 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015F6C 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015F72 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015F74 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015F7A                            
00015F7A                            loc2_1AD78:
00015F7A 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015F7C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015F82 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015F84 6400                       		bcc.s	loc2_1AD88
00015F86 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015F8A                            
00015F8A                            loc2_1AD88:
00015F8A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015F8E                            
00015F8E                            loc2_1AD8C:
00015F8E 6100 0000                  		bsr.w	Sonic_LevelBound
00015F92 6100 0000                  		bsr.w	Sonic_AnglePos
00015F96                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015F96 4E75                       		rts
00015F98                            ; End of subroutine Sonic_SpinDash
00015F98                            ; End of subroutine Sonic_SpinDash
00015F98                            
00015F98                            Sonic_AirRoll:
00015F98 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015F9E 6600                               bne.s   AirRoll_Return   ; if not, return
00015FA0                            
00015FA0                            AirRoll_CheckBtn:
00015FA0 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015FA4 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015FA8 6700                               beq.s	AirRoll_Return
00015FAA 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015FB0                                   ; move.w	#$BC,d0
00015FB0                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015FB0                            
00015FB0                            AirRoll_Return:
00015FB0 4E75                               rts
00015FB2                            ; ===========================================================================
00015FB2                            ; ---------------------------------------------------------------------------
00015FB2                            ; Unused subroutine to squash Sonic
00015FB2                            ; ---------------------------------------------------------------------------
00015FB2 1028 0026                  		move.b	obAngle(a0),d0
00015FB6 0600 0020                  		addi.b	#$20,d0
00015FBA 0200 00C0                  		andi.b	#$C0,d0
00015FBE 6600                       		bne.s	locret_13302
00015FC0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015FC4 4A41                       		tst.w	d1
00015FC6 6A00                       		bpl.s	locret_13302
00015FC8 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015FCE 317C 0000 0010             		move.w	#0,obVelX(a0)
00015FD4 317C 0000 0012             		move.w	#0,obVelY(a0)
00015FDA 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015FE0                            
00015FE0                            locret_13302:
00015FE0 4E75                       		rts		
00015FE2                            		include	"_incObj\Sonic LevelBound.asm"
00015FE2                            ; ---------------------------------------------------------------------------
00015FE2                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015FE2                            ; ---------------------------------------------------------------------------
00015FE2                            
00015FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FE2                            
00015FE2                            
00015FE2                            Sonic_LevelBound:
00015FE2 2228 0008                  		move.l	obX(a0),d1
00015FE6 3028 0010                  		move.w	obVelX(a0),d0
00015FEA 48C0                       		ext.l	d0
00015FEC E180                       		asl.l	#8,d0
00015FEE D280                       		add.l	d0,d1
00015FF0 4841                       		swap	d1
00015FF2 3038 F728                  		move.w	(v_limitleft2).w,d0
00015FF6 0640 0010                  		addi.w	#$10,d0
00015FFA B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015FFC 6200                       		bhi.s	@sides		; if yes, branch
00015FFE 3038 F72A                  		move.w	(v_limitright2).w,d0
00016002 0640 0128                  		addi.w	#$128,d0
00016006 4A38 F7AA                  		tst.b	(f_lockscreen).w
0001600A 6600                       		bne.s	@screenlocked
0001600C 0640 0040                  		addi.w	#$40,d0
00016010                            
00016010                            	@screenlocked:
00016010 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00016012 6300                       		bls.s	@sides		; if yes, branch
00016014                            
00016014                            	@chkbottom:
00016014 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016018 0640 00E0                  		addi.w	#$E0,d0
0001601C B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00016020 6D00                       		blt.s	@bottom		; if yes, branch
00016022 4E75                       		rts	
00016024                            ; ===========================================================================
00016024                            
00016024                            @bottom:
00016024 3038 F726                  		move.w (v_limitbtm1).w,d0 
00016028 3238 F72E                  		move.w (v_limitbtm2).w,d1 
0001602C B240                       		cmp.w d0,d1 ; screen still scrolling down? 
0001602E 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00016030 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level SBZ2 ?
00016036 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
0001603A 0C78 1B00 D008             		cmpi.w	#$1B00,(v_player+obX).w
00016040 6500 0000                  		bcs.w	Kill_transport
00016044 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00016048 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
0001604E 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00016054 4E75                       		rts	
00016056                            @dontkill: 
00016056 4E75                       		rts
00016058                            ; ===========================================================================
00016058                            
00016058                            @sides:
00016058 3140 0008                  		move.w	d0,obX(a0)
0001605C 317C 0000 000A             		move.w	#0,obX+2(a0)
00016062 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00016068 317C 0000 0020             		move.w	#0,obInertia(a0)
0001606E 60A4                       		bra.s	@chkbottom
00016070                            
00016070                            Kill_transport: 
00016070 4EF9 0000 0000                     	jmp        (KillSonic).l
00016076                            
00016076                            ; End of function Sonic_LevelBound
00016076                            ; End of function Sonic_LevelBound
00016076                            		include	"_incObj\Sonic Roll.asm"
00016076                            ; ---------------------------------------------------------------------------
00016076                            ; Subroutine allowing Sonic to roll when he's moving
00016076                            ; ---------------------------------------------------------------------------
00016076                            
00016076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016076                            
00016076                            
00016076                            Sonic_Roll:
00016076 4A38 F7CA                  		tst.b	(f_jumponly).w
0001607A 6600                       		bne.s	@noroll
0001607C 3028 0020                  		move.w	obInertia(a0),d0
00016080 6A00                       		bpl.s	@ispositive
00016082 4440                       		neg.w	d0
00016084                            
00016084                            	@ispositive:
00016084 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00016088 6500                       		bcs.s	@noroll		; if not, branch
0001608A 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001608E 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00016092 6600                       		bne.s	@noroll		; if yes, branch
00016094 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
0001609A 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
0001609C                            
0001609C                            	@noroll:
0001609C 4E75                       		rts	
0001609E                            ; ===========================================================================
0001609E                            
0001609E                            Sonic_ChkRoll:
0001609E 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
000160A4 6700                       		beq.s	@roll		; if not, branch
000160A6 4E75                       		rts	
000160A8                            ; ===========================================================================
000160A8                            
000160A8                            @roll:
000160A8 08E8 0002 0022             		bset	#2,obStatus(a0)
000160AE 117C 000E 0016             		move.b	#$E,obHeight(a0)
000160B4 117C 0007 0017             		move.b	#7,obWidth(a0)
000160BA 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
000160C0 5A68 000C                  		addq.w	#5,obY(a0)
000160CE 4A68 0020                  		tst.w	obInertia(a0)
000160D2 6600                       		bne.s	@ismoving
000160D4 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
000160DA                            
000160DA                            	@ismoving:
000160DA 4E75                       		rts	
000160DC                            ; End of function Sonic_Roll
000160DC                            ; End of function Sonic_Roll
000160DC                            		include	"_incObj\Sonic Jump.asm"
000160DC                            ; ---------------------------------------------------------------------------
000160DC                            ; Subroutine allowing Sonic to jump
000160DC                            ; ---------------------------------------------------------------------------
000160DC                            
000160DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160DC                            
000160DC                            
000160DC                            Sonic_Jump:
000160DC 1038 F603                  		move.b	(v_jpadpress2).w,d0
000160E0 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
000160E4 6700 0000                  		beq.w	locret_1348E	; if not, branch
000160E8 7000                       		moveq	#0,d0
000160EA 1028 0026                  		move.b	obAngle(a0),d0
000160EE 0600 0080                  		addi.b	#$80,d0
000160F2 6100 0000                  		bsr.w	sub_14D48
000160F6 0C41 0006                  		cmpi.w	#6,d1
000160FA 6D00 0000                  		blt.w	locret_1348E
000160FE 343C 0680                  		move.w	#$680,d2
00016102 0828 0006 0022             		btst	#6,obStatus(a0)
00016108 6700                       		beq.s	loc_1341C
0001610A 343C 0380                  		move.w	#$380,d2
0001610E                            
0001610E                            loc_1341C:
0001610E 7000                       		moveq	#0,d0
00016110 1028 0026                  		move.b	obAngle(a0),d0
00016114 0400 0040                  		subi.b	#$40,d0
00016118 4EB9 0000 3A82             		jsr	(CalcSine).l
0001611E C3C2                       		muls.w	d2,d1
00016120 E081                       		asr.l	#8,d1
00016122 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00016126 C1C2                       		muls.w	d2,d0
00016128 E080                       		asr.l	#8,d0
0001612A D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
0001612E 08E8 0001 0022             		bset	#1,obStatus(a0)
00016134 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001613A 588F                       		addq.l	#4,sp
0001613C 117C 0001 003C             		move.b	#1,$3C(a0)
00016142 4228 0038                  		clr.b	$38(a0)
00016150 117C 0013 0016             		move.b	#$13,obHeight(a0)
00016156 117C 0009 0017             		move.b	#9,obWidth(a0)
0001615C 117C 000E 0016             		move.b	#$E,obHeight(a0)
00016162 117C 0007 0017             		move.b	#7,obWidth(a0)
00016168                            Result_Check:
00016168 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
0001616C 6700                       		beq.s   NormalJump ; If not, branch
0001616E 117C 0013 001C             		move.b  #$13,$1C(a0) ; Play the victory animation
00016174 6000                       		bra.s   cont ; Continue
00016176                            NormalJump:
00016176 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
0001617C                            cont:
0001617C 08E8 0002 0022             		bset	#2,obStatus(a0)
00016182 5A68 000C                  		addq.w	#5,obY(a0)
00016186                            
00016186                            locret_1348E:
00016186 4E75                       		rts	
00016188                            ; ===========================================================================
00016188                            
00016188                            ; End of function Sonic_Jump
00016188                            ; End of function Sonic_Jump
00016188                            		include	"_incObj\Sonic JumpHeight.asm"
00016188                            ; ---------------------------------------------------------------------------
00016188                            ; Subroutine controlling Sonic's jump height/duration
00016188                            ; ---------------------------------------------------------------------------
00016188                            
00016188                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016188                            
00016188                            
00016188                            Sonic_JumpHeight:
00016188 4A28 003C                  		tst.b	$3C(a0)
0001618C 6700                       		beq.s	loc_134C4
0001618E 323C FC00                  		move.w	#-$400,d1
00016192 0828 0006 0022             		btst	#6,obStatus(a0)
00016198 6700                       		beq.s	loc_134AE
0001619A 323C FE00                  		move.w	#-$200,d1
0001619E                            
0001619E                            loc_134AE:
0001619E B268 0012                  		cmp.w	obVelY(a0),d1
000161A2 6F00                       		ble.s	locret_134C2
000161A4 1038 F602                  		move.b	(v_jpadhold2).w,d0
000161A8 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
000161AC 6600                       		bne.s	locret_134C2	; if yes, branch
000161AE 3141 0012                  		move.w	d1,obVelY(a0)
000161B2                            
000161B2                            locret_134C2:
000161B2 4E75                       		rts	
000161B4                            ; ===========================================================================
000161B4                            
000161B4                            loc_134C4:
000161B4 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
000161BA 6C00                       		bge.s	locret_134D2
000161BC 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
000161C2                            
000161C2                            locret_134D2:
000161C2 4E75                       		rts	
000161C4                            ; End of function Sonic_JumpHeight
000161C4                            ; End of function Sonic_JumpHeight
000161C4                            		include	"_incObj\Sonic SlopeResist.asm"
000161C4                            ; ---------------------------------------------------------------------------
000161C4                            ; Subroutine to	slow Sonic walking up a	slope
000161C4                            ; ---------------------------------------------------------------------------
000161C4                            
000161C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161C4                            
000161C4                            
000161C4                            Sonic_SlopeResist:
000161C4 1028 0026                  		move.b	obAngle(a0),d0
000161C8 0600 0060                  		addi.b	#$60,d0
000161CC 0C00 00C0                  		cmpi.b	#$C0,d0
000161D0 6400                       		bcc.s	locret_13508
000161D2 1028 0026                  		move.b	obAngle(a0),d0
000161D6 4EB9 0000 3A82             		jsr	(CalcSine).l
000161DC C1FC 0020                  		muls.w	#$20,d0
000161E0 E080                       		asr.l	#8,d0
000161E2 4A68 0020                  		tst.w	obInertia(a0)
000161E6 6700                       		beq.s	locret_13508
000161E8 6B00                       		bmi.s	loc_13504
000161EA 4A40                       		tst.w	d0
000161EC 6700                       		beq.s	locret_13502
000161EE D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
000161F2                            
000161F2                            locret_13502:
000161F2 4E75                       		rts	
000161F4                            ; ===========================================================================
000161F4                            
000161F4                            loc_13504:
000161F4 D168 0020                  		add.w	d0,obInertia(a0)
000161F8                            
000161F8                            locret_13508:
000161F8 4E75                       		rts	
000161FA                            ; End of function Sonic_SlopeResist
000161FA                            ; End of function Sonic_SlopeResist
000161FA                            		include	"_incObj\Sonic RollRepel.asm"
000161FA                            ; ---------------------------------------------------------------------------
000161FA                            ; Subroutine to	push Sonic down	a slope	while he's rolling
000161FA                            ; ---------------------------------------------------------------------------
000161FA                            
000161FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161FA                            
000161FA                            
000161FA                            Sonic_RollRepel:
000161FA 1028 0026                  		move.b	obAngle(a0),d0
000161FE 0600 0060                  		addi.b	#$60,d0
00016202 0C00 00C0                  		cmpi.b	#-$40,d0
00016206 6400                       		bcc.s	locret_13544
00016208 1028 0026                  		move.b	obAngle(a0),d0
0001620C 4EB9 0000 3A82             		jsr	(CalcSine).l
00016212 C1FC 0050                  		muls.w	#$50,d0
00016216 E080                       		asr.l	#8,d0
00016218 4A68 0020                  		tst.w	obInertia(a0)
0001621C 6B00                       		bmi.s	loc_1353A
0001621E 4A40                       		tst.w	d0
00016220 6A00                       		bpl.s	loc_13534
00016222 E480                       		asr.l	#2,d0
00016224                            
00016224                            loc_13534:
00016224 D168 0020                  		add.w	d0,obInertia(a0)
00016228 4E75                       		rts	
0001622A                            ; ===========================================================================
0001622A                            
0001622A                            loc_1353A:
0001622A 4A40                       		tst.w	d0
0001622C 6B00                       		bmi.s	loc_13540
0001622E E480                       		asr.l	#2,d0
00016230                            
00016230                            loc_13540:
00016230 D168 0020                  		add.w	d0,obInertia(a0)
00016234                            
00016234                            locret_13544:
00016234 4E75                       		rts	
00016236                            ; End of function Sonic_RollRepel
00016236                            ; End of function Sonic_RollRepel
00016236                            		include	"_incObj\Sonic SlopeRepel.asm"
00016236                            ; ---------------------------------------------------------------------------
00016236                            ; Subroutine to	push Sonic down	a slope
00016236                            ; ---------------------------------------------------------------------------
00016236                            
00016236                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016236                            
00016236                            
00016236                            Sonic_SlopeRepel:
00016236 4E71                       		nop	
00016238 4A28 0038                  		tst.b	$38(a0)
0001623C 6600                       		bne.s	locret_13580
0001623E 4A68 003E                  		tst.w	$3E(a0)
00016242 6600                       		bne.s	loc_13582
00016244 1028 0026                  		move.b	obAngle(a0),d0
00016248 0600 0020                  		addi.b	#$20,d0
0001624C 0200 00C0                  		andi.b	#$C0,d0
00016250 6700                       		beq.s	locret_13580
00016252 3028 0020                  		move.w	obInertia(a0),d0
00016256 6A00                       		bpl.s	loc_1356A
00016258 4440                       		neg.w	d0
0001625A                            
0001625A                            loc_1356A:
0001625A 0C40 0280                  		cmpi.w	#$280,d0
0001625E 6400                       		bcc.s	locret_13580
00016260 4268 0020                  		clr.w	obInertia(a0)
00016264 08E8 0001 0022             		bset	#1,obStatus(a0)
0001626A 317C 001E 003E             		move.w	#$1E,$3E(a0)
00016270                            
00016270                            locret_13580:
00016270 4E75                       		rts	
00016272                            ; ===========================================================================
00016272                            
00016272                            loc_13582:
00016272 5368 003E                  		subq.w	#1,$3E(a0)
00016276 4E75                       		rts	
00016278                            ; End of function Sonic_SlopeRepel
00016278                            ; End of function Sonic_SlopeRepel
00016278                            		include	"_incObj\Sonic JumpAngle.asm"
00016278                            ; ---------------------------------------------------------------------------
00016278                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00016278                            ; ---------------------------------------------------------------------------
00016278                            
00016278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016278                            
00016278                            
00016278                            Sonic_JumpAngle:
00016278 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
0001627C 6700                       		beq.s	locret_135A2	; if already 0,	branch
0001627E 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00016280                            
00016280 5400                       		addq.b	#2,d0		; increase angle
00016282 6400                       		bcc.s	loc_13596
00016284 7000                       		moveq	#0,d0
00016286                            
00016286                            loc_13596:
00016286 6000                       		bra.s	loc_1359E
00016288                            ; ===========================================================================
00016288                            
00016288                            loc_13598:
00016288 5500                       		subq.b	#2,d0		; decrease angle
0001628A 6400                       		bcc.s	loc_1359E
0001628C 7000                       		moveq	#0,d0
0001628E                            
0001628E                            loc_1359E:
0001628E 1140 0026                  		move.b	d0,obAngle(a0)
00016292                            
00016292                            locret_135A2:
00016292 4E75                       		rts	
00016294                            ; End of function Sonic_JumpAngle
00016294                            ; End of function Sonic_JumpAngle
00016294                            		include	"_incObj\Sonic Floor.asm"
00016294                            ; ---------------------------------------------------------------------------
00016294                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00016294                            ; ---------------------------------------------------------------------------
00016294                            
00016294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016294                            
00016294                            
00016294                            Sonic_Floor:
00016294 3228 0010                  		move.w	obVelX(a0),d1
00016298 3428 0012                  		move.w	obVelY(a0),d2
0001629C 4EB9 0000 3D14             		jsr	(CalcAngle).l
000162A2 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000162A6 0400 0020                  		subi.b	#$20,d0
000162AA 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000162AE 0200 00C0                  		andi.b	#$C0,d0
000162B2 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000162B6 0C00 0040                  		cmpi.b	#$40,d0
000162BA 6700 0000                  		beq.w	loc_13680
000162BE 0C00 0080                  		cmpi.b	#$80,d0
000162C2 6700 0000                  		beq.w	loc_136E2
000162C6 0C00 00C0                  		cmpi.b	#$C0,d0
000162CA 6700 0000                  		beq.w	loc_1373E
000162CE 6100 0000                  		bsr.w	Sonic_HitWall
000162D2 4A41                       		tst.w	d1
000162D4 6A00                       		bpl.s	loc_135F0
000162D6 9368 0008                  		sub.w	d1,obX(a0)
000162DA 317C 0000 0010             		move.w	#0,obVelX(a0)
000162E0                            
000162E0                            loc_135F0:
000162E0 6100 0000                  		bsr.w	sub_14EB4
000162E4 4A41                       		tst.w	d1
000162E6 6A00                       		bpl.s	loc_13602
000162E8 D368 0008                  		add.w	d1,obX(a0)
000162EC 317C 0000 0010             		move.w	#0,obVelX(a0)
000162F2                            
000162F2                            loc_13602:
000162F2 6100 0000                  		bsr.w	Sonic_HitFloor
000162F6 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000162FA 4A41                       		tst.w	d1
000162FC 6A00                       		bpl.s	locret_1367E
000162FE 1428 0012                  		move.b	obVelY(a0),d2
00016302 5002                       		addq.b	#8,d2
00016304 4402                       		neg.b	d2
00016306 B202                       		cmp.b	d2,d1
00016308 6C00                       		bge.s	loc_1361E
0001630A B002                       		cmp.b	d2,d0
0001630C 6D00                       		blt.s	locret_1367E
0001630E                            
0001630E                            loc_1361E:
0001630E D368 000C                  		add.w	d1,obY(a0)
00016312 1143 0026                  		move.b	d3,obAngle(a0)
00016316 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001631A 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016320 1003                       		move.b	d3,d0
00016322 0600 0020                  		addi.b	#$20,d0
00016326 0200 0040                  		andi.b	#$40,d0
0001632A 6600                       		bne.s	loc_1365C
0001632C 1003                       		move.b	d3,d0
0001632E 0600 0010                  		addi.b	#$10,d0
00016332 0200 0020                  		andi.b	#$20,d0
00016336 6700                       		beq.s	loc_1364E
00016338 E0E8 0012                  		asr	obVelY(a0)
0001633C 6000                       		bra.s	loc_13670
0001633E                            ; ===========================================================================
0001633E                            
0001633E                            loc_1364E:
0001633E 317C 0000 0012             		move.w	#0,obVelY(a0)
00016344 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001634A 4E75                       		rts	
0001634C                            ; ===========================================================================
0001634C                            
0001634C                            loc_1365C:
0001634C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016352 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
00016358 6F00                       		ble.s	loc_13670
0001635A 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
00016360                            
00016360                            loc_13670:
00016360 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016366 4A03                       		tst.b	d3
00016368 6A00                       		bpl.s	locret_1367E
0001636A 4468 0020                  		neg.w	obInertia(a0)
0001636E                            
0001636E                            locret_1367E:
0001636E 4E75                       		rts	
00016370                            ; ===========================================================================
00016370                            
00016370                            loc_13680:
00016370 6100 0000                  		bsr.w	Sonic_HitWall
00016374 4A41                       		tst.w	d1
00016376 6A00                       		bpl.s	loc_1369A
00016378 9368 0008                  		sub.w	d1,obX(a0)
0001637C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016382 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016388 4E75                       		rts	
0001638A                            ; ===========================================================================
0001638A                            
0001638A                            loc_1369A:
0001638A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001638E 4A41                       		tst.w	d1
00016390 6A00                       		bpl.s	loc_136B4
00016392 9368 000C                  		sub.w	d1,obY(a0)
00016396 4A68 0012                  		tst.w	obVelY(a0)
0001639A 6A00                       		bpl.s	locret_136B2
0001639C 317C 0000 0012             		move.w	#0,obVelY(a0)
000163A2                            
000163A2                            locret_136B2:
000163A2 4E75                       		rts	
000163A4                            ; ===========================================================================
000163A4                            
000163A4                            loc_136B4:
000163A4 4A68 0012                  		tst.w	obVelY(a0)
000163A8 6B00                       		bmi.s	locret_136E0
000163AA 6100 0000                  		bsr.w	Sonic_HitFloor
000163AE 4A41                       		tst.w	d1
000163B0 6A00                       		bpl.s	locret_136E0
000163B2 D368 000C                  		add.w	d1,obY(a0)
000163B6 1143 0026                  		move.b	d3,obAngle(a0)
000163BA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000163BE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000163C4 317C 0000 0012             		move.w	#0,obVelY(a0)
000163CA 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000163D0                            
000163D0                            locret_136E0:
000163D0 4E75                       		rts	
000163D2                            ; ===========================================================================
000163D2                            
000163D2                            loc_136E2:
000163D2 6100 0000                  		bsr.w	Sonic_HitWall
000163D6 4A41                       		tst.w	d1
000163D8 6A00                       		bpl.s	loc_136F4
000163DA 9368 0008                  		sub.w	d1,obX(a0)
000163DE 317C 0000 0010             		move.w	#0,obVelX(a0)
000163E4                            
000163E4                            loc_136F4:
000163E4 6100 0000                  		bsr.w	sub_14EB4
000163E8 4A41                       		tst.w	d1
000163EA 6A00                       		bpl.s	loc_13706
000163EC D368 0008                  		add.w	d1,obX(a0)
000163F0 317C 0000 0010             		move.w	#0,obVelX(a0)
000163F6                            
000163F6                            loc_13706:
000163F6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000163FA 4A41                       		tst.w	d1
000163FC 6A00                       		bpl.s	locret_1373C
000163FE 9368 000C                  		sub.w	d1,obY(a0)
00016402 1003                       		move.b	d3,d0
00016404 0600 0020                  		addi.b	#$20,d0
00016408 0200 0040                  		andi.b	#$40,d0
0001640C 6600                       		bne.s	loc_13726
0001640E 317C 0000 0012             		move.w	#0,obVelY(a0)
00016414 4E75                       		rts	
00016416                            ; ===========================================================================
00016416                            
00016416                            loc_13726:
00016416 1143 0026                  		move.b	d3,obAngle(a0)
0001641A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001641E 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016424 4A03                       		tst.b	d3
00016426 6A00                       		bpl.s	locret_1373C
00016428 4468 0020                  		neg.w	obInertia(a0)
0001642C                            
0001642C                            locret_1373C:
0001642C 4E75                       		rts	
0001642E                            ; ===========================================================================
0001642E                            
0001642E                            loc_1373E:
0001642E 6100 0000                  		bsr.w	sub_14EB4
00016432 4A41                       		tst.w	d1
00016434 6A00                       		bpl.s	loc_13758
00016436 D368 0008                  		add.w	d1,obX(a0)
0001643A 317C 0000 0010             		move.w	#0,obVelX(a0)
00016440 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016446 4E75                       		rts	
00016448                            ; ===========================================================================
00016448                            
00016448                            loc_13758:
00016448 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001644C 4A41                       		tst.w	d1
0001644E 6A00                       		bpl.s	loc_13772
00016450 9368 000C                  		sub.w	d1,obY(a0)
00016454 4A68 0012                  		tst.w	obVelY(a0)
00016458 6A00                       		bpl.s	locret_13770
0001645A 317C 0000 0012             		move.w	#0,obVelY(a0)
00016460                            
00016460                            locret_13770:
00016460 4E75                       		rts	
00016462                            ; ===========================================================================
00016462                            
00016462                            loc_13772:
00016462 4A68 0012                  		tst.w	obVelY(a0)
00016466 6B00                       		bmi.s	locret_1379E
00016468 6100 0000                  		bsr.w	Sonic_HitFloor
0001646C 4A41                       		tst.w	d1
0001646E 6A00                       		bpl.s	locret_1379E
00016470 D368 000C                  		add.w	d1,obY(a0)
00016474 1143 0026                  		move.b	d3,obAngle(a0)
00016478 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001647C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016482 317C 0000 0012             		move.w	#0,obVelY(a0)
00016488 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001648E                            
0001648E                            locret_1379E:
0001648E 4E75                       		rts	
00016490                            ; End of function Sonic_Floor
00016490                            ; End of function Sonic_Floor
00016490                            		include	"_incObj\Sonic ResetOnFloor.asm"
00016490                            ; ---------------------------------------------------------------------------
00016490                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00016490                            ; ---------------------------------------------------------------------------
00016490                            
00016490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016490                            
00016490                            
00016490                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
00016490 08A8 0005 0022                     	bclr    #5,$22(a0)
00016496 08A8 0001 0022                     	bclr    #1,$22(a0)
0001649C 0828 0002 0022                     	btst    #2,$22(a0)
000164A2 6700                               	beq.s    loc_137E4
000164A4 08A8 0002 0022             		bclr	#2,obStatus(a0)
000164AA 117C 0013 0016             		move.b	#$13,obHeight(a0)
000164B0 117C 0009 0017             		move.b	#9,obWidth(a0)
000164B6 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
000164BC 5B68 000C                  		subq.w	#5,obY(a0)
000164C0                            
000164C0                            loc_137E4:
000164C0 117C 0000 003C             		move.b	#0,$3C(a0)
000164C6 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
000164CC 4E75                       		rts	
000164CE                            ; End of function Sonic_ResetOnFloor
000164CE                            ; End of function Sonic_ResetOnFloor
000164CE                            		include	"_incObj\Sonic (part 2).asm"
000164CE                            ; ---------------------------------------------------------------------------
000164CE                            ; Sonic	when he	gets hurt
000164CE                            ; ---------------------------------------------------------------------------
000164CE                            
000164CE                            Sonic_Hurt:	; Routine 4
000164CE 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
000164D4 0668 0030 0012             		addi.w	#$30,obVelY(a0)
000164DA 0828 0006 0022             		btst	#6,obStatus(a0)
000164E0 6700                       		beq.s	loc_1380C
000164E2 0468 0020 0012             		subi.w	#$20,obVelY(a0)
000164E8                            
000164E8                            loc_1380C:
000164E8 6100 0000                  		bsr.w	Sonic_HurtStop
000164EC 6100 FAF4                  		bsr.w	Sonic_LevelBound
000164F0 6100 F124                  		bsr.w	Sonic_RecordPosition
000164F4 6100 0000                  		bsr.w	Sonic_Animate
000164F8 6100 0000                  		bsr.w	Sonic_LoadGfx
000164FC 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00016502                            
00016502                            ; ---------------------------------------------------------------------------
00016502                            ; Subroutine to	stop Sonic falling after he's been hurt
00016502                            ; ---------------------------------------------------------------------------
00016502                            
00016502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016502                            
00016502                            
00016502                            Sonic_HurtStop:
00016502 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016506 0640 00E0                  		addi.w	#$E0,d0
0001650A                            		;cmp.w	obY(a0),d0
0001650A                            		;bcs.w	KillSonic
0001650A 6100 FD88                  		bsr.w	Sonic_Floor
0001650E 0828 0001 0022             		btst	#1,obStatus(a0)
00016514 6600                       		bne.s	locret_13860
00016516 7000                       		moveq	#0,d0
00016518 3140 0012                  		move.w	d0,obVelY(a0)
0001651C 3140 0010                  		move.w	d0,obVelX(a0)
00016520 3140 0020                  		move.w	d0,obInertia(a0)
00016524 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001652A 5528 0024                  		subq.b	#2,obRoutine(a0)
0001652E 317C 0078 0030             		move.w	#$78,$30(a0)
00016534                            
00016534                            locret_13860:
00016534 4E75                       		rts	
00016536                            ; End of function Sonic_HurtStop
00016536                            
00016536                            ; ---------------------------------------------------------------------------
00016536                            ; Sonic	when he	dies
00016536                            ; ---------------------------------------------------------------------------
00016536                            
00016536                            Sonic_Death:	; Routine 6
00016536 6100 0000                  		bsr.w	GameOver
0001653A 4EB9 0000 F9D6             		jsr	(ObjectFall).l
00016540 6100 F0D4                  		bsr.w	Sonic_RecordPosition
00016544 6100 0000                  		bsr.w	Sonic_Animate
00016548 6100 0000                  		bsr.w	Sonic_LoadGfx
0001654C 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00016552                            
00016552                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016552                            
00016552                            GameOver:
00016552 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016556 0640 0100                  		addi.w	#$100,d0
0001655A B068 000C                  		cmp.w	obY(a0),d0
0001655E 6400 0000                  		bcc.w	locret_13900
00016562 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
00016568 5428 0024                  		addq.b	#2,obRoutine(a0)
0001656C 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00016570 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
00016574 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
00016578 6600                       		bne.s	loc_138D4
0001657A 317C 0000 003A             		move.w	#0,$3A(a0)
00016580 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
00016586 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
0001658C 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
00016592 4238 FE1A                  		clr.b	(f_timeover).w
00016596                            
00016596                            loc_138C2:
000165A0 7003                       		moveq	#3,d0
000165A2 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
000165A8                            		
000165A8                            loc_138C3:
000165B2 7003                       		moveq	#3,d0
000165B4 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
000165BA                            ; ===========================================================================
000165BA                            
000165BA                            loc_138D4:
000165BA 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000165C0 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
000165C4 6700                       		beq.s	locret_13900	; if not, branch
000165C6 317C 0000 003A             		move.w	#0,$3A(a0)
000165CC 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
000165D2 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000165D8 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
000165DE 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
000165E4 60B0                       		bra.s	loc_138C2
000165E6                            		
000165E6                            
000165E6                            ; ===========================================================================
000165E6                            
000165E6                            locret_13900:
000165E6 4E75                       		rts	
000165E8                            ; End of function GameOver
000165E8                            
000165E8                            ; ---------------------------------------------------------------------------
000165E8                            ; Sonic	when the level is restarted
000165E8                            ; ---------------------------------------------------------------------------
000165E8                            
000165E8                            Sonic_ResetLevel:; Routine 8
000165E8 4A68 003A                  		tst.w	$3A(a0)
000165EC 6700                       		beq.s	locret_13914
000165EE 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000165F2 6600                       		bne.s	locret_13914
000165F4 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
000165FA                            
000165FA                            	locret_13914:
000165FA 4E75                       		rts	
000165FA 4E75                       		rts	
000165FC                            		include	"_incObj\Sonic Loops.asm"
000165FC                            ; ---------------------------------------------------------------------------
000165FC                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000165FC                            ; ---------------------------------------------------------------------------
000165FC                            
000165FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165FC                            
000165FC                            
000165FC                            Sonic_Loops:
000165FC 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
00016602 6700                       		beq.s	@isstarlight	; if yes, branch
00016604 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
00016608 6600 0000                  		bne.w	@noloops	; if not, branch
0001660C                            
0001660C                            	@isstarlight:
0001660C 3028 000C                  		move.w	obY(a0),d0
00016610 E248                       		lsr.w	#1,d0
00016612 0240 0380                  		andi.w	#$380,d0
00016616 1228 0008                  		move.b	obX(a0),d1
0001661A 0241 007F                  		andi.w	#$7F,d1
0001661E D041                       		add.w	d1,d0
00016620 43F8 A400                  		lea	(v_lvllayout).w,a1
00016624 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00016628                            
00016628 B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
0001662C 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016630 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
00016634 6700 FA68                  		beq.w	Sonic_ChkRoll
00016638                            
00016638 B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
0001663C 6700                       		beq.s	@chkifleft	; if yes, branch
0001663E B238 F7AD                  		cmp.b	(v_256loop2).w,d1
00016642 6700                       		beq.s	@chkifinair
00016644 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
0001664A 4E75                       		rts	
0001664C                            ; ===========================================================================
0001664C                            
0001664C                            @chkifinair:
0001664C 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016652 6700                       		beq.s	@chkifleft	; if not, branch
00016654                            
00016654 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001665A 4E75                       		rts	
0001665C                            ; ===========================================================================
0001665C                            
0001665C                            @chkifleft:
0001665C 3428 0008                  		move.w	obX(a0),d2
00016660 0C02 002C                  		cmpi.b	#$2C,d2
00016664 6400                       		bcc.s	@chkifright
00016666                            
00016666 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001666C 4E75                       		rts	
0001666E                            ; ===========================================================================
0001666E                            
0001666E                            @chkifright:
0001666E 0C02 00E0                  		cmpi.b	#$E0,d2
00016672 6500                       		bcs.s	@chkangle1
00016674                            
00016674 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
0001667A 4E75                       		rts	
0001667C                            ; ===========================================================================
0001667C                            
0001667C                            @chkangle1:
0001667C 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
00016682 6600                       		bne.s	@chkangle2	; if yes, branch
00016684                            
00016684 1228 0026                  		move.b	obAngle(a0),d1
00016688 6700                       		beq.s	@done
0001668A 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
0001668E 6200                       		bhi.s	@done		; if yes, branch
00016690 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016696 4E75                       		rts	
00016698                            ; ===========================================================================
00016698                            
00016698                            @chkangle2:
00016698 1228 0026                  		move.b	obAngle(a0),d1
0001669C 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000166A0 6300                       		bls.s	@done		; if yes, branch
000166A2 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000166A8                            
000166A8                            @noloops:
000166A8                            @done:
000166A8 4E75                       		rts	
000166AA                            ; End of function Sonic_Loops
000166AA                            ; End of function Sonic_Loops
000166AA                            		include	"_incObj\Sonic Animate.asm"
000166AA                            ; ---------------------------------------------------------------------------
000166AA                            ; Subroutine to	animate	Sonic's sprites
000166AA                            ; ---------------------------------------------------------------------------
000166AA                            
000166AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166AA                            
000166AA                            
000166AA                            Sonic_Animate:				; XREF: Obj01_Control; et al
000166AA 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000166B0 7000                       		moveq	#0,d0
000166B2 1028 001C                  		move.b	obAnim(a0),d0
000166B6 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
000166BA 6700                       		beq.s	@do		; if not, branch
000166BC 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
000166C0 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
000166C4 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
000166C8                            		
000166C8 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
000166CE                            
000166CE                            	@do:
000166CE D040                       		add.w	d0,d0
000166D0 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000166D4 1011                       		move.b	(a1),d0
000166D6 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
000166D8 1228 0022                  		move.b	obStatus(a0),d1
000166DC 0201 0001                  		andi.b	#1,d1
000166E0 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000166E6 8328 0001                  		or.b	d1,obRender(a0)
000166EA 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
000166EE 6A00                       		bpl.s	@delay		; if time remains, branch
000166F0 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
000166F4                            
000166F4                            @loadframe:
000166F4 7200                       		moveq	#0,d1
000166F6 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
000166FA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000166FE 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016702 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
00016706                            
00016706                            	@next:
00016706 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0001670A 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0001670E                            
0001670E                            	@delay:
0001670E 4E75                       		rts	
00016710                            ; ===========================================================================
00016710                            
00016710                            @end_FF:
00016710 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016712 6600                       		bne.s	@end_FE		; if not, branch
00016714 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
00016718 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001671C 60E8                       		bra.s	@next
0001671E                            ; ===========================================================================
0001671E                            
0001671E                            @end_FE:
0001671E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016720 6600                       		bne.s	@end_FD		; if not, branch
00016722 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016726 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0001672A 9200                       		sub.b	d0,d1
0001672C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016730 60D4                       		bra.s	@next
00016732                            ; ===========================================================================
00016732                            
00016732                            @end_FD:
00016732 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00016734 6600                       		bne.s	@end		; if not, branch
00016736 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0001673C                            
0001673C                            	@end:
0001673C 4E75                       		rts	
0001673E                            ; ===========================================================================
0001673E                            
0001673E                            @walkrunroll:
0001673E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016742 6ACA                       		bpl.s	@delay		; if time remains, branch
00016744 5200                       		addq.b	#1,d0		; is animation walking/running?
00016746 6600 0000                  		bne.w	@rolljump	; if not, branch
0001674A 7200                       		moveq	#0,d1
0001674C 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016750 6B00                       		bmi.s	@ble 			; better handling of angles
00016752 6700                       		beq.s	@ble
00016754 5300                       		subq.b	#1,d0
00016756                            
00016756                            	@ble:																
00016756 1428 0022                  		move.b	obStatus(a0),d2
0001675A 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001675E 6600                       		bne.s	@flip		; if yes, branch
00016760 4600                       		not.b	d0		; reverse angle
00016762                            
00016762                            	@flip:
00016762 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00016766 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
00016768 7203                       		moveq	#3,d1
0001676A                            
0001676A                            	@noinvert:
0001676A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016770 B302                       		eor.b	d1,d2
00016772 8528 0001                  		or.b	d2,obRender(a0)
00016776 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
0001677C 6600 0000                  		bne.w	@push		; if yes, branch
00016780                            
00016780 E808                       		lsr.b	#4,d0		; divide angle by $10
00016782 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00016786 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001678A 6A00                       		bpl.s	@nomodspeed
0001678C 4442                       		neg.w	d2		; modulus speed
0001678E                            
0001678E                            	@nomodspeed:
0001678E 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
00016794 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
00016798 6400                       		bcc.s	@maxrunning	; if yes, branch
0001679A                            
0001679A 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000167A0 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000167A4 6400                       		bcc.s	@running	; if yes, branch
000167A6                            
000167A6 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000167AC                            
000167AC                            	@running:
000167AC D000                       		add.b	d0,d0
000167AE D000                       		add.b	d0,d0
000167B0 1600                       		move.b	d0,d3
000167B2 4442                       		neg.w	d2
000167B4 0642 0780                  		addi.w	#$780,d2
000167B8 6A00                       		bpl.s	@belowmax
000167BA 7400                       		moveq	#0,d2		; max animation speed
000167BC 6000                       		bra.s	@belowmax
000167BE                            
000167BE                            	@maxrunning:
000167BE D000                       		add.b d0,d0
000167C0 1600                       		move.b d0,d3
000167C2 4442                       		neg.w d2
000167C4 0642 0800                  		addi.w #$800, d2
000167C8 6A00                       		bpl.s @belowmax
000167CA 7400                       		moveq #0, d2 
000167CC                            
000167CC                            	@belowmax:
000167CC E04A                       		lsr.w	#8,d2
000167CE 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000167D2 6100 FF20                  		bsr.w	@loadframe
000167D6 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
000167DA 4E75                       		rts	
000167DC                            ; ===========================================================================
000167DC                            
000167DC                            @rolljump:
000167DC 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000167DE 6600                       		bne.s	@push		; if not, branch
000167E0 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000167E4 6A00                       		bpl.s	@nomodspeed2
000167E6 4442                       		neg.w	d2
000167E8                            
000167E8                            	@nomodspeed2:
000167E8 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000167EE 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000167F2 6400                       		bcc.s	@rollfast	; if yes, branch
000167F4 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000167FA                            
000167FA                            	@rollfast:
000167FA 4442                       		neg.w	d2
000167FC 0642 0400                  		addi.w	#$400,d2
00016800 6A00                       		bpl.s	@belowmax2
00016802 7400                       		moveq	#0,d2
00016804                            
00016804                            	@belowmax2:
00016804 E04A                       		lsr.w	#8,d2
00016806 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001680A 1228 0022                  		move.b	obStatus(a0),d1
0001680E 0201 0001                  		andi.b	#1,d1
00016812 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016818 8328 0001                  		or.b	d1,obRender(a0)
0001681C 6000 FED6                  		bra.w	@loadframe
00016820                            ; ===========================================================================
00016820                            
00016820                            @push:
00016820 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016824 6B00                       		bmi.s	@negspeed
00016826 4442                       		neg.w	d2
00016828                            
00016828                            	@negspeed:
00016828 0642 0800                  		addi.w	#$800,d2
0001682C 6A00                       		bpl.s	@belowmax3	
0001682E 7400                       		moveq	#0,d2
00016830                            
00016830                            	@belowmax3:
00016830 EC4A                       		lsr.w	#6,d2
00016832 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016836 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001683C 1228 0022                  		move.b	obStatus(a0),d1
00016840 0201 0001                  		andi.b	#1,d1
00016844 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001684A 8328 0001                  		or.b	d1,obRender(a0)
0001684E 6000 FEA4                  		bra.w	@loadframe
00016852                            
00016852                            ; End of function Sonic_Animate
00016852                            ; End of function Sonic_Animate
00016852                            		include	"_anim\Sonic.asm"
00016852                            ; ---------------------------------------------------------------------------
00016852                            ; Animation script - Sonic
00016852                            ; ---------------------------------------------------------------------------
00016852                            Ani_Sonic:
00016852                            
00016852 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
00016854 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016856 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
00016858 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
0001685A 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
0001685C 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
0001685E 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00016860 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
00016862 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
00016864 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
00016866 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
00016868 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
0001686A 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
0001686C 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
0001686E 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
00016870 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
00016872 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
00016874 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
00016876 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
00016878 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
0001687A 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
0001687C 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
0001687E 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
00016880 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
00016882 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
00016884 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
00016886 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
00016888 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
0001688A 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
0001688C 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
0001688E 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
00016890 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
00016892 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
00016894 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
00016896 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
00016898 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
0001689A 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
0001689C 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
0001689E                            
0001689E FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
000168AC 00                         		even
000168AC FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
000168BA 00                         		even
000168BA FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
000168C1 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
000168C8 00                         		even
000168C8 FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
000168CF 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
000168D6 00                         		even
000168D6 FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
000168E4 00                         		even
000168E4                            SonAni_Wait:	
000168E4 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
000168F3 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016902 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016911 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016920 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
0001692F 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
0001693E 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
0001694D 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
0001695C 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
00016964                            		even
00016964 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
0001696A                            		even
0001696A 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016970 00                         		even
00016970 026F 7071 FE01             SonAni_Duck:	dc.b $2, fr_duck3, fr_duck2, fr_duck, afBack, 1
00016976                            		even
00016976 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
0001697A 00                         		even
0001697A 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
0001697E 00                         		even
0001697E 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016982 00                         		even
00016982 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016986 00                         		even
00016986 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016990                            		even
00016990 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016996 00                         		even
00016996 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
000169A0 00                         		even
000169A0 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
000169AA 00                         		even
000169AA 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
000169AE                            		even
000169AE 0F87 8787 FE01             SonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
000169B4                            		even
000169B4 0F87 88FE 01               SonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
000169BA 00                         		even
000169BA 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
000169BE 00                         		even
000169BE 0B95 9512 13FD 00          SonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
000169C6 00                         		even
000169C6 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
000169CA 00                         		even
000169CA 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
000169CE 00                         		even
000169CE 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
000169D2 00                         		even
000169D2 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
000169D6 00                         		even
000169D6                            SonAni_WaterSlide:
000169D6 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
000169DA                            		even
000169DA 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
000169DE                            		even
000169DE 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
000169E6 00                         		even
000169E6 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
000169EA                            		even
000169EA FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
000169F8 00                         		even
000169F8 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016A04                            		even
00016A04 0298 99FF                  SonAni_Hurt2:	dc.b 2, fr_skele1, fr_skele2, afEnd	
00016A08                            		even
00016A08 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016A0C                            		even
00016A0C 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016A10                            		even
00016A10 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016A1A 00                         		even
00016A1A 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016A23 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016A2B 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016A32 3334 35                    		dc.b	$33, $34, $35
00016A35 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016A3C                            		even
00016A3C 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
00016A42                            		even
00016A42                            
00016A42                            
00016A42 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016A42 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016A42 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016A42 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016A42 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016A42 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016A42 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016A42 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016A42 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016A42 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016A42 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016A42 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016A42 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016A42 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016A42 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016A42 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016A42 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016A42 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016A42 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016A42 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016A42 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016A42 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016A42 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016A42 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016A42 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016A42 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016A42 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016A42 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016A42 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016A42 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016A42 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016A42 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016A42 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016A42 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016A42 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016A42 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016A42 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016A42 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016A42 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016A42                            		include	"_incObj\Sonic LoadGfx.asm"
00016A42                            ; ---------------------------------------------------------------------------
00016A42                            ; Sonic	graphics loading subroutine
00016A42                            ; ---------------------------------------------------------------------------
00016A42                            
00016A42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A42                            
00016A42                            
00016A42                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016A42 7000                       		moveq	#0,d0
00016A44 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00016A48 B038 F766                  		cmp.b	($FFFFF766).w,d0
00016A4C 6700                       		beq.s	locret_13C96
00016A4E 11C0 F766                  		move.b	d0,($FFFFF766).w
00016A52 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00016A58 D040                       		add.w	d0,d0
00016A5A D4F2 0000                  		adda.w	(a2,d0.w),a2
00016A5E 7A00                       		moveq	#0,d5
00016A60 1A1A                       		move.b	(a2)+,d5
00016A62 5345                       		subq.w	#1,d5
00016A64 6B00                       		bmi.s	locret_13C96
00016A66 383C F000                  		move.w	#$F000,d4
00016A6A 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016A70                            
00016A70                            SPLC_ReadEntry:
00016A70 7200                       		moveq	#0,d1
00016A72 121A                       		move.b	(a2)+,d1
00016A74 E149                       		lsl.w	#8,d1
00016A76 121A                       		move.b	(a2)+,d1
00016A78 3601                       		move.w	d1,d3
00016A7A E04B                       		lsr.w	#8,d3
00016A7C 0243 00F0                  		andi.w	#$F0,d3
00016A80 0643 0010                  		addi.w	#$10,d3
00016A84 0241 0FFF                  		andi.w	#$FFF,d1
00016A88 EB89                       		lsl.l	#5,d1
00016A8A D286                       		add.l	d6,d1
00016A8C 3404                       		move.w	d4,d2
00016A8E D843                       		add.w	d3,d4
00016A90 D843                       		add.w	d3,d4
00016A92 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00016A98 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00016A9C                            
00016A9C                            locret_13C96:
00016A9C 4E75                       		rts	
00016A9E                            ; End of function Sonic_LoadGfx
00016A9E                            ; End of function Sonic_LoadGfx
00016A9E                            
00016A9E                            		include	"_incObj\0A Drowning Countdown.asm"
00016A9E                            ; ---------------------------------------------------------------------------
00016A9E                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
00016A9E                            ; Sonic's mouth (LZ)
00016A9E                            ; ---------------------------------------------------------------------------
00016A9E                            
00016A9E                            DrownCount:
00016A9E 7000                       		moveq	#0,d0
00016AA0 1028 0024                  		move.b	obRoutine(a0),d0
00016AA4 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
00016AA8 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
00016AAC                            ; ===========================================================================
00016AAC                            Drown_Index:
00016AAC 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016AAE 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
00016AB0 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
00016AB2 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
00016AB4 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
00016AB6 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
00016AB8 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00016ABA 0000                       			dc.w Drown_Display-Drown_Index
00016ABC 0000                       			dc.w Drown_Delete-Drown_Index
00016ABE                            
00016ABE =00000030                  drown_origX:		equ $30		; original x-axis position
00016ABE =00000038                  drown_time:		equ $38		; time between each number changes
00016ABE                            
00016ABE =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016ABE =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016ABE =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016ABE =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016ABE =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016ABE =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016ABE =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016ABE                            ; ===========================================================================
00016ABE                            
00016ABE                            Drown_Main:	; Routine 0
00016ABE 5428 0024                  		addq.b	#2,obRoutine(a0)
00016AC2 217C 0001 4E8C 0004        		move.l	#Map_Bub,obMap(a0)
00016ACA 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00016AD0 117C 0084 0001             		move.b	#$84,obRender(a0)
00016AD6 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016ADC 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016AE2 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016AE6 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016AE8                            
00016AE8 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00016AEC 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016AF4 317C 0440 0002             		move.w	#$440,obGfx(a0)
00016AFA 0240 007F                  		andi.w	#$7F,d0
00016AFE 1140 0033                  		move.b	d0,$33(a0)
00016B02 6000 0000                  		bra.w	Drown_Countdown
00016B06                            ; ===========================================================================
00016B06                            
00016B06                            @smallbubble:
00016B06 1140 001C                  		move.b	d0,obAnim(a0)
00016B0A 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016B10 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016B16                            
00016B16                            Drown_Animate:	; Routine 2
00016B16 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016B1C 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
00016B22                            
00016B22                            Drown_ChkWater:	; Routine 4
00016B22 3038 F646                  		move.w	(v_waterpos1).w,d0
00016B26 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00016B2A 6500                       		bcs.s	@wobble		; if not, branch
00016B2C                            
00016B2C 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
00016B32 5E28 001C                  		addq.b	#7,obAnim(a0)
00016B36 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00016B3C 6700                       		beq.s	Drown_Display
00016B3E 6000                       		bra.s	Drown_Display
00016B40                            ; ===========================================================================
00016B40                            
00016B40                            @wobble:
00016B40 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
00016B44 6700                       		beq.s	@notunnel	; if not, branch
00016B46 5868 0030                  		addq.w	#4,drown_origX(a0)
00016B4A                            
00016B4A                            	@notunnel:
00016B4A 1028 0026                  		move.b	obAngle(a0),d0
00016B4E 5228 0026                  		addq.b	#1,obAngle(a0)
00016B52 0240 007F                  		andi.w	#$7F,d0
00016B56 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00016B5C 1031 0000                  		move.b	(a1,d0.w),d0
00016B60 4880                       		ext.w	d0
00016B62 D068 0030                  		add.w	drown_origX(a0),d0
00016B66 3140 0008                  		move.w	d0,obX(a0)
00016B6A 6100                       		bsr.s	Drown_ShowNumber
00016B6C 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
00016B72 4A28 0001                  		tst.b	obRender(a0)
00016B76 6A00                       		bpl.s	@delete
00016B78 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00016B7E                            
00016B7E                            	@delete:
00016B7E 4EF9 0000 FA62             		jmp	(DeleteObject).l
00016B84                            ; ===========================================================================
00016B84                            
00016B84                            Drown_Display:	; Routine 6, Routine $E
00016B84 6100                       		bsr.s	Drown_ShowNumber
00016B86 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016B8C 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
00016B92 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00016B98                            ; ===========================================================================
00016B98                            
00016B98                            Drown_Delete:	; Routine 8, Routine $10
00016B98 4EF9 0000 FA62             		jmp	(DeleteObject).l
00016B9E                            ; ===========================================================================
00016B9E                            
00016B9E                            Drown_AirLeft:	; Routine $C
00016B9E 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
00016BA4 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00016BA6 5368 0038                  		subq.w	#1,drown_time(a0)
00016BAA 6600                       		bne.s	@display
00016BAC 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00016BB2 5E28 001C                  		addq.b	#7,obAnim(a0)
00016BB6 60CC                       		bra.s	Drown_Display
00016BB8                            ; ===========================================================================
00016BB8                            
00016BB8                            	@display:
00016BB8 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016BBE 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
00016BC4 4A28 0001                  		tst.b	obRender(a0)
00016BC8 6A00                       		bpl.s	Drown_AirLeft_Delete
00016BCA 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00016BD0                            
00016BD0                            Drown_AirLeft_Delete:	
00016BD0 4EF9 0000 FA62             		jmp	(DeleteObject).l
00016BD6                            ; ===========================================================================
00016BD6                            
00016BD6                            Drown_ShowNumber:
00016BD6 4A68 0038                  		tst.w	drown_time(a0)
00016BDA 6700                       		beq.s	@nonumber
00016BDC 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016BE0 6600                       		bne.s	@nonumber	; if time remains, branch
00016BE2 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00016BE8 6400                       		bcc.s	@nonumber
00016BEA                            
00016BEA 317C 000F 0038             		move.w	#15,drown_time(a0)
00016BF0 4268 0012                  		clr.w	obVelY(a0)
00016BF4 117C 0080 0001             		move.b	#$80,obRender(a0)
00016BFA 3028 0008                  		move.w	obX(a0),d0
00016BFE 9078 F700                  		sub.w	(v_screenposx).w,d0
00016C02 0640 0080                  		addi.w	#$80,d0
00016C06 3140 0008                  		move.w	d0,obX(a0)
00016C0A 3028 000C                  		move.w	obY(a0),d0
00016C0E 9078 F704                  		sub.w	(v_screenposy).w,d0
00016C12 0640 0080                  		addi.w	#$80,d0
00016C16 3140 000A                  		move.w	d0,obScreenY(a0)
00016C1A 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
00016C20                            
00016C20                            	@nonumber:
00016C20 4E75                       		rts	
00016C22                            ; ===========================================================================
00016C22                            Drown_WobbleData:
00016C22 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016C32 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016C42 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016C52 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016C62 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016C72 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016C82 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016C92 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016CA2 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016CB2 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016CC2 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016CD2 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016CE2 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016CF2 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016D02 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016D12 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016D22                            ; ===========================================================================
00016D22                            
00016D22                            Drown_Countdown:; Routine $A
00016D22 4A68 002C                  		tst.w	$2C(a0)
00016D26 6600 0000                  		bne.w	@loc_13F86
00016D2A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016D30 6400 0000                  		bcc.w	@nocountdown
00016D34 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00016D3A 6700 0000                  		beq.w	@nocountdown	; if not, branch
00016D3E                            
00016D3E 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016D42 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016D46 317C 003B 0038             		move.w	#59,drown_time(a0)
00016D4C 317C 0001 0036             		move.w	#1,$36(a0)
00016D52 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00016D58 0240 0001                  		andi.w	#1,d0
00016D5C 1140 0034                  		move.b	d0,$34(a0)
00016D60 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016D64 0C40 0019                  		cmpi.w	#25,d0
00016D68 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016D6A 0C40 0014                  		cmpi.w	#20,d0
00016D6E 6700                       		beq.s	@warnsound
00016D70 0C40 000F                  		cmpi.w	#15,d0
00016D74 6700                       		beq.s	@warnsound
00016D76 0C40 000C                  		cmpi.w	#12,d0
00016D7A 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016D7C                            
00016D7C                            	@skipmusic:
00016D86 5328 0032                  		subq.b	#1,$32(a0)
00016D8A 6A00                       		bpl.s	@reduceair
00016D8C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016D92 08E8 0007 0036             		bset	#7,$36(a0)
00016D98 6000                       		bra.s	@reduceair
00016D9A                            ; ===========================================================================
00016D9A                            
00016D9A                            @warnsound:
00016DA4                            
00016DA4                            @reduceair:
00016DA4 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016DA8 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016DAC                            
00016DAC                            		; Sonic drowns here
00016DAC 6100 0000                  		bsr.w	ResumeMusic
00016DB0 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016DC0 117C 000A 0034             		move.b	#$A,$34(a0)
00016DC6 317C 0001 0036             		move.w	#1,$36(a0)
00016DCC 317C 0078 002C             		move.w	#$78,$2C(a0)
00016DD2 2F08                       		move.l	a0,-(sp)
00016DD4 41F8 D000                  		lea	(v_player).w,a0
00016DD8 6100 F6B6                  		bsr.w	Sonic_ResetOnFloor
00016DDC 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016DE2 08E8 0001 0022             		bset	#1,obStatus(a0)
00016DE8 08E8 0007 0002             		bset	#7,obGfx(a0)
00016DEE 317C 0000 0012             		move.w	#0,obVelY(a0)
00016DF4 317C 0000 0010             		move.w	#0,obVelX(a0)
00016DFA 317C 0000 0020             		move.w	#0,obInertia(a0)
00016E00 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016E06 205F                       		movea.l	(sp)+,a0
00016E08 4E75                       		rts	
00016E0A                            ; ===========================================================================
00016E0A                            
00016E0A                            @loc_13F86:
00016E0A 5368 002C                  		subq.w	#1,$2C(a0)
00016E0E 6600                       		bne.s	@loc_13F94
00016E10 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016E16 4E75                       		rts	
00016E18                            ; ===========================================================================
00016E18                            
00016E18                            	@loc_13F94:
00016E18 2F08                       		move.l	a0,-(sp)
00016E1A 41F8 D000                  		lea	(v_player).w,a0
00016E1E 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
00016E24 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016E2A 205F                       		movea.l	(sp)+,a0
00016E2C 6000                       		bra.s	@nochange
00016E2E                            ; ===========================================================================
00016E2E                            
00016E2E                            @gotomakenum:
00016E2E 6000                       		bra.s	@makenum
00016E30                            ; ===========================================================================
00016E30                            
00016E30                            @nochange:
00016E30 4A68 0036                  		tst.w	$36(a0)
00016E34 6700 0000                  		beq.w	@nocountdown
00016E38 5368 003A                  		subq.w	#1,$3A(a0)
00016E3C 6A00 0000                  		bpl.w	@nocountdown
00016E40                            
00016E40                            @makenum:
00016E40 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00016E46 0240 000F                  		andi.w	#$F,d0
00016E4A 3140 003A                  		move.w	d0,$3A(a0)
00016E4E 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
00016E54 6600 0000                  		bne.w	@nocountdown
00016E58 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016E5C 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016E62 7006                       		moveq	#6,d0
00016E64 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016E6A 6700                       		beq.s	@noflip
00016E6C 4440                       		neg.w	d0
00016E6E 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016E74                            
00016E74                            	@noflip:
00016E74 D169 0008                  		add.w	d0,obX(a1)
00016E78 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016E7E 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016E84 4A68 002C                  		tst.w	$2C(a0)
00016E88 6700 0000                  		beq.w	@loc_1403E
00016E8C 0268 0007 003A             		andi.w	#7,$3A(a0)
00016E92 0668 0000 003A             		addi.w	#0,$3A(a0)
00016E98 3038 D00C                  		move.w	(v_player+obY).w,d0
00016E9C 0440 000C                  		subi.w	#$C,d0
00016EA0 3340 000C                  		move.w	d0,obY(a1)
00016EA4 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00016EAA 1340 0026                  		move.b	d0,obAngle(a1)
00016EAE 3038 FE04                  		move.w	(v_framecount).w,d0
00016EB2 0200 0003                  		andi.b	#3,d0
00016EB6 6600                       		bne.s	@loc_14082
00016EB8 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016EBE 6000                       		bra.s	@loc_14082
00016EC0                            ; ===========================================================================
00016EC0                            
00016EC0                            @loc_1403E:
00016EC0 0828 0007 0036             		btst	#7,$36(a0)
00016EC6 6700                       		beq.s	@loc_14082
00016EC8 3438 FE14                  		move.w	(v_air).w,d2
00016ECC E24A                       		lsr.w	#1,d2
00016ECE 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00016ED4 0240 0003                  		andi.w	#3,d0
00016ED8 6600                       		bne.s	@loc_1406A
00016EDA 08E8 0006 0036             		bset	#6,$36(a0)
00016EE0 6600                       		bne.s	@loc_14082
00016EE2 1342 0028                  		move.b	d2,obSubtype(a1)
00016EE6 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016EEC                            
00016EEC                            	@loc_1406A:
00016EEC 4A28 0034                  		tst.b	$34(a0)
00016EF0 6600                       		bne.s	@loc_14082
00016EF2 08E8 0006 0036             		bset	#6,$36(a0)
00016EF8 6600                       		bne.s	@loc_14082
00016EFA 1342 0028                  		move.b	d2,obSubtype(a1)
00016EFE 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016F04                            
00016F04                            @loc_14082:
00016F04 5328 0034                  		subq.b	#1,$34(a0)
00016F08 6A00                       		bpl.s	@nocountdown
00016F0A 4268 0036                  		clr.w	$36(a0)
00016F0E                            
00016F0E                            @nocountdown:
00016F0E 4E75                       		rts	
00016F0E 4E75                       		rts	
00016F10                            
00016F10                            
00016F10                            ; ---------------------------------------------------------------------------
00016F10                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016F10                            ; ---------------------------------------------------------------------------
00016F10                            
00016F10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F10                            
00016F10                            
00016F10                            ResumeMusic:
00016F10                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016F10                            		;bhi.s	@over12		; if yes, branch
00016F10                            		;move.b	(v_Saved_music),d0
00016F10                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016F10                            		;beq.s	@notinvinc ; if not, branch
00016F10                            		;move.w	#bgm_Invincible,d0
00016F10                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016F10                            		;beq.s	@notinvinc	; if not, branch
00016F10                            		;move.w	#bgm_Ending,d0
00016F10                            
00016F10                            	;@notinvinc:
00016F10                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016F10                            		;beq.s	@playselected ; if not, branch
00016F10                            		;move.w	#bgm_Boss,d0
00016F10                            
00016F10                            	;@playselected:
00016F10                            		;jsr	(PlaySound).l
00016F10                            
00016F10                            	;@over12:
00016F10 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016F16 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016F1A 4E75                       		rts	
00016F1C                            
00016F1C                            ;End of function ResumeMusic
00016F1C                            
00016F1C                            ; ===========================================================================
00016F1C                            
00016F1C                            		include	"_anim\Drowning Countdown.asm"
00016F1C                            ; ---------------------------------------------------------------------------
00016F1C                            ; Animation script - countdown numbers and bubbles (LZ)
00016F1C                            ; ---------------------------------------------------------------------------
00016F1C 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016F1E 0000                       		dc.w @oneappear-Ani_Drown
00016F20 0000                       		dc.w @twoappear-Ani_Drown
00016F22 0000                       		dc.w @threeappear-Ani_Drown
00016F24 0000                       		dc.w @fourappear-Ani_Drown
00016F26 0000                       		dc.w @fiveappear-Ani_Drown
00016F28 0000                       		dc.w @smallbubble-Ani_Drown
00016F2A 0000                       		dc.w @zeroflash-Ani_Drown
00016F2C 0000                       		dc.w @oneflash-Ani_Drown
00016F2E 0000                       		dc.w @twoflash-Ani_Drown
00016F30 0000                       		dc.w @threeflash-Ani_Drown
00016F32 0000                       		dc.w @fourflash-Ani_Drown
00016F34 0000                       		dc.w @fiveflash-Ani_Drown
00016F36 0000                       		dc.w @blank-Ani_Drown
00016F38 0000                       		dc.w @mediumbubble-Ani_Drown
00016F3A 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016F44 00                         		even
00016F44 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016F4E 00                         		even
00016F4E 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016F58 00                         		even
00016F58 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016F62 00                         		even
00016F62 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016F6C 00                         		even
00016F6C 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016F76 00                         		even
00016F76 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016F7C 00                         		even
00016F7C 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016F84 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016F8C 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016F94 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016F9C 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016FA4 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016FAC 0EFC                       @blank:		dc.b $E, afRoutine
00016FAE 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016FB4                            		even
00016FB4                            		even
00016FB4                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016FB4                            ; ---------------------------------------------------------------------------
00016FB4                            ; Sprite mappings - drowning countdown numbers (LZ)
00016FB4                            ; ---------------------------------------------------------------------------
00016FB4                            Map_Drown_internal:
00016FB4 0000                       		dc.w @num-Map_Drown_internal
00016FB6 01                         @num:		dc.b 1
00016FB7 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016FBC                            		even
00016FBC                            		even
00016FBC                            
00016FBC                            		include	"_incObj\4E Silver Shield.asm"
00016FBC                            ; ---------------------------------------------------------------------------
00016FBC                            ; Object 4E - Silver Shield
00016FBC                            ; ---------------------------------------------------------------------------
00016FBC                            
00016FBC                            SpShieldItem:
00016FBC 223C 0000 0000             		move.l #Unc_SpShield,d1 ; Call for Silver Shield Art
00016FC2 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016FC6                            		; In this case, VRAM = $541*20
00016FC6 363C 0200                  		move.w #$200,d3
00016FCA 4EB9 0000 1476             		jsr (QueueDMATransfer).l
00016FD0                            ; ---------------------------------------------------------------------------
00016FD0                            SpShieldObj_Main:
00016FD0 7000                       		moveq #0,d0
00016FD2 1028 0024                  		move.b $24(a0),d0
00016FD6 323B 0000                  		move.w SpShield_Index(pc,d0.w),d1
00016FDA 4EFB 1000                  		jmp SpShield_Index(pc,d1.w)
00016FDE                            ; ===========================================================================
00016FDE                            SpShield_Index:
00016FDE 0000                       		dc.w SpShield_Init-SpShield_Index
00016FE0 0000                       		dc.w SpShieldChecks-SpShield_Index
00016FE2                            ; ===========================================================================
00016FE2                            SpShield_Init:
00016FE2 5428 0024                  		addq.b #2,$24(a0)
00016FE6 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016FEE 117C 0004 0001             		move.b #4,1(a0)
00016FF4 317C 0080 0018             		move.w #$80,$18(a0)
00016FFA 117C 0018 0014             		move.b #$18,obActWid(a0)
00017000 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00017006 0838 0007 D002             		btst #7,($FFFFD002).w
0001700C 6700                       		beq.s SpShieldChecks
0001700E 08E8 0007 0002             		bset #7,2(a0)
00017014                            ; ---------------------------------------------------------------------------
00017014                            SpShieldChecks:
00017014 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00017018 6600                       		bne.s SpSonicHasShield ; If so, branch to do nothing
0001701A 4A38 F5CA                  		tst.b (v_SpShield).w ; Test if Sonic got invisibility
0001701E 6700                       		beq.s Spjmp_DeleteObj38 ; If so, delete object temporarily
00017020                            SpShieldProperties:
00017020 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00017026 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
0001702C 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00017032 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00017038 4EB9 0000 CAE4             		jsr AnimateSprite
0001703E 4EFA 89E2                  		jmp DisplaySprite
00017042                            SpSonicHasShield:
00017042 4E75                       		rts
00017044                            Spjmp_DeleteObj38: ; loc_12648:
00017044 4EFA 8A1C                  		jmp DeleteObject
00017044 4EFA 8A1C                  		jmp DeleteObject
00017048                            		include	"_incObj\04 Gold Shield.asm"
00017048                            ; ---------------------------------------------------------------------------
00017048                            ; Object 04 - Gold shield
00017048                            ; ---------------------------------------------------------------------------
00017048                            
00017048                            GShieldItem:
00017048 223C 0000 0000             		move.l #Unc_GShield,d1 ; Call for Gold Shield Art
0001704E 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00017052                            		; In this case, VRAM = $541*20
00017052 363C 0200                  		move.w #$200,d3
00017056 4EB9 0000 1476             		jsr (QueueDMATransfer).l
0001705C                            ; ---------------------------------------------------------------------------
0001705C                            GShieldObj_Main:
0001705C 7000                       		moveq #0,d0
0001705E 1028 0024                  		move.b $24(a0),d0
00017062 323B 0000                  		move.w GShield_Index(pc,d0.w),d1
00017066 4EFB 1000                  		jmp GShield_Index(pc,d1.w)
0001706A                            ; ===========================================================================
0001706A                            GShield_Index:
0001706A 0000                       		dc.w GShield_Init-GShield_Index
0001706C 0000                       		dc.w GShieldChecks-GShield_Index
0001706E                            ; ===========================================================================
0001706E                            GShield_Init:
0001706E 5428 0024                  		addq.b #2,$24(a0)
00017072 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
0001707A 117C 0004 0001             		move.b #4,1(a0)
00017080 317C 0080 0018             		move.w #$80,$18(a0)
00017086 117C 0018 0014             		move.b #$18,obActWid(a0)
0001708C 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00017092 0838 0007 D002             		btst #7,($FFFFD002).w
00017098 6700                       		beq.s GShieldChecks
0001709A 08E8 0007 0002             		bset #7,2(a0)
000170A0                            ; ---------------------------------------------------------------------------
000170A0                            GShieldChecks:
000170A0 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
000170A4 6600                       		bne.s GSonicHasShield ; If so, branch to do nothing
000170A6 4A38 F5C9                  		tst.b (v_GShield).w ; Test if Sonic got invisibility
000170AA 6700                       		beq.s Gjmp_DeleteObj38 ; If so, delete object temporarily
000170AC                            GShieldProperties:
000170AC 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
000170B2 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
000170B8 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
000170BE 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
000170C4 4EB9 0000 CAE4             		jsr AnimateSprite
000170CA 4EFA 8956                  		jmp DisplaySprite
000170CE                            GSonicHasShield:
000170CE 4E75                       		rts
000170D0                            Gjmp_DeleteObj38: ; loc_12648:
000170D0 4EFA 8990                  		jmp DeleteObject
000170D0 4EFA 8990                  		jmp DeleteObject
000170D4                            		include	"_incObj\07 Red Shield.asm"
000170D4                            ; ---------------------------------------------------------------------------
000170D4                            ; Object 07 - red shield
000170D4                            ; ---------------------------------------------------------------------------
000170D4                            
000170D4                            RShieldItem:
000170D4 223C 0000 0000             		move.l #Unc_RedShield,d1 ; Call for Red Shield Art
000170DA 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
000170DE                            		; In this case, VRAM = $541*20
000170DE 363C 0200                  		move.w #$200,d3
000170E2 4EB9 0000 1476             		jsr (QueueDMATransfer).l
000170E8                            ; ---------------------------------------------------------------------------
000170E8                            RShieldObj_Main:
000170E8 7000                       		moveq #0,d0
000170EA 1028 0024                  		move.b $24(a0),d0
000170EE 323B 0000                  		move.w RShield_Index(pc,d0.w),d1
000170F2 4EFB 1000                  		jmp RShield_Index(pc,d1.w)
000170F6                            ; ===========================================================================
000170F6                            RShield_Index:
000170F6 0000                       		dc.w RShield_Init-RShield_Index
000170F8 0000                       		dc.w RShieldChecks-RShield_Index
000170FA                            ; ===========================================================================
000170FA                            RShield_Init:
000170FA 5428 0024                  		addq.b #2,$24(a0)
000170FE 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00017106 117C 0004 0001             		move.b #4,1(a0)
0001710C 317C 0080 0018             		move.w #$80,$18(a0)
00017112 117C 0018 0014             		move.b #$18,obActWid(a0)
00017118 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
0001711E 0838 0007 D002             		btst #7,($FFFFD002).w
00017124 6700                       		beq.s RShieldChecks
00017126 08E8 0007 0002             		bset #7,2(a0)
0001712C                            ; ---------------------------------------------------------------------------
0001712C                            RShieldChecks:
0001712C 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00017130 6600                       		bne.s RSonicHasShield ; If so, branch to do nothing
00017132 4A38 F5C8                  		tst.b (v_rshield).w ; Test if Sonic got invisibility
00017136 6700                       		beq.s Rjmp_DeleteObj38 ; If so, delete object temporarily
00017138                            RShieldProperties:
00017138 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
0001713E 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00017144 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
0001714A 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00017150 4EB9 0000 CAE4             		jsr AnimateSprite
00017156 4EFA 88CA                  		jmp DisplaySprite
0001715A                            RSonicHasShield:
0001715A 4E75                       		rts
0001715C                            Rjmp_DeleteObj38: ; loc_12648:
0001715C 4EFA 8904                  		jmp DeleteObject
0001715C 4EFA 8904                  		jmp DeleteObject
00017160                            		include	"_incObj\38 Shield.asm"
00017160                            ; ---------------------------------------------------------------------------
00017160                            ; Object 38 - shield
00017160                            ; ---------------------------------------------------------------------------
00017160                            
00017160                            ShieldItem:
00017160 223C 0000 0000             		move.l #Unc_Shield,d1 ; Call for Regular Shield Art
00017166 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
0001716A                            		; In this case, VRAM = $541*20
0001716A 363C 0200                  		move.w #$200,d3
0001716E 4EB9 0000 1476             		jsr (QueueDMATransfer).l
00017174                            ; ---------------------------------------------------------------------------
00017174                            ShieldObj_Main:
00017174 7000                       		moveq #0,d0
00017176 1028 0024                  		move.b $24(a0),d0
0001717A 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
0001717E 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
00017182                            ; ===========================================================================
00017182                            Shield_Index:
00017182 0000                       		dc.w Shield_Init-Shield_Index
00017184 0000                       		dc.w ShieldChecks-Shield_Index
00017186                            ; ===========================================================================
00017186                            Shield_Init:
00017186 5428 0024                  		addq.b #2,$24(a0)
0001718A 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00017192 117C 0004 0001             		move.b #4,1(a0)
00017198 317C 0080 0018             		move.w #$80,$18(a0)
0001719E 117C 0018 0014             		move.b #$18,obActWid(a0)
000171A4 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
000171AA 0838 0007 D002             		btst #7,($FFFFD002).w
000171B0 6700                       		beq.s ShieldChecks
000171B2 08E8 0007 0002             		bset #7,2(a0)
000171B8                            ; ---------------------------------------------------------------------------
000171B8                            ShieldChecks:
000171B8 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
000171BC 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
000171BE 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
000171C2 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
000171C4                            ShieldProperties:
000171C4 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
000171CA 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
000171D0 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
000171D6 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
000171DC 4EB9 0000 CAE4             		jsr AnimateSprite
000171E2 4EFA 883E                  		jmp DisplaySprite
000171E6                            SonicHasShield:
000171E6 4E75                       		rts
000171E8                            jmp_DeleteObj38: ; loc_12648:
000171E8 4EFA 8878                  		jmp DeleteObject
000171E8 4EFA 8878                  		jmp DeleteObject
000171EC                            		include	"_incObj\19 Invincibility Stars.asm"		
000171EC                            ; ---------------------------------------------------------------------------
000171EC                            ; Object 19 - Invincibility Stars
000171EC                            ; ---------------------------------------------------------------------------
000171EC                            
000171EC                            InvStarsObj:
000171EC 223C 0000 0000             		move.l #Unc_Stars,d1
000171F2 343C A820                  		move.w #$A820,d2
000171F6 363C 0200                  		move.w #$200,d3
000171FA 4EB9 0000 1476             		jsr (QueueDMATransfer).l
00017200                            Invincibility_Main:
00017200 7000                       		moveq #0,d0
00017202 1028 0024                  		move.b $24(a0),d0
00017206                            Invincibility_Init:
00017206 5428 0024                  		addq.b #2,$24(a0)
0001720A 217C 0000 0000 0004        		move.l #Map_Shield,4(a0) ; loads mapping
00017212 117C 0004 0001             		move.b #4,1(a0)
00017218 317C 0080 0018             		move.w #$80,$18(a0)
0001721E 117C 0010 0014             		move.b #$10,obActWid(a0)
00017224 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
0001722A                            ; ===========================================================================
0001722A                            
0001722A                            Obj19_Stars: ; XREF: Obj38_Index
0001722A 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
0001722E 6700                       		beq.s Obj19_Delete2 ; if not, branch
00017230 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
00017234 1228 001C                  		move.b $1C(a0),d1
00017238 5301                       		subq.b #1,d1
0001723A 6000                       		bra.s Obj19_StarTrail
0001723C                            ; ===========================================================================
0001723C E909                       		lsl.b #4,d1
0001723E 5801                       		addq.b #4,d1
00017240 9001                       		sub.b d1,d0
00017242 1228 0030                  		move.b $30(a0),d1
00017246 9001                       		sub.b d1,d0
00017248 5801                       		addq.b #4,d1
0001724A 0201 000F                  		andi.b #$F,d1
0001724E 1141 0030                  		move.b d1,$30(a0)
00017252 6000                       		bra.s Obj19_StarTrail2a
00017254                            ; ===========================================================================
00017254                            
00017254                            Obj19_StarTrail: ; XREF: Obj19_Stars
00017254 E709                       		lsl.b #3,d1
00017256 1401                       		move.b d1,d2
00017258 D201                       		add.b d1,d1
0001725A D202                       		add.b d2,d1
0001725C 5801                       		addq.b #4,d1
0001725E 9001                       		sub.b d1,d0
00017260 1228 0030                  		move.b $30(a0),d1
00017264 9001                       		sub.b d1,d0
00017266 5801                       		addq.b #4,d1
00017268 0C01 0018                  		cmpi.b #$18,d1
0001726C 6500                       		bcs.s Obj19_StarTrail2
0001726E 7200                       		moveq #0,d1
00017270                            
00017270                            Obj19_StarTrail2:
00017270 1141 0030                  		move.b d1,$30(a0)
00017274                            
00017274                            Obj19_StarTrail2a:
00017274 43F8 CB00                  		lea ($FFFFCB00).w,a1
00017278 43F1 0000                  		lea (a1,d0.w),a1
0001727C 3159 0008                  		move.w (a1)+,8(a0)
00017280 3159 000C                  		move.w (a1)+,$C(a0)
00017284 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
0001728A 43F9 0000 0000             		lea (Ani_Shield).l,a1
00017290 4EB9 0000 CAE4             		jsr (AnimateSprite).l
00017296 4EF9 0000 FA22             		jmp (DisplaySprite).l
0001729C                            ; ===========================================================================
0001729C                            
0001729C                            Obj19_Delete2: ; XREF: Obj19_Stars
0001729C 4EF9 0000 FA62             		jmp (DeleteObject).l
0001729C 4EF9 0000 FA62             		jmp (DeleteObject).l
000172A2                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
000172A2                            ; ---------------------------------------------------------------------------
000172A2                            ; Object 4A - special stage entry from beta
000172A2                            ; ---------------------------------------------------------------------------
000172A2                            
000172A2                            VanishSonic:
000172A2 7000                       		moveq	#0,d0
000172A4 1028 0024                  		move.b	obRoutine(a0),d0
000172A8 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
000172AC 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
000172B0                            ; ===========================================================================
000172B0 0000                       Van_Index:	dc.w Van_Main-Van_Index
000172B2 0000                       		dc.w Van_RmvSonic-Van_Index
000172B4 0000                       		dc.w Van_LoadSonic-Van_Index
000172B6                            
000172B6 =00000030                  van_time:	equ $30		; time for Sonic to disappear
000172B6                            ; ===========================================================================
000172B6                            
000172B6                            Van_Main:	; Routine 0
000172B6 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
000172BA 6700                       		beq.s	@isempty	; if yes, branch
000172BC 4E75                       		rts	
000172BE                            
000172BE                            	@isempty:
000172BE 5428 0024                  		addq.b	#2,obRoutine(a0)
000172C2 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
000172CA 117C 0004 0001             		move.b	#4,obRender(a0)
000172D0 317C 0080 0018             		move.w	#$80,obPriority(a0)
000172D6 117C 0038 0014             		move.b	#$38,obActWid(a0)
000172DC 317C 0541 0002             		move.w	#$541,obGfx(a0)
000172E2 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
000172E8                            
000172E8                            Van_RmvSonic:	; Routine 2
000172E8 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
000172EE 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
000172F4 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
000172FA 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017300 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
00017306 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001730C 6600                       		bne.s	@display
0001730E 4A38 D000                  		tst.b	(v_player).w
00017312 6700                       		beq.s	@display
00017314 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017324                            
00017324                            	@display:
00017324 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001732A                            ; ===========================================================================
0001732A                            
0001732A                            Van_LoadSonic:	; Routine 4
0001732A 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
0001732E 6600                       		bne.s	@wait		; if time remains, branch
00017330 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00017336 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001733C                            
0001733C                            	@wait:
0001733C 4E75                       		rts	
0001733C 4E75                       		rts	
0001733E                            		include	"_incObj\08 Water Splash.asm"
0001733E                            ; ---------------------------------------------------------------------------
0001733E                            ; Object 08 - water splash (LZ)
0001733E                            ; ---------------------------------------------------------------------------
0001733E                            
0001733E                            Splash:
0001733E 7000                       		moveq	#0,d0
00017340 1028 0024                  		move.b	obRoutine(a0),d0
00017344 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00017348 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
0001734C                            ; ===========================================================================
0001734C 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
0001734E 0000                       		dc.w Spla_Display-Spla_Index
00017350 0000                       		dc.w Spla_Delete-Spla_Index
00017352                            ; ===========================================================================
00017352                            
00017352                            Spla_Main:    ; Routine 0
00017352 5428 0024                          addq.b    #2,obRoutine(a0)
00017356 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
0001735E 0028 0004 0001                     ori.b    #4,obRender(a0)
00017364 117C 0001 0018                     move.b    #1,obPriority(a0)
0001736A 117C 0010 0014                     move.b    #$10,obActWid(a0)
00017370 317C 4259 0002                     move.w    #$4259,obGfx(a0)
00017376 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
0001737C                            
0001737C                            Spla_Display:    ; Routine 2
0001737C                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
0001737C 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
00017382 43F9 0000 0000                     lea    (Ani_Splash).l,a1
00017388 4EB9 0000 CAE4                     jsr    (AnimateSprite).l
0001738E 4EF9 0000 FA22                     jmp    (DisplaySprite).l
00017394                            ; ===========================================================================
00017394                            
00017394                            Spla_Delete:	; Routine 4
00017394 4EF9 0000 FA62             		jmp	(DeleteObject).l	; delete when animation	is complete
00017394 4EF9 0000 FA62             		jmp	(DeleteObject).l	; delete when animation	is complete
0001739A                            		include	"_anim\Shield and Invincibility.asm"
0001739A                            ; ---------------------------------------------------------------------------
0001739A                            ; Animation script - shield and invincibility stars
0001739A                            ; ---------------------------------------------------------------------------
0001739A 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
0001739C 0000                       		dc.w @stars1-Ani_Shield
0001739E 0000                       		dc.w @stars2-Ani_Shield
000173A0 0000                       		dc.w @stars3-Ani_Shield
000173A2 0000                       		dc.w @stars4-Ani_Shield
000173A4 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
000173AC 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
000173B2 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000173C3 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
000173CC 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000173DD 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
000173E6 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000173F7 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
00017400                            		even
00017400                            		even
00017400                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
00017400                            ; --------------------------------------------------------------------------------
00017400                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017400                            ; --------------------------------------------------------------------------------
00017400                            
00017400                            SME_7M_8q:	
00017400 0000 0000                  		dc.w SME_7M_8q_10-SME_7M_8q, SME_7M_8q_11-SME_7M_8q	
00017404 0000 0000                  		dc.w SME_7M_8q_26-SME_7M_8q, SME_7M_8q_3B-SME_7M_8q	
00017408 0000 0000                  		dc.w SME_7M_8q_50-SME_7M_8q, SME_7M_8q_65-SME_7M_8q	
0001740C 0000 0000                  		dc.w SME_7M_8q_7A-SME_7M_8q, SME_7M_8q_8F-SME_7M_8q	
00017410 00                         SME_7M_8q_10:	dc.b 0	
00017411 04                         SME_7M_8q_11:	dc.b 4	
00017412 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00017417 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
0001741C 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
00017421 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
00017426 04                         SME_7M_8q_26:	dc.b 4	
00017427 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9	
0001742C E80A 0012 00               		dc.b $E8, $A, 0, $12, 0	
00017431 000A 1812 E9               		dc.b 0, $A, $18, $12, $E9	
00017436 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
0001743B 04                         SME_7M_8q_3B:	dc.b 4	
0001743C E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017441 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00017446 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
0001744B 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
00017450 04                         SME_7M_8q_50:	dc.b 4	
00017451 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00017456 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
0001745B 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
00017460 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
00017465 04                         SME_7M_8q_65:	dc.b 4	
00017466 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
0001746B E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00017470 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
00017475 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
0001747A 04                         SME_7M_8q_7A:	dc.b 4	
0001747B E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8	
00017480 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0	
00017485 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
0001748A 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
0001748F 04                         SME_7M_8q_8F:	dc.b 4	
00017490 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8	
00017495 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0	
0001749A 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
0001749F 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
000174A4                            		even
000174A4                            		even
000174A4                            Map_Shield2:	include	"_maps\Shield 2.asm"
000174A4                            ; --------------------------------------------------------------------------------
000174A4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000174A4                            ; --------------------------------------------------------------------------------
000174A4                            
000174A4                            SME_X5P7B:	
000174A4 0000 0000                  		dc.w SME_X5P7B_10-SME_X5P7B, SME_X5P7B_11-SME_X5P7B	
000174A8 0000 0000                  		dc.w SME_X5P7B_26-SME_X5P7B, SME_X5P7B_3B-SME_X5P7B	
000174AC 0000 0000                  		dc.w SME_X5P7B_50-SME_X5P7B, SME_X5P7B_65-SME_X5P7B	
000174B0 0000 0000                  		dc.w SME_X5P7B_7A-SME_X5P7B, SME_X5P7B_8F-SME_X5P7B	
000174B4 00                         SME_X5P7B_10:	dc.b 0	
000174B5 04                         SME_X5P7B_11:	dc.b 4	
000174B6 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000174BB E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000174C0 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000174C5 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000174CA 04                         SME_X5P7B_26:	dc.b 4	
000174CB E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
000174D0 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
000174D5 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
000174DA 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
000174DF 04                         SME_X5P7B_3B:	dc.b 4	
000174E0 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000174E5 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000174EA 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000174EF 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000174F4 04                         SME_X5P7B_50:	dc.b 4	
000174F5 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000174FA E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000174FF 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017504 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017509 04                         SME_X5P7B_65:	dc.b 4	
0001750A E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001750F E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017514 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017519 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
0001751E 04                         SME_X5P7B_7A:	dc.b 4	
0001751F E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
00017524 E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
00017529 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
0001752E 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
00017533 04                         SME_X5P7B_8F:	dc.b 4	
00017534 E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
00017539 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
0001753E 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
00017543 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
00017548                            		even
00017548                            		even
00017548                            
00017548                            Map_Shield3:	include	"_maps\Shield 3.asm"
00017548                            ; --------------------------------------------------------------------------------
00017548                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017548                            ; --------------------------------------------------------------------------------
00017548                            
00017548                            SME__wWzO:	
00017548 0000 0000                  		dc.w SME__wWzO_10-SME__wWzO, SME__wWzO_11-SME__wWzO	
0001754C 0000 0000                  		dc.w SME__wWzO_26-SME__wWzO, SME__wWzO_3B-SME__wWzO	
00017550 0000 0000                  		dc.w SME__wWzO_50-SME__wWzO, SME__wWzO_65-SME__wWzO	
00017554 0000 0000                  		dc.w SME__wWzO_7A-SME__wWzO, SME__wWzO_8F-SME__wWzO	
00017558 00                         SME__wWzO_10:	dc.b 0	
00017559 04                         SME__wWzO_11:	dc.b 4	
0001755A E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
0001755F E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017564 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017569 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
0001756E 04                         SME__wWzO_26:	dc.b 4	
0001756F E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
00017574 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
00017579 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
0001757E 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
00017583 04                         SME__wWzO_3B:	dc.b 4	
00017584 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017589 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
0001758E 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017593 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017598 04                         SME__wWzO_50:	dc.b 4	
00017599 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
0001759E E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000175A3 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000175A8 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000175AD 04                         SME__wWzO_65:	dc.b 4	
000175AE E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000175B3 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000175B8 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000175BD 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000175C2 04                         SME__wWzO_7A:	dc.b 4	
000175C3 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
000175C8 E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
000175CD 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
000175D2 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
000175D7 04                         SME__wWzO_8F:	dc.b 4	
000175D8 E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
000175DD E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
000175E2 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
000175E7 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
000175EC                            		even
000175EC                            		even
000175EC                            		include	"_anim\Special Stage Entry (Unused).asm"
000175EC                            ; ---------------------------------------------------------------------------
000175EC                            ; Animation script - special stage entry effect from beta
000175EC                            ; ---------------------------------------------------------------------------
000175EC 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
000175EE 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00017602                            		even
00017602                            		even
00017602                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00017602                            ; ---------------------------------------------------------------------------
00017602                            ; Sprite mappings - special stage entry	from beta
00017602                            ; ---------------------------------------------------------------------------
00017602                            Map_Vanish_internal:
00017602 0000                       		dc.w @flash1-Map_Vanish_internal
00017604 0000                       		dc.w @flash2-Map_Vanish_internal
00017606 0000                       		dc.w @flash3-Map_Vanish_internal
00017608 0000                       		dc.w @sparkle1-Map_Vanish_internal
0001760A 0000                       		dc.w @sparkle2-Map_Vanish_internal
0001760C 0000                       		dc.w @sparkle3-Map_Vanish_internal
0001760E 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017610 0000                       		dc.w @blank-Map_Vanish_internal
00017612 03                         @flash1:	dc.b 3
00017613 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00017618 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001761D 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017622 03                         @flash2:	dc.b 3
00017623 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00017628 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001762D 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00017632 05                         @flash3:	dc.b 5
00017633 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00017638 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001763D FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00017642 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00017647 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001764C 09                         @sparkle1:	dc.b 9
0001764D F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00017652 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00017657 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001765C 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00017661 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00017666 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001766B F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017670 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00017675 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001767A 12                         @sparkle2:	dc.b $12
0001767B 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00017680 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00017685 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001768A 0000 0025 00               		dc.b 0,	0, 0, $25, 0
0001768F 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00017694 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00017699 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
0001769E F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000176A3 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000176A8 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000176AD 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000176B2 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000176B7 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
000176BC F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
000176C1 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
000176C6 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
000176CB 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
000176D0 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
000176D5 11                         @sparkle3:	dc.b $11
000176D6 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000176DB F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000176E0 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000176E5 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000176EA 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000176EF F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000176F4 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000176F9 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000176FE 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00017703 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00017708 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001770D 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00017712 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00017717 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001771C F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017721 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00017726 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001772B 09                         @sparkle4:	dc.b 9
0001772C FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00017731 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00017736 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001773B 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00017740 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00017745 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001774A 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
0001774F 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00017754 04                         		dc.b 4
00017755 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
0001775A                            		even
0001775A                            		even
0001775A                            		include	"_anim\Water Splash.asm"
0001775A                            ; ---------------------------------------------------------------------------
0001775A                            ; Animation script - water splash (LZ)
0001775A                            ; ---------------------------------------------------------------------------
0001775A 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
0001775C 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
00017762 00                         		even
00017762 00                         		even
00017762                            Map_Splash:	include	"_maps\Water Splash.asm"
00017762                            ; ---------------------------------------------------------------------------
00017762                            ; Sprite mappings - water splash (LZ)
00017762                            ; ---------------------------------------------------------------------------
00017762                            Map_Splash_internal:
00017762 0000                       		dc.w @splash1-Map_Splash_internal
00017764 0000                       		dc.w @splash2-Map_Splash_internal
00017766 0000                       		dc.w @splash3-Map_Splash_internal
00017768 02                         @splash1:	dc.b 2
00017769 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
0001776E FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00017773 02                         @splash2:	dc.b 2
00017774 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00017779 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001777E 01                         @splash3:	dc.b 1
0001777F E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00017784                            		even
00017784                            		even
00017784                            
00017784                            		include	"_incObj\Sonic AnglePos.asm"
00017784                            ; ---------------------------------------------------------------------------
00017784                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00017784                            ; ---------------------------------------------------------------------------
00017784                            
00017784                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017784                            
00017784                            
00017784                            Sonic_AnglePos:
00017784 0828 0003 0022             		btst	#3,obStatus(a0)
0001778A 6700                       		beq.s	loc_14602
0001778C 7000                       		moveq	#0,d0
0001778E 11C0 F768                  		move.b	d0,($FFFFF768).w
00017792 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017796 4E75                       		rts	
00017798                            ; ===========================================================================
00017798                            
00017798                            loc_14602:
00017798 7003                       		moveq	#3,d0
0001779A 11C0 F768                  		move.b	d0,($FFFFF768).w
0001779E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000177A2 1028 0026                  		move.b	obAngle(a0),d0
000177A6 0600 0020                  		addi.b	#$20,d0
000177AA 6A00                       		bpl.s	loc_14624
000177AC 1028 0026                  		move.b	obAngle(a0),d0
000177B0 6A00                       		bpl.s	loc_1461E
000177B2 5300                       		subq.b	#1,d0
000177B4                            
000177B4                            loc_1461E:
000177B4 0600 0020                  		addi.b	#$20,d0
000177B8 6000                       		bra.s	loc_14630
000177BA                            ; ===========================================================================
000177BA                            
000177BA                            loc_14624:
000177BA 1028 0026                  		move.b	obAngle(a0),d0
000177BE 6A00                       		bpl.s	loc_1462C
000177C0 5200                       		addq.b	#1,d0
000177C2                            
000177C2                            loc_1462C:
000177C2 0600 001F                  		addi.b	#$1F,d0
000177C6                            
000177C6                            loc_14630:
000177C6 0200 00C0                  		andi.b	#$C0,d0
000177CA 0C00 0040                  		cmpi.b	#$40,d0
000177CE 6700 0000                  		beq.w	Sonic_WalkVertL
000177D2 0C00 0080                  		cmpi.b	#$80,d0
000177D6 6700 0000                  		beq.w	Sonic_WalkCeiling
000177DA 0C00 00C0                  		cmpi.b	#$C0,d0
000177DE 6700 0000                  		beq.w	Sonic_WalkVertR
000177E2 3428 000C                  		move.w	obY(a0),d2
000177E6 3628 0008                  		move.w	obX(a0),d3
000177EA 7000                       		moveq	#0,d0
000177EC 1028 0016                  		move.b	obHeight(a0),d0
000177F0 4880                       		ext.w	d0
000177F2 D440                       		add.w	d0,d2
000177F4 1028 0017                  		move.b	obWidth(a0),d0
000177F8 4880                       		ext.w	d0
000177FA D640                       		add.w	d0,d3
000177FC 49F8 F768                  		lea	($FFFFF768).w,a4
00017800 367C 0010                  		movea.w	#$10,a3
00017804 3C3C 0000                  		move.w	#0,d6
00017808 7A0D                       		moveq	#$D,d5
0001780A 6100 0000                  		bsr.w	FindFloor
0001780E 3F01                       		move.w	d1,-(sp)
00017810 3428 000C                  		move.w	obY(a0),d2
00017814 3628 0008                  		move.w	obX(a0),d3
00017818 7000                       		moveq	#0,d0
0001781A 1028 0016                  		move.b	obHeight(a0),d0
0001781E 4880                       		ext.w	d0
00017820 D440                       		add.w	d0,d2
00017822 1028 0017                  		move.b	obWidth(a0),d0
00017826 4880                       		ext.w	d0
00017828 4440                       		neg.w	d0
0001782A D640                       		add.w	d0,d3
0001782C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017830 367C 0010                  		movea.w	#$10,a3
00017834 3C3C 0000                  		move.w	#0,d6
00017838 7A0D                       		moveq	#$D,d5
0001783A 6100 0000                  		bsr.w	FindFloor
0001783E 301F                       		move.w	(sp)+,d0
00017840 6100 0000                  		bsr.w	Sonic_Angle
00017844 4A41                       		tst.w	d1
00017846 6700                       		beq.s	locret_146BE
00017848 6A00                       		bpl.s	loc_146C0
0001784A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001784E 6D00                       		blt.s	locret_146E6
00017850 D368 000C                  		add.w	d1,obY(a0)
00017854                            
00017854                            locret_146BE:
00017854 4E75                       		rts	
00017856                            ; ===========================================================================
00017856                            
00017856                            loc_146C0:
00017856 0C41 000E                  		cmpi.w	#$E,d1
0001785A 6E00                       		bgt.s	loc_146CC
0001785C                            
0001785C                            loc_146C6:
0001785C D368 000C                  		add.w	d1,obY(a0)
00017860 4E75                       		rts	
00017862                            ; ===========================================================================
00017862                            
00017862                            loc_146CC:
00017862 4A28 0038                  		tst.b	$38(a0)
00017866 66F4                       		bne.s	loc_146C6
00017868 08E8 0001 0022             		bset	#1,obStatus(a0)
0001786E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017874 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001787A 4E75                       		rts	
0001787C                            ; ===========================================================================
0001787C                            
0001787C                            locret_146E6:
0001787C 4E75                       		rts	
0001787E                            ; End of function Sonic_AnglePos
0001787E                            
0001787E                            ; ===========================================================================
0001787E 2428 0008                  		move.l	obX(a0),d2
00017882 3028 0010                  		move.w	obVelX(a0),d0
00017886 48C0                       		ext.l	d0
00017888 E180                       		asl.l	#8,d0
0001788A 9480                       		sub.l	d0,d2
0001788C 2142 0008                  		move.l	d2,obX(a0)
00017890 303C 0038                  		move.w	#$38,d0
00017894 48C0                       		ext.l	d0
00017896 E180                       		asl.l	#8,d0
00017898 9680                       		sub.l	d0,d3
0001789A 2143 000C                  		move.l	d3,obY(a0)
0001789E 4E75                       		rts	
000178A0                            ; ===========================================================================
000178A0                            
000178A0                            locret_1470A:
000178A0 4E75                       		rts	
000178A2                            ; ===========================================================================
000178A2 2628 000C                  		move.l	obY(a0),d3
000178A6 3028 0012                  		move.w	obVelY(a0),d0
000178AA 0440 0038                  		subi.w	#$38,d0
000178AE 3140 0012                  		move.w	d0,obVelY(a0)
000178B2 48C0                       		ext.l	d0
000178B4 E180                       		asl.l	#8,d0
000178B6 9680                       		sub.l	d0,d3
000178B8 2143 000C                  		move.l	d3,obY(a0)
000178BC 4E75                       		rts	
000178BE 4E75                       		rts	
000178C0                            ; ===========================================================================
000178C0 2428 0008                  		move.l	obX(a0),d2
000178C4 2628 000C                  		move.l	obY(a0),d3
000178C8 3028 0010                  		move.w	obVelX(a0),d0
000178CC 48C0                       		ext.l	d0
000178CE E180                       		asl.l	#8,d0
000178D0 9480                       		sub.l	d0,d2
000178D2 3028 0012                  		move.w	obVelY(a0),d0
000178D6 48C0                       		ext.l	d0
000178D8 E180                       		asl.l	#8,d0
000178DA 9680                       		sub.l	d0,d3
000178DC 2142 0008                  		move.l	d2,obX(a0)
000178E0 2143 000C                  		move.l	d3,obY(a0)
000178E4 4E75                       		rts	
000178E6                            
000178E6                            ; ---------------------------------------------------------------------------
000178E6                            ; Subroutine to	change Sonic's angle as he walks along the floor
000178E6                            ; ---------------------------------------------------------------------------
000178E6                            
000178E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178E6                            
000178E6                            
000178E6                            Sonic_Angle:
000178E6 1438 F76A                  		move.b	($FFFFF76A).w,d2
000178EA B240                       		cmp.w	d0,d1
000178EC 6F00                       		ble.s	loc_1475E
000178EE 1438 F768                  		move.b	($FFFFF768).w,d2
000178F2 3200                       		move.w	d0,d1
000178F4                            
000178F4                            loc_1475E:
000178F4 0802 0000                  		btst	#0,d2
000178F8 6600                       		bne.s	loc_1476A
000178FA 1142 0026                  		move.b	d2,obAngle(a0)
000178FE 4E75                       		rts	
00017900                            ; ===========================================================================
00017900                            
00017900                            loc_1476A:
00017900 1428 0026                  		move.b	obAngle(a0),d2
00017904 0602 0020                  		addi.b	#$20,d2
00017908 0202 00C0                  		andi.b	#$C0,d2
0001790C 1142 0026                  		move.b	d2,obAngle(a0)
00017910 4E75                       		rts	
00017912                            ; End of function Sonic_Angle
00017912                            
00017912                            ; ---------------------------------------------------------------------------
00017912                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00017912                            ; ---------------------------------------------------------------------------
00017912                            
00017912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017912                            
00017912                            
00017912                            Sonic_WalkVertR:
00017912 3428 000C                  		move.w	obY(a0),d2
00017916 3628 0008                  		move.w	obX(a0),d3
0001791A 7000                       		moveq	#0,d0
0001791C 1028 0017                  		move.b	obWidth(a0),d0
00017920 4880                       		ext.w	d0
00017922 4440                       		neg.w	d0
00017924 D440                       		add.w	d0,d2
00017926 1028 0016                  		move.b	obHeight(a0),d0
0001792A 4880                       		ext.w	d0
0001792C D640                       		add.w	d0,d3
0001792E 49F8 F768                  		lea	($FFFFF768).w,a4
00017932 367C 0010                  		movea.w	#$10,a3
00017936 3C3C 0000                  		move.w	#0,d6
0001793A 7A0D                       		moveq	#$D,d5
0001793C 6100 0000                  		bsr.w	FindWall
00017940 3F01                       		move.w	d1,-(sp)
00017942 3428 000C                  		move.w	obY(a0),d2
00017946 3628 0008                  		move.w	obX(a0),d3
0001794A 7000                       		moveq	#0,d0
0001794C 1028 0017                  		move.b	obWidth(a0),d0
00017950 4880                       		ext.w	d0
00017952 D440                       		add.w	d0,d2
00017954 1028 0016                  		move.b	obHeight(a0),d0
00017958 4880                       		ext.w	d0
0001795A D640                       		add.w	d0,d3
0001795C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017960 367C 0010                  		movea.w	#$10,a3
00017964 3C3C 0000                  		move.w	#0,d6
00017968 7A0D                       		moveq	#$D,d5
0001796A 6100 0000                  		bsr.w	FindWall
0001796E 301F                       		move.w	(sp)+,d0
00017970 6100 FF74                  		bsr.w	Sonic_Angle
00017974 4A41                       		tst.w	d1
00017976 6700                       		beq.s	locret_147F0
00017978 6A00                       		bpl.s	loc_147F2
0001797A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001797E 6D00 FF20                  		blt.w	locret_1470A
00017982 D368 0008                  		add.w	d1,obX(a0)
00017986                            
00017986                            locret_147F0:
00017986 4E75                       		rts	
00017988                            ; ===========================================================================
00017988                            
00017988                            loc_147F2:
00017988 0C41 000E                  		cmpi.w	#$E,d1
0001798C 6E00                       		bgt.s	loc_147FE
0001798E                            
0001798E                            loc_147F8:
0001798E D368 0008                  		add.w	d1,obX(a0)
00017992 4E75                       		rts	
00017994                            ; ===========================================================================
00017994                            
00017994                            loc_147FE:
00017994 4A28 0038                  		tst.b	$38(a0)
00017998 66F4                       		bne.s	loc_147F8
0001799A 08E8 0001 0022             		bset	#1,obStatus(a0)
000179A0 08A8 0005 0022             		bclr	#5,obStatus(a0)
000179A6 117C 0001 001D             		move.b	#1,obNextAni(a0)
000179AC 4E75                       		rts	
000179AE                            ; End of function Sonic_WalkVertR
000179AE                            
000179AE                            ; ---------------------------------------------------------------------------
000179AE                            ; Subroutine allowing Sonic to walk upside-down
000179AE                            ; ---------------------------------------------------------------------------
000179AE                            
000179AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000179AE                            
000179AE                            
000179AE                            Sonic_WalkCeiling:
000179AE 3428 000C                  		move.w	obY(a0),d2
000179B2 3628 0008                  		move.w	obX(a0),d3
000179B6 7000                       		moveq	#0,d0
000179B8 1028 0016                  		move.b	obHeight(a0),d0
000179BC 4880                       		ext.w	d0
000179BE 9440                       		sub.w	d0,d2
000179C0 0A42 000F                  		eori.w	#$F,d2
000179C4 1028 0017                  		move.b	obWidth(a0),d0
000179C8 4880                       		ext.w	d0
000179CA D640                       		add.w	d0,d3
000179CC 49F8 F768                  		lea	($FFFFF768).w,a4
000179D0 367C FFF0                  		movea.w	#-$10,a3
000179D4 3C3C 1000                  		move.w	#$1000,d6
000179D8 7A0D                       		moveq	#$D,d5
000179DA 6100 0000                  		bsr.w	FindFloor
000179DE 3F01                       		move.w	d1,-(sp)
000179E0 3428 000C                  		move.w	obY(a0),d2
000179E4 3628 0008                  		move.w	obX(a0),d3
000179E8 7000                       		moveq	#0,d0
000179EA 1028 0016                  		move.b	obHeight(a0),d0
000179EE 4880                       		ext.w	d0
000179F0 9440                       		sub.w	d0,d2
000179F2 0A42 000F                  		eori.w	#$F,d2
000179F6 1028 0017                  		move.b	obWidth(a0),d0
000179FA 4880                       		ext.w	d0
000179FC 9640                       		sub.w	d0,d3
000179FE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017A02 367C FFF0                  		movea.w	#-$10,a3
00017A06 3C3C 1000                  		move.w	#$1000,d6
00017A0A 7A0D                       		moveq	#$D,d5
00017A0C 6100 0000                  		bsr.w	FindFloor
00017A10 301F                       		move.w	(sp)+,d0
00017A12 6100 FED2                  		bsr.w	Sonic_Angle
00017A16 4A41                       		tst.w	d1
00017A18 6700                       		beq.s	locret_14892
00017A1A 6A00                       		bpl.s	loc_14894
00017A1C 0C41 FFF2                  		cmpi.w	#-$E,d1
00017A20 6D00 FE5A                  		blt.w	locret_146E6
00017A24 9368 000C                  		sub.w	d1,obY(a0)
00017A28                            
00017A28                            locret_14892:
00017A28 4E75                       		rts	
00017A2A                            ; ===========================================================================
00017A2A                            
00017A2A                            loc_14894:
00017A2A 0C41 000E                  		cmpi.w	#$E,d1
00017A2E 6E00                       		bgt.s	loc_148A0
00017A30                            
00017A30                            loc_1489A:
00017A30 9368 000C                  		sub.w	d1,obY(a0)
00017A34 4E75                       		rts	
00017A36                            ; ===========================================================================
00017A36                            
00017A36                            loc_148A0:
00017A36 4A28 0038                  		tst.b	$38(a0)
00017A3A 66F4                       		bne.s	loc_1489A
00017A3C 08E8 0001 0022             		bset	#1,obStatus(a0)
00017A42 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017A48 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017A4E 4E75                       		rts	
00017A50                            ; End of function Sonic_WalkCeiling
00017A50                            
00017A50                            ; ---------------------------------------------------------------------------
00017A50                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00017A50                            ; ---------------------------------------------------------------------------
00017A50                            
00017A50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A50                            
00017A50                            
00017A50                            Sonic_WalkVertL:
00017A50 3428 000C                  		move.w	obY(a0),d2
00017A54 3628 0008                  		move.w	obX(a0),d3
00017A58 7000                       		moveq	#0,d0
00017A5A 1028 0017                  		move.b	obWidth(a0),d0
00017A5E 4880                       		ext.w	d0
00017A60 9440                       		sub.w	d0,d2
00017A62 1028 0016                  		move.b	obHeight(a0),d0
00017A66 4880                       		ext.w	d0
00017A68 9640                       		sub.w	d0,d3
00017A6A 0A43 000F                  		eori.w	#$F,d3
00017A6E 49F8 F768                  		lea	($FFFFF768).w,a4
00017A72 367C FFF0                  		movea.w	#-$10,a3
00017A76 3C3C 0800                  		move.w	#$800,d6
00017A7A 7A0D                       		moveq	#$D,d5
00017A7C 6100 0000                  		bsr.w	FindWall
00017A80 3F01                       		move.w	d1,-(sp)
00017A82 3428 000C                  		move.w	obY(a0),d2
00017A86 3628 0008                  		move.w	obX(a0),d3
00017A8A 7000                       		moveq	#0,d0
00017A8C 1028 0017                  		move.b	obWidth(a0),d0
00017A90 4880                       		ext.w	d0
00017A92 D440                       		add.w	d0,d2
00017A94 1028 0016                  		move.b	obHeight(a0),d0
00017A98 4880                       		ext.w	d0
00017A9A 9640                       		sub.w	d0,d3
00017A9C 0A43 000F                  		eori.w	#$F,d3
00017AA0 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017AA4 367C FFF0                  		movea.w	#-$10,a3
00017AA8 3C3C 0800                  		move.w	#$800,d6
00017AAC 7A0D                       		moveq	#$D,d5
00017AAE 6100 0000                  		bsr.w	FindWall
00017AB2 301F                       		move.w	(sp)+,d0
00017AB4 6100 FE30                  		bsr.w	Sonic_Angle
00017AB8 4A41                       		tst.w	d1
00017ABA 6700                       		beq.s	locret_14934
00017ABC 6A00                       		bpl.s	loc_14936
00017ABE 0C41 FFF2                  		cmpi.w	#-$E,d1
00017AC2 6D00 FDDC                  		blt.w	locret_1470A
00017AC6 9368 0008                  		sub.w	d1,obX(a0)
00017ACA                            
00017ACA                            locret_14934:
00017ACA 4E75                       		rts	
00017ACC                            ; ===========================================================================
00017ACC                            
00017ACC                            loc_14936:
00017ACC 0C41 000E                  		cmpi.w	#$E,d1
00017AD0 6E00                       		bgt.s	loc_14942
00017AD2                            
00017AD2                            loc_1493C:
00017AD2 9368 0008                  		sub.w	d1,obX(a0)
00017AD6 4E75                       		rts	
00017AD8                            ; ===========================================================================
00017AD8                            
00017AD8                            loc_14942:
00017AD8 4A28 0038                  		tst.b	$38(a0)
00017ADC 66F4                       		bne.s	loc_1493C
00017ADE 08E8 0001 0022             		bset	#1,obStatus(a0)
00017AE4 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017AEA 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017AF0 4E75                       		rts	
00017AF2                            ; End of function Sonic_WalkVertL
00017AF2                            ; End of function Sonic_WalkVertL
00017AF2                            
00017AF2                            		include	"_incObj\sub FindNearestTile.asm"
00017AF2                            ; ---------------------------------------------------------------------------
00017AF2                            ; Subroutine to	find which tile	the object is standing on
00017AF2                            
00017AF2                            ; input:
00017AF2                            ;	d2 = y-position of object's bottom edge
00017AF2                            ;	d3 = x-position of object
00017AF2                            
00017AF2                            ; output:
00017AF2                            ;	a1 = address within 256x256 mappings where object is standing
00017AF2                            ;	     (refers to a 16x16 tile number)
00017AF2                            ; ---------------------------------------------------------------------------
00017AF2                            
00017AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AF2                            
00017AF2                            
00017AF2                            FindNearestTile:
00017AF2 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
00017AF4 E248                       		lsr.w	#1,d0
00017AF6 0240 0380                  		andi.w	#$380,d0
00017AFA 3203                       		move.w	d3,d1		; get x-pos. of object
00017AFC E049                       		lsr.w	#8,d1
00017AFE 0241 007F                  		andi.w	#$7F,d1
00017B02 D041                       		add.w	d1,d0		; combine
00017B04 72FF                       		moveq	#-1,d1
00017B06 43F8 A400                  		lea	(v_lvllayout).w,a1
00017B0A 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
00017B0E 6700                       		beq.s	@blanktile	; branch if 0
00017B10 6B00                       		bmi.s	@specialtile	; branch if >$7F
00017B12 5301                       		subq.b	#1,d1
00017B14 4881                       		ext.w	d1
00017B16 EE59                       		ror.w	#7,d1
00017B18 3002                       		move.w	d2,d0
00017B1A D040                       		add.w	d0,d0
00017B1C 0240 01E0                  		andi.w	#$1E0,d0
00017B20 D240                       		add.w	d0,d1
00017B22 3003                       		move.w	d3,d0
00017B24 E648                       		lsr.w	#3,d0
00017B26 0240 001E                  		andi.w	#$1E,d0
00017B2A D240                       		add.w	d0,d1
00017B2C                            
00017B2C                            @blanktile:
00017B2C 2241                       		movea.l	d1,a1
00017B2E 4E75                       		rts	
00017B30                            ; ===========================================================================
00017B30                            
00017B30                            @specialtile:
00017B30 0241 007F                  		andi.w	#$7F,d1
00017B34 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
00017B3A 6700                       		beq.s	@treatasnormal	; if not, branch
00017B3C 5241                       		addq.w	#1,d1
00017B3E 0C41 0029                  		cmpi.w	#$29,d1
00017B42 6600                       		bne.s	@treatasnormal
00017B44 323C 0051                  		move.w	#$51,d1
00017B48                            
00017B48                            	@treatasnormal:
00017B48 5301                       		subq.b	#1,d1
00017B4A EE59                       		ror.w	#7,d1
00017B4C 3002                       		move.w	d2,d0
00017B4E D040                       		add.w	d0,d0
00017B50 0240 01E0                  		andi.w	#$1E0,d0
00017B54 D240                       		add.w	d0,d1
00017B56 3003                       		move.w	d3,d0
00017B58 E648                       		lsr.w	#3,d0
00017B5A 0240 001E                  		andi.w	#$1E,d0
00017B5E D240                       		add.w	d0,d1
00017B60 2241                       		movea.l	d1,a1
00017B62 4E75                       		rts	
00017B64                            ; End of function FindNearestTile
00017B64                            ; End of function FindNearestTile
00017B64                            		include	"_incObj\sub FindFloor.asm"
00017B64                            ; ---------------------------------------------------------------------------
00017B64                            ; Subroutine to	find the floor
00017B64                            
00017B64                            ; input:
00017B64                            ;	d2 = y-position of object's bottom edge
00017B64                            ;	d3 = x-position of object
00017B64                            ;	d5 = bit to test for solidness
00017B64                            
00017B64                            ; output:
00017B64                            ;	d1 = distance to the floor
00017B64                            ;	a1 = address within 256x256 mappings where object is standing
00017B64                            ;	     (refers to a 16x16 tile number)
00017B64                            ;	(a4) = floor angle
00017B64                            ; ---------------------------------------------------------------------------
00017B64                            
00017B64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B64                            
00017B64                            
00017B64                            FindFloor:
00017B64 618C                       		bsr.s	FindNearestTile
00017B66 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00017B68 3800                       		move.w	d0,d4
00017B6A 0240 07FF                  		andi.w	#$7FF,d0
00017B6E 6700                       		beq.s	@isblank	; branch if tile is blank
00017B70 0B04                       		btst	d5,d4		; is the tile solid?
00017B72 6600                       		bne.s	@issolid	; if yes, branch
00017B74                            
00017B74                            @isblank:
00017B74 D44B                       		add.w	a3,d2
00017B76 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00017B7A 944B                       		sub.w	a3,d2
00017B7C 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00017B80 4E75                       		rts	
00017B82                            ; ===========================================================================
00017B82                            
00017B82                            @issolid:
00017B82 2478 F796                  		movea.l	(v_collindex).w,a2
00017B86 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00017B8A 0240 00FF                  		andi.w	#$FF,d0
00017B8E 67E4                       		beq.s	@isblank	; branch if 0
00017B90 45F9 0000 0000             		lea	(AngleMap).l,a2
00017B96 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00017B9A E948                       		lsl.w	#4,d0
00017B9C 3203                       		move.w	d3,d1		; get x-pos. of object
00017B9E 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00017BA2 6700                       		beq.s	@noflip		; if not, branch
00017BA4 4641                       		not.w	d1
00017BA6 4414                       		neg.b	(a4)
00017BA8                            
00017BA8                            	@noflip:
00017BA8 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017BAC 6700                       		beq.s	@noflip2	; if not, branch
00017BAE 0614 0040                  		addi.b	#$40,(a4)
00017BB2 4414                       		neg.b	(a4)
00017BB4 0414 0040                  		subi.b	#$40,(a4)
00017BB8                            
00017BB8                            	@noflip2:
00017BB8 0241 000F                  		andi.w	#$F,d1
00017BBC D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017BBE 45F9 0000 0000             		lea	(CollArray1).l,a2
00017BC4 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00017BC8 4880                       		ext.w	d0
00017BCA BD44                       		eor.w	d6,d4
00017BCC 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017BD0 6700                       		beq.s	@noflip3	; if not, branch
00017BD2 4440                       		neg.w	d0
00017BD4                            
00017BD4                            	@noflip3:
00017BD4 4A40                       		tst.w	d0
00017BD6 679C                       		beq.s	@isblank	; branch if height is 0
00017BD8 6B00                       		bmi.s	@negfloor	; branch if height is negative
00017BDA 0C00 0010                  		cmpi.b	#$10,d0
00017BDE 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017BE0 3202                       		move.w	d2,d1		; get y-pos. of object
00017BE2 0241 000F                  		andi.w	#$F,d1
00017BE6 D041                       		add.w	d1,d0
00017BE8 323C 000F                  		move.w	#$F,d1
00017BEC 9240                       		sub.w	d0,d1		; return distance to floor
00017BEE 4E75                       		rts	
00017BF0                            ; ===========================================================================
00017BF0                            
00017BF0                            @negfloor:
00017BF0 3202                       		move.w	d2,d1
00017BF2 0241 000F                  		andi.w	#$F,d1
00017BF6 D041                       		add.w	d1,d0
00017BF8 6A00 FF7A                  		bpl.w	@isblank
00017BFC                            
00017BFC                            @maxfloor:
00017BFC 944B                       		sub.w	a3,d2
00017BFE 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017C02 D44B                       		add.w	a3,d2
00017C04 0441 0010                  		subi.w	#$10,d1		; return distance to floor
00017C08 4E75                       		rts	
00017C0A                            ; End of function FindFloor
00017C0A                            
00017C0A                            
00017C0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C0A                            
00017C0A                            
00017C0A                            FindFloor2:
00017C0A 6100 FEE6                  		bsr.w	FindNearestTile
00017C0E 3011                       		move.w	(a1),d0
00017C10 3800                       		move.w	d0,d4
00017C12 0240 07FF                  		andi.w	#$7FF,d0
00017C16 6700                       		beq.s	@isblank2
00017C18 0B04                       		btst	d5,d4
00017C1A 6600                       		bne.s	@issolid
00017C1C                            
00017C1C                            @isblank2:
00017C1C 323C 000F                  		move.w	#$F,d1
00017C20 3002                       		move.w	d2,d0
00017C22 0240 000F                  		andi.w	#$F,d0
00017C26 9240                       		sub.w	d0,d1
00017C28 4E75                       		rts	
00017C2A                            ; ===========================================================================
00017C2A                            
00017C2A                            @issolid:
00017C2A 2478 F796                  		movea.l	(v_collindex).w,a2
00017C2E 1032 0000                  		move.b	(a2,d0.w),d0
00017C32 0240 00FF                  		andi.w	#$FF,d0
00017C36 67E4                       		beq.s	@isblank2
00017C38 45F9 0000 0000             		lea	(AngleMap).l,a2
00017C3E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017C42 E948                       		lsl.w	#4,d0
00017C44 3203                       		move.w	d3,d1
00017C46 0804 000B                  		btst	#$B,d4
00017C4A 6700                       		beq.s	@noflip
00017C4C 4641                       		not.w	d1
00017C4E 4414                       		neg.b	(a4)
00017C50                            
00017C50                            	@noflip:
00017C50 0804 000C                  		btst	#$C,d4
00017C54 6700                       		beq.s	@noflip2
00017C56 0614 0040                  		addi.b	#$40,(a4)
00017C5A 4414                       		neg.b	(a4)
00017C5C 0414 0040                  		subi.b	#$40,(a4)
00017C60                            
00017C60                            	@noflip2:
00017C60 0241 000F                  		andi.w	#$F,d1
00017C64 D240                       		add.w	d0,d1
00017C66 45F9 0000 0000             		lea	(CollArray1).l,a2
00017C6C 1032 1000                  		move.b	(a2,d1.w),d0
00017C70 4880                       		ext.w	d0
00017C72 BD44                       		eor.w	d6,d4
00017C74 0804 000C                  		btst	#$C,d4
00017C78 6700                       		beq.s	@noflip3
00017C7A 4440                       		neg.w	d0
00017C7C                            
00017C7C                            	@noflip3:
00017C7C 4A40                       		tst.w	d0
00017C7E 679C                       		beq.s	@isblank2
00017C80 6B00                       		bmi.s	@negfloor
00017C82 3202                       		move.w	d2,d1
00017C84 0241 000F                  		andi.w	#$F,d1
00017C88 D041                       		add.w	d1,d0
00017C8A 323C 000F                  		move.w	#$F,d1
00017C8E 9240                       		sub.w	d0,d1
00017C90 4E75                       		rts	
00017C92                            ; ===========================================================================
00017C92                            
00017C92                            @negfloor:
00017C92 3202                       		move.w	d2,d1
00017C94 0241 000F                  		andi.w	#$F,d1
00017C98 D041                       		add.w	d1,d0
00017C9A 6A00 FF80                  		bpl.w	@isblank2
00017C9E 4641                       		not.w	d1
00017CA0 4E75                       		rts	
00017CA2                            ; End of function FindFloor2
00017CA2                            ; End of function FindFloor2
00017CA2                            		include	"_incObj\sub FindWall.asm"
00017CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017CA2                            
00017CA2                            
00017CA2                            FindWall:
00017CA2 6100 FE4E                  		bsr.w	FindNearestTile
00017CA6 3011                       		move.w	(a1),d0
00017CA8 3800                       		move.w	d0,d4
00017CAA 0240 07FF                  		andi.w	#$7FF,d0
00017CAE 6700                       		beq.s	loc_14B1E
00017CB0 0B04                       		btst	d5,d4
00017CB2 6600                       		bne.s	loc_14B2C
00017CB4                            
00017CB4                            loc_14B1E:
00017CB4 D64B                       		add.w	a3,d3
00017CB6 6100 0000                  		bsr.w	FindWall2
00017CBA 964B                       		sub.w	a3,d3
00017CBC 0641 0010                  		addi.w	#$10,d1
00017CC0 4E75                       		rts	
00017CC2                            ; ===========================================================================
00017CC2                            
00017CC2                            loc_14B2C:
00017CC2 2478 F796                  		movea.l	(v_collindex).w,a2
00017CC6 1032 0000                  		move.b	(a2,d0.w),d0
00017CCA 0240 00FF                  		andi.w	#$FF,d0
00017CCE 67E4                       		beq.s	loc_14B1E
00017CD0 45F9 0000 0000             		lea	(AngleMap).l,a2
00017CD6 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017CDA E948                       		lsl.w	#4,d0
00017CDC 3202                       		move.w	d2,d1
00017CDE 0804 000C                  		btst	#$C,d4
00017CE2 6700                       		beq.s	loc_14B5A
00017CE4 4641                       		not.w	d1
00017CE6 0614 0040                  		addi.b	#$40,(a4)
00017CEA 4414                       		neg.b	(a4)
00017CEC 0414 0040                  		subi.b	#$40,(a4)
00017CF0                            
00017CF0                            loc_14B5A:
00017CF0 0804 000B                  		btst	#$B,d4
00017CF4 6700                       		beq.s	loc_14B62
00017CF6 4414                       		neg.b	(a4)
00017CF8                            
00017CF8                            loc_14B62:
00017CF8 0241 000F                  		andi.w	#$F,d1
00017CFC D240                       		add.w	d0,d1
00017CFE 45F9 0000 0000             		lea	(CollArray2).l,a2
00017D04 1032 1000                  		move.b	(a2,d1.w),d0
00017D08 4880                       		ext.w	d0
00017D0A BD44                       		eor.w	d6,d4
00017D0C 0804 000B                  		btst	#$B,d4
00017D10 6700                       		beq.s	loc_14B7E
00017D12 4440                       		neg.w	d0
00017D14                            
00017D14                            loc_14B7E:
00017D14 4A40                       		tst.w	d0
00017D16 679C                       		beq.s	loc_14B1E
00017D18 6B00                       		bmi.s	loc_14B9A
00017D1A 0C00 0010                  		cmpi.b	#$10,d0
00017D1E 6700                       		beq.s	loc_14BA6
00017D20 3203                       		move.w	d3,d1
00017D22 0241 000F                  		andi.w	#$F,d1
00017D26 D041                       		add.w	d1,d0
00017D28 323C 000F                  		move.w	#$F,d1
00017D2C 9240                       		sub.w	d0,d1
00017D2E 4E75                       		rts	
00017D30                            ; ===========================================================================
00017D30                            
00017D30                            loc_14B9A:
00017D30 3203                       		move.w	d3,d1
00017D32 0241 000F                  		andi.w	#$F,d1
00017D36 D041                       		add.w	d1,d0
00017D38 6A00 FF7A                  		bpl.w	loc_14B1E
00017D3C                            
00017D3C                            loc_14BA6:
00017D3C 964B                       		sub.w	a3,d3
00017D3E 6100 0000                  		bsr.w	FindWall2
00017D42 D64B                       		add.w	a3,d3
00017D44 0441 0010                  		subi.w	#$10,d1
00017D48 4E75                       		rts	
00017D4A                            ; End of function FindWall
00017D4A                            
00017D4A                            
00017D4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D4A                            
00017D4A                            
00017D4A                            FindWall2:
00017D4A 6100 FDA6                  		bsr.w	FindNearestTile
00017D4E 3011                       		move.w	(a1),d0
00017D50 3800                       		move.w	d0,d4
00017D52 0240 07FF                  		andi.w	#$7FF,d0
00017D56 6700                       		beq.s	loc_14BC6
00017D58 0B04                       		btst	d5,d4
00017D5A 6600                       		bne.s	loc_14BD4
00017D5C                            
00017D5C                            loc_14BC6:
00017D5C 323C 000F                  		move.w	#$F,d1
00017D60 3003                       		move.w	d3,d0
00017D62 0240 000F                  		andi.w	#$F,d0
00017D66 9240                       		sub.w	d0,d1
00017D68 4E75                       		rts	
00017D6A                            ; ===========================================================================
00017D6A                            
00017D6A                            loc_14BD4:
00017D6A 2478 F796                  		movea.l	(v_collindex).w,a2
00017D6E 1032 0000                  		move.b	(a2,d0.w),d0
00017D72 0240 00FF                  		andi.w	#$FF,d0
00017D76 67E4                       		beq.s	loc_14BC6
00017D78 45F9 0000 0000             		lea	(AngleMap).l,a2
00017D7E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017D82 E948                       		lsl.w	#4,d0
00017D84 3202                       		move.w	d2,d1
00017D86 0804 000C                  		btst	#$C,d4
00017D8A 6700                       		beq.s	loc_14C02
00017D8C 4641                       		not.w	d1
00017D8E 0614 0040                  		addi.b	#$40,(a4)
00017D92 4414                       		neg.b	(a4)
00017D94 0414 0040                  		subi.b	#$40,(a4)
00017D98                            
00017D98                            loc_14C02:
00017D98 0804 000B                  		btst	#$B,d4
00017D9C 6700                       		beq.s	loc_14C0A
00017D9E 4414                       		neg.b	(a4)
00017DA0                            
00017DA0                            loc_14C0A:
00017DA0 0241 000F                  		andi.w	#$F,d1
00017DA4 D240                       		add.w	d0,d1
00017DA6 45F9 0000 0000             		lea	(CollArray2).l,a2
00017DAC 1032 1000                  		move.b	(a2,d1.w),d0
00017DB0 4880                       		ext.w	d0
00017DB2 BD44                       		eor.w	d6,d4
00017DB4 0804 000B                  		btst	#$B,d4
00017DB8 6700                       		beq.s	loc_14C26
00017DBA 4440                       		neg.w	d0
00017DBC                            
00017DBC                            loc_14C26:
00017DBC 4A40                       		tst.w	d0
00017DBE 679C                       		beq.s	loc_14BC6
00017DC0 6B00                       		bmi.s	loc_14C3C
00017DC2 3203                       		move.w	d3,d1
00017DC4 0241 000F                  		andi.w	#$F,d1
00017DC8 D041                       		add.w	d1,d0
00017DCA 323C 000F                  		move.w	#$F,d1
00017DCE 9240                       		sub.w	d0,d1
00017DD0 4E75                       		rts	
00017DD2                            ; ===========================================================================
00017DD2                            
00017DD2                            loc_14C3C:
00017DD2 3203                       		move.w	d3,d1
00017DD4 0241 000F                  		andi.w	#$F,d1
00017DD8 D041                       		add.w	d1,d0
00017DDA 6A00 FF80                  		bpl.w	loc_14BC6
00017DDE 4641                       		not.w	d1
00017DE0 4E75                       		rts	
00017DE2                            ; End of function FindWall2
00017DE2                            ; End of function FindWall2
00017DE2                            
00017DE2                            ; ---------------------------------------------------------------------------
00017DE2                            ; Unused floor/wall subroutine - logs something	to do with collision
00017DE2                            ; ---------------------------------------------------------------------------
00017DE2                            
00017DE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DE2                            
00017DE2                            
00017DE2                            FloorLog_Unk:
00017DE2 4E75                       		rts	
00017DE4                            
00017DE4 43F9 0000 0000             		lea	(CollArray1).l,a1
00017DEA 45F9 0000 0000             		lea	(CollArray1).l,a2
00017DF0 363C 00FF                  		move.w	#$FF,d3
00017DF4                            
00017DF4                            loc_14C5E:
00017DF4 7A10                       		moveq	#$10,d5
00017DF6 343C 000F                  		move.w	#$F,d2
00017DFA                            
00017DFA                            loc_14C64:
00017DFA 7800                       		moveq	#0,d4
00017DFC 323C 000F                  		move.w	#$F,d1
00017E00                            
00017E00                            loc_14C6A:
00017E00 3019                       		move.w	(a1)+,d0
00017E02 EAA8                       		lsr.l	d5,d0
00017E04 D944                       		addx.w	d4,d4
00017E06 51C9 FFF8                  		dbf	d1,loc_14C6A
00017E0A                            
00017E0A 34C4                       		move.w	d4,(a2)+
00017E0C 92FC 0020                  		suba.w	#$20,a1
00017E10 5345                       		subq.w	#1,d5
00017E12 51CA FFE6                  		dbf	d2,loc_14C64
00017E16                            
00017E16 D2FC 0020                  		adda.w	#$20,a1
00017E1A 51CB FFD8                  		dbf	d3,loc_14C5E
00017E1E                            
00017E1E 43F9 0000 0000             		lea	(CollArray1).l,a1
00017E24 45F9 0000 0000             		lea	(CollArray2).l,a2
00017E2A 6100                       		bsr.s	FloorLog_Unk2
00017E2C 43F9 0000 0000             		lea	(CollArray1).l,a1
00017E32 45F9 0000 0000             		lea	(CollArray1).l,a2
00017E38                            
00017E38                            ; End of function FloorLog_Unk
00017E38                            
00017E38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E38                            
00017E38                            
00017E38                            FloorLog_Unk2:
00017E38 363C 0FFF                  		move.w	#$FFF,d3
00017E3C                            
00017E3C                            loc_14CA6:
00017E3C 7400                       		moveq	#0,d2
00017E3E 323C 000F                  		move.w	#$F,d1
00017E42 3019                       		move.w	(a1)+,d0
00017E44 6700                       		beq.s	loc_14CD4
00017E46 6B00                       		bmi.s	loc_14CBE
00017E48                            
00017E48                            loc_14CB2:
00017E48 E248                       		lsr.w	#1,d0
00017E4A 6400                       		bhs.s	loc_14CB8
00017E4C 5202                       		addq.b	#1,d2
00017E4E                            
00017E4E                            loc_14CB8:
00017E4E 51C9 FFF8                  		dbf	d1,loc_14CB2
00017E52                            
00017E52 6000                       		bra.s	loc_14CD6
00017E54                            ; ===========================================================================
00017E54                            
00017E54                            loc_14CBE:
00017E54 0C40 FFFF                  		cmpi.w	#-1,d0
00017E58 6700                       		beq.s	loc_14CD0
00017E5A                            
00017E5A                            loc_14CC4:
00017E5A E348                       		lsl.w	#1,d0
00017E5C 6400                       		bhs.s	loc_14CCA
00017E5E 5302                       		subq.b	#1,d2
00017E60                            
00017E60                            loc_14CCA:
00017E60 51C9 FFF8                  		dbf	d1,loc_14CC4
00017E64                            
00017E64 6000                       		bra.s	loc_14CD6
00017E66                            ; ===========================================================================
00017E66                            
00017E66                            loc_14CD0:
00017E66 303C 0010                  		move.w	#$10,d0
00017E6A                            
00017E6A                            loc_14CD4:
00017E6A 3400                       		move.w	d0,d2
00017E6C                            
00017E6C                            loc_14CD6:
00017E6C 14C2                       		move.b	d2,(a2)+
00017E6E 51CB FFCC                  		dbf	d3,loc_14CA6
00017E72                            
00017E72 4E75                       		rts	
00017E74                            
00017E74                            ; End of function FloorLog_Unk2
00017E74                            
00017E74                            
00017E74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E74                            
00017E74                            
00017E74                            Sonic_WalkSpeed:
00017E74 2628 0008                  		move.l	obX(a0),d3
00017E78 2428 000C                  		move.l	obY(a0),d2
00017E7C 3228 0010                  		move.w	obVelX(a0),d1
00017E80 48C1                       		ext.l	d1
00017E82 E181                       		asl.l	#8,d1
00017E84 D681                       		add.l	d1,d3
00017E86 3228 0012                  		move.w	obVelY(a0),d1
00017E8A 48C1                       		ext.l	d1
00017E8C E181                       		asl.l	#8,d1
00017E8E D481                       		add.l	d1,d2
00017E90 4842                       		swap	d2
00017E92 4843                       		swap	d3
00017E94 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017E98 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017E9C 1200                       		move.b	d0,d1
00017E9E 0600 0020                  		addi.b	#$20,d0
00017EA2 6A00                       		bpl.s	loc_14D1A
00017EA4 1001                       		move.b	d1,d0
00017EA6 6A00                       		bpl.s	loc_14D14
00017EA8 5300                       		subq.b	#1,d0
00017EAA                            
00017EAA                            loc_14D14:
00017EAA 0600 0020                  		addi.b	#$20,d0
00017EAE 6000                       		bra.s	loc_14D24
00017EB0                            ; ===========================================================================
00017EB0                            
00017EB0                            loc_14D1A:
00017EB0 1001                       		move.b	d1,d0
00017EB2 6A00                       		bpl.s	loc_14D20
00017EB4 5200                       		addq.b	#1,d0
00017EB6                            
00017EB6                            loc_14D20:
00017EB6 0600 001F                  		addi.b	#$1F,d0
00017EBA                            
00017EBA                            loc_14D24:
00017EBA 0200 00C0                  		andi.b	#$C0,d0
00017EBE 6700 0000                  		beq.w	loc_14DF0
00017EC2 0C00 0080                  		cmpi.b	#$80,d0
00017EC6 6700 0000                  		beq.w	loc_14F7C
00017ECA 0201 0038                  		andi.b	#$38,d1
00017ECE 6600                       		bne.s	loc_14D3C
00017ED0 5042                       		addq.w	#8,d2
00017ED2                            
00017ED2                            loc_14D3C:
00017ED2 0C00 0040                  		cmpi.b	#$40,d0
00017ED6 6700 0000                  		beq.w	loc_1504A
00017EDA 6000 0000                  		bra.w	loc_14EBC
00017EDE                            
00017EDE                            ; End of function Sonic_WalkSpeed
00017EDE                            
00017EDE                            
00017EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EDE                            
00017EDE                            
00017EDE                            sub_14D48:
00017EDE 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017EE2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017EE6 0600 0020                  		addi.b	#$20,d0
00017EEA 0200 00C0                  		andi.b	#$C0,d0
00017EEE 0C00 0040                  		cmpi.b	#$40,d0
00017EF2 6700 0000                  		beq.w	loc_14FD6
00017EF6 0C00 0080                  		cmpi.b	#$80,d0
00017EFA 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017EFE 0C00 00C0                  		cmpi.b	#$C0,d0
00017F02 6700 0000                  		beq.w	sub_14E50
00017F06                            
00017F06                            ; End of function sub_14D48
00017F06                            
00017F06                            ; ---------------------------------------------------------------------------
00017F06                            ; Subroutine to	make Sonic land	on the floor after jumping
00017F06                            ; ---------------------------------------------------------------------------
00017F06                            
00017F06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F06                            
00017F06                            
00017F06                            Sonic_HitFloor:
00017F06 3428 000C                  		move.w	obY(a0),d2
00017F0A 3628 0008                  		move.w	obX(a0),d3
00017F0E 7000                       		moveq	#0,d0
00017F10 1028 0016                  		move.b	obHeight(a0),d0
00017F14 4880                       		ext.w	d0
00017F16 D440                       		add.w	d0,d2
00017F18 1028 0017                  		move.b	obWidth(a0),d0
00017F1C 4880                       		ext.w	d0
00017F1E D640                       		add.w	d0,d3
00017F20 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F24 367C 0010                  		movea.w	#$10,a3
00017F28 3C3C 0000                  		move.w	#0,d6
00017F2C 7A0D                       		moveq	#$D,d5
00017F2E 6100 FC34                  		bsr.w	FindFloor
00017F32 3F01                       		move.w	d1,-(sp)
00017F34 3428 000C                  		move.w	obY(a0),d2
00017F38 3628 0008                  		move.w	obX(a0),d3
00017F3C 7000                       		moveq	#0,d0
00017F3E 1028 0016                  		move.b	obHeight(a0),d0
00017F42 4880                       		ext.w	d0
00017F44 D440                       		add.w	d0,d2
00017F46 1028 0017                  		move.b	obWidth(a0),d0
00017F4A 4880                       		ext.w	d0
00017F4C 9640                       		sub.w	d0,d3
00017F4E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017F52 367C 0010                  		movea.w	#$10,a3
00017F56 3C3C 0000                  		move.w	#0,d6
00017F5A 7A0D                       		moveq	#$D,d5
00017F5C 6100 FC06                  		bsr.w	FindFloor
00017F60 301F                       		move.w	(sp)+,d0
00017F62 143C 0000                  		move.b	#0,d2
00017F66                            
00017F66                            loc_14DD0:
00017F66 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017F6A B240                       		cmp.w	d0,d1
00017F6C 6F00                       		ble.s	loc_14DDE
00017F6E 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017F72 C141                       		exg	d0,d1
00017F74                            
00017F74                            loc_14DDE:
00017F74 0803 0000                  		btst	#0,d3
00017F78 6700                       		beq.s	locret_14DE6
00017F7A 1602                       		move.b	d2,d3
00017F7C                            
00017F7C                            locret_14DE6:
00017F7C 4E75                       		rts	
00017F7E                            
00017F7E                            ; End of function Sonic_HitFloor
00017F7E                            
00017F7E                            ; ===========================================================================
00017F7E 3428 000C                  		move.w	obY(a0),d2
00017F82 3628 0008                  		move.w	obX(a0),d3
00017F86                            
00017F86                            loc_14DF0:
00017F86 0642 000A                  		addi.w	#$A,d2
00017F8A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F8E 367C 0010                  		movea.w	#$10,a3
00017F92 3C3C 0000                  		move.w	#0,d6
00017F96 7A0E                       		moveq	#$E,d5
00017F98 6100 FBCA                  		bsr.w	FindFloor
00017F9C 143C 0000                  		move.b	#0,d2
00017FA0                            
00017FA0                            loc_14E0A:
00017FA0 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017FA4 0803 0000                  		btst	#0,d3
00017FA8 6700                       		beq.s	locret_14E16
00017FAA 1602                       		move.b	d2,d3
00017FAC                            
00017FAC                            locret_14E16:
00017FAC 4E75                       		rts	
00017FAE                            
00017FAE                            		include	"_incObj\sub ObjFloorDist.asm"
00017FAE                            ; ---------------------------------------------------------------------------
00017FAE                            ; Subroutine to find the distance of an object to the floor
00017FAE                            
00017FAE                            ; input:
00017FAE                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017FAE                            
00017FAE                            ; output:
00017FAE                            ;	d1 = distance to the floor
00017FAE                            ;	d3 = floor angle
00017FAE                            ;	a1 = address within 256x256 mappings where object is standing
00017FAE                            ;	     (refers to a 16x16 tile number)
00017FAE                            ;	(a4) = floor angle
00017FAE                            ; ---------------------------------------------------------------------------
00017FAE                            
00017FAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FAE                            
00017FAE                            
00017FAE                            ObjFloorDist:
00017FAE 3628 0008                  		move.w	obX(a0),d3
00017FB2                            
00017FB2                            
00017FB2                            ObjFloorDist2:
00017FB2 3428 000C                  		move.w	obY(a0),d2
00017FB6 7000                       		moveq	#0,d0
00017FB8 1028 0016                  		move.b	obHeight(a0),d0
00017FBC 4880                       		ext.w	d0
00017FBE D440                       		add.w	d0,d2
00017FC0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FC4 18BC 0000                  		move.b	#0,(a4)
00017FC8 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017FCC 3C3C 0000                  		move.w	#0,d6
00017FD0 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017FD2 6100 FB90                  		bsr.w	FindFloor
00017FD6 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017FDA 0803 0000                  		btst	#0,d3
00017FDE 6700                       		beq.s	locret_14E4E
00017FE0 163C 0000                  		move.b	#0,d3
00017FE4                            
00017FE4                            	locret_14E4E:
00017FE4 4E75                       		rts	
00017FE6                            
00017FE6                            ; End of function ObjFloorDist2
00017FE6                            ; End of function ObjFloorDist2
00017FE6                            
00017FE6                            
00017FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FE6                            
00017FE6                            
00017FE6                            sub_14E50:
00017FE6 3428 000C                  		move.w	obY(a0),d2
00017FEA 3628 0008                  		move.w	obX(a0),d3
00017FEE 7000                       		moveq	#0,d0
00017FF0 1028 0017                  		move.b	obWidth(a0),d0
00017FF4 4880                       		ext.w	d0
00017FF6 9440                       		sub.w	d0,d2
00017FF8 1028 0016                  		move.b	obHeight(a0),d0
00017FFC 4880                       		ext.w	d0
00017FFE D640                       		add.w	d0,d3
00018000 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018004 367C 0010                  		movea.w	#$10,a3
00018008 3C3C 0000                  		move.w	#0,d6
0001800C 7A0E                       		moveq	#$E,d5
0001800E 6100 FC92                  		bsr.w	FindWall
00018012 3F01                       		move.w	d1,-(sp)
00018014 3428 000C                  		move.w	obY(a0),d2
00018018 3628 0008                  		move.w	obX(a0),d3
0001801C 7000                       		moveq	#0,d0
0001801E 1028 0017                  		move.b	obWidth(a0),d0
00018022 4880                       		ext.w	d0
00018024 D440                       		add.w	d0,d2
00018026 1028 0016                  		move.b	obHeight(a0),d0
0001802A 4880                       		ext.w	d0
0001802C D640                       		add.w	d0,d3
0001802E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018032 367C 0010                  		movea.w	#$10,a3
00018036 3C3C 0000                  		move.w	#0,d6
0001803A 7A0E                       		moveq	#$E,d5
0001803C 6100 FC64                  		bsr.w	FindWall
00018040 301F                       		move.w	(sp)+,d0
00018042 143C 00C0                  		move.b	#-$40,d2
00018046 6000 FF1E                  		bra.w	loc_14DD0
0001804A                            
0001804A                            ; End of function sub_14E50
0001804A                            
0001804A                            
0001804A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001804A                            
0001804A                            
0001804A                            sub_14EB4:
0001804A 3428 000C                  		move.w	obY(a0),d2
0001804E 3628 0008                  		move.w	obX(a0),d3
00018052                            
00018052                            loc_14EBC:
00018052 0643 000A                  		addi.w	#$A,d3
00018056 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001805A 367C 0010                  		movea.w	#$10,a3
0001805E 3C3C 0000                  		move.w	#0,d6
00018062 7A0E                       		moveq	#$E,d5
00018064 6100 FC3C                  		bsr.w	FindWall
00018068 143C 00C0                  		move.b	#-$40,d2
0001806C 6000 FF32                  		bra.w	loc_14E0A
00018070                            
00018070                            ; End of function sub_14EB4
00018070                            
00018070                            ; ---------------------------------------------------------------------------
00018070                            ; Subroutine to	detect when an object hits a wall to its right
00018070                            ; ---------------------------------------------------------------------------
00018070                            
00018070                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018070                            
00018070                            
00018070                            ObjHitWallRight:
00018070 D668 0008                  		add.w	obX(a0),d3
00018074 3428 000C                  		move.w	obY(a0),d2
00018078 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001807C 18BC 0000                  		move.b	#0,(a4)
00018080 367C 0010                  		movea.w	#$10,a3
00018084 3C3C 0000                  		move.w	#0,d6
00018088 7A0E                       		moveq	#$E,d5
0001808A 6100 FC16                  		bsr.w	FindWall
0001808E 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018092 0803 0000                  		btst	#0,d3
00018096 6700                       		beq.s	locret_14F06
00018098 163C 00C0                  		move.b	#-$40,d3
0001809C                            
0001809C                            locret_14F06:
0001809C 4E75                       		rts	
0001809E                            
0001809E                            ; End of function ObjHitWallRight
0001809E                            
0001809E                            ; ---------------------------------------------------------------------------
0001809E                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
0001809E                            ; touches them
0001809E                            ; ---------------------------------------------------------------------------
0001809E                            
0001809E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001809E                            
0001809E                            
0001809E                            Sonic_DontRunOnWalls:
0001809E 3428 000C                  		move.w	obY(a0),d2
000180A2 3628 0008                  		move.w	obX(a0),d3
000180A6 7000                       		moveq	#0,d0
000180A8 1028 0016                  		move.b	obHeight(a0),d0
000180AC 4880                       		ext.w	d0
000180AE 9440                       		sub.w	d0,d2
000180B0 0A42 000F                  		eori.w	#$F,d2
000180B4 1028 0017                  		move.b	obWidth(a0),d0
000180B8 4880                       		ext.w	d0
000180BA D640                       		add.w	d0,d3
000180BC 49F8 F768                  		lea	(v_anglebuffer).w,a4
000180C0 367C FFF0                  		movea.w	#-$10,a3
000180C4 3C3C 1000                  		move.w	#$1000,d6
000180C8 7A0E                       		moveq	#$E,d5
000180CA 6100 FA98                  		bsr.w	FindFloor
000180CE 3F01                       		move.w	d1,-(sp)
000180D0 3428 000C                  		move.w	obY(a0),d2
000180D4 3628 0008                  		move.w	obX(a0),d3
000180D8 7000                       		moveq	#0,d0
000180DA 1028 0016                  		move.b	obHeight(a0),d0
000180DE 4880                       		ext.w	d0
000180E0 9440                       		sub.w	d0,d2
000180E2 0A42 000F                  		eori.w	#$F,d2
000180E6 1028 0017                  		move.b	obWidth(a0),d0
000180EA 4880                       		ext.w	d0
000180EC 9640                       		sub.w	d0,d3
000180EE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000180F2 367C FFF0                  		movea.w	#-$10,a3
000180F6 3C3C 1000                  		move.w	#$1000,d6
000180FA 7A0E                       		moveq	#$E,d5
000180FC 6100 FA66                  		bsr.w	FindFloor
00018100 301F                       		move.w	(sp)+,d0
00018102 143C 0080                  		move.b	#-$80,d2
00018106 6000 FE5E                  		bra.w	loc_14DD0
0001810A                            ; End of function Sonic_DontRunOnWalls
0001810A                            
0001810A                            ; ===========================================================================
0001810A 3428 000C                  		move.w	obY(a0),d2
0001810E 3628 0008                  		move.w	obX(a0),d3
00018112                            
00018112                            loc_14F7C:
00018112 0442 000A                  		subi.w	#$A,d2
00018116 0A42 000F                  		eori.w	#$F,d2
0001811A 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001811E 367C FFF0                  		movea.w	#-$10,a3
00018122 3C3C 1000                  		move.w	#$1000,d6
00018126 7A0E                       		moveq	#$E,d5
00018128 6100 FA3A                  		bsr.w	FindFloor
0001812C 143C 0080                  		move.b	#-$80,d2
00018130 6000 FE6E                  		bra.w	loc_14E0A
00018134                            
00018134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018134                            
00018134                            
00018134                            ObjHitCeiling:
00018134 3428 000C                  		move.w	obY(a0),d2
00018138 3628 0008                  		move.w	obX(a0),d3
0001813C 7000                       		moveq	#0,d0
0001813E 1028 0016                  		move.b	obHeight(a0),d0
00018142 4880                       		ext.w	d0
00018144 9440                       		sub.w	d0,d2
00018146 0A42 000F                  		eori.w	#$F,d2
0001814A 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001814E 367C FFF0                  		movea.w	#-$10,a3
00018152 3C3C 1000                  		move.w	#$1000,d6
00018156 7A0E                       		moveq	#$E,d5
00018158 6100 FA0A                  		bsr.w	FindFloor
0001815C 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018160 0803 0000                  		btst	#0,d3
00018164 6700                       		beq.s	locret_14FD4
00018166 163C 0080                  		move.b	#-$80,d3
0001816A                            
0001816A                            locret_14FD4:
0001816A 4E75                       		rts	
0001816C                            ; End of function ObjHitCeiling
0001816C                            
0001816C                            ; ===========================================================================
0001816C                            
0001816C                            loc_14FD6:
0001816C 3428 000C                  		move.w	obY(a0),d2
00018170 3628 0008                  		move.w	obX(a0),d3
00018174 7000                       		moveq	#0,d0
00018176 1028 0017                  		move.b	obWidth(a0),d0
0001817A 4880                       		ext.w	d0
0001817C 9440                       		sub.w	d0,d2
0001817E 1028 0016                  		move.b	obHeight(a0),d0
00018182 4880                       		ext.w	d0
00018184 9640                       		sub.w	d0,d3
00018186 0A43 000F                  		eori.w	#$F,d3
0001818A 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001818E 367C FFF0                  		movea.w	#-$10,a3
00018192 3C3C 0800                  		move.w	#$800,d6
00018196 7A0E                       		moveq	#$E,d5
00018198 6100 FB08                  		bsr.w	FindWall
0001819C 3F01                       		move.w	d1,-(sp)
0001819E 3428 000C                  		move.w	obY(a0),d2
000181A2 3628 0008                  		move.w	obX(a0),d3
000181A6 7000                       		moveq	#0,d0
000181A8 1028 0017                  		move.b	obWidth(a0),d0
000181AC 4880                       		ext.w	d0
000181AE D440                       		add.w	d0,d2
000181B0 1028 0016                  		move.b	obHeight(a0),d0
000181B4 4880                       		ext.w	d0
000181B6 9640                       		sub.w	d0,d3
000181B8 0A43 000F                  		eori.w	#$F,d3
000181BC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000181C0 367C FFF0                  		movea.w	#-$10,a3
000181C4 3C3C 0800                  		move.w	#$800,d6
000181C8 7A0E                       		moveq	#$E,d5
000181CA 6100 FAD6                  		bsr.w	FindWall
000181CE 301F                       		move.w	(sp)+,d0
000181D0 143C 0040                  		move.b	#$40,d2
000181D4 6000 FD90                  		bra.w	loc_14DD0
000181D8                            
000181D8                            ; ---------------------------------------------------------------------------
000181D8                            ; Subroutine to	stop Sonic when	he jumps at a wall
000181D8                            ; ---------------------------------------------------------------------------
000181D8                            
000181D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181D8                            
000181D8                            
000181D8                            Sonic_HitWall:
000181D8 3428 000C                  		move.w	obY(a0),d2
000181DC 3628 0008                  		move.w	obX(a0),d3
000181E0                            
000181E0                            loc_1504A:
000181E0 0443 000A                  		subi.w	#$A,d3
000181E4 0A43 000F                  		eori.w	#$F,d3
000181E8 49F8 F768                  		lea	(v_anglebuffer).w,a4
000181EC 367C FFF0                  		movea.w	#-$10,a3
000181F0 3C3C 0800                  		move.w	#$800,d6
000181F4 7A0E                       		moveq	#$E,d5
000181F6 6100 FAAA                  		bsr.w	FindWall
000181FA 143C 0040                  		move.b	#$40,d2
000181FE 6000 FDA0                  		bra.w	loc_14E0A
00018202                            ; End of function Sonic_HitWall
00018202                            
00018202                            ; ---------------------------------------------------------------------------
00018202                            ; Subroutine to	detect when an object hits a wall to its left
00018202                            ; ---------------------------------------------------------------------------
00018202                            
00018202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018202                            
00018202                            
00018202                            ObjHitWallLeft:
00018202 D668 0008                  		add.w	obX(a0),d3
00018206 3428 000C                  		move.w	obY(a0),d2
0001820A                            		; Engine bug: colliding with left walls is erratic with this function.
0001820A                            		; The cause is this: a missing instruction to flip collision on the found
0001820A                            		; 16x16 block; this one:
0001820A                            		;eori.w	#$F,d3
0001820A 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001820E 18BC 0000                  		move.b	#0,(a4)
00018212 367C FFF0                  		movea.w	#-$10,a3
00018216 3C3C 0800                  		move.w	#$800,d6
0001821A 7A0E                       		moveq	#$E,d5
0001821C 6100 FA84                  		bsr.w	FindWall
00018220 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018224 0803 0000                  		btst	#0,d3
00018228 6700                       		beq.s	locret_15098
0001822A 163C 0040                  		move.b	#$40,d3
0001822E                            
0001822E                            locret_15098:
0001822E 4E75                       		rts	
00018230                            ; End of function ObjHitWallLeft
00018230                            
00018230                            ; ===========================================================================
00018230                            
00018230                            		include	"_incObj\66 Rotating Junction.asm"
00018230                            ; ---------------------------------------------------------------------------
00018230                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00018230                            ; ---------------------------------------------------------------------------
00018230                            
00018230                            Junction:
00018230 7000                       		moveq	#0,d0
00018232 1028 0024                  		move.b	obRoutine(a0),d0
00018236 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
0001823A 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
0001823E                            ; ===========================================================================
0001823E 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00018240 0000                       		dc.w Jun_Action-Jun_Index
00018242 0000                       		dc.w Jun_Display-Jun_Index
00018244 0000                       		dc.w Jun_Release-Jun_Index
00018246                            
00018246 =00000034                  jun_frame:	equ $34		; current frame
00018246 =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00018246 =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00018246                            ; ===========================================================================
00018246                            
00018246                            Jun_Main:	; Routine 0
00018246 5428 0024                  		addq.b	#2,obRoutine(a0)
0001824A 323C 0001                  		move.w	#1,d1
0001824E 2248                       		movea.l	a0,a1
00018250 6000                       		bra.s	@makeitem
00018252                            ; ===========================================================================
00018252                            
00018252                            	@repeat:
00018252 4EB9 0000 FEAE             		jsr	FindFreeObj
00018258 6600                       		bne.s	@fail
0001825A 12BC 0066                  		move.b	#id_Junction,0(a1)
0001825E 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00018262 3368 0008 0008             		move.w	obX(a0),obX(a1)
00018268 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001826E 337C 0180 0018             		move.w	#$180,obPriority(a1)
00018274 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
0001827A                            
0001827A                            @makeitem:
0001827A 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00018282 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00018288 0029 0004 0001             		ori.b	#4,obRender(a1)
0001828E 137C 0038 0014             		move.b	#$38,obActWid(a1)
00018294                            
00018294                            	@fail:
00018294 51C9 FFBC                  		dbf	d1,@repeat
00018298                            
00018298 117C 0030 0014             		move.b	#$30,obActWid(a0)
0001829E 317C 0200 0018             		move.w	#$200,obPriority(a0)
000182A4 317C 003C 0030             		move.w	#$3C,$30(a0)
000182AA 117C 0001 0034             		move.b	#1,jun_frame(a0)
000182B0 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
000182B6                            
000182B6                            Jun_Action:	; Routine 2
000182B6 6100 0000                  		bsr.w	Jun_ChkSwitch
000182BA 4A28 0001                  		tst.b	obRender(a0)
000182BE 6A00 0000                  		bpl.w	Jun_Display
000182C2 323C 0030                  		move.w	#$30,d1
000182C6 3401                       		move.w	d1,d2
000182C8 3602                       		move.w	d2,d3
000182CA 5243                       		addq.w	#1,d3
000182CC 3828 0008                  		move.w	obX(a0),d4
000182D0 6100 9B72                  		bsr.w	SolidObject
000182D4 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
000182DA 6700 0000                  		beq.w	Jun_Display	; if not, branch
000182DE                            
000182DE 43F8 D000                  		lea	(v_player).w,a1
000182E2 720E                       		moveq	#$E,d1
000182E4 3029 0008                  		move.w	obX(a1),d0
000182E8 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
000182EC 6500                       		bcs.s	@isleft		; if yes, branch
000182EE 7207                       		moveq	#7,d1		
000182F0                            
000182F0                            	@isleft:
000182F0 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
000182F4 6600                       		bne.s	Jun_Display	; if not, branch
000182F6                            
000182F6 1141 0032                  		move.b	d1,$32(a0)
000182FA 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
000182FE 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00018304 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
0001830A 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018310 337C 0000 0010             		move.w	#0,obVelX(a1)
00018316 337C 0000 0012             		move.w	#0,obVelY(a1)
0001831C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018322 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018328 08E9 0001 0022             		bset	#1,obStatus(a1)
0001832E 3429 0008                  		move.w	obX(a1),d2
00018332 3629 000C                  		move.w	obY(a1),d3
00018336 6100 0000                  		bsr.w	Jun_ChgPos
0001833A D569 0008                  		add.w	d2,obX(a1)
0001833E D769 000C                  		add.w	d3,obY(a1)
00018342 E0E9 0008                  		asr	obX(a1)
00018346 E0E9 000C                  		asr	obY(a1)
0001834A                            
0001834A                            Jun_Display:	; Routine 4
0001834A 6000 9660                  		bra.w	RememberState
0001834E                            ; ===========================================================================
0001834E                            
0001834E                            Jun_Release:	; Routine 6
0001834E 1028 001A                  		move.b	obFrame(a0),d0
00018352 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
00018356 6700                       		beq.s	@release	; if yes, branch
00018358 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
0001835C 6600                       		bne.s	@dontrelease	; if not, branch
0001835E                            
0001835E                            	@release:
0001835E B028 0032                  		cmp.b	$32(a0),d0
00018362 6700                       		beq.s	@dontrelease
00018364 43F8 D000                  		lea	(v_player).w,a1
00018368 337C 0000 0010             		move.w	#0,obVelX(a1)
0001836E 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018374 0C00 0004                  		cmpi.b	#4,d0
00018378 6700                       		beq.s	@isdown
0001837A 337C 0800 0010             		move.w	#$800,obVelX(a1)
00018380 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018386                            
00018386                            	@isdown:
00018386 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
0001838A 5928 0024                  		subq.b	#4,obRoutine(a0)
0001838E                            
0001838E                            	@dontrelease:
0001838E 6100                       		bsr.s	Jun_ChkSwitch
00018390 6100                       		bsr.s	Jun_ChgPos
00018392 6000 9618                  		bra.w	RememberState
00018396                            
00018396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018396                            
00018396                            
00018396                            Jun_ChkSwitch:
00018396 45F8 F7E0                  		lea	(f_switch).w,a2
0001839A 7000                       		moveq	#0,d0
0001839C 1028 0038                  		move.b	jun_switch(a0),d0
000183A0 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000183A6 6700                       		beq.s	@unpressed	; if not, branch
000183A8                            
000183A8 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
000183AC 6600                       		bne.s	@animate	; if yes, branch
000183AE 4428 0034                  		neg.b	jun_frame(a0)
000183B2 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
000183B8 6000                       		bra.s	@animate
000183BA                            ; ===========================================================================
000183BA                            
000183BA                            @unpressed:
000183BA 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
000183BE                            
000183BE                            @animate:
000183BE 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
000183C2 6A00                       		bpl.s	@nochange	; if time remains, branch
000183C4 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000183CA 1228 0034                  		move.b	jun_frame(a0),d1
000183CE 1028 001A                  		move.b	obFrame(a0),d0
000183D2 D001                       		add.b	d1,d0
000183D4 0200 000F                  		andi.b	#$F,d0
000183D8 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
000183DC                            
000183DC                            	@nochange:
000183DC 4E75                       		rts	
000183DE                            ; End of function Jun_ChkSwitch
000183DE                            
000183DE                            
000183DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183DE                            
000183DE                            
000183DE                            Jun_ChgPos:
000183DE 43F8 D000                  		lea	(v_player).w,a1
000183E2 7000                       		moveq	#0,d0
000183E4 1028 001A                  		move.b	obFrame(a0),d0
000183E8 D040                       		add.w	d0,d0
000183EA 45FB 0000                  		lea	@data(pc,d0.w),a2
000183EE 101A                       		move.b	(a2)+,d0
000183F0 4880                       		ext.w	d0
000183F2 D068 0008                  		add.w	obX(a0),d0
000183F6 3340 0008                  		move.w	d0,obX(a1)
000183FA 101A                       		move.b	(a2)+,d0
000183FC 4880                       		ext.w	d0
000183FE D068 000C                  		add.w	obY(a0),d0
00018402 3340 000C                  		move.w	d0,obY(a1)
00018406 4E75                       		rts	
00018408                            
00018408                            
00018408 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
0001840C E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018410 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
00018414 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
00018418 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
0001841C 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018420 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00018424 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018424 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018428                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00018428                            ; ---------------------------------------------------------------------------
00018428                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018428                            ; ---------------------------------------------------------------------------
00018428                            Map_Jun_internal:
00018428 0000                       		dc.w @gap0-Map_Jun_internal
0001842A 0000                       		dc.w @gap1-Map_Jun_internal
0001842C 0000                       		dc.w @gap2-Map_Jun_internal
0001842E 0000                       		dc.w @gap3-Map_Jun_internal
00018430 0000                       		dc.w @gap4-Map_Jun_internal
00018432 0000                       		dc.w @gap5-Map_Jun_internal
00018434 0000                       		dc.w @gap6-Map_Jun_internal
00018436 0000                       		dc.w @gap7-Map_Jun_internal
00018438 0000                       		dc.w @gap8-Map_Jun_internal
0001843A 0000                       		dc.w @gap9-Map_Jun_internal
0001843C 0000                       		dc.w @gapA-Map_Jun_internal
0001843E 0000                       		dc.w @gapB-Map_Jun_internal
00018440 0000                       		dc.w @gapC-Map_Jun_internal
00018442 0000                       		dc.w @gapD-Map_Jun_internal
00018444 0000                       		dc.w @gapE-Map_Jun_internal
00018446 0000                       		dc.w @gapF-Map_Jun_internal
00018448 0000                       		dc.w @circle-Map_Jun_internal
0001844A 06                         @gap0:		dc.b 6
0001844B E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018450 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00018455 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001845A E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
0001845F 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00018464 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00018469 06                         @gap1:		dc.b 6
0001846A F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
0001846F 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00018474 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00018479 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
0001847E 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00018483 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00018488 06                         @gap2:		dc.b 6
00018489 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
0001848E 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00018493 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00018498 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001849D 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000184A2 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000184A7 06                         @gap3:		dc.b 6
000184A8 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000184AD 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000184B2 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000184B7 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000184BC 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000184C1 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000184C6 06                         @gap4:		dc.b 6
000184C7 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
000184CC 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000184D1 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000184D6 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000184DB 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000184E0 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000184E5 06                         @gap5:		dc.b 6
000184E6 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000184EB 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000184F0 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000184F5 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000184FA 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000184FF 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00018504 06                         @gap6:		dc.b 6
00018505 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001850A 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
0001850F 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018514 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018519 180A 1000 00               		dc.b $18, $A, $10, 0, 0
0001851E 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018523 06                         @gap7:		dc.b 6
00018524 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018529 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
0001852E F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018533 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00018538 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0001853D 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00018542 06                         @gap8:		dc.b 6
00018543 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00018548 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
0001854D E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018552 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00018557 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
0001855C 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00018561 06                         @gap9:		dc.b 6
00018562 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00018567 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
0001856C DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00018571 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00018576 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
0001857B F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00018580 06                         @gapA:		dc.b 6
00018581 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00018586 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
0001858B D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00018590 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00018595 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
0001859A E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
0001859F 06                         @gapB:		dc.b 6
000185A0 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000185A5 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000185AA CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000185AF CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000185B4 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000185B9 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000185BE 06                         @gapC:		dc.b 6
000185BF D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000185C4 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000185C9 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
000185CE C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000185D3 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000185D8 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000185DD 06                         @gapD:		dc.b 6
000185DE D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000185E3 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000185E8 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000185ED CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000185F2 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000185F7 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000185FC 06                         @gapE:		dc.b 6
000185FD E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018602 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018607 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001860C D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018611 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018616 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001861B 06                         @gapF:		dc.b 6
0001861C E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018621 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00018626 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001862B DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00018630 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00018635 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001863A 0C                         @circle:	dc.b $C
0001863B C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00018640 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00018645 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001864A C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
0001864F D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00018654 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00018659 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
0001865E 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00018663 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00018668 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001866D 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00018672 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00018678 00                         		even
00018678 00                         		even
00018678                            		include	"_incObj\67 Running Disc.asm"
00018678                            ; ---------------------------------------------------------------------------
00018678                            ; Object 67 - disc that	you run	around (SBZ)
00018678                            ; ---------------------------------------------------------------------------
00018678                            
00018678                            RunningDisc:
00018678 7000                       		moveq	#0,d0
0001867A 1028 0024                  		move.b	obRoutine(a0),d0
0001867E 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
00018682 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
00018686                            ; ===========================================================================
00018686 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
00018688 0000                       		dc.w Disc_Action-Disc_Index
0001868A                            
0001868A =00000032                  disc_origX:	equ $32		; original x-axis position
0001868A =00000030                  disc_origY:	equ $30		; original y-axis position
0001868A                            ; ===========================================================================
0001868A                            
0001868A                            Disc_Main:	; Routine 0
0001868A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001868E 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
00018696 317C C344 0002             		move.w	#$C344,obGfx(a0)
0001869C 117C 0004 0001             		move.b	#4,obRender(a0)
000186A2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000186A8 117C 0008 0014             		move.b	#8,obActWid(a0)
000186AE 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
000186B4 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
000186BA 117C 0018 0034             		move.b	#$18,$34(a0)
000186C0 117C 0048 0038             		move.b	#$48,$38(a0)
000186C6 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000186CA 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000186CE 6700                       		beq.s	@typeis0	; branch if 0
000186D0 117C 0010 0034             		move.b	#$10,$34(a0)
000186D6 117C 0038 0038             		move.b	#$38,$38(a0)
000186DC                            
000186DC                            	@typeis0:
000186DC 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000186E0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000186E4 4881                       		ext.w	d1
000186E6 E741                       		asl.w	#3,d1
000186E8 3141 0036                  		move.w	d1,$36(a0)
000186EC 1028 0022                  		move.b	obStatus(a0),d0
000186F0 E418                       		ror.b	#2,d0
000186F2 0200 00C0                  		andi.b	#$C0,d0
000186F6 1140 0026                  		move.b	d0,obAngle(a0)
000186FA                            
000186FA                            Disc_Action:	; Routine 2
000186FA 6100 0000                  		bsr.w	Disc_MoveSonic
000186FE 6100 0000                  		bsr.w	Disc_MoveSpot
00018702 6000 0000                  		bra.w	Disc_ChkDel
00018706                            ; ===========================================================================
00018706                            
00018706                            Disc_MoveSonic:
00018706 7400                       		moveq	#0,d2
00018708 1428 0038                  		move.b	$38(a0),d2
0001870C 3602                       		move.w	d2,d3
0001870E D643                       		add.w	d3,d3
00018710 43F8 D000                  		lea	(v_player).w,a1
00018714 3029 0008                  		move.w	obX(a1),d0
00018718 9068 0032                  		sub.w	disc_origX(a0),d0
0001871C D042                       		add.w	d2,d0
0001871E B043                       		cmp.w	d3,d0
00018720 6400                       		bcc.s	loc_155A8
00018722 3229 000C                  		move.w	obY(a1),d1
00018726 9268 0030                  		sub.w	disc_origY(a0),d1
0001872A D242                       		add.w	d2,d1
0001872C B243                       		cmp.w	d3,d1
0001872E 6400                       		bcc.s	loc_155A8
00018730 0829 0001 0022             		btst	#1,obStatus(a1)
00018736 6700                       		beq.s	loc_155B8
00018738 4228 003A                  		clr.b	$3A(a0)
0001873C 4E75                       		rts	
0001873E                            ; ===========================================================================
0001873E                            
0001873E                            loc_155A8:
0001873E 4A28 003A                  		tst.b	$3A(a0)
00018742 6700                       		beq.s	locret_155B6
00018744 4229 0038                  		clr.b	$38(a1)
00018748 4228 003A                  		clr.b	$3A(a0)
0001874C                            
0001874C                            locret_155B6:
0001874C 4E75                       		rts	
0001874E                            ; ===========================================================================
0001874E                            
0001874E                            loc_155B8:
0001874E 4A28 003A                  		tst.b	$3A(a0)
00018752 6600                       		bne.s	loc_155E2
00018754 117C 0001 003A             		move.b	#1,$3A(a0)
0001875A 0829 0002 0022             		btst	#2,obStatus(a1)
00018760 6600                       		bne.s	loc_155D0
00018762 4229 001C                  		clr.b	obAnim(a1)
00018766                            
00018766                            loc_155D0:
00018766 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001876C 137C 0001 001D             		move.b	#1,obNextAni(a1)
00018772 137C 0001 0038             		move.b	#1,$38(a1)
00018778                            
00018778                            loc_155E2:
00018778 3029 0020                  		move.w	obInertia(a1),d0
0001877C 4A68 0036                  		tst.w	$36(a0)
00018780 6A00                       		bpl.s	loc_15608
00018782 0C40 FC00                  		cmpi.w	#-$400,d0
00018786 6F00                       		ble.s	loc_155FA
00018788 337C FC00 0020             		move.w	#-$400,obInertia(a1)
0001878E 4E75                       		rts	
00018790                            ; ===========================================================================
00018790                            
00018790                            loc_155FA:
00018790 0C40 F100                  		cmpi.w	#-$F00,d0
00018794 6C00                       		bge.s	locret_15606
00018796 337C F100 0020             		move.w	#-$F00,obInertia(a1)
0001879C                            
0001879C                            locret_15606:
0001879C 4E75                       		rts	
0001879E                            ; ===========================================================================
0001879E                            
0001879E                            loc_15608:
0001879E 0C40 0400                  		cmpi.w	#$400,d0
000187A2 6C00                       		bge.s	loc_15616
000187A4 337C 0400 0020             		move.w	#$400,obInertia(a1)
000187AA 4E75                       		rts	
000187AC                            ; ===========================================================================
000187AC                            
000187AC                            loc_15616:
000187AC 0C40 0F00                  		cmpi.w	#$F00,d0
000187B0 6F00                       		ble.s	locret_15622
000187B2 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
000187B8                            
000187B8                            locret_15622:
000187B8 4E75                       		rts	
000187BA                            ; ===========================================================================
000187BA                            
000187BA                            Disc_MoveSpot:
000187BA 3028 0036                  		move.w	$36(a0),d0
000187BE D168 0026                  		add.w	d0,obAngle(a0)
000187C2 1028 0026                  		move.b	obAngle(a0),d0
000187C6 4EB9 0000 3A82             		jsr	(CalcSine).l
000187CC 3428 0030                  		move.w	disc_origY(a0),d2
000187D0 3628 0032                  		move.w	disc_origX(a0),d3
000187D4 7800                       		moveq	#0,d4
000187D6 1828 0034                  		move.b	$34(a0),d4
000187DA E14C                       		lsl.w	#8,d4
000187DC 2A04                       		move.l	d4,d5
000187DE C9C0                       		muls.w	d0,d4
000187E0 4844                       		swap	d4
000187E2 CBC1                       		muls.w	d1,d5
000187E4 4845                       		swap	d5
000187E6 D842                       		add.w	d2,d4
000187E8 DA43                       		add.w	d3,d5
000187EA 3144 000C                  		move.w	d4,obY(a0)
000187EE 3145 0008                  		move.w	d5,obX(a0)
000187F2 4E75                       		rts	
000187F4                            ; ===========================================================================
000187F4                            
000187F4                            Disc_ChkDel:
00018810 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00018816                            
00018816                            	@delete:
00018816 4EF9 0000 FA62             		jmp	(DeleteObject).l
00018816 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001881C                            Map_Disc:	include	"_maps\Running Disc.asm"
0001881C                            ; ---------------------------------------------------------------------------
0001881C                            ; Sprite mappings - disc that you run around (SBZ)
0001881C                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001881C                            ; part of the level tiles.)
0001881C                            ; ---------------------------------------------------------------------------
0001881C                            Map_Disc_internal:
0001881C 0000                       		dc.w @spot-Map_Disc_internal
0001881E 01                         @spot:		dc.b 1
0001881F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018824                            		even
00018824                            		even
00018824                            		include	"_incObj\68 Conveyor Belt.asm"
00018824                            ; ---------------------------------------------------------------------------
00018824                            ; Object 68 - conveyor belts (SBZ)
00018824                            ; ---------------------------------------------------------------------------
00018824                            
00018824                            Conveyor:
00018824 7000                       		moveq	#0,d0
00018826 1028 0024                  		move.b	obRoutine(a0),d0
0001882A 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
0001882E 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
00018832                            ; ===========================================================================
00018832 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
00018834 0000                       		dc.w Conv_Action-Conv_Index
00018836                            
00018836 =00000036                  conv_speed:	equ $36
00018836 =00000038                  conv_width:	equ $38
00018836                            ; ===========================================================================
00018836                            
00018836                            Conv_Main:	; Routine 0
00018836 5428 0024                  		addq.b	#2,obRoutine(a0)
0001883A 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00018840 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018844 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018848 6700                       		beq.s	@typeis0	; if zero, branch
0001884A 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00018850                            
00018850                            	@typeis0:
00018850 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018854 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018858 4881                       		ext.w	d1
0001885A E841                       		asr.w	#4,d1
0001885C 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
00018860                            
00018860                            Conv_Action:	; Routine 2
00018860 6100                       		bsr.s	@movesonic
0001887E 4E75                       		rts	
00018880                            
00018880                            	@delete:
00018880 4EF9 0000 FA62             		jmp	(DeleteObject).l
00018886                            ; ===========================================================================
00018886                            
00018886                            @movesonic:
00018886 7400                       		moveq	#0,d2
00018888 1428 0038                  		move.b	conv_width(a0),d2
0001888C 3602                       		move.w	d2,d3
0001888E D643                       		add.w	d3,d3
00018890 43F8 D000                  		lea	(v_player).w,a1
00018894 3029 0008                  		move.w	obX(a1),d0
00018898 9068 0008                  		sub.w	obX(a0),d0
0001889C D042                       		add.w	d2,d0
0001889E B043                       		cmp.w	d3,d0
000188A0 6400                       		bcc.s	@notonconveyor
000188A2 3229 000C                  		move.w	obY(a1),d1
000188A6 9268 000C                  		sub.w	obY(a0),d1
000188AA 0641 0030                  		addi.w	#$30,d1
000188AE 0C41 0030                  		cmpi.w	#$30,d1
000188B2 6400                       		bcc.s	@notonconveyor
000188B4 0829 0001 0022             		btst	#1,obStatus(a1)
000188BA 6600                       		bne.s	@notonconveyor
000188BC 3028 0036                  		move.w	conv_speed(a0),d0
000188C0 D169 0008                  		add.w	d0,obX(a1)
000188C4                            
000188C4                            	@notonconveyor:
000188C4 4E75                       		rts	
000188C4 4E75                       		rts	
000188C6                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
000188C6                            ; ---------------------------------------------------------------------------
000188C6                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000188C6                            ; ---------------------------------------------------------------------------
000188C6                            
000188C6                            SpinPlatform:
000188C6 7000                       		moveq	#0,d0
000188C8 1028 0024                  		move.b	obRoutine(a0),d0
000188CC 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
000188D0 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
000188D4                            ; ===========================================================================
000188D4 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
000188D6 0000                       		dc.w Spin_Trapdoor-Spin_Index
000188D8 0000                       		dc.w Spin_Spinner-Spin_Index
000188DA                            
000188DA =00000030                  spin_timer:	equ $30		; time counter until change
000188DA =00000032                  spin_timelen:	equ $32		; time between changes (general)
000188DA                            ; ===========================================================================
000188DA                            
000188DA                            Spin_Main:	; Routine 0
000188DA 5428 0024                  		addq.b	#2,obRoutine(a0)
000188DE 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
000188E6 317C 4492 0002             		move.w	#$4492,obGfx(a0)
000188EC 0028 0004 0001             		ori.b	#4,obRender(a0)
000188F2 117C 0080 0014             		move.b	#$80,obActWid(a0)
000188F8 7000                       		moveq	#0,d0
000188FA 1028 0028                  		move.b	obSubtype(a0),d0
000188FE 0240 000F                  		andi.w	#$F,d0
00018902 C0FC 003C                  		mulu.w	#$3C,d0
00018906 3140 0032                  		move.w	d0,spin_timelen(a0)
0001890A 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
0001890E 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
00018910                            
00018910 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
00018914 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
0001891C 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00018922 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018928 117C 0002 001C             		move.b	#2,obAnim(a0)
0001892E 7000                       		moveq	#0,d0
00018930 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018934 3200                       		move.w	d0,d1
00018936 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001893A C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
0001893E 3140 0030                  		move.w	d0,spin_timer(a0)
00018942 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
00018946 0241 0070                  		andi.w	#$70,d1
0001894A 0641 0010                  		addi.w	#$10,d1
0001894E E549                       		lsl.w	#2,d1
00018950 5341                       		subq.w	#1,d1
00018952 3141 0036                  		move.w	d1,$36(a0)
00018956 6000                       		bra.s	Spin_Spinner
00018958                            ; ===========================================================================
00018958                            
00018958                            Spin_Trapdoor:	; Routine 2
00018958 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
0001895C 6A00                       		bpl.s	@animate	; if time remains, branch
0001895E                            
0001895E 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00018964 0868 0000 001C             		bchg	#0,obAnim(a0)
0001896A 4A28 0001                  		tst.b	obRender(a0)
0001896E 6A00                       		bpl.s	@animate
0001897A                            
0001897A                            	@animate:
0001897A 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00018980 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
00018986 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
0001898A 6600                       		bne.s	@notsolid	; if not, branch
0001898C 323C 004B                  		move.w	#$4B,d1
00018990 343C 000C                  		move.w	#$C,d2
00018994 3602                       		move.w	d2,d3
00018996 5243                       		addq.w	#1,d3
00018998 3828 0008                  		move.w	obX(a0),d4
0001899C 6100 94A6                  		bsr.w	SolidObject
000189A0 6000 900A                  		bra.w	RememberState
000189A4                            ; ===========================================================================
000189A4                            
000189A4                            @notsolid:
000189A4 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
000189AA 6700                       		beq.s	@display	; if not, branch
000189AC 43F8 D000                  		lea	(v_player).w,a1
000189B0 08A9 0003 0022             		bclr	#3,obStatus(a1)
000189B6 08A8 0003 0022             		bclr	#3,obStatus(a0)
000189BC 4228 0025                  		clr.b	obSolid(a0)
000189C0                            
000189C0                            	@display:
000189C0 6000 8FEA                  		bra.w	RememberState
000189C4                            ; ===========================================================================
000189C4                            
000189C4                            Spin_Spinner:	; Routine 4
000189C4 3038 FE04                  		move.w	(v_framecount).w,d0
000189C8 C068 0036                  		and.w	$36(a0),d0
000189CC 6600                       		bne.s	@delay
000189CE 117C 0001 0034             		move.b	#1,$34(a0)
000189D4                            
000189D4                            	@delay:
000189D4 4A28 0034                  		tst.b	$34(a0)
000189D8 6700                       		beq.s	@animate
000189DA 5368 0030                  		subq.w	#1,spin_timer(a0)
000189DE 6A00                       		bpl.s	@animate
000189E0 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000189E6 4228 0034                  		clr.b	$34(a0)
000189EA 0868 0000 001C             		bchg	#0,obAnim(a0)
000189F0                            
000189F0                            	@animate:
000189F0 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000189F6 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
000189FC 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00018A00 6600                       		bne.s	@notsolid2	; if not, branch
00018A02 323C 001B                  		move.w	#$1B,d1
00018A06 343C 0007                  		move.w	#7,d2
00018A0A 3602                       		move.w	d2,d3
00018A0C 5243                       		addq.w	#1,d3
00018A0E 3828 0008                  		move.w	obX(a0),d4
00018A12 6100 9430                  		bsr.w	SolidObject
00018A16 6000 8F94                  		bra.w	RememberState
00018A1A                            ; ===========================================================================
00018A1A                            
00018A1A                            @notsolid2:
00018A1A 0828 0003 0022             		btst	#3,obStatus(a0)
00018A20 6700                       		beq.s	@display
00018A22 43F8 D000                  		lea	(v_player).w,a1
00018A26 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018A2C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018A32 4228 0025                  		clr.b	obSolid(a0)
00018A36                            
00018A36                            	@display:
00018A36 6000 8F74                  		bra.w	RememberState
00018A36 6000 8F74                  		bra.w	RememberState
00018A3A                            		include	"_anim\SBZ Spinning Platforms.asm"
00018A3A                            ; ---------------------------------------------------------------------------
00018A3A                            ; Animation script - trapdoor (SBZ)
00018A3A                            ; ---------------------------------------------------------------------------
00018A3A 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
00018A3C 0000                       		dc.w @trapclose-Ani_Spin
00018A3E 0000                       		dc.w @spin1-Ani_Spin
00018A40 0000                       		dc.w @spin2-Ani_Spin
00018A42 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
00018A48 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00018A4E 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00018A62 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00018A76                            		even
00018A76                            		even
00018A76                            Map_Trap:	include	"_maps\Trapdoor.asm"
00018A76                            ; ---------------------------------------------------------------------------
00018A76                            ; Sprite mappings - trapdoor (SBZ)
00018A76                            ; ---------------------------------------------------------------------------
00018A76                            Map_Trap_internal:
00018A76 0000                       		dc.w @closed-Map_Trap_internal
00018A78 0000                       		dc.w @half-Map_Trap_internal
00018A7A 0000                       		dc.w @open-Map_Trap_internal
00018A7C 04                         @closed:	dc.b 4
00018A7D F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00018A82 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00018A87 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00018A8C F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00018A91 08                         @half:		dc.b 8
00018A92 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00018A97 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00018A9C 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00018AA1 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00018AA6 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00018AAB 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00018AB0 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00018AB5 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00018ABA 04                         @open:		dc.b 4
00018ABB 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018AC0 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00018AC5 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018ACA 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018AD0 00                         		even
00018AD0 00                         		even
00018AD0                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00018AD0                            ; ---------------------------------------------------------------------------
00018AD0                            ; Sprite mappings - spinning platforms (SBZ)
00018AD0                            ; ---------------------------------------------------------------------------
00018AD0                            Map_Spin_internal:
00018AD0 0000                       		dc.w @flat-Map_Spin_internal
00018AD2 0000                       		dc.w @spin1-Map_Spin_internal
00018AD4 0000                       		dc.w @spin2-Map_Spin_internal
00018AD6 0000                       		dc.w @spin3-Map_Spin_internal
00018AD8 0000                       		dc.w @spin4-Map_Spin_internal
00018ADA 02                         @flat:		dc.b 2
00018ADB F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018AE0 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00018AE5 02                         @spin1:		dc.b 2
00018AE6 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00018AEB 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018AF0 02                         @spin2:		dc.b 2
00018AF1 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018AF6 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00018AFB 02                         @spin3:		dc.b 2
00018AFC F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018B01 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018B06 02                         @spin4:		dc.b 2
00018B07 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00018B0C 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018B12 00                         		even
00018B12 00                         		even
00018B12                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
00018B12                            ; ---------------------------------------------------------------------------
00018B12                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018B12                            ; ---------------------------------------------------------------------------
00018B12                            
00018B12                            Saws:
00018B12 7000                       		moveq	#0,d0
00018B14 1028 0024                  		move.b	obRoutine(a0),d0
00018B18 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
00018B1C 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018B20                            ; ===========================================================================
00018B20 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00018B22 0000                       		dc.w Saw_Action-Saw_Index
00018B24                            
00018B24 =0000003A                  saw_origX:	equ $3A		; original x-axis position
00018B24 =00000038                  saw_origY:	equ $38		; original y-axis position
00018B24 =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00018B24                            ; ===========================================================================
00018B24                            
00018B24                            Saw_Main:	; Routine 0
00018B24 5428 0024                  		addq.b	#2,obRoutine(a0)
00018B28 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00018B30 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
00018B36 117C 0004 0001             		move.b	#4,obRender(a0)
00018B3C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018B42 117C 0020 0014             		move.b	#$20,obActWid(a0)
00018B48 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018B4E 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
00018B54 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00018B5A 6400                       		bcc.s	Saw_Action	; if yes, branch
00018B5C 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018B62                            
00018B62                            Saw_Action:	; Routine 2
00018B62 7000                       		moveq	#0,d0
00018B64 1028 0028                  		move.b	obSubtype(a0),d0
00018B68 0240 0007                  		andi.w	#7,d0
00018B6C D040                       		add.w	d0,d0
00018B6E 323B 0000                  		move.w	@index(pc,d0.w),d1
00018B72 4EBB 1000                  		jsr	@index(pc,d1.w)
00018B92 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00018B98                            
00018B98                            	@delete:
00018B98 4EF9 0000 FA62             		jmp	(DeleteObject).l
00018B9E                            ; ===========================================================================
00018B9E 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
00018BA4 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00018BA8                            ; ===========================================================================
00018BA8                            
00018BA8                            @type00:
00018BA8 4E75                       		rts			; doesn't move
00018BAA                            ; ===========================================================================
00018BAA                            
00018BAA                            @type01:
00018BAA 323C 0060                  		move.w	#$60,d1
00018BAE 7000                       		moveq	#0,d0
00018BB0 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00018BB4 0828 0000 0022             		btst	#0,obStatus(a0)
00018BBA 6700                       		beq.s	@noflip01
00018BBC 4440                       		neg.w	d0
00018BBE D041                       		add.w	d1,d0
00018BC0                            
00018BC0                            	@noflip01:
00018BC0 3228 003A                  		move.w	saw_origX(a0),d1
00018BC4 9240                       		sub.w	d0,d1
00018BC6 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00018BCA                            
00018BCA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018BCE 6A00                       		bpl.s	@sameframe01
00018BD0 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00018BD6 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00018BDC                            
00018BDC                            	@sameframe01:
00018BDC 4A28 0001                  		tst.b	obRender(a0)
00018BE0 6A00                       		bpl.s	@nosound01
00018BE2 3038 FE04                  		move.w	(v_framecount).w,d0
00018BE6 0240 000F                  		andi.w	#$F,d0
00018BEA 6600                       		bne.s	@nosound01
00018BF6                            
00018BF6                            	@nosound01:
00018BF6 4E75                       		rts	
00018BF8                            ; ===========================================================================
00018BF8                            
00018BF8                            @type02:
00018BF8 323C 0030                  		move.w	#$30,d1
00018BFC 7000                       		moveq	#0,d0
00018BFE 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018C02 0828 0000 0022             		btst	#0,obStatus(a0)
00018C08 6700                       		beq.s	@noflip02
00018C0A 4440                       		neg.w	d0
00018C0C 0640 0080                  		addi.w	#$80,d0
00018C10                            
00018C10                            	@noflip02:
00018C10 3228 0038                  		move.w	saw_origY(a0),d1
00018C14 9240                       		sub.w	d0,d1
00018C16 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
00018C1A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018C1E 6A00                       		bpl.s	@sameframe02
00018C20 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018C26 0868 0000 001A             		bchg	#0,obFrame(a0)
00018C2C                            
00018C2C                            	@sameframe02:
00018C2C 4A28 0001                  		tst.b	obRender(a0)
00018C30 6A00                       		bpl.s	@nosound02
00018C32 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018C36 0C00 0018                  		cmpi.b	#$18,d0
00018C3A 6600                       		bne.s	@nosound02
00018C46                            
00018C46                            	@nosound02:
00018C46 4E75                       		rts	
00018C48                            ; ===========================================================================
00018C48                            
00018C48                            @type03:
00018C48 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00018C4C 6600                       		bne.s	@here03		; if yes, branch
00018C4E                            
00018C4E 3038 D008                  		move.w	(v_player+obX).w,d0
00018C52 0440 00C0                  		subi.w	#$C0,d0
00018C56 6500                       		bcs.s	@nosaw03x
00018C58 9068 0008                  		sub.w	obX(a0),d0
00018C5C 6500                       		bcs.s	@nosaw03x
00018C5E 3038 D00C                  		move.w	(v_player+obY).w,d0
00018C62 0440 0080                  		subi.w	#$80,d0
00018C66 B068 000C                  		cmp.w	obY(a0),d0
00018C6A 6400                       		bcc.s	@nosaw03y
00018C6C 0640 0100                  		addi.w	#$100,d0
00018C70 B068 000C                  		cmp.w	obY(a0),d0
00018C74 6500                       		bcs.s	@nosaw03y
00018C76 117C 0001 003D             		move.b	#1,saw_here(a0)
00018C7C 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00018C82 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018C88 117C 0002 001A             		move.b	#2,obFrame(a0)
00018C98                            
00018C98                            	@nosaw03x:
00018C98 588F                       		addq.l	#4,sp
00018C9A                            
00018C9A                            	@nosaw03y:
00018C9A 4E75                       		rts	
00018C9C                            ; ===========================================================================
00018C9C                            
00018C9C                            @here03:
00018C9C 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
00018CA2 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018CA8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018CAC 6A00                       		bpl.s	@sameframe03
00018CAE 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018CB4 0868 0000 001A             		bchg	#0,obFrame(a0)
00018CBA                            
00018CBA                            	@sameframe03:
00018CBA 4E75                       		rts	
00018CBC                            ; ===========================================================================
00018CBC                            
00018CBC                            @type04:
00018CBC 4A28 003D                  		tst.b	saw_here(a0)
00018CC0 6600                       		bne.s	@here04
00018CC2 3038 D008                  		move.w	(v_player+obX).w,d0
00018CC6 0640 00E0                  		addi.w	#$E0,d0
00018CCA 9068 0008                  		sub.w	obX(a0),d0
00018CCE 6400                       		bcc.s	@nosaw04x
00018CD0 3038 D00C                  		move.w	(v_player+obY).w,d0
00018CD4 0440 0080                  		subi.w	#$80,d0
00018CD8 B068 000C                  		cmp.w	obY(a0),d0
00018CDC 6400                       		bcc.s	@nosaw04y
00018CDE 0640 0100                  		addi.w	#$100,d0
00018CE2 B068 000C                  		cmp.w	obY(a0),d0
00018CE6 6500                       		bcs.s	@nosaw04y
00018CE8 117C 0001 003D             		move.b	#1,saw_here(a0)
00018CEE 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018CF4 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018CFA 117C 0002 001A             		move.b	#2,obFrame(a0)
00018D0A                            
00018D0A                            	@nosaw04x:
00018D0A 588F                       		addq.l	#4,sp
00018D0C                            
00018D0C                            	@nosaw04y:
00018D0C 4E75                       		rts	
00018D0E                            ; ===========================================================================
00018D0E                            
00018D0E                            @here04:
00018D0E 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
00018D14 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018D1A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018D1E 6A00                       		bpl.s	@sameframe04
00018D20 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018D26 0868 0000 001A             		bchg	#0,obFrame(a0)
00018D2C                            
00018D2C                            	@sameframe04:
00018D2C 4E75                       		rts	
00018D2C 4E75                       		rts	
00018D2E                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018D2E                            ; ---------------------------------------------------------------------------
00018D2E                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018D2E                            ; ---------------------------------------------------------------------------
00018D2E                            Map_Saw_internal:
00018D2E 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018D30 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018D32 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018D34 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018D36 07                         @pizzacutter1:	dc.b 7
00018D37 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018D3C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018D41 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018D46 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018D4B E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018D50 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018D55 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018D5A 07                         @pizzacutter2:	dc.b 7
00018D5B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018D60 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018D65 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018D6A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018D6F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018D74 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018D79 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018D7E 04                         @groundsaw1:	dc.b 4
00018D7F E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018D84 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018D89 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018D8E 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018D93 04                         @groundsaw2:	dc.b 4
00018D94 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018D99 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018D9E 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018DA3 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018DA8                            		even
00018DA8                            		even
00018DA8                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018DA8                            ; ---------------------------------------------------------------------------
00018DA8                            ; Object 6B - stomper and sliding door (SBZ)
00018DA8                            ; ---------------------------------------------------------------------------
00018DA8                            
00018DA8                            ScrapStomp:
00018DA8 7000                       		moveq	#0,d0
00018DAA 1028 0024                  		move.b	obRoutine(a0),d0
00018DAE 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018DB2 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018DB6                            ; ===========================================================================
00018DB6 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018DB8 0000                       		dc.w Sto_Action-Sto_Index
00018DBA                            
00018DBA =00000016                  sto_height:	equ $16
00018DBA =00000034                  sto_origX:	equ $34		; original x-axis position
00018DBA =00000030                  sto_origY:	equ $30		; original y-axis position
00018DBA =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018DBA                            
00018DBA 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018DBE 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018DC2 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018DC6 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018DCA 8040 0005                  		dc.b  $80, $40,	  0,   5
00018DCE                            ; ===========================================================================
00018DCE                            
00018DCE                            Sto_Main:	; Routine 0
00018DCE 5428 0024                  		addq.b	#2,obRoutine(a0)
00018DD2 7000                       		moveq	#0,d0
00018DD4 1028 0028                  		move.b	obSubtype(a0),d0
00018DD8 E448                       		lsr.w	#2,d0
00018DDA 0240 001C                  		andi.w	#$1C,d0
00018DDE 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018DE2 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018DE6 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018DEA E448                       		lsr.w	#2,d0
00018DEC 1140 001A                  		move.b	d0,obFrame(a0)
00018DF0 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018DF8 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018DFE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018E04 6600                       		bne.s	@isSBZ12	; if not, branch
00018E06 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018E0C 6700                       		beq.s	@isSBZ3
00018E0E                            
00018E0E                            @chkdel:
00018E0E 45F8 FC00                  		lea	(v_objstate).w,a2
00018E12 7000                       		moveq	#0,d0
00018E14 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E18 6700                       		beq.s	@delete
00018E1A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018E20                            
00018E20                            	@delete:
00018E20 4EF9 0000 FA62             		jmp	(DeleteObject).l
00018E26                            ; ===========================================================================
00018E26                            
00018E26                            @isSBZ3:
00018E26 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018E2C 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018E32 6600                       		bne.s	@isSBZ12
00018E34 45F8 FC00                  		lea	(v_objstate).w,a2
00018E38 7000                       		moveq	#0,d0
00018E3A 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E3E 6700                       		beq.s	@isSBZ12
00018E40 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018E46 6700                       		beq.s	@isSBZ12
00018E48 4238 F7CB                  		clr.b	(v_obj6B).w
00018E4C 60C0                       		bra.s	@chkdel
00018E4E                            ; ===========================================================================
00018E4E                            
00018E4E                            @isSBZ12:
00018E4E 0028 0004 0001             		ori.b	#4,obRender(a0)
00018E54 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018E5A 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018E60 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018E66 7000                       		moveq	#0,d0
00018E68 101B                       		move.b	(a3)+,d0
00018E6A 3140 003C                  		move.w	d0,$3C(a0)
00018E6E 7000                       		moveq	#0,d0
00018E70 1028 0028                  		move.b	obSubtype(a0),d0
00018E74 6A00                       		bpl.s	Sto_Action
00018E76 0200 000F                  		andi.b	#$F,d0
00018E7A 1140 003E                  		move.b	d0,$3E(a0)
00018E7E 1153 0028                  		move.b	(a3),obSubtype(a0)
00018E82 0C13 0005                  		cmpi.b	#5,(a3)
00018E86 6600                       		bne.s	@chkgone
00018E88 08E8 0004 0001             		bset	#4,obRender(a0)
00018E8E                            
00018E8E                            	@chkgone:
00018E8E 45F8 FC00                  		lea	(v_objstate).w,a2
00018E92 7000                       		moveq	#0,d0
00018E94 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E98 6700                       		beq.s	Sto_Action
00018E9A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018EA0                            
00018EA0                            Sto_Action:	; Routine 2
00018EA0 3F28 0008                  		move.w	obX(a0),-(sp)
00018EA4 7000                       		moveq	#0,d0
00018EA6 1028 0028                  		move.b	obSubtype(a0),d0
00018EAA 0240 000F                  		andi.w	#$F,d0
00018EAE D040                       		add.w	d0,d0
00018EB0 323B 0000                  		move.w	@index(pc,d0.w),d1
00018EB4 4EBB 1000                  		jsr	@index(pc,d1.w)
00018EB8 381F                       		move.w	(sp)+,d4
00018EBA 4A28 0001                  		tst.b	obRender(a0)
00018EBE 6A00                       		bpl.s	@chkdel
00018EC0 7200                       		moveq	#0,d1
00018EC2 1228 0014                  		move.b	obActWid(a0),d1
00018EC6 0641 000B                  		addi.w	#$B,d1
00018ECA 7400                       		moveq	#0,d2
00018ECC 1428 0016                  		move.b	sto_height(a0),d2
00018ED0 3602                       		move.w	d2,d3
00018ED2 5243                       		addq.w	#1,d3
00018ED4 6100 8F6E                  		bsr.w	SolidObject
00018ED8                            
00018ED8                            	@chkdel:
00018EF4 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00018EFA                            
00018EFA                            	@chkgone:
00018EFA 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018F00 6600                       		bne.s	@delete
00018F02 4238 F7CB                  		clr.b	(v_obj6B).w
00018F06 45F8 FC00                  		lea	(v_objstate).w,a2
00018F0A 7000                       		moveq	#0,d0
00018F0C 1028 0023                  		move.b	obRespawnNo(a0),d0
00018F10 6700                       		beq.s	@delete
00018F12 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018F18                            
00018F18                            	@delete:
00018F18 4EF9 0000 FA62             		jmp	(DeleteObject).l
00018F1E                            ; ===========================================================================
00018F1E 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018F22 0000 0000                  		dc.w @type02-@index, @type03-@index
00018F26 0000 0000                  		dc.w @type04-@index, @type05-@index
00018F2A                            ; ===========================================================================
00018F2A                            
00018F2A                            @type00:
00018F2A 4E75                       		rts
00018F2C                            ; ===========================================================================
00018F2C                            
00018F2C                            @type01:
00018F2C 4A28 0038                  		tst.b	sto_active(a0)
00018F30 6600                       		bne.s	@isactive01
00018F32 45F8 F7E0                  		lea	(f_switch).w,a2
00018F36 7000                       		moveq	#0,d0
00018F38 1028 003E                  		move.b	$3E(a0),d0
00018F3C 0832 0000 0000             		btst	#0,(a2,d0.w)
00018F42 6700                       		beq.s	@loc_15DC2
00018F44 117C 0001 0038             		move.b	#1,sto_active(a0)
00018F4A                            
00018F4A                            	@isactive01:
00018F4A 3028 003C                  		move.w	$3C(a0),d0
00018F4E B068 003A                  		cmp.w	$3A(a0),d0
00018F52 6700                       		beq.s	@loc_15DE0
00018F54 5468 003A                  		addq.w	#2,$3A(a0)
00018F58                            
00018F58                            	@loc_15DC2:
00018F58 3028 003A                  		move.w	$3A(a0),d0
00018F5C 0828 0000 0022             		btst	#0,obStatus(a0)
00018F62 6700                       		beq.s	@noflip01
00018F64 4440                       		neg.w	d0
00018F66 0640 0080                  		addi.w	#$80,d0
00018F6A                            
00018F6A                            	@noflip01:
00018F6A 3228 0034                  		move.w	sto_origX(a0),d1
00018F6E 9240                       		sub.w	d0,d1
00018F70 3141 0008                  		move.w	d1,obX(a0)
00018F74 4E75                       		rts	
00018F76                            ; ===========================================================================
00018F76                            
00018F76                            @loc_15DE0:
00018F76 5228 0028                  		addq.b	#1,obSubtype(a0)
00018F7A 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018F80 4228 0038                  		clr.b	sto_active(a0)
00018F84 45F8 FC00                  		lea	(v_objstate).w,a2
00018F88 7000                       		moveq	#0,d0
00018F8A 1028 0023                  		move.b	obRespawnNo(a0),d0
00018F8E 67C8                       		beq.s	@loc_15DC2
00018F90 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018F96 60C0                       		bra.s	@loc_15DC2
00018F98                            ; ===========================================================================
00018F98                            
00018F98                            @type02:
00018F98 4A28 0038                  		tst.b	sto_active(a0)
00018F9C 6600                       		bne.s	@isactive02
00018F9E 5368 0036                  		subq.w	#1,$36(a0)
00018FA2 6600                       		bne.s	@loc_15E1E
00018FA4 117C 0001 0038             		move.b	#1,sto_active(a0)
00018FAA                            
00018FAA                            	@isactive02:
00018FAA 4A68 003A                  		tst.w	$3A(a0)
00018FAE 6700                       		beq.s	@loc_15E3C
00018FB0 5568 003A                  		subq.w	#2,$3A(a0)
00018FB4                            
00018FB4                            	@loc_15E1E:
00018FB4 3028 003A                  		move.w	$3A(a0),d0
00018FB8 0828 0000 0022             		btst	#0,obStatus(a0)
00018FBE 6700                       		beq.s	@noflip02
00018FC0 4440                       		neg.w	d0
00018FC2 0640 0080                  		addi.w	#$80,d0
00018FC6                            
00018FC6                            	@noflip02:
00018FC6 3228 0034                  		move.w	sto_origX(a0),d1
00018FCA 9240                       		sub.w	d0,d1
00018FCC 3141 0008                  		move.w	d1,obX(a0)
00018FD0 4E75                       		rts	
00018FD2                            ; ===========================================================================
00018FD2                            
00018FD2                            @loc_15E3C:
00018FD2 5328 0028                  		subq.b	#1,obSubtype(a0)
00018FD6 4228 0038                  		clr.b	sto_active(a0)
00018FDA 45F8 FC00                  		lea	(v_objstate).w,a2
00018FDE 7000                       		moveq	#0,d0
00018FE0 1028 0023                  		move.b	obRespawnNo(a0),d0
00018FE4 67CE                       		beq.s	@loc_15E1E
00018FE6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018FEC 60C6                       		bra.s	@loc_15E1E
00018FEE                            ; ===========================================================================
00018FEE                            
00018FEE                            @type03:
00018FEE 4A28 0038                  		tst.b	sto_active(a0)
00018FF2 6600                       		bne.s	@isactive03
00018FF4 4A68 003A                  		tst.w	$3A(a0)
00018FF8 6700                       		beq.s	@loc_15E6A
00018FFA 5368 003A                  		subq.w	#1,$3A(a0)
00018FFE 6000                       		bra.s	@loc_15E8E
00019000                            ; ===========================================================================
00019000                            
00019000                            @loc_15E6A:
00019000 5368 0036                  		subq.w	#1,$36(a0)
00019004 6A00                       		bpl.s	@loc_15E8E
00019006 317C 003C 0036             		move.w	#$3C,$36(a0)
0001900C 117C 0001 0038             		move.b	#1,sto_active(a0)
00019012                            
00019012                            @isactive03:
00019012 5068 003A                  		addq.w	#8,$3A(a0)
00019016 3028 003A                  		move.w	$3A(a0),d0
0001901A B068 003C                  		cmp.w	$3C(a0),d0
0001901E 6600                       		bne.s	@loc_15E8E
00019020 4228 0038                  		clr.b	sto_active(a0)
00019024                            
00019024                            @loc_15E8E:
00019024 3028 003A                  		move.w	$3A(a0),d0
00019028 0828 0000 0022             		btst	#0,obStatus(a0)
0001902E 6700                       		beq.s	@noflip03
00019030 4440                       		neg.w	d0
00019032 0640 0038                  		addi.w	#$38,d0
00019036                            
00019036                            	@noflip03:
00019036 3228 0030                  		move.w	sto_origY(a0),d1
0001903A D240                       		add.w	d0,d1
0001903C 3141 000C                  		move.w	d1,obY(a0)
00019040 4E75                       		rts	
00019042                            ; ===========================================================================
00019042                            
00019042                            @type04:
00019042 4A28 0038                  		tst.b	sto_active(a0)
00019046 6600                       		bne.s	@isactive04
00019048 4A68 003A                  		tst.w	$3A(a0)
0001904C 6700                       		beq.s	@loc_15EBE
0001904E 5168 003A                  		subq.w	#8,$3A(a0)
00019052 6000                       		bra.s	@loc_15EF0
00019054                            ; ===========================================================================
00019054                            
00019054                            @loc_15EBE:
00019054 5368 0036                  		subq.w	#1,$36(a0)
00019058 6A00                       		bpl.s	@loc_15EF0
0001905A 317C 003C 0036             		move.w	#$3C,$36(a0)
00019060 117C 0001 0038             		move.b	#1,sto_active(a0)
00019066                            
00019066                            @isactive04:
00019066 3028 003A                  		move.w	$3A(a0),d0
0001906A B068 003C                  		cmp.w	$3C(a0),d0
0001906E 6700                       		beq.s	@loc_15EE0
00019070 5068 003A                  		addq.w	#8,$3A(a0)
00019074 6000                       		bra.s	@loc_15EF0
00019076                            ; ===========================================================================
00019076                            
00019076                            @loc_15EE0:
00019076 5368 0036                  		subq.w	#1,$36(a0)
0001907A 6A00                       		bpl.s	@loc_15EF0
0001907C 317C 003C 0036             		move.w	#$3C,$36(a0)
00019082 4228 0038                  		clr.b	sto_active(a0)
00019086                            
00019086                            @loc_15EF0:
00019086 3028 003A                  		move.w	$3A(a0),d0
0001908A 0828 0000 0022             		btst	#0,obStatus(a0)
00019090 6700                       		beq.s	@noflip04
00019092 4440                       		neg.w	d0
00019094 0640 0038                  		addi.w	#$38,d0
00019098                            
00019098                            	@noflip04:
00019098 3228 0030                  		move.w	sto_origY(a0),d1
0001909C D240                       		add.w	d0,d1
0001909E 3141 000C                  		move.w	d1,obY(a0)
000190A2 4E75                       		rts	
000190A4                            ; ===========================================================================
000190A4                            
000190A4                            @type05:
000190A4 4A28 0038                  		tst.b	sto_active(a0)
000190A8 6600                       		bne.s	@loc_15F3E
000190AA 45F8 F7E0                  		lea	(f_switch).w,a2
000190AE 7000                       		moveq	#0,d0
000190B0 1028 003E                  		move.b	$3E(a0),d0
000190B4 0832 0000 0000             		btst	#0,(a2,d0.w)
000190BA 6700                       		beq.s	@locret_15F5C
000190BC 117C 0001 0038             		move.b	#1,sto_active(a0)
000190C2 45F8 FC00                  		lea	(v_objstate).w,a2
000190C6 7000                       		moveq	#0,d0
000190C8 1028 0023                  		move.b	obRespawnNo(a0),d0
000190CC 6700                       		beq.s	@loc_15F3E
000190CE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000190D4                            
000190D4                            @loc_15F3E:
000190D4 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
000190DC 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
000190E4 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
000190EA 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
000190F0 6700                       		beq.s	@loc_15F5E
000190F2                            
000190F2                            @locret_15F5C:
000190F2 4E75                       		rts	
000190F4                            ; ===========================================================================
000190F4                            
000190F4                            @loc_15F5E:
000190F4 4228 0028                  		clr.b	obSubtype(a0)
000190F8 4228 0038                  		clr.b	sto_active(a0)
000190FC 4E75                       		rts	
000190FC 4E75                       		rts	
000190FE                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
000190FE                            ; ---------------------------------------------------------------------------
000190FE                            ; Sprite mappings - stomper and	platforms (SBZ)
000190FE                            ; ---------------------------------------------------------------------------
000190FE                            Map_Stomp_internal:
000190FE 0000                       		dc.w @door-Map_Stomp_internal
00019100 0000                       		dc.w @stomper-Map_Stomp_internal
00019102 0000                       		dc.w @stomper-Map_Stomp_internal
00019104 0000                       		dc.w @stomper-Map_Stomp_internal
00019106 0000                       		dc.w @bigdoor-Map_Stomp_internal
00019108 04                         @door:		dc.b 4
00019109 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
0001910E F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00019113 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00019118 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001911D 08                         @stomper:	dc.b 8
0001911E E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00019123 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00019128 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001912D E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00019132 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00019137 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001913C 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00019141 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00019146 0E                         @bigdoor:	dc.b $E
00019147 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
0001914C C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00019151 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00019156 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001915B C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00019160 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00019165 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001916A C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001916F E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00019174 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00019179 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001917E 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00019183 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00019188 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001918E 00                         		even
0001918E 00                         		even
0001918E                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
0001918E                            ; ---------------------------------------------------------------------------
0001918E                            ; Object 6C - vanishing	platforms (SBZ)
0001918E                            ; ---------------------------------------------------------------------------
0001918E                            
0001918E                            VanishPlatform:
0001918E 7000                       		moveq	#0,d0
00019190 1028 0024                  		move.b	obRoutine(a0),d0
00019194 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00019198 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
0001919C                            ; ===========================================================================
0001919C 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
0001919E 0000                       		dc.w VanP_Vanish-VanP_Index
000191A0 0000                       		dc.w VanP_Appear-VanP_Index
000191A2 0000                       		dc.w loc_16068-VanP_Index
000191A4                            
000191A4 =00000030                  vanp_timer:	equ $30		; counter for time until event
000191A4 =00000032                  vanp_timelen:	equ $32		; time between events (general)
000191A4                            ; ===========================================================================
000191A4                            
000191A4                            VanP_Main:	; Routine 0
000191A4 5C28 0024                  		addq.b	#6,obRoutine(a0)
000191A8 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
000191B0 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
000191B6 0028 0004 0001             		ori.b	#4,obRender(a0)
000191BC 117C 0010 0014             		move.b	#$10,obActWid(a0)
000191C2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000191C8 7000                       		moveq	#0,d0
000191CA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000191CE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000191D2 5240                       		addq.w	#1,d0		; add 1
000191D4 EF48                       		lsl.w	#7,d0		; multiply by $80
000191D6 3200                       		move.w	d0,d1
000191D8 5340                       		subq.w	#1,d0
000191DA 3140 0030                  		move.w	d0,vanp_timer(a0)
000191DE 3140 0032                  		move.w	d0,vanp_timelen(a0)
000191E2 7000                       		moveq	#0,d0
000191E4 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000191E8 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000191EC 0641 0080                  		addi.w	#$80,d1
000191F0 C0C1                       		mulu.w	d1,d0
000191F2 E088                       		lsr.l	#8,d0
000191F4 3140 0036                  		move.w	d0,$36(a0)
000191F8 5341                       		subq.w	#1,d1
000191FA 3141 0038                  		move.w	d1,$38(a0)
000191FE                            
000191FE                            loc_16068:	; Routine 6
000191FE 3038 FE04                  		move.w	(v_framecount).w,d0
00019202 9068 0036                  		sub.w	$36(a0),d0
00019206 C068 0038                  		and.w	$38(a0),d0
0001920A 6600                       		bne.s	@animate
0001920C 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00019210 6000                       		bra.s	VanP_Vanish
00019212                            ; ===========================================================================
00019212                            
00019212                            @animate:
00019212 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019218 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001921E 6000 878C                  		bra.w	RememberState
00019222                            ; ===========================================================================
00019222                            
00019222                            VanP_Vanish:	; Routine 2
00019222                            VanP_Appear:	; Routine 4
00019222 5368 0030                  		subq.w	#1,vanp_timer(a0)
00019226 6A00                       		bpl.s	@wait
00019228 317C 007F 0030             		move.w	#127,vanp_timer(a0)
0001922E 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00019232 6700                       		beq.s	@isvanishing	; if yes, branch
00019234 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
0001923A                            
0001923A                            	@isvanishing:
0001923A 0868 0000 001C             		bchg	#0,obAnim(a0)
00019240                            
00019240                            	@wait:
00019240 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019246 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001924C 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00019252 6600                       		bne.s	@notsolid	; if yes, branch
00019254 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0001925A 6600                       		bne.s	@loc_160D6
0001925C 7200                       		moveq	#0,d1
0001925E 1228 0014                  		move.b	obActWid(a0),d1
00019262 4EB9 0000 9132             		jsr	(PlatformObject).l
00019268 6000 8742                  		bra.w	RememberState
0001926C                            ; ===========================================================================
0001926C                            
0001926C                            @loc_160D6:
0001926C 7200                       		moveq	#0,d1
0001926E 1228 0014                  		move.b	obActWid(a0),d1
00019272 4EB9 0000 92A6             		jsr	(ExitPlatform).l
00019278 3428 0008                  		move.w	obX(a0),d2
0001927C 4EB9 0000 9810             		jsr	(MvSonicOnPtfm2).l
00019282 6000 8728                  		bra.w	RememberState
00019286                            ; ===========================================================================
00019286                            
00019286                            @notsolid:
00019286 0828 0003 0022             		btst	#3,obStatus(a0)
0001928C 6700                       		beq.s	@display
0001928E 43F8 D000                  		lea	(v_player).w,a1
00019292 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019298 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001929E 117C 0002 0024             		move.b	#2,obRoutine(a0)
000192A4 4228 0025                  		clr.b	obSolid(a0)
000192A8                            
000192A8                            	@display:
000192A8 6000 8702                  		bra.w	RememberState
000192A8 6000 8702                  		bra.w	RememberState
000192AC                            		include	"_anim\SBZ Vanishing Platforms.asm"
000192AC                            ; ---------------------------------------------------------------------------
000192AC                            ; Animation script - vanishing platforms (SBZ)
000192AC                            ; ---------------------------------------------------------------------------
000192AC 0000                       Ani_Van:	dc.w @vanish-Ani_Van
000192AE 0000                       		dc.w @appear-Ani_Van
000192B0 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
000192B8 00                         		even
000192B8 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
000192C0 00                         		even
000192C0 00                         		even
000192C0                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
000192C0                            ; ---------------------------------------------------------------------------
000192C0                            ; Sprite mappings - vanishing platforms	(SBZ)
000192C0                            ; ---------------------------------------------------------------------------
000192C0                            Map_VanP_internal:
000192C0 0000                       		dc.w @whole-Map_VanP_internal
000192C2 0000                       		dc.w @half-Map_VanP_internal
000192C4 0000                       		dc.w @quarter-Map_VanP_internal
000192C6 0000                       		dc.w @gone-Map_VanP_internal
000192C8 01                         @whole:		dc.b 1
000192C9 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000192CE 01                         @half:		dc.b 1
000192CF F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000192D4 01                         @quarter:	dc.b 1
000192D5 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000192DA 00                         @gone:		dc.b 0
000192DC 00                         		even
000192DC 00                         		even
000192DC                            		include	"_incObj\6E Electrocuter.asm"
000192DC                            ; ---------------------------------------------------------------------------
000192DC                            ; Object 6E - electrocution orbs (SBZ)
000192DC                            ; ---------------------------------------------------------------------------
000192DC                            
000192DC                            Electro:
000192DC 7000                       		moveq	#0,d0
000192DE 1028 0024                  		move.b	obRoutine(a0),d0
000192E2 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
000192E6 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
000192EA                            ; ===========================================================================
000192EA 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
000192EC 0000                       		dc.w Elec_Shock-Elec_Index
000192EE                            
000192EE =00000034                  elec_freq:	equ $34		; frequency
000192EE                            ; ===========================================================================
000192EE                            
000192EE                            Elec_Main:	; Routine 0
000192EE 5428 0024                  		addq.b	#2,obRoutine(a0)
000192F2 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
000192FA 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019300 0028 0004 0001             		ori.b	#4,obRender(a0)
00019306 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001930C 7000                       		moveq	#0,d0
0001930E 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019312 E948                       		lsl.w	#4,d0		; multiply by $10
00019314 5340                       		subq.w	#1,d0
00019316 3140 0034                  		move.w	d0,elec_freq(a0)
0001931A                            
0001931A                            Elec_Shock:	; Routine 2
0001931A 3038 FE04                  		move.w	(v_framecount).w,d0
0001931E C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019322 6600                       		bne.s	@animate	; if not, branch
00019324                            
00019324 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
0001932A 4A28 0001                  		tst.b	obRender(a0)
0001932E 6A00                       		bpl.s	@animate
0001933A                            
0001933A                            	@animate:
0001933A 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019340 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
00019346 117C 0000 0020             		move.b	#0,obColType(a0)
0001934C 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019352 6600                       		bne.s	@display	; if not, branch
00019354 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
0001935A                            
0001935A                            	@display:
0001935A 6000 8650                  		bra.w	RememberState
0001935A 6000 8650                  		bra.w	RememberState
0001935E                            		include	"_anim\Electrocuter.asm"
0001935E                            ; ---------------------------------------------------------------------------
0001935E                            ; Animation script - electrocution orbs (SBZ)
0001935E                            ; ---------------------------------------------------------------------------
0001935E 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
00019360 0000                       		dc.w byte_161D0-Ani_Elec
00019362 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
00019366 00                         		even
00019366 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
00019376                            		even
00019376                            		even
00019376                            Map_Elec:	include	"_maps\Electrocuter.asm"
00019376                            ; --------------------------------------------------------------------------------
00019376                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019376                            ; --------------------------------------------------------------------------------
00019376                            
00019376                            SME_KiF9w:	
00019376 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
0001937A 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
0001937E 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
00019382 02                         SME_KiF9w_C:	dc.b 2	
00019383 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019388 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001938D 03                         SME_KiF9w_17:	dc.b 3	
0001938E F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019393 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019398 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001939D 05                         SME_KiF9w_27:	dc.b 5	
0001939E F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000193A3 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000193A8 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000193AD F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
000193B2 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
000193B7 04                         SME_KiF9w_41:	dc.b 4	
000193B8 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000193BD 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000193C2 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
000193C7 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
000193CC 06                         SME_KiF9w_56:	dc.b 6	
000193CD F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000193D2 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000193D7 F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
000193DC F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
000193E1 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
000193E6 F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
000193EB 04                         SME_KiF9w_75:	dc.b 4	
000193EC F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000193F1 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000193F6 F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
000193FB F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019400                            		even
00019400                            		even
00019400                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019400                            ; ---------------------------------------------------------------------------
00019400                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019400                            ; ---------------------------------------------------------------------------
00019400                            
00019400                            SpinConvey:
00019400 7000                       		moveq	#0,d0
00019402 1028 0024                  		move.b	obRoutine(a0),d0
00019406 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
0001940A 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
0001942A                            
0001942A                            SpinC_Display:
0001942A 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00019430                            ; ===========================================================================
00019430                            
00019430                            loc_1629A:
00019430 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
00019436 6600                       		bne.s	SpinC_Act1or2	; if not, branch
00019438 0C40 FF80                  		cmpi.w	#-$80,d0
0001943C 64EC                       		bcc.s	SpinC_Display
0001943E                            
0001943E                            SpinC_Act1or2:
0001943E 1028 002F                  		move.b	$2F(a0),d0
00019442 6A00                       		bpl.s	SpinC_Delete
00019444 0240 007F                  		andi.w	#$7F,d0
00019448 45F8 F7C1                  		lea	(v_obj63).w,a2
0001944C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019452                            
00019452                            SpinC_Delete:
00019452 4EF9 0000 FA62             		jmp	(DeleteObject).l
00019458                            ; ===========================================================================
00019458 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
0001945A 0000                       		dc.w loc_163D8-SpinC_Index
0001945C                            ; ===========================================================================
0001945C                            
0001945C                            SpinC_Main:	; Routine 0
0001945C 1028 0028                  		move.b	obSubtype(a0),d0
00019460 6B00 0000                  		bmi.w	loc_16380
00019464 5428 0024                  		addq.b	#2,obRoutine(a0)
00019468 217C 0001 8AD0 0004        		move.l	#Map_Spin,obMap(a0)
00019470 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00019476 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001947C 0028 0004 0001             		ori.b	#4,obRender(a0)
00019482 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019488 7000                       		moveq	#0,d0
0001948A 1028 0028                  		move.b	obSubtype(a0),d0
0001948E 3200                       		move.w	d0,d1
00019490 E648                       		lsr.w	#3,d0
00019492 0240 001E                  		andi.w	#$1E,d0
00019496 45FA 0000                  		lea	off_164A6(pc),a2
0001949A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001949E 315A 0038                  		move.w	(a2)+,$38(a0)
000194A2 315A 0030                  		move.w	(a2)+,$30(a0)
000194A6 214A 003C                  		move.l	a2,$3C(a0)
000194AA 0241 000F                  		andi.w	#$F,d1
000194AE E549                       		lsl.w	#2,d1
000194B0 1141 0038                  		move.b	d1,$38(a0)
000194B4 117C 0004 003A             		move.b	#4,$3A(a0)
000194BA 4A38 F7C0                  		tst.b	(f_conveyrev).w
000194BE 6700                       		beq.s	loc_16356
000194C0 117C 0001 003B             		move.b	#1,$3B(a0)
000194C6 4428 003A                  		neg.b	$3A(a0)
000194CA 7200                       		moveq	#0,d1
000194CC 1228 0038                  		move.b	$38(a0),d1
000194D0 D228 003A                  		add.b	$3A(a0),d1
000194D4 B228 0039                  		cmp.b	$39(a0),d1
000194D8 6500                       		bcs.s	loc_16352
000194DA 1001                       		move.b	d1,d0
000194DC 7200                       		moveq	#0,d1
000194DE 4A00                       		tst.b	d0
000194E0 6A00                       		bpl.s	loc_16352
000194E2 1228 0039                  		move.b	$39(a0),d1
000194E6 5901                       		subq.b	#4,d1
000194E8                            
000194E8                            loc_16352:
000194E8 1141 0038                  		move.b	d1,$38(a0)
000194EC                            
000194EC                            loc_16356:
000194EC 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000194F2 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000194F8 4A41                       		tst.w	d1
000194FA 6600                       		bne.s	loc_1636C
000194FC 117C 0001 001C             		move.b	#1,obAnim(a0)
00019502                            
00019502                            loc_1636C:
00019502 0C41 0008                  		cmpi.w	#8,d1
00019506 6600                       		bne.s	loc_16378
00019508 117C 0000 001C             		move.b	#0,obAnim(a0)
0001950E                            
0001950E                            loc_16378:
0001950E 6100 B522                  		bsr.w	LCon_ChangeDir
00019512 6000 0000                  		bra.w	loc_163D8
00019516                            ; ===========================================================================
00019516                            
00019516                            loc_16380:
00019516 1140 002F                  		move.b	d0,$2F(a0)
0001951A 0240 007F                  		andi.w	#$7F,d0
0001951E 45F8 F7C1                  		lea	(v_obj63).w,a2
00019522 08F2 0000 0000             		bset	#0,(a2,d0.w)
00019528 6700                       		beq.s	loc_1639A
0001952A 4EF9 0000 FA62             		jmp	(DeleteObject).l
00019530                            ; ===========================================================================
00019530                            
00019530                            loc_1639A:
00019530 D040                       		add.w	d0,d0
00019532 0240 001E                  		andi.w	#$1E,d0
00019536 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
0001953A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019540 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019544 321A                       		move.w	(a2)+,d1
00019546 2248                       		movea.l	a0,a1
00019548 6000                       		bra.s	SpinC_LoadPform
0001954A                            ; ===========================================================================
0001954A                            
0001954A                            SpinC_Loop:
0001954A 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
00019550 6600                       		bne.s	loc_163D0
00019552                            
00019552                            SpinC_LoadPform:
00019552 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
00019556 335A 0008                  		move.w	(a2)+,obX(a1)
0001955A 335A 000C                  		move.w	(a2)+,obY(a1)
0001955E 301A                       		move.w	(a2)+,d0
00019560 1340 0028                  		move.b	d0,obSubtype(a1)
00019564                            
00019564                            loc_163D0:
00019564 51C9 FFE4                  		dbf	d1,SpinC_Loop
00019568                            
00019568 588F                       		addq.l	#4,sp
0001956A 4E75                       		rts	
0001956C                            ; ===========================================================================
0001956C                            
0001956C                            loc_163D8:	; Routine 2
0001956C 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
00019572 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
00019578 4A28 001A                  		tst.b	obFrame(a0)
0001957C 6600                       		bne.s	loc_16404
0001957E 3F28 0008                  		move.w	obX(a0),-(sp)
00019582 6100 0000                  		bsr.w	loc_16424
00019586 323C 001B                  		move.w	#$1B,d1
0001958A 343C 0007                  		move.w	#7,d2
0001958E 3602                       		move.w	d2,d3
00019590 5243                       		addq.w	#1,d3
00019592 381F                       		move.w	(sp)+,d4
00019594 6000 88AE                  		bra.w	SolidObject
00019598                            ; ===========================================================================
00019598                            
00019598                            loc_16404:
00019598 0828 0003 0022             		btst	#3,obStatus(a0)
0001959E 6700                       		beq.s	loc_16420
000195A0 43F8 D000                  		lea	(v_objspace).w,a1
000195A4 08A9 0003 0022             		bclr	#3,obStatus(a1)
000195AA 08A8 0003 0022             		bclr	#3,obStatus(a0)
000195B0 4228 0025                  		clr.b	obSolid(a0)
000195B4                            
000195B4                            loc_16420:
000195B4 6000 0000                  		bra.w	loc_16424
000195B8                            
000195B8                            loc_16424:
000195B8 3028 0008                  		move.w	obX(a0),d0
000195BC B068 0034                  		cmp.w	$34(a0),d0
000195C0 6600                       		bne.s	loc_16484
000195C2 3028 000C                  		move.w	obY(a0),d0
000195C6 B068 0036                  		cmp.w	$36(a0),d0
000195CA 6600                       		bne.s	loc_16484
000195CC 7200                       		moveq	#0,d1
000195CE 1228 0038                  		move.b	$38(a0),d1
000195D2 D228 003A                  		add.b	$3A(a0),d1
000195D6 B228 0039                  		cmp.b	$39(a0),d1
000195DA 6500                       		bcs.s	loc_16456
000195DC 1001                       		move.b	d1,d0
000195DE 7200                       		moveq	#0,d1
000195E0 4A00                       		tst.b	d0
000195E2 6A00                       		bpl.s	loc_16456
000195E4 1228 0039                  		move.b	$39(a0),d1
000195E8 5901                       		subq.b	#4,d1
000195EA                            
000195EA                            loc_16456:
000195EA 1141 0038                  		move.b	d1,$38(a0)
000195EE 2268 003C                  		movea.l	$3C(a0),a1
000195F2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000195F8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000195FE 4A41                       		tst.w	d1
00019600 6600                       		bne.s	loc_16474
00019602 117C 0001 001C             		move.b	#1,obAnim(a0)
00019608                            
00019608                            loc_16474:
00019608 0C41 0008                  		cmpi.w	#8,d1
0001960C 6600                       		bne.s	loc_16480
0001960E 117C 0000 001C             		move.b	#0,obAnim(a0)
00019614                            
00019614                            loc_16480:
00019614 6100 B41C                  		bsr.w	LCon_ChangeDir
00019618                            
00019618                            loc_16484:
00019618 4EF9 0000 FA0E             		jmp	(SpeedToPos).l
00019618 4EF9 0000 FA0E             		jmp	(SpeedToPos).l
0001961E                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
0001961E                            ; ---------------------------------------------------------------------------
0001961E                            ; Animation script - platform on conveyor belt (SBZ)
0001961E                            ; ---------------------------------------------------------------------------
0001961E 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
00019620 0000                       		dc.w @still-Ani_SpinConvey
00019622 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001962F 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
00019636 00                         		even
00019636 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001963A 00                         		even
0001963A 00                         		even
0001963A                            
0001963A 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00019640 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00019646 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001965A 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001966E 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00019682 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00019696 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000196AA 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
000196BE                            ; ===========================================================================
000196BE                            
000196BE                            		include	"_incObj\70 Girder Block.asm"
000196BE                            ; ---------------------------------------------------------------------------
000196BE                            ; Object 70 - large girder block (SBZ)
000196BE                            ; ---------------------------------------------------------------------------
000196BE                            
000196BE                            Girder:
000196BE 7000                       		moveq	#0,d0
000196C0 1028 0024                  		move.b	obRoutine(a0),d0
000196C4 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
000196C8 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
000196CC                            ; ===========================================================================
000196CC 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
000196CE 0000                       		dc.w Gird_Action-Gird_Index
000196D0                            
000196D0 =00000016                  gird_height:	equ $16
000196D0 =00000032                  gird_origX:	equ $32		; original x-axis position
000196D0 =00000030                  gird_origY:	equ $30		; original y-axis position
000196D0 =00000034                  gird_time:	equ $34		; duration for movement in a direction
000196D0 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
000196D0 =0000003A                  gird_delay:	equ $3A		; delay for movement
000196D0                            ; ===========================================================================
000196D0                            
000196D0                            Gird_Main:	; Routine 0
000196D0 5428 0024                  		addq.b	#2,obRoutine(a0)
000196D4 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
000196DC 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
000196E2 0028 0004 0001             		ori.b	#4,obRender(a0)
000196E8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000196EE 117C 0060 0014             		move.b	#$60,obActWid(a0)
000196F4 117C 0018 0016             		move.b	#$18,gird_height(a0)
000196FA 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
00019700 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
00019706 6100 0000                  		bsr.w	Gird_ChgMove
0001970A                            
0001970A                            Gird_Action:	; Routine 2
0001970A 3F28 0008                  		move.w	obX(a0),-(sp)
0001970E 4A68 003A                  		tst.w	gird_delay(a0)
00019712 6700                       		beq.s	@beginmove
00019714 5368 003A                  		subq.w	#1,gird_delay(a0)
00019718 6600                       		bne.s	@solid
0001971A                            
0001971A                            	@beginmove:
0001971A 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
00019720 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
00019724 6600                       		bne.s	@solid		; if time remains, branch
00019726 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
0001972A                            
0001972A                            	@solid:
0001972A 381F                       		move.w	(sp)+,d4
0001972C 4A28 0001                  		tst.b	obRender(a0)
00019730 6A00                       		bpl.s	@chkdel
00019732 7200                       		moveq	#0,d1
00019734 1228 0014                  		move.b	obActWid(a0),d1
00019738 0641 000B                  		addi.w	#$B,d1
0001973C 7400                       		moveq	#0,d2
0001973E 1428 0016                  		move.b	gird_height(a0),d2
00019742 3602                       		move.w	d2,d3
00019744 5243                       		addq.w	#1,d3
00019746 6100 86FC                  		bsr.w	SolidObject
0001974A                            
0001974A                            	@chkdel:
00019766 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001976C                            
0001976C                            	@delete:
0001976C 4EF9 0000 FA62             		jmp	(DeleteObject).l
00019772                            ; ===========================================================================
00019772                            
00019772                            Gird_ChgMove:
00019772 1028 0038                  		move.b	gird_set(a0),d0
00019776 0240 0018                  		andi.w	#$18,d0
0001977A 43F9 0000 0000             		lea	(@settings).l,a1
00019780 43F1 0000                  		lea	(a1,d0.w),a1
00019784 3159 0010                  		move.w	(a1)+,obVelX(a0)
00019788 3159 0012                  		move.w	(a1)+,obVelY(a0)
0001978C 3159 0034                  		move.w	(a1)+,gird_time(a0)
00019790 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
00019794 317C 0007 003A             		move.w	#7,gird_delay(a0)
0001979A 4E75                       		rts	
0001979C                            ; ===========================================================================
0001979C                            @settings:	;   x-speed, y-speed, duration
0001979C 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
000197A4 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
000197AC FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
000197B4 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
000197B4 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
000197BC                            Map_Gird:	include	"_maps\Girder Block.asm"
000197BC                            ; ---------------------------------------------------------------------------
000197BC                            ; Sprite mappings - large girder block (SBZ)
000197BC                            ; ---------------------------------------------------------------------------
000197BC                            Map_Gird_internal:
000197BC 0000                       		dc.w @girder-Map_Gird_internal
000197BE 0C                         @girder:	dc.b $C
000197BF E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
000197C4 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
000197C9 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000197CE 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000197D3 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000197D8 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000197DD E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000197E2 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000197E7 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000197EC 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000197F1 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000197F6 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000197FC 00                         		even
000197FC 00                         		even
000197FC                            		include	"_incObj\72 Teleporter.asm"
000197FC                            ; ---------------------------------------------------------------------------
000197FC                            ; Object 72 - teleporter (SBZ)
000197FC                            ; ---------------------------------------------------------------------------
000197FC                            
000197FC                            Teleport:
000197FC 7000                       		moveq	#0,d0
000197FE 1028 0024                  		move.b	obRoutine(a0),d0
00019802 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
00019806 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
00019826 4E75                       		rts	
00019828                            
00019828                            	@delete:
00019828 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001982E                            ; ===========================================================================
0001982E 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
00019830 0000                       		dc.w loc_166C8-Tele_Index
00019832 0000                       		dc.w loc_1675E-Tele_Index
00019834 0000                       		dc.w loc_16798-Tele_Index
00019836                            ; ===========================================================================
00019836                            
00019836                            Tele_Main:	; Routine 0
00019836 5428 0024                  		addq.b	#2,obRoutine(a0)
0001983A 1028 0028                  		move.b	obSubtype(a0),d0
0001983E D040                       		add.w	d0,d0
00019840 0240 001E                  		andi.w	#$1E,d0
00019844 45FA 0000                  		lea	Tele_Data(pc),a2
00019848 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001984C 315A 003A                  		move.w	(a2)+,$3A(a0)
00019850 214A 003C                  		move.l	a2,$3C(a0)
00019854 315A 0036                  		move.w	(a2)+,$36(a0)
00019858 315A 0038                  		move.w	(a2)+,$38(a0)
0001985C                            
0001985C                            loc_166C8:	; Routine 2
0001985C 43F8 D000                  		lea	(v_player).w,a1
00019860 3029 0008                  		move.w	obX(a1),d0
00019864 9068 0008                  		sub.w	obX(a0),d0
00019868 0828 0000 0022             		btst	#0,obStatus(a0)
0001986E 6700                       		beq.s	loc_166E0
00019870 0640 000F                  		addi.w	#$F,d0
00019874                            
00019874                            loc_166E0:
00019874 0C40 0010                  		cmpi.w	#$10,d0
00019878 6400                       		bcc.s	locret_1675C
0001987A 3229 000C                  		move.w	obY(a1),d1
0001987E 9268 000C                  		sub.w	obY(a0),d1
00019882 0641 0020                  		addi.w	#$20,d1
00019886 0C41 0040                  		cmpi.w	#$40,d1
0001988A 6400                       		bcc.s	locret_1675C
0001988C 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019890 6600                       		bne.s	locret_1675C
00019892 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
00019898 6600                       		bne.s	loc_1670E
0001989A 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
000198A0 6500                       		bcs.s	locret_1675C
000198A2                            
000198A2                            loc_1670E:
000198A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000198A6 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
000198AC 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
000198B2 337C 0800 0020             		move.w	#$800,obInertia(a1)
000198B8 337C 0000 0010             		move.w	#0,obVelX(a1)
000198BE 337C 0000 0012             		move.w	#0,obVelY(a1)
000198C4 08A8 0005 0022             		bclr	#5,obStatus(a0)
000198CA 08A9 0005 0022             		bclr	#5,obStatus(a1)
000198D0 08E9 0001 0022             		bset	#1,obStatus(a1)
000198D6 3368 0008 0008             		move.w	obX(a0),obX(a1)
000198DC 3368 000C 000C             		move.w	obY(a0),obY(a1)
000198E2 4228 0032                  		clr.b	$32(a0)
000198F0                            
000198F0                            locret_1675C:
000198F0 4E75                       		rts	
000198F2                            ; ===========================================================================
000198F2                            
000198F2                            loc_1675E:	; Routine 4
000198F2 43F8 D000                  		lea	(v_player).w,a1
000198F6 1028 0032                  		move.b	$32(a0),d0
000198FA 5428 0032                  		addq.b	#2,$32(a0)
000198FE 4EB9 0000 3A82             		jsr	(CalcSine).l
00019904 EA40                       		asr.w	#5,d0
00019906 3428 000C                  		move.w	obY(a0),d2
0001990A 9440                       		sub.w	d0,d2
0001990C 3342 000C                  		move.w	d2,obY(a1)
00019910 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00019916 6600                       		bne.s	locret_16796
00019918 6100 0000                  		bsr.w	sub_1681C
0001991C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001992A                            
0001992A                            locret_16796:
0001992A 4E75                       		rts	
0001992C                            ; ===========================================================================
0001992C                            
0001992C                            loc_16798:	; Routine 6
0001992C 588F                       		addq.l	#4,sp
0001992E 43F8 D000                  		lea	(v_player).w,a1
00019932 5328 002E                  		subq.b	#1,$2E(a0)
00019936 6A00                       		bpl.s	loc_167DA
00019938 3368 0036 0008             		move.w	$36(a0),obX(a1)
0001993E 3368 0038 000C             		move.w	$38(a0),obY(a1)
00019944 7200                       		moveq	#0,d1
00019946 1228 003A                  		move.b	$3A(a0),d1
0001994A 5801                       		addq.b	#4,d1
0001994C B228 003B                  		cmp.b	$3B(a0),d1
00019950 6500                       		bcs.s	loc_167C2
00019952 7200                       		moveq	#0,d1
00019954 6000                       		bra.s	loc_16800
00019956                            ; ===========================================================================
00019956                            
00019956                            loc_167C2:
00019956 1141 003A                  		move.b	d1,$3A(a0)
0001995A 2468 003C                  		movea.l	$3C(a0),a2
0001995E 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00019964 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001996A 6000 0000                  		bra.w	sub_1681C
0001996E                            ; ===========================================================================
0001996E                            
0001996E                            loc_167DA:
0001996E 2429 0008                  		move.l	obX(a1),d2
00019972 2629 000C                  		move.l	obY(a1),d3
00019976 3029 0010                  		move.w	obVelX(a1),d0
0001997A 48C0                       		ext.l	d0
0001997C E180                       		asl.l	#8,d0
0001997E D480                       		add.l	d0,d2
00019980 3029 0012                  		move.w	obVelY(a1),d0
00019984 48C0                       		ext.l	d0
00019986 E180                       		asl.l	#8,d0
00019988 D680                       		add.l	d0,d3
0001998A 2342 0008                  		move.l	d2,obX(a1)
0001998E 2343 000C                  		move.l	d3,obY(a1)
00019992 4E75                       		rts	
00019994                            ; ===========================================================================
00019994                            
00019994                            loc_16800:
00019994 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
0001999A 4228 0024                  		clr.b	obRoutine(a0)
0001999E 4238 F7C8                  		clr.b	(f_lockmulti).w
000199A2 337C 0000 0010             		move.w	#0,obVelX(a1)
000199A8 337C 0200 0012             		move.w	#$200,obVelY(a1)
000199AE 4E75                       		rts	
000199B0                            
000199B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000199B0                            
000199B0                            
000199B0                            sub_1681C:
000199B0 7000                       		moveq	#0,d0
000199B2 343C 1000                  		move.w	#$1000,d2
000199B6 3028 0036                  		move.w	$36(a0),d0
000199BA 9069 0008                  		sub.w	obX(a1),d0
000199BE 6C00                       		bge.s	loc_16830
000199C0 4440                       		neg.w	d0
000199C2 4442                       		neg.w	d2
000199C4                            
000199C4                            loc_16830:
000199C4 7200                       		moveq	#0,d1
000199C6 363C 1000                  		move.w	#$1000,d3
000199CA 3228 0038                  		move.w	$38(a0),d1
000199CE 9269 000C                  		sub.w	obY(a1),d1
000199D2 6C00                       		bge.s	loc_16844
000199D4 4441                       		neg.w	d1
000199D6 4443                       		neg.w	d3
000199D8                            
000199D8                            loc_16844:
000199D8 B240                       		cmp.w	d0,d1
000199DA 6500                       		bcs.s	loc_1687A
000199DC 7200                       		moveq	#0,d1
000199DE 3228 0038                  		move.w	$38(a0),d1
000199E2 9269 000C                  		sub.w	obY(a1),d1
000199E6 4841                       		swap	d1
000199E8 83C3                       		divs.w	d3,d1
000199EA 7000                       		moveq	#0,d0
000199EC 3028 0036                  		move.w	$36(a0),d0
000199F0 9069 0008                  		sub.w	obX(a1),d0
000199F4 6700                       		beq.s	loc_16866
000199F6 4840                       		swap	d0
000199F8 81C1                       		divs.w	d1,d0
000199FA                            
000199FA                            loc_16866:
000199FA 3340 0010                  		move.w	d0,obVelX(a1)
000199FE 3343 0012                  		move.w	d3,obVelY(a1)
00019A02 4A41                       		tst.w	d1
00019A04 6A00                       		bpl.s	loc_16874
00019A06 4441                       		neg.w	d1
00019A08                            
00019A08                            loc_16874:
00019A08 3141 002E                  		move.w	d1,$2E(a0)
00019A0C 4E75                       		rts	
00019A0E                            ; ===========================================================================
00019A0E                            
00019A0E                            loc_1687A:
00019A0E 7000                       		moveq	#0,d0
00019A10 3028 0036                  		move.w	$36(a0),d0
00019A14 9069 0008                  		sub.w	obX(a1),d0
00019A18 4840                       		swap	d0
00019A1A 81C2                       		divs.w	d2,d0
00019A1C 7200                       		moveq	#0,d1
00019A1E 3228 0038                  		move.w	$38(a0),d1
00019A22 9269 000C                  		sub.w	obY(a1),d1
00019A26 6700                       		beq.s	loc_16898
00019A28 4841                       		swap	d1
00019A2A 83C0                       		divs.w	d0,d1
00019A2C                            
00019A2C                            loc_16898:
00019A2C 3341 0012                  		move.w	d1,obVelY(a1)
00019A30 3342 0010                  		move.w	d2,obVelX(a1)
00019A34 4A40                       		tst.w	d0
00019A36 6A00                       		bpl.s	loc_168A6
00019A38 4440                       		neg.w	d0
00019A3A                            
00019A3A                            loc_168A6:
00019A3A 3140 002E                  		move.w	d0,$2E(a0)
00019A3E 4E75                       		rts	
00019A40                            ; End of function sub_1681C
00019A40                            
00019A40                            ; ===========================================================================
00019A40 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
00019A46 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
00019A4C 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
00019A50 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
00019A56 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
00019A5C 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
00019A62 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00019A68 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00019A6E 0884 0298 0894             		dc.w $884, $298, $894
00019A74 0270 0894 0190             		dc.w $270, $894, $190
00019A7A 0004 0894 0690             @type03:	dc.w 4,	$894, $690
00019A80 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
00019A86 1184 0498 1158             		dc.w $1184, $498, $1158
00019A8C 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00019A92 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00019A98 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00019A9E 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
00019AA4 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
00019AAA 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00019AB0 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00019AB6 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019ABC FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019AC2 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019AC2 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019AC8                            
00019AC8                            		include	"_incObj\78 Caterkiller.asm"
00019AC8                            ; ---------------------------------------------------------------------------
00019AC8                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00019AC8                            ; ---------------------------------------------------------------------------
00019AC8                            
00019AC8                            Caterkiller:
00019AC8 7000                       		moveq	#0,d0
00019ACA 1028 0024                  		move.b	obRoutine(a0),d0
00019ACE 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
00019AD2 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
00019AD6                            ; ===========================================================================
00019AD6 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
00019AD8 0000                       		dc.w Cat_Head-Cat_Index
00019ADA 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019ADC 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019ADE 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019AE0 0000                       		dc.w Cat_Delete-Cat_Index
00019AE2 0000                       		dc.w loc_16CC0-Cat_Index
00019AE4                            
00019AE4 =0000003C                  cat_parent:	equ $3C		; address of parent object
00019AE4                            ; ===========================================================================
00019AE4                            
00019AE4                            locret_16950:
00019AE4 4E75                       		rts	
00019AE6                            ; ===========================================================================
00019AE6                            
00019AE6                            Cat_Main:	; Routine 0
00019AE6 117C 0007 0016             		move.b	#7,obHeight(a0)
00019AEC 117C 0008 0017             		move.b	#8,obWidth(a0)
00019AF2 4EB9 0000 F9D6             		jsr	(ObjectFall).l
00019AF8 4EB9 0001 7FAE             		jsr	(ObjFloorDist).l
00019AFE 4A41                       		tst.w	d1
00019B00 6AE2                       		bpl.s	locret_16950
00019B02 D368 000C                  		add.w	d1,obY(a0)
00019B06 4268 0012                  		clr.w	obVelY(a0)
00019B0A 5428 0024                  		addq.b	#2,obRoutine(a0)
00019B0E 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
00019B16 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
00019B1C 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
00019B22 6700                       		beq.s	@isscrapbrain
00019B24 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
00019B2A                            
00019B2A                            	@isscrapbrain:
00019B2A 0228 0003 0001             		andi.b	#3,obRender(a0)
00019B30 0028 0004 0001             		ori.b	#4,obRender(a0)
00019B36 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
00019B3C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019B42 117C 0008 0014             		move.b	#8,obActWid(a0)
00019B48 117C 000B 0020             		move.b	#$B,obColType(a0)
00019B4E 3428 0008                  		move.w	obX(a0),d2
00019B52 7A0C                       		moveq	#$C,d5
00019B54 0828 0000 0022             		btst	#0,obStatus(a0)
00019B5A 6700                       		beq.s	@noflip
00019B5C 4445                       		neg.w	d5
00019B5E                            
00019B5E                            	@noflip:
00019B5E 1C3C 0004                  		move.b	#4,d6
00019B62 7600                       		moveq	#0,d3
00019B64 7804                       		moveq	#4,d4
00019B66 2448                       		movea.l	a0,a2
00019B68 7202                       		moveq	#2,d1
00019B6A                            
00019B6A                            Cat_Loop:
00019B6A 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
00019B70 6600 0000                  			bne.w	Cat_ChkGone
00019B74 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
00019B78 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
00019B7C 5406                       		addq.b	#2,d6		; alternate between the two
00019B7E 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00019B84 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00019B8A 337C 0280 0018             		move.w	#$280,obPriority(a1)
00019B90 137C 0008 0014             		move.b	#8,obActWid(a1)
00019B96 137C 00CB 0020             		move.b	#$CB,obColType(a1)
00019B9C D445                       		add.w	d5,d2
00019B9E 3342 0008                  		move.w	d2,obX(a1)
00019BA2 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019BA8 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019BAE 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
00019BB4 137C 0008 001A             		move.b	#8,obFrame(a1)
00019BBA 234A 003C                  		move.l	a2,cat_parent(a1)
00019BBE 1344 003C                  		move.b	d4,cat_parent(a1)
00019BC2 5804                       		addq.b	#4,d4
00019BC4 2449                       		movea.l	a1,a2
00019BC6                            
00019BC6                            	@fail:
00019BC6 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
00019BCA                            
00019BCA 117C 0007 002A             		move.b	#7,$2A(a0)
00019BD0 4228 003C                  		clr.b	cat_parent(a0)
00019BD4                            
00019BD4                            Cat_Head:	; Routine 2
00019BD4 4A28 0022                  		tst.b	obStatus(a0)
00019BD8 6B00 0000                  		bmi.w	loc_16C96
00019BDC 7000                       		moveq	#0,d0
00019BDE 1028 0025                  		move.b	ob2ndRout(a0),d0
00019BE2 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
00019BE6 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
00019BEA 1228 002B                  		move.b	$2B(a0),d1
00019BEE 6A00                       		bpl.s	@display
00019BF0 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019BF6 1028 0026                  		move.b	obAngle(a0),d0
00019BFA 0240 007F                  		andi.w	#$7F,d0
00019BFE 5828 0026                  		addq.b	#4,obAngle(a0)
00019C02 1031 0000                  		move.b	(a1,d0.w),d0
00019C06 6A00                       		bpl.s	@animate
00019C08 08A8 0007 002B             		bclr	#7,$2B(a0)
00019C0E 6000                       		bra.s	@display
00019C10                            
00019C10                            	@animate:
00019C10 0201 0010                  		andi.b	#$10,d1
00019C14 D001                       		add.b	d1,d0
00019C16 1140 001A                  		move.b	d0,obFrame(a0)
00019C1A                            
00019C1A                            	@display:
00019C38 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00019C3E                            
00019C3E                            	Cat_ChkGone:
00019C3E 45F8 FC00                  		lea	(v_objstate).w,a2
00019C42 7000                       		moveq	#0,d0
00019C44 1028 0023                  		move.b	obRespawnNo(a0),d0
00019C48 6700                       		beq.s	@delete
00019C4A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019C50                            
00019C50                            	@delete:
00019C50 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019C56 4E75                       		rts	
00019C58                            ; ===========================================================================
00019C58                            
00019C58                            Cat_Delete:	; Routine $A
00019C58 4EF9 0000 FA62             		jmp	(DeleteObject).l
00019C5E                            ; ===========================================================================
00019C5E 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00019C60 0000                       		dc.w loc_16B02-Cat_Index2
00019C62                            ; ===========================================================================
00019C62                            
00019C62                            @wait:
00019C62 5328 002A                  		subq.b	#1,$2A(a0)
00019C66 6B00                       		bmi.s	@move
00019C68 4E75                       		rts	
00019C6A                            ; ===========================================================================
00019C6A                            
00019C6A                            @move:
00019C6A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019C6E 117C 0010 002A             		move.b	#$10,$2A(a0)
00019C74 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019C7A 317C 0040 001C             		move.w	#$40,obAnim(a0)
00019C80 0868 0004 002B             		bchg	#4,$2B(a0)
00019C86 6600                       		bne.s	loc_16AFC
00019C88 4268 0010                  		clr.w	obVelX(a0)
00019C8C 4468 001C                  		neg.w	obAnim(a0)
00019C90                            
00019C90                            loc_16AFC:
00019C90 08E8 0007 002B             		bset	#7,$2B(a0)
00019C96                            
00019C96                            loc_16B02:
00019C96 5328 002A                  		subq.b	#1,$2A(a0)
00019C9A 6B00                       		bmi.s	@loc_16B5E
00019C9C 4A68 0010                  			tst.w	obVelX(a0)
00019CA0 6700                       			beq.s	@notmoving
00019CA2 2428 0008                  			move.l	obX(a0),d2
00019CA6 2602                       			move.l	d2,d3
00019CA8 3028 0010                  		move.w	obVelX(a0),d0
00019CAC 0828 0000 0022             		btst	#0,obStatus(a0)
00019CB2 6700                       		beq.s	@noflip
00019CB4 4440                       		neg.w	d0
00019CB6                            
00019CB6                            	@noflip:
00019CB6 48C0                       		ext.l	d0
00019CB8 E180                       		asl.l	#8,d0
00019CBA D480                       		add.l	d0,d2
00019CBC 2142 0008                  		move.l	d2,obX(a0)
00019CC0 4843                       			swap	d3
00019CC2 B668 0008                  			cmp.w	obX(a0),d3
00019CC6 6700                       			beq.s	@notmoving
00019CC8 4EB9 0001 7FAE             			jsr	(ObjFloorDist).l
00019CCE 0C41 FFF8                  			cmpi.w	#-8,d1
00019CD2 6D00                       			blt.s	@loc_16B70
00019CD4 0C41 000C                  			cmpi.w	#$C,d1
00019CD8 6C00                       			bge.s	@loc_16B70
00019CDA D368 000C                  			add.w	d1,obY(a0)
00019CDE 7000                       		moveq	#0,d0
00019CE0 1028 003C                  		move.b	cat_parent(a0),d0
00019CE4 5228 003C                  		addq.b	#1,cat_parent(a0)
00019CE8 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019CEE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019CF2                            
00019CF2                            	@notmoving:
00019CF2 4E75                       		rts	
00019CF4                            ; ===========================================================================
00019CF4                            
00019CF4                            @loc_16B5E:
00019CF4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019CF8 117C 0007 002A             		move.b	#7,$2A(a0)
00019CFE 4268 0010                  			clr.w	obVelX(a0)
00019D02 4268 001C                  			clr.w	obAnim(a0)
00019D06 4E75                       		rts	
00019D08                            ; ===========================================================================
00019D08                            
00019D08                            @loc_16B70:
00019D08 7000                       			moveq	#0,d0
00019D0A 1028 003C                  			move.b	cat_parent(a0),d0
00019D0E 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019D14 4468 000A                  			neg.w	obX+2(a0)
00019D18 6700                       			beq.s	@loc_1730A
00019D1A 0828 0000 0022             			btst	#0,obStatus(a0)
00019D20 6700                       			beq.s	@loc_1730A
00019D22 5368 0008                  			subq.w	#1,obX(a0)
00019D26 5228 003C                  			addq.b	#1,cat_parent(a0)
00019D2A 7000                       			moveq	#0,d0
00019D2C 1028 003C                  			move.b	cat_parent(a0),d0
00019D30 4230 002C                  			clr.b	$2C(a0,d0)
00019D34                            	@loc_1730A:
00019D34 0868 0000 0022             			bchg	#0,obStatus(a0)
00019D3A 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019D40 5228 003C                  		addq.b	#1,cat_parent(a0)
00019D44 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019D4A 4E75                       		rts	
00019D4C                            ; ===========================================================================
00019D4C                            
00019D4C                            Cat_BodySeg2:	; Routine 6
00019D4C 2268 003C                  		movea.l	cat_parent(a0),a1
00019D50 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019D56 6A00                       		bpl.s	Cat_BodySeg1
00019D58 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019D5E 1028 0026                  		move.b	obAngle(a0),d0
00019D62 0240 007F                  		andi.w	#$7F,d0
00019D66 5828 0026                  		addq.b	#4,obAngle(a0)
00019D6A 4A31 0004                  		tst.b	4(a1,d0.w)
00019D6E 6A00                       		bpl.s	Cat_AniBody
00019D70 5828 0026                  		addq.b	#4,obAngle(a0)
00019D74                            
00019D74                            Cat_AniBody:
00019D74 1031 0000                  		move.b	(a1,d0.w),d0
00019D78 5000                       		addq.b	#8,d0
00019D7A 1140 001A                  		move.b	d0,obFrame(a0)
00019D7E                            
00019D7E                            Cat_BodySeg1:	; Routine 4, 8
00019D7E 2268 003C                  		movea.l	cat_parent(a0),a1
00019D82 4A28 0022                  		tst.b	obStatus(a0)
00019D86 6B00 0000                  		bmi.w	loc_16C90
00019D8A 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019D90 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019D96 6700 0000                  		beq.w	loc_16C64
00019D9A 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019DA0 3029 0010                  		move.w	obVelX(a1),d0
00019DA4 D068 001C                  			add.w	obAnim(a0),d0
00019DA8 3140 0010                  		move.w	d0,obVelX(a0)
00019DAC 2428 0008                  		move.l	obX(a0),d2
00019DB0 2602                       		move.l	d2,d3
00019DB2 3028 0010                  		move.w	obVelX(a0),d0
00019DB6 0828 0000 0022             		btst	#0,obStatus(a0)
00019DBC 6700                       		beq.s	loc_16C0C
00019DBE 4440                       		neg.w	d0
00019DC0                            
00019DC0                            loc_16C0C:
00019DC0 48C0                       		ext.l	d0
00019DC2 E180                       		asl.l	#8,d0
00019DC4 D480                       		add.l	d0,d2
00019DC6 2142 0008                  		move.l	d2,obX(a0)
00019DCA 4843                       		swap	d3
00019DCC B668 0008                  		cmp.w	obX(a0),d3
00019DD0 6700                       		beq.s	loc_16C64
00019DD2 7000                       		moveq	#0,d0
00019DD4 1028 003C                  		move.b	cat_parent(a0),d0
00019DD8 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019DDC 0C01 0080                  		cmpi.b	#$80,d1
00019DE0 6600                       		bne.s	loc_16C50
00019DE2 1181 002C                  			move.b	d1,$2C(a0,d0)
00019DE6 4468 000A                  			neg.w	obX+2(a0)
00019DEA 6700                       			beq.s	locj_173E4
00019DEC 0828 0000 0022             			btst	#0,obStatus(a0)
00019DF2 6700                       			beq.s	locj_173E4
00019DF4 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019DFA 6600                       			bne.s	locj_173E4
00019DFC 5368 0008                  			subq.w	#1,obX(a0)
00019E00 5228 003C                  			addq.b	#1,cat_parent(a0)
00019E04 7000                       			moveq	#0,d0
00019E06 1028 003C                  			move.b	cat_parent(a0),d0
00019E0A 4230 002C                  			clr.b	$2C(a0,d0)
00019E0E                            	locj_173E4:
00019E0E 0868 0000 0022             		bchg	#0,obStatus(a0)
00019E14 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019E1A 5228 003C                  		addq.b	#1,cat_parent(a0)
00019E1E 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019E24 6000                       		bra.s	loc_16C64
00019E26                            ; ===========================================================================
00019E26                            
00019E26                            loc_16C50:
00019E26 4881                       		ext.w	d1
00019E28 D368 000C                  		add.w	d1,obY(a0)
00019E2C 5228 003C                  		addq.b	#1,cat_parent(a0)
00019E30 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019E36 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019E3A                            
00019E3A                            loc_16C64:
00019E3A 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019E40 6700                       		beq.s	loc_16C90
00019E42 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019E46 6700                       		beq.s	loc_16C7C
00019E48 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019E4E 6600                       		bne.s	loc_16C82
00019E50                            
00019E50                            loc_16C7C:
00019E50 4229 0020                  		clr.b    $20(a1)
00019E54 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019E5A                            
00019E5A                            loc_16C82:
00019E5A 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00019E60                            
00019E60                            ; ===========================================================================
00019E60 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019E68                            ; ===========================================================================
00019E68                            
00019E68                            loc_16C90:
00019E68 08E9 0007 0022             		bset	#7,obStatus(a1)
00019E6E                            
00019E6E                            loc_16C96:
00019E6E 7000                       		moveq	#0,d0
00019E70 1028 0024                  		move.b	obRoutine(a0),d0
00019E74 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019E78 0828 0000 0022             		btst	#0,obStatus(a0)
00019E7E 6700                       		beq.s	loc_16CAA
00019E80 4440                       		neg.w	d0
00019E82                            
00019E82                            loc_16CAA:
00019E82 3140 0010                  		move.w	d0,obVelX(a0)
00019E86 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019E8C 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019E92 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019E98                            
00019E98                            loc_16CC0:	; Routine $C
00019E98 4EB9 0000 F9D6             		jsr	(ObjectFall).l
00019E9E 4A68 0012                  		tst.w	obVelY(a0)
00019EA2 6B00                       		bmi.s	loc_16CE0
00019EA4 4EB9 0001 7FAE             		jsr	(ObjFloorDist).l
00019EAA 4A41                       		tst.w	d1
00019EAC 6A00                       		bpl.s	loc_16CE0
00019EAE D368 000C                  		add.w	d1,obY(a0)
00019EB2 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019EB8                            
00019EB8                            loc_16CE0:
00019EB8 4A28 0001                  		tst.b	obRender(a0)
00019EBC 6A00 FD80                  		bpl.w	Cat_ChkGone
00019EC0 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00019EC0 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00019EC6                            		include	"_anim\Caterkiller.asm"
00019EC6                            ; ---------------------------------------------------------------------------
00019EC6                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019EC6                            ; ---------------------------------------------------------------------------
00019EC6 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019ED6 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019EE6 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019EF6 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019F06 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019F16 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019F26 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019F36 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019F46                            		even
00019F46                            		even
00019F46                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019F46                            ; ---------------------------------------------------------------------------
00019F46                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019F46                            ; ---------------------------------------------------------------------------
00019F46                            Map_Cat_internal:
00019F46 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019F48 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019F4A 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019F4C 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019F4E 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019F50 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019F52 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019F54 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019F56 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019F58 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019F5A 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019F5C 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019F5E 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019F60 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019F62 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019F64 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019F66 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019F68 0000                       		dc.w byte_16E04-Map_Cat_internal
00019F6A 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019F6C 0000                       		dc.w byte_16E10-Map_Cat_internal
00019F6E 0000                       		dc.w byte_16E16-Map_Cat_internal
00019F70 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019F72 0000                       		dc.w byte_16E22-Map_Cat_internal
00019F74 0000                       		dc.w byte_16E28-Map_Cat_internal
00019F76 01                         byte_16D9E:	dc.b 1
00019F77 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019F7C 01                         byte_16DA4:	dc.b 1
00019F7D F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019F82 01                         byte_16DAA:	dc.b 1
00019F83 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019F88 01                         byte_16DB0:	dc.b 1
00019F89 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019F8E 01                         byte_16DB6:	dc.b 1
00019F8F EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019F94 01                         byte_16DBC:	dc.b 1
00019F95 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019F9A 01                         byte_16DC2:	dc.b 1
00019F9B EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019FA0 01                         byte_16DC8:	dc.b 1
00019FA1 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019FA6 01                         byte_16DCE:	dc.b 1
00019FA7 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019FAC 01                         byte_16DD4:	dc.b 1
00019FAD F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019FB2 01                         byte_16DDA:	dc.b 1
00019FB3 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019FB8 01                         byte_16DE0:	dc.b 1
00019FB9 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019FBE 01                         byte_16DE6:	dc.b 1
00019FBF F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019FC4 01                         byte_16DEC:	dc.b 1
00019FC5 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019FCA 01                         byte_16DF2:	dc.b 1
00019FCB F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019FD0 01                         byte_16DF8:	dc.b 1
00019FD1 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019FD6 01                         byte_16DFE:	dc.b 1
00019FD7 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019FDC 01                         byte_16E04:	dc.b 1
00019FDD F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019FE2 01                         byte_16E0A:	dc.b 1
00019FE3 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019FE8 01                         byte_16E10:	dc.b 1
00019FE9 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019FEE 01                         byte_16E16:	dc.b 1
00019FEF EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019FF4 01                         byte_16E1C:	dc.b 1
00019FF5 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019FFA 01                         byte_16E22:	dc.b 1
00019FFB EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001A000 01                         byte_16E28:	dc.b 1
0001A001 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001A006                            		even
0001A006                            		even
0001A006                            
0001A006                            		include	"_incObj\79 Lamppost.asm"
0001A006                            ; ---------------------------------------------------------------------------
0001A006                            ; Object 79 - lamppost
0001A006                            ; ---------------------------------------------------------------------------
0001A006                            
0001A006                            Lamppost:
0001A006 7000                       		moveq	#0,d0
0001A008 1028 0024                  		move.b	obRoutine(a0),d0
0001A00C 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
0001A010 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
0001A014 4EF9 0001 19AC             		jmp	(RememberState).l
0001A01A                            ; ===========================================================================
0001A01A 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
0001A01C 0000                       		dc.w Lamp_Blue-Lamp_Index
0001A01E 0000                       		dc.w Lamp_Finish-Lamp_Index
0001A020 0000                       		dc.w Lamp_Twirl-Lamp_Index
0001A022                            
0001A022 =00000030                  lamp_origX:	equ $30		; original x-axis position
0001A022 =00000032                  lamp_origY:	equ $32		; original y-axis position
0001A022 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
0001A022                            ; ===========================================================================
0001A022                            
0001A022                            Lamp_Main:	; Routine 0
0001A022 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A026 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
0001A02E 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
0001A034 117C 0004 0001             		move.b	#4,obRender(a0)
0001A03A 117C 0008 0014             		move.b	#8,obActWid(a0)
0001A040 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001A046 45F8 FC00                  		lea	(v_objstate).w,a2
0001A04A 7000                       		moveq	#0,d0
0001A04C 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A050 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A056 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001A05C 6600                       		bne.s	@red
0001A05E 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001A062 0201 007F                  		andi.b	#$7F,d1
0001A066 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
0001A06A 0202 007F                  		andi.b	#$7F,d2
0001A06E B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001A070 6500                       		bcs.s	Lamp_Blue	; if yes, branch
0001A072                            
0001A072                            @red:
0001A072 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A078 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A07E 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A084 4E75                       		rts	
0001A086                            
0001A086                            ; ===========================================================================
0001A086                            
0001A086                            Lamp_Blue:	; Routine 2
0001A086 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001A08A 6600 0000                  		bne.w	@donothing	; if yes, branch
0001A08E 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001A092 6B00 0000                  		bmi.w	@donothing
0001A096 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001A09A 0201 007F                  		andi.b	#$7F,d1
0001A09E 1428 0028                  		move.b	obSubtype(a0),d2
0001A0A2 0202 007F                  		andi.b	#$7F,d2
0001A0A6 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001A0A8 6500                       		bcs.s	@chkhit		; if yes, branch
0001A0AA 45F8 FC00                  		lea	(v_objstate).w,a2
0001A0AE 7000                       		moveq	#0,d0
0001A0B0 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A0B4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A0BA 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001A0C0 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A0C6 6000 0000                  		bra.w	@donothing
0001A0CA                            ; ===========================================================================
0001A0CA                            
0001A0CA                            @chkhit:
0001A0CA 3038 D008                  		move.w	(v_player+obX).w,d0
0001A0CE 9068 0008                  		sub.w	obX(a0),d0
0001A0D2 5040                       		addq.w	#8,d0
0001A0D4 0C40 0010                  		cmpi.w	#$10,d0
0001A0D8 6400 0000                  		bcc.w	@donothing
0001A0DC 3038 D00C                  		move.w	(v_player+obY).w,d0
0001A0E0 9068 000C                  		sub.w	obY(a0),d0
0001A0E4 0640 0040                  		addi.w	#$40,d0
0001A0E8 0C40 0068                  		cmpi.w	#$68,d0
0001A0EC 6400                       		bcc.s	@donothing
0001A0EE                            
0001A0F8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A0FC 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
0001A102 6600                       		bne.s	@fail
0001A104 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001A108 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001A10E 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001A114 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001A11A 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001A120 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001A128 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001A12E 137C 0004 0001             		move.b	#4,obRender(a1)
0001A134 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A13A 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001A140 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001A146 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001A14C                            
0001A14C                            	@fail:
0001A14C 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001A152 6100 0000                  		bsr.w	Lamp_StoreInfo
0001A156 45F8 FC00                  		lea	(v_objstate).w,a2
0001A15A 7000                       		moveq	#0,d0
0001A15C 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A160 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A166                            
0001A166                            	@donothing:
0001A166 4E75                       		rts	
0001A168                            ; ===========================================================================
0001A168                            
0001A168                            Lamp_Finish:	; Routine 4	
0001A168 4E75                       		rts	
0001A16A                            ; ===========================================================================
0001A16A                            
0001A16A                            Lamp_Twirl:	; Routine 6
0001A16A 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001A16E 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001A170 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A176                            
0001A176                            	@continue:
0001A176 1028 0026                  		move.b	obAngle(a0),d0
0001A17A 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001A180 0400 0040                  		subi.b	#$40,d0
0001A184 4EB9 0000 3A82             		jsr	(CalcSine).l
0001A18A C3FC 0C00                  		muls.w	#$C00,d1
0001A18E 4841                       		swap	d1
0001A190 D268 0030                  		add.w	lamp_origX(a0),d1
0001A194 3141 0008                  		move.w	d1,obX(a0)
0001A198 C1FC 0C00                  		muls.w	#$C00,d0
0001A19C 4840                       		swap	d0
0001A19E D068 0032                  		add.w	lamp_origY(a0),d0
0001A1A2 3140 000C                  		move.w	d0,obY(a0)
0001A1A6 4E75                       		rts	
0001A1A8                            ; ===========================================================================
0001A1A8                            ; ---------------------------------------------------------------------------
0001A1A8                            ; Subroutine to	store information when you hit a lamppost
0001A1A8                            ; ---------------------------------------------------------------------------
0001A1A8                            
0001A1A8                            Lamp_StoreInfo:
0001A1A8 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001A1AE 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001A1B4 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001A1BA 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001A1C0 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001A1C6 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001A1CC 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001A1D2 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001A1D8 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001A1DE 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001A1E4 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001A1EA 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001A1F0 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001A1F6 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001A1FC 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001A202 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001A208 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001A20E 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001A214 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001A21A 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001A220 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001A226 4E75                       		rts	
0001A228                            
0001A228                            ; ---------------------------------------------------------------------------
0001A228                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001A228                            ; ---------------------------------------------------------------------------
0001A228                            
0001A228                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A228                            
0001A228                            
0001A228                            Lamp_LoadInfo:
0001A228 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001A22E 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001A234 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001A23A 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001A240 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001A246 4278 FE20                  		clr.w	(v_rings).w
0001A24A 4238 FE1B                  		clr.b	(v_lifecount).w
0001A24E 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001A254 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001A25A 5338 FE24                  		subq.b	#1,(v_timesec).w
0001A25E 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001A264 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A26A 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001A270 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001A276 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001A27C 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001A282 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001A288 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001A28E 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001A294 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001A29A 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001A2A0 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001A2A6 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001A2AC 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001A2B2 6600                       		bne.s	@notlabyrinth	; if not, branch
0001A2B4                            
0001A2B4 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001A2BA 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A2C0 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001A2C6                            
0001A2C6                            	@notlabyrinth:
0001A2C6 4A38 FE30                  		tst.b	(v_lastlamp).w
0001A2CA 6A00                       		bpl.s	locret_170F6
0001A2CC 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A2D0 0440 00A0                  		subi.w	#$A0,d0
0001A2D4 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001A2D8                            
0001A2D8                            locret_170F6:
0001A2D8 4E75                       		rts	
0001A2D8 4E75                       		rts	
0001A2DA                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001A2DA                            ; --------------------------------------------------------------------------------
0001A2DA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A2DA                            ; --------------------------------------------------------------------------------
0001A2DA                            
0001A2DA                            SME_JfaKr:	
0001A2DA 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001A2DE 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A2E2 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A2E4 0A                         SME_JfaKr_A:	dc.b $A	
0001A2E5 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A2EA E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A2EF D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A2F4 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A2F9 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A2FE F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A303 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A308 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A30D 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A312 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A317 08                         SME_JfaKr_3D:	dc.b 8	
0001A318 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A31D E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A322 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A327 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A32C 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A331 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A336 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A33B 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A340 02                         SME_JfaKr_66:	dc.b 2	
0001A341 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A346 F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A34B 0A                         SME_JfaKr_71:	dc.b $A	
0001A34C E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A351 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A356 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A35B F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A360 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A365 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A36A 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A36F 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A374 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A379 D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A37E 0A                         SME_JfaKr_A4:	dc.b $A	
0001A37F E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A384 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A389 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A38E F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A393 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A398 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A39D 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A3A2 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A3A7 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A3AC D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A3B2 00                         		even
0001A3B2 00                         		even
0001A3B2                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A3B2                            ; ---------------------------------------------------------------------------
0001A3B2                            ; Object 7D - hidden points at the end of a level
0001A3B2                            ; ---------------------------------------------------------------------------
0001A3B2                            
0001A3B2                            HiddenBonus:
0001A3B2 7000                       		moveq	#0,d0
0001A3B4 1028 0024                  		move.b	obRoutine(a0),d0
0001A3B8 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A3BC 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A3C0                            ; ===========================================================================
0001A3C0 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A3C2 0000                       		dc.w Bonus_Display-Bonus_Index
0001A3C4                            
0001A3C4 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A3C4                            ; ===========================================================================
0001A3C4                            
0001A3C4                            Bonus_Main:	; Routine 0
0001A3C4 7410                       		moveq	#$10,d2
0001A3C6 3602                       		move.w	d2,d3
0001A3C8 D643                       		add.w	d3,d3
0001A3CA 43F8 D000                  		lea	(v_player).w,a1
0001A3CE 3029 0008                  		move.w	obX(a1),d0
0001A3D2 9068 0008                  		sub.w	obX(a0),d0
0001A3D6 D042                       		add.w	d2,d0
0001A3D8 B043                       		cmp.w	d3,d0
0001A3DA 6400                       		bcc.s	bonu_chkdel
0001A3DC 3229 000C                  		move.w	obY(a1),d1
0001A3E0 9268 000C                  		sub.w	obY(a0),d1
0001A3E4 D242                       		add.w	d2,d1
0001A3E6 B243                       		cmp.w	d3,d1
0001A3E8 6400                       		bcc.s	bonu_chkdel
0001A3EA 4A78 FE08                  		tst.w	(v_debuguse).w
0001A3EE 6600                       		bne.s	bonu_chkdel
0001A3F0 4A38 F7CD                  		tst.b	(f_bigring).w
0001A3F4 6600                       		bne.s	bonu_chkdel
0001A3F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A3FA 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A402 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A408 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A40E 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A414 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A41A 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A420 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A430 7000                       		moveq	#0,d0
0001A432 1028 0028                  		move.b	obSubtype(a0),d0
0001A436 D040                       		add.w	d0,d0
0001A438 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A43C 4EB9 0000 0000             		jsr	(AddPoints).l
0001A442                            
0001A442                            bonu_chkdel:
0001A45E 4E75                       		rts	
0001A460                            
0001A460                            	@delete:
0001A460 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001A466                            
0001A466                            ; ===========================================================================
0001A466 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A468 03E8                       		dc.w 1000
0001A46A 0064                       		dc.w 100
0001A46C 000A                       		dc.w 10
0001A46E                            ; ===========================================================================
0001A46E                            
0001A46E                            Bonus_Display:	; Routine 2
0001A46E 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A472 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A490 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001A496                            
0001A496                            Bonus_Display_Delete:	
0001A496 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001A496 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001A49C                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A49C                            ; ---------------------------------------------------------------------------
0001A49C                            ; Sprite mappings - hidden points at the end of	a level
0001A49C                            ; ---------------------------------------------------------------------------
0001A49C                            Map_Bonus_internal:
0001A49C 0000                       		dc.w @blank-Map_Bonus_internal
0001A49E 0000                       		dc.w @10000-Map_Bonus_internal
0001A4A0 0000                       		dc.w @1000-Map_Bonus_internal
0001A4A2 0000                       		dc.w @100-Map_Bonus_internal
0001A4A4 00                         @blank:		dc.b 0
0001A4A5 01                         @10000:		dc.b 1
0001A4A6 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A4AB 01                         @1000:		dc.b 1
0001A4AC F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A4B1 01                         @100:		dc.b 1
0001A4B2 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A4B8 00                         		even
0001A4B8 00                         		even
0001A4B8                            
0001A4B8                            		include	"_incObj\8A Credits.asm"
0001A4B8                            ; ---------------------------------------------------------------------------
0001A4B8                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A4B8                            ; ---------------------------------------------------------------------------
0001A4B8                            
0001A4B8                            CreditsText:
0001A4B8 7000                       		moveq	#0,d0
0001A4BA 1028 0024                  		move.b	obRoutine(a0),d0
0001A4BE 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A4C2 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A4C6                            ; ===========================================================================
0001A4C6 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A4C8 0000                       		dc.w Cred_Display-Cred_Index
0001A4CA                            ; ===========================================================================
0001A4CA                            
0001A4CA                            Cred_Main:	; Routine 0
0001A4CA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A4CE 317C 0120 0008             		move.w	#$120,obX(a0)
0001A4D4 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A4DA 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A4E2 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A4E8 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A4EC 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A4F0 117C 0000 0001             		move.b	#0,obRender(a0)
0001A4F6 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A4FC                            
0001A4FC 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A502 6600                       		bne.s	Cred_Display	; if not, branch
0001A504                            
0001A504 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A50A 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A510 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A514 6700                       		beq.s	Cred_Display	; if not, branch
0001A516 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A51C 6600                       		bne.s	Cred_Display	; if not, branch
0001A51E 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A524 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A52A 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001A530                            ; ===========================================================================
0001A530                            
0001A530                            Cred_Display:	; Routine 2
0001A530 4EF9 0000 FA22             		jmp	DisplaySprite
0001A530 4EF9 0000 FA22             		jmp	DisplaySprite
0001A536                            Map_Cred:	include	"_maps\Credits.asm"
0001A536                            ; ---------------------------------------------------------------------------
0001A536                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A536                            ; ---------------------------------------------------------------------------
0001A536                            Map_Cred_internal:
0001A536 0000                       		dc.w @staff-Map_Cred_internal
0001A538 0000                       		dc.w @gameplan-Map_Cred_internal
0001A53A 0000                       		dc.w @program-Map_Cred_internal
0001A53C 0000                       		dc.w @character-Map_Cred_internal
0001A53E 0000                       		dc.w @design-Map_Cred_internal
0001A540 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A542 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A544 0000                       		dc.w @thanks-Map_Cred_internal
0001A546 0000                       		dc.w @presentedby-Map_Cred_internal
0001A548 0000                       		dc.w @tryagain-Map_Cred_internal
0001A54A 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A54C 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A54D F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A552 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A557 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A55C F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A561 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A566 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A56B F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A570 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A575 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A57A F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A57F F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A584 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A589 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A58E F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A593 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A594 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A599 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A59E 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A5A3 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A5A8 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A5AD 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A5B2 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A5B7 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A5BC 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A5C1                            
0001A5C1 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A5C6 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A5CB B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A5D0 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A5D5 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A5DA 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A5DB 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A5E0 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A5E5 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A5EA 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A5EF 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A5F4 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A5F9 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A5FE                            
0001A5FE B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A603 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A608 B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A60D B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A612 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A617 B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A61C B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A621 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A626                            
0001A626 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A62B D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A630                            
0001A630 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A635 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A63A D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A63F D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A644 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A649 D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A64E                            
0001A64E F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A653 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A658 F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A65D 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A65E 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A663 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A668 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A66D                            
0001A66D B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A672 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A677 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A67C B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A681 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A686 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A687 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A68C 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A691 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A696 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A69B 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A6A0 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A6A5                            
0001A6A5 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A6AA B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A6AF B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A6B4 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A6B9 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A6BE 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A6BF 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A6C4 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A6C9 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A6CE 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A6D3 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A6D8 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A6DD 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A6E2 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A6E7 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A6EC 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A6F1                            
0001A6F1 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A6F6 B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A6FB B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A700 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A705 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A70A B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A70F B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A714 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A719                            
0001A719 D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A71E D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A723 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A728 D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A72D D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A732 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A737 D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A73C D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A741 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A746 D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A74B 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A74C D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A751 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A756 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A75B D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A760 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A765 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A76A D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A76F D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A774 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A779 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A77E D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A783 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A788 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A78D 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A792 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A797 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A79C 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A7A1 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A7A6 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A7AB 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A7B0 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A7B5 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A7BA 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A7BF 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A7C0 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A7C5 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A7CA 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A7CF 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A7D4 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A7D9 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A7DE 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A7E3 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A7E8                            
0001A7E8 B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A7ED B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A7F2 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A7F7 B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A7FC B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A801 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A806                            
0001A806 D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A80B D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A810 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A815 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A816 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A81B 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A820 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A825 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A82A 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A82F 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A834 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A839 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A83E 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A843                            
0001A843 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A848 B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A84D                            
0001A84D D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A852 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A857 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A85C D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A861 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A866 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A867 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A86C 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A871 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A876 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A87B 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A880 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A885 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A88A 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A88F 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A890 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A895 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A89A E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A89F E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A8A4 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A8A9 E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A8AE                            
0001A8AE 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A8B3 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A8B8 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A8BD 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A8C2 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A8C7 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A8CC 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A8D1 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A8D6                            		even
0001A8D6                            		even
0001A8D6                            
0001A8D6                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A8D6                            ; ---------------------------------------------------------------------------
0001A8D6                            ; Object 3D - Eggman (GHZ)
0001A8D6                            ; ---------------------------------------------------------------------------
0001A8D6                            
0001A8D6                            BossGreenHill:
0001A8D6 7000                       		moveq	#0,d0
0001A8D8 1028 0024                  		move.b	obRoutine(a0),d0
0001A8DC 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A8E0 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A8E4                            ; ===========================================================================
0001A8E4 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A8E6 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A8E8 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A8EA 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A8EC                            
0001A8EC 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A8EE 0401                       		dc.b 4,	1
0001A8F0 0607                       		dc.b 6,	7
0001A8F2                            ; ===========================================================================
0001A8F2                            
0001A8F2                            BGHZ_Main:	; Routine 0
0001A8F2 45F9 0001 A8EC             		lea	(BGHZ_ObjData).l,a2
0001A8F8 2248                       		movea.l	a0,a1
0001A8FA 7202                       		moveq	#2,d1
0001A8FC 6000                       		bra.s	BGHZ_LoadBoss
0001A8FE                            ; ===========================================================================
0001A8FE                            
0001A8FE                            BGHZ_Loop:
0001A8FE 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001A904 6600                       		bne.s	loc_17772
0001A906                            
0001A906                            BGHZ_LoadBoss:
0001A906 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A90A 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A90E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A914 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A91A 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A922 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A928 137C 0004 0001             		move.b	#4,obRender(a1)
0001A92E 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A934 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A93A 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A93E 2348 0034                  		move.l	a0,$34(a1)
0001A942 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A946                            
0001A946                            loc_17772:
0001A946 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A94C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A952 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A958 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A95E                            
0001A95E                            
0001A95E                            BGHZ_ShipMain:	; Routine 2
0001A95E 7000                       		moveq	#0,d0
0001A960 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A964 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A968 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A96C 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A972 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001A978 1028 0022                  		move.b	obStatus(a0),d0
0001A97C 0200 0003                  		andi.b	#3,d0
0001A980 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A986 8128 0001                  		or.b	d0,obRender(a0)
0001A98A 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001A990                            ; ===========================================================================
0001A990 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A992 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A994 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A996 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A998 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A99A 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A99C 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A99E                            ; ===========================================================================
0001A99E                            
0001A99E                            BGHZ_ShipStart:
0001A99E 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A9A4 6100 0000                  		bsr.w	BossMove
0001A9A8 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A9AE 6600                       		bne.s	loc_177E6
0001A9B0 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A9B6 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A9BA                            
0001A9BA                            loc_177E6:
0001A9BA 1028 003F                  		move.b	$3F(a0),d0
0001A9BE 4EB9 0000 3A82             		jsr	(CalcSine).l
0001A9C4 EC40                       		asr.w	#6,d0
0001A9C6 D068 0038                  		add.w	$38(a0),d0
0001A9CA 3140 000C                  		move.w	d0,obY(a0)
0001A9CE 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A9D4 5428 003F                  		addq.b	#2,$3F(a0)
0001A9D8 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A9DE 6400                       		bcc.s	locret_1784A
0001A9E0 4A28 0022                  		tst.b	obStatus(a0)
0001A9E4 6B00                       		bmi.s	loc_1784C
0001A9E6 4A28 0020                  		tst.b	obColType(a0)
0001A9EA 6600                       		bne.s	locret_1784A
0001A9EC 4A28 003E                  		tst.b	$3E(a0)
0001A9F0 6600                       		bne.s	BGHZ_ShipFlash
0001A9F2 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001AA02                            
0001AA02                            BGHZ_ShipFlash:
0001AA02 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001AA06 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001AA08 4A51                       		tst.w	(a1)
0001AA0A 6600                       		bne.s	loc_1783C
0001AA0C 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001AA10                            
0001AA10                            loc_1783C:
0001AA10 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001AA12 5328 003E                  		subq.b	#1,$3E(a0)
0001AA16 6600                       		bne.s	locret_1784A
0001AA18 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AA1E                            
0001AA1E                            locret_1784A:
0001AA1E 4E75                       		rts	
0001AA20                            ; ===========================================================================
0001AA20                            
0001AA20                            loc_1784C:
0001AA20 7064                       		moveq	#100,d0
0001AA22 6100 0000                  		bsr.w	AddPoints
0001AA26 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001AA2C 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001AA32 4E75                       		rts	
0001AA32 4E75                       		rts	
0001AA34                            
0001AA34                            ; ---------------------------------------------------------------------------
0001AA34                            ; Defeated boss	subroutine
0001AA34                            ; ---------------------------------------------------------------------------
0001AA34                            
0001AA34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AA34                            
0001AA34                            
0001AA34                            BossDefeated:
0001AA34 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001AA38 0200 0007                  		andi.b	#7,d0
0001AA3C 6600                       		bne.s	locret_178A2
0001AA3E 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
0001AA44 6600                       		bne.s	locret_178A2
0001AA46 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001AA4A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AA50 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AA56 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001AA5C 3200                       		move.w	d0,d1
0001AA5E 7200                       		moveq	#0,d1
0001AA60 1200                       		move.b	d0,d1
0001AA62 E409                       		lsr.b	#2,d1
0001AA64 0441 0020                  		subi.w	#$20,d1
0001AA68 D369 0008                  		add.w	d1,obX(a1)
0001AA6C E048                       		lsr.w	#8,d0
0001AA6E E608                       		lsr.b	#3,d0
0001AA70 D169 000C                  		add.w	d0,obY(a1)
0001AA74                            
0001AA74                            locret_178A2:
0001AA74 4E75                       		rts	
0001AA76                            ; End of function BossDefeated
0001AA76                            
0001AA76                            ; ---------------------------------------------------------------------------
0001AA76                            ; Subroutine to	move a boss
0001AA76                            ; ---------------------------------------------------------------------------
0001AA76                            
0001AA76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AA76                            
0001AA76                            
0001AA76                            BossMove:
0001AA76 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001AA7C E188                       		lsl.l	#8,d0
0001AA7E D1A8 0030                  		add.l	d0,$30(a0)
0001AA82 E18A                       		lsl.l	#8,d2
0001AA84 D5A8 0038                  		add.l	d2,$38(a0)
0001AA88 4E75                       		rts
0001AA8A                            ; End of function BossMove
0001AA8A                            
0001AA8A                            ; ===========================================================================
0001AA8A                            
0001AA8A                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001AA8A                            
0001AA8A                            BGHZ_MakeBall:
0001AA8A 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001AA90 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001AA96 6100 FFDE                  		bsr.w	BossMove
0001AA9A 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001AAA0 6600                       		bne.s	loc_17916
0001AAA2 317C 0000 0010             		move.w	#0,obVelX(a0)
0001AAA8 317C 0000 0012             		move.w	#0,obVelY(a0)
0001AAAE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AAB2 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001AAB8 6600                       		bne.s	loc_17910
0001AABA 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001AABE 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001AAC4 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001AACA 2348 0034                  		move.l	a0,$34(a1)
0001AACE                            
0001AACE                            loc_17910:
0001AACE 317C 0077 003C             		move.w	#$77,$3C(a0)
0001AAD4                            
0001AAD4                            loc_17916:
0001AAD4 6000 FEE4                  		bra.w	loc_177E6
0001AAD8                            ; ===========================================================================
0001AAD8                            
0001AAD8                            BGHZ_ShipMove:
0001AAD8 5368 003C                  		subq.w	#1,$3C(a0)
0001AADC 6A00                       		bpl.s	BGHZ_Reverse
0001AADE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AAE2 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AAE8 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001AAEE 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001AAF4 6600                       		bne.s	BGHZ_Reverse
0001AAF6 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001AAFC 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001AB02                            
0001AB02                            BGHZ_Reverse:
0001AB02 0828 0000 0022             		btst	#0,obStatus(a0)
0001AB08 6600                       		bne.s	loc_17950
0001AB0A 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001AB0E                            
0001AB0E                            loc_17950:
0001AB0E 6000 FEAA                  		bra.w	loc_177E6
0001AB12                            ; ===========================================================================
0001AB12                            
0001AB12                            loc_17954:
0001AB12 5368 003C                  		subq.w	#1,$3C(a0)
0001AB16 6B00                       		bmi.s	loc_17960
0001AB18 6100 FF5C                  		bsr.w	BossMove
0001AB1C 6000                       		bra.s	loc_17976
0001AB1E                            ; ===========================================================================
0001AB1E                            
0001AB1E                            loc_17960:
0001AB1E 0868 0000 0022             		bchg	#0,obStatus(a0)
0001AB24 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AB2A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001AB2E 317C 0000 0010             		move.w	#0,obVelX(a0)
0001AB34                            
0001AB34                            loc_17976:
0001AB34 6000 FE84                  		bra.w	loc_177E6
0001AB38                            ; ===========================================================================
0001AB38                            
0001AB38                            loc_1797A:
0001AB38 5368 003C                  		subq.w	#1,$3C(a0)
0001AB3C 6B00                       		bmi.s	loc_17984
0001AB3E 6000 FEF4                  		bra.w	BossDefeated
0001AB42                            ; ===========================================================================
0001AB42                            
0001AB42                            loc_17984:
0001AB42 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AB48 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001AB4E 4268 0010                  		clr.w	obVelX(a0)
0001AB52 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AB56 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001AB5C 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001AB60 6600                       		bne.s	locret_179AA
0001AB62 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001AB68                            
0001AB68                            locret_179AA:
0001AB68 4E75                       		rts	
0001AB6A                            ; ===========================================================================
0001AB6A                            
0001AB6A                            loc_179AC:
0001AB6A 5268 003C                  		addq.w	#1,$3C(a0)
0001AB6E 6700                       		beq.s	loc_179BC
0001AB70 6A00                       		bpl.s	loc_179C2
0001AB72 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001AB78 6000                       		bra.s	loc_179EE
0001AB7A                            ; ===========================================================================
0001AB7A                            
0001AB7A                            loc_179BC:
0001AB7A 4268 0012                  		clr.w	obVelY(a0)
0001AB7E 6000                       		bra.s	loc_179EE
0001AB80                            ; ===========================================================================
0001AB80                            
0001AB80                            loc_179C2:
0001AB80 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001AB86 6500                       		bcs.s	loc_179DA
0001AB88 6700                       		beq.s	loc_179E0
0001AB8A 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001AB90 6500                       		bcs.s	loc_179EE
0001AB92 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AB96 6000                       		bra.s	loc_179EE
0001AB98                            ; ===========================================================================
0001AB98                            
0001AB98                            loc_179DA:
0001AB98 5168 0012                  		subq.w	#8,obVelY(a0)
0001AB9C 6000                       		bra.s	loc_179EE
0001AB9E                            ; ===========================================================================
0001AB9E                            
0001AB9E                            loc_179E0:
0001AB9E 4268 0012                          clr.w    obVelY(a0)
0001ABA2 4A38 FE2D                          tst.b     (v_invinc).w
0001ABA6 6600                               bne.s   @boss_invinc
0001ABA8 4A38 FE2E                          tst.b     (v_shoes).w
0001ABAC 6600                               bne.s   @boss_shoes
0001ABAE                            
0001ABAE 1038 F5C6                          move.b   (v_Saved_music),d0
0001ABB2 6000 0000                          bra.w      @boss_play
0001ABB6                            
0001ABB6                            @boss_invinc:
0001ABB6 103C 0000                          move.b #bgm_Invincible,d0
0001ABBA                            
0001ABBA                            @boss_shoes:
0001ABBA 103C 0000                          move.b #bgm_Ending,d0
0001ABBE                            
0001ABBE                            @boss_play:
0001ABBE 4EB8 129A                          jsr PlaySound
0001ABC2                            
0001ABC2                            loc_179EE:
0001ABC2 6100 FEB2                  		bsr.w	BossMove
0001ABC6 6000 FDF2                  		bra.w	loc_177E6
0001ABCA                            ; ===========================================================================
0001ABCA                            
0001ABCA                            loc_179F6:
0001ABCA 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001ABD0 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001ABD6 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
0001ABDC 6700                       		beq.s	loc_17A10
0001ABDE 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001ABE2 6000                       		bra.s	loc_17A16
0001ABE4                            ; ===========================================================================
0001ABE4                            
0001ABE4                            loc_17A10:
0001ABE4 4A28 0001                  		tst.b	obRender(a0)
0001ABE8 6A00                       		bpl.s	BGHZ_ShipDel
0001ABEA                            
0001ABEA                            loc_17A16:
0001ABEA 6100 FE8A                  		bsr.w	BossMove
0001ABEE 6000 FDCA                  		bra.w	loc_177E6
0001ABF2                            ; ===========================================================================
0001ABF2                            
0001ABF2                            BGHZ_ShipDel:
0001ABF2 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001ABF8                            ; ===========================================================================
0001ABF8                            
0001ABF8                            BGHZ_FaceMain:	; Routine 4
0001ABF8 7000                       		moveq	#0,d0
0001ABFA 7201                       		moveq	#1,d1
0001ABFC 2268 0034                  		movea.l	$34(a0),a1
0001AC00 1029 0025                  		move.b	ob2ndRout(a1),d0
0001AC04 5900                       		subq.b	#4,d0
0001AC06 6600                       		bne.s	loc_17A3E
0001AC08 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001AC0E 6600                       		bne.s	loc_17A46
0001AC10 7204                       		moveq	#4,d1
0001AC12                            
0001AC12                            loc_17A3E:
0001AC12 5D00                       		subq.b	#6,d0
0001AC14 6B00                       		bmi.s	loc_17A46
0001AC16 720A                       		moveq	#$A,d1
0001AC18 6000                       		bra.s	loc_17A5A
0001AC1A                            ; ===========================================================================
0001AC1A                            
0001AC1A                            loc_17A46:
0001AC1A 4A29 0020                  		tst.b	obColType(a1)
0001AC1E 6600                       		bne.s	loc_17A50
0001AC20 7205                       		moveq	#5,d1
0001AC22 6000                       		bra.s	loc_17A5A
0001AC24                            ; ===========================================================================
0001AC24                            
0001AC24                            loc_17A50:
0001AC24 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001AC2A 6500                       		bcs.s	loc_17A5A
0001AC2C 7204                       		moveq	#4,d1
0001AC2E                            
0001AC2E                            loc_17A5A:
0001AC2E 1141 001C                  		move.b	d1,obAnim(a0)
0001AC32 5500                       		subq.b	#2,d0
0001AC34 6600                       		bne.s	BGHZ_FaceDisp
0001AC36 117C 0006 001C             		move.b	#6,obAnim(a0)
0001AC3C 4A28 0001                  		tst.b	obRender(a0)
0001AC40 6A00                       		bpl.s	BGHZ_FaceDel
0001AC42                            
0001AC42                            BGHZ_FaceDisp:
0001AC42 6000                       		bra.s	BGHZ_Display
0001AC44                            ; ===========================================================================
0001AC44                            
0001AC44                            BGHZ_FaceDel:
0001AC44 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001AC4A                            ; ===========================================================================
0001AC4A                            
0001AC4A                            BGHZ_FlameMain:	; Routine 6
0001AC4A 117C 0007 001C             		move.b	#7,obAnim(a0)
0001AC50 2268 0034                  		movea.l	$34(a0),a1
0001AC54 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001AC5A 6600                       		bne.s	loc_17A96
0001AC5C 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001AC62 4A28 0001                  		tst.b	obRender(a0)
0001AC66 6A00                       		bpl.s	BGHZ_FlameDel
0001AC68 6000                       		bra.s	BGHZ_FlameDisp
0001AC6A                            ; ===========================================================================
0001AC6A                            
0001AC6A                            loc_17A96:
0001AC6A 3029 0010                  		move.w	obVelX(a1),d0
0001AC6E 6700                       		beq.s	BGHZ_FlameDisp
0001AC70 117C 0008 001C             		move.b	#8,obAnim(a0)
0001AC76                            
0001AC76                            BGHZ_FlameDisp:
0001AC76 6000                       		bra.s	BGHZ_Display
0001AC78                            ; ===========================================================================
0001AC78                            
0001AC78                            BGHZ_FlameDel:
0001AC78 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001AC7E                            ; ===========================================================================
0001AC7E                            
0001AC7E                            BGHZ_Display:
0001AC7E 2268 0034                  		movea.l	$34(a0),a1
0001AC82 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001AC88 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001AC8E 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AC94 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001AC9A 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001ACA0 1028 0022                  		move.b	obStatus(a0),d0
0001ACA4 0200 0003                  		andi.b	#3,d0
0001ACA8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001ACAE 8128 0001                  		or.b	d0,obRender(a0)
0001ACB2 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001ACB2 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001ACB8                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001ACB8                            ; ---------------------------------------------------------------------------
0001ACB8                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001ACB8                            ; ---------------------------------------------------------------------------
0001ACB8                            
0001ACB8                            BossBall:
0001ACB8 7000                       		moveq	#0,d0
0001ACBA 1028 0024                  		move.b	obRoutine(a0),d0
0001ACBE 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001ACC2 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001ACC6                            ; ===========================================================================
0001ACC6 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001ACC8 0000                       		dc.w GBall_Base-GBall_Index
0001ACCA 0000                       		dc.w GBall_Display2-GBall_Index
0001ACCC 0000                       		dc.w loc_17C68-GBall_Index
0001ACCE 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001ACD0                            ; ===========================================================================
0001ACD0                            
0001ACD0                            GBall_Main:	; Routine 0
0001ACD0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ACD4 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001ACDA 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001ACE0 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001ACE8 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001ACEE 45E8 0028                  		lea	obSubtype(a0),a2
0001ACF2 14FC 0000                  		move.b	#0,(a2)+
0001ACF6 7205                       		moveq	#5,d1
0001ACF8 2248                       		movea.l	a0,a1
0001ACFA 6000                       		bra.s	loc_17B60
0001ACFC                            ; ===========================================================================
0001ACFC                            
0001ACFC                            GBall_MakeLinks:
0001ACFC 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001AD02 6600                       		bne.s	GBall_MakeBall
0001AD04 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AD0A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AD10 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AD14 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001AD1A 237C 0000 992A 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001AD22 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001AD28 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AD2E 5228 0028                  		addq.b	#1,obSubtype(a0)
0001AD32                            
0001AD32                            loc_17B60:
0001AD32 3A09                       		move.w	a1,d5
0001AD34 0445 D000                  		subi.w	#$D000,d5
0001AD38 EC4D                       		lsr.w	#6,d5
0001AD3A 0245 007F                  		andi.w	#$7F,d5
0001AD3E 14C5                       		move.b	d5,(a2)+
0001AD40 137C 0004 0001             		move.b	#4,obRender(a1)
0001AD46 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AD4C 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001AD52 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001AD58 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001AD5C                            
0001AD5C                            GBall_MakeBall:
0001AD5C 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001AD62 237C 0000 9E86 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001AD6A 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001AD70 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AD76 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001AD7C 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001AD82 4E75                       		rts	
0001AD84                            ; ===========================================================================
0001AD84                            
0001AD84 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001AD8A                            
0001AD8A                            ; ===========================================================================
0001AD8A                            
0001AD8A                            GBall_Base:	; Routine 2
0001AD8A 47F9 0001 AD84             		lea	(GBall_PosData).l,a3
0001AD90 45E8 0028                  		lea	obSubtype(a0),a2
0001AD94 7C00                       		moveq	#0,d6
0001AD96 1C1A                       		move.b	(a2)+,d6
0001AD98                            
0001AD98                            loc_17BC6:
0001AD98 7800                       		moveq	#0,d4
0001AD9A 181A                       		move.b	(a2)+,d4
0001AD9C ED4C                       		lsl.w	#6,d4
0001AD9E 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001ADA4 2244                       		movea.l	d4,a1
0001ADA6 101B                       		move.b	(a3)+,d0
0001ADA8 B029 003C                  		cmp.b	$3C(a1),d0
0001ADAC 6700                       		beq.s	loc_17BE0
0001ADAE 5229 003C                  		addq.b	#1,$3C(a1)
0001ADB2                            
0001ADB2                            loc_17BE0:
0001ADB2 51CE FFE4                  		dbf	d6,loc_17BC6
0001ADB6                            
0001ADB6 B029 003C                  		cmp.b	$3C(a1),d0
0001ADBA 6600                       		bne.s	loc_17BFA
0001ADBC 2268 0034                  		movea.l	$34(a0),a1
0001ADC0 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001ADC6 6600                       		bne.s	loc_17BFA
0001ADC8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ADCC                            
0001ADCC                            loc_17BFA:
0001ADCC 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001ADD2 6700                       		beq.s	GBall_Display
0001ADD4 5268 0032                  		addq.w	#1,$32(a0)
0001ADD8                            
0001ADD8                            GBall_Display:
0001ADD8 6100 0000                  		bsr.w	sub_17C2A
0001ADDC 1028 0026                  		move.b	obAngle(a0),d0
0001ADE0 4EB9 0000 989C             		jsr	(Swing_Move2).l
0001ADE6 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001ADEC                            ; ===========================================================================
0001ADEC                            
0001ADEC                            GBall_Display2:	; Routine 4
0001ADEC 6100 0000                  		bsr.w	sub_17C2A
0001ADF0 4EB9 0000 985C             		jsr	(Obj48_Move).l
0001ADF6 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001ADFC                            
0001ADFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ADFC                            
0001ADFC                            
0001ADFC                            sub_17C2A:
0001ADFC 2268 0034                  		movea.l	$34(a0),a1
0001AE00 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AE06 6400                       		bcc.s	loc_17C3C
0001AE08 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AE0E                            
0001AE0E                            loc_17C3C:
0001AE0E 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AE14 3029 000C                  		move.w	obY(a1),d0
0001AE18 D068 0032                  		add.w	$32(a0),d0
0001AE1C 3140 0038                  		move.w	d0,$38(a0)
0001AE20 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AE26 4A29 0022                  		tst.b	obStatus(a1)
0001AE2A 6A00                       		bpl.s	locret_17C66
0001AE2C 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AE30 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AE36                            
0001AE36                            locret_17C66:
0001AE36 4E75                       		rts	
0001AE38                            ; End of function sub_17C2A
0001AE38                            
0001AE38                            ; ===========================================================================
0001AE38                            
0001AE38                            loc_17C68:	; Routine 6
0001AE38 2268 0034                  		movea.l	$34(a0),a1
0001AE3C 4A29 0022                  		tst.b	obStatus(a1)
0001AE40 6A00                       		bpl.s	GBall_Display3
0001AE42 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AE46 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AE4C                            
0001AE4C                            GBall_Display3:
0001AE4C 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001AE52                            ; ===========================================================================
0001AE52                            
0001AE52                            GBall_ChkVanish:; Routine 8
0001AE52 7000                       		moveq	#0,d0
0001AE54 4A28 001A                  		tst.b	obFrame(a0)
0001AE58 6600                       		bne.s	GBall_Vanish
0001AE5A 5200                       		addq.b	#1,d0
0001AE5C                            
0001AE5C                            GBall_Vanish:
0001AE5C 1140 001A                  		move.b	d0,obFrame(a0)
0001AE60 2268 0034                  		movea.l	$34(a0),a1
0001AE64 4A29 0022                  		tst.b	obStatus(a1)
0001AE68 6A00                       		bpl.s	GBall_Display4
0001AE6A 117C 0000 0020             		move.b	#0,obColType(a0)
0001AE70 6100 FBC2                  		bsr.w	BossDefeated
0001AE74 5328 003C                  		subq.b	#1,$3C(a0)
0001AE78 6A00                       		bpl.s	GBall_Display4
0001AE7A 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001AE7E 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AE84                            
0001AE84                            GBall_Display4:
0001AE84 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001AE84 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001AE8A                            		include	"_anim\Eggman.asm"
0001AE8A                            ; ---------------------------------------------------------------------------
0001AE8A                            ; Animation script - Eggman (bosses)
0001AE8A                            ; ---------------------------------------------------------------------------
0001AE8A 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001AE8C 0000                       		dc.w @facenormal1-Ani_Eggman
0001AE8E 0000                       		dc.w @facenormal2-Ani_Eggman
0001AE90 0000                       		dc.w @facenormal3-Ani_Eggman
0001AE92 0000                       		dc.w @facelaugh-Ani_Eggman
0001AE94 0000                       		dc.w @facehit-Ani_Eggman
0001AE96 0000                       		dc.w @facepanic-Ani_Eggman
0001AE98 0000                       		dc.w @blank-Ani_Eggman
0001AE9A 0000                       		dc.w @flame1-Ani_Eggman
0001AE9C 0000                       		dc.w @flame2-Ani_Eggman
0001AE9E 0000                       		dc.w @facedefeat-Ani_Eggman
0001AEA0 0000                       		dc.w @escapeflame-Ani_Eggman
0001AEA2 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001AEA6 00                         		even
0001AEA6 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001AEAA                            		even
0001AEAA 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001AEAE                            		even
0001AEAE 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001AEB2                            		even
0001AEB2 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001AEB6                            		even
0001AEB6 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001AEBA                            		even
0001AEBA 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AEBE                            		even
0001AEBE 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AEC2 00                         		even
0001AEC2 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AEC6                            		even
0001AEC6 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AECA                            		even
0001AECA 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AECE 00                         		even
0001AECE 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AEDA 00                         		even
0001AEDA 00                         		even
0001AEDA                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AEDA                            ; --------------------------------------------------------------------------------
0001AEDA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AEDA                            ; --------------------------------------------------------------------------------
0001AEDA                            
0001AEDA                            SME_F_pyS:	
0001AEDA 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AEDE 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AEE2 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AEE6 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AEEA 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AEEE 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AEF2 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AEF4 05                         SME_F_pyS_1A:	dc.b 5	
0001AEF5 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001AEFA FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001AEFF FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001AF04 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001AF09 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001AF0E 03                         SME_F_pyS_34:	dc.b 3	
0001AF0F E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AF14 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001AF19 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AF1E 03                         SME_F_pyS_44:	dc.b 3	
0001AF1F E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AF24 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AF29 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AF2E 04                         SME_F_pyS_54:	dc.b 4	
0001AF2F E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001AF34 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001AF39 EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001AF3E EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AF43 04                         SME_F_pyS_69:	dc.b 4	
0001AF44 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001AF49 EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001AF4E EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001AF53 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AF58 04                         SME_F_pyS_7E:	dc.b 4	
0001AF59 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AF5E EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AF63 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AF68 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AF6D 04                         SME_F_pyS_93:	dc.b 4	
0001AF6E E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AF73 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AF78 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AF7D EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AF82 07                         SME_F_pyS_A8:	dc.b 7	
0001AF83 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AF88 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AF8D EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AF92 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001AF97 F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001AF9C F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001AFA1 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AFA6 01                         SME_F_pyS_CC:	dc.b 1	
0001AFA7 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AFAC 01                         SME_F_pyS_D2:	dc.b 1	
0001AFAD 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AFB2 00                         SME_F_pyS_D8:	dc.b 0	
0001AFB3 02                         SME_F_pyS_D9:	dc.b 2	
0001AFB4 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AFB9 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AFBE 02                         SME_F_pyS_E4:	dc.b 2	
0001AFBF F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AFC4 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AFCA 00                         		even
0001AFCA 00                         		even
0001AFCA                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AFCA                            ; ---------------------------------------------------------------------------
0001AFCA                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AFCA                            ; ---------------------------------------------------------------------------
0001AFCA                            Map_BossItems_internal:
0001AFCA 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AFCC 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AFCE 0000                       		dc.w @cross-Map_BossItems_internal
0001AFD0 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AFD2 0000                       		dc.w @pipe-Map_BossItems_internal
0001AFD4 0000                       		dc.w @spike-Map_BossItems_internal
0001AFD6 0000                       		dc.w @legmask-Map_BossItems_internal
0001AFD8 0000                       		dc.w @legs-Map_BossItems_internal
0001AFDA 01                         @chainanchor1:	dc.b 1
0001AFDB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AFE0 02                         @chainanchor2:	dc.b 2
0001AFE1 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AFE6 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001AFEC 00                         		even
0001AFEC 01                         @cross:		dc.b 1
0001AFED FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001AFF2 01                         @widepipe:	dc.b 1
0001AFF3 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001AFF8 01                         @pipe:		dc.b 1
0001AFF9 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001AFFE 04                         @spike:		dc.b 4
0001AFFF F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001B004 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001B009 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001B00E 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001B014 00                         		even
0001B014 02                         @legmask:	dc.b 2
0001B015 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001B01A 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001B020 00                         		even
0001B020 02                         @legs:		dc.b 2
0001B021 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001B026 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001B02C 00                         		even
0001B02C 00                         		even
0001B02C                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001B02C                            ; ---------------------------------------------------------------------------
0001B02C                            ; Object 77 - Eggman (LZ)
0001B02C                            ; ---------------------------------------------------------------------------
0001B02C                            
0001B02C                            BossLabyrinth:
0001B02C 7000                       		moveq	#0,d0
0001B02E 1028 0024                  		move.b	obRoutine(a0),d0
0001B032 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001B036 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001B03A                            ; ===========================================================================
0001B03A 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001B03C 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001B03E 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001B040 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001B042                            
0001B042 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001B044 0401                       		dc.b 4,	1
0001B046 0607                       		dc.b 6,	7
0001B048                            ; ===========================================================================
0001B048                            
0001B048                            Obj77_Main:	; Routine 0
0001B048 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001B04E 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001B054 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B05A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B060 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B066 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B06C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001B072 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001B076 2248                       		movea.l	a0,a1
0001B078 7202                       		moveq	#2,d1
0001B07A 6000                       		bra.s	Obj77_LoadBoss
0001B07C                            ; ===========================================================================
0001B07C                            
0001B07C                            Obj77_Loop:
0001B07C 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001B082 6600                       		bne.s	Obj77_ShipMain
0001B084 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001B088 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B08E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B094                            
0001B094                            Obj77_LoadBoss:
0001B094 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B09A 4229 0025                  		clr.b	ob2ndRout(a1)
0001B09E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B0A2 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B0A6 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001B0AC 237C 0001 AEDA 0004        		move.l	#Map_Eggman,obMap(a1)
0001B0B4 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B0BA 137C 0004 0001             		move.b	#4,obRender(a1)
0001B0C0 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B0C6 2348 0034                  		move.l	a0,$34(a1)
0001B0CA 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001B0CE                            
0001B0CE                            Obj77_ShipMain:	; Routine 2
0001B0CE 43F8 D000                  		lea	(v_player).w,a1
0001B0D2 7000                       		moveq	#0,d0
0001B0D4 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B0D8 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001B0DC 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001B0E0 43F9 0001 AE8A             		lea	(Ani_Eggman).l,a1
0001B0E6 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001B0EC 7003                       		moveq	#3,d0
0001B0EE C028 0022                  		and.b	obStatus(a0),d0
0001B0F2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B0F8 8128 0001                  		or.b	d0,obRender(a0)
0001B0FC 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001B102                            ; ===========================================================================
0001B102 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001B106 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001B10A 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001B10E 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001B112                            ; ===========================================================================
0001B112                            
0001B112                            loc_17F1E:
0001B112 3029 0008                  		move.w	obX(a1),d0
0001B116 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001B11A 6500                       		bcs.s	loc_17F38
0001B11C 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B122 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001B128 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B12C                            
0001B12C                            loc_17F38:
0001B12C 6100 F948                  		bsr.w	BossMove
0001B130 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B136 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B13C                            
0001B13C                            loc_17F48:
0001B13C 4A28 003D                  		tst.b	$3D(a0)
0001B140 6600                       		bne.s	loc_17F8E
0001B142 4A28 0022                  		tst.b	obStatus(a0)
0001B146 6B00                       		bmi.s	loc_17F92
0001B148 4A28 0020                  		tst.b	obColType(a0)
0001B14C 6600                       		bne.s	locret_17F8C
0001B14E 4A28 003E                  		tst.b	$3E(a0)
0001B152 6600                       		bne.s	loc_17F70
0001B154 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B164                            
0001B164                            loc_17F70:
0001B164 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B168 7000                       		moveq	#0,d0
0001B16A 4A51                       		tst.w	(a1)
0001B16C 6600                       		bne.s	loc_17F7E
0001B16E 303C 0EEE                  		move.w	#cWhite,d0
0001B172                            
0001B172                            loc_17F7E:
0001B172 3280                       		move.w	d0,(a1)
0001B174 5328 003E                  		subq.b	#1,$3E(a0)
0001B178 6600                       		bne.s	locret_17F8C
0001B17A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B180                            
0001B180                            locret_17F8C:
0001B180 4E75                       		rts	
0001B182                            ; ===========================================================================
0001B182                            
0001B182                            loc_17F8E:
0001B182 6000 F8B0                  		bra.w	BossDefeated
0001B186                            ; ===========================================================================
0001B186                            
0001B186                            loc_17F92:
0001B186 7064                       		moveq	#100,d0
0001B188 6100 0000                  		bsr.w	AddPoints
0001B18C 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B192 4E75                       		rts	
0001B194                            ; ===========================================================================
0001B194                            
0001B194                            loc_17FA0:
0001B194 70FE                       		moveq	#-2,d0
0001B196 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001B19C 6500                       		bcs.s	loc_17FB6
0001B19E 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001B1A4 4268 0010                  		clr.w	obVelX(a0)
0001B1A8 5240                       		addq.w	#1,d0
0001B1AA                            
0001B1AA                            loc_17FB6:
0001B1AA 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001B1B0 6E00                       		bgt.s	loc_17FCA
0001B1B2 317C 0500 0038             		move.w	#$500,$38(a0)
0001B1B8 4268 0012                  		clr.w	obVelY(a0)
0001B1BC 5240                       		addq.w	#1,d0
0001B1BE                            
0001B1BE                            loc_17FCA:
0001B1BE 6600                       		bne.s	loc_17FDC
0001B1C0 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B1C6 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001B1CC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B1D0                            
0001B1D0                            loc_17FDC:
0001B1D0 6000 FF5A                  		bra.w	loc_17F38
0001B1D4                            ; ===========================================================================
0001B1D4                            
0001B1D4                            loc_17FE0:
0001B1D4 70FE                       		moveq	#-2,d0
0001B1D6 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001B1DC 6500                       		bcs.s	loc_17FF6
0001B1DE 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001B1E4 4268 0010                  		clr.w	obVelX(a0)
0001B1E8 5240                       		addq.w	#1,d0
0001B1EA                            
0001B1EA                            loc_17FF6:
0001B1EA 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001B1F0 6E00                       		bgt.s	loc_1800A
0001B1F2 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001B1F8 4268 0012                  		clr.w	obVelY(a0)
0001B1FC 5240                       		addq.w	#1,d0
0001B1FE                            
0001B1FE                            loc_1800A:
0001B1FE 6600                       		bne.s	loc_1801A
0001B200 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B206 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B20A 4228 003F                  		clr.b	$3F(a0)
0001B20E                            
0001B20E                            loc_1801A:
0001B20E 6000 FF1C                  		bra.w	loc_17F38
0001B212                            ; ===========================================================================
0001B212                            
0001B212                            loc_1801E:
0001B212 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001B218 6E00                       		bgt.s	loc_1804E
0001B21A 317C 0100 0038             		move.w	#$100,$38(a0)
0001B220 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B226 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001B22C 4A28 003D                  		tst.b	$3D(a0)
0001B230 6700                       		beq.s	loc_18046
0001B232 E1E8 0010                  		asl	obVelX(a0)
0001B236 E1E8 0012                  		asl	obVelY(a0)
0001B23A                            
0001B23A                            loc_18046:
0001B23A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B23E 6000 FEEC                  		bra.w	loc_17F38
0001B242                            ; ===========================================================================
0001B242                            
0001B242                            loc_1804E:
0001B242 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B248 5428 003F                  		addq.b	#2,$3F(a0)
0001B24C 1028 003F                  		move.b	$3F(a0),d0
0001B250 4EB9 0000 3A82             		jsr	(CalcSine).l
0001B256 4A41                       		tst.w	d1
0001B258 6A00                       		bpl.s	loc_1806C
0001B25A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B260                            
0001B260                            loc_1806C:
0001B260 E840                       		asr.w	#4,d0
0001B262 4840                       		swap	d0
0001B264 4240                       		clr.w	d0
0001B266 D0A8 0030                  		add.l	$30(a0),d0
0001B26A 4840                       		swap	d0
0001B26C 3140 0008                  		move.w	d0,obX(a0)
0001B270 3028 0012                  		move.w	obVelY(a0),d0
0001B274 3238 D00C                  		move.w	(v_player+obY).w,d1
0001B278 9268 000C                  		sub.w	obY(a0),d1
0001B27C 6500                       		bcs.s	loc_180A2
0001B27E 0441 0048                  		subi.w	#$48,d1
0001B282 6500                       		bcs.s	loc_180A2
0001B284 E240                       		asr.w	#1,d0
0001B286 0441 0028                  		subi.w	#$28,d1
0001B28A 6500                       		bcs.s	loc_180A2
0001B28C E240                       		asr.w	#1,d0
0001B28E 0441 0028                  		subi.w	#$28,d1
0001B292 6500                       		bcs.s	loc_180A2
0001B294 7000                       		moveq	#0,d0
0001B296                            
0001B296                            loc_180A2:
0001B296 48C0                       		ext.l	d0
0001B298 E180                       		asl.l	#8,d0
0001B29A 4A28 003D                  		tst.b	$3D(a0)
0001B29E 6700                       		beq.s	loc_180AE
0001B2A0 D080                       		add.l	d0,d0
0001B2A2                            
0001B2A2                            loc_180AE:
0001B2A2 D1A8 0038                  		add.l	d0,$38(a0)
0001B2A6 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B2AC 6000 FE8E                  		bra.w	loc_17F48
0001B2B0                            ; ===========================================================================
0001B2B0                            
0001B2B0                            loc_180BC:
0001B2B0 70FE                       		moveq	#-2,d0
0001B2B2 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B2B8 6500                       		bcs.s	loc_180D2
0001B2BA 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B2C0 4268 0010                  		clr.w	obVelX(a0)
0001B2C4 5240                       		addq.w	#1,d0
0001B2C6                            
0001B2C6                            loc_180D2:
0001B2C6 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B2CC 6E00                       		bgt.s	loc_180E6
0001B2CE 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B2D4 4268 0012                  		clr.w	obVelY(a0)
0001B2D8 5240                       		addq.w	#1,d0
0001B2DA                            
0001B2DA                            loc_180E6:
0001B2DA 6600                       		bne.s	loc_180F2
0001B2DC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B2E0 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B2E6                            
0001B2E6                            loc_180F2:
0001B2E6 6000 FE44                  		bra.w	loc_17F38
0001B2EA                            ; ===========================================================================
0001B2EA                            
0001B2EA                            loc_180F6:
0001B2EA 4A28 003D                  		tst.b	$3D(a0)
0001B2EE 6600                       		bne.s	loc_18112
0001B2F0 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B2F6 6D00                       		blt.s	loc_18126
0001B2F8 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B2FE 6E00                       		bgt.s	loc_18126
0001B300 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B306                            
0001B306                            loc_18112:
0001B306 4A38 FE2D                          tst.b     (v_invinc).w
0001B30A 6600                               bne.s   @boss_invinc
0001B30C                            
0001B30C 1038 F5C6                          move.b   (v_Saved_music),d0
0001B310 6000 0000                          bra.w      @boss_play
0001B314                            
0001B314                            @boss_invinc:
0001B314 103C 0000                          move.b #bgm_Invincible,d0
0001B318                            
0001B318                            @boss_play:
0001B318 4EB8 129A                          jsr PlaySound
0001B31C 4238 F7AA                          clr.b    (f_lockscreen).w
0001B320 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B326 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B32A                            
0001B32A                            loc_18126:
0001B32A 6000 FE00                  		bra.w	loc_17F38
0001B32E                            ; ===========================================================================
0001B32E                            
0001B32E                            loc_1812A:
0001B32E 4A28 003D                  		tst.b	$3D(a0)
0001B332 6600                       		bne.s	loc_18136
0001B334 5328 003C                  		subq.b	#1,$3C(a0)
0001B338 6600                       		bne.s	loc_1814E
0001B33A                            
0001B33A                            loc_18136:
0001B33A 4228 003C                  		clr.b	$3C(a0)
0001B33E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B344 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B34A 4228 003D                  		clr.b	$3D(a0)
0001B34E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B352                            
0001B352                            loc_1814E:
0001B352 6000 FDD8                  		bra.w	loc_17F38
0001B356                            ; ===========================================================================
0001B356                            
0001B356                            loc_18152:
0001B356 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B35C 6400                       		bcc.s	loc_18160
0001B35E 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B362 6000                       		bra.s	loc_18166
0001B364                            ; ===========================================================================
0001B364                            
0001B364                            loc_18160:
0001B364 4A28 0001                  		tst.b	obRender(a0)
0001B368 6A00                       		bpl.s	Obj77_ShipDel
0001B36A                            
0001B36A                            loc_18166:
0001B36A 6000 FDC0                  		bra.w	loc_17F38
0001B36E                            ; ===========================================================================
0001B36E                            
0001B36E                            Obj77_ShipDel:
0001B36E 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001B374                            ; ===========================================================================
0001B374                            
0001B374                            Obj77_FaceMain:	; Routine 4
0001B374 2268 0034                  		movea.l	$34(a0),a1
0001B378 1011                       		move.b	(a1),d0
0001B37A B010                       		cmp.b	(a0),d0
0001B37C 6600                       		bne.s	Obj77_FaceDel
0001B37E 7000                       		moveq	#0,d0
0001B380 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B384 7201                       		moveq	#1,d1
0001B386 4A28 003D                  		tst.b	$3D(a0)
0001B38A 6700                       		beq.s	loc_1818C
0001B38C 720A                       		moveq	#$A,d1
0001B38E 6000                       		bra.s	loc_181A0
0001B390                            ; ===========================================================================
0001B390                            
0001B390                            loc_1818C:
0001B390 4A29 0020                  		tst.b	obColType(a1)
0001B394 6600                       		bne.s	loc_18196
0001B396 7205                       		moveq	#5,d1
0001B398 6000                       		bra.s	loc_181A0
0001B39A                            ; ===========================================================================
0001B39A                            
0001B39A                            loc_18196:
0001B39A 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B3A0 6500                       		bcs.s	loc_181A0
0001B3A2 7204                       		moveq	#4,d1
0001B3A4                            
0001B3A4                            loc_181A0:
0001B3A4 1141 001C                  		move.b	d1,obAnim(a0)
0001B3A8 0C00 000E                  		cmpi.b	#$E,d0
0001B3AC 6600                       		bne.s	loc_181B6
0001B3AE 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B3B4 4A28 0001                  		tst.b	obRender(a0)
0001B3B8 6A00                       		bpl.s	Obj77_FaceDel
0001B3BA                            
0001B3BA                            loc_181B6:
0001B3BA 6000                       		bra.s	Obj77_Display
0001B3BC                            ; ===========================================================================
0001B3BC                            
0001B3BC                            Obj77_FaceDel:
0001B3BC 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001B3C2                            ; ===========================================================================
0001B3C2                            
0001B3C2                            Obj77_FlameMain:; Routine 6
0001B3C2 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B3C8 2268 0034                  		movea.l	$34(a0),a1
0001B3CC 1011                       		move.b	(a1),d0
0001B3CE B010                       		cmp.b	(a0),d0
0001B3D0 6600                       		bne.s	Obj77_FlameDel
0001B3D2 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B3D8 6600                       		bne.s	loc_181F0
0001B3DA 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B3E0 4A28 0001                  		tst.b	1(a0)
0001B3E4 6A00                       		bpl.s	Obj77_FlameDel
0001B3E6 6000                       		bra.s	loc_181F0
0001B3E8                            ; ===========================================================================
0001B3E8 4A69 0010                  		tst.w	obVelX(a1)
0001B3EC 6700                       		beq.s	loc_181F0
0001B3EE 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B3F4                            
0001B3F4                            loc_181F0:
0001B3F4 6000                       		bra.s	Obj77_Display
0001B3F6                            ; ===========================================================================
0001B3F6                            
0001B3F6                            Obj77_FlameDel:
0001B3F6 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001B3FC                            ; ===========================================================================
0001B3FC                            
0001B3FC                            Obj77_Display:
0001B3FC 43F9 0001 AE8A             		lea	(Ani_Eggman).l,a1
0001B402 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001B408 2268 0034                  		movea.l	$34(a0),a1
0001B40C 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B412 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B418 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B41E 7003                       		moveq	#3,d0
0001B420 C028 0022                  		and.b	obStatus(a0),d0
0001B424 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B42A 8128 0001                  		or.b	d0,obRender(a0)
0001B42E 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001B42E 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001B434                            		include	"_incObj\73 Boss - Marble.asm"
0001B434                            ; ---------------------------------------------------------------------------
0001B434                            ; Object 73 - Eggman (MZ)
0001B434                            ; ---------------------------------------------------------------------------
0001B434                            
0001B434                            BossMarble:
0001B434 7000                       		moveq	#0,d0
0001B436 1028 0024                  		move.b	obRoutine(a0),d0
0001B43A 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B43E 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B442                            ; ===========================================================================
0001B442 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B444 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B446 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B448 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B44A 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B44C                            
0001B44C 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B450 0401 0200                  		dc.b 4,	1, $02, $00
0001B454 0607 0200                  		dc.b 6,	7, $02, $00
0001B458 0800 0180                  		dc.b 8,	0, $01, $80
0001B45C                            ; ===========================================================================
0001B45C                            
0001B45C                            Obj73_Main:	; Routine 0
0001B45C 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B462 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B468 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B46E 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B474 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B478 2248                       		movea.l	a0,a1
0001B47A 7203                       		moveq	#3,d1
0001B47C 6000                       		bra.s	Obj73_LoadBoss
0001B47E                            ; ===========================================================================
0001B47E                            
0001B47E                            Obj73_Loop:
0001B47E 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001B484 6600                       		bne.s	Obj73_ShipMain
0001B486 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B48A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B490 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B496                            
0001B496                            Obj73_LoadBoss:
0001B496 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B49C 4229 0025                  		clr.b	ob2ndRout(a1)
0001B4A0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B4A4 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B4A8 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B4AC 237C 0001 AEDA 0004        		move.l	#Map_Eggman,obMap(a1)
0001B4B4 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B4BA 137C 0004 0001             		move.b	#4,obRender(a1)
0001B4C0 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B4C6 2348 0034                  		move.l	a0,$34(a1)
0001B4CA 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B4CE                            
0001B4CE                            Obj73_ShipMain:	; Routine 2
0001B4CE 7000                       		moveq	#0,d0
0001B4D0 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B4D4 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B4D8 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B4DC 43F9 0001 AE8A             		lea	(Ani_Eggman).l,a1
0001B4E2 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001B4E8 7003                       		moveq	#3,d0
0001B4EA C028 0022                  		and.b	obStatus(a0),d0
0001B4EE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B4F4 8128 0001                  		or.b	d0,obRender(a0)
0001B4F8 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001B4FE                            ; ===========================================================================
0001B4FE 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B500 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B502 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B504 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B506 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B508                            ; ===========================================================================
0001B508                            
0001B508                            loc_18302:
0001B508 1028 003F                  		move.b	$3F(a0),d0
0001B50C 5428 003F                  		addq.b	#2,$3F(a0)
0001B510 4EB9 0000 3A82             		jsr	(CalcSine).l
0001B516 E440                       		asr.w	#2,d0
0001B518 3140 0012                  		move.w	d0,obVelY(a0)
0001B51C 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B522 6100 F552                  		bsr.w	BossMove
0001B526 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B52C 6600                       		bne.s	loc_18334
0001B52E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B532 4228 0028                  		clr.b	obSubtype(a0)
0001B536 42A8 0010                  		clr.l	obVelX(a0)
0001B53A                            
0001B53A                            loc_18334:
0001B53A 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001B540 1140 0034                  		move.b	d0,$34(a0)
0001B544                            
0001B544                            loc_1833E:
0001B544 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B54A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B550 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B556 6400                       		bcc.s	locret_18390
0001B558 4A28 0022                  		tst.b	obStatus(a0)
0001B55C 6B00                       		bmi.s	loc_18392
0001B55E 4A28 0020                  		tst.b	obColType(a0)
0001B562 6600                       		bne.s	locret_18390
0001B564 4A28 003E                  		tst.b	$3E(a0)
0001B568 6600                       		bne.s	loc_18374
0001B56A 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B57A                            
0001B57A                            loc_18374:
0001B57A 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B57E 7000                       		moveq	#0,d0
0001B580 4A51                       		tst.w	(a1)
0001B582 6600                       		bne.s	loc_18382
0001B584 303C 0EEE                  		move.w	#cWhite,d0
0001B588                            
0001B588                            loc_18382:
0001B588 3280                       		move.w	d0,(a1)
0001B58A 5328 003E                  		subq.b	#1,$3E(a0)
0001B58E 6600                       		bne.s	locret_18390
0001B590 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B596                            
0001B596                            locret_18390:
0001B596 4E75                       		rts	
0001B598                            ; ===========================================================================
0001B598                            
0001B598                            loc_18392:
0001B598 7064                       		moveq	#100,d0
0001B59A 6100 0000                  		bsr.w	AddPoints
0001B59E 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B5A4 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B5AA 4268 0010                  		clr.w	obVelX(a0)
0001B5AE 4E75                       		rts	
0001B5B0                            ; ===========================================================================
0001B5B0                            
0001B5B0                            loc_183AA:
0001B5B0 7000                       		moveq	#0,d0
0001B5B2 1028 0028                  		move.b	obSubtype(a0),d0
0001B5B6 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B5BA 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B5BE 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B5C4 6000 FF7E                  		bra.w	loc_1833E
0001B5C8                            ; ===========================================================================
0001B5C8 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B5CA 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B5CC 0000                       		dc.w loc_183CA-off_183C2
0001B5CE 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B5D0                            ; ===========================================================================
0001B5D0                            
0001B5D0                            loc_183CA:
0001B5D0 4A68 0010                  		tst.w	obVelX(a0)
0001B5D4 6600                       		bne.s	loc_183FE
0001B5D6 7040                       		moveq	#$40,d0
0001B5D8 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B5DE 6700                       		beq.s	loc_183E6
0001B5E0 6500                       		bcs.s	loc_183DE
0001B5E2 4440                       		neg.w	d0
0001B5E4                            
0001B5E4                            loc_183DE:
0001B5E4 3140 0012                  		move.w	d0,obVelY(a0)
0001B5E8 6000 F48C                  		bra.w	BossMove
0001B5EC                            ; ===========================================================================
0001B5EC                            
0001B5EC                            loc_183E6:
0001B5EC 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B5F2 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B5F8 0828 0000 0022             		btst	#0,obStatus(a0)
0001B5FE 6600                       		bne.s	loc_183FE
0001B600 4468 0010                  		neg.w	obVelX(a0)
0001B604                            
0001B604                            loc_183FE:
0001B604 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B60A 6400                       		bcc.s	Obj73_MakeLava
0001B60C 6100 F468                  		bsr.w	BossMove
0001B610 5968 0012                  		subq.w	#4,obVelY(a0)
0001B614                            
0001B614                            Obj73_MakeLava:
0001B614 5328 0034                  		subq.b	#1,$34(a0)
0001B618 6400                       		bcc.s	loc_1845C
0001B61A 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
0001B620 6600                       		bne.s	loc_1844A
0001B622 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B626 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B62C 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001B632 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B638 80FC 0050                  		divu.w	#$50,d0
0001B63C 4840                       		swap	d0
0001B63E 0640 1878                  		addi.w	#$1878,d0
0001B642 3340 0008                  		move.w	d0,obX(a1)
0001B646 EE09                       		lsr.b	#7,d1
0001B648 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B64E                            
0001B64E                            loc_1844A:
0001B64E 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001B654 0200 001F                  		andi.b	#$1F,d0
0001B658 0600 0040                  		addi.b	#$40,d0
0001B65C 1140 0034                  		move.b	d0,$34(a0)
0001B660                            
0001B660                            loc_1845C:
0001B660 0828 0000 0022             		btst	#0,obStatus(a0)
0001B666 6700                       		beq.s	loc_18474
0001B668 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B66E 6D00                       		blt.s	locret_1849C
0001B670 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B676 6000                       		bra.s	loc_18482
0001B678                            ; ===========================================================================
0001B678                            
0001B678                            loc_18474:
0001B678 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B67E 6E00                       		bgt.s	locret_1849C
0001B680 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B686                            
0001B686                            loc_18482:
0001B686 4268 0010                  		clr.w	obVelX(a0)
0001B68A 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B690 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B696 6400                       		bcc.s	loc_18498
0001B698 4468 0012                  		neg.w	obVelY(a0)
0001B69C                            
0001B69C                            loc_18498:
0001B69C 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B6A0                            
0001B6A0                            locret_1849C:
0001B6A0 4E75                       		rts	
0001B6A2                            ; ===========================================================================
0001B6A2                            
0001B6A2                            Obj73_MakeLava2:
0001B6A2 6100 F3D2                  		bsr.w	BossMove
0001B6A6 3028 0038                  		move.w	$38(a0),d0
0001B6AA 0440 022C                  		subi.w	#$22C,d0
0001B6AE 6E00                       		bgt.s	locret_184F4
0001B6B0 303C 022C                  		move.w	#$22C,d0
0001B6B4 4A68 0012                  		tst.w	obVelY(a0)
0001B6B8 6700                       		beq.s	loc_184EA
0001B6BA 4268 0012                  		clr.w	obVelY(a0)
0001B6BE 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B6C4 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B6CA 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
0001B6D0 6600                       		bne.s	loc_184EA
0001B6D2 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B6D8 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B6DE 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B6E4 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B6E8 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B6EE                            
0001B6EE                            loc_184EA:
0001B6EE 5368 003C                  		subq.w	#1,$3C(a0)
0001B6F2 6600                       		bne.s	locret_184F4
0001B6F4 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B6F8                            
0001B6F8                            locret_184F4:
0001B6F8 4E75                       		rts	
0001B6FA                            ; ===========================================================================
0001B6FA                            
0001B6FA                            loc_184F6:
0001B6FA 5368 003C                  		subq.w	#1,$3C(a0)
0001B6FE 6B00                       		bmi.s	loc_18500
0001B700 6000 F332                  		bra.w	BossDefeated
0001B704                            ; ===========================================================================
0001B704                            
0001B704                            loc_18500:
0001B704 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B70A 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B710 4268 0010                  		clr.w	obVelX(a0)
0001B714 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B718 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B71E 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B722 6600                       		bne.s	locret_1852A
0001B724 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B72A 4268 0012                  		clr.w	obVelY(a0)
0001B72E                            
0001B72E                            locret_1852A:
0001B72E 4E75                       		rts	
0001B730                            ; ===========================================================================
0001B730                            
0001B730                            loc_1852C:
0001B730 5268 003C                  		addq.w	#1,$3C(a0)
0001B734 6700                       		beq.s	loc_18544
0001B736 6A00                       		bpl.s	loc_1854E
0001B738 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B73E 6400                       		bcc.s	loc_18544
0001B740 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B746 6000                       		bra.s	loc_1857A
0001B748                            ; ===========================================================================
0001B748                            
0001B748                            loc_18544:
0001B748 4268 0012                  		clr.w	obVelY(a0)
0001B74C 4268 003C                  		clr.w	$3C(a0)
0001B750 6000                       		bra.s	loc_1857A
0001B752                            ; ===========================================================================
0001B752                            
0001B752                            loc_1854E:
0001B752 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B758 6500                       		bcs.s	loc_18566
0001B75A 6700                       		beq.s	loc_1856C
0001B75C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B762 6500                       		bcs.s	loc_1857A
0001B764 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B768 6000                       		bra.s	loc_1857A
0001B76A                            ; ===========================================================================
0001B76A                            
0001B76A                            loc_18566:
0001B76A 5168 0012                  		subq.w	#8,obVelY(a0)
0001B76E 6000                       		bra.s	loc_1857A
0001B770                            ; ===========================================================================
0001B770                            
0001B770                            loc_1856C:
0001B770 4268 0012                  		clr.w	obVelY(a0)
0001B77E                            
0001B77E                            loc_1857A:
0001B77E 6100 F2F6                  		bsr.w	BossMove
0001B782 6000 FDC0                  		bra.w	loc_1833E
0001B786                            ; ===========================================================================
0001B786                            
0001B786                            loc_18582:
0001B786 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B78C 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B792 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B798 6400                       		bcc.s	loc_1859C
0001B79A 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B79E 6000                       		bra.s	loc_185A2
0001B7A0                            ; ===========================================================================
0001B7A0                            
0001B7A0                            loc_1859C:
0001B7A0 4A28 0001                  		tst.b	obRender(a0)
0001B7A4 6A00                       		bpl.s	Obj73_ShipDel
0001B7A6                            
0001B7A6                            loc_185A2:
0001B7A6 6100 F2CE                  		bsr.w	BossMove
0001B7AA 6000 FD98                  		bra.w	loc_1833E
0001B7AE                            ; ===========================================================================
0001B7AE                            
0001B7AE                            Obj73_ShipDel:
0001B7AE 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001B7B4                            ; ===========================================================================
0001B7B4                            
0001B7B4                            Obj73_FaceMain:	; Routine 4
0001B7B4 7000                       		moveq	#0,d0
0001B7B6 7201                       		moveq	#1,d1
0001B7B8 2268 0034                  		movea.l	$34(a0),a1
0001B7BC 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B7C0 5540                       		subq.w	#2,d0
0001B7C2 6600                       		bne.s	loc_185D2
0001B7C4 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B7CA 6700                       		beq.s	loc_185DA
0001B7CC 4A69 0012                  		tst.w	obVelY(a1)
0001B7D0 6600                       		bne.s	loc_185DA
0001B7D2 7204                       		moveq	#4,d1
0001B7D4 6000                       		bra.s	loc_185EE
0001B7D6                            ; ===========================================================================
0001B7D6                            
0001B7D6                            loc_185D2:
0001B7D6 5500                       		subq.b	#2,d0
0001B7D8 6B00                       		bmi.s	loc_185DA
0001B7DA 720A                       		moveq	#$A,d1
0001B7DC 6000                       		bra.s	loc_185EE
0001B7DE                            ; ===========================================================================
0001B7DE                            
0001B7DE                            loc_185DA:
0001B7DE 4A29 0020                  		tst.b	obColType(a1)
0001B7E2 6600                       		bne.s	loc_185E4
0001B7E4 7205                       		moveq	#5,d1
0001B7E6 6000                       		bra.s	loc_185EE
0001B7E8                            ; ===========================================================================
0001B7E8                            
0001B7E8                            loc_185E4:
0001B7E8 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B7EE 6500                       		bcs.s	loc_185EE
0001B7F0 7204                       		moveq	#4,d1
0001B7F2                            
0001B7F2                            loc_185EE:
0001B7F2 1141 001C                  		move.b	d1,obAnim(a0)
0001B7F6 5900                       		subq.b	#4,d0
0001B7F8 6600                       		bne.s	loc_18602
0001B7FA 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B800 4A28 0001                  		tst.b	obRender(a0)
0001B804 6A00                       		bpl.s	Obj73_FaceDel
0001B806                            
0001B806                            loc_18602:
0001B806 6000                       		bra.s	Obj73_Display
0001B808                            ; ===========================================================================
0001B808                            
0001B808                            Obj73_FaceDel:
0001B808 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001B80E                            ; ===========================================================================
0001B80E                            
0001B80E                            Obj73_FlameMain:; Routine 6
0001B80E 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B814 2268 0034                  		movea.l	$34(a0),a1
0001B818 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B81E 6D00                       		blt.s	loc_1862A
0001B820 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B826 4A28 0001                  		tst.b	obRender(a0)
0001B82A 6A00                       		bpl.s	Obj73_FlameDel
0001B82C 6000                       		bra.s	loc_18636
0001B82E                            ; ===========================================================================
0001B82E                            
0001B82E                            loc_1862A:
0001B82E 4A69 0010                  		tst.w	obVelX(a1)
0001B832 6700                       		beq.s	loc_18636
0001B834 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B83A                            
0001B83A                            loc_18636:
0001B83A 6000                       		bra.s	Obj73_Display
0001B83C                            ; ===========================================================================
0001B83C                            
0001B83C                            Obj73_FlameDel:
0001B83C 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001B842                            ; ===========================================================================
0001B842                            
0001B842                            Obj73_Display:
0001B842 43F9 0001 AE8A             		lea	(Ani_Eggman).l,a1
0001B848 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001B84E                            
0001B84E                            loc_1864A:
0001B84E 2268 0034                  		movea.l	$34(a0),a1
0001B852 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B858 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B85E 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B864 7003                       		moveq	#3,d0
0001B866 C028 0022                  		and.b	obStatus(a0),d0
0001B86A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B870 8128 0001                  		or.b	d0,obRender(a0)
0001B874 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001B87A                            ; ===========================================================================
0001B87A                            
0001B87A                            Obj73_TubeMain:	; Routine 8
0001B87A 2268 0034                  		movea.l	$34(a0),a1
0001B87E 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B884 6600                       		bne.s	loc_18688
0001B886 4A28 0001                  		tst.b	obRender(a0)
0001B88A 6A00                       		bpl.s	Obj73_TubeDel
0001B88C                            
0001B88C                            loc_18688:
0001B88C 217C 0001 AFCA 0004        		move.l	#Map_BossItems,obMap(a0)
0001B894 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B89A 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B8A0 60AC                       		bra.s	loc_1864A
0001B8A2                            ; ===========================================================================
0001B8A2                            
0001B8A2                            Obj73_TubeDel:
0001B8A2 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001B8A2 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001B8A8                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B8A8                            ; ---------------------------------------------------------------------------
0001B8A8                            ; Object 74 - lava that	Eggman drops (MZ)
0001B8A8                            ; ---------------------------------------------------------------------------
0001B8A8                            
0001B8A8                            BossFire:
0001B8A8 7000                       		moveq	#0,d0
0001B8AA 1028 0024                  		move.b	obRoutine(a0),d0
0001B8AE 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B8B2 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B8B6 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001B8BC                            ; ===========================================================================
0001B8BC 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B8BE 0000                       		dc.w Obj74_Action-Obj74_Index
0001B8C0 0000                       		dc.w loc_18886-Obj74_Index
0001B8C2 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B8C4                            ; ===========================================================================
0001B8C4                            
0001B8C4                            Obj74_Main:	; Routine 0
0001B8C4 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B8CA 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B8D0 217C 0000 D736 0004        		move.l	#Map_Fire,obMap(a0)
0001B8D8 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B8DE 117C 0004 0001             		move.b	#4,obRender(a0)
0001B8E4 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B8EA 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B8F0 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B8F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B8FA 4A28 0028                  		tst.b	obSubtype(a0)
0001B8FE 6600                       		bne.s	loc_1870A
0001B900 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B906 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B90A 6000 0000                  		bra.w	loc_18886
0001B90E                            ; ===========================================================================
0001B90E                            
0001B90E                            loc_1870A:
0001B90E 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B91E                            
0001B91E                            Obj74_Action:	; Routine 2
0001B91E 7000                       		moveq	#0,d0
0001B920 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B924 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B928 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B92C 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
0001B932 43F9 0001 08E6             		lea	(Ani_Fire).l,a1
0001B938 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001B93E 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B944 6200                       		bhi.s	Obj74_Delete
0001B946 4E75                       		rts	
0001B948                            ; ===========================================================================
0001B948                            
0001B948                            Obj74_Delete:
0001B948 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001B94E                            ; ===========================================================================
0001B94E 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B950 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B952 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B954 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B956                            ; ===========================================================================
0001B956                            
0001B956                            Obj74_Drop:
0001B956 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B95C 5328 0029                  		subq.b	#1,$29(a0)
0001B960 6A00                       		bpl.s	locret_18780
0001B962 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B968 4228 0028                  		clr.b	obSubtype(a0)
0001B96C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B972 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B978 6100 C634                  		bsr.w	ObjFloorDist
0001B97C 4A41                       		tst.w	d1
0001B97E 6A00                       		bpl.s	locret_18780
0001B980 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B984                            
0001B984                            locret_18780:
0001B984 4E75                       		rts	
0001B986                            ; ===========================================================================
0001B986                            
0001B986                            Obj74_MakeFlame:
0001B986 5568 000C                  		subq.w	#2,obY(a0)
0001B98A 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B990 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B996 4268 0012                  		clr.w	obVelY(a0)
0001B99A 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B9A0 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B9A6 117C 0003 0029             		move.b	#3,$29(a0)
0001B9AC 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001B9B2 6600                       		bne.s	loc_187CA
0001B9B4 47D1                       		lea	(a1),a3
0001B9B6 45D0                       		lea	(a0),a2
0001B9B8 7003                       		moveq	#3,d0
0001B9BA                            
0001B9BA                            Obj74_Loop:
0001B9BA 26DA                       		move.l	(a2)+,(a3)+
0001B9BC 26DA                       		move.l	(a2)+,(a3)+
0001B9BE 26DA                       		move.l	(a2)+,(a3)+
0001B9C0 26DA                       		move.l	(a2)+,(a3)+
0001B9C2 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B9C6                            
0001B9C6 4469 0010                  		neg.w	obVelX(a1)
0001B9CA 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B9CE                            
0001B9CE                            loc_187CA:
0001B9CE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B9D2 4E75                       		rts	
0001B9D4                            
0001B9D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9D4                            
0001B9D4                            
0001B9D4                            Obj74_Duplicate2:
0001B9D4 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001B9DA 6600                       		bne.s	locret_187EE
0001B9DC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B9E2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B9E8 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B9EC 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B9F2                            
0001B9F2                            locret_187EE:
0001B9F2 4E75                       		rts	
0001B9F4                            ; End of function Obj74_Duplicate2
0001B9F4                            
0001B9F4                            ; ===========================================================================
0001B9F4                            
0001B9F4                            Obj74_Duplicate:
0001B9F4 6100 C5B8                  		bsr.w	ObjFloorDist
0001B9F8 4A41                       		tst.w	d1
0001B9FA 6A00                       		bpl.s	loc_18826
0001B9FC 3028 0008                  		move.w	obX(a0),d0
0001BA00 0C40 1940                  		cmpi.w	#$1940,d0
0001BA04 6E00                       		bgt.s	loc_1882C
0001BA06 3228 0030                  		move.w	$30(a0),d1
0001BA0A B240                       		cmp.w	d0,d1
0001BA0C 6700                       		beq.s	loc_1881E
0001BA0E 0240 0010                  		andi.w	#$10,d0
0001BA12 0241 0010                  		andi.w	#$10,d1
0001BA16 B240                       		cmp.w	d0,d1
0001BA18 6700                       		beq.s	loc_1881E
0001BA1A 61B8                       		bsr.s	Obj74_Duplicate2
0001BA1C 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001BA22                            
0001BA22                            loc_1881E:
0001BA22 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BA28 4E75                       		rts	
0001BA2A                            ; ===========================================================================
0001BA2A                            
0001BA2A                            loc_18826:
0001BA2A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA2E 4E75                       		rts	
0001BA30                            ; ===========================================================================
0001BA30                            
0001BA30                            loc_1882C:
0001BA30 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BA34 4E75                       		rts	
0001BA36                            ; ===========================================================================
0001BA36                            
0001BA36                            Obj74_FallEdge:
0001BA36 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001BA3C 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001BA42 3028 0008                  		move.w	obX(a0),d0
0001BA46 9068 0032                  		sub.w	$32(a0),d0
0001BA4A 6A00                       		bpl.s	loc_1884A
0001BA4C 4440                       		neg.w	d0
0001BA4E                            
0001BA4E                            loc_1884A:
0001BA4E 0C40 0012                  		cmpi.w	#$12,d0
0001BA52 6600                       		bne.s	loc_18856
0001BA54 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001BA5A                            
0001BA5A                            loc_18856:
0001BA5A 6100 C552                  		bsr.w	ObjFloorDist
0001BA5E 4A41                       		tst.w	d1
0001BA60 6A00                       		bpl.s	locret_1887E
0001BA62 5328 0029                  		subq.b	#1,$29(a0)
0001BA66 6700                       		beq.s	Obj74_Delete2
0001BA68 4268 0012                  		clr.w	obVelY(a0)
0001BA6C 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001BA72 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BA78 08E8 0007 0002             		bset	#7,obGfx(a0)
0001BA7E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BA82                            
0001BA82                            locret_1887E:
0001BA82 4E75                       		rts	
0001BA84                            ; ===========================================================================
0001BA84                            
0001BA84                            Obj74_Delete2:
0001BA84 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001BA8A                            ; ===========================================================================
0001BA8A                            
0001BA8A                            loc_18886:	; Routine 4
0001BA8A 08E8 0007 0002             		bset	#7,obGfx(a0)
0001BA90 5328 0029                  		subq.b	#1,$29(a0)
0001BA94 6600                       		bne.s	Obj74_Animate
0001BA96 117C 0001 001C             		move.b	#1,obAnim(a0)
0001BA9C 5968 000C                  		subq.w	#4,obY(a0)
0001BAA0 4228 0020                  		clr.b	obColType(a0)
0001BAA4                            
0001BAA4                            Obj74_Animate:
0001BAA4 43F9 0001 08E6             		lea	(Ani_Fire).l,a1
0001BAAA 4EF9 0000 CAE4             		jmp	(AnimateSprite).l
0001BAB0                            ; ===========================================================================
0001BAB0                            
0001BAB0                            Obj74_Delete3:	; Routine 6
0001BAB0 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001BAB0 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001BAB6                            
0001BAB6                            	Obj7A_Delete:
0001BAB6 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001BABC                            
0001BABC                            		include	"_incObj\7A Boss - Star Light.asm"
0001BABC                            ; ---------------------------------------------------------------------------
0001BABC                            ; Object 7A - Eggman (SLZ)
0001BABC                            ; ---------------------------------------------------------------------------
0001BABC                            
0001BABC                            BossStarLight:
0001BABC 7000                       		moveq	#0,d0
0001BABE 1028 0024                  		move.b	obRoutine(a0),d0
0001BAC2 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001BAC6 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001BACA                            ; ===========================================================================
0001BACA 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001BACC 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001BACE 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001BAD0 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001BAD2 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001BAD4                            
0001BAD4 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BAD8 0401 0200                  		dc.b 4,	1, $02, $00
0001BADC 0607 0200                  		dc.b 6,	7, $02, $00
0001BAE0 0800 0180                  		dc.b 8,	0, $01, $80
0001BAE4                            ; ===========================================================================
0001BAE4                            
0001BAE4                            Obj7A_Main:
0001BAE4 317C 2188 0008             		move.w	#$2188,obX(a0)
0001BAEA 317C 0228 000C             		move.w	#$228,obY(a0)
0001BAF0 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BAF6 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BAFC 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BB02 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BB08 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001BB0C 2248                       		movea.l	a0,a1
0001BB0E 7203                       		moveq	#3,d1
0001BB10 6000                       		bra.s	Obj7A_LoadBoss
0001BB12                            ; ===========================================================================
0001BB12                            
0001BB12                            Obj7A_Loop:
0001BB12 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001BB18 6600                       		bne.s	loc_1895C
0001BB1A 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001BB1E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BB24 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BB2A                            
0001BB2A                            Obj7A_LoadBoss:
0001BB2A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BB30 4229 0025                  		clr.b	ob2ndRout(a1)
0001BB34 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BB38 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BB3C 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001BB40 237C 0001 AEDA 0004        		move.l	#Map_Eggman,obMap(a1)
0001BB48 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BB4E 137C 0004 0001             		move.b	#4,obRender(a1)
0001BB54 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BB5A 2348 0034                  		move.l	a0,$34(a1)
0001BB5E 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001BB62                            
0001BB62                            loc_1895C:
0001BB62 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BB66 45E8 002A                  		lea	$2A(a0),a2
0001BB6A 705E                       		moveq	#$5E,d0
0001BB6C 723E                       		moveq	#$3E,d1
0001BB6E                            
0001BB6E                            loc_18968:
0001BB6E B011                       		cmp.b	(a1),d0
0001BB70 6600                       		bne.s	loc_18974
0001BB72 4A29 0028                  		tst.b	obSubtype(a1)
0001BB76 6700                       		beq.s	loc_18974
0001BB78 34C9                       		move.w	a1,(a2)+
0001BB7A                            
0001BB7A                            loc_18974:
0001BB7A D2FC 0040                  		adda.w	#$40,a1
0001BB7E 51C9 FFEE                  		dbf	d1,loc_18968
0001BB82                            
0001BB82                            Obj7A_ShipMain:	; Routine 2
0001BB82 7000                       		moveq	#0,d0
0001BB84 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BB88 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001BB8C 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001BB90 43F9 0001 AE8A             		lea	(Ani_Eggman).l,a1
0001BB96 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001BB9C 7003                       		moveq	#3,d0
0001BB9E C028 0022                  		and.b	obStatus(a0),d0
0001BBA2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BBA8 8128 0001                  		or.b	d0,obRender(a0)
0001BBAC 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001BBB2                            ; ===========================================================================
0001BBB2 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001BBB4 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001BBB6 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001BBB8 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001BBBA 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001BBBC 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001BBBE                            ; ===========================================================================
0001BBBE                            
0001BBBE                            loc_189B8:
0001BBBE 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BBC4 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001BBCA 6400                       		bcc.s	loc_189CA
0001BBCC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BBD0                            
0001BBD0                            loc_189CA:
0001BBD0 6100 EEA4                  		bsr.w	BossMove
0001BBD4 1028 003F                  		move.b	$3F(a0),d0
0001BBD8 5428 003F                  		addq.b	#2,$3F(a0)
0001BBDC 4EB9 0000 3A82             		jsr	(CalcSine).l
0001BBE2 EC40                       		asr.w	#6,d0
0001BBE4 D068 0038                  		add.w	$38(a0),d0
0001BBE8 3140 000C                  		move.w	d0,obY(a0)
0001BBEC 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BBF2 6000                       		bra.s	loc_189FE
0001BBF4                            ; ===========================================================================
0001BBF4                            
0001BBF4                            loc_189EE:
0001BBF4 6100 EE80                  		bsr.w	BossMove
0001BBF8 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BBFE 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BC04                            
0001BC04                            loc_189FE:
0001BC04 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001BC0A 6400                       		bcc.s	locret_18A44
0001BC0C 4A28 0022                  		tst.b	obStatus(a0)
0001BC10 6B00                       		bmi.s	loc_18A46
0001BC12 4A28 0020                  		tst.b	obColType(a0)
0001BC16 6600                       		bne.s	locret_18A44
0001BC18 4A28 003E                  		tst.b	$3E(a0)
0001BC1C 6600                       		bne.s	loc_18A28
0001BC1E 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BC2E                            
0001BC2E                            loc_18A28:
0001BC2E 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BC32 7000                       		moveq	#0,d0
0001BC34 4A51                       		tst.w	(a1)
0001BC36 6600                       		bne.s	loc_18A36
0001BC38 303C 0EEE                  		move.w	#cWhite,d0
0001BC3C                            
0001BC3C                            loc_18A36:
0001BC3C 3280                       		move.w	d0,(a1)
0001BC3E 5328 003E                  		subq.b	#1,$3E(a0)
0001BC42 6600                       		bne.s	locret_18A44
0001BC44 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BC4A                            
0001BC4A                            locret_18A44:
0001BC4A 4E75                       		rts	
0001BC4C                            ; ===========================================================================
0001BC4C                            
0001BC4C                            loc_18A46:
0001BC4C 7064                       		moveq	#100,d0
0001BC4E 6100 0000                  		bsr.w	AddPoints
0001BC52 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001BC58 117C 0078 003C             		move.b	#$78,$3C(a0)
0001BC5E 4268 0010                  		clr.w	obVelX(a0)
0001BC62 4E75                       		rts	
0001BC64                            ; ===========================================================================
0001BC64                            
0001BC64                            loc_18A5E:
0001BC64 3028 0030                  		move.w	$30(a0),d0
0001BC68 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001BC6E 0828 0000 0022             		btst	#0,obStatus(a0)
0001BC74 6600                       		bne.s	loc_18A7C
0001BC76 4468 0010                  		neg.w	obVelX(a0)
0001BC7A 0C40 2008                  		cmpi.w	#$2008,d0
0001BC7E 6E00                       		bgt.s	loc_18A88
0001BC80 6000                       		bra.s	loc_18A82
0001BC82                            ; ===========================================================================
0001BC82                            
0001BC82                            loc_18A7C:
0001BC82 0C40 2138                  		cmpi.w	#$2138,d0
0001BC86 6D00                       		blt.s	loc_18A88
0001BC88                            
0001BC88                            loc_18A82:
0001BC88 0868 0000 0022             		bchg	#0,obStatus(a0)
0001BC8E                            
0001BC8E                            loc_18A88:
0001BC8E 3028 0008                  		move.w	8(a0),d0
0001BC92 72FF                       		moveq	#-1,d1
0001BC94 7402                       		moveq	#2,d2
0001BC96 45E8 002A                  		lea	$2A(a0),a2
0001BC9A 7828                       		moveq	#$28,d4
0001BC9C 4A68 0010                  		tst.w	obVelX(a0)
0001BCA0 6A00                       		bpl.s	loc_18A9E
0001BCA2 4444                       		neg.w	d4
0001BCA4                            
0001BCA4                            loc_18A9E:
0001BCA4 321A                       		move.w	(a2)+,d1
0001BCA6 2641                       		movea.l	d1,a3
0001BCA8 082B 0003 0022             		btst	#3,obStatus(a3)
0001BCAE 6600                       		bne.s	loc_18AB4
0001BCB0 362B 0008                  		move.w	8(a3),d3
0001BCB4 D644                       		add.w	d4,d3
0001BCB6 9640                       		sub.w	d0,d3
0001BCB8 6700                       		beq.s	loc_18AC0
0001BCBA                            
0001BCBA                            loc_18AB4:
0001BCBA 51CA FFE8                  		dbf	d2,loc_18A9E
0001BCBE                            
0001BCBE 1142 0028                  		move.b	d2,obSubtype(a0)
0001BCC2 6000 FF0C                  		bra.w	loc_189CA
0001BCC6                            ; ===========================================================================
0001BCC6                            
0001BCC6                            loc_18AC0:
0001BCC6 1142 0028                  		move.b	d2,obSubtype(a0)
0001BCCA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BCCE 117C 0028 003C             		move.b	#$28,$3C(a0)
0001BCD4 6000 FEFA                  		bra.w	loc_189CA
0001BCD8                            ; ===========================================================================
0001BCD8                            
0001BCD8                            Obj7A_MakeBall:
0001BCD8 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001BCDE 6600                       		bne.s	loc_18B36
0001BCE0 70FF                       		moveq	#-1,d0
0001BCE2 1028 0028                  		move.b	obSubtype(a0),d0
0001BCE6 4880                       		ext.w	d0
0001BCE8 6B00                       		bmi.s	loc_18B40
0001BCEA 5540                       		subq.w	#2,d0
0001BCEC 4440                       		neg.w	d0
0001BCEE D040                       		add.w	d0,d0
0001BCF0 43E8 002A                  		lea	$2A(a0),a1
0001BCF4 3031 0000                  		move.w	(a1,d0.w),d0
0001BCF8 2440                       		movea.l	d0,a2
0001BCFA 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BCFE 723E                       		moveq	#$3E,d1
0001BD00                            
0001BD00                            loc_18AFA:
0001BD00 B0A9 003C                  		cmp.l	$3C(a1),d0
0001BD04 6700                       		beq.s	loc_18B40
0001BD06 D2FC 0040                  		adda.w	#$40,a1
0001BD0A 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BD0E                            
0001BD0E 2F08                       		move.l	a0,-(sp)
0001BD10 41D2                       		lea	(a2),a0
0001BD12 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001BD18 205F                       		movea.l	(sp)+,a0
0001BD1A 6600                       		bne.s	loc_18B40
0001BD1C 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BD20 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BD26 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BD2C 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BD32 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BD38 234A 003C                  		move.l	a2,$3C(a1)
0001BD3C                            
0001BD3C                            loc_18B36:
0001BD3C 5328 003C                  		subq.b	#1,$3C(a0)
0001BD40 6700                       		beq.s	loc_18B40
0001BD42 6000 FEC0                  		bra.w	loc_189FE
0001BD46                            ; ===========================================================================
0001BD46                            
0001BD46                            loc_18B40:
0001BD46 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BD4A 6000 FE84                  		bra.w	loc_189CA
0001BD4E                            ; ===========================================================================
0001BD4E                            
0001BD4E                            loc_18B48:
0001BD4E 5328 003C                  		subq.b	#1,$3C(a0)
0001BD52 6B00                       		bmi.s	loc_18B52
0001BD54 6000 ECDE                  		bra.w	BossDefeated
0001BD58                            ; ===========================================================================
0001BD58                            
0001BD58                            loc_18B52:
0001BD58 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD5C 4268 0012                  		clr.w	obVelY(a0)
0001BD60 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BD66 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BD6C 4268 0010                  		clr.w	obVelX(a0)
0001BD70 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BD76 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BD7A 6600                       		bne.s	loc_18B7C
0001BD7C 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BD82                            
0001BD82                            loc_18B7C:
0001BD82 6000 FE80                  		bra.w	loc_189FE
0001BD86                            ; ===========================================================================
0001BD86                            
0001BD86                            loc_18B80:
0001BD86 5228 003C                  		addq.b	#1,$3C(a0)
0001BD8A 6700                       		beq.s	loc_18B90
0001BD8C 6A00                       		bpl.s	loc_18B96
0001BD8E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BD94 6000                       		bra.s	loc_18BC2
0001BD96                            ; ===========================================================================
0001BD96                            
0001BD96                            loc_18B90:
0001BD96 4268 0012                  		clr.w	obVelY(a0)
0001BD9A 6000                       		bra.s	loc_18BC2
0001BD9C                            ; ===========================================================================
0001BD9C                            
0001BD9C                            loc_18B96:
0001BD9C 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BDA2 6500                       		bcs.s	loc_18BAE
0001BDA4 6700                       		beq.s	loc_18BB4
0001BDA6 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BDAC 6500                       		bcs.s	loc_18BC2
0001BDAE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BDB2 6000                       		bra.s	loc_18BC2
0001BDB4                            ; ===========================================================================
0001BDB4                            
0001BDB4                            loc_18BAE:
0001BDB4 5168 0012                  		subq.w	#8,obVelY(a0)
0001BDB8 6000                       		bra.s	loc_18BC2
0001BDBA                            ; ===========================================================================
0001BDBA                            
0001BDBA                            loc_18BB4:
0001BDBA 4268 0012                          	clr.w    obVelY(a0)
0001BDBE 4A38 FE2D                          	tst.b     (v_invinc).w
0001BDC2 6600                               	bne.s   @boss_invinc
0001BDC4                            
0001BDC4 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BDC8 6000 0000                          	bra.w      @boss_play
0001BDCC                            
0001BDCC                            	@boss_invinc:
0001BDCC 103C 0000                          	move.b #bgm_Invincible,d0
0001BDD0                            
0001BDD0                            	@boss_play:
0001BDD0 4EB8 129A                          	jsr PlaySound
0001BDD4                            
0001BDD4                            loc_18BC2:
0001BDD4 6000 FE1E                  		bra.w	loc_189EE
0001BDD8                            ; ===========================================================================
0001BDD8                            
0001BDD8                            loc_18BC6:
0001BDD8 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BDDE 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BDE4 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BDEA 6400                       		bcc.s	loc_18BE0
0001BDEC 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BDF0 6000                       		bra.s	loc_18BE8
0001BDF2                            ; ===========================================================================
0001BDF2                            
0001BDF2                            loc_18BE0:
0001BDF2 4A28 0001                  		tst.b	obRender(a0)
0001BDF6 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BDFA                            
0001BDFA                            loc_18BE8:
0001BDFA 6100 EC7A                  		bsr.w	BossMove
0001BDFE 6000 FDD0                  		bra.w	loc_189CA
0001BE02                            ; ===========================================================================
0001BE02                            
0001BE02                            Obj7A_FaceMain:	; Routine 4
0001BE02 7000                       		moveq	#0,d0
0001BE04 7201                       		moveq	#1,d1
0001BE06 2268 0034                  		movea.l	$34(a0),a1
0001BE0A 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BE0E 0C00 0006                  		cmpi.b	#6,d0
0001BE12 6B00                       		bmi.s	loc_18C06
0001BE14 720A                       		moveq	#$A,d1
0001BE16 6000                       		bra.s	loc_18C1A
0001BE18                            ; ===========================================================================
0001BE18                            
0001BE18                            loc_18C06:
0001BE18 4A29 0020                  		tst.b	obColType(a1)
0001BE1C 6600                       		bne.s	loc_18C10
0001BE1E 7205                       		moveq	#5,d1
0001BE20 6000                       		bra.s	loc_18C1A
0001BE22                            ; ===========================================================================
0001BE22                            
0001BE22                            loc_18C10:
0001BE22 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BE28 6500                       		bcs.s	loc_18C1A
0001BE2A 7204                       		moveq	#4,d1
0001BE2C                            
0001BE2C                            loc_18C1A:
0001BE2C 1141 001C                  		move.b	d1,obAnim(a0)
0001BE30 0C00 000A                  		cmpi.b	#$A,d0
0001BE34 6600                       		bne.s	loc_18C32
0001BE36 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BE3C 4A28 0001                  		tst.b	obRender(a0)
0001BE40 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BE44                            
0001BE44                            loc_18C32:
0001BE44 6000                       		bra.s	loc_18C6C
0001BE46                            ; ===========================================================================
0001BE46                            
0001BE46                            Obj7A_FlameMain:; Routine 6
0001BE46 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BE4C 2268 0034                  		movea.l	$34(a0),a1
0001BE50 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BE56 6600                       		bne.s	loc_18C56
0001BE58 4A28 0001                  		tst.b	obRender(a0)
0001BE5C 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BE60 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BE66 6000                       		bra.s	loc_18C6C
0001BE68                            ; ===========================================================================
0001BE68                            
0001BE68                            loc_18C56:
0001BE68 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BE6E 6E00                       		bgt.s	loc_18C6C
0001BE70 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BE76 6D00                       		blt.s	loc_18C6C
0001BE78 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BE7E                            
0001BE7E                            loc_18C6C:
0001BE7E 43F9 0001 AE8A             		lea	(Ani_Eggman).l,a1
0001BE84 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001BE8A                            
0001BE8A                            loc_18C78:
0001BE8A 2268 0034                  		movea.l	$34(a0),a1
0001BE8E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BE94 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BE9A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BEA0 7003                       		moveq	#3,d0
0001BEA2 C028 0022                  		and.b	obStatus(a0),d0
0001BEA6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BEAC 8128 0001                  		or.b	d0,obRender(a0)
0001BEB0 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001BEB6                            ; ===========================================================================
0001BEB6                            
0001BEB6                            Obj7A_TubeMain:	; Routine 8
0001BEB6 2268 0034                  		movea.l	$34(a0),a1
0001BEBA 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BEC0 6600                       		bne.s	loc_18CB8
0001BEC2 4A28 0001                  		tst.b	obRender(a0)
0001BEC6 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BECA                            
0001BECA                            loc_18CB8:
0001BECA 217C 0001 AFCA 0004        		move.l	#Map_BossItems,obMap(a0)
0001BED2 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BED8 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BEDE 60AA                       		bra.s	loc_18C78
0001BEDE 60AA                       		bra.s	loc_18C78
0001BEE0                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BEE0                            ; ---------------------------------------------------------------------------
0001BEE0                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BEE0                            ; ---------------------------------------------------------------------------
0001BEE0                            
0001BEE0                            BossSpikeball:
0001BEE0 7000                       		moveq	#0,d0
0001BEE2 1028 0024                  		move.b	obRoutine(a0),d0
0001BEE6 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BEEA 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BEEE 3028 0030                  		move.w	$30(a0),d0
0001BEF2 0240 FF80                  		andi.w	#$FF80,d0
0001BEF6 3238 F700                  		move.w	(v_screenposx).w,d1
0001BEFA 0441 0080                  		subi.w	#$80,d1
0001BEFE 0241 FF80                  		andi.w	#$FF80,d1
0001BF02 9041                       		sub.w	d1,d0
0001BF04 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BF08 0C40 0280                  		cmpi.w	#$280,d0
0001BF0C 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BF10 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001BF16                            ; ===========================================================================
0001BF16 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BF18 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BF1A 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BF1C 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BF1E 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BF20 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BF22                            ; ===========================================================================
0001BF22                            
0001BF22                            Obj7B_Main:	; Routine 0
0001BF22 217C 0001 3EB8 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BF2A 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BF30 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BF36 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BF3C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BF42 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BF48 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BF4E 2268 003C                  		movea.l	$3C(a0),a1
0001BF52 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BF58 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BF5E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BF64 3028 0008                  		move.w	obX(a0),d0
0001BF68 B069 0008                  		cmp.w	obX(a1),d0
0001BF6C 6E00                       		bgt.s	loc_18D68
0001BF6E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BF74 117C 0002 003A             		move.b	#2,$3A(a0)
0001BF7A                            
0001BF7A                            loc_18D68:
0001BF7A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BF7E                            
0001BF7E                            Obj7B_Fall:	; Routine 2
0001BF7E 4EB9 0000 F9D6             		jsr	(ObjectFall).l
0001BF84 2268 003C                  		movea.l	$3C(a0),a1
0001BF88 45F9 0000 0000             		lea	(word_19018).l,a2
0001BF8E 7000                       		moveq	#0,d0
0001BF90 1029 001A                  		move.b	obFrame(a1),d0
0001BF94 3228 0008                  		move.w	8(a0),d1
0001BF98 9268 0030                  		sub.w	$30(a0),d1
0001BF9C 6400                       		bcc.s	loc_18D8E
0001BF9E 5440                       		addq.w	#2,d0
0001BFA0                            
0001BFA0                            loc_18D8E:
0001BFA0 D040                       		add.w	d0,d0
0001BFA2 3228 0034                  		move.w	$34(a0),d1
0001BFA6 D272 0000                  		add.w	(a2,d0.w),d1
0001BFAA B268 000C                  		cmp.w	obY(a0),d1
0001BFAE 6E00                       		bgt.s	locret_18DC4
0001BFB0 2268 003C                  		movea.l	$3C(a0),a1
0001BFB4 7202                       		moveq	#2,d1
0001BFB6 0828 0000 0022             		btst	#0,obStatus(a0)
0001BFBC 6700                       		beq.s	loc_18DAE
0001BFBE 7200                       		moveq	#0,d1
0001BFC0                            
0001BFC0                            loc_18DAE:
0001BFC0 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BFC6 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BFCC 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BFD2 6000 0000                  		bra.w	loc_18FA2
0001BFD6                            ; ===========================================================================
0001BFD6                            
0001BFD6                            locret_18DC4:
0001BFD6 4E75                       		rts	
0001BFD8                            ; ===========================================================================
0001BFD8                            
0001BFD8                            loc_18DC6:	; Routine 4
0001BFD8 2268 003C                  		movea.l	$3C(a0),a1
0001BFDC 7000                       		moveq	#0,d0
0001BFDE 1028 003A                  		move.b	$3A(a0),d0
0001BFE2 9029 003A                  		sub.b	$3A(a1),d0
0001BFE6 6700                       		beq.s	loc_18E2A
0001BFE8 6400                       		bcc.s	loc_18DDA
0001BFEA 4400                       		neg.b	d0
0001BFEC                            
0001BFEC                            loc_18DDA:
0001BFEC 323C F7E8                  		move.w	#-$818,d1
0001BFF0 343C FEEC                  		move.w	#-$114,d2
0001BFF4 0C00 0001                  		cmpi.b	#1,d0
0001BFF8 6700                       		beq.s	loc_18E00
0001BFFA 323C F6A0                  		move.w	#-$960,d1
0001BFFE 343C FF0C                  		move.w	#-$F4,d2
0001C002 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001C008 6D00                       		blt.s	loc_18E00
0001C00A 323C F5E0                  		move.w	#-$A20,d1
0001C00E 343C FF80                  		move.w	#-$80,d2
0001C012                            
0001C012                            loc_18E00:
0001C012 3141 0012                  		move.w	d1,obVelY(a0)
0001C016 3142 0010                  		move.w	d2,obVelX(a0)
0001C01A 3028 0008                  		move.w	obX(a0),d0
0001C01E 9068 0030                  		sub.w	$30(a0),d0
0001C022 6400                       		bcc.s	loc_18E16
0001C024 4468 0010                  		neg.w	obVelX(a0)
0001C028                            
0001C028                            loc_18E16:
0001C028 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C02E 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001C034 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C038 6000 0000                  		bra.w	loc_18EAA
0001C03C                            ; ===========================================================================
0001C03C                            
0001C03C                            loc_18E2A:
0001C03C 45F9 0000 0000             		lea	(word_19018).l,a2
0001C042 7000                       		moveq	#0,d0
0001C044 1029 001A                  		move.b	obFrame(a1),d0
0001C048 343C 0028                  		move.w	#$28,d2
0001C04C 3228 0008                  		move.w	obX(a0),d1
0001C050 9268 0030                  		sub.w	$30(a0),d1
0001C054 6400                       		bcc.s	loc_18E48
0001C056 4442                       		neg.w	d2
0001C058 5440                       		addq.w	#2,d0
0001C05A                            
0001C05A                            loc_18E48:
0001C05A D040                       		add.w	d0,d0
0001C05C 3228 0034                  		move.w	$34(a0),d1
0001C060 D272 0000                  		add.w	(a2,d0.w),d1
0001C064 3141 000C                  		move.w	d1,obY(a0)
0001C068 D468 0030                  		add.w	$30(a0),d2
0001C06C 3142 0008                  		move.w	d2,obX(a0)
0001C070 4268 000E                  		clr.w	obY+2(a0)
0001C074 4268 000A                  		clr.w	obX+2(a0)
0001C078 5368 0028                  		subq.w	#1,obSubtype(a0)
0001C07C 6600                       		bne.s	loc_18E7A
0001C07E 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001C084 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001C08A 4E75                       		rts	
0001C08C                            ; ===========================================================================
0001C08C                            
0001C08C                            loc_18E7A:
0001C08C 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001C092 6600                       		bne.s	loc_18E88
0001C094 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001C09A                            
0001C09A                            loc_18E88:
0001C09A 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001C0A0 6600                       		bne.s	loc_18E96
0001C0A2 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001C0A8                            
0001C0A8                            loc_18E96:
0001C0A8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001C0AC 6E00                       		bgt.s	locret_18EA8
0001C0AE 0868 0000 001A             		bchg	#0,obFrame(a0)
0001C0B4 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001C0BA                            
0001C0BA                            locret_18EA8:
0001C0BA 4E75                       		rts	
0001C0BC                            ; ===========================================================================
0001C0BC                            
0001C0BC                            loc_18EAA:	; Routine 6
0001C0BC 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C0C0 707A                       		moveq	#id_BossStarLight,d0
0001C0C2 7240                       		moveq	#$40,d1
0001C0C4 743E                       		moveq	#$3E,d2
0001C0C6                            
0001C0C6                            loc_18EB4:
0001C0C6 B011                       		cmp.b	(a1),d0
0001C0C8 6700                       		beq.s	loc_18EC0
0001C0CA D2C1                       		adda.w	d1,a1
0001C0CC 51CA FFF8                  		dbf	d2,loc_18EB4
0001C0D0                            
0001C0D0 6000                       		bra.s	loc_18F38
0001C0D2                            ; ===========================================================================
0001C0D2                            
0001C0D2                            loc_18EC0:
0001C0D2 3029 0008                  		move.w	obX(a1),d0
0001C0D6 3229 000C                  		move.w	obY(a1),d1
0001C0DA 3428 0008                  		move.w	obX(a0),d2
0001C0DE 3628 000C                  		move.w	obY(a0),d3
0001C0E2 45FA 0000                  		lea	byte_19022(pc),a2
0001C0E6 47FA 0000                  		lea	byte_19026(pc),a3
0001C0EA 181A                       		move.b	(a2)+,d4
0001C0EC 4884                       		ext.w	d4
0001C0EE D044                       		add.w	d4,d0
0001C0F0 181B                       		move.b	(a3)+,d4
0001C0F2 4884                       		ext.w	d4
0001C0F4 D444                       		add.w	d4,d2
0001C0F6 B440                       		cmp.w	d0,d2
0001C0F8 6500                       		bcs.s	loc_18F38
0001C0FA 181A                       		move.b	(a2)+,d4
0001C0FC 4884                       		ext.w	d4
0001C0FE D044                       		add.w	d4,d0
0001C100 181B                       		move.b	(a3)+,d4
0001C102 4884                       		ext.w	d4
0001C104 D444                       		add.w	d4,d2
0001C106 B042                       		cmp.w	d2,d0
0001C108 6500                       		bcs.s	loc_18F38
0001C10A 181A                       		move.b	(a2)+,d4
0001C10C 4884                       		ext.w	d4
0001C10E D244                       		add.w	d4,d1
0001C110 181B                       		move.b	(a3)+,d4
0001C112 4884                       		ext.w	d4
0001C114 D644                       		add.w	d4,d3
0001C116 B641                       		cmp.w	d1,d3
0001C118 6500                       		bcs.s	loc_18F38
0001C11A 181A                       		move.b	(a2)+,d4
0001C11C 4884                       		ext.w	d4
0001C11E D244                       		add.w	d4,d1
0001C120 181B                       		move.b	(a3)+,d4
0001C122 4884                       		ext.w	d4
0001C124 D644                       		add.w	d4,d3
0001C126 B243                       		cmp.w	d3,d1
0001C128 6500                       		bcs.s	loc_18F38
0001C12A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C12E 4268 0028                  		clr.w	obSubtype(a0)
0001C132 4229 0020                  		clr.b	obColType(a1)
0001C136 5329 0021                  		subq.b	#1,obColProp(a1)
0001C13A 6600                       		bne.s	loc_18F38
0001C13C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001C142 4268 0010                  		clr.w	obVelX(a0)
0001C146 4268 0012                  		clr.w	obVelY(a0)
0001C14A                            
0001C14A                            loc_18F38:
0001C14A 4A68 0012                  		tst.w	obVelY(a0)
0001C14E 6A00                       		bpl.s	loc_18F5C
0001C150 4EB9 0000 F9D6             		jsr	(ObjectFall).l
0001C156 3028 0034                  		move.w	$34(a0),d0
0001C15A 0440 002F                  		subi.w	#$2F,d0
0001C15E B068 000C                  		cmp.w	obY(a0),d0
0001C162 6E00                       		bgt.s	loc_18F58
0001C164 4EB9 0000 F9D6             		jsr	(ObjectFall).l
0001C16A                            
0001C16A                            loc_18F58:
0001C16A 6000 FF20                  		bra.w	loc_18E7A
0001C16E                            ; ===========================================================================
0001C16E                            
0001C16E                            loc_18F5C:
0001C16E 4EB9 0000 F9D6             		jsr	(ObjectFall).l
0001C174 2268 003C                  		movea.l	$3C(a0),a1
0001C178 45F9 0000 0000             		lea	(word_19018).l,a2
0001C17E 7000                       		moveq	#0,d0
0001C180 1029 001A                  		move.b	obFrame(a1),d0
0001C184 3228 0008                  		move.w	obX(a0),d1
0001C188 9268 0030                  		sub.w	$30(a0),d1
0001C18C 6400                       		bcc.s	loc_18F7E
0001C18E 5440                       		addq.w	#2,d0
0001C190                            
0001C190                            loc_18F7E:
0001C190 D040                       		add.w	d0,d0
0001C192 3228 0034                  		move.w	$34(a0),d1
0001C196 D272 0000                  		add.w	(a2,d0.w),d1
0001C19A B268 000C                  		cmp.w	obY(a0),d1
0001C19E 6ECA                       		bgt.s	loc_18F58
0001C1A0 2268 003C                  		movea.l	$3C(a0),a1
0001C1A4 7202                       		moveq	#2,d1
0001C1A6 4A68 0010                  		tst.w	obVelX(a0)
0001C1AA 6B00                       		bmi.s	loc_18F9C
0001C1AC 7200                       		moveq	#0,d1
0001C1AE                            
0001C1AE                            loc_18F9C:
0001C1AE 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001C1B4                            
0001C1B4                            loc_18FA2:
0001C1B4 1341 003A                  		move.b	d1,$3A(a1)
0001C1B8 1141 003A                  		move.b	d1,$3A(a0)
0001C1BC B229 001A                  		cmp.b	obFrame(a1),d1
0001C1C0 6700                       		beq.s	loc_19008
0001C1C2 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001C1C8 6700                       		beq.s	loc_19008
0001C1CA 4229 0025                  		clr.b	ob2ndRout(a1)
0001C1CE 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001C1D4 45F8 D000                  		lea	(v_objspace).w,a2
0001C1D8 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001C1DE 446A 0012                  		neg.w	obVelY(a2)
0001C1E2 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001C1E8 6600                       		bne.s	loc_18FDC
0001C1EA E0EA 0012                  		asr	obVelY(a2)
0001C1EE                            
0001C1EE                            loc_18FDC:
0001C1EE 08EA 0001 0022             		bset	#1,obStatus(a2)
0001C1F4 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001C1FA 422A 003C                  		clr.b	$3C(a2)
0001C1FE 2F08                       		move.l	a0,-(sp)
0001C200 41D2                       		lea	(a2),a0
0001C202 4EB9 0001 609E             		jsr	(Sonic_ChkRoll).l
0001C208 205F                       		movea.l	(sp)+,a0
0001C20A 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001C21A                            
0001C21A                            loc_19008:
0001C21A 4268 0010                  		clr.w	obVelX(a0)
0001C21E 4268 0012                  		clr.w	obVelY(a0)
0001C222 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C226 6000 FE64                  		bra.w	loc_18E7A
0001C22A                            ; ===========================================================================
0001C22A FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001C234                            		even
0001C234 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001C238                            		even
0001C238 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001C23C                            		even
0001C23C                            ; ===========================================================================
0001C23C                            
0001C23C                            Obj7B_Explode:	; Routine 8
0001C23C 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001C240 4228 0024                  		clr.b	obRoutine(a0)
0001C244 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001C24A 6700                       		beq.s	Obj7B_MakeFrag
0001C24C 4E75                       		rts	
0001C24E                            ; ===========================================================================
0001C24E                            
0001C24E                            Obj7B_MakeFrag:
0001C24E 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001C254 7203                       		moveq	#3,d1
0001C256 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001C25A                            
0001C25A                            Obj7B_Loop:
0001C25A 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
0001C260 6600                       		bne.s	loc_1909A
0001C262 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001C266 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001C26C 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001C274 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C27A 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001C280 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C286 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C28C 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001C290 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001C294 137C 0098 0020             		move.b	#$98,obColType(a1)
0001C29A 0029 0004 0001             		ori.b	#4,obRender(a1)
0001C2A0 08E9 0007 0001             		bset	#7,obRender(a1)
0001C2A6 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001C2AC                            
0001C2AC                            loc_1909A:
0001C2AC 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C2B0                            
0001C2B0 4E75                       		rts	
0001C2B2                            ; ===========================================================================
0001C2B2 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001C2B6 FF60 FDC0                  		dc.w -$A0, -$240
0001C2BA 0100 FCC0                  		dc.w $100, -$340
0001C2BE 00A0 FDC0                  		dc.w $A0, -$240
0001C2C2                            ; ===========================================================================
0001C2C2                            
0001C2C2                            Obj7B_MoveFrag:	; Routine $A
0001C2C2 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
0001C2C8 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C2CE 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001C2D4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C2DA 7004                       		moveq	#4,d0
0001C2DC C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C2E0 E448                       		lsr.w	#2,d0
0001C2E2 1140 001A                  		move.b	d0,obFrame(a0)
0001C2E6 4A28 0001                  		tst.b	1(a0)
0001C2EA 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C2EE 4E75                       		rts	
0001C2EE 4E75                       		rts	
0001C2F0                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C2F0                            ; ---------------------------------------------------------------------------
0001C2F0                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C2F0                            ; ---------------------------------------------------------------------------
0001C2F0                            Map_BSBall_internal:
0001C2F0 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C2F2 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C2F4 01                         @fireball1:	dc.b 1
0001C2F5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C2FA 01                         @fireball2:	dc.b 1
0001C2FB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C300                            		even
0001C300                            		even
0001C300                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C300                            ; ---------------------------------------------------------------------------
0001C300                            ; Object 75 - Eggman (SYZ)
0001C300                            ; ---------------------------------------------------------------------------
0001C300                            
0001C300                            BossSpringYard:
0001C300 7000                       		moveq	#0,d0
0001C302 1028 0024                  		move.b	obRoutine(a0),d0
0001C306 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C30A 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C30E                            ; ===========================================================================
0001C30E 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C310 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C312 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C314 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C316 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C318                            
0001C318 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001C31C 0401 0280                  		dc.b 4,	1, $02, $80
0001C320 0607 0280                  		dc.b 6,	7, $02, $80
0001C324 0800 0280                  		dc.b 8,	0, $02, $80
0001C328                            ; ===========================================================================
0001C328                            
0001C328                            Obj75_Main:	; Routine 0
0001C328 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C32E 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C334 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C33A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C340 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C346 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C34C 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C350 2248                       		movea.l	a0,a1
0001C352 7203                       		moveq	#3,d1
0001C354 6000                       		bra.s	Obj75_LoadBoss
0001C356                            ; ===========================================================================
0001C356                            
0001C356                            Obj75_Loop:
0001C356 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001C35C 6600                       		bne.s	Obj75_ShipMain
0001C35E 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C362 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C368 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C36E                            
0001C36E                            Obj75_LoadBoss:
0001C36E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C374 4229 0025                  		clr.b	ob2ndRout(a1)
0001C378 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C37C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C380 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C384 237C 0001 AEDA 0004        		move.l	#Map_Eggman,obMap(a1)
0001C38C 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C392 137C 0004 0001             		move.b	#4,obRender(a1)
0001C398 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C39E 2348 0034                  		move.l	a0,$34(a1)
0001C3A2 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C3A6                            
0001C3A6                            Obj75_ShipMain:	; Routine 2
0001C3A6 7000                       		moveq	#0,d0
0001C3A8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C3AC 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C3B0 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C3B4 43F9 0001 AE8A             		lea	(Ani_Eggman).l,a1
0001C3BA 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001C3C0 7003                       		moveq	#3,d0
0001C3C2 C028 0022                  		and.b	obStatus(a0),d0
0001C3C6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C3CC 8128 0001                  		or.b	d0,obRender(a0)
0001C3D0 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001C3D6                            ; ===========================================================================
0001C3D6 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C3DA 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C3DE 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C3E2                            ; ===========================================================================
0001C3E2                            
0001C3E2                            loc_191CC:
0001C3E2 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C3E8 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C3EE 6400                       		bcc.s	loc_191DE
0001C3F0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C3F4                            
0001C3F4                            loc_191DE:
0001C3F4 1028 003F                  		move.b	$3F(a0),d0
0001C3F8 5428 003F                  		addq.b	#2,$3F(a0)
0001C3FC 4EB9 0000 3A82             		jsr	(CalcSine).l
0001C402 E440                       		asr.w	#2,d0
0001C404 3140 0012                  		move.w	d0,obVelY(a0)
0001C408                            
0001C408                            loc_191F2:
0001C408 6100 E66C                  		bsr.w	BossMove
0001C40C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C412 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C418                            
0001C418                            loc_19202:
0001C418 3028 0008                  		move.w	8(a0),d0
0001C41C 0440 2C00                  		subi.w	#$2C00,d0
0001C420 EA48                       		lsr.w	#5,d0
0001C422 1140 0034                  		move.b	d0,$34(a0)
0001C426 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C42C 6400                       		bcc.s	locret_19256
0001C42E 4A28 0022                  		tst.b	obStatus(a0)
0001C432 6B00                       		bmi.s	loc_19258
0001C434 4A28 0020                  		tst.b	obColType(a0)
0001C438 6600                       		bne.s	locret_19256
0001C43A 4A28 003E                  		tst.b	$3E(a0)
0001C43E 6600                       		bne.s	loc_1923A
0001C440 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C450                            
0001C450                            loc_1923A:
0001C450 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C454 7000                       		moveq	#0,d0
0001C456 4A51                       		tst.w	(a1)
0001C458 6600                       		bne.s	loc_19248
0001C45A 303C 0EEE                  		move.w	#cWhite,d0
0001C45E                            
0001C45E                            loc_19248:
0001C45E 3280                       		move.w	d0,(a1)
0001C460 5328 003E                  		subq.b	#1,$3E(a0)
0001C464 6600                       		bne.s	locret_19256
0001C466 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C46C                            
0001C46C                            locret_19256:
0001C46C 4E75                       		rts	
0001C46E                            ; ===========================================================================
0001C46E                            
0001C46E                            loc_19258:
0001C46E 7064                       		moveq	#100,d0
0001C470 6100 0000                  		bsr.w	AddPoints
0001C474 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C47A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C480 4268 0010                  		clr.w	obVelX(a0)
0001C484 4E75                       		rts	
0001C486                            ; ===========================================================================
0001C486                            
0001C486                            loc_19270:
0001C486 3028 0030                  		move.w	$30(a0),d0
0001C48A 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C490 0828 0000 0022             		btst	#0,obStatus(a0)
0001C496 6600                       		bne.s	loc_1928E
0001C498 4468 0010                  		neg.w	obVelX(a0)
0001C49C 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C4A0 6E00                       		bgt.s	loc_1929E
0001C4A2 6000                       		bra.s	loc_19294
0001C4A4                            ; ===========================================================================
0001C4A4                            
0001C4A4                            loc_1928E:
0001C4A4 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C4A8 6D00                       		blt.s	loc_1929E
0001C4AA                            
0001C4AA                            loc_19294:
0001C4AA 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C4B0 4228 003D                  		clr.b	$3D(a0)
0001C4B4                            
0001C4B4                            loc_1929E:
0001C4B4 0440 2C10                  		subi.w	#$2C10,d0
0001C4B8 0240 001F                  		andi.w	#$1F,d0
0001C4BC 0440 001F                  		subi.w	#$1F,d0
0001C4C0 6A00                       		bpl.s	loc_192AE
0001C4C2 4440                       		neg.w	d0
0001C4C4                            
0001C4C4                            loc_192AE:
0001C4C4 5340                       		subq.w	#1,d0
0001C4C6 6E00                       		bgt.s	loc_192E8
0001C4C8 4A28 003D                  		tst.b	$3D(a0)
0001C4CC 6600                       		bne.s	loc_192E8
0001C4CE 3238 D008                  		move.w	(v_player+obX).w,d1
0001C4D2 0441 2C00                  		subi.w	#$2C00,d1
0001C4D6 EA41                       		asr.w	#5,d1
0001C4D8 B228 0034                  		cmp.b	$34(a0),d1
0001C4DC 6600                       		bne.s	loc_192E8
0001C4DE 7000                       		moveq	#0,d0
0001C4E0 1028 0034                  		move.b	$34(a0),d0
0001C4E4 EB40                       		asl.w	#5,d0
0001C4E6 0640 2C10                  		addi.w	#$2C10,d0
0001C4EA 3140 0030                  		move.w	d0,$30(a0)
0001C4EE 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C4F2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C4F6 4268 0028                  		clr.w	obSubtype(a0)
0001C4FA 4268 0010                  		clr.w	obVelX(a0)
0001C4FE                            
0001C4FE                            loc_192E8:
0001C4FE 6000 FEF4                  		bra.w	loc_191DE
0001C502                            ; ===========================================================================
0001C502                            
0001C502                            loc_192EC:
0001C502 7000                       		moveq	#0,d0
0001C504 1028 0028                  		move.b	obSubtype(a0),d0
0001C508 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C50C 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C510                            ; ===========================================================================
0001C510 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C512 0000                       		dc.w loc_19348-off_192FA
0001C514 0000                       		dc.w loc_1938E-off_192FA
0001C516 0000                       		dc.w loc_193D0-off_192FA
0001C518                            ; ===========================================================================
0001C518                            
0001C518                            loc_19302:
0001C518 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C51E 3028 0038                  		move.w	$38(a0),d0
0001C522 0C40 0556                  		cmpi.w	#$556,d0
0001C526 6500                       		bcs.s	loc_19344
0001C528 317C 0556 0038             		move.w	#$556,$38(a0)
0001C52E 4268 003C                  		clr.w	$3C(a0)
0001C532 70FF                       		moveq	#-1,d0
0001C534 3028 0036                  		move.w	$36(a0),d0
0001C538 6700                       		beq.s	loc_1933C
0001C53A 2240                       		movea.l	d0,a1
0001C53C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C542 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C548 2348 0034                  		move.l	a0,$34(a1)
0001C54C 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C552                            
0001C552                            loc_1933C:
0001C552 4268 0012                  		clr.w	obVelY(a0)
0001C556 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C55A                            
0001C55A                            loc_19344:
0001C55A 6000 FEAC                  		bra.w	loc_191F2
0001C55E                            ; ===========================================================================
0001C55E                            
0001C55E                            loc_19348:
0001C55E 5368 003C                  		subq.w	#1,$3C(a0)
0001C562 6A00                       		bpl.s	loc_19366
0001C564 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C568 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C56E 4A68 0036                  		tst.w	$36(a0)
0001C572 6600                       		bne.s	loc_19362
0001C574 E0E8 0012                  		asr	obVelY(a0)
0001C578                            
0001C578                            loc_19362:
0001C578 7000                       		moveq	#0,d0
0001C57A 6000                       		bra.s	loc_1937C
0001C57C                            ; ===========================================================================
0001C57C                            
0001C57C                            loc_19366:
0001C57C 7000                       		moveq	#0,d0
0001C57E 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C584 6E00                       		bgt.s	loc_1937C
0001C586 7002                       		moveq	#2,d0
0001C588 0828 0001 003D             		btst	#1,$3D(a0)
0001C58E 6700                       		beq.s	loc_1937C
0001C590 4440                       		neg.w	d0
0001C592                            
0001C592                            loc_1937C:
0001C592 D068 0038                  		add.w	$38(a0),d0
0001C596 3140 000C                  		move.w	d0,obY(a0)
0001C59A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C5A0 6000 FE76                  		bra.w	loc_19202
0001C5A4                            ; ===========================================================================
0001C5A4                            
0001C5A4                            loc_1938E:
0001C5A4 303C 04DA                  		move.w	#$4DA,d0
0001C5A8 4A68 0036                  		tst.w	$36(a0)
0001C5AC 6700                       		beq.s	loc_1939C
0001C5AE 0440 0018                  		subi.w	#$18,d0
0001C5B2                            
0001C5B2                            loc_1939C:
0001C5B2 B068 0038                  		cmp.w	$38(a0),d0
0001C5B6 6D00                       		blt.s	loc_193BE
0001C5B8 317C 0008 003C             		move.w	#8,$3C(a0)
0001C5BE 4A68 0036                  		tst.w	$36(a0)
0001C5C2 6700                       		beq.s	loc_193B4
0001C5C4 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C5CA                            
0001C5CA                            loc_193B4:
0001C5CA 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C5CE 4268 0012                  		clr.w	obVelY(a0)
0001C5D2 6000                       		bra.s	loc_193CC
0001C5D4                            ; ===========================================================================
0001C5D4                            
0001C5D4                            loc_193BE:
0001C5D4 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C5DA 6C00                       		bge.s	loc_193CC
0001C5DC 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C5E2                            
0001C5E2                            loc_193CC:
0001C5E2 6000 FE24                  		bra.w	loc_191F2
0001C5E6                            ; ===========================================================================
0001C5E6                            
0001C5E6                            loc_193D0:
0001C5E6 5368 003C                  		subq.w	#1,$3C(a0)
0001C5EA 6E00                       		bgt.s	loc_19406
0001C5EC 6B00                       		bmi.s	loc_193EE
0001C5EE 70FF                       		moveq	#-1,d0
0001C5F0 3028 0036                  		move.w	$36(a0),d0
0001C5F4 6700                       		beq.s	loc_193E8
0001C5F6 2240                       		movea.l	d0,a1
0001C5F8 137C 000A 0029             		move.b	#$A,$29(a1)
0001C5FE                            
0001C5FE                            loc_193E8:
0001C5FE 4268 0036                  		clr.w	$36(a0)
0001C602 6000                       		bra.s	loc_19406
0001C604                            ; ===========================================================================
0001C604                            
0001C604                            loc_193EE:
0001C604 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C60A 6600                       		bne.s	loc_19406
0001C60C 4228 0029                  		clr.b	$29(a0)
0001C610 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C614 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C61A 6000                       		bra.s	loc_19446
0001C61C                            ; ===========================================================================
0001C61C                            
0001C61C                            loc_19406:
0001C61C 7001                       		moveq	#1,d0
0001C61E 4A68 0036                  		tst.w	$36(a0)
0001C622 6700                       		beq.s	loc_19410
0001C624 7002                       		moveq	#2,d0
0001C626                            
0001C626                            loc_19410:
0001C626 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C62C 6700                       		beq.s	loc_19424
0001C62E 6D00                       		blt.s	loc_1941C
0001C630 4440                       		neg.w	d0
0001C632                            
0001C632                            loc_1941C:
0001C632 4A68 0036                  		tst.w	$36(a0)
0001C636 D168 0038                  		add.w	d0,$38(a0)
0001C63A                            
0001C63A                            loc_19424:
0001C63A 7000                       		moveq	#0,d0
0001C63C 4A68 0036                  		tst.w	$36(a0)
0001C640 6700                       		beq.s	loc_19438
0001C642 7002                       		moveq	#2,d0
0001C644 0828 0000 003D             		btst	#0,$3D(a0)
0001C64A 6700                       		beq.s	loc_19438
0001C64C 4440                       		neg.w	d0
0001C64E                            
0001C64E                            loc_19438:
0001C64E D068 0038                  		add.w	$38(a0),d0
0001C652 3140 000C                  		move.w	d0,obY(a0)
0001C656 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C65C                            
0001C65C                            loc_19446:
0001C65C 6000 FDBA                  		bra.w	loc_19202
0001C660                            
0001C660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C660                            
0001C660                            
0001C660                            Obj75_FindBlocks:
0001C660 4268 0036                  		clr.w	$36(a0)
0001C664 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C668 703E                       		moveq	#$3E,d0
0001C66A 7276                       		moveq	#$76,d1
0001C66C 1428 0034                  		move.b	$34(a0),d2
0001C670                            
0001C670                            Obj75_FindLoop:
0001C670 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C672 6600                       		bne.s	loc_1946A	; if not, branch
0001C674 B429 0028                  		cmp.b	obSubtype(a1),d2
0001C678 6600                       		bne.s	loc_1946A
0001C67A 3149 0036                  		move.w	a1,$36(a0)
0001C67E 6000                       		bra.s	locret_19472
0001C680                            ; ===========================================================================
0001C680                            
0001C680                            loc_1946A:
0001C680 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C684 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C688                            
0001C688                            locret_19472:
0001C688 4E75                       		rts	
0001C68A                            ; End of function Obj75_FindBlocks
0001C68A                            
0001C68A                            ; ===========================================================================
0001C68A                            
0001C68A                            loc_19474:
0001C68A 5368 003C                  		subq.w	#1,$3C(a0)
0001C68E 6B00                       		bmi.s	loc_1947E
0001C690 6000 E3A2                  		bra.w	BossDefeated
0001C694                            ; ===========================================================================
0001C694                            
0001C694                            loc_1947E:
0001C694 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C698 4268 0012                  		clr.w	obVelY(a0)
0001C69C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C6A2 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C6A8 4268 0010                  		clr.w	obVelX(a0)
0001C6AC 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C6B2 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C6B6 6600                       		bne.s	loc_194A8
0001C6B8 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C6BE                            
0001C6BE                            loc_194A8:
0001C6BE 6000 FD58                  		bra.w	loc_19202
0001C6C2                            ; ===========================================================================
0001C6C2                            
0001C6C2                            loc_194AC:
0001C6C2 5268 003C                  		addq.w	#1,$3C(a0)
0001C6C6 6700                       		beq.s	loc_194BC
0001C6C8 6A00                       		bpl.s	loc_194C2
0001C6CA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C6D0 6000                       		bra.s	loc_194EE
0001C6D2                            ; ===========================================================================
0001C6D2                            
0001C6D2                            loc_194BC:
0001C6D2 4268 0012                  		clr.w	obVelY(a0)
0001C6D6 6000                       		bra.s	loc_194EE
0001C6D8                            ; ===========================================================================
0001C6D8                            
0001C6D8                            loc_194C2:
0001C6D8 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C6DE 6500                       		bcs.s	loc_194DA
0001C6E0 6700                       		beq.s	loc_194E0
0001C6E2 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C6E8 6500                       		bcs.s	loc_194EE
0001C6EA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C6EE 6000                       		bra.s	loc_194EE
0001C6F0                            ; ===========================================================================
0001C6F0                            
0001C6F0                            loc_194DA:
0001C6F0 5168 0012                  		subq.w	#8,obVelY(a0)
0001C6F4 6000                       		bra.s	loc_194EE
0001C6F6                            ; ===========================================================================
0001C6F6                            
0001C6F6                            loc_194E0:
0001C6F6 4268 0012                  		clr.w    obVelY(a0)
0001C6FA 4A38 FE2D                          	tst.b     (v_invinc).w
0001C6FE 6600                               	bne.s   @boss_invinc
0001C700                            
0001C700 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C704 6000 0000                          	bra.w      @boss_play
0001C708                            
0001C708                            @boss_invinc:
0001C708 103C 0000                          	move.b #bgm_Invincible,d0
0001C70C                            
0001C70C                            @boss_play:
0001C70C 4EB8 129A                          	jsr PlaySound
0001C710                            
0001C710                            loc_194EE:
0001C710 6000 FCF6                  		bra.w	loc_191F2
0001C714                            ; ===========================================================================
0001C714                            
0001C714                            loc_194F2:
0001C714 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C71A 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C720 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C726 6400                       		bcc.s	loc_1950C
0001C728 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C72C 6000                       		bra.s	loc_19512
0001C72E                            ; ===========================================================================
0001C72E                            
0001C72E                            loc_1950C:
0001C72E 4A28 0001                  		tst.b	obRender(a0)
0001C732 6A00                       		bpl.s	Obj75_ShipDelete
0001C734                            
0001C734                            loc_19512:
0001C734 6100 E340                  		bsr.w	BossMove
0001C738 6000 FCBA                  		bra.w	loc_191DE
0001C73C                            ; ===========================================================================
0001C73C                            
0001C73C                            Obj75_ShipDelete:
0001C73C 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001C742                            ; ===========================================================================
0001C742                            
0001C742                            Obj75_FaceMain:	; Routine 4
0001C742 7201                       		moveq	#1,d1
0001C744 2268 0034                  		movea.l	$34(a0),a1
0001C748 7000                       		moveq	#0,d0
0001C74A 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C74E 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C752 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C756 1141 001C                  		move.b	d1,obAnim(a0)
0001C75A 1010                       		move.b	(a0),d0
0001C75C B011                       		cmp.b	(a1),d0
0001C75E 6600                       		bne.s	Obj75_FaceDelete
0001C760 6000                       		bra.s	loc_195BE
0001C762                            ; ===========================================================================
0001C762                            
0001C762                            Obj75_FaceDelete:
0001C762 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001C768                            ; ===========================================================================
0001C768 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C76C 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C770 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C774                            ; ===========================================================================
0001C774                            
0001C774                            loc_19552:
0001C774 720A                       		moveq	#$A,d1
0001C776 4E75                       		rts	
0001C778                            ; ===========================================================================
0001C778                            
0001C778                            loc_19556:
0001C778 7206                       		moveq	#6,d1
0001C77A 4E75                       		rts	
0001C77C                            ; ===========================================================================
0001C77C                            
0001C77C                            loc_1955A:
0001C77C 7000                       		moveq	#0,d0
0001C77E 1029 0028                  		move.b	obSubtype(a1),d0
0001C782 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C786 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C78A                            ; ===========================================================================
0001C78A 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C78E 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C792                            ; ===========================================================================
0001C792                            
0001C792                            loc_19570:
0001C792 6000                       		bra.s	loc_19574
0001C794                            ; ===========================================================================
0001C794                            
0001C794                            loc_19572:
0001C794 7206                       		moveq	#6,d1
0001C796                            
0001C796                            loc_19574:
0001C796 4A29 0020                  		tst.b	obColType(a1)
0001C79A 6600                       		bne.s	loc_1957E
0001C79C 7205                       		moveq	#5,d1
0001C79E 4E75                       		rts	
0001C7A0                            ; ===========================================================================
0001C7A0                            
0001C7A0                            loc_1957E:
0001C7A0 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C7A6 6500                       		bcs.s	locret_19588
0001C7A8 7204                       		moveq	#4,d1
0001C7AA                            
0001C7AA                            locret_19588:
0001C7AA 4E75                       		rts	
0001C7AC                            ; ===========================================================================
0001C7AC                            
0001C7AC                            Obj75_FlameMain:; Routine 6
0001C7AC 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C7B2 2268 0034                  		movea.l	$34(a0),a1
0001C7B6 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C7BC 6600                       		bne.s	loc_195AA
0001C7BE 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C7C4 4A28 0001                  		tst.b	1(a0)
0001C7C8 6A00                       		bpl.s	Obj75_FlameDelete
0001C7CA 6000                       		bra.s	loc_195B6
0001C7CC                            ; ===========================================================================
0001C7CC                            
0001C7CC                            loc_195AA:
0001C7CC 4A69 0010                  		tst.w	obVelX(a1)
0001C7D0 6700                       		beq.s	loc_195B6
0001C7D2 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C7D8                            
0001C7D8                            loc_195B6:
0001C7D8 6000                       		bra.s	loc_195BE
0001C7DA                            ; ===========================================================================
0001C7DA                            
0001C7DA                            Obj75_FlameDelete:
0001C7DA 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001C7E0                            ; ===========================================================================
0001C7E0                            
0001C7E0                            loc_195BE:
0001C7E0 43F9 0001 AE8A             		lea	(Ani_Eggman).l,a1
0001C7E6 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001C7EC 2268 0034                  		movea.l	$34(a0),a1
0001C7F0 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C7F6 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C7FC                            
0001C7FC                            loc_195DA:
0001C7FC 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C802 7003                       		moveq	#3,d0
0001C804 C028 0022                  		and.b	obStatus(a0),d0
0001C808 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C80E 8128 0001                  		or.b	d0,obRender(a0)
0001C812 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001C818                            ; ===========================================================================
0001C818                            
0001C818                            Obj75_SpikeMain:; Routine 8
0001C818 217C 0001 AFCA 0004        		move.l	#Map_BossItems,obMap(a0)
0001C820 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C826 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C82C 2268 0034                  		movea.l	$34(a0),a1
0001C830 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C836 6600                       		bne.s	loc_1961C
0001C838 4A28 0001                  		tst.b	obRender(a0)
0001C83C 6A00                       		bpl.s	Obj75_SpikeDelete
0001C83E                            
0001C83E                            loc_1961C:
0001C83E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C844 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C84A 3028 003C                  		move.w	$3C(a0),d0
0001C84E 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C854 6600                       		bne.s	loc_19652
0001C856 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C85C 6700                       		beq.s	loc_1964C
0001C85E 4A29 0028                  		tst.b	obSubtype(a1)
0001C862 6600                       		bne.s	loc_19658
0001C864 0C40 0094                  		cmpi.w	#$94,d0
0001C868 6C00                       		bge.s	loc_19658
0001C86A 5E40                       		addq.w	#7,d0
0001C86C 6000                       		bra.s	loc_19658
0001C86E                            ; ===========================================================================
0001C86E                            
0001C86E                            loc_1964C:
0001C86E 4A69 003C                  		tst.w	$3C(a1)
0001C872 6A00                       		bpl.s	loc_19658
0001C874                            
0001C874                            loc_19652:
0001C874 4A40                       		tst.w	d0
0001C876 6F00                       		ble.s	loc_19658
0001C878 5B40                       		subq.w	#5,d0
0001C87A                            
0001C87A                            loc_19658:
0001C87A 3140 003C                  		move.w	d0,$3C(a0)
0001C87E E440                       		asr.w	#2,d0
0001C880 D168 000C                  		add.w	d0,obY(a0)
0001C884 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C88A 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C890 4228 0020                  		clr.b	obColType(a0)
0001C894 2268 0034                  		movea.l	$34(a0),a1
0001C898 4A29 0020                  		tst.b	obColType(a1)
0001C89C 6700                       		beq.s	loc_19688
0001C89E 4A29 0029                  		tst.b	$29(a1)
0001C8A2 6600                       		bne.s	loc_19688
0001C8A4 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C8AA                            
0001C8AA                            loc_19688:
0001C8AA 6000 FF50                  		bra.w	loc_195DA
0001C8AE                            ; ===========================================================================
0001C8AE                            
0001C8AE                            Obj75_SpikeDelete:
0001C8AE 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001C8AE 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001C8B4                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C8B4                            ; ---------------------------------------------------------------------------
0001C8B4                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C8B4                            ; ---------------------------------------------------------------------------
0001C8B4                            
0001C8B4                            BossBlock:
0001C8B4 7000                       		moveq	#0,d0
0001C8B6 1028 0024                  		move.b	obRoutine(a0),d0
0001C8BA 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C8BE 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C8C2                            ; ===========================================================================
0001C8C2 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C8C4 0000                       		dc.w Obj76_Action-Obj76_Index
0001C8C6 0000                       		dc.w loc_19762-Obj76_Index
0001C8C8                            ; ===========================================================================
0001C8C8                            
0001C8C8                            Obj76_Main:	; Routine 0
0001C8C8 7800                       		moveq	#0,d4
0001C8CA 3A3C 2C10                  		move.w	#$2C10,d5
0001C8CE 7C09                       		moveq	#9,d6
0001C8D0 43D0                       		lea	(a0),a1
0001C8D2 6000                       		bra.s	Obj76_MakeBlock
0001C8D4                            ; ===========================================================================
0001C8D4                            
0001C8D4                            Obj76_Loop:
0001C8D4 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
0001C8DA 6600                       		bne.s	Obj76_ExitLoop
0001C8DC                            
0001C8DC                            Obj76_MakeBlock:
0001C8DC 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C8E0 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C8E8 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C8EE 137C 0004 0001             		move.b	#4,obRender(a1)
0001C8F4 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C8FA 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C900 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C906 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C90A 337C 0582 000C             		move.w	#$582,obY(a1)
0001C910 3344 0028                  		move.w	d4,obSubtype(a1)
0001C914 0644 0101                  		addi.w	#$101,d4
0001C918 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C91C 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C920 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C924                            
0001C924                            Obj76_ExitLoop:
0001C924 4E75                       		rts	
0001C926                            ; ===========================================================================
0001C926                            
0001C926                            Obj76_Action:	; Routine 2
0001C926 1028 0029                  		move.b	$29(a0),d0
0001C92A B028 0028                  		cmp.b	obSubtype(a0),d0
0001C92E 6700                       		beq.s	Obj76_Solid
0001C930 4A00                       		tst.b	d0
0001C932 6B00                       		bmi.s	loc_19718
0001C934                            
0001C934                            loc_19712:
0001C934 6100 0000                  		bsr.w	Obj76_Break
0001C938 6000                       		bra.s	Obj76_Display
0001C93A                            ; ===========================================================================
0001C93A                            
0001C93A                            loc_19718:
0001C93A 2268 0034                  		movea.l	$34(a0),a1
0001C93E 4A29 0021                  		tst.b	obColProp(a1)
0001C942 67F0                       		beq.s	loc_19712
0001C944 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C94A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C950 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C956 B2C8                       		cmpa.w	a0,a1
0001C958 6500                       		bcs.s	Obj76_Display
0001C95A 3029 0012                  		move.w	obVelY(a1),d0
0001C95E 48C0                       		ext.l	d0
0001C960 E080                       		asr.l	#8,d0
0001C962 D168 000C                  		add.w	d0,obY(a0)
0001C966 6000                       		bra.s	Obj76_Display
0001C968                            ; ===========================================================================
0001C968                            
0001C968                            Obj76_Solid:
0001C968 323C 001B                  		move.w	#$1B,d1
0001C96C 343C 0010                  		move.w	#$10,d2
0001C970 363C 0011                  		move.w	#$11,d3
0001C974 3828 0008                  		move.w	obX(a0),d4
0001C978 4EB9 0001 1E44             		jsr	(SolidObject).l
0001C97E                            
0001C97E                            Obj76_Display:
0001C97E 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001C984                            ; ===========================================================================
0001C984                            
0001C984                            loc_19762:	; Routine 4
0001C984 4A28 0001                  		tst.b	obRender(a0)
0001C988 6A00                       		bpl.s	Obj76_Delete
0001C98A 4EB9 0000 F9D6             		jsr	(ObjectFall).l
0001C990 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001C996                            ; ===========================================================================
0001C996                            
0001C996                            Obj76_Delete:
0001C996 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001C99C                            
0001C99C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C99C                            
0001C99C                            
0001C99C                            Obj76_Break:
0001C99C 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C9A0 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C9A4 7801                       		moveq	#1,d4
0001C9A6 7203                       		moveq	#3,d1
0001C9A8 7438                       		moveq	#$38,d2
0001C9AA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C9AE 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C9B4 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C9BA 43D0                       		lea	(a0),a1
0001C9BC 6000                       		bra.s	Obj76_MakeFrag
0001C9BE                            ; ===========================================================================
0001C9BE                            
0001C9BE                            Obj76_LoopFrag:
0001C9BE 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001C9C4 6600                       		bne.s	loc_197D4
0001C9C6                            
0001C9C6                            Obj76_MakeFrag:
0001C9C6 45D0                       		lea	(a0),a2
0001C9C8 47D1                       		lea	(a1),a3
0001C9CA 7603                       		moveq	#3,d3
0001C9CC                            
0001C9CC                            loc_197AA:
0001C9CC 26DA                       		move.l	(a2)+,(a3)+
0001C9CE 26DA                       		move.l	(a2)+,(a3)+
0001C9D0 26DA                       		move.l	(a2)+,(a3)+
0001C9D2 26DA                       		move.l	(a2)+,(a3)+
0001C9D4 51CB FFF6                  		dbf	d3,loc_197AA
0001C9D8                            
0001C9D8 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C9DC 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C9E0 361D                       		move.w	(a5)+,d3
0001C9E2 D769 0008                  		add.w	d3,obX(a1)
0001C9E6 361D                       		move.w	(a5)+,d3
0001C9E8 D769 000C                  		add.w	d3,obY(a1)
0001C9EC 1344 001A                  		move.b	d4,obFrame(a1)
0001C9F0 5244                       		addq.w	#1,d4
0001C9F2 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C9F6                            
0001C9F6                            loc_197D4:
0001CA00                            ; End of function Obj76_Break
0001CA00                            
0001CA00                            ; ===========================================================================
0001CA00 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001CA04 0180 FE00                  		dc.w $180, -$200
0001CA08 FF00 FF00                  		dc.w -$100, -$100
0001CA0C 0100 FF00                  		dc.w $100, -$100
0001CA10 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001CA14 0010 0000                  		dc.w $10, 0
0001CA18 0000 0010                  		dc.w 0,	$10
0001CA1C 0010 0010                  		dc.w $10, $10
0001CA1C 0010 0010                  		dc.w $10, $10
0001CA20                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001CA20                            ; ---------------------------------------------------------------------------
0001CA20                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001CA20                            ; ---------------------------------------------------------------------------
0001CA20                            Map_BossBlock_internal:
0001CA20 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001CA22 0000                       		dc.w @topleft-Map_BossBlock_internal
0001CA24 0000                       		dc.w @topright-Map_BossBlock_internal
0001CA26 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001CA28 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001CA2A 02                         @wholeblock:	dc.b 2
0001CA2B F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001CA30 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001CA35 00                         		dc.b 0
0001CA36 01                         @topleft:	dc.b 1
0001CA37 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001CA3C 01                         @topright:	dc.b 1
0001CA3D F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001CA42 01                         @bottomleft:	dc.b 1
0001CA43 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001CA48 01                         @bottomright:	dc.b 1
0001CA49 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001CA4E                            		even
0001CA4E                            		even
0001CA4E                            
0001CA4E                            loc_1982C:
0001CA4E 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001CA54                            
0001CA54                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001CA54                            ; ---------------------------------------------------------------------------
0001CA54                            ; Object 82 - Eggman (SBZ2)
0001CA54                            ; ---------------------------------------------------------------------------
0001CA54                            
0001CA54                            ScrapEggman:
0001CA54 7000                       		moveq	#0,d0
0001CA56 1028 0024                  		move.b	obRoutine(a0),d0
0001CA5A 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001CA5E 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001CA62                            ; ===========================================================================
0001CA62 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001CA64 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001CA66 0000                       		dc.w SEgg_Switch-SEgg_Index
0001CA68                            
0001CA68 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001CA6B 0400 03                    		dc.b 4,	0, 3
0001CA6E                            ; ===========================================================================
0001CA6E                            
0001CA6E                            SEgg_Main:	; Routine 0
0001CA6E 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001CA72 317C 1C60 0008             		move.w	#$1C60,obX(a0)
0001CA78 317C 02A4 000C             		move.w	#$2A4,obY(a0)
0001CA7E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CA84 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001CA8A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CA90 4228 0025                  		clr.b	ob2ndRout(a0)
0001CA94 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001CA98 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001CA9C 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001CAA0 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001CAA8 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001CAAE 117C 0004 0001             		move.b	#4,obRender(a0)
0001CAB4 08E8 0007 0001             		bset	#7,obRender(a0)
0001CABA 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001CAC0 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001CAC6 6600                       		bne.s	SEgg_Eggman
0001CAC8 2348 0034                  		move.l	a0,$34(a1)
0001CACC 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001CAD0 337C 1C30 0008             		move.w	#$1C30,obX(a1)
0001CAD6 337C 02BC 000C             		move.w	#$2BC,obY(a1)
0001CADC 4228 0025                  		clr.b	ob2ndRout(a0)
0001CAE0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CAE4 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CAE8 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001CAEC 237C 0000 E266 0004        		move.l	#Map_But,obMap(a1)
0001CAF4 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001CAFA 137C 0004 0001             		move.b	#4,obRender(a1)
0001CB00 08E9 0007 0001             		bset	#7,obRender(a1)
0001CB06 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CB0C 137C 0000 001A             		move.b	#0,obFrame(a1)
0001CB12                            
0001CB12                            SEgg_Eggman:	; Routine 2
0001CB12 7000                       		moveq	#0,d0
0001CB14 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CB18 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001CB1C 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001CB20 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001CB24 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001CB2A 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001CB30                            ; ===========================================================================
0001CB30 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001CB32 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001CB34 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001CB36 0000                       		dc.w loc_19934-SEgg_EggIndex
0001CB38                            ; ===========================================================================
0001CB38                            
0001CB38                            SEgg_ChkSonic:
0001CB38 3028 0008                  		move.w	obX(a0),d0
0001CB3C 9078 D008                  		sub.w	(v_player+obX).w,d0
0001CB40 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001CB44 6400                       		bcc.s	loc_19934	; if not, branch
0001CB46 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CB4A 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001CB50 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CB56                            
0001CB56                            loc_19934:
0001CB56 4EF9 0000 FA0E             		jmp	(SpeedToPos).l
0001CB5C                            ; ===========================================================================
0001CB5C                            
0001CB5C                            SEgg_PreLeap:
0001CB5C 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001CB60 6600                       		bne.s	loc_19954	; if time remains, branch
0001CB62 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CB66 117C 0002 001C             		move.b	#2,obAnim(a0)
0001CB6C 5868 000C                  		addq.w	#4,obY(a0)
0001CB70 317C 000F 003C             		move.w	#15,$3C(a0)
0001CB76                            
0001CB76                            loc_19954:
0001CB76 60DE                       		bra.s	loc_19934
0001CB78                            ; ===========================================================================
0001CB78                            
0001CB78                            SEgg_Leap:
0001CB78 5368 003C                  		subq.w	#1,$3C(a0)
0001CB7C 6E00                       		bgt.s	loc_199D0
0001CB7E 6600                       		bne.s	loc_1996A
0001CB80 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001CB86 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001CB8C                            
0001CB8C                            loc_1996A:
0001CB8C 0C68 1C32 0008             		cmpi.w	#$1C32,obX(a0)
0001CB92 6E00                       		bgt.s	loc_19976
0001CB94 4268 0010                  		clr.w	obVelX(a0)
0001CB98                            
0001CB98                            loc_19976:
0001CB98 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001CB9E 4A68 0012                  		tst.w	obVelY(a0)
0001CBA2 6B00                       		bmi.s	SEgg_FindBlocks
0001CBA4 0C68 0295 000C             		cmpi.w	#$295,obY(a0)
0001CBAA 6500                       		bcs.s	SEgg_FindBlocks
0001CBAC 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001CBB2 0C68 029B 000C             		cmpi.w	#$29B,obY(a0)
0001CBB8 6500                       		bcs.s	SEgg_FindBlocks
0001CBBA 317C 029B 000C             		move.w	#$29B,obY(a0)
0001CBC0 4268 0012                  		clr.w	obVelY(a0)
0001CBC4                            
0001CBC4                            SEgg_FindBlocks:
0001CBC4 3028 0010                  		move.w	obVelX(a0),d0
0001CBC8 8068 0012                  		or.w	obVelY(a0),d0
0001CBCC 6600                       		bne.s	loc_199D0
0001CBCE 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001CBD2 703E                       		moveq	#$3E,d0
0001CBD4 7240                       		moveq	#$40,d1
0001CBD6                            
0001CBD6                            SEgg_FindLoop:	
0001CBD6 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001CBD8 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001CBDC 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001CBE0                            
0001CBE0 6600                       		bne.s	loc_199D0
0001CBE2 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001CBE8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CBEC 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CBF2                            
0001CBF2                            loc_199D0:
0001CBF2 6000 FF62                  		bra.w	loc_19934
0001CBF6                            ; ===========================================================================
0001CBF6                            
0001CBF6                            SEgg_Switch:	; Routine 4
0001CBF6 7000                       		moveq	#0,d0
0001CBF8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CBFC 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001CC00 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001CC04                            ; ===========================================================================
0001CC04 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001CC06 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001CC08                            ; ===========================================================================
0001CC08                            
0001CC08                            loc_199E6:
0001CC08 2268 0034                  		movea.l	$34(a0),a1
0001CC0C 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001CC12 6600                       		bne.s	SEgg_SwDisplay
0001CC14 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CC1A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CC1E                            
0001CC1E                            SEgg_SwDisplay:
0001CC1E 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001CC1E 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001CC24                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001CC24                            ; ---------------------------------------------------------------------------
0001CC24                            ; Animation script - Eggman (SBZ2)
0001CC24                            ; ---------------------------------------------------------------------------
0001CC24 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001CC26 0000                       		dc.w @laugh-Ani_SEgg
0001CC28 0000                       		dc.w @jump1-Ani_SEgg
0001CC2A 0000                       		dc.w @intube-Ani_SEgg
0001CC2C 0000                       		dc.w @running-Ani_SEgg
0001CC2E 0000                       		dc.w @jump2-Ani_SEgg
0001CC30 0000                       		dc.w @starjump-Ani_SEgg
0001CC32 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001CC36 00                         		even
0001CC36 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001CC3A 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001CC42 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001CC46 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001CC4C 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001CC52 00                         		even
0001CC52 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001CC56 00                         		even
0001CC56 00                         		even
0001CC56                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001CC56                            ; --------------------------------------------------------------------------------
0001CC56                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001CC56                            ; --------------------------------------------------------------------------------
0001CC56                            
0001CC56                            SME_y00JM:	
0001CC56 0000 0000                  		dc.w SME_y00JM_16-SME_y00JM, SME_y00JM_26-SME_y00JM	
0001CC5A 0000 0000                  		dc.w SME_y00JM_4A-SME_y00JM, SME_y00JM_6E-SME_y00JM	
0001CC5E 0000 0000                  		dc.w SME_y00JM_83-SME_y00JM, SME_y00JM_A7-SME_y00JM	
0001CC62 0000 0000                  		dc.w SME_y00JM_BC-SME_y00JM, SME_y00JM_E0-SME_y00JM	
0001CC66 0000 0000                  		dc.w SME_y00JM_FA-SME_y00JM, SME_y00JM_119-SME_y00JM	
0001CC6A 0000                       		dc.w SME_y00JM_142-SME_y00JM	
0001CC6C 03                         SME_y00JM_16:	dc.b 3	
0001CC6D FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001CC72 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CC77 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CC7C 07                         SME_y00JM_26:	dc.b 7	
0001CC7D E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0	
0001CC82 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CC87 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001CC8C F800 0002 F0               		dc.b $F8, 0, 0, 2, $F0	
0001CC91 F800 0005 F8               		dc.b $F8, 0, 0, 5, $F8	
0001CC96 F800 0008 00               		dc.b $F8, 0, 0, 8, 0	
0001CC9B F800 000B 08               		dc.b $F8, 0, 0, $B, 8	
0001CCA0 07                         SME_y00JM_4A:	dc.b 7	
0001CCA1 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0	
0001CCA6 FD00 008F E8               		dc.b $FD, 0, 0, $8F, $E8	
0001CCAB F900 0002 F0               		dc.b $F9, 0, 0, 2, $F0	
0001CCB0 F900 0005 F8               		dc.b $F9, 0, 0, 5, $F8	
0001CCB5 F900 0008 00               		dc.b $F9, 0, 0, 8, 0	
0001CCBA F900 000B 08               		dc.b $F9, 0, 0, $B, 8	
0001CCBF 010F 007F F0               		dc.b 1, $F, 0, $7F, $F0	
0001CCC4 04                         SME_y00JM_6E:	dc.b 4	
0001CCC5 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0	
0001CCCA F504 0830 10               		dc.b $F5, 4, 8, $30, $10	
0001CCCF 0809 084E F0               		dc.b 8, 9, 8, $4E, $F0	
0001CCD4 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0	
0001CCD9 07                         SME_y00JM_83:	dc.b 7	
0001CCDA F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CCDF F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CCE4 0806 083E F8               		dc.b 8, 6, 8, $3E, $F8	
0001CCE9 E800 0000 F0               		dc.b $E8, 0, 0, 0, $F0	
0001CCEE E800 0003 F8               		dc.b $E8, 0, 0, 3, $F8	
0001CCF3 E800 0006 00               		dc.b $E8, 0, 0, 6, 0	
0001CCF8 E800 0009 08               		dc.b $E8, 0, 0, 9, 8	
0001CCFD 04                         SME_y00JM_A7:	dc.b 4	
0001CCFE E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CD03 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CD08 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CD0D 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CD12 07                         SME_y00JM_BC:	dc.b 7	
0001CD13 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CD18 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CD1D 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CD22 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CD27 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CD2C F104 0854 10               		dc.b $F1, 4, 8, $54, $10	
0001CD31 F104 0054 E0               		dc.b $F1, 4, 0, $54, $E0	
0001CD36 05                         SME_y00JM_E0:	dc.b 5	
0001CD37 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CD3C F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CD41 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CD46 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CD4B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CD50 06                         SME_y00JM_FA:	dc.b 6	
0001CD51 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0	
0001CD56 EF04 0830 10               		dc.b $EF, 4, 8, $30, $10	
0001CD5B 0905 0844 00               		dc.b 9, 5, 8, $44, 0	
0001CD60 0301 0848 F8               		dc.b 3, 1, 8, $48, $F8	
0001CD65 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8	
0001CD6A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001CD6F 08                         SME_y00JM_119:	dc.b 8	
0001CD70 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CD75 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CD7A E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CD7F 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CD84 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0, $F0	
0001CD89 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0, $F0	
0001CD8E 000D 3EF0 F0               		dc.b 0, $D, $3E, $F0, $F0	
0001CD93 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0, $F0	
0001CD98 03                         SME_y00JM_142:	dc.b 3	
0001CD99 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4	
0001CD9E F408 005E 04               		dc.b $F4, 8, 0, $5E, 4	
0001CDA3 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC	
0001CDA8                            		even
0001CDA8                            		even
0001CDA8                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CDA8                            ; ---------------------------------------------------------------------------
0001CDA8                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CDA8                            ; ---------------------------------------------------------------------------
0001CDA8                            
0001CDA8                            FalseFloor:
0001CDA8 7000                       		moveq	#0,d0
0001CDAA 1028 0024                  		move.b	obRoutine(a0),d0
0001CDAE 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CDB2 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CDB6                            ; ===========================================================================
0001CDB6 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CDB8 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CDBA 0000                       		dc.w loc_19C36-FFloor_Index
0001CDBC 0000                       		dc.w loc_19C62-FFloor_Index
0001CDBE 0000                       		dc.w loc_19C72-FFloor_Index
0001CDC0 0000                       		dc.w loc_19C80-FFloor_Index
0001CDC2                            ; ===========================================================================
0001CDC2                            
0001CDC2                            FFloor_Main:	; Routine 0
0001CDC2 317C 1B80 0008             		move.w	#$1B80,obX(a0)
0001CDC8 317C 02D0 000C             		move.w	#$2D0,obY(a0)
0001CDCE 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CDD4 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CDDA 117C 0004 0001             		move.b	#4,obRender(a0)
0001CDE0 08E8 0007 0001             		bset	#7,obRender(a0)
0001CDE6 7800                       		moveq	#0,d4
0001CDE8 3A3C 1B10                  		move.w	#$1B10,d5
0001CDEC 7C07                       		moveq	#7,d6
0001CDEE 45E8 0030                  		lea	$30(a0),a2
0001CDF2                            
0001CDF2                            FFloor_MakeBlock:
0001CDF2 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
0001CDF8 6600                       		bne.s	FFloor_ExitMake
0001CDFA 34C9                       		move.w	a1,(a2)+
0001CDFC 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CE00 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CE08 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CE0E 137C 0004 0001             		move.b	#4,obRender(a1)
0001CE14 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CE1A 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CE20 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CE26 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CE2A 337C 02D0 000C             		move.w	#$2D0,obY(a1)
0001CE30 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CE34 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CE3A 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CE3E                            
0001CE3E                            FFloor_ExitMake:
0001CE3E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CE42 4E75                       		rts	
0001CE44                            ; ===========================================================================
0001CE44                            
0001CE44                            FFloor_ChkBreak:; Routine 2
0001CE44 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CE4A 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CE4C 4228 001A                  		clr.b	obFrame(a0)
0001CE50 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CE54                            
0001CE54                            FFloor_Solid:
0001CE54 7000                       		moveq	#0,d0
0001CE56 1028 001A                  		move.b	obFrame(a0),d0
0001CE5A 4400                       		neg.b	d0
0001CE5C 4880                       		ext.w	d0
0001CE5E 5040                       		addq.w	#8,d0
0001CE60 E940                       		asl.w	#4,d0
0001CE62 383C 1C00                  		move.w	#$1C00,d4
0001CE66 9840                       		sub.w	d0,d4
0001CE68 1140 0014                  		move.b	d0,obActWid(a0)
0001CE6C 3144 0008                  		move.w	d4,obX(a0)
0001CE70 720B                       		moveq	#$B,d1
0001CE72 D240                       		add.w	d0,d1
0001CE74 7410                       		moveq	#$10,d2
0001CE76 7611                       		moveq	#$11,d3
0001CE78 4EF9 0001 1E44             		jmp	(SolidObject).l
0001CE7E                            ; ===========================================================================
0001CE7E                            
0001CE7E                            loc_19C36:	; Routine 4
0001CE7E 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CE84 6400                       		bcc.s	FFloor_Solid2
0001CE86 70FF                       		moveq	#-1,d0
0001CE88 1028 001A                  		move.b	obFrame(a0),d0
0001CE8C 4880                       		ext.w	d0
0001CE8E D040                       		add.w	d0,d0
0001CE90 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CE94 2240                       		movea.l	d0,a1
0001CE96 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CE9C 5228 001A                  		addq.b	#1,obFrame(a0)
0001CEA0 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CEA6 6700                       		beq.s	loc_19C62
0001CEA8                            
0001CEA8                            FFloor_Solid2:
0001CEA8 60AA                       		bra.s	FFloor_Solid
0001CEAA                            ; ===========================================================================
0001CEAA                            
0001CEAA                            loc_19C62:	; Routine 6
0001CEAA 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CEB0 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CEB6 6000 FB96                  		bra.w	loc_1982C
0001CEBA                            ; ===========================================================================
0001CEBA                            
0001CEBA                            loc_19C72:	; Routine 8
0001CEBA 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CEC0 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CEC2 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001CEC8                            ; ===========================================================================
0001CEC8                            
0001CEC8                            loc_19C80:	; Routine $A
0001CEC8 4A28 0001                  		tst.b	obRender(a0)
0001CECC 6A00 FB80                  		bpl.w	loc_1982C
0001CED0 4EB9 0000 F9D6             		jsr	(ObjectFall).l
0001CED6 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001CEDC                            ; ===========================================================================
0001CEDC                            
0001CEDC                            FFloor_Break:
0001CEDC 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CEE0 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CEE4 7801                       		moveq	#1,d4
0001CEE6 7203                       		moveq	#3,d1
0001CEE8 7438                       		moveq	#$38,d2
0001CEEA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CEEE 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CEF4 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CEFA 43D0                       		lea	(a0),a1
0001CEFC 6000                       		bra.s	FFloor_MakeFrag
0001CEFE                            ; ===========================================================================
0001CEFE                            
0001CEFE                            FFloor_LoopFrag:
0001CEFE 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001CF04 6600                       		bne.s	FFloor_BreakSnd
0001CF06                            
0001CF06                            FFloor_MakeFrag:
0001CF06 45D0                       		lea	(a0),a2
0001CF08 47D1                       		lea	(a1),a3
0001CF0A 7603                       		moveq	#3,d3
0001CF0C                            
0001CF0C                            loc_19CC4:
0001CF0C 26DA                       		move.l	(a2)+,(a3)+
0001CF0E 26DA                       		move.l	(a2)+,(a3)+
0001CF10 26DA                       		move.l	(a2)+,(a3)+
0001CF12 26DA                       		move.l	(a2)+,(a3)+
0001CF14 51CB FFF6                  		dbf	d3,loc_19CC4
0001CF18                            
0001CF18 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CF1C 361D                       		move.w	(a5)+,d3
0001CF1E D769 0008                  		add.w	d3,obX(a1)
0001CF22 361D                       		move.w	(a5)+,d3
0001CF24 D769 000C                  		add.w	d3,obY(a1)
0001CF28 1344 001A                  		move.b	d4,obFrame(a1)
0001CF2C 5244                       		addq.w	#1,d4
0001CF2E 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CF32                            
0001CF32                            FFloor_BreakSnd:
0001CF3C 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001CF42                            ; ===========================================================================
0001CF42 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CF46 0120 00C0                  		dc.w $120, $C0
0001CF4A FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CF4E 0010 0000                  		dc.w $10, 0
0001CF52 0000 0010                  		dc.w 0,	$10
0001CF56 0010 0010                  		dc.w $10, $10
0001CF56 0010 0010                  		dc.w $10, $10
0001CF5A                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CF5A                            ; ---------------------------------------------------------------------------
0001CF5A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CF5A                            ; ---------------------------------------------------------------------------
0001CF5A                            Map_FFloor_internal:
0001CF5A 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CF5C 0000                       		dc.w @topleft-Map_FFloor_internal
0001CF5E 0000                       		dc.w @topright-Map_FFloor_internal
0001CF60 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CF62 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CF64 01                         @wholeblock:	dc.b 1
0001CF65 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CF6A 02                         @topleft:	dc.b 2
0001CF6B F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CF70 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CF75 00                         		dc.b 0
0001CF76 02                         @topright:	dc.b 2
0001CF77 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CF7C F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CF81 00                         		dc.b 0
0001CF82 02                         @bottomleft:	dc.b 2
0001CF83 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CF88 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CF8D 00                         		dc.b 0
0001CF8E 02                         @bottomright:	dc.b 2
0001CF8F F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CF94 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CF9A 00                         		even
0001CF9A 00                         		even
0001CF9A                            		include	"_incObj\85 Boss - Final.asm"
0001CF9A                            ; ---------------------------------------------------------------------------
0001CF9A                            ; Object 85 - Eggman (FZ)
0001CF9A                            ; ---------------------------------------------------------------------------
0001CF9A                            
0001CF9A                            Obj85_Delete:
0001CF9A 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001CFA0                            ; ===========================================================================
0001CFA0                            
0001CFA0                            BossFinal:
0001CFA0 7000                       		moveq	#0,d0
0001CFA2 1028 0024                  		move.b	obRoutine(a0),d0
0001CFA6 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CFAA 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CFAE                            ; ===========================================================================
0001CFAE 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CFB0 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CFB2 0000                       		dc.w loc_1A38E-Obj85_Index
0001CFB4 0000                       		dc.w loc_1A346-Obj85_Index
0001CFB6 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CFB8 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CFBA 0000                       		dc.w loc_1A264-Obj85_Index
0001CFBC                            
0001CFBC 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CFC2 0001 CC56                  		dc.l Map_SEgg		; mappings pointer
0001CFC6 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CFCC 0000 0000                  		dc.l Map_EggCyl
0001CFD0 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CFD6 0000 0000                  		dc.l Map_FZLegs
0001CFDA 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CFE0 0001 CC56                  		dc.l Map_SEgg
0001CFE4 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CFEA 0001 AEDA                  		dc.l Map_Eggman
0001CFEE 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CFF4 0001 AEDA                  		dc.l Map_Eggman
0001CFF8                            
0001CFF8                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CFF8 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001CFFE 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001D004 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001D00A 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001D010 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001D016 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001D01C                            ; ===========================================================================
0001D01C                            
0001D01C                            Obj85_Main:	; Routine 0
0001D01C 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001D020 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001D024 2248                       		movea.l	a0,a1
0001D026 7205                       		moveq	#5,d1
0001D028 6000                       		bra.s	Obj85_LoadBoss
0001D02A                            ; ===========================================================================
0001D02A                            
0001D02A                            Obj85_Loop:
0001D02A 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001D030 6600                       		bne.s	loc_19E20
0001D032                            
0001D032                            Obj85_LoadBoss:
0001D032 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001D036 335A 0008                  		move.w	(a2)+,obX(a1)
0001D03A 335A 000C                  		move.w	(a2)+,obY(a1)
0001D03E 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001D042 235A 0004                  		move.l	(a2)+,obMap(a1)
0001D046 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001D04A 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001D04E 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001D052 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001D056 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001D05A 137C 0004 0001             		move.b	#4,obRender(a1)
0001D060 08E8 0007 0001             		bset	#7,obRender(a0)
0001D066 2348 0034                  		move.l	a0,$34(a1)
0001D06A 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001D06E                            
0001D06E                            loc_19E20:
0001D06E 45E8 0036                  		lea	$36(a0),a2
0001D072 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
0001D078 6600                       		bne.s	loc_19E5A
0001D07A 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001D07E 3489                       		move.w	a1,(a2)
0001D080 2348 0034                  		move.l	a0,$34(a1)
0001D084 45E8 0038                  		lea	$38(a0),a2
0001D088 7400                       		moveq	#0,d2
0001D08A 7203                       		moveq	#3,d1
0001D08C                            
0001D08C                            loc_19E3E:
0001D08C 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001D092 6600                       		bne.s	loc_19E5A
0001D094 34C9                       		move.w	a1,(a2)+
0001D096 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001D09A 2348 0034                  		move.l	a0,$34(a1)
0001D09E 1342 0028                  		move.b	d2,obSubtype(a1)
0001D0A2 5442                       		addq.w	#2,d2
0001D0A4 51C9 FFE6                  		dbf	d1,loc_19E3E
0001D0A8                            
0001D0A8                            loc_19E5A:
0001D0A8 317C 0000 0034             		move.w	#0,$34(a0)
0001D0AE 117C 0004 0021             		move.b	#4,obColProp(a0) ; set number of hits to 8
0001D0B4 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D0BA                            
0001D0BA                            Obj85_Eggman:	; Routine 2
0001D0BA 7000                       		moveq	#0,d0
0001D0BC 1028 0034                  		move.b	$34(a0),d0
0001D0C0 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001D0C4 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001D0C8 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001D0CE                            ; ===========================================================================
0001D0CE 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001D0D2 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001D0D6 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001D0DA 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001D0DE                            ; ===========================================================================
0001D0DE                            
0001D0DE                            loc_19E90:
0001D0DE 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001D0E2 6600                       		bne.s	loc_19EA2
0001D0E4 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001D0EA 6500                       		bcs.s	loc_19EA2
0001D0EC 5428 0034                  		addq.b	#2,$34(a0)
0001D0F0                            
0001D0F0                            loc_19EA2:
0001D0F0 52B8 F636                  		addq.l	#1,(v_random).w
0001D0F4 4E75                       		rts	
0001D0F6                            ; ===========================================================================
0001D0F6                            
0001D0F6                            loc_19EA8:
0001D0F6 4A68 0030                  		tst.w	$30(a0)
0001D0FA 6A00                       		bpl.s	loc_19F10
0001D0FC 4268 0030                  		clr.w	$30(a0)
0001D100 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001D106 0240 000C                  		andi.w	#$C,d0
0001D10A 3200                       		move.w	d0,d1
0001D10C 5441                       		addq.w	#2,d1
0001D10E 4A80                       		tst.l	d0
0001D110 6A00                       		bpl.s	loc_19EC6
0001D112 C340                       		exg	d1,d0
0001D114                            
0001D114                            loc_19EC6:
0001D114 43FA 0000                  		lea	word_19FD6(pc),a1
0001D118 3031 0000                  		move.w	(a1,d0.w),d0
0001D11C 3231 1000                  		move.w	(a1,d1.w),d1
0001D120 3140 0030                  		move.w	d0,$30(a0)
0001D124 74FF                       		moveq	#-1,d2
0001D126 3430 0038                  		move.w	$38(a0,d0.w),d2
0001D12A 2242                       		movea.l	d2,a1
0001D12C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D132 337C FFFF 0030             		move.w	#-1,$30(a1)
0001D138 3430 1038                  		move.w	$38(a0,d1.w),d2
0001D13C 2242                       		movea.l	d2,a1
0001D13E 137C 0001 0029             		move.b	#1,$29(a1)
0001D144 337C 0000 0030             		move.w	#0,$30(a1)
0001D14A 317C 0001 0032             		move.w	#1,$32(a0)
0001D150 4228 0035                  		clr.b	$35(a0)
0001D15E                            
0001D15E                            loc_19F10:
0001D15E 4A68 0032                  		tst.w	$32(a0)
0001D162 6B00 0000                  		bmi.w	loc_19FA6
0001D166 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D16C 3038 D008                  		move.w	(v_player+obX).w,d0
0001D170 9068 0008                  		sub.w	obX(a0),d0
0001D174 6500                       		bcs.s	loc_19F2E
0001D176 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D17C                            
0001D17C                            loc_19F2E:
0001D17C 323C 002B                  		move.w	#$2B,d1
0001D180 343C 0014                  		move.w	#$14,d2
0001D184 363C 0014                  		move.w	#$14,d3
0001D188 3828 0008                  		move.w	obX(a0),d4
0001D18C 4EB9 0001 1E44             		jsr	(SolidObject).l
0001D192 4A44                       		tst.w	d4
0001D194 6E00                       		bgt.s	loc_19F50
0001D196                            
0001D196                            loc_19F48:
0001D196 4A28 0035                  		tst.b	$35(a0)
0001D19A 6600                       		bne.s	loc_19F88
0001D19C 6000                       		bra.s	loc_19F96
0001D19E                            ; ===========================================================================
0001D19E                            
0001D19E                            loc_19F50:
0001D19E 5E78 F636                  		addq.w	#7,(v_random).w
0001D1A2 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001D1A8 66EC                       		bne.s	loc_19F48
0001D1AA 303C 0300                  		move.w	#$300,d0
0001D1AE 0828 0000 0022             		btst	#0,obStatus(a0)
0001D1B4 6600                       		bne.s	loc_19F6A
0001D1B6 4440                       		neg.w	d0
0001D1B8                            
0001D1B8                            loc_19F6A:
0001D1B8 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001D1BC 4A28 0035                  		tst.b	$35(a0)
0001D1C0 6600                       		bne.s	loc_19F88
0001D1C2 5328 0021                  		subq.b	#1,obColProp(a0)
0001D1C6 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001D1CC 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D1D2                            
0001D1D2                            loc_19F88:
0001D1D2 5328 0035                  		subq.b	#1,$35(a0)
0001D1D6 6700                       		beq.s	loc_19F96
0001D1D8 117C 0003 001C             		move.b	#3,obAnim(a0)
0001D1DE 6000                       		bra.s	loc_19F9C
0001D1E0                            ; ===========================================================================
0001D1E0                            
0001D1E0                            loc_19F96:
0001D1E0 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D1E6                            
0001D1E6                            loc_19F9C:
0001D1E6 43FA FA3C                  		lea	Ani_SEgg(pc),a1
0001D1EA 4EF9 0000 CAE4             		jmp	(AnimateSprite).l
0001D1F0                            ; ===========================================================================
0001D1F0                            
0001D1F0                            loc_19FA6:
0001D1F0 4A28 0021                  		tst.b	obColProp(a0)
0001D1F4 6700                       		beq.s	loc_19FBC
0001D1F6 5428 0034                  		addq.b	#2,$34(a0)
0001D1FA 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D200 4268 0032                  		clr.w	$32(a0)
0001D204 4E75                       		rts	
0001D206                            ; ===========================================================================
0001D206                            
0001D206                            loc_19FBC:
0001D206 7064                       			moveq	#100,d0
0001D208 6100 0000                  			bsr.w	AddPoints
0001D20C 117C 0006 0034             		move.b	#6,$34(a0)
0001D212 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001D218 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D21E 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001D224 4E75                       		rts	
0001D226                            ; ===========================================================================
0001D226 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001D236                            ; ===========================================================================
0001D236                            
0001D236                            loc_19FE6:
0001D236 70FF                       		moveq	#-1,d0
0001D238 3028 0036                  		move.w	$36(a0),d0
0001D23C 2240                       		movea.l	d0,a1
0001D23E 4A68 0030                  		tst.w	$30(a0)
0001D242 6A00                       		bpl.s	loc_1A000
0001D244 4268 0030                  		clr.w	$30(a0)
0001D248 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D24E 6100                       		bsr.s	loc_1A020
0001D250                            
0001D250                            loc_1A000:
0001D250 700F                       		moveq	#$F,d0
0001D252 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001D256 6600                       		bne.s	loc_1A00A
0001D258 6100                       		bsr.s	loc_1A020
0001D25A                            
0001D25A                            loc_1A00A:
0001D25A 4A68 0032                  		tst.w	$32(a0)
0001D25E 6700                       		beq.s	locret_1A01E
0001D260 5528 0034                  		subq.b	#2,$34(a0)
0001D264 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D26A 4268 0032                  		clr.w	$32(a0)
0001D26E                            
0001D26E                            locret_1A01E:
0001D26E 4E75                       		rts	
0001D270                            ; ===========================================================================
0001D270                            
0001D270                            loc_1A020:
0001D27A                            ; ===========================================================================
0001D27A                            
0001D27A                            loc_1A02A:
0001D27A 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001D280 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D286 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
0001D28C 117C 0006 001A             		move.b	#6,obFrame(a0)
0001D292 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D298 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001D29E 6500                       		bcs.s	loc_1A070
0001D2A0 317C 059C 000C             		move.w	#$59C,obY(a0)
0001D2A6 5428 0034                  		addq.b	#2,$34(a0)
0001D2AA 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001D2B0 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001D2B6 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001D2BC 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001D2C0                            
0001D2C0                            loc_1A070:
0001D2C0 6000 0000                  		bra.w	loc_1A166
0001D2C4                            ; ===========================================================================
0001D2C4                            
0001D2C4                            loc_1A074:
0001D2C4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D2CA 117C 0004 001C             		move.b	#4,obAnim(a0)
0001D2D0 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
0001D2D6 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D2DC 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D2E2 6500                       		bcs.s	loc_1A09A
0001D2E4 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D2EA                            
0001D2EA                            loc_1A09A:
0001D2EA 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D2F0 3028 0008                  		move.w	obX(a0),d0
0001D2F4 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D2F8 6A00                       		bpl.s	loc_1A0B4
0001D2FA 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D300 6000 0000                  		bra.w	loc_1A0F2
0001D304                            ; ===========================================================================
0001D304                            
0001D304                            loc_1A0B4:
0001D304 0440 0070                  		subi.w	#$70,d0
0001D308 6500                       		bcs.s	loc_1A0F2
0001D30A 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D310 5140                       		subq.w	#8,d0
0001D312 6500                       		bcs.s	loc_1A0F2
0001D314 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D31A 5140                       		subq.w	#8,d0
0001D31C 6500                       		bcs.s	loc_1A0F2
0001D31E 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D324 5140                       		subq.w	#8,d0
0001D326 6500                       		bcs.s	loc_1A0F2
0001D328 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D32E 5140                       		subq.w	#8,d0
0001D330 6500                       		bcs.s	loc_1A0F2
0001D332 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D338 0440 0038                  		subi.w	#$38,d0
0001D33C 6500                       		bcs.s	loc_1A0F2
0001D33E 4268 0010                  		clr.w	obVelX(a0)
0001D342                            
0001D342                            loc_1A0F2:
0001D342 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D348 6500                       		bcs.s	loc_1A110
0001D34A 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D350 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D356 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D35C 5428 0034                  		addq.b	#2,$34(a0)
0001D360                            
0001D360                            loc_1A110:
0001D360 6000                       		bra.s	loc_1A15C
0001D362                            ; ===========================================================================
0001D362                            
0001D362                            loc_1A112:
0001D362 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
0001D368 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D36E 6500                       		bcs.s	loc_1A124
0001D370 4268 0010                  		clr.w	obVelX(a0)
0001D374                            
0001D374                            loc_1A124:
0001D374 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D37A 4A68 0012                  		tst.w	obVelY(a0)
0001D37E 6B00                       		bmi.s	loc_1A142
0001D380 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D386 6500                       		bcs.s	loc_1A142
0001D388 317C 0592 000C             		move.w	#$592,obY(a0)
0001D38E 4268 0012                  		clr.w	obVelY(a0)
0001D392                            
0001D392                            loc_1A142:
0001D392 3028 0010                  		move.w	obVelX(a0),d0
0001D396 8068 0012                  		or.w	obVelY(a0),d0
0001D39A 6600                       		bne.s	loc_1A15C
0001D39C 5428 0034                  		addq.b	#2,$34(a0)
0001D3A0 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D3A6 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D3AC                            
0001D3AC                            loc_1A15C:
0001D3AC 43FA F876                  		lea	Ani_SEgg(pc),a1
0001D3B0 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001D3B6                            
0001D3B6                            loc_1A166:
0001D3B6 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D3BC 6C00                       		bge.s	loc_1A172
0001D3BE 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D3C2                            
0001D3C2                            loc_1A172:
0001D3C2 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D3C8 6C00                       		bge.s	locret_1A190
0001D3CA 323C 001B                  		move.w	#$1B,d1
0001D3CE 343C 0070                  		move.w	#$70,d2
0001D3D2 363C 0071                  		move.w	#$71,d3
0001D3D6 3828 0008                  		move.w	obX(a0),d4
0001D3DA 4EF9 0001 1E44             		jmp	(SolidObject).l
0001D3E0                            ; ===========================================================================
0001D3E0                            
0001D3E0                            locret_1A190:
0001D3E0 4E75                       		rts	
0001D3E2                            ; ===========================================================================
0001D3E2                            
0001D3E2                            loc_1A192:
0001D3E2 217C 0001 AEDA 0004        		move.l	#Map_Eggman,obMap(a0)
0001D3EA 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D3F0 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D3F6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D3FC 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
0001D402 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D408 6400                       		bcc.s	loc_1A1D0
0001D40A 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D410 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D416 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D41C 5428 0034                  		addq.b	#2,$34(a0)
0001D420                            
0001D420                            loc_1A1D0:
0001D420 6000 FF8A                  		bra.w	loc_1A15C
0001D424                            ; ===========================================================================
0001D424                            
0001D424                            loc_1A1D4:
0001D424 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D42A 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
0001D430 4A68 0030                  		tst.w	$30(a0)
0001D434 6600                       		bne.s	loc_1A1FC
0001D436 4A28 0020                  		tst.b	obColType(a0)
0001D43A 6600                       		bne.s	loc_1A216
0001D43C 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D442 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D448                            
0001D448                            loc_1A1FC:
0001D448 5368 0030                  		subq.w	#1,$30(a0)
0001D44C 6600                       		bne.s	loc_1A216
0001D44E 4A28 0022                  		tst.b	obStatus(a0)
0001D452 6A00                       		bpl.s	loc_1A210
0001D454 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D45A 6000                       		bra.s	loc_1A216
0001D45C                            ; ===========================================================================
0001D45C                            
0001D45C                            loc_1A210:
0001D45C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D462                            
0001D462                            loc_1A216:
0001D462 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D468 6D00                       		blt.s	loc_1A23A
0001D46A 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D470 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D476 4278 D020                  		clr.w	(v_player+obInertia).w
0001D47A 4A68 0012                  		tst.w	obVelY(a0)
0001D47E 6A00                       		bpl.s	loc_1A248
0001D480 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D486                            
0001D486                            loc_1A23A:
0001D486 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D48C 6D00                       		blt.s	loc_1A248
0001D48E 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D494                            
0001D494                            loc_1A248:
0001D494 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D49A 6500                       		bcs.s	loc_1A260
0001D49C 4A28 0001                  		tst.b	obRender(a0)
0001D4A0 6B00                       		bmi.s	loc_1A260
0001D4A2 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D4A8 6000 FAF0                  		bra.w	Obj85_Delete
0001D4AC                            ; ===========================================================================
0001D4AC                            
0001D4AC                            loc_1A260:
0001D4AC 6000 FEFE                  		bra.w	loc_1A15C
0001D4B0                            ; ===========================================================================
0001D4B0                            
0001D4B0                            loc_1A264:	; Routine 4
0001D4B0 2268 0034                  		movea.l	$34(a0),a1
0001D4B4 1011                       		move.b	(a1),d0
0001D4B6 B010                       		cmp.b	(a0),d0
0001D4B8 6600 FAE0                  		bne.w	Obj85_Delete
0001D4BC 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D4C2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D4C8 6C00                       		bge.s	loc_1A280
0001D4CA 6000                       		bra.s	loc_1A2A6
0001D4CC                            ; ===========================================================================
0001D4CC                            
0001D4CC                            loc_1A280:
0001D4CC 4A69 0010                  		tst.w	obVelX(a1)
0001D4D0 6700                       		beq.s	loc_1A28C
0001D4D2 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D4D8                            
0001D4D8                            loc_1A28C:
0001D4D8 43FA D9B0                  		lea	Ani_Eggman(pc),a1
0001D4DC 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001D4E2                            
0001D4E2                            loc_1A296:
0001D4E2 2268 0034                  		movea.l	$34(a0),a1
0001D4E6 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D4EC 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D4F2                            
0001D4F2                            loc_1A2A6:
0001D4F2 2268 0034                  		movea.l	$34(a0),a1
0001D4F6 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D4FC 7003                       		moveq	#3,d0
0001D4FE C028 0022                  		and.b	obStatus(a0),d0
0001D502 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D508 8128 0001                  		or.b	d0,obRender(a0)
0001D50C 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001D512                            ; ===========================================================================
0001D512                            
0001D512                            loc_1A2C6:	; Routine 6
0001D512 2268 0034                  		movea.l	$34(a0),a1
0001D516 1011                       		move.b	(a1),d0
0001D518 B010                       		cmp.b	(a0),d0
0001D51A 6600 FA7E                  		bne.w	Obj85_Delete
0001D51E 0CA9 0001 AEDA 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D526 6700                       		beq.s	loc_1A2E4
0001D528 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D52E 60C2                       		bra.s	loc_1A2A6
0001D530                            ; ===========================================================================
0001D530                            
0001D530                            loc_1A2E4:
0001D530 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D536 4A29 0021                  		tst.b	obColProp(a1)
0001D53A 6F00                       		ble.s	loc_1A312
0001D53C 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D542 217C 0001 AEDA 0004        		move.l	#Map_Eggman,obMap(a0)
0001D54A 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D550 43FA D938                  		lea	Ani_Eggman(pc),a1
0001D554 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001D55A 6000 FF86                  		bra.w	loc_1A296
0001D55E                            ; ===========================================================================
0001D55E                            
0001D55E                            loc_1A312:
0001D55E 4A28 0001                  		tst.b	1(a0)
0001D562 6A00 FA36                  		bpl.w	Obj85_Delete
0001D566 6100 D4CC                  		bsr.w	BossDefeated
0001D56A 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D570 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D576 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D57E 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D584 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D588 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001D58E 6000 FF52                  		bra.w	loc_1A296
0001D592                            ; ===========================================================================
0001D592                            
0001D592                            loc_1A346:	; Routine 8
0001D592 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D598 2268 0034                  		movea.l	$34(a0),a1
0001D59C 0CA9 0001 AEDA 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D5A4 6700                       		beq.s	loc_1A35E
0001D5A6 6000 FF4A                  		bra.w	loc_1A2A6
0001D5AA                            ; ===========================================================================
0001D5AA                            
0001D5AA                            loc_1A35E:
0001D5AA 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D5B0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D5B6 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D5BA 6600                       		bne.s	loc_1A376
0001D5BC 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D5C2                            
0001D5C2                            loc_1A376:
0001D5C2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D5C6 6E00                       		bgt.s	loc_1A38A
0001D5C8 5228 001A                  		addq.b	#1,obFrame(a0)
0001D5CC 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D5D2 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D5D6                            
0001D5D6                            loc_1A38A:
0001D5D6 6000 FF0A                  		bra.w	loc_1A296
0001D5DA                            ; ===========================================================================
0001D5DA                            
0001D5DA                            loc_1A38E:	; Routine $A
0001D5DA 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D5E0 3038 D008                  		move.w	(v_player+obX).w,d0
0001D5E4 9068 0008                  		sub.w	obX(a0),d0
0001D5E8 6500                       		bcs.s	loc_1A3A6
0001D5EA 4A28 0001                  		tst.b	obRender(a0)
0001D5EE 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D5F2                            
0001D5F2                            loc_1A3A6:
0001D5F2 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001D5F8                            ; ===========================================================================
0001D5F8                            
0001D5F8                            loc_1A3AC:	; Routine $C
0001D5F8 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D5FE 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D604 2268 0034                  		movea.l	$34(a0),a1
0001D608 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D60E 6600                       		bne.s	loc_1A3D0
0001D610 0CA9 0001 AEDA 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D618 6700 F980                  		beq.w	Obj85_Delete
0001D61C                            
0001D61C                            loc_1A3D0:
0001D61C 6000 FED4                  		bra.w	loc_1A2A6
0001D620                            		
0001D620                            BossModeMusic:
0001D620 0C28 0001 0021             		cmpi.b	#1,obColProp(a0)
0001D626 6600 0000                  		bne.w	NormalMode
0001D62A 4EF9 0000 0000             		jmp	PinchMode
0001D630                            
0001D630                            NormalMode:
0001D630 303C 00AC                  		move.w	#$AC,d0
0001D634 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001D63A 4E75                       		rts
0001D63C                            
0001D63C                            PinchMode:
0001D63C 303C 0094                  		move.w	#$94,d0
0001D640 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001D646 303C 00E2                  		move.w	#$E2,d0
0001D64A 4EB9 0000 129A             		jsr	(PlaySound).l
0001D650 4E75                       		rts		
0001D650 4E75                       		rts		
0001D652                            		include	"_anim\FZ Eggman in Ship.asm"
0001D652                            ; ---------------------------------------------------------------------------
0001D652                            ; Animation script - Eggman (FZ)
0001D652                            ; ---------------------------------------------------------------------------
0001D652 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D654 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D658                            		even
0001D658                            		even
0001D658                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D658                            ; ---------------------------------------------------------------------------
0001D658                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D658                            ; ---------------------------------------------------------------------------
0001D658                            Map_FZDamaged_internal:
0001D658 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D65A 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D65C 06                         @damage1:	dc.b 6
0001D65D E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D662 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D667 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D66C FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D671 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D676 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D67B 06                         @damage2:	dc.b 6
0001D67C E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D681 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D686 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D68B FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D690 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D695 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D69A                            		even
0001D69A                            		even
0001D69A                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D69A                            ; ---------------------------------------------------------------------------
0001D69A                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D69A                            ; ---------------------------------------------------------------------------
0001D69A                            Map_FZLegs_internal:
0001D69A 0000                       		dc.w @extended-Map_FZLegs_internal
0001D69C 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D69E 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D6A0 02                         @extended:	dc.b 2
0001D6A1 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D6A6 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D6AB 03                         @halfway:	dc.b 3
0001D6AC 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D6B1 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D6B6 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D6BB 02                         @retracted:	dc.b 2
0001D6BC 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D6C1 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D6C6                            		even
0001D6C6                            		even
0001D6C6                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D6C6                            ; ---------------------------------------------------------------------------
0001D6C6                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D6C6                            ; ---------------------------------------------------------------------------
0001D6C6                            
0001D6C6                            Obj84_Delete:
0001D6C6 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001D6CC                            ; ===========================================================================
0001D6CC                            
0001D6CC                            EggmanCylinder:
0001D6CC 7000                       		moveq	#0,d0
0001D6CE 1028 0024                  		move.b	obRoutine(a0),d0
0001D6D2 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D6D6 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D6DA                            ; ===========================================================================
0001D6DA 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D6DC 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D6DE 0000                       		dc.w loc_1A57E-Obj84_Index
0001D6E0                            
0001D6E0 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D6E4 2550 0620                  		dc.w $2550, $620
0001D6E8 2490 04C0                  		dc.w $2490, $4C0
0001D6EC 2510 04C0                  		dc.w $2510, $4C0
0001D6F0                            ; ===========================================================================
0001D6F0                            
0001D6F0                            Obj84_Main:	; Routine
0001D6F0 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D6F4 7000                       		moveq	#0,d0
0001D6F6 1028 0028                  		move.b	obSubtype(a0),d0
0001D6FA D040                       		add.w	d0,d0
0001D6FC D2C0                       		adda.w	d0,a1
0001D6FE 117C 0004 0001             		move.b	#4,obRender(a0)
0001D704 08E8 0007 0001             		bset	#7,obRender(a0)
0001D70A 08E8 0004 0001             		bset	#4,obRender(a0)
0001D710 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D716 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D71E 3159 0008                  		move.w	(a1)+,obX(a0)
0001D722 3151 000C                  		move.w	(a1),obY(a0)
0001D726 3159 0038                  		move.w	(a1)+,$38(a0)
0001D72A 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D730 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D736 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D73C 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D742 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D748 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D74C                            
0001D74C                            loc_1A4CE:	; Routine 2
0001D74C 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D752 6F00                       		ble.s	loc_1A4DC
0001D754 08E8 0001 0001             		bset	#1,obRender(a0)
0001D75A                            
0001D75A                            loc_1A4DC:
0001D75A 42A8 003C                  		clr.l	$3C(a0)
0001D75E 4A28 0029                  		tst.b	$29(a0)
0001D762 6700                       		beq.s	loc_1A4EA
0001D764 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D768                            
0001D768                            loc_1A4EA:
0001D768 2028 003C                  		move.l	$3C(a0),d0
0001D76C 2228 0038                  		move.l	$38(a0),d1
0001D770 D280                       		add.l	d0,d1
0001D772 4841                       		swap	d1
0001D774 3141 000C                  		move.w	d1,obY(a0)
0001D778 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D77E 6600                       		bne.s	loc_1A524
0001D780 4A68 0030                  		tst.w	$30(a0)
0001D784 6A00                       		bpl.s	loc_1A524
0001D786 70F6                       		moveq	#-$A,d0
0001D788 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D78E 6F00                       		ble.s	loc_1A514
0001D790 700E                       		moveq	#$E,d0
0001D792                            
0001D792                            loc_1A514:
0001D792 D240                       		add.w	d0,d1
0001D794 2268 0034                  		movea.l	$34(a0),a1
0001D798 3341 000C                  		move.w	d1,obY(a1)
0001D79C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D7A2                            
0001D7A2                            loc_1A524:
0001D7A2 323C 002B                  		move.w	#$2B,d1
0001D7A6 343C 0060                  		move.w	#$60,d2
0001D7AA 363C 0061                  		move.w	#$61,d3
0001D7AE 3828 0008                  		move.w	obX(a0),d4
0001D7B2 4EB9 0001 1E44             		jsr	(SolidObject).l
0001D7B8 7000                       		moveq	#0,d0
0001D7BA 3228 003C                  		move.w	$3C(a0),d1
0001D7BE 6A00                       		bpl.s	loc_1A550
0001D7C0 4441                       		neg.w	d1
0001D7C2 5141                       		subq.w	#8,d1
0001D7C4 6500                       		bcs.s	loc_1A55C
0001D7C6 5200                       		addq.b	#1,d0
0001D7C8 E841                       		asr.w	#4,d1
0001D7CA D041                       		add.w	d1,d0
0001D7CC 6000                       		bra.s	loc_1A55C
0001D7CE                            ; ===========================================================================
0001D7CE                            
0001D7CE                            loc_1A550:
0001D7CE 0441 0027                  		subi.w	#$27,d1
0001D7D2 6500                       		bcs.s	loc_1A55C
0001D7D4 5200                       		addq.b	#1,d0
0001D7D6 E841                       		asr.w	#4,d1
0001D7D8 D041                       		add.w	d1,d0
0001D7DA                            
0001D7DA                            loc_1A55C:
0001D7DA 1140 001A                  		move.b	d0,obFrame(a0)
0001D7DE 3038 D008                  		move.w	(v_player+obX).w,d0
0001D7E2 9068 0008                  		sub.w	obX(a0),d0
0001D7E6 6B00                       		bmi.s	loc_1A578
0001D7E8 0440 0140                  		subi.w	#$140,d0
0001D7EC 6B00                       		bmi.s	loc_1A578
0001D7EE 4A28 0001                  		tst.b	obRender(a0)
0001D7F2 6A00 FED2                  		bpl.w	Obj84_Delete
0001D7F6                            
0001D7F6                            loc_1A578:
0001D7F6 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001D7FC                            ; ===========================================================================
0001D7FC                            
0001D7FC                            loc_1A57E:	; Routine 4
0001D7FC 7000                       		moveq	#0,d0
0001D7FE 1028 0028                  		move.b	obSubtype(a0),d0
0001D802 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D806 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D80A 6000 FF5C                  		bra.w	loc_1A4EA
0001D80E                            ; ===========================================================================
0001D80E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D810 0000                       		dc.w loc_1A598-off_1A590
0001D812 0000                       		dc.w loc_1A604-off_1A590
0001D814 0000                       		dc.w loc_1A604-off_1A590
0001D816                            ; ===========================================================================
0001D816                            
0001D816                            loc_1A598:
0001D816 4A28 0029                  		tst.b	$29(a0)
0001D81A 6600                       		bne.s	loc_1A5D4
0001D81C 2268 0034                  		movea.l	$34(a0),a1
0001D820 4A29 0021                  		tst.b	obColProp(a1)
0001D824 6600                       		bne.s	loc_1A5B4
0001D826 6100 D20C                  		bsr.w	BossDefeated
0001D82A 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D832                            
0001D832                            loc_1A5B4:
0001D832 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D83A 6400                       		bcc.s	locret_1A602
0001D83C 42A8 003C                  		clr.l	$3C(a0)
0001D840 2268 0034                  		movea.l	$34(a0),a1
0001D844 5369 0032                  		subq.w	#1,$32(a1)
0001D848 4269 0030                  		clr.w	$30(a1)
0001D84C 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D850 4E75                       		rts	
0001D852                            ; ===========================================================================
0001D852                            
0001D852                            loc_1A5D4:
0001D852 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D858 6C00                       		bge.s	loc_1A5E4
0001D85A 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D862                            
0001D862                            loc_1A5E4:
0001D862 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D86A 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D870 6E00                       		bgt.s	locret_1A602
0001D872 4268 003E                  		clr.w	$3E(a0)
0001D876 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D87C 4228 0029                  		clr.b	$29(a0)
0001D880                            
0001D880                            locret_1A602:
0001D880 4E75                       		rts	
0001D882                            ; ===========================================================================
0001D882                            
0001D882                            loc_1A604:
0001D882 08E8 0001 0001             		bset	#1,obRender(a0)
0001D888 4A28 0029                  		tst.b	$29(a0)
0001D88C 6600                       		bne.s	loc_1A646
0001D88E 2268 0034                  		movea.l	$34(a0),a1
0001D892 4A29 0021                  		tst.b	obColProp(a1)
0001D896 6600                       		bne.s	loc_1A626
0001D898 6100 D19A                  		bsr.w	BossDefeated
0001D89C 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D8A4                            
0001D8A4                            loc_1A626:
0001D8A4 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D8AC 6400                       		bcc.s	locret_1A674
0001D8AE 42A8 003C                  		clr.l	$3C(a0)
0001D8B2 2268 0034                  		movea.l	$34(a0),a1
0001D8B6 5369 0032                  		subq.w	#1,$32(a1)
0001D8BA 4269 0030                  		clr.w	$30(a1)
0001D8BE 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D8C2 4E75                       		rts	
0001D8C4                            ; ===========================================================================
0001D8C4                            
0001D8C4                            loc_1A646:
0001D8C4 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D8CA 6D00                       		blt.s	loc_1A656
0001D8CC 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D8D4                            
0001D8D4                            loc_1A656:
0001D8D4 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D8DC 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D8E2 6D00                       		blt.s	locret_1A674
0001D8E4 4268 003E                  		clr.w	$3E(a0)
0001D8E8 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D8EE 4228 0029                  		clr.b	$29(a0)
0001D8F2                            
0001D8F2                            locret_1A674:
0001D8F2 4E75                       		rts	
0001D8F2 4E75                       		rts	
0001D8F4                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D8F4                            ; --------------------------------------------------------------------------------
0001D8F4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D8F4                            ; --------------------------------------------------------------------------------
0001D8F4                            
0001D8F4                            SME_SCUpI:	
0001D8F4 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D8F8 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D8FC 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D900 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D904 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D908 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D90C 06                         SME_SCUpI_18:	dc.b 6	
0001D90D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D912 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D917 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D91C B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D921 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D926 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D92B 08                         SME_SCUpI_37:	dc.b 8	
0001D92C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D931 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D936 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D93B B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D940 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D945 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D94A D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D94F A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D954 0A                         SME_SCUpI_60:	dc.b $A	
0001D955 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D95A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D95F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D964 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D969 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D96E D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D973 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D978 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D97D F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D982 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D987 0C                         SME_SCUpI_93:	dc.b $C	
0001D988 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D98D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D992 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D997 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D99C B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D9A1 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D9A6 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D9AB F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D9B0 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D9B5 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D9BA 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D9BF A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9C4 0D                         SME_SCUpI_D0:	dc.b $D	
0001D9C5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D9CA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D9CF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D9D4 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D9D9 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D9DE D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D9E3 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D9E8 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D9ED F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D9F2 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D9F7 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D9FC 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA01 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA06 0E                         SME_SCUpI_112:	dc.b $E	
0001DA07 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA0C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA11 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA16 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA1B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA20 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA25 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA2A F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA2F F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA34 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA39 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA3E 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA43 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA48 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA4D 0E                         SME_SCUpI_159:	dc.b $E	
0001DA4E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA53 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA58 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA5D B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA62 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA67 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA6C D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA71 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA76 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA7B 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA80 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA85 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA8A 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA8F A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA94 0E                         SME_SCUpI_1A0:	dc.b $E	
0001DA95 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA9A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA9F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DAA4 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DAA9 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DAAE D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DAB3 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DAB8 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DABD F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DAC2 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DAC7 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DACC 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DAD1 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DAD6 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DADB 0E                         SME_SCUpI_1E7:	dc.b $E	
0001DADC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DAE1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DAE6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DAEB B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DAF0 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DAF5 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DAFA D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DAFF F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DB04 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DB09 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DB0E 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DB13 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DB18 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DB1D A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DB22 0E                         SME_SCUpI_22E:	dc.b $E	
0001DB23 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DB28 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DB2D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DB32 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DB37 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DB3C D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DB41 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DB46 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DB4B F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DB50 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DB55 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DB5A 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DB5F 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DB64 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DB69 0E                         SME_SCUpI_275:	dc.b $E	
0001DB6A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DB6F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DB74 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DB79 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DB7E B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DB83 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DB88 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DB8D F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DB92 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DB97 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DB9C 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DBA1 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DBA6 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DBAB A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DBB0 02                         SME_SCUpI_2BC:	dc.b 2	
0001DBB1 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001DBB6 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001DBBC 00                         		even
0001DBBC 00                         		even
0001DBBC                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001DBBC                            ; ---------------------------------------------------------------------------
0001DBBC                            ; Object 86 - energy balls (FZ)
0001DBBC                            ; ---------------------------------------------------------------------------
0001DBBC                            
0001DBBC                            BossPlasma:
0001DBBC 7000                       		moveq	#0,d0
0001DBBE 1028 0024                  		move.b	obRoutine(a0),d0
0001DBC2 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001DBC6 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001DBCA                            ; ===========================================================================
0001DBCA 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001DBCC 0000                       		dc.w Obj86_Generator-Obj86_Index
0001DBCE 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001DBD0 0000                       		dc.w loc_1A962-Obj86_Index
0001DBD2 0000                       		dc.w loc_1A982-Obj86_Index
0001DBD4                            ; ===========================================================================
0001DBD4                            
0001DBD4                            Obj86_Main:	; Routine 0
0001DBD4 317C 2588 0008             		move.w	#$2588,obX(a0)
0001DBDA 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DBE0 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001DBE6 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001DBEE 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DBF4 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001DBFA 117C 0008 0017             		move.b	#8,obWidth(a0)
0001DC00 117C 0008 0016             		move.b	#8,obHeight(a0)
0001DC06 117C 0004 0001             		move.b	#4,obRender(a0)
0001DC0C 08E8 0007 0001             		bset	#7,obRender(a0)
0001DC12 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DC16                            
0001DC16                            Obj86_Generator:; Routine 2
0001DC16 2268 0034                  		movea.l	$34(a0),a1
0001DC1A 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001DC20 6600                       		bne.s	loc_1A850
0001DC22 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001DC26 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001DC2C 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001DC32                            ; ===========================================================================
0001DC32                            
0001DC32                            loc_1A850:
0001DC32 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DC38 4A28 0029                  		tst.b	$29(a0)
0001DC3C 6700                       		beq.s	loc_1A86C
0001DC3E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DC42 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DC48 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001DC4E                            
0001DC4E                            loc_1A86C:
0001DC4E 323C 0013                  		move.w	#$13,d1
0001DC52 343C 0008                  		move.w	#8,d2
0001DC56 363C 0011                  		move.w	#$11,d3
0001DC5A 3828 0008                  		move.w	obX(a0),d4
0001DC5E 4EB9 0001 1E44             		jsr	(SolidObject).l
0001DC64 3038 D008                  		move.w	(v_player+obX).w,d0
0001DC68 9068 0008                  		sub.w	obX(a0),d0
0001DC6C 6B00                       		bmi.s	loc_1A89A
0001DC6E 0440 0140                  		subi.w	#$140,d0
0001DC72 6B00                       		bmi.s	loc_1A89A
0001DC74 4A28 0001                  		tst.b	obRender(a0)
0001DC78 6A00 FA4C                  		bpl.w	Obj84_Delete
0001DC7C                            
0001DC7C                            loc_1A89A:
0001DC7C 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001DC80 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001DC86 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001DC8C                            ; ===========================================================================
0001DC8C                            
0001DC8C                            Obj86_MakeBalls:; Routine 4
0001DC8C 4A28 0029                  		tst.b	$29(a0)
0001DC90 6700 0000                  		beq.w	loc_1A954
0001DC94 4228 0029                  		clr.b	$29(a0)
0001DC98 D068 0030                  		add.w	$30(a0),d0
0001DC9C 0240 001E                  		andi.w	#$1E,d0
0001DCA0 D4C0                       		adda.w	d0,a2
0001DCA2 5868 0030                  		addq.w	#4,$30(a0)
0001DCA6 4268 0032                  		clr.w	$32(a0)
0001DCAA 7403                       		moveq	#3,d2
0001DCAC                            
0001DCAC                            Obj86_Loop:
0001DCAC 4EB9 0000 FEC4             		jsr	(FindNextFreeObj).l
0001DCB2 6600 0000                  		bne.w	loc_1A954
0001DCB6 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001DCBA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DCC0 337C 053C 000C             		move.w	#$53C,obY(a1)
0001DCC6 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001DCCC 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001DCD2 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001DCDA 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DCE0 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DCE6 137C 0000 0020             		move.b	#0,obColType(a1)
0001DCEC 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DCF2 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DCF8 137C 0004 0001             		move.b	#4,obRender(a1)
0001DCFE 08E9 0007 0001             		bset	#7,obRender(a1)
0001DD04 2348 0034                  		move.l	a0,$34(a1)
0001DD08 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001DD0E 3228 0032                  		move.w	$32(a0),d1
0001DD12 C3FC FFB1                  		muls.w	#-$4F,d1
0001DD16 0641 2578                  		addi.w	#$2578,d1
0001DD1A 0240 001F                  		andi.w	#$1F,d0
0001DD1E 0440 0010                  		subi.w	#$10,d0
0001DD22 D041                       		add.w	d1,d0
0001DD24 3340 0030                  		move.w	d0,$30(a1)
0001DD28 5268 0032                  		addq.w	#1,$32(a0)
0001DD2C 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DD32 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DD36                            
0001DD36                            loc_1A954:
0001DD36 4A68 0032                  		tst.w	$32(a0)
0001DD3A 6600                       		bne.s	loc_1A95E
0001DD3C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DD40                            
0001DD40                            loc_1A95E:
0001DD40 6000 FF0C                  		bra.w	loc_1A86C
0001DD44                            ; ===========================================================================
0001DD44                            
0001DD44                            loc_1A962:	; Routine 6
0001DD44 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DD4A 4A68 0038                  		tst.w	$38(a0)
0001DD4E 6600                       		bne.s	loc_1A97E
0001DD50 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DD56 2268 0034                  		movea.l	$34(a0),a1
0001DD5A 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DD60                            
0001DD60                            loc_1A97E:
0001DD60 6000 FEEC                  		bra.w	loc_1A86C
0001DD64                            ; ===========================================================================
0001DD64                            
0001DD64                            loc_1A982:	; Routine 8
0001DD64 7000                       		moveq	#0,d0
0001DD66 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DD6A 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DD6E 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DD72 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DD76 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001DD7C 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001DD82                            ; ===========================================================================
0001DD82 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DD84 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DD86 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DD88                            ; ===========================================================================
0001DD88                            
0001DD88                            loc_1A9A6:
0001DD88 3028 0030                  		move.w	$30(a0),d0
0001DD8C 9068 0008                  		sub.w	obX(a0),d0
0001DD90 E940                       		asl.w	#4,d0
0001DD92 3140 0010                  		move.w	d0,obVelX(a0)
0001DD96 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DD9C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DDA0 4E75                       		rts	
0001DDA2                            ; ===========================================================================
0001DDA2                            
0001DDA2                            loc_1A9C0:
0001DDA2 4A68 0010                  		tst.w	obVelX(a0)
0001DDA6 6700                       		beq.s	loc_1A9E6
0001DDA8 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
0001DDAE 3028 0008                  		move.w	obX(a0),d0
0001DDB2 9068 0030                  		sub.w	$30(a0),d0
0001DDB6 6400                       		bcc.s	loc_1A9E6
0001DDB8 4268 0010                  		clr.w	obVelX(a0)
0001DDBC D168 0008                  		add.w	d0,obX(a0)
0001DDC0 2268 0034                  		movea.l	$34(a0),a1
0001DDC4 5369 0032                  		subq.w	#1,$32(a1)
0001DDC8                            
0001DDC8                            loc_1A9E6:
0001DDC8 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DDCE 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DDD2 6600                       		bne.s	locret_1AA1C
0001DDD4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DDD8 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DDDE 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DDE4 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DDEA 7000                       		moveq	#0,d0
0001DDEC 3038 D008                  		move.w	(v_player+obX).w,d0
0001DDF0 9068 0008                  		sub.w	obX(a0),d0
0001DDF4 3140 0010                  		move.w	d0,obVelX(a0)
0001DDF8 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DDFE                            
0001DDFE                            locret_1AA1C:
0001DDFE 4E75                       		rts	
0001DE00                            ; ===========================================================================
0001DE00                            
0001DE00                            loc_1AA1E:
0001DE00 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
0001DE06 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DE0C 6400                       		bcc.s	loc_1AA34
0001DE0E 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DE12 6700                       		beq.s	loc_1AA34
0001DE14 4E75                       		rts	
0001DE16                            ; ===========================================================================
0001DE16                            
0001DE16                            loc_1AA34:
0001DE16 2268 0034                  		movea.l	$34(a0),a1
0001DE1A 5369 0038                  		subq.w	#1,$38(a1)
0001DE1E 6000 F8A6                  		bra.w	Obj84_Delete
0001DE1E 6000 F8A6                  		bra.w	Obj84_Delete
0001DE22                            		include	"_anim\Plasma Ball Launcher.asm"
0001DE22                            ; ---------------------------------------------------------------------------
0001DE22                            ; Animation script - energy ball launcher (FZ)
0001DE22                            ; ---------------------------------------------------------------------------
0001DE22 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DE24 0000                       		dc.w @redsparking-Ani_PLaunch
0001DE26 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DE28 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DE2C 00                         		even
0001DE2C 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DE32                            		even
0001DE32 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DE38                            		even
0001DE38                            		even
0001DE38                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DE38                            ; ---------------------------------------------------------------------------
0001DE38                            ; Sprite mappings - energy ball	launcher (FZ)
0001DE38                            ; ---------------------------------------------------------------------------
0001DE38                            Map_PLaunch_internal:
0001DE38 0000                       		dc.w @red-Map_PLaunch_internal
0001DE3A 0000                       		dc.w @white-Map_PLaunch_internal
0001DE3C 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DE3E 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DE40 01                         @red:		dc.b 1
0001DE41 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DE46 01                         @white:		dc.b 1
0001DE47 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DE4C 01                         @sparking1:	dc.b 1
0001DE4D F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DE52 01                         @sparking2:	dc.b 1
0001DE53 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DE58                            		even
0001DE58                            		even
0001DE58                            		include	"_anim\Plasma Balls.asm"
0001DE58                            ; ---------------------------------------------------------------------------
0001DE58                            ; Animation script - energy balls (FZ)
0001DE58                            ; ---------------------------------------------------------------------------
0001DE58 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DE5A 0000                       		dc.w @short-Ani_Plasma
0001DE5C 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DE6B 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DE7A 0A05 FF                    		dc.b $A, 5, afEnd
0001DE7E 00                         		even
0001DE7E 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DE88                            		even
0001DE88                            		even
0001DE88                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DE88                            ; ---------------------------------------------------------------------------
0001DE88                            ; Sprite mappings - energy balls (FZ)
0001DE88                            ; ---------------------------------------------------------------------------
0001DE88                            Map_Plasma_internal:
0001DE88 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DE8A 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DE8C 0000                       		dc.w @white1-Map_Plasma_internal
0001DE8E 0000                       		dc.w @white2-Map_Plasma_internal
0001DE90 0000                       		dc.w @white3-Map_Plasma_internal
0001DE92 0000                       		dc.w @white4-Map_Plasma_internal
0001DE94 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DE96 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DE98 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DE9A 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DE9C 0000                       		dc.w @blank-Map_Plasma_internal
0001DE9E 02                         @fuzzy1:	dc.b 2
0001DE9F F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DEA4 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DEA9 02                         @fuzzy2:	dc.b 2
0001DEAA F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DEAF F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DEB4 02                         @white1:	dc.b 2
0001DEB5 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DEBA 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DEBF 02                         @white2:	dc.b 2
0001DEC0 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DEC5 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DECA 02                         @white3:	dc.b 2
0001DECB F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DED0 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DED5 02                         @white4:	dc.b 2
0001DED6 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DEDB F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DEE0 01                         @fuzzy3:	dc.b 1
0001DEE1 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DEE6 01                         @fuzzy4:	dc.b 1
0001DEE7 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DEEC 02                         @fuzzy5:	dc.b 2
0001DEED F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DEF2 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DEF7 02                         @fuzzy6:	dc.b 2
0001DEF8 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DEFD F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DF02 00                         @blank:		dc.b 0
0001DF04 00                         		even
0001DF04 00                         		even
0001DF04                            
0001DF04                            		include	"_incObj\3E Prison Capsule.asm"
0001DF04                            ; ---------------------------------------------------------------------------
0001DF04                            ; Object 3E - prison capsule
0001DF04                            ; ---------------------------------------------------------------------------
0001DF04                            
0001DF04                            Prison:
0001DF04 7000                       		moveq	#0,d0
0001DF06 1028 0024                  		move.b	obRoutine(a0),d0
0001DF0A 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DF0E 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DF2E 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001DF34                            
0001DF34                            	@delete:
0001DF34 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001DF3A                            ; ===========================================================================
0001DF3A 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DF3C 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DF3E 0000                       		dc.w Pri_Switched-Pri_Index
0001DF40 0000                       		dc.w Pri_Explosion-Pri_Index
0001DF42 0000                       		dc.w Pri_Explosion-Pri_Index
0001DF44 0000                       		dc.w Pri_Explosion-Pri_Index
0001DF46 0000                       		dc.w Pri_Animals-Pri_Index
0001DF48 0000                       		dc.w Pri_EndAct-Pri_Index
0001DF4A                            
0001DF4A =00000030                  pri_origY:	equ $30		; original y-axis position
0001DF4A                            
0001DF4A 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DF4E 040C 0501                  		dc.b 4,	$C, 5, 1
0001DF52 0610 0403                  		dc.b 6,	$10, 4,	3
0001DF56 0810 0305                  		dc.b 8,	$10, 3,	5
0001DF5A                            ; ===========================================================================
0001DF5A                            
0001DF5A                            Pri_Main:	; Routine 0
0001DF5A 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DF62 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DF68 117C 0004 0001             		move.b	#4,obRender(a0)
0001DF6E 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DF74 7000                       		moveq	#0,d0
0001DF76 1028 0028                  		move.b	obSubtype(a0),d0
0001DF7A E548                       		lsl.w	#2,d0
0001DF7C 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DF80 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DF84 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DF88 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DF8C 3028 0018                  		move.w obPriority(a0),d0 
0001DF90 E248                       		lsr.w #1,d0 
0001DF92 0240 0380                  		andi.w #$380,d0 
0001DF96 3140 0018                  		move.w d0,obPriority(a0)		
0001DF9A 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DF9E 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DFA2 6600                       		bne.s	@not02		; if not, branch
0001DFA4                            
0001DFA4 117C 0006 0020             		move.b	#6,obColType(a0)
0001DFAA 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DFB0                            
0001DFB0                            	@not02:
0001DFB0 4E75                       		rts	
0001DFB2                            ; ===========================================================================
0001DFB2                            
0001DFB2                            Pri_BodyMain:	; Routine 2
0001DFB2 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DFB8 6700                       		beq.s	@chkopened
0001DFBA 323C 002B                  		move.w	#$2B,d1
0001DFBE 343C 0018                  		move.w	#$18,d2
0001DFC2 363C 0018                  		move.w	#$18,d3
0001DFC6 3828 0008                  		move.w	obX(a0),d4
0001DFCA 4EF9 0001 1E44             		jmp	(SolidObject).l
0001DFD0                            ; ===========================================================================
0001DFD0                            
0001DFD0                            @chkopened:
0001DFD0 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DFD4 6700                       		beq.s	@open		; if yes, branch
0001DFD6 4228 0025                  		clr.b	ob2ndRout(a0)
0001DFDA 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DFE0 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DFE6                            
0001DFE6                            	@open:
0001DFE6 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DFEC 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001DFF0 6700                       		beq.s	@rts
0001DFF2 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001E000 4E75                       		rts	
0001E002                            		
0001E002                            	@rts:
0001E002 4E75                       		rts
0001E004                            ; ===========================================================================
0001E004                            
0001E004                            Pri_Switched:	; Routine 4
0001E004 323C 0017                  		move.w	#$17,d1
0001E008 343C 0008                  		move.w	#8,d2
0001E00C 363C 0008                  		move.w	#8,d3
0001E010 3828 0008                  		move.w	obX(a0),d4
0001E014 4EB9 0001 1E44             		jsr	(SolidObject).l
0001E01A 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001E020 4EB9 0000 CAE4             		jsr	(AnimateSprite).l
0001E026 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001E02C 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001E030 6700                       		beq.s	@open2		; if yes, branch
0001E032                            
0001E032 5068 000C                  		addq.w	#8,obY(a0)
0001E036 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001E03C 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001E042 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001E046 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001E04A 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001E050 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001E056 4228 0025                  		clr.b	ob2ndRout(a0)
0001E05A 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001E060 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001E066                            
0001E066                            	@open2:
0001E066 4E75                       		rts	
0001E068                            ; ===========================================================================
0001E068                            
0001E068                            Pri_Explosion:	; Routine 6, 8, $A
0001E068 7007                       		moveq	#7,d0
0001E06A C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001E06E 6600                       		bne.s	@noexplosion
0001E070 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
0001E076 6600                       		bne.s	@noexplosion
0001E078 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001E07C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E082 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E088 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001E08E 7200                       		moveq	#0,d1
0001E090 1200                       		move.b	d0,d1
0001E092 E409                       		lsr.b	#2,d1
0001E094 0441 0020                  		subi.w	#$20,d1
0001E098 D369 0008                  		add.w	d1,obX(a1)
0001E09C E048                       		lsr.w	#8,d0
0001E09E E608                       		lsr.b	#3,d0
0001E0A0 D169 000C                  		add.w	d0,obY(a1)
0001E0A4                            
0001E0A4                            	@noexplosion:
0001E0A4 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E0A8 6700                       		beq.s	@makeanimal
0001E0AA 4E75                       		rts	
0001E0AC                            ; ===========================================================================
0001E0AC                            
0001E0AC                            @makeanimal:
0001E0AC 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001E0B2 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001E0B8 117C 0006 001A             		move.b	#6,obFrame(a0)
0001E0BE 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001E0C4 0668 0020 000C             		addi.w	#$20,obY(a0)
0001E0CA 7C07                       		moveq	#7,d6
0001E0CC 3A3C 009A                  		move.w	#$9A,d5
0001E0D0 78E4                       		moveq	#-$1C,d4
0001E0D2                            
0001E0D2                            	@loop:
0001E0D2 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
0001E0D8 6600                       		bne.s	@fail
0001E0DA 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E0DE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E0E4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E0EA D969 0008                  		add.w	d4,obX(a1)
0001E0EE 5E44                       		addq.w	#7,d4
0001E0F0 3345 0036                  		move.w	d5,$36(a1)
0001E0F4 5145                       		subq.w	#8,d5
0001E0F6 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001E0FA                            
0001E0FA                            	@fail:
0001E0FA 4E75                       		rts	
0001E0FC                            ; ===========================================================================
0001E0FC                            
0001E0FC                            Pri_Animals:	; Routine $C
0001E0FC 7007                       		moveq	#7,d0
0001E0FE C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001E102 6600                       		bne.s	@noanimal
0001E104 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
0001E10A 6600                       		bne.s	@noanimal
0001E10C 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E110 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E116 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E11C 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001E122 0240 001F                  		andi.w	#$1F,d0
0001E126 5D40                       		subq.w	#6,d0
0001E128 4A41                       		tst.w	d1
0001E12A 6A00                       		bpl.s	@ispositive
0001E12C 4440                       		neg.w	d0
0001E12E                            
0001E12E                            	@ispositive:
0001E12E D169 0008                  		add.w	d0,obX(a1)
0001E132 337C 000C 0036             		move.w	#$C,$36(a1)
0001E138                            
0001E138                            	@noanimal:
0001E138 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E13C 6600                       		bne.s	@wait
0001E13E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E142 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001E148                            
0001E148                            	@wait:
0001E148 4E75                       		rts	
0001E14A                            ; ===========================================================================
0001E14A                            
0001E14A                            Pri_EndAct:	; Routine $E
0001E14A 703E                       		moveq	#$3E,d0
0001E14C 7228                       		moveq	#id_Animals,d1
0001E14E 7440                       		moveq	#$40,d2
0001E150 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001E154                            
0001E154                            	@findanimal:
0001E154 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001E156 6700                       		beq.s	@found		; if yes, branch
0001E158 D2C2                       		adda.w	d2,a1		; next object RAM
0001E15A 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001E15E                            
0001E15E 4EB9 0001 1166             		jsr	(GotThroughAct1).l
0001E164 4EF9 0000 FA62             		jmp	(DeleteObject).l
0001E16A                            
0001E16A                            	@found:
0001E16A 4E75                       		rts	
0001E16A 4E75                       		rts	
0001E16C                            		include	"_anim\Prison Capsule.asm"
0001E16C                            ; ---------------------------------------------------------------------------
0001E16C                            ; Animation script - prison capsule
0001E16C                            ; ---------------------------------------------------------------------------
0001E16C 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001E16E 0000                       		dc.w @switchflash-Ani_Pri
0001E170 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001E174                            		even
0001E174                            		even
0001E174                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001E174                            ; ---------------------------------------------------------------------------
0001E174                            ; Sprite mappings - prison capsule
0001E174                            ; ---------------------------------------------------------------------------
0001E174                            Map_Pri_internal:
0001E174 0000                       		dc.w @capsule-Map_Pri_internal
0001E176 0000                       		dc.w @switch1-Map_Pri_internal
0001E178 0000                       		dc.w @broken-Map_Pri_internal
0001E17A 0000                       		dc.w @switch2-Map_Pri_internal
0001E17C 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001E17E 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001E180 0000                       		dc.w @blank-Map_Pri_internal
0001E182 07                         @capsule:	dc.b 7
0001E183 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001E188 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001E18D E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001E192 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001E197 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001E19C 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E1A1 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E1A6 01                         @switch1:	dc.b 1
0001E1A7 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001E1AC 06                         @broken:	dc.b 6
0001E1AD 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001E1B2 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001E1B7 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001E1BC 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001E1C1 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E1C6 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E1CB 01                         @switch2:	dc.b 1
0001E1CC F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001E1D1 02                         @unusedthing1:	dc.b 2
0001E1D2 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001E1D7 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001E1DC 01                         @unusedthing2:	dc.b 1
0001E1DD F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001E1E2 00                         @blank:		dc.b 0
0001E1E4 00                         		even
0001E1E4 00                         		even
0001E1E4                            
0001E1E4                            		include	"_incObj\sub ReactToItem.asm"
0001E1E4                            ; ---------------------------------------------------------------------------
0001E1E4                            ; Subroutine to react to obColType(a0)
0001E1E4                            ; ---------------------------------------------------------------------------
0001E1E4                            
0001E1E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E1E4                            
0001E1E4                            
0001E1E4                            ReactToItem:
0001E1E4 4E71                       		nop	
0001E1E6 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001E1EA 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001E1EE 5142                       		subq.w	#8,d2
0001E1F0 7A00                       		moveq	#0,d5
0001E1F2 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001E1F6 5705                       		subq.b	#3,d5
0001E1F8 9645                       		sub.w	d5,d3
0001E1FA 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001E200 6600                       		bne.s	@notducking	; if not, branch
0001E202 0643 000C                  		addi.w	#$C,d3
0001E206 7A0A                       		moveq	#$A,d5
0001E208                            
0001E208                            	@notducking:
0001E208 383C 0010                  		move.w	#$10,d4
0001E20C DA45                       		add.w	d5,d5
0001E20E 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001E212 3C3C 005F                  		move.w	#$5F,d6
0001E216                            
0001E216                            @loop:
0001E216 4A29 0001                  		tst.b	obRender(a1)
0001E21A 6A00                       		bpl.s	@next
0001E21C 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001E220 6600                       		bne.s	@proximity	; if nonzero, branch
0001E222                            
0001E222                            	@next:
0001E222 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001E226 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001E22A                            
0001E22A 7000                       		moveq	#0,d0
0001E22C 4E75                       		rts	
0001E22E                            ; ===========================================================================
0001E22E                            @sizes:		;   width, height
0001E22E 1414                       		dc.b  $14, $14		; $01
0001E230 0C14                       		dc.b   $C, $14		; $02
0001E232 140C                       		dc.b  $14,  $C		; $03
0001E234 0410                       		dc.b	4, $10		; $04
0001E236 0C12                       		dc.b   $C, $12		; $05
0001E238 1010                       		dc.b  $10, $10		; $06
0001E23A 0606                       		dc.b	6,   6		; $07
0001E23C 180C                       		dc.b  $18,  $C		; $08
0001E23E 0C10                       		dc.b   $C, $10		; $09
0001E240 100C                       		dc.b  $10,  $C		; $0A
0001E242 0808                       		dc.b	8,   8		; $0B
0001E244 1410                       		dc.b  $14, $10		; $0C
0001E246 1408                       		dc.b  $14,   8		; $0D
0001E248 0E0E                       		dc.b   $E,  $E		; $0E
0001E24A 1818                       		dc.b  $18, $18		; $0F
0001E24C 2810                       		dc.b  $28, $10		; $10
0001E24E 1018                       		dc.b  $10, $18		; $11
0001E250 0810                       		dc.b	8, $10		; $12
0001E252 2070                       		dc.b  $20, $70		; $13
0001E254 4020                       		dc.b  $40, $20		; $14
0001E256 8020                       		dc.b  $80, $20		; $15
0001E258 2020                       		dc.b  $20, $20		; $16
0001E25A 0808                       		dc.b	8,   8		; $17
0001E25C 0404                       		dc.b	4,   4		; $18
0001E25E 2008                       		dc.b  $20,   8		; $19
0001E260 0C0C                       		dc.b   $C,  $C		; $1A
0001E262 0804                       		dc.b	8,   4		; $1B
0001E264 1804                       		dc.b  $18,   4		; $1C
0001E266 2804                       		dc.b  $28,   4		; $1D
0001E268 0408                       		dc.b	4,   8		; $1E
0001E26A 0418                       		dc.b	4, $18		; $1F
0001E26C 0428                       		dc.b	4, $28		; $20
0001E26E 0420                       		dc.b	4, $20		; $21
0001E270 1818                       		dc.b  $18, $18		; $22
0001E272 0C18                       		dc.b   $C, $18		; $23
0001E274 4808                       		dc.b  $48,   8		; $24
0001E276                            ; ===========================================================================
0001E276                            
0001E276                            @proximity:
0001E276 0240 003F                  		andi.w	#$3F,d0
0001E27A D040                       		add.w	d0,d0
0001E27C 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001E280 7200                       		moveq	#0,d1
0001E282 121A                       		move.b	(a2)+,d1
0001E284 3029 0008                  		move.w	obX(a1),d0
0001E288 9041                       		sub.w	d1,d0
0001E28A 9042                       		sub.w	d2,d0
0001E28C 6400                       		bcc.s	@outsidex	; branch if not touching
0001E28E D241                       		add.w	d1,d1
0001E290 D041                       		add.w	d1,d0
0001E292 6500                       		bcs.s	@withinx	; branch if touching
0001E294 6000 FF8C                  		bra.w	@next
0001E298                            ; ===========================================================================
0001E298                            
0001E298                            @outsidex:
0001E298 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E29C B044                       		cmp.w	d4,d0
0001E29E 6200 FF82                  		bhi.w	@next
0001E2A2                            
0001E2A2                            @withinx:
0001E2A2 7200                       		moveq	#0,d1
0001E2A4 121A                       		move.b	(a2)+,d1
0001E2A6 3029 000C                  		move.w	obY(a1),d0
0001E2AA 9041                       		sub.w	d1,d0
0001E2AC 9043                       		sub.w	d3,d0
0001E2AE 6400                       		bcc.s	@outsidey	; branch if not touching
0001E2B0 D241                       		add.w	d1,d1
0001E2B2 D240                       		add.w	d0,d1
0001E2B4 6500                       		bcs.s	@withiny	; branch if touching
0001E2B6 6000 FF6A                  		bra.w	@next
0001E2BA                            
0001E2BA                            ; ===========================================================================
0001E2BA                            
0001E2BA                            @outsidey:
0001E2BA 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E2BE B045                       		cmp.w	d5,d0
0001E2C0 6200 FF60                  		bhi.w	@next
0001E2C4                            
0001E2C4                            @withiny:
0001E2C4                            	@chktype:
0001E2C4 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001E2CA 6600 0000                          	bne	NotGHZReact  ;TIS
0001E2CE 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001E2D2 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001E2D6 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E2DA 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001E2DE 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E2E2 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E2E6 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E2EA                            NotGHZReact:                      ;TIS
0001E2EA 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E2EE 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E2F2 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E2F6 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E2FA 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E2FE 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E300 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E304                            
0001E304                            ; obColType is $40-$7F (powerups)
0001E304                            
0001E304 1029 0020                  		move.b	obColType(a1),d0
0001E308 0200 003F                  		andi.b	#$3F,d0
0001E30C 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E310 6700                       		beq.s	React_Monitor	; if yes, branch
0001E312 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E318 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E31C 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E320                            
0001E320                            	@invincible:
0001E320 4E75                       		rts	
0001E322                            ; ===========================================================================
0001E322                            
0001E322                            React_Monitor:
0001E322 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E326 6A00                       		bpl.s	@movingdown	; if not, branch
0001E328                            
0001E328 3028 000C                  		move.w	obY(a0),d0
0001E32C 0440 0010                  		subi.w	#$10,d0
0001E330 B069 000C                  		cmp.w	obY(a1),d0
0001E334 6500                       		bcs.s	@donothing
0001E336 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E33A 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E340 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E344 6600                       		bne.s	@donothing
0001E346 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E34A 4E75                       		rts	
0001E34C                            ; ===========================================================================
0001E34C                            
0001E34C                            @movingdown:
0001E34C 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E352 6600                       		bne.s	@donothing
0001E354 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E358 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E35C                            
0001E35C                            	@donothing:
0001E35C 4E75                       		rts	
0001E35E                            ; ===========================================================================
0001E35E                            
0001E35E                            React_Enemy:
0001E35E 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E362 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E364 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E36A 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E36E 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E374 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E378                            
0001E378                            	@donthurtsonic:
0001E378 4A29 0021                  		tst.b	obColProp(a1)
0001E37C 6700                       		beq.s	breakenemy
0001E37E                            
0001E37E 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E382 4468 0012                  		neg.w	obVelY(a0)
0001E386 E0E8 0010                  		asr	obVelX(a0)
0001E38A E0E8 0012                  		asr	obVelY(a0)
0001E38E 137C 0000 0020             		move.b	#0,obColType(a1)
0001E394 5329 0021                  		subq.b	#1,obColProp(a1)
0001E398 6600                       		bne.s	@flagnotclear
0001E39A 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E3A0                            
0001E3A0                            	@flagnotclear:
0001E3A0 4E75                       		rts	
0001E3A2                            ; ===========================================================================
0001E3A2                            
0001E3A2                            breakenemy:
0001E3A2 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E3A8 7000                       		moveq	#0,d0
0001E3AA 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E3AE 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E3B2 0C40 0006                  		cmpi.w	#6,d0
0001E3B6 6500                       		bcs.s	@bonusokay
0001E3B8 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E3BA                            
0001E3BA                            	@bonusokay:
0001E3BA 3340 003E                  		move.w	d0,$3E(a1)
0001E3BE 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E3C2 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E3C8 6500                       		bcs.s	@lessthan16	; if not, branch
0001E3CA 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E3CE 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E3D4                            
0001E3D4                            	@lessthan16:
0001E3D4 6100 0000                  		bsr.w	AddPoints
0001E3D8 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E3DC 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E3E2 4A68 0012                  		tst.w	obVelY(a0)
0001E3E6 6B00                       		bmi.s	@bouncedown
0001E3E8 3028 000C                  		move.w	obY(a0),d0
0001E3EC B069 000C                  		cmp.w	obY(a1),d0
0001E3F0 6400                       		bcc.s	@bounceup
0001E3F2 4468 0012                  		neg.w	obVelY(a0)
0001E3F6 4E75                       		rts	
0001E3F8                            ; ===========================================================================
0001E3F8                            
0001E3F8                            	@bouncedown:
0001E3F8 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E3FE 4E75                       		rts	
0001E400                            
0001E400                            	@bounceup:
0001E400 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E406 4E75                       		rts	
0001E408                            
0001E408 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E410                            
0001E410                            ; ===========================================================================
0001E410                            
0001E410                            React_Caterkiller:
0001E410 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E416                            
0001E416                            React_ChkHurt:
0001E416 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E41A 6700                       		beq.s	notinvincible	; if not, branch
0001E41C                            
0001E41C                            	isflashing:
0001E41C 70FF                       		moveq	#-1,d0
0001E41E 4E75                       		rts	
0001E420                            ; ===========================================================================
0001E420                            
0001E420                            	notinvincible:
0001E420 4E71                       		nop	
0001E422 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E426 66F4                       		bne.s	isflashing	; if yes, branch
0001E428 2449                       		movea.l	a1,a2
0001E42A                            
0001E42A                            ; End of function ReactToItem
0001E42A                            ; continue straight to HurtSonic
0001E42A                            
0001E42A                            ; ---------------------------------------------------------------------------
0001E42A                            ; Hurting Sonic	subroutine
0001E42A                            ; ---------------------------------------------------------------------------
0001E42A                            
0001E42A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E42A                            
0001E42A                            
0001E42A                            HurtSonic:
0001E42A 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E42E 6600                       		bne.s	@hasshield	; if yes, branch
0001E430 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E434 6600                       		bne.s	@hasshield	; if yes, branch
0001E436 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E43A 6600                       		bne.s	@hasshield	; if yes, branch
0001E43C 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E440 6600                       		bne.s	@hasshield	; if yes, branch
0001E442 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E446 6700 0000                  		beq.w	@norings	; if not, branch
0001E44A                            
0001E44A 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
0001E450 6600                       		bne.s	@hasshield
0001E452 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E456 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E45C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E462                            
0001E462                            	@hasshield:
0001E462 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E468 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E46A 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E46E 6700 FFAC                  		beq.w	isflashing
0001E472 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E476 6700 FFA4                  		beq.w	isflashing
0001E47A                            
0001E47A                            	@hasrshield:
0001E47A 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E480 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E482 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E486 6700 FF94                  		beq.w 	isflashing
0001E48A 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E48E 6700 FF8C                  		beq.w 	isflashing
0001E492 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E496 6700 FF84                  		beq.w 	isflashing
0001E49A 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E49E 6700 FF7C                  		beq.w 	isflashing
0001E4A2 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E4A6 6700 FF74                  		beq.w 	isflashing
0001E4AA 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E4AE 6700 FF6C                  		beq.w 	isflashing
0001E4B2 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E4B6 6700 FF64                  		beq.w 	isflashing
0001E4BA 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E4BE 6700 FF5C                  		beq.w 	isflashing
0001E4C2                            
0001E4C2                            	@hasspshield:
0001E4C2 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E4C8 6600                       		bne.s	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E4CA 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E4CE 6700 FF4C                  		beq.w 	isflashing
0001E4D2 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E4D6 6700 FF44                  		beq.w 	isflashing
0001E4DA 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E4DE 6700 FF3C                  		beq.w 	isflashing
0001E4E2 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E4E6 6700 FF34                  		beq.w 	isflashing
0001E4EA 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E4EE 6700 FF2C                  		beq.w 	isflashing
0001E4F2 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E4F6 6700 FF24                  		beq.w 	isflashing
0001E4FA 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E4FE 6700 FF1C                  		beq.w 	isflashing
0001E502 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E506 6700 FF14                  		beq.w 	isflashing
0001E50A 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E50E 6700 FF0C                  		beq.w 	isflashing
0001E512 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E516 6700 FE8A                  		beq.w 	breakenemy
0001E51A 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E51E 6700 FE82                  		beq.w 	breakenemy
0001E522 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E526 6700 FE7A                  		beq.w 	breakenemy
0001E52A 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E52E 6700 FE72                  		beq.w 	breakenemy
0001E532 0C12 005F                  		cmpi.b	#$5F,(a2)	; was damage caused by Bomb enemy?
0001E536 6700 FE6A                  		beq.w 	breakenemy
0001E53A                            
0001E53A                            
0001E53A                            	@hurtcont:
0001E53A 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E540 11FC 0000 F5C9             		move.b	#0,(v_gshield).w	; remove g shield
0001E546 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E54C                            		
0001E54C 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E552 6700                       		beq.s	@hurtcont2	;if not, branch
0001E554 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E558                            		
0001E558                            	@hurtcont2:
0001E558 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E55E 4EB9 0001 6490             		jsr		Sonic_ResetOnFloor
0001E564 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E56A 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E570 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E576 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E57C 6700                       		beq.s	@isdry		; if not, branch
0001E57E                            
0001E57E 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E584 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E58A                            
0001E58A                            	@isdry:
0001E58A 3028 0008                  		move.w	obX(a0),d0
0001E58E B06A 0008                  		cmp.w	obX(a2),d0
0001E592 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E594 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E598                            
0001E598                            	@isleft:
0001E598 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E59E 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E5A4 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E5AA 317C 0120 0030             		move.w	#$120,$30(a0)
0001E5B0 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E5B4 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E5B6 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E5BA 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E5BC 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E5C2 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E5C8 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E5CE 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E5D2 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E5D6 6600                       		bne.s	@sound		; if not, branch
0001E5D8 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E5DC 6600                       		bne.s	@sound		; if not, branch
0001E5DE 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E5E2                            
0001E5E2                            	@sound:
0001E5E2 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E5E8 70FF                       		moveq	#-1,d0
0001E5EA 4E75                       		rts	
0001E5EC                            
0001E5EC                            	@hurtelec:
0001E5EC 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E5F2 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E5F8 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E5FC 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E600 66E0                       		bne.s	@sound		; if not, branch
0001E602 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E606 66DA                       		bne.s	@sound		; if not, branch
0001E608 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E60C                            ; ===========================================================================
0001E60C                            
0001E60C                            @norings:
0001E60C 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E610 6600 FE50                  		bne.w	@hasshield	; if yes, branch
0001E614                            
0001E614                            ; ---------------------------------------------------------------------------
0001E614                            ; Subroutine to	kill Sonic
0001E614                            ; ---------------------------------------------------------------------------
0001E614                            
0001E614                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E614                            
0001E614                            
0001E614                            KillSonic:
0001E614 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E618 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E61C 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E622 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E628 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E62E 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E634 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E63A 4EB9 0001 6490             		jsr		Sonic_ResetOnFloor
0001E640 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E646 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E64C 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E652 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E658 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E65E 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E662 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E664 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E668 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E66A 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E670 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E676 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E67A 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E67E 6600                       		bne.s	@sound
0001E680 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E684                            
0001E684                            	@sound:
0001E684 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E68A                            
0001E68A                            	@dontdie:
0001E68A 70FF                       		moveq	#-1,d0
0001E68C 4E75                       		rts	
0001E68E                            ; End of function KillSonic
0001E68E                            Kill_Lava:	
0001E68E 08E8 0007 0002             	bset	#7,obGfx(a0)
0001E694 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E69A 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E69E 4EB9 0000 12A0                 jsr		(PlaySound_Special).l
0001E6A4                            
0001E6A4                            
0001E6A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E6A4                            
0001E6A4                            
0001E6A4                            React_Special:
0001E6A4 1229 0020                  		move.b	obColType(a1),d1
0001E6A8 0201 003F                  		andi.b	#$3F,d1
0001E6AC 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E6B0 6700                       		beq.s	@caterkiller	; if yes, branch
0001E6B2 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E6B6 6700                       		beq.s	@yadrin		; if yes, branch
0001E6B8 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E6BC 6700                       		beq.s	@D7orE1		; if yes, branch
0001E6BE 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E6C2 6700                       		beq.s	@D7orE1		; if yes, branch
0001E6C4 4E75                       		rts	
0001E6C6                            ; ===========================================================================
0001E6C6                            
0001E6C6                            @caterkiller:
0001E6C6 6000 FD48                  		bra.w	React_Caterkiller
0001E6CA                            ; ===========================================================================
0001E6CA                            
0001E6CA                            @yadrin:
0001E6CA 9A40                       		sub.w	d0,d5
0001E6CC 0C45 0008                  		cmpi.w	#8,d5
0001E6D0 6400                       		bcc.s	@normalenemy
0001E6D2 3029 0008                  		move.w	obX(a1),d0
0001E6D6 5940                       		subq.w	#4,d0
0001E6D8 0829 0000 0022             		btst	#0,obStatus(a1)
0001E6DE 6700                       		beq.s	@noflip
0001E6E0 0440 0010                  		subi.w	#$10,d0
0001E6E4                            
0001E6E4                            	@noflip:
0001E6E4 9042                       		sub.w	d2,d0
0001E6E6 6400                       		bcc.s	@loc_1B13C
0001E6E8 0640 0018                  		addi.w	#$18,d0
0001E6EC 6500                       		bcs.s	@loc_1B140
0001E6EE 6000                       		bra.s	@normalenemy
0001E6F0                            ; ===========================================================================
0001E6F0                            
0001E6F0                            	@loc_1B13C:
0001E6F0 B044                       		cmp.w	d4,d0
0001E6F2 6200                       		bhi.s	@normalenemy
0001E6F4                            
0001E6F4                            	@loc_1B140:
0001E6F4 6000 FD20                  		bra.w	React_ChkHurt
0001E6F8                            ; ===========================================================================
0001E6F8                            
0001E6F8                            	@normalenemy:
0001E6F8 6000 FC64                  		bra.w	React_Enemy
0001E6FC                            ; ===========================================================================
0001E6FC                            
0001E6FC                            @D7orE1:
0001E6FC 5229 0021                  		addq.b	#1,obColProp(a1)
0001E700 4E75                       		rts	
0001E702                            ; End of function React_Special
0001E702                            
0001E702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E702                            
0001E702                            React_ChkWaterTag:
0001E702 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E708 6600 0000                  		bne	NotWaterTag
0001E70C 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E712                            	NotWaterTag:
0001E712 4E75                       		rts
0001E714                            
0001E714                            React_WaterTag:
0001E714 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E71A 6700 0000                  		beq	SkipWaterTag
0001E71E 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E724                            	SkipWaterTag:
0001E724 4E75                       		rts
0001E724 4E75                       		rts
0001E726                            
0001E726                            ; ---------------------------------------------------------------------------
0001E726                            ; Subroutine to	show the special stage layout
0001E726                            ; ---------------------------------------------------------------------------
0001E726                            
0001E726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E726                            
0001E726                            
0001E726                            SS_ShowLayout:
0001E726 6100 0000                  		bsr.w	SS_AniWallsRings
0001E72A 6100 0000                  		bsr.w	SS_AniItems
0001E72E 3F05                       		move.w	d5,-(sp)
0001E730 43F8 8000                  		lea	($FFFF8000).w,a1
0001E734 1038 F780                  		move.b	(v_ssangle).w,d0
0001E738 0200 00FC                  		andi.b	#$FC,d0
0001E73C 4EB9 0000 3A82             		jsr	(CalcSine).l
0001E742 3800                       		move.w	d0,d4
0001E744 3A01                       		move.w	d1,d5
0001E746 C9FC 0018                  		muls.w	#$18,d4
0001E74A CBFC 0018                  		muls.w	#$18,d5
0001E74E 7400                       		moveq	#0,d2
0001E750 3438 F700                  		move.w	(v_screenposx).w,d2
0001E754 84FC 0018                  		divu.w	#$18,d2
0001E758 4842                       		swap	d2
0001E75A 4442                       		neg.w	d2
0001E75C 0642 FF4C                  		addi.w	#-$B4,d2
0001E760 7600                       		moveq	#0,d3
0001E762 3638 F704                  		move.w	(v_screenposy).w,d3
0001E766 86FC 0018                  		divu.w	#$18,d3
0001E76A 4843                       		swap	d3
0001E76C 4443                       		neg.w	d3
0001E76E 0643 FF4C                  		addi.w	#-$B4,d3
0001E772 3E3C 000F                  		move.w	#$F,d7
0001E776                            
0001E776                            loc_1B19E:
0001E776 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E77A 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E77E 4440                       		neg.w	d0
0001E780 C3C2                       		muls.w	d2,d1
0001E782 C1C3                       		muls.w	d3,d0
0001E784 2C00                       		move.l	d0,d6
0001E786 DC81                       		add.l	d1,d6
0001E788 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E78C C1C2                       		muls.w	d2,d0
0001E78E C3C3                       		muls.w	d3,d1
0001E790 D280                       		add.l	d0,d1
0001E792 2406                       		move.l	d6,d2
0001E794 3C3C 000F                  		move.w	#$F,d6
0001E798                            
0001E798                            loc_1B1C0:
0001E798 2002                       		move.l	d2,d0
0001E79A E080                       		asr.l	#8,d0
0001E79C 32C0                       		move.w	d0,(a1)+
0001E79E 2001                       		move.l	d1,d0
0001E7A0 E080                       		asr.l	#8,d0
0001E7A2 32C0                       		move.w	d0,(a1)+
0001E7A4 D485                       		add.l	d5,d2
0001E7A6 D284                       		add.l	d4,d1
0001E7A8 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E7AC                            
0001E7AC 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E7B0 0643 0018                  		addi.w	#$18,d3
0001E7B4 51CF FFC0                  		dbf	d7,loc_1B19E
0001E7B8                            
0001E7B8 3A1F                       		move.w	(sp)+,d5
0001E7BA 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E7C0 7000                       		moveq	#0,d0
0001E7C2 3038 F704                  		move.w	(v_screenposy).w,d0
0001E7C6 80FC 0018                  		divu.w	#$18,d0
0001E7CA C0FC 0080                  		mulu.w	#$80,d0
0001E7CE D1C0                       		adda.l	d0,a0
0001E7D0 7000                       		moveq	#0,d0
0001E7D2 3038 F700                  		move.w	(v_screenposx).w,d0
0001E7D6 80FC 0018                  		divu.w	#$18,d0
0001E7DA D0C0                       		adda.w	d0,a0
0001E7DC 49F8 8000                  		lea	($FFFF8000).w,a4
0001E7E0 3E3C 000F                  		move.w	#$F,d7
0001E7E4                            
0001E7E4                            loc_1B20C:
0001E7E4 3C3C 000F                  		move.w	#$F,d6
0001E7E8                            
0001E7E8                            loc_1B210:
0001E7E8 7000                       		moveq	#0,d0
0001E7EA 1018                       		move.b	(a0)+,d0
0001E7EC 6700                       		beq.s	loc_1B268
0001E7EE 0C00 004E                  		cmpi.b	#$4E,d0
0001E7F2 6200                       		bhi.s	loc_1B268
0001E7F4 3614                       		move.w	(a4),d3
0001E7F6 0643 0120                  		addi.w	#$120,d3
0001E7FA 0C43 0070                  		cmpi.w	#$70,d3
0001E7FE 6500                       		blo.s	loc_1B268
0001E800 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E804 6400                       		bhs.s	loc_1B268
0001E806 342C 0002                  		move.w	2(a4),d2
0001E80A 0642 00F0                  		addi.w	#$F0,d2
0001E80E 0C42 0070                  		cmpi.w	#$70,d2
0001E812 6500                       		blo.s	loc_1B268
0001E814 0C42 0170                  		cmpi.w	#$170,d2
0001E818 6400                       		bhs.s	loc_1B268
0001E81A 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E820 E748                       		lsl.w	#3,d0
0001E822 4BF5 0000                  		lea	(a5,d0.w),a5
0001E826 225D                       		movea.l	(a5)+,a1
0001E828 321D                       		move.w	(a5)+,d1
0001E82A D241                       		add.w	d1,d1
0001E82C D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E830 365D                       		movea.w	(a5)+,a3
0001E832 7200                       		moveq	#0,d1
0001E834 1219                       		move.b	(a1)+,d1
0001E836 5301                       		subq.b	#1,d1
0001E838 6B00                       		bmi.s	loc_1B268
0001E83A 4EB9 0000 FB86             		jsr	(BuildSpr_Normal).l
0001E840                            
0001E840                            loc_1B268:
0001E840 584C                       		addq.w	#4,a4
0001E842 51CE FFA4                  		dbf	d6,loc_1B210
0001E846                            
0001E846 41E8 0070                  		lea	$70(a0),a0
0001E84A 51CF FF98                  		dbf	d7,loc_1B20C
0001E84E                            
0001E84E 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E852 0C05 0050                  		cmpi.b	#$50,d5
0001E856 6700                       		beq.s	loc_1B288
0001E858 24BC 0000 0000             		move.l	#0,(a2)
0001E85E 4E75                       		rts	
0001E860                            ; ===========================================================================
0001E860                            
0001E860                            loc_1B288:
0001E860 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E866 4E75                       		rts	
0001E868                            ; End of function SS_ShowLayout
0001E868                            
0001E868                            ; ---------------------------------------------------------------------------
0001E868                            ; Subroutine to	animate	walls and rings	in the special stage
0001E868                            ; ---------------------------------------------------------------------------
0001E868                            
0001E868                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E868                            
0001E868                            
0001E868                            SS_AniWallsRings:
0001E868 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E86E 7000                       		moveq	#0,d0
0001E870 1038 F780                  		move.b	(v_ssangle).w,d0
0001E874 E408                       		lsr.b	#2,d0
0001E876 0240 000F                  		andi.w	#$F,d0
0001E87A 7223                       		moveq	#$23,d1
0001E87C                            
0001E87C                            loc_1B2A4:
0001E87C 3280                       		move.w	d0,(a1)
0001E87E 5049                       		addq.w	#8,a1
0001E880 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E884                            
0001E884 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E88A 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E88E 6A00                       		bpl.s	loc_1B2C8
0001E890 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E896 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E89A 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E8A0                            
0001E8A0                            loc_1B2C8:
0001E8A0 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E8A6 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E8AA 6A00                       		bpl.s	loc_1B2E4
0001E8AC 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E8B2 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E8B6 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E8BC                            
0001E8BC                            loc_1B2E4:
0001E8BC 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E8C0 1340 0138                  		move.b	d0,$138(a1)
0001E8C4 1340 0160                  		move.b	d0,$160(a1)
0001E8C8 1340 0148                  		move.b	d0,$148(a1)
0001E8CC 1340 0150                  		move.b	d0,$150(a1)
0001E8D0 1340 01D8                  		move.b	d0,$1D8(a1)
0001E8D4 1340 01E0                  		move.b	d0,$1E0(a1)
0001E8D8 1340 01E8                  		move.b	d0,$1E8(a1)
0001E8DC 1340 01F0                  		move.b	d0,$1F0(a1)
0001E8E0 1340 01F8                  		move.b	d0,$1F8(a1)
0001E8E4 1340 0200                  		move.b	d0,$200(a1)
0001E8E8 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E8EC 6A00                       		bpl.s	loc_1B326
0001E8EE 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E8F4 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E8F8 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E8FE                            
0001E8FE                            loc_1B326:
0001E8FE 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E902 1340 0168                  		move.b	d0,$168(a1)
0001E906 1340 0170                  		move.b	d0,$170(a1)
0001E90A 1340 0178                  		move.b	d0,$178(a1)
0001E90E 1340 0180                  		move.b	d0,$180(a1)
0001E912 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E916 6A00                       		bpl.s	loc_1B350
0001E918 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E91E 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E922 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E928                            
0001E928                            loc_1B350:
0001E928 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E92E 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E934 7000                       		moveq	#0,d0
0001E936 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E93A D040                       		add.w	d0,d0
0001E93C 41F0 0000                  		lea	(a0,d0.w),a0
0001E940 3290                       		move.w	(a0),(a1)
0001E942 3368 0002 0008             		move.w	2(a0),8(a1)
0001E948 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E94E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E954 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E95A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E960 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E966 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E96C D0FC 0020                  		adda.w	#$20,a0
0001E970 D2FC 0048                  		adda.w	#$48,a1
0001E974 3290                       		move.w	(a0),(a1)
0001E976 3368 0002 0008             		move.w	2(a0),8(a1)
0001E97C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E982 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E988 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E98E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E994 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E99A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E9A0 D0FC 0020                  		adda.w	#$20,a0
0001E9A4 D2FC 0048                  		adda.w	#$48,a1
0001E9A8 3290                       		move.w	(a0),(a1)
0001E9AA 3368 0002 0008             		move.w	2(a0),8(a1)
0001E9B0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E9B6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E9BC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E9C2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E9C8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E9CE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E9D4 D0FC 0020                  		adda.w	#$20,a0
0001E9D8 D2FC 0048                  		adda.w	#$48,a1
0001E9DC 3290                       		move.w	(a0),(a1)
0001E9DE 3368 0002 0008             		move.w	2(a0),8(a1)
0001E9E4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E9EA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E9F0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E9F6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E9FC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001EA02 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001EA08 D0FC 0020                  		adda.w	#$20,a0
0001EA0C D2FC 0048                  		adda.w	#$48,a1
0001EA10 4E75                       		rts	
0001EA12                            ; End of function SS_AniWallsRings
0001EA12                            
0001EA12                            ; ===========================================================================
0001EA12 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001EA22 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001EA32 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001EA42 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001EA52 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001EA62 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001EA72 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001EA82 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001EA92                            ; ---------------------------------------------------------------------------
0001EA92                            ; Subroutine to	remove items when you collect them in the special stage
0001EA92                            ; ---------------------------------------------------------------------------
0001EA92                            
0001EA92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA92                            
0001EA92                            
0001EA92                            SS_RemoveCollectedItem:
0001EA92 45F9 00FF 4400             		lea	($FF4400).l,a2
0001EA98 303C 001F                  		move.w	#$1F,d0
0001EA9C                            
0001EA9C                            loc_1B4C4:
0001EA9C 4A12                       		tst.b	(a2)
0001EA9E 6700                       		beq.s	locret_1B4CE
0001EAA0 504A                       		addq.w	#8,a2
0001EAA2 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001EAA6                            
0001EAA6                            locret_1B4CE:
0001EAA6 4E75                       		rts	
0001EAA8                            ; End of function SS_RemoveCollectedItem
0001EAA8                            
0001EAA8                            ; ---------------------------------------------------------------------------
0001EAA8                            ; Subroutine to	animate	special	stage items when you touch them
0001EAA8                            ; ---------------------------------------------------------------------------
0001EAA8                            
0001EAA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EAA8                            
0001EAA8                            
0001EAA8                            SS_AniItems:
0001EAA8 41F9 00FF 4400             		lea	($FF4400).l,a0
0001EAAE 3E3C 001F                  		move.w	#$1F,d7
0001EAB2                            
0001EAB2                            loc_1B4DA:
0001EAB2 7000                       		moveq	#0,d0
0001EAB4 1010                       		move.b	(a0),d0
0001EAB6 6700                       		beq.s	loc_1B4E8
0001EAB8 E548                       		lsl.w	#2,d0
0001EABA 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001EABE 4E91                       		jsr	(a1)
0001EAC0                            
0001EAC0                            loc_1B4E8:
0001EAC0 5048                       		addq.w	#8,a0
0001EAC2                            
0001EAC2                            loc_1B4EA:
0001EAC2 51CF FFEE                  		dbf	d7,loc_1B4DA
0001EAC6                            
0001EAC6 4E75                       		rts	
0001EAC8                            ; End of function SS_AniItems
0001EAC8                            
0001EAC8                            ; ===========================================================================
0001EAC8 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001EACC 0000 0000                  		dc.l SS_AniBumper
0001EAD0 0000 0000                  		dc.l SS_Ani1Up
0001EAD4 0000 0000                  		dc.l SS_AniReverse
0001EAD8 0000 0000                  		dc.l SS_AniEmeraldSparks
0001EADC 0000 0000                  		dc.l SS_AniGlassBlock
0001EAE0                            ; ===========================================================================
0001EAE0                            
0001EAE0                            SS_AniRingSparks:
0001EAE0 5328 0002                  		subq.b	#1,2(a0)
0001EAE4 6A00                       		bpl.s	locret_1B530
0001EAE6 117C 0005 0002             		move.b	#5,2(a0)
0001EAEC 7000                       		moveq	#0,d0
0001EAEE 1028 0003                  		move.b	3(a0),d0
0001EAF2 5228 0003                  		addq.b	#1,3(a0)
0001EAF6 2268 0004                  		movea.l	4(a0),a1
0001EAFA 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001EAFE 1280                       		move.b	d0,(a1)
0001EB00 6600                       		bne.s	locret_1B530
0001EB02 4290                       		clr.l	(a0)
0001EB04 42A8 0004                  		clr.l	4(a0)
0001EB08                            
0001EB08                            locret_1B530:
0001EB08 4E75                       		rts	
0001EB0A                            ; ===========================================================================
0001EB0A 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001EB10                            ; ===========================================================================
0001EB10                            
0001EB10                            SS_AniBumper:
0001EB10 5328 0002                  		subq.b	#1,2(a0)
0001EB14 6A00                       		bpl.s	locret_1B566
0001EB16 117C 0007 0002             		move.b	#7,2(a0)
0001EB1C 7000                       		moveq	#0,d0
0001EB1E 1028 0003                  		move.b	3(a0),d0
0001EB22 5228 0003                  		addq.b	#1,3(a0)
0001EB26 2268 0004                  		movea.l	4(a0),a1
0001EB2A 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001EB2E 6600                       		bne.s	loc_1B564
0001EB30 4290                       		clr.l	(a0)
0001EB32 42A8 0004                  		clr.l	4(a0)
0001EB36 12BC 0025                  		move.b	#$25,(a1)
0001EB3A 4E75                       		rts	
0001EB3C                            ; ===========================================================================
0001EB3C                            
0001EB3C                            loc_1B564:
0001EB3C 1280                       		move.b	d0,(a1)
0001EB3E                            
0001EB3E                            locret_1B566:
0001EB3E 4E75                       		rts	
0001EB40                            ; ===========================================================================
0001EB40 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001EB46                            ; ===========================================================================
0001EB46                            
0001EB46                            SS_Ani1Up:
0001EB46 5328 0002                  		subq.b	#1,2(a0)
0001EB4A 6A00                       		bpl.s	locret_1B596
0001EB4C 117C 0005 0002             		move.b	#5,2(a0)
0001EB52 7000                       		moveq	#0,d0
0001EB54 1028 0003                  		move.b	3(a0),d0
0001EB58 5228 0003                  		addq.b	#1,3(a0)
0001EB5C 2268 0004                  		movea.l	4(a0),a1
0001EB60 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001EB64 1280                       		move.b	d0,(a1)
0001EB66 6600                       		bne.s	locret_1B596
0001EB68 4290                       		clr.l	(a0)
0001EB6A 42A8 0004                  		clr.l	4(a0)
0001EB6E                            
0001EB6E                            locret_1B596:
0001EB6E 4E75                       		rts	
0001EB70                            ; ===========================================================================
0001EB70 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001EB76                            ; ===========================================================================
0001EB76                            
0001EB76                            SS_AniReverse:
0001EB76 5328 0002                  		subq.b	#1,2(a0)
0001EB7A 6A00                       		bpl.s	locret_1B5CC
0001EB7C 117C 0007 0002             		move.b	#7,2(a0)
0001EB82 7000                       		moveq	#0,d0
0001EB84 1028 0003                  		move.b	3(a0),d0
0001EB88 5228 0003                  		addq.b	#1,3(a0)
0001EB8C 2268 0004                  		movea.l	4(a0),a1
0001EB90 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001EB94 6600                       		bne.s	loc_1B5CA
0001EB96 4290                       		clr.l	(a0)
0001EB98 42A8 0004                  		clr.l	4(a0)
0001EB9C 12BC 002B                  		move.b	#$2B,(a1)
0001EBA0 4E75                       		rts	
0001EBA2                            ; ===========================================================================
0001EBA2                            
0001EBA2                            loc_1B5CA:
0001EBA2 1280                       		move.b	d0,(a1)
0001EBA4                            
0001EBA4                            locret_1B5CC:
0001EBA4 4E75                       		rts	
0001EBA6                            ; ===========================================================================
0001EBA6 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001EBAC                            ; ===========================================================================
0001EBAC                            
0001EBAC                            SS_AniEmeraldSparks:
0001EBAC 5328 0002                  		subq.b	#1,2(a0)
0001EBB0 6A00                       		bpl.s	locret_1B60C
0001EBB2 117C 0005 0002             		move.b	#5,2(a0)
0001EBB8 7000                       		moveq	#0,d0
0001EBBA 1028 0003                  		move.b	3(a0),d0
0001EBBE 5228 0003                  		addq.b	#1,3(a0)
0001EBC2 2268 0004                  		movea.l	4(a0),a1
0001EBC6 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001EBCA 1280                       		move.b	d0,(a1)
0001EBCC 6600                       		bne.s	locret_1B60C
0001EBCE 4290                       		clr.l	(a0)
0001EBD0 42A8 0004                  		clr.l	4(a0)
0001EBD4 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001EBE4                            
0001EBE4                            locret_1B60C:
0001EBE4 4E75                       		rts	
0001EBE6                            ; ===========================================================================
0001EBE6 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001EBEC                            ; ===========================================================================
0001EBEC                            
0001EBEC                            SS_AniGlassBlock:
0001EBEC 5328 0002                  		subq.b	#1,2(a0)
0001EBF0 6A00                       		bpl.s	locret_1B640
0001EBF2 117C 0001 0002             		move.b	#1,2(a0)
0001EBF8 7000                       		moveq	#0,d0
0001EBFA 1028 0003                  		move.b	3(a0),d0
0001EBFE 5228 0003                  		addq.b	#1,3(a0)
0001EC02 2268 0004                  		movea.l	4(a0),a1
0001EC06 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001EC0A 1280                       		move.b	d0,(a1)
0001EC0C 6600                       		bne.s	locret_1B640
0001EC0E 12A8 0004                  		move.b	4(a0),(a1)
0001EC12 4290                       		clr.l	(a0)
0001EC14 42A8 0004                  		clr.l	4(a0)
0001EC18                            
0001EC18                            locret_1B640:
0001EC18 4E75                       		rts	
0001EC1A                            ; ===========================================================================
0001EC1A 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001EC24                            
0001EC24                            ; ---------------------------------------------------------------------------
0001EC24                            ; Special stage	layout pointers
0001EC24                            ; ---------------------------------------------------------------------------
0001EC24                            SS_LayoutIndex:
0001EC24 0000 0000                  		dc.l SS_1
0001EC28 0000 0000                  		dc.l SS_2
0001EC2C 0000 0000                  		dc.l SS_3
0001EC30 0000 0000                  		dc.l SS_4
0001EC34 0000 0000                  		dc.l SS_5
0001EC38 0000 0000                  		dc.l SS_6
0001EC3C                            		even
0001EC3C                            
0001EC3C                            ; ---------------------------------------------------------------------------
0001EC3C                            ; Special stage start locations
0001EC3C                            ; ---------------------------------------------------------------------------
0001EC3C                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001EC3C                            ; ---------------------------------------------------------------------------
0001EC3C                            ; Special stage start locations
0001EC3C                            ; ---------------------------------------------------------------------------
0001EC3C                            
0001EC3C                            		incbin	"startpos\ss1.bin"
0001EC40                            		incbin	"startpos\ss2.bin"
0001EC44                            		incbin	"startpos\ss3.bin"
0001EC48                            		incbin	"startpos\ss4.bin"
0001EC4C                            		incbin	"startpos\ss5.bin"
0001EC50                            		incbin	"startpos\ss6.bin"
0001EC54                            		even
0001EC54                            		even
0001EC54                            
0001EC54                            ; ---------------------------------------------------------------------------
0001EC54                            ; Subroutine to	load special stage layout
0001EC54                            ; ---------------------------------------------------------------------------
0001EC54                            
0001EC54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC54                            
0001EC54                            
0001EC54                            SS_Load:
0001EC54 7000                       		moveq	#0,d0
0001EC56 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001EC5A 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001EC5E 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001EC64 6500                       		blo.s	SS_ChkEmldNum
0001EC66 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001EC6C                            
0001EC6C                            SS_ChkEmldNum:
0001EC6C 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001EC72 6700                       		beq.s	SS_LoadData	; if yes, branch
0001EC74 7200                       		moveq	#0,d1
0001EC76 1238 FE57                  		move.b	(v_emeralds).w,d1
0001EC7A 5301                       		subq.b	#1,d1
0001EC7C 6500                       		blo.s	SS_LoadData
0001EC7E 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001EC82                            
0001EC82                            SS_ChkEmldLoop:	
0001EC82 B033 1000                  		cmp.b	(a3,d1.w),d0
0001EC86 6600                       		bne.s	SS_ChkEmldRepeat
0001EC88 60CA                       		bra.s	SS_Load
0001EC8A                            ; ===========================================================================
0001EC8A                            
0001EC8A                            SS_ChkEmldRepeat:
0001EC8A 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001EC8E                            
0001EC8E                            SS_LoadData:
0001EC8E E548                       		lsl.w	#2,d0
0001EC90 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001EC94 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001EC98 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001EC9C 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001ECA0 43F9 00FF 4000             		lea	($FF4000).l,a1
0001ECA6 303C 0000                  		move.w	#0,d0
0001ECAA 4EB9 0000 18D8             		jsr	(EniDec).l
0001ECB0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001ECB6 303C 0FFF                  		move.w	#$FFF,d0
0001ECBA                            
0001ECBA                            SS_ClrRAM3:
0001ECBA 4299                       		clr.l	(a1)+
0001ECBC 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001ECC0                            
0001ECC0 43F9 00FF 1020             		lea	($FF1020).l,a1
0001ECC6 41F9 00FF 4000             		lea	($FF4000).l,a0
0001ECCC 723F                       		moveq	#$3F,d1
0001ECCE                            
0001ECCE                            loc_1B6F6:
0001ECCE 743F                       		moveq	#$3F,d2
0001ECD0                            
0001ECD0                            loc_1B6F8:
0001ECD0 12D8                       		move.b	(a0)+,(a1)+
0001ECD2 51CA FFFC                  		dbf	d2,loc_1B6F8
0001ECD6                            
0001ECD6 43E9 0040                  		lea	$40(a1),a1
0001ECDA 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001ECDE                            
0001ECDE 43F9 00FF 4008             		lea	($FF4008).l,a1
0001ECE4 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001ECEA 724D                       		moveq	#$4D,d1
0001ECEC                            
0001ECEC                            loc_1B714:
0001ECEC 22D8                       		move.l	(a0)+,(a1)+
0001ECEE 32FC 0000                  		move.w	#0,(a1)+
0001ECF2 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001ECF8 32D8                       		move.w	(a0)+,(a1)+
0001ECFA 51C9 FFF0                  		dbf	d1,loc_1B714
0001ECFE                            
0001ECFE 43F9 00FF 4400             		lea	($FF4400).l,a1
0001ED04 323C 003F                  		move.w	#$3F,d1
0001ED08                            
0001ED08                            loc_1B730:
0001ED08                            
0001ED08 4299                       		clr.l	(a1)+
0001ED0A 51C9 FFFC                  		dbf	d1,loc_1B730
0001ED0E                            
0001ED0E 4E75                       		rts	
0001ED10                            ; End of function SS_Load
0001ED10                            
0001ED10                            ; ===========================================================================
0001ED10                            
0001ED10                            SS_MapIndex:
0001ED10                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001ED10                            ; ---------------------------------------------------------------------------
0001ED10                            ; Special stage	mappings and VRAM pointers
0001ED10                            ; ---------------------------------------------------------------------------
0001ED10 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001ED14 0142                       	dc.w $142		; VRAM setting
0001ED16 0000 0000                  	dc.l Map_SSWalls
0001ED1A 0142                       	dc.w $142
0001ED1C 0000 0000                  	dc.l Map_SSWalls
0001ED20 0142                       	dc.w $142
0001ED22 0000 0000                  	dc.l Map_SSWalls
0001ED26 0142                       	dc.w $142
0001ED28 0000 0000                  	dc.l Map_SSWalls
0001ED2C 0142                       	dc.w $142
0001ED2E 0000 0000                  	dc.l Map_SSWalls
0001ED32 0142                       	dc.w $142
0001ED34 0000 0000                  	dc.l Map_SSWalls
0001ED38 0142                       	dc.w $142
0001ED3A 0000 0000                  	dc.l Map_SSWalls
0001ED3E 0142                       	dc.w $142
0001ED40 0000 0000                  	dc.l Map_SSWalls
0001ED44 0142                       	dc.w $142
0001ED46 0000 0000                  	dc.l Map_SSWalls
0001ED4A 2142                       	dc.w $2142
0001ED4C 0000 0000                  	dc.l Map_SSWalls
0001ED50 2142                       	dc.w $2142
0001ED52 0000 0000                  	dc.l Map_SSWalls
0001ED56 2142                       	dc.w $2142
0001ED58 0000 0000                  	dc.l Map_SSWalls
0001ED5C 2142                       	dc.w $2142
0001ED5E 0000 0000                  	dc.l Map_SSWalls
0001ED62 2142                       	dc.w $2142
0001ED64 0000 0000                  	dc.l Map_SSWalls
0001ED68 2142                       	dc.w $2142
0001ED6A 0000 0000                  	dc.l Map_SSWalls
0001ED6E 2142                       	dc.w $2142
0001ED70 0000 0000                  	dc.l Map_SSWalls
0001ED74 2142                       	dc.w $2142
0001ED76 0000 0000                  	dc.l Map_SSWalls
0001ED7A 2142                       	dc.w $2142
0001ED7C 0000 0000                  	dc.l Map_SSWalls
0001ED80 4142                       	dc.w $4142
0001ED82 0000 0000                  	dc.l Map_SSWalls
0001ED86 4142                       	dc.w $4142
0001ED88 0000 0000                  	dc.l Map_SSWalls
0001ED8C 4142                       	dc.w $4142
0001ED8E 0000 0000                  	dc.l Map_SSWalls
0001ED92 4142                       	dc.w $4142
0001ED94 0000 0000                  	dc.l Map_SSWalls
0001ED98 4142                       	dc.w $4142
0001ED9A 0000 0000                  	dc.l Map_SSWalls
0001ED9E 4142                       	dc.w $4142
0001EDA0 0000 0000                  	dc.l Map_SSWalls
0001EDA4 4142                       	dc.w $4142
0001EDA6 0000 0000                  	dc.l Map_SSWalls
0001EDAA 4142                       	dc.w $4142
0001EDAC 0000 0000                  	dc.l Map_SSWalls
0001EDB0 4142                       	dc.w $4142
0001EDB2 0000 0000                  	dc.l Map_SSWalls
0001EDB6 6142                       	dc.w $6142
0001EDB8 0000 0000                  	dc.l Map_SSWalls
0001EDBC 6142                       	dc.w $6142
0001EDBE 0000 0000                  	dc.l Map_SSWalls
0001EDC2 6142                       	dc.w $6142
0001EDC4 0000 0000                  	dc.l Map_SSWalls
0001EDC8 6142                       	dc.w $6142
0001EDCA 0000 0000                  	dc.l Map_SSWalls
0001EDCE 6142                       	dc.w $6142
0001EDD0 0000 0000                  	dc.l Map_SSWalls
0001EDD4 6142                       	dc.w $6142
0001EDD6 0000 0000                  	dc.l Map_SSWalls
0001EDDA 6142                       	dc.w $6142
0001EDDC 0000 0000                  	dc.l Map_SSWalls
0001EDE0 6142                       	dc.w $6142
0001EDE2 0000 0000                  	dc.l Map_SSWalls
0001EDE6 6142                       	dc.w $6142
0001EDE8 0001 0F46                  	dc.l Map_Bump
0001EDEC 023B                       	dc.w $23B
0001EDEE 0000 0000                  	dc.l Map_SS_R
0001EDF2 0570                       	dc.w $570
0001EDF4 0000 0000                  	dc.l Map_SS_R
0001EDF8 0251                       	dc.w $251
0001EDFA 0000 0000                  	dc.l Map_SS_R
0001EDFE 0370                       	dc.w $370
0001EE00 0000 0000                  	dc.l Map_SS_Up
0001EE04 0263                       	dc.w $263
0001EE06 0000 0000                  	dc.l Map_SS_Down
0001EE0A 0263                       	dc.w $263
0001EE0C 0000 0000                  	dc.l Map_SS_R
0001EE10 22F0                       	dc.w $22F0
0001EE12 0000 0000                  	dc.l Map_SS_Glass
0001EE16 0470                       	dc.w $470
0001EE18 0000 0000                  	dc.l Map_SS_Glass
0001EE1C 05F0                       	dc.w $5F0
0001EE1E 0000 0000                  	dc.l Map_SS_Glass
0001EE22 65F0                       	dc.w $65F0
0001EE24 0000 0000                  	dc.l Map_SS_Glass
0001EE28 25F0                       	dc.w $25F0
0001EE2A 0000 0000                  	dc.l Map_SS_Glass
0001EE2E 45F0                       	dc.w $45F0
0001EE30 0000 0000                  	dc.l Map_SS_R
0001EE34 02F0                       	dc.w $2F0
0001EE36 0101 0F46                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001EE3A 023B                       	dc.w $23B
0001EE3C 0201 0F46                  	dc.l Map_Bump+$2000000
0001EE40 023B                       	dc.w $23B
0001EE42 0000 0000                  	dc.l Map_SS_R
0001EE46 0797                       	dc.w $797
0001EE48 0000 0000                  	dc.l Map_SS_R
0001EE4C 07A0                       	dc.w $7A0
0001EE4E 0000 0000                  	dc.l Map_SS_R
0001EE52 07A9                       	dc.w $7A9
0001EE54 0000 0000                  	dc.l Map_SS_R
0001EE58 0797                       	dc.w $797
0001EE5A 0000 0000                  	dc.l Map_SS_R
0001EE5E 07A0                       	dc.w $7A0
0001EE60 0000 0000                  	dc.l Map_SS_R
0001EE64 07A9                       	dc.w $7A9
0001EE66 0000 C094                  	dc.l Map_Ring
0001EE6A 2798                       	dc.w $2798
0001EE6C 0000 0000                  	dc.l Map_SS_Chaos3
0001EE70 0770                       	dc.w $770
0001EE72 0000 0000                  	dc.l Map_SS_Chaos3
0001EE76 2770                       	dc.w $2770
0001EE78 0000 0000                  	dc.l Map_SS_Chaos3
0001EE7C 4770                       	dc.w $4770
0001EE7E 0000 0000                  	dc.l Map_SS_Chaos3
0001EE82 6770                       	dc.w $6770
0001EE84 0000 0000                  	dc.l Map_SS_Chaos1
0001EE88 0770                       	dc.w $770
0001EE8A 0000 0000                  	dc.l Map_SS_Chaos2
0001EE8E 0770                       	dc.w $770
0001EE90 0000 0000                  	dc.l Map_SS_R
0001EE94 04F0                       	dc.w $4F0
0001EE96 0400 C094                  	dc.l Map_Ring+$4000000
0001EE9A 2798                       	dc.w $2798
0001EE9C 0500 C094                  	dc.l Map_Ring+$5000000
0001EEA0 2798                       	dc.w $2798
0001EEA2 0600 C094                  	dc.l Map_Ring+$6000000
0001EEA6 2798                       	dc.w $2798
0001EEA8 0700 C094                  	dc.l Map_Ring+$7000000
0001EEAC 2798                       	dc.w $2798
0001EEAE 0000 0000                  	dc.l Map_SS_Glass
0001EEB2 23F0                       	dc.w $23F0
0001EEB4 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EEB8 23F0                       	dc.w $23F0
0001EEBA 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EEBE 23F0                       	dc.w $23F0
0001EEC0 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EEC4 23F0                       	dc.w $23F0
0001EEC6 0000 0000                  	dc.l Map_SS_R+$2000000
0001EECA 04F0                       	dc.w $4F0
0001EECC 0000 0000                  	dc.l Map_SS_Glass
0001EED0 05F0                       	dc.w $5F0
0001EED2 0000 0000                  	dc.l Map_SS_Glass
0001EED6 65F0                       	dc.w $65F0
0001EED8 0000 0000                  	dc.l Map_SS_Glass
0001EEDC 25F0                       	dc.w $25F0
0001EEDE 0000 0000                  	dc.l Map_SS_Glass
0001EEE2 45F0                       	dc.w $45F0
0001EEE2 45F0                       	dc.w $45F0
0001EEE4                            
0001EEE4                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EEE4                            ; ---------------------------------------------------------------------------
0001EEE4                            ; Sprite mappings - special stage "R" block
0001EEE4                            ; ---------------------------------------------------------------------------
0001EEE4                            Map_SS_R_internal:
0001EEE4 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EEE6 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EEE8 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EEEA 01                         byte_1B912:	dc.b 1
0001EEEB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EEF0 01                         byte_1B918:	dc.b 1
0001EEF1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EEF6 00                         byte_1B91E:	dc.b 0
0001EEF8 00                         		even
0001EEF8 00                         		even
0001EEF8                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EEF8                            ; ---------------------------------------------------------------------------
0001EEF8                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EEF8                            ; ---------------------------------------------------------------------------
0001EEF8                            Map_SS_Glass_internal:
0001EEF8 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EEFA 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EEFC 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EEFE 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EF00 01                         byte_1B928:	dc.b 1
0001EF01 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EF06 01                         byte_1B92E:	dc.b 1
0001EF07 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EF0C 01                         byte_1B934:	dc.b 1
0001EF0D F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EF12 01                         byte_1B93A:	dc.b 1
0001EF13 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001EF18                            		even
0001EF18                            		even
0001EF18                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001EF18                            ; ---------------------------------------------------------------------------
0001EF18                            ; Sprite mappings - special stage "UP" block
0001EF18                            ; ---------------------------------------------------------------------------
0001EF18                            Map_SS_Up_internal:
0001EF18 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001EF1A 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001EF1C 01                         byte_1B944:	dc.b 1
0001EF1D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EF22 01                         byte_1B94A:	dc.b 1
0001EF23 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EF28                            		even
0001EF28                            		even
0001EF28                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001EF28                            ; ---------------------------------------------------------------------------
0001EF28                            ; Sprite mappings - special stage "DOWN" block
0001EF28                            ; ---------------------------------------------------------------------------
0001EF28                            Map_SS_Down_internal:
0001EF28 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001EF2A 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001EF2C 01                         byte_1B954:	dc.b 1
0001EF2D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EF32 01                         byte_1B95A:	dc.b 1
0001EF33 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EF38                            		even
0001EF38                            		even
0001EF38                            		include	"_maps\SS Chaos Emeralds.asm"
0001EF38                            ; ---------------------------------------------------------------------------
0001EF38                            ; Sprite mappings - special stage chaos	emeralds
0001EF38                            ; ---------------------------------------------------------------------------
0001EF38 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001EF3A 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001EF3C 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001EF3E 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001EF40 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001EF42 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001EF44 01                         byte_1B96C:	dc.b 1
0001EF45 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001EF4A 01                         byte_1B972:	dc.b 1
0001EF4B F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001EF50 01                         byte_1B978:	dc.b 1
0001EF51 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001EF56 01                         byte_1B97E:	dc.b 1
0001EF57 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001EF5C                            		even
0001EF5C                            		even
0001EF5C                            
0001EF5C                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001EF5C                            ; ---------------------------------------------------------------------------
0001EF5C                            ; Object 09 - Sonic (special stage)
0001EF5C                            ; ---------------------------------------------------------------------------
0001EF5C                            
0001EF5C                            SonicSpecial:
0001EF5C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001EF60 6700                       		beq.s	Obj09_Normal	; if not, branch
0001EF62 6100 0000                  		bsr.w	SS_FixCamera
0001EF66 6000 0000                  		bra.w	DebugMode
0001EF6A                            ; ===========================================================================
0001EF6A                            
0001EF6A                            Obj09_Normal:
0001EF6A 7000                       		moveq	#0,d0
0001EF6C 1028 0024                  		move.b	obRoutine(a0),d0
0001EF70 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001EF74 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001EF78                            ; ===========================================================================
0001EF78 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001EF7A 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001EF7C 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001EF7E 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001EF80                            ; ===========================================================================
0001EF80                            
0001EF80                            Obj09_Main:	; Routine 0
0001EF80 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EF84 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001EF8A 117C 0007 0017             		move.b	#7,obWidth(a0)
0001EF90 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001EF98 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001EF9E 117C 0004 0001             		move.b	#4,obRender(a0)
0001EFA4 317C 0000 0018             		move.w	#0,obPriority(a0)
0001EFAA 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001EFB0 08E8 0002 0022             		bset	#2,obStatus(a0)
0001EFB6 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EFBC                            
0001EFBC                            Obj09_ChkDebug:	; Routine 2
0001EFBC 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001EFC0 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EFC2 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001EFC8 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EFCA 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001EFD0                            
0001EFD0                            Obj09_NoDebug:
0001EFD0 117C 0000 0030             		move.b	#0,$30(a0)
0001EFD6 7000                       		moveq	#0,d0
0001EFD8 1028 0022                  		move.b	obStatus(a0),d0
0001EFDC 0240 0002                  		andi.w	#2,d0
0001EFE0 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001EFE4 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001EFE8 4EB9 0001 6A42             		jsr	(Sonic_LoadGfx).l
0001EFEE 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001EFF4                            ; ===========================================================================
0001EFF4 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001EFF6 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001EFF8                            ; ===========================================================================
0001EFF8                            
0001EFF8                            Obj09_OnWall:
0001EFF8 6100 0000                  		bsr.w	Obj09_Jump
0001EFFC 6100 0000                  		bsr.w	Obj09_Move
0001F000 6100 0000                  		bsr.w	Obj09_Fall
0001F004 6000                       		bra.s	Obj09_Display
0001F006                            ; ===========================================================================
0001F006                            
0001F006                            Obj09_InAir:
0001F006 6100 0000                  		bsr.w	nullsub_2
0001F00A 6100 0000                  		bsr.w	Obj09_Move
0001F00E 6100 0000                  		bsr.w	Obj09_Fall
0001F012                            
0001F012                            Obj09_Display:
0001F012 6100 0000                  		bsr.w	Obj09_ChkItems
0001F016 6100 0000                  		bsr.w	Obj09_ChkItems2
0001F01A 4EB9 0000 FA0E             		jsr	(SpeedToPos).l
0001F020 6100 0000                  		bsr.w	SS_FixCamera
0001F024 3038 F780                  		move.w	(v_ssangle).w,d0
0001F028 D078 F782                  		add.w	(v_ssrotate).w,d0
0001F02C 31C0 F780                  		move.w	d0,(v_ssangle).w
0001F030 4EB9 0001 66AA             		jsr	(Sonic_Animate).l
0001F036 4E75                       		rts	
0001F038                            
0001F038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F038                            
0001F038                            
0001F038                            Obj09_Move:
0001F038 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001F03E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001F040 6100 0000                  		bsr.w	Obj09_MoveLeft
0001F044                            
0001F044                            Obj09_ChkRight:
0001F044 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001F04A 6700                       		beq.s	loc_1BA78	; if not, branch
0001F04C 6100 0000                  		bsr.w	Obj09_MoveRight
0001F050                            
0001F050                            loc_1BA78:
0001F050 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F054 0200 000C                  		andi.b	#btnL+btnR,d0
0001F058 6600                       		bne.s	loc_1BAA8
0001F05A 3028 0020                  		move.w	obInertia(a0),d0
0001F05E 6700                       		beq.s	loc_1BAA8
0001F060 6B00                       		bmi.s	loc_1BA9A
0001F062 0440 000C                  		subi.w	#$C,d0
0001F066 6400                       		bcc.s	loc_1BA94
0001F068 303C 0000                  		move.w	#0,d0
0001F06C                            
0001F06C                            loc_1BA94:
0001F06C 3140 0020                  		move.w	d0,obInertia(a0)
0001F070 6000                       		bra.s	loc_1BAA8
0001F072                            ; ===========================================================================
0001F072                            
0001F072                            loc_1BA9A:
0001F072 0640 000C                  		addi.w	#$C,d0
0001F076 6400                       		bcc.s	loc_1BAA4
0001F078 303C 0000                  		move.w	#0,d0
0001F07C                            
0001F07C                            loc_1BAA4:
0001F07C 3140 0020                  		move.w	d0,obInertia(a0)
0001F080                            
0001F080                            loc_1BAA8:
0001F080 1038 F780                  		move.b	(v_ssangle).w,d0
0001F084 0600 0020                  		addi.b	#$20,d0
0001F088 0200 00C0                  		andi.b	#$C0,d0
0001F08C 4400                       		neg.b	d0
0001F08E 4EB9 0000 3A82             		jsr	(CalcSine).l
0001F094 C3E8 0020                  		muls.w	obInertia(a0),d1
0001F098 D3A8 0008                  		add.l	d1,obX(a0)
0001F09C C1E8 0020                  		muls.w	obInertia(a0),d0
0001F0A0 D1A8 000C                  		add.l	d0,obY(a0)
0001F0A4 48E7 C000                  		movem.l	d0-d1,-(sp)
0001F0A8 2428 000C                  		move.l	obY(a0),d2
0001F0AC 2628 0008                  		move.l	obX(a0),d3
0001F0B0 6100 0000                  		bsr.w	sub_1BCE8
0001F0B4 6700                       		beq.s	loc_1BAF2
0001F0B6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001F0BA 93A8 0008                  		sub.l	d1,obX(a0)
0001F0BE 91A8 000C                  		sub.l	d0,obY(a0)
0001F0C2 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F0C8 4E75                       		rts	
0001F0CA                            ; ===========================================================================
0001F0CA                            
0001F0CA                            loc_1BAF2:
0001F0CA 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001F0CE 4E75                       		rts	
0001F0D0                            ; End of function Obj09_Move
0001F0D0                            
0001F0D0                            
0001F0D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0D0                            
0001F0D0                            
0001F0D0                            Obj09_MoveLeft:
0001F0D0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001F0D6 3028 0020                  		move.w	obInertia(a0),d0
0001F0DA 6700                       		beq.s	loc_1BB06
0001F0DC 6A00                       		bpl.s	loc_1BB1A
0001F0DE                            
0001F0DE                            loc_1BB06:
0001F0DE 0440 000C                  		subi.w	#$C,d0
0001F0E2 0C40 F800                  		cmpi.w	#-$800,d0
0001F0E6 6E00                       		bgt.s	loc_1BB14
0001F0E8 303C F800                  		move.w	#-$800,d0
0001F0EC                            
0001F0EC                            loc_1BB14:
0001F0EC 3140 0020                  		move.w	d0,obInertia(a0)
0001F0F0 4E75                       		rts	
0001F0F2                            ; ===========================================================================
0001F0F2                            
0001F0F2                            loc_1BB1A:
0001F0F2 0440 0040                  		subi.w	#$40,d0
0001F0F6 6400                       		bcc.s	loc_1BB22
0001F0F8 4E71                       		nop	
0001F0FA                            
0001F0FA                            loc_1BB22:
0001F0FA 3140 0020                  		move.w	d0,obInertia(a0)
0001F0FE 4E75                       		rts	
0001F100                            ; End of function Obj09_MoveLeft
0001F100                            
0001F100                            
0001F100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F100                            
0001F100                            
0001F100                            Obj09_MoveRight:
0001F100 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001F106 3028 0020                  		move.w	obInertia(a0),d0
0001F10A 6B00                       		bmi.s	loc_1BB48
0001F10C 0640 000C                  		addi.w	#$C,d0
0001F110 0C40 0800                  		cmpi.w	#$800,d0
0001F114 6D00                       		blt.s	loc_1BB42
0001F116 303C 0800                  		move.w	#$800,d0
0001F11A                            
0001F11A                            loc_1BB42:
0001F11A 3140 0020                  		move.w	d0,obInertia(a0)
0001F11E 6000                       		bra.s	locret_1BB54
0001F120                            ; ===========================================================================
0001F120                            
0001F120                            loc_1BB48:
0001F120 0640 0040                  		addi.w	#$40,d0
0001F124 6400                       		bcc.s	loc_1BB50
0001F126 4E71                       		nop	
0001F128                            
0001F128                            loc_1BB50:
0001F128 3140 0020                  		move.w	d0,obInertia(a0)
0001F12C                            
0001F12C                            locret_1BB54:
0001F12C 4E75                       		rts	
0001F12E                            ; End of function Obj09_MoveRight
0001F12E                            
0001F12E                            
0001F12E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F12E                            
0001F12E                            
0001F12E                            Obj09_Jump:
0001F12E 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001F132 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001F136 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001F138 1038 F780                  		move.b	(v_ssangle).w,d0
0001F13C 0200 00FC                  		andi.b	#$FC,d0
0001F140 4400                       		neg.b	d0
0001F142 0400 0040                  		subi.b	#$40,d0
0001F146 4EB9 0000 3A82             		jsr	(CalcSine).l
0001F14C C3FC 0680                  		muls.w	#$680,d1
0001F150 E081                       		asr.l	#8,d1
0001F152 3141 0010                  		move.w	d1,obVelX(a0)
0001F156 C1FC 0680                  		muls.w	#$680,d0
0001F15A E080                       		asr.l	#8,d0
0001F15C 3140 0012                  		move.w	d0,obVelY(a0)
0001F160 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F170                            
0001F170                            Obj09_NoJump:
0001F170 4E75                       		rts	
0001F172                            ; End of function Obj09_Jump
0001F172                            
0001F172                            
0001F172                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F172                            
0001F172                            
0001F172                            nullsub_2:
0001F172 4E75                       		rts	
0001F174                            ; End of function nullsub_2
0001F174                            
0001F174                            ; ===========================================================================
0001F174                            ; ---------------------------------------------------------------------------
0001F174                            ; unused subroutine to limit Sonic's upward vertical speed
0001F174                            ; ---------------------------------------------------------------------------
0001F174 323C FC00                  		move.w	#-$400,d1
0001F178 B268 0012                  		cmp.w	obVelY(a0),d1
0001F17C 6F00                       		ble.s	locret_1BBB4
0001F17E 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F182 0200 0070                  		andi.b	#btnABC,d0
0001F186 6600                       		bne.s	locret_1BBB4
0001F188 3141 0012                  		move.w	d1,obVelY(a0)
0001F18C                            
0001F18C                            locret_1BBB4:
0001F18C 4E75                       		rts	
0001F18E                            ; ---------------------------------------------------------------------------
0001F18E                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001F18E                            ; ---------------------------------------------------------------------------
0001F18E                            
0001F18E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F18E                            
0001F18E                            
0001F18E                            SS_FixCamera:
0001F18E 3428 000C                  		move.w	obY(a0),d2
0001F192 3628 0008                  		move.w	obX(a0),d3
0001F196 3038 F700                  		move.w	(v_screenposx).w,d0
0001F19A 0443 00A0                  		subi.w	#$A0,d3
0001F19E 6500                       		bcs.s	loc_1BBCE
0001F1A0 9043                       		sub.w	d3,d0
0001F1A2 9178 F700                  		sub.w	d0,(v_screenposx).w
0001F1A6                            
0001F1A6                            loc_1BBCE:
0001F1A6 3038 F704                  		move.w	(v_screenposy).w,d0
0001F1AA 0442 0070                  		subi.w	#$70,d2
0001F1AE 6500                       		bcs.s	locret_1BBDE
0001F1B0 9042                       		sub.w	d2,d0
0001F1B2 9178 F704                  		sub.w	d0,(v_screenposy).w
0001F1B6                            
0001F1B6                            locret_1BBDE:
0001F1B6 4E75                       		rts	
0001F1B8                            ; End of function SS_FixCamera
0001F1B8                            
0001F1B8                            ; ===========================================================================
0001F1B8                            
0001F1B8                            Obj09_ExitStage:
0001F1B8 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001F1BE 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001F1C4 6600                       		bne.s	loc_1BBF4
0001F1C6 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F1CC                            
0001F1CC                            loc_1BBF4:
0001F1CC 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001F1D2 6D00                       		blt.s	loc_1BC12
0001F1D4 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001F1DA 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001F1E0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F1E4 317C 003C 0038             		move.w	#$3C,$38(a0)
0001F1EA                            
0001F1EA                            loc_1BC12:
0001F1EA 3038 F780                  		move.w	(v_ssangle).w,d0
0001F1EE D078 F782                  		add.w	(v_ssrotate).w,d0
0001F1F2 31C0 F780                  		move.w	d0,(v_ssangle).w
0001F1F6 4EB9 0001 66AA             		jsr	(Sonic_Animate).l
0001F1FC 4EB9 0001 6A42             		jsr	(Sonic_LoadGfx).l
0001F202 6100 FF8A                  		bsr.w	SS_FixCamera
0001F206 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001F20C                            ; ===========================================================================
0001F20C                            
0001F20C                            Obj09_Exit2:
0001F20C 5368 0038                  		subq.w	#1,$38(a0)
0001F210 6600                       		bne.s	loc_1BC40
0001F212 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F218                            
0001F218                            loc_1BC40:
0001F218 4EB9 0001 66AA             		jsr	(Sonic_Animate).l
0001F21E 4EB9 0001 6A42             		jsr	(Sonic_LoadGfx).l
0001F224 6100 FF68                  		bsr.w	SS_FixCamera
0001F228 4EF9 0000 FA22             		jmp	(DisplaySprite).l
0001F22E                            
0001F22E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F22E                            
0001F22E                            
0001F22E                            Obj09_Fall:
0001F22E 2428 000C                  		move.l	obY(a0),d2
0001F232 2628 0008                  		move.l	obX(a0),d3
0001F236 1038 F780                  		move.b	(v_ssangle).w,d0
0001F23A 0200 00FC                  		andi.b	#$FC,d0
0001F23E 4EB9 0000 3A82             		jsr	(CalcSine).l
0001F244 3828 0010                  		move.w	obVelX(a0),d4
0001F248 48C4                       		ext.l	d4
0001F24A E184                       		asl.l	#8,d4
0001F24C C1FC 002A                  		muls.w	#$2A,d0
0001F250 D084                       		add.l	d4,d0
0001F252 3828 0012                  		move.w	obVelY(a0),d4
0001F256 48C4                       		ext.l	d4
0001F258 E184                       		asl.l	#8,d4
0001F25A C3FC 002A                  		muls.w	#$2A,d1
0001F25E D284                       		add.l	d4,d1
0001F260 D680                       		add.l	d0,d3
0001F262 6100 0000                  		bsr.w	sub_1BCE8
0001F266 6700                       		beq.s	loc_1BCB0
0001F268 9680                       		sub.l	d0,d3
0001F26A 7000                       		moveq	#0,d0
0001F26C 3140 0010                  		move.w	d0,obVelX(a0)
0001F270 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F276 D481                       		add.l	d1,d2
0001F278 6100 0000                  		bsr.w	sub_1BCE8
0001F27C 6700                       		beq.s	loc_1BCC6
0001F27E 9481                       		sub.l	d1,d2
0001F280 7200                       		moveq	#0,d1
0001F282 3141 0012                  		move.w	d1,obVelY(a0)
0001F286 4E75                       		rts	
0001F288                            ; ===========================================================================
0001F288                            
0001F288                            loc_1BCB0:
0001F288 D481                       		add.l	d1,d2
0001F28A 6100 0000                  		bsr.w	sub_1BCE8
0001F28E 6700                       		beq.s	loc_1BCD4
0001F290 9481                       		sub.l	d1,d2
0001F292 7200                       		moveq	#0,d1
0001F294 3141 0012                  		move.w	d1,obVelY(a0)
0001F298 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F29E                            
0001F29E                            loc_1BCC6:
0001F29E E080                       		asr.l	#8,d0
0001F2A0 E081                       		asr.l	#8,d1
0001F2A2 3140 0010                  		move.w	d0,obVelX(a0)
0001F2A6 3141 0012                  		move.w	d1,obVelY(a0)
0001F2AA 4E75                       		rts	
0001F2AC                            ; ===========================================================================
0001F2AC                            
0001F2AC                            loc_1BCD4:
0001F2AC E080                       		asr.l	#8,d0
0001F2AE E081                       		asr.l	#8,d1
0001F2B0 3140 0010                  		move.w	d0,obVelX(a0)
0001F2B4 3141 0012                  		move.w	d1,obVelY(a0)
0001F2B8 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F2BE 4E75                       		rts	
0001F2C0                            ; End of function Obj09_Fall
0001F2C0                            
0001F2C0                            
0001F2C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2C0                            
0001F2C0                            
0001F2C0                            sub_1BCE8:
0001F2C0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F2C6 7800                       		moveq	#0,d4
0001F2C8 4842                       		swap	d2
0001F2CA 3802                       		move.w	d2,d4
0001F2CC 4842                       		swap	d2
0001F2CE 0644 0044                  		addi.w	#$44,d4
0001F2D2 88FC 0018                  		divu.w	#$18,d4
0001F2D6 C8FC 0080                  		mulu.w	#$80,d4
0001F2DA D3C4                       		adda.l	d4,a1
0001F2DC 7800                       		moveq	#0,d4
0001F2DE 4843                       		swap	d3
0001F2E0 3803                       		move.w	d3,d4
0001F2E2 4843                       		swap	d3
0001F2E4 0644 0014                  		addi.w	#$14,d4
0001F2E8 88FC 0018                  		divu.w	#$18,d4
0001F2EC D2C4                       		adda.w	d4,a1
0001F2EE 7A00                       		moveq	#0,d5
0001F2F0 1819                       		move.b	(a1)+,d4
0001F2F2 6100                       		bsr.s	sub_1BD30
0001F2F4 1819                       		move.b	(a1)+,d4
0001F2F6 6100                       		bsr.s	sub_1BD30
0001F2F8 D2FC 007E                  		adda.w	#$7E,a1
0001F2FC 1819                       		move.b	(a1)+,d4
0001F2FE 6100                       		bsr.s	sub_1BD30
0001F300 1819                       		move.b	(a1)+,d4
0001F302 6100                       		bsr.s	sub_1BD30
0001F304 4A05                       		tst.b	d5
0001F306 4E75                       		rts	
0001F308                            ; End of function sub_1BCE8
0001F308                            
0001F308                            
0001F308                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F308                            
0001F308                            
0001F308                            sub_1BD30:
0001F308 6700                       		beq.s	locret_1BD44
0001F30A 0C04 0028                  		cmpi.b	#$28,d4
0001F30E 6700                       		beq.s	locret_1BD44
0001F310 0C04 003A                  		cmpi.b	#$3A,d4
0001F314 6500                       		bcs.s	loc_1BD46
0001F316 0C04 004B                  		cmpi.b	#$4B,d4
0001F31A 6400                       		bcc.s	loc_1BD46
0001F31C                            
0001F31C                            locret_1BD44:
0001F31C 4E75                       		rts	
0001F31E                            ; ===========================================================================
0001F31E                            
0001F31E                            loc_1BD46:
0001F31E 1144 0030                  		move.b	d4,$30(a0)
0001F322 2149 0032                  		move.l	a1,$32(a0)
0001F326 7AFF                       		moveq	#-1,d5
0001F328 4E75                       		rts	
0001F32A                            ; End of function sub_1BD30
0001F32A                            
0001F32A                            
0001F32A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F32A                            
0001F32A                            
0001F32A                            Obj09_ChkItems:
0001F32A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F330 7800                       		moveq	#0,d4
0001F332 3828 000C                  		move.w	obY(a0),d4
0001F336 0644 0050                  		addi.w	#$50,d4
0001F33A 88FC 0018                  		divu.w	#$18,d4
0001F33E C8FC 0080                  		mulu.w	#$80,d4
0001F342 D3C4                       		adda.l	d4,a1
0001F344 7800                       		moveq	#0,d4
0001F346 3828 0008                  		move.w	obX(a0),d4
0001F34A 0644 0020                  		addi.w	#$20,d4
0001F34E 88FC 0018                  		divu.w	#$18,d4
0001F352 D2C4                       		adda.w	d4,a1
0001F354 1811                       		move.b	(a1),d4
0001F356 6600                       		bne.s	Obj09_ChkCont
0001F358 4A28 003A                  		tst.b	$3A(a0)
0001F35C 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F360 7800                       		moveq	#0,d4
0001F362 4E75                       		rts	
0001F364                            ; ===========================================================================
0001F364                            
0001F364                            Obj09_ChkCont:
0001F364 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F368 6600                       		bne.s	Obj09_Chk1Up
0001F36A 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F36E 6600                       		bne.s	Obj09_GetCont
0001F370 14BC 0001                  		move.b	#1,(a2)
0001F374 2549 0004                  		move.l	a1,4(a2)
0001F378                            
0001F378                            Obj09_GetCont:
0001F378 4EB9 0000 BBFC             		jsr	(CollectRing).l
0001F37E 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F384 6500                       		bcs.s	Obj09_NoCont
0001F386 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F38C 6600                       		bne.s	Obj09_NoCont
0001F38E 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F39C                            
0001F39C                            Obj09_NoCont:
0001F39C 7800                       		moveq	#0,d4
0001F39E 4E75                       		rts	
0001F3A0                            ; ===========================================================================
0001F3A0                            
0001F3A0                            Obj09_Chk1Up:
0001F3A0 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F3A4 6600                       		bne.s	Obj09_ChkEmer
0001F3A6 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F3AA 6600                       		bne.s	Obj09_Get1Up
0001F3AC 14BC 0003                  		move.b	#3,(a2)
0001F3B0 2549 0004                  		move.l	a1,4(a2)
0001F3B4                            
0001F3B4                            Obj09_Get1Up:
0001F3B4 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F3B8 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F3C6 7800                       		moveq	#0,d4
0001F3C8 4E75                       		rts	
0001F3CA                            ; ===========================================================================
0001F3CA                            
0001F3CA                            Obj09_ChkEmer:
0001F3CA 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F3CE 6500                       		bcs.s	Obj09_ChkGhost
0001F3D0 0C04 0040                  		cmpi.b	#$40,d4
0001F3D4 6200                       		bhi.s	Obj09_ChkGhost
0001F3D6 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F3DA 6600                       		bne.s	Obj09_GetEmer
0001F3DC 14BC 0005                  		move.b	#5,(a2)
0001F3E0 2549 0004                  		move.l	a1,4(a2)
0001F3E4                            
0001F3E4                            Obj09_GetEmer:
0001F3E4 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F3EA 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F3EC 0404 003B                  		subi.b	#$3B,d4
0001F3F0 7000                       		moveq	#0,d0
0001F3F2 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F3F6 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F3FA 1584 0000                  		move.b	d4,(a2,d0.w)
0001F3FE 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F402                            
0001F402                            Obj09_NoEmer:
0001F40C 7800                       		moveq	#0,d4
0001F40E 4E75                       		rts	
0001F410                            ; ===========================================================================
0001F410                            
0001F410                            Obj09_ChkGhost:
0001F410 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F414 6600                       		bne.s	Obj09_ChkGhostTag
0001F416 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F41C                            
0001F41C                            Obj09_ChkGhostTag:
0001F41C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F420 6600                       		bne.s	Obj09_NoGhost
0001F422 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F428 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F42A 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F430                            
0001F430                            Obj09_NoGhost:
0001F430 78FF                       		moveq	#-1,d4
0001F432 4E75                       		rts	
0001F434                            ; ===========================================================================
0001F434                            
0001F434                            Obj09_MakeGhostSolid:
0001F434 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F43A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F43C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F442 723F                       		moveq	#$3F,d1
0001F444                            
0001F444                            Obj09_GhostLoop2:
0001F444 743F                       		moveq	#$3F,d2
0001F446                            
0001F446                            Obj09_GhostLoop:
0001F446 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F44A 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F44C 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F450                            
0001F450                            Obj09_NoReplace:
0001F450 5249                       		addq.w	#1,a1
0001F452 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F456 43E9 0040                  		lea	$40(a1),a1
0001F45A 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F45E                            
0001F45E                            Obj09_GhostNotSolid:
0001F45E 4228 003A                  		clr.b	$3A(a0)
0001F462 7800                       		moveq	#0,d4
0001F464 4E75                       		rts	
0001F466                            ; End of function Obj09_ChkItems
0001F466                            
0001F466                            
0001F466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F466                            
0001F466                            
0001F466                            Obj09_ChkItems2:
0001F466 1028 0030                  		move.b	$30(a0),d0
0001F46A 6600                       		bne.s	Obj09_ChkBumper
0001F46C 5328 0036                  		subq.b	#1,$36(a0)
0001F470 6A00                       		bpl.s	loc_1BEA0
0001F472 117C 0000 0036             		move.b	#0,$36(a0)
0001F478                            
0001F478                            loc_1BEA0:
0001F478 5328 0037                  		subq.b	#1,$37(a0)
0001F47C 6A00                       		bpl.s	locret_1BEAC
0001F47E 117C 0000 0037             		move.b	#0,$37(a0)
0001F484                            
0001F484                            locret_1BEAC:
0001F484 4E75                       		rts	
0001F486                            ; ===========================================================================
0001F486                            
0001F486                            Obj09_ChkBumper:
0001F486 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F48A 6600                       		bne.s	Obj09_GOAL
0001F48C 2228 0032                  		move.l	$32(a0),d1
0001F490 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F496 3401                       		move.w	d1,d2
0001F498 0241 007F                  		andi.w	#$7F,d1
0001F49C C2FC 0018                  		mulu.w	#$18,d1
0001F4A0 0441 0014                  		subi.w	#$14,d1
0001F4A4 EE4A                       		lsr.w	#7,d2
0001F4A6 0242 007F                  		andi.w	#$7F,d2
0001F4AA C4FC 0018                  		mulu.w	#$18,d2
0001F4AE 0442 0044                  		subi.w	#$44,d2
0001F4B2 9268 0008                  		sub.w	obX(a0),d1
0001F4B6 9468 000C                  		sub.w	obY(a0),d2
0001F4BA 4EB9 0000 3D14             		jsr	(CalcAngle).l
0001F4C0 4EB9 0000 3A82             		jsr	(CalcSine).l
0001F4C6 C3FC F900                  		muls.w	#-$700,d1
0001F4CA E081                       		asr.l	#8,d1
0001F4CC 3141 0010                  		move.w	d1,obVelX(a0)
0001F4D0 C1FC F900                  		muls.w	#-$700,d0
0001F4D4 E080                       		asr.l	#8,d0
0001F4D6 3140 0012                  		move.w	d0,obVelY(a0)
0001F4DA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F4E0 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F4E4 6600                       		bne.s	Obj09_BumpSnd
0001F4E6 14BC 0002                  		move.b	#2,(a2)
0001F4EA 2028 0032                  		move.l	$32(a0),d0
0001F4EE 5380                       		subq.l	#1,d0
0001F4F0 2540 0004                  		move.l	d0,4(a2)
0001F4F4                            
0001F4F4                            Obj09_BumpSnd:
0001F4FE                            ; ===========================================================================
0001F4FE                            
0001F4FE                            Obj09_GOAL:
0001F4FE 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F502 6600                       		bne.s	Obj09_UPblock
0001F504 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F512 4E75                       		rts	
0001F514                            ; ===========================================================================
0001F514                            
0001F514                            Obj09_UPblock:
0001F514 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F518 6600                       		bne.s	Obj09_DOWNblock
0001F51A 4A28 0036                  		tst.b	$36(a0)
0001F51E 6600 0000                  		bne.w	Obj09_NoGlass
0001F522 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F528 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F52E 6700                       		beq.s	Obj09_UPsnd
0001F530 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F534 2268 0032                  		movea.l	$32(a0),a1
0001F538 5389                       		subq.l	#1,a1
0001F53A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F53E                            
0001F53E                            Obj09_UPsnd:
0001F548                            ; ===========================================================================
0001F548                            
0001F548                            Obj09_DOWNblock:
0001F548 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F54C 6600                       		bne.s	Obj09_Rblock
0001F54E 4A28 0036                  		tst.b	$36(a0)
0001F552 6600 0000                  		bne.w	Obj09_NoGlass
0001F556 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F55C 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F562 6600                       		bne.s	Obj09_DOWNsnd
0001F564 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F568 2268 0032                  		movea.l	$32(a0),a1
0001F56C 5389                       		subq.l	#1,a1
0001F56E 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F572                            
0001F572                            Obj09_DOWNsnd:
0001F57C                            ; ===========================================================================
0001F57C                            
0001F57C                            Obj09_Rblock:
0001F57C 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F580 6600                       		bne.s	Obj09_ChkGlass
0001F582 4A28 0037                  		tst.b	$37(a0)
0001F586 6600 0000                  		bne.w	Obj09_NoGlass
0001F58A 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F590 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F594 6600                       		bne.s	Obj09_RevStage
0001F596 14BC 0004                  		move.b	#4,(a2)
0001F59A 2028 0032                  		move.l	$32(a0),d0
0001F59E 5380                       		subq.l	#1,d0
0001F5A0 2540 0004                  		move.l	d0,4(a2)
0001F5A4                            
0001F5A4                            Obj09_RevStage:
0001F5A4 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F5B2                            ; ===========================================================================
0001F5B2                            
0001F5B2                            Obj09_ChkGlass:
0001F5B2 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F5B6 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F5B8 0C00 002E                  		cmpi.b	#$2E,d0
0001F5BC 6700                       		beq.s	Obj09_Glass
0001F5BE 0C00 002F                  		cmpi.b	#$2F,d0
0001F5C2 6700                       		beq.s	Obj09_Glass
0001F5C4 0C00 0030                  		cmpi.b	#$30,d0
0001F5C8 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F5CA                            
0001F5CA                            Obj09_Glass:
0001F5CA 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F5CE 6600                       		bne.s	Obj09_GlassSnd
0001F5D0 14BC 0006                  		move.b	#6,(a2)
0001F5D4 2268 0032                  		movea.l	$32(a0),a1
0001F5D8 5389                       		subq.l	#1,a1
0001F5DA 2549 0004                  		move.l	a1,4(a2)
0001F5DE 1011                       		move.b	(a1),d0
0001F5E0 5200                       		addq.b	#1,d0		; change glass type when touched
0001F5E2 0C00 0030                  		cmpi.b	#$30,d0
0001F5E6 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F5E8 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F5EA                            
0001F5EA                            Obj09_GlassUpdate:
0001F5EA 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F5EE                            
0001F5EE                            Obj09_GlassSnd:
0001F5F8                            ; ===========================================================================
0001F5F8                            
0001F5F8                            Obj09_NoGlass:
0001F5F8 4E75                       		rts	
0001F5FA                            ; End of function Obj09_ChkItems2
0001F5FA                            ; End of function Obj09_ChkItems2
0001F5FA                            
0001F5FA                            		include	"_incObj\10.asm"
0001F5FA                            ; ---------------------------------------------------------------------------
0001F5FA                            ; Object 10 - After-Image
0001F5FA                            ; ---------------------------------------------------------------------------
0001F5FA                            
0001F5FA                            Obj10:
0001F5FA 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F600 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F604                            
0001F604 7000                             moveq   #0,d0
0001F606 1028 0024                        move.b   obRoutine(a0),d0
0001F60A 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F60E 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F612                            
0001F612                            ; ===========================================================================
0001F612                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F612                            ; ===========================================================================
0001F612                            Afterimage_Index:
0001F612 0000                             dc.w NoAfterImage-Afterimage_Index
0001F614 0000                             dc.w NoAfterImage-Afterimage_Index
0001F616 0000                             dc.w NoAfterImage-Afterimage_Index
0001F618 0000                             dc.w AfterimageStart-Afterimage_Index
0001F61A 0000                             dc.w NoAfterImage-Afterimage_Index
0001F61C 0000                             dc.w NoAfterImage-Afterimage_Index
0001F61E 0000                             dc.w NoAfterImage-Afterimage_Index
0001F620 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F622 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F624                            ; ===========================================================================
0001F624                            NoAfterImage:
0001F624 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F628 4E75                             rts
0001F62A                            ; ===========================================================================
0001F62A                            AfterimageStart:
0001F62A 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F630 6000                             bra.s   Afterimage_Show
0001F632                            ; ===========================================================================
0001F632                            AfterimageLPrio:
0001F632 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F636                            ; ===========================================================================
0001F636                            Afterimage_Show:
0001F636 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F63A 4EB9 0000 3A5C                   jsr   (RandomNumber).l         ; get a random number
0001F640 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F644 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F646 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F648                            
0001F648                            AfterimageException:
0001F648 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F64E 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F654 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F65A 4EF9 0000 FA22                   jmp   DisplaySprite
0001F660                            ; ===========================================================================
0001F660                            AfterimageEnd:
0001F660 4EF9 0000 FA62                   jmp   DeleteObject
0001F660 4EF9 0000 FA62                   jmp   DeleteObject
0001F666                            
0001F666                            		include	"_inc\AnimateLevelGfx.asm"
0001F666                            ; ---------------------------------------------------------------------------
0001F666                            ; Subroutine to	animate	level graphics
0001F666                            ; ---------------------------------------------------------------------------
0001F666                            
0001F666                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F666                            
0001F666                            
0001F666                            AnimateLevelGfx:
0001F666                            		;tst.w	(f_pause).w	; is the game paused?
0001F666                            		;bne.s	@ispaused	; if yes, branch
0001F666 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F66C 6100 0000                  		bsr.w	AniArt_GiantRing
0001F670 7000                       		moveq	#0,d0
0001F672 1038 FE10                  		move.b	(v_zone).w,d0
0001F676 D040                       		add.w	d0,d0
0001F678 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F67C 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F680                            
0001F680                            	@ispaused:
0001F680 4E75                       		rts	
0001F682                            
0001F682                            ; ===========================================================================
0001F682 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F686 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F68A 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F68E 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F690                            ; ===========================================================================
0001F690                            ; ---------------------------------------------------------------------------
0001F690                            ; Animated pattern routine - Green Hill
0001F690                            ; ---------------------------------------------------------------------------
0001F690                            
0001F690                            AniArt_GHZ:
0001F690                            
0001F690                            AniArt_GHZ_Waterfall:
0001F690                            
0001F690 =00000008                  @size:		equ 8	; number of tiles per frame
0001F690                            
0001F690 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F694 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F696                            
0001F696 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F69C 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F6A2 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F6A6 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F6AA 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F6AE 6700                       		beq.s	@isframe0	; branch if frame 0
0001F6B0 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F6B4                            
0001F6B4                            	@isframe0:
0001F6BE 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F6C2 6000 0000                  		bra.w	LoadTiles
0001F6C6                            ; ===========================================================================
0001F6C6                            
0001F6C6                            AniArt_GHZ_Bigflower:
0001F6C6                            
0001F6C6 =00000010                  @size:		equ 16	; number of tiles per frame
0001F6C6                            
0001F6C6 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F6CA 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F6CC                            
0001F6CC 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F6D2 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F6D8 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F6DC 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F6E0 0240 0001                  		andi.w	#1,d0
0001F6E4 6700                       		beq.s	@isframe0
0001F6E6 43E9 0200                  		lea	@size*$20(a1),a1
0001F6EA                            
0001F6EA                            	@isframe0:
0001F6F4 323C 000F                  		move.w	#@size-1,d1
0001F6F8 6000 0000                  		bra.w	LoadTiles
0001F6FC                            ; ===========================================================================
0001F6FC                            
0001F6FC                            AniArt_GHZ_Smallflower:
0001F6FC                            
0001F6FC =0000000C                  @size:		equ 12	; number of tiles per frame
0001F6FC                            
0001F6FC 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F700 6A00                       		bpl.s	@end
0001F702                            
0001F702 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F708 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F70C 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F710 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F714 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F718 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F71C 6600                       		bne.s	@isframe1	; if not, branch
0001F71E 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F724                            
0001F724                            	@isframe1:
0001F724 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F726 3200                       		move.w	d0,d1
0001F728 D040                       		add.w	d0,d0
0001F72A D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F736 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F73C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F740 323C 000B                  		move.w	#@size-1,d1
0001F744 6100 0000                  		bsr.w	LoadTiles
0001F748                            
0001F748                            @end:
0001F748 4E75                       		rts	
0001F74A                            
0001F74A 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F74E                            ; ===========================================================================
0001F74E                            ; ---------------------------------------------------------------------------
0001F74E                            ; Animated pattern routine - Marble
0001F74E                            ; ---------------------------------------------------------------------------
0001F74E                            
0001F74E                            AniArt_MZ:
0001F74E                            
0001F74E                            AniArt_MZ_Lava:
0001F74E                            
0001F74E =00000008                  @size:		equ 8	; number of tiles per frame
0001F74E                            
0001F74E 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F752 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F754                            
0001F754 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F75A 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F760 7000                       		moveq	#0,d0
0001F762 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F766 5200                       		addq.b	#1,d0		; increment frame counter
0001F768 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F76C 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F76E 7000                       		moveq	#0,d0
0001F770                            
0001F770                            	@frame01or2:
0001F770 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F774 C0FC 0100                  		mulu.w	#@size*$20,d0
0001F778 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F784 323C 0007                  		move.w	#@size-1,d1
0001F788 6100 0000                  		bsr.w	LoadTiles
0001F78C                            
0001F78C                            AniArt_MZ_Magma:
0001F78C 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F790 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F792                            		
0001F792 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F798 7000                       		moveq	#0,d0
0001F79A 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F79E 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F7A4 EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F7A6 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F7B2 7600                       		moveq	#0,d3
0001F7B4 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F7B8 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F7BC 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F7C0 343C 0003                  		move.w	#3,d2
0001F7C4                            
0001F7C4                            	@loop:
0001F7C4 3003                       		move.w	d3,d0
0001F7C6 D040                       		add.w	d0,d0
0001F7C8 0240 001E                  		andi.w	#$1E,d0
0001F7CC 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F7D2 3033 0000                  		move.w	(a3,d0.w),d0
0001F7D6 47F3 0000                  		lea	(a3,d0.w),a3
0001F7DA 224C                       		movea.l	a4,a1
0001F7DC 323C 001F                  		move.w	#$1F,d1
0001F7E0 4E93                       		jsr	(a3)
0001F7E2 5843                       		addq.w	#4,d3
0001F7E4 51CA FFDE                  		dbf	d2,@loop
0001F7E8 4E75                       		rts	
0001F7EA                            ; ===========================================================================
0001F7EA                            
0001F7EA                            AniArt_MZ_Torch:
0001F7EA                            
0001F7EA =00000006                  @size:		equ 6	; number of tiles per frame
0001F7EA                            
0001F7EA 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F7EE 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F7F2                            		
0001F7F2 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F7F8 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F7FE 7000                       		moveq	#0,d0
0001F800 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F804 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F808 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F80E C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F812 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F81E 323C 0005                  		move.w	#@size-1,d1
0001F822 6000 0000                  		bra.w	LoadTiles
0001F826                            
0001F826                            @end:
0001F826 4E75                       		rts	
0001F828                            ; ===========================================================================
0001F828                            ; ---------------------------------------------------------------------------
0001F828                            ; Animated pattern routine - Scrap Brain
0001F828                            ; ---------------------------------------------------------------------------
0001F828                            
0001F828                            AniArt_SBZ:
0001F828                            
0001F828 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F828                            
0001F828 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F82C 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F82E                            		
0001F82E 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F832 6000                       		bra.s	@chk_smokepuff2
0001F834                            ; ===========================================================================
0001F834                            
0001F834                            @smokepuff:
0001F834 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F838 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F83A                            		
0001F83A 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F840 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F850 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F854 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F858 0240 0007                  		andi.w	#7,d0
0001F85C 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F85E 5340                       		subq.w	#1,d0
0001F860 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F864 43F1 0000                  		lea	(a1,d0.w),a1
0001F868 323C 000B                  		move.w	#@size-1,d1
0001F86C 6000 0000                  		bra.w	LoadTiles
0001F870                            ; ===========================================================================
0001F870                            
0001F870                            @untilnextpuff:
0001F870 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F876                            
0001F876                            @clearsky:
0001F876 323C 0005                  		move.w	#(@size/2)-1,d1
0001F87A 6100 0000                  		bsr.w	LoadTiles
0001F87E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F884 323C 0005                  		move.w	#(@size/2)-1,d1
0001F888 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F88C                            ; ===========================================================================
0001F88C                            
0001F88C                            @chk_smokepuff2:
0001F88C 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F890 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F892                            		
0001F892 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F896 6000                       		bra.s	@end
0001F898                            ; ===========================================================================
0001F898                            
0001F898                            @smokepuff2:
0001F898 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F89C 6A00                       		bpl.s	@end		; branch if not 0
0001F89E                            		
0001F89E 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F8A4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F8B4 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F8B8 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F8BC 0240 0007                  		andi.w	#7,d0
0001F8C0 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F8C2 5340                       		subq.w	#1,d0
0001F8C4 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F8C8 43F1 0000                  		lea	(a1,d0.w),a1
0001F8CC 323C 000B                  		move.w	#@size-1,d1
0001F8D0 6000 0000                  		bra.w	LoadTiles
0001F8D4                            ; ===========================================================================
0001F8D4                            
0001F8D4                            @untilnextpuff2:
0001F8D4 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F8DA 609A                       		bra.s	@clearsky
0001F8DC                            ; ===========================================================================
0001F8DC                            
0001F8DC                            @end:
0001F8DC 4E75                       		rts	
0001F8DE                            ; ===========================================================================
0001F8DE                            ; ---------------------------------------------------------------------------
0001F8DE                            ; Animated pattern routine - ending sequence
0001F8DE                            ; ---------------------------------------------------------------------------
0001F8DE                            
0001F8DE                            AniArt_Ending:
0001F8DE                            
0001F8DE                            AniArt_Ending_BigFlower:
0001F8DE                            
0001F8DE =00000010                  @size:		equ 16	; number of tiles per frame
0001F8DE                            
0001F8DE 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F8E2 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F8E4                            		
0001F8E4 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F8EA 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F8F0 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F8F4 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F8F8 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F8FC 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F900 6700                       		beq.s	@isframe0	; branch if frame 0
0001F902 43E9 0200                  		lea	@size*$20(a1),a1
0001F906 45EA 0200                  		lea	@size*$20(a2),a2
0001F90A                            
0001F90A                            	@isframe0:
0001F914 323C 000F                  		move.w	#@size-1,d1
0001F918 6100 0000                  		bsr.w	LoadTiles
0001F91C 224A                       		movea.l	a2,a1
0001F928 323C 000F                  		move.w	#@size-1,d1
0001F92C 6000 0000                  		bra.w	LoadTiles
0001F930                            ; ===========================================================================
0001F930                            
0001F930                            AniArt_Ending_SmallFlower:
0001F930                            
0001F930 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F930                            
0001F930 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F934 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F936                            		
0001F936 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F93C 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F940 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F944 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F948 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F94C EF48                       		lsl.w	#7,d0		; multiply by $80
0001F94E 3200                       		move.w	d0,d1
0001F950 D040                       		add.w	d0,d0
0001F952 D041                       		add.w	d1,d0		; multiply by 3
0001F95E 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F964 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F968 323C 000B                  		move.w	#@size-1,d1
0001F96C 6000 0000                  		bra.w	LoadTiles
0001F970                            ; ===========================================================================
0001F970 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F978                            ; ===========================================================================
0001F978                            
0001F978                            AniArt_Ending_Flower3:
0001F978                            
0001F978 =00000010                  @size:		equ 16	; number of tiles per frame
0001F978                            
0001F978 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F97C 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F97E                            		
0001F97E 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F984 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F988 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F98C 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F990 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F994 E148                       		lsl.w	#8,d0		; multiply by $100
0001F996 D040                       		add.w	d0,d0		; multiply by 2
0001F9A2 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F9A6 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F9AA 323C 000F                  		move.w	#@size-1,d1
0001F9AE 6000 0000                  		bra.w	LoadTiles
0001F9B2                            ; ===========================================================================
0001F9B2 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F9B6                            ; ===========================================================================
0001F9B6                            
0001F9B6                            AniArt_Ending_Flower4:
0001F9B6                            
0001F9B6 =00000010                  @size:		equ 16	; number of tiles per frame
0001F9B6                            
0001F9B6 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F9BA 6A00                       		bpl.s	@end		; branch if not 0
0001F9BC                            		
0001F9BC 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F9C2 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F9C6 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F9CA 0240 0003                  		andi.w	#3,d0
0001F9CE 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F9D2 E148                       		lsl.w	#8,d0		; multiply by $100
0001F9D4 D040                       		add.w	d0,d0		; multiply by 2
0001F9E0 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F9E4 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F9E8 323C 000F                  		move.w	#@size-1,d1
0001F9EC 6000 0000                  		bra.w	LoadTiles
0001F9F0                            ; ===========================================================================
0001F9F0                            
0001F9F0                            @end:
0001F9F0 4E75                       		rts	
0001F9F2                            ; ===========================================================================
0001F9F2                            
0001F9F2                            AniArt_none:
0001F9F2 4E75                       		rts	
0001F9F4                            
0001F9F4                            ; ---------------------------------------------------------------------------
0001F9F4                            ; Subroutine to	transfer graphics to VRAM
0001F9F4                            
0001F9F4                            ; input:
0001F9F4                            ;	a1 = source address
0001F9F4                            ;	a6 = vdp_data_port ($C00000)
0001F9F4                            ;	d1 = number of tiles to load (minus one)
0001F9F4                            ; ---------------------------------------------------------------------------
0001F9F4                            
0001F9F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F9F4                            
0001F9F4                            
0001F9F4                            LoadTiles:
0001F9F4 2C99                       		move.l	(a1)+,(a6)
0001F9F6 2C99                       		move.l	(a1)+,(a6)
0001F9F8 2C99                       		move.l	(a1)+,(a6)
0001F9FA 2C99                       		move.l	(a1)+,(a6)
0001F9FC 2C99                       		move.l	(a1)+,(a6)
0001F9FE 2C99                       		move.l	(a1)+,(a6)
0001FA00 2C99                       		move.l	(a1)+,(a6)
0001FA02 2C99                       		move.l	(a1)+,(a6)
0001FA04 51C9 FFEE                  		dbf	d1,LoadTiles
0001FA08 4E75                       		rts	
0001FA0A                            ; End of function LoadTiles
0001FA0A                            
0001FA0A                            ; ===========================================================================
0001FA0A                            ; ---------------------------------------------------------------------------
0001FA0A                            ; Animated pattern routine - more Marble Zone
0001FA0A                            ; ---------------------------------------------------------------------------
0001FA0A 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001FA0E 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001FA12 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001FA16 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001FA1A 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001FA1E 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001FA22 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001FA26 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001FA2A                            ; ===========================================================================
0001FA2A                            
0001FA2A                            loc_1C3EE:
0001FA2A 2C91                       		move.l	(a1),(a6)
0001FA2C 43E9 0010                  		lea	$10(a1),a1
0001FA30 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001FA34 4E75                       		rts	
0001FA36                            ; ===========================================================================
0001FA36                            
0001FA36                            loc_1C3FA:
0001FA36 2029 0002                  		move.l	2(a1),d0
0001FA3A 1029 0001                  		move.b	1(a1),d0
0001FA3E E098                       		ror.l	#8,d0
0001FA40 2C80                       		move.l	d0,(a6)
0001FA42 43E9 0010                  		lea	$10(a1),a1
0001FA46 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001FA4A 4E75                       		rts	
0001FA4C                            ; ===========================================================================
0001FA4C                            
0001FA4C                            loc_1C410:
0001FA4C 2CA9 0002                  		move.l	2(a1),(a6)
0001FA50 43E9 0010                  		lea	$10(a1),a1
0001FA54 51C9 FFF6                  		dbf	d1,loc_1C410
0001FA58 4E75                       		rts	
0001FA5A                            ; ===========================================================================
0001FA5A                            
0001FA5A                            loc_1C41E:
0001FA5A 2029 0004                  		move.l	4(a1),d0
0001FA5E 1029 0003                  		move.b	3(a1),d0
0001FA62 E098                       		ror.l	#8,d0
0001FA64 2C80                       		move.l	d0,(a6)
0001FA66 43E9 0010                  		lea	$10(a1),a1
0001FA6A 51C9 FFEE                  		dbf	d1,loc_1C41E
0001FA6E 4E75                       		rts	
0001FA70                            ; ===========================================================================
0001FA70                            
0001FA70                            loc_1C434:
0001FA70 2CA9 0004                  		move.l	4(a1),(a6)
0001FA74 43E9 0010                  		lea	$10(a1),a1
0001FA78 51C9 FFF6                  		dbf	d1,loc_1C434
0001FA7C 4E75                       		rts	
0001FA7E                            ; ===========================================================================
0001FA7E                            
0001FA7E                            loc_1C442:
0001FA7E 2029 0006                  		move.l	6(a1),d0
0001FA82 1029 0005                  		move.b	5(a1),d0
0001FA86 E098                       		ror.l	#8,d0
0001FA88 2C80                       		move.l	d0,(a6)
0001FA8A 43E9 0010                  		lea	$10(a1),a1
0001FA8E 51C9 FFEE                  		dbf	d1,loc_1C442
0001FA92 4E75                       		rts	
0001FA94                            ; ===========================================================================
0001FA94                            
0001FA94                            loc_1C458:
0001FA94 2CA9 0006                  		move.l	6(a1),(a6)
0001FA98 43E9 0010                  		lea	$10(a1),a1
0001FA9C 51C9 FFF6                  		dbf	d1,loc_1C458
0001FAA0 4E75                       		rts	
0001FAA2                            ; ===========================================================================
0001FAA2                            
0001FAA2                            loc_1C466:
0001FAA2 2029 0008                  		move.l	8(a1),d0
0001FAA6 1029 0007                  		move.b	7(a1),d0
0001FAAA E098                       		ror.l	#8,d0
0001FAAC 2C80                       		move.l	d0,(a6)
0001FAAE 43E9 0010                  		lea	$10(a1),a1
0001FAB2 51C9 FFEE                  		dbf	d1,loc_1C466
0001FAB6 4E75                       		rts	
0001FAB8                            ; ===========================================================================
0001FAB8                            
0001FAB8                            loc_1C47C:
0001FAB8 2CA9 0008                  		move.l	8(a1),(a6)
0001FABC 43E9 0010                  		lea	$10(a1),a1
0001FAC0 51C9 FFF6                  		dbf	d1,loc_1C47C
0001FAC4 4E75                       		rts	
0001FAC6                            ; ===========================================================================
0001FAC6                            
0001FAC6                            loc_1C48A:
0001FAC6 2029 000A                  		move.l	$A(a1),d0
0001FACA 1029 0009                  		move.b	9(a1),d0
0001FACE E098                       		ror.l	#8,d0
0001FAD0 2C80                       		move.l	d0,(a6)
0001FAD2 43E9 0010                  		lea	$10(a1),a1
0001FAD6 51C9 FFEE                  		dbf	d1,loc_1C48A
0001FADA 4E75                       		rts	
0001FADC                            ; ===========================================================================
0001FADC                            
0001FADC                            loc_1C4A0:
0001FADC 2CA9 000A                  		move.l	$A(a1),(a6)
0001FAE0 43E9 0010                  		lea	$10(a1),a1
0001FAE4 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001FAE8 4E75                       		rts	
0001FAEA                            ; ===========================================================================
0001FAEA                            
0001FAEA                            loc_1C4AE:
0001FAEA 2029 000C                  		move.l	$C(a1),d0
0001FAEE 1029 000B                  		move.b	$B(a1),d0
0001FAF2 E098                       		ror.l	#8,d0
0001FAF4 2C80                       		move.l	d0,(a6)
0001FAF6 43E9 0010                  		lea	$10(a1),a1
0001FAFA 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001FAFE 4E75                       		rts	
0001FB00                            ; ===========================================================================
0001FB00                            
0001FB00                            loc_1C4C4:
0001FB00 2CA9 000C                  		move.l	$C(a1),(a6)
0001FB04 43E9 0010                  		lea	$10(a1),a1
0001FB08 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001FB0C 4E75                       		rts	
0001FB0E                            ; ===========================================================================
0001FB0E                            
0001FB0E                            loc_1C4D2:
0001FB0E 2029 000C                  		move.l	$C(a1),d0
0001FB12 E198                       		rol.l	#8,d0
0001FB14 1011                       		move.b	0(a1),d0
0001FB16 2C80                       		move.l	d0,(a6)
0001FB18 43E9 0010                  		lea	$10(a1),a1
0001FB1C 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001FB20 4E75                       		rts	
0001FB22                            ; ===========================================================================
0001FB22                            
0001FB22                            loc_1C4E8:
0001FB22 3CA9 000E                  		move.w	$E(a1),(a6)
0001FB26 3C91                       		move.w	0(a1),(a6)
0001FB28 43E9 0010                  		lea	$10(a1),a1
0001FB2C 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001FB30 4E75                       		rts	
0001FB32                            ; ===========================================================================
0001FB32                            
0001FB32                            loc_1C4FA:
0001FB32 2011                       		move.l	0(a1),d0
0001FB34 1029 000F                  		move.b	$F(a1),d0
0001FB38 E098                       		ror.l	#8,d0
0001FB3A 2C80                       		move.l	d0,(a6)
0001FB3C 43E9 0010                  		lea	$10(a1),a1
0001FB40 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001FB44 4E75                       		rts	
0001FB46                            
0001FB46                            ; ---------------------------------------------------------------------------
0001FB46                            ; Animated pattern routine - giant ring
0001FB46                            ; ---------------------------------------------------------------------------
0001FB46                            
0001FB46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB46                            
0001FB46                            
0001FB46                            AniArt_GiantRing:
0001FB46                            
0001FB46 =0000000E                  @size:		equ 14
0001FB46                            
0001FB46 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001FB4A 6600                       		bne.s	@loadTiles		; If so, get to work
0001FB4C 4E75                       		rts	
0001FB4E                            ; ===========================================================================
0001FB4E                            ; loc_1C518:
0001FB4E                            @loadTiles:
0001FB4E 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001FB54 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001FB5A 7000                       		moveq	#0,d0
0001FB5C 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001FB60 43F1 0000                  		lea	(a1,d0.w),a1
0001FB64                            		; Turn VRAM address into VDP command
0001FB64 0640 8000                  		addi.w	#$8000,d0
0001FB68 E588                       		lsl.l	#2,d0
0001FB6A E448                       		lsr.w	#2,d0
0001FB6C 0040 4000                  		ori.w	#$4000,d0
0001FB70 4840                       		swap	d0
0001FB72                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001FB72 2D40 0004                  		move.l	d0,4(a6)
0001FB76                            
0001FB76 323C 000D                  		move.w	#@size-1,d1
0001FB7A 6000 FE78                  		bra.w	LoadTiles
0001FB7E                            
0001FB7E                            ; End of function AniArt_GiantRing
0001FB7E                            ; End of function AniArt_GiantRing
0001FB7E                            
0001FB7E                            		include	"_incObj\21 HUD.asm"
0001FB7E                            ; ---------------------------------------------------------------------------
0001FB7E                            ; Object 21 - SCORE, TIME, RINGS
0001FB7E                            ; ---------------------------------------------------------------------------
0001FB7E                            
0001FB7E                            HUD:
0001FB7E 7000                       		moveq	#0,d0
0001FB80 1028 0024                  		move.b	obRoutine(a0),d0
0001FB84 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001FB88 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001FB8C                            ; ===========================================================================
0001FB8C 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001FB8E 0000                       		dc.w HUD_Flash-HUD_Index
0001FB90                            ; ===========================================================================
0001FB90                            
0001FB90                            HUD_Main:	; Routine 0
0001FB90 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FB94 317C 0090 0008             		move.w	#$90,obX(a0)
0001FB9A 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001FBA0 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001FBA8 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001FBAE 117C 0000 0001             		move.b	#0,obRender(a0)
0001FBB4 317C 0000 0018             		move.w	#0,obPriority(a0)
0001FBBA                            
0001FBBA                            HUD_Flash:	; Routine 2
0001FBBA 7000                       		moveq	#0,d0
0001FBBC 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001FBC2 6600                       		bne.s	@display
0001FBC4 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001FBC8 6600                       		bne.s	@norings	; if so, branch
0001FBCA 5240                       		addq.w	#1,d0		; make ring counter flash red
0001FBCC                            ; ===========================================================================
0001FBCC                            
0001FBCC                            @norings:
0001FBCC 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001FBD2 6600                       		bne.s	@display	; if not, branch
0001FBD4 5440                       		addq.w	#2,d0		; make time counter flash red
0001FBD6                            
0001FBD6                            	@display:
0001FBD6 1140 001A                  		move.b	d0,obFrame(a0)
0001FBDA 4EF9 0000 FA22             		jmp	DisplaySprite
0001FBDA 4EF9 0000 FA22             		jmp	DisplaySprite
0001FBE0                            Map_HUD:	include	"_maps\HUD.asm"
0001FBE0                            ; ---------------------------------------------------------------------------
0001FBE0                            ; Sprite mappings - SCORE, TIME, RINGS
0001FBE0                            ; ---------------------------------------------------------------------------
0001FBE0                            Map_HUD_internal:
0001FBE0 0000                       		dc.w @allyellow-Map_HUD_internal
0001FBE2 0000                       		dc.w @ringred-Map_HUD_internal
0001FBE4 0000                       		dc.w @timered-Map_HUD_internal
0001FBE6 0000                       		dc.w @allred-Map_HUD_internal
0001FBE8 0A                         @allyellow:	dc.b $A
0001FBE9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FBEE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FBF3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FBF8 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FBFD 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FC02 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FC07 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FC0C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FC11 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FC16 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FC1B 00                         		dc.b 0
0001FC1C 0A                         @ringred:	dc.b $A
0001FC1D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FC22 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FC27 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FC2C 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FC31 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FC36 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FC3B A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FC40 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FC45 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FC4A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FC4F 00                         		dc.b 0
0001FC50 0A                         @timered:	dc.b $A
0001FC51 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FC56 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FC5B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FC60 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FC65 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FC6A A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FC6F A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FC74 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FC79 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FC7E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FC83 00                         		dc.b 0
0001FC84 0A                         @allred:	dc.b $A
0001FC85 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FC8A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FC8F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FC94 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FC99 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FC9E A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FCA3 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FCA8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FCAD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FCB2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FCB8 00                         		even
0001FCB8 00                         		even
0001FCB8                            
0001FCB8                            ; ---------------------------------------------------------------------------
0001FCB8                            ; Add points subroutine
0001FCB8                            ; ---------------------------------------------------------------------------
0001FCB8                            
0001FCB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCB8                            
0001FCB8                            
0001FCB8                            AddPoints:
0001FCB8 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001FCBE                            
0001FCBE                            
0001FCBE 47F8 FE26                  			lea     (v_score).w,a3
0001FCC2 D193                       			add.l   d0,(a3)
0001FCC4 223C 000F 423F             			move.l  #999999,d1
0001FCCA B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001FCCC 6200                       			bhi.s   @belowmax ; if yes, branch
0001FCCE 2681                       			move.l  d1,(a3) ; reset score to 999999
0001FCD0                            		@belowmax:
0001FCD0 2013                       			move.l  (a3),d0
0001FCD2 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001FCD6 6500                       			blo.s   @noextralife ; if not, branch
0001FCD8                            
0001FCD8 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001FCE0 4A38 FFF8                  			tst.b   (v_megadrive).w
0001FCE4 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001FCE6 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001FCEA 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FCF8                            
0001FCF8                            @locret_1C6B6:
0001FCF8                            @noextralife:
0001FCF8 4E75                       		rts	
0001FCFA                            ; End of function AddPoints
0001FCFA                            
0001FCFA                            		include	"_inc\HUD_Update.asm"
0001FCFA                            ; ---------------------------------------------------------------------------
0001FCFA                            ; Subroutine to	update the HUD
0001FCFA                            ; ---------------------------------------------------------------------------
0001FCFA                            
0001FCFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCFA                            
0001FCFA                            hudVRAM:	macro loc
0001FCFA                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FCFA                            		endm
0001FCFA                            
0001FCFA                            
0001FCFA                            HUD_Update:
0001FCFA 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FCFE 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FD02 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FD06 6700                       		beq.s	@chkrings	; if not, branch
0001FD08                            
0001FD08 4238 FE1F                  		clr.b	(f_scorecount).w
0001FD0C 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FD12 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FD16 6100 0000                  		bsr.w	Hud_Score
0001FD1A                            
0001FD1A                            	@chkrings:
0001FD1A 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FD1E 6700                       		beq.s	@chktime	; if not, branch
0001FD20 6A00                       		bpl.s	@notzero
0001FD22 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FD26                            
0001FD26                            	@notzero:
0001FD26 4238 FE1D                  		clr.b	(f_ringcount).w
0001FD2A 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FD30 7200                       		moveq	#0,d1
0001FD32 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FD36 6100 0000                  		bsr.w	Hud_Rings
0001FD3A                            
0001FD3A                            	@chktime:
0001FD3A 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FD3E 6700                       		beq.s	@chklives	; if not, branch
0001FD40 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FD44 6600                       		bne.s	@chklives	; if yes, branch
0001FD46 43F8 FE22                  		lea	(v_time).w,a1
0001FD4A 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FD50 6700                       		beq.s	TimeOver	; if yes, branch
0001FD52                            
0001FD52 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FD54 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FD58 6500                       		bcs.s	@chklives
0001FD5A 12BC 0000                  		move.b	#0,(a1)
0001FD5E 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FD60 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FD64 6500                       		bcs.s	@updatetime
0001FD66 12BC 0000                  		move.b	#0,(a1)
0001FD6A 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FD6C 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FD70 6500                       		bcs.s	@updatetime
0001FD72 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FD76                            
0001FD76                            	@updatetime:
0001FD76 203C 5E40 0003             		hudVRAM	$DE40
0001FD7C 7200                       		moveq	#0,d1
0001FD7E 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FD82 6100 0000                  		bsr.w	Hud_Mins
0001FD86 203C 5EC0 0003             		hudVRAM	$DEC0
0001FD8C 7200                       		moveq	#0,d1
0001FD8E 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FD92 6100 0000                  		bsr.w	Hud_Secs
0001FD96                            
0001FD96                            	@chklives:
0001FD96 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FD9A 6700                       		beq.s	@chkbonus	; if not, branch
0001FD9C 4238 FE1C                  		clr.b	(f_lifecount).w
0001FDA0 6100 0000                  		bsr.w	Hud_Lives
0001FDA4                            
0001FDA4                            	@chkbonus:
0001FDA4 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FDA8 6700                       		beq.s	@finish		; if not, branch
0001FDAA 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FDB8 7200                       		moveq	#0,d1
0001FDBA 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FDBE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FDC2 7200                       		moveq	#0,d1
0001FDC4 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FDC8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FDCC                            
0001FDCC                            	@finish:
0001FDCC 4E75                       		rts	
0001FDCE                            ; ===========================================================================
0001FDCE                            
0001FDCE                            TimeOver:
0001FDCE 4238 FE1E                  		clr.b	(f_timecount).w
0001FDD2 41F8 D000                  		lea	(v_player).w,a0
0001FDD6 2448                       		movea.l	a0,a2
0001FDD8 6100 E83A                  		bsr.w	KillSonic
0001FDDC 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FDE2 4E75                       		rts	
0001FDE4                            ; ===========================================================================
0001FDE4                            
0001FDE4                            HudDebug:
0001FDE4 6100 0000                  		bsr.w	HudDb_XY
0001FDE8 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FDEC 6700                       		beq.s	@objcounter	; if not, branch
0001FDEE 6A00                       		bpl.s	@notzero
0001FDF0 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FDF4                            
0001FDF4                            	@notzero:
0001FDF4 4238 FE1D                  		clr.b	(f_ringcount).w
0001FDF8 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FDFE 7200                       		moveq	#0,d1
0001FE00 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FE04 6100 0000                  		bsr.w	Hud_Rings
0001FE08                            
0001FE08                            	@objcounter:
0001FE08 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FE0E 7200                       		moveq	#0,d1
0001FE10 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FE14 6100 0000                  		bsr.w	Hud_Secs
0001FE18 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FE1C 6700                       		beq.s	@chkbonus	; if not, branch
0001FE1E 4238 FE1C                  		clr.b	(f_lifecount).w
0001FE22 6100 0000                  		bsr.w	Hud_Lives
0001FE26                            
0001FE26                            	@chkbonus:
0001FE26 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FE2A 6700                       		beq.s	@finish		; if not, branch
0001FE2C 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FE3A 7200                       		moveq	#0,d1
0001FE3C 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FE40 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FE44 7200                       		moveq	#0,d1
0001FE46 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FE4A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FE4E                            
0001FE4E                            	@finish:
0001FE4E 4E75                       		rts	
0001FE50                            ; End of function HUD_Update
0001FE50                            
0001FE50                            ; ---------------------------------------------------------------------------
0001FE50                            ; Subroutine to	load "0" on the	HUD
0001FE50                            ; ---------------------------------------------------------------------------
0001FE50                            
0001FE50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE50                            
0001FE50                            
0001FE50                            Hud_LoadZero:
0001FE5A 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FE5E 343C 0002                  		move.w	#2,d2
0001FE62 6000                       		bra.s	loc_1C83E
0001FE64                            ; End of function Hud_LoadZero
0001FE64                            
0001FE64                            ; ---------------------------------------------------------------------------
0001FE64                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FE64                            ; ---------------------------------------------------------------------------
0001FE64                            
0001FE64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE64                            
0001FE64                            
0001FE64                            Hud_Base:
0001FE64 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FE6A 6100 0000                  		bsr.w	Hud_Lives
0001FE78 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FE7C 343C 000E                  		move.w	#$E,d2
0001FE80                            
0001FE80                            loc_1C83E:
0001FE80 43FA 0000                  		lea	Art_Hud(pc),a1
0001FE84                            
0001FE84                            loc_1C842:
0001FE84 323C 000F                  		move.w	#$F,d1
0001FE88 101A                       		move.b	(a2)+,d0
0001FE8A 6B00                       		bmi.s	loc_1C85E
0001FE8C 4880                       		ext.w	d0
0001FE8E EB48                       		lsl.w	#5,d0
0001FE90 47F1 0000                  		lea	(a1,d0.w),a3
0001FE94                            
0001FE94                            loc_1C852:
0001FE94 2C9B                       		move.l	(a3)+,(a6)
0001FE96 51C9 FFFC                  		dbf	d1,loc_1C852
0001FE9A                            
0001FE9A                            loc_1C858:
0001FE9A 51CA FFE8                  		dbf	d2,loc_1C842
0001FE9E                            
0001FE9E 4E75                       		rts	
0001FEA0                            ; ===========================================================================
0001FEA0                            
0001FEA0                            loc_1C85E:
0001FEA0 2CBC 0000 0000             		move.l	#0,(a6)
0001FEA6 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FEAA                            
0001FEAA 60EE                       		bra.s	loc_1C858
0001FEAC                            ; End of function Hud_Base
0001FEAC                            
0001FEAC                            ; ===========================================================================
0001FEAC 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FEB8 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FEBC                            ; ---------------------------------------------------------------------------
0001FEBC                            ; Subroutine to	load debug mode	numbers	patterns
0001FEBC                            ; ---------------------------------------------------------------------------
0001FEBC                            
0001FEBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEBC                            
0001FEBC                            
0001FEBC                            HudDb_XY:
0001FEC6 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FECA 4841                       		swap	d1
0001FECC 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FED0 6100                       		bsr.s	HudDb_XY2
0001FED2 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FED6 4841                       		swap	d1
0001FED8 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FEDC                            ; End of function HudDb_XY
0001FEDC                            
0001FEDC                            
0001FEDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEDC                            
0001FEDC                            
0001FEDC                            HudDb_XY2:
0001FEDC 7C07                       		moveq	#7,d6
0001FEDE 43F9 0000 059E             		lea	(Art_Text).l,a1
0001FEE4                            
0001FEE4                            HudDb_XYLoop:
0001FEE4 E959                       		rol.w	#4,d1
0001FEE6 3401                       		move.w	d1,d2
0001FEE8 0242 000F                  		andi.w	#$F,d2
0001FEEC 0C42 000A                  		cmpi.w	#$A,d2
0001FEF0 6500                       		bcs.s	loc_1C8B2
0001FEF2 5E42                       		addq.w	#7,d2
0001FEF4                            
0001FEF4                            loc_1C8B2:
0001FEF4 EB4A                       		lsl.w	#5,d2
0001FEF6 47F1 2000                  		lea	(a1,d2.w),a3
0001FEFA 2C9B                       		move.l	(a3)+,(a6)
0001FEFC 2C9B                       		move.l	(a3)+,(a6)
0001FEFE 2C9B                       		move.l	(a3)+,(a6)
0001FF00 2C9B                       		move.l	(a3)+,(a6)
0001FF02 2C9B                       		move.l	(a3)+,(a6)
0001FF04 2C9B                       		move.l	(a3)+,(a6)
0001FF06 2C9B                       		move.l	(a3)+,(a6)
0001FF08 2C9B                       		move.l	(a3)+,(a6)
0001FF0A 4841                       		swap	d1
0001FF0C 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FF10                            
0001FF10 4E75                       		rts	
0001FF12                            ; End of function HudDb_XY2
0001FF12                            
0001FF12                            ; ---------------------------------------------------------------------------
0001FF12                            ; Subroutine to	load rings numbers patterns
0001FF12                            ; ---------------------------------------------------------------------------
0001FF12                            
0001FF12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF12                            
0001FF12                            
0001FF12                            Hud_Rings:
0001FF12 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FF18 7C02                       		moveq	#2,d6
0001FF1A 6000                       		bra.s	Hud_LoadArt
0001FF1C                            ; End of function Hud_Rings
0001FF1C                            
0001FF1C                            ; ---------------------------------------------------------------------------
0001FF1C                            ; Subroutine to	load score numbers patterns
0001FF1C                            ; ---------------------------------------------------------------------------
0001FF1C                            
0001FF1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF1C                            
0001FF1C                            
0001FF1C                            Hud_Score:
0001FF1C 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FF22 7C05                       		moveq	#5,d6
0001FF24                            
0001FF24                            Hud_LoadArt:
0001FF24 7800                       		moveq	#0,d4
0001FF26 43FA 0000                  		lea	Art_Hud(pc),a1
0001FF2A                            
0001FF2A                            Hud_ScoreLoop:
0001FF2A 7400                       		moveq	#0,d2
0001FF2C 261A                       		move.l	(a2)+,d3
0001FF2E                            
0001FF2E                            loc_1C8EC:
0001FF2E 9283                       		sub.l	d3,d1
0001FF30 6500                       		bcs.s	loc_1C8F4
0001FF32 5242                       		addq.w	#1,d2
0001FF34 60F8                       		bra.s	loc_1C8EC
0001FF36                            ; ===========================================================================
0001FF36                            
0001FF36                            loc_1C8F4:
0001FF36 D283                       		add.l	d3,d1
0001FF38 4A42                       		tst.w	d2
0001FF3A 6700                       		beq.s	loc_1C8FE
0001FF3C 383C 0001                  		move.w	#1,d4
0001FF40                            
0001FF40                            loc_1C8FE:
0001FF40 4A44                       		tst.w	d4
0001FF42 6700                       		beq.s	loc_1C92C
0001FF44 ED4A                       		lsl.w	#6,d2
0001FF46 2D40 0004                  		move.l	d0,4(a6)
0001FF4A 47F1 2000                  		lea	(a1,d2.w),a3
0001FF4E 2C9B                       		move.l	(a3)+,(a6)
0001FF50 2C9B                       		move.l	(a3)+,(a6)
0001FF52 2C9B                       		move.l	(a3)+,(a6)
0001FF54 2C9B                       		move.l	(a3)+,(a6)
0001FF56 2C9B                       		move.l	(a3)+,(a6)
0001FF58 2C9B                       		move.l	(a3)+,(a6)
0001FF5A 2C9B                       		move.l	(a3)+,(a6)
0001FF5C 2C9B                       		move.l	(a3)+,(a6)
0001FF5E 2C9B                       		move.l	(a3)+,(a6)
0001FF60 2C9B                       		move.l	(a3)+,(a6)
0001FF62 2C9B                       		move.l	(a3)+,(a6)
0001FF64 2C9B                       		move.l	(a3)+,(a6)
0001FF66 2C9B                       		move.l	(a3)+,(a6)
0001FF68 2C9B                       		move.l	(a3)+,(a6)
0001FF6A 2C9B                       		move.l	(a3)+,(a6)
0001FF6C 2C9B                       		move.l	(a3)+,(a6)
0001FF6E                            
0001FF6E                            loc_1C92C:
0001FF6E 0680 0040 0000             		addi.l	#$400000,d0
0001FF74 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FF78                            
0001FF78 4E75                       		rts	
0001FF7A                            
0001FF7A                            ; End of function Hud_Score
0001FF7A                            ; End of function Hud_Score
0001FF7A                            
0001FF7A                            ; ---------------------------------------------------------------------------
0001FF7A                            ; Subroutine to	load countdown numbers on the continue screen
0001FF7A                            ; ---------------------------------------------------------------------------
0001FF7A                            
0001FF7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF7A                            
0001FF7A                            
0001FF7A                            ContScrCounter:
0001FF84 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FF8A 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FF90 7C01                       		moveq	#1,d6
0001FF92 7800                       		moveq	#0,d4
0001FF94 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FF98                            
0001FF98                            ContScr_Loop:
0001FF98 7400                       		moveq	#0,d2
0001FF9A 261A                       		move.l	(a2)+,d3
0001FF9C                            
0001FF9C                            loc_1C95A:
0001FF9C 9283                       		sub.l	d3,d1
0001FF9E 6500                       		blo.s	loc_1C962
0001FFA0 5242                       		addq.w	#1,d2
0001FFA2 60F8                       		bra.s	loc_1C95A
0001FFA4                            ; ===========================================================================
0001FFA4                            
0001FFA4                            loc_1C962:
0001FFA4 D283                       		add.l	d3,d1
0001FFA6 ED4A                       		lsl.w	#6,d2
0001FFA8 47F1 2000                  		lea	(a1,d2.w),a3
0001FFAC 2C9B                       		move.l	(a3)+,(a6)
0001FFAE 2C9B                       		move.l	(a3)+,(a6)
0001FFB0 2C9B                       		move.l	(a3)+,(a6)
0001FFB2 2C9B                       		move.l	(a3)+,(a6)
0001FFB4 2C9B                       		move.l	(a3)+,(a6)
0001FFB6 2C9B                       		move.l	(a3)+,(a6)
0001FFB8 2C9B                       		move.l	(a3)+,(a6)
0001FFBA 2C9B                       		move.l	(a3)+,(a6)
0001FFBC 2C9B                       		move.l	(a3)+,(a6)
0001FFBE 2C9B                       		move.l	(a3)+,(a6)
0001FFC0 2C9B                       		move.l	(a3)+,(a6)
0001FFC2 2C9B                       		move.l	(a3)+,(a6)
0001FFC4 2C9B                       		move.l	(a3)+,(a6)
0001FFC6 2C9B                       		move.l	(a3)+,(a6)
0001FFC8 2C9B                       		move.l	(a3)+,(a6)
0001FFCA 2C9B                       		move.l	(a3)+,(a6)
0001FFCC 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FFD0                            
0001FFD0 4E75                       		rts	
0001FFD2                            ; End of function ContScrCounter
0001FFD2                            
0001FFD2                            ; ===========================================================================
0001FFD2                            
0001FFD2                            		include	"_inc\HUD (part 2).asm"
0001FFD2                            ; ---------------------------------------------------------------------------
0001FFD2                            ; HUD counter sizes
0001FFD2                            ; ---------------------------------------------------------------------------
0001FFD2 0001 86A0                  Hud_100000:	dc.l 100000
0001FFD6 0000 2710                  Hud_10000:	dc.l 10000
0001FFDA 0000 03E8                  Hud_1000:	dc.l 1000
0001FFDE 0000 0064                  Hud_100:	dc.l 100
0001FFE2 0000 000A                  Hud_10:		dc.l 10
0001FFE6 0000 0001                  Hud_1:		dc.l 1
0001FFEA                            
0001FFEA                            ; ---------------------------------------------------------------------------
0001FFEA                            ; Subroutine to	load time numbers patterns
0001FFEA                            ; ---------------------------------------------------------------------------
0001FFEA                            
0001FFEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FFEA                            
0001FFEA                            
0001FFEA                            Hud_Mins:
0001FFEA 45F9 0001 FFE6             		lea	(Hud_1).l,a2
0001FFF0 7C00                       		moveq	#0,d6
0001FFF2 6000                       		bra.s	loc_1C9BA
0001FFF4                            ; End of function Hud_Mins
0001FFF4                            
0001FFF4                            
0001FFF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FFF4                            
0001FFF4                            
0001FFF4                            Hud_Secs:
0001FFF4 45F9 0001 FFE2             		lea	(Hud_10).l,a2
0001FFFA 7C01                       		moveq	#1,d6
0001FFFC                            
0001FFFC                            loc_1C9BA:
0001FFFC 7800                       		moveq	#0,d4
0001FFFE 43FA 0000                  		lea	Art_Hud(pc),a1
00020002                            
00020002                            Hud_TimeLoop:
00020002 7400                       		moveq	#0,d2
00020004 261A                       		move.l	(a2)+,d3
00020006                            
00020006                            loc_1C9C4:
00020006 9283                       		sub.l	d3,d1
00020008 6500                       		bcs.s	loc_1C9CC
0002000A 5242                       		addq.w	#1,d2
0002000C 60F8                       		bra.s	loc_1C9C4
0002000E                            ; ===========================================================================
0002000E                            
0002000E                            loc_1C9CC:
0002000E D283                       		add.l	d3,d1
00020010 4A42                       		tst.w	d2
00020012 6700                       		beq.s	loc_1C9D6
00020014 383C 0001                  		move.w	#1,d4
00020018                            
00020018                            loc_1C9D6:
00020018 ED4A                       		lsl.w	#6,d2
0002001A 2D40 0004                  		move.l	d0,4(a6)
0002001E 47F1 2000                  		lea	(a1,d2.w),a3
00020022 2C9B                       		move.l	(a3)+,(a6)
00020024 2C9B                       		move.l	(a3)+,(a6)
00020026 2C9B                       		move.l	(a3)+,(a6)
00020028 2C9B                       		move.l	(a3)+,(a6)
0002002A 2C9B                       		move.l	(a3)+,(a6)
0002002C 2C9B                       		move.l	(a3)+,(a6)
0002002E 2C9B                       		move.l	(a3)+,(a6)
00020030 2C9B                       		move.l	(a3)+,(a6)
00020032 2C9B                       		move.l	(a3)+,(a6)
00020034 2C9B                       		move.l	(a3)+,(a6)
00020036 2C9B                       		move.l	(a3)+,(a6)
00020038 2C9B                       		move.l	(a3)+,(a6)
0002003A 2C9B                       		move.l	(a3)+,(a6)
0002003C 2C9B                       		move.l	(a3)+,(a6)
0002003E 2C9B                       		move.l	(a3)+,(a6)
00020040 2C9B                       		move.l	(a3)+,(a6)
00020042 0680 0040 0000             		addi.l	#$400000,d0
00020048 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0002004C                            
0002004C 4E75                       		rts	
0002004E                            ; End of function Hud_Secs
0002004E                            
0002004E                            ; ---------------------------------------------------------------------------
0002004E                            ; Subroutine to	load time/ring bonus numbers patterns
0002004E                            ; ---------------------------------------------------------------------------
0002004E                            
0002004E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002004E                            
0002004E                            
0002004E                            Hud_TimeRingBonus:
0002004E 45F9 0001 FFDA             		lea	(Hud_1000).l,a2
00020054 7C03                       		moveq	#3,d6
00020056 7800                       		moveq	#0,d4
00020058 43FA 0000                  		lea	Art_Hud(pc),a1
0002005C                            
0002005C                            Hud_BonusLoop:
0002005C 7400                       		moveq	#0,d2
0002005E 261A                       		move.l	(a2)+,d3
00020060                            
00020060                            loc_1CA1E:
00020060 9283                       		sub.l	d3,d1
00020062 6500                       		bcs.s	loc_1CA26
00020064 5242                       		addq.w	#1,d2
00020066 60F8                       		bra.s	loc_1CA1E
00020068                            ; ===========================================================================
00020068                            
00020068                            loc_1CA26:
00020068 D283                       		add.l	d3,d1
0002006A 4A42                       		tst.w	d2
0002006C 6700                       		beq.s	loc_1CA30
0002006E 383C 0001                  		move.w	#1,d4
00020072                            
00020072                            loc_1CA30:
00020072 4A44                       		tst.w	d4
00020074 6700                       		beq.s	Hud_ClrBonus
00020076 ED4A                       		lsl.w	#6,d2
00020078 47F1 2000                  		lea	(a1,d2.w),a3
0002007C 2C9B                       		move.l	(a3)+,(a6)
0002007E 2C9B                       		move.l	(a3)+,(a6)
00020080 2C9B                       		move.l	(a3)+,(a6)
00020082 2C9B                       		move.l	(a3)+,(a6)
00020084 2C9B                       		move.l	(a3)+,(a6)
00020086 2C9B                       		move.l	(a3)+,(a6)
00020088 2C9B                       		move.l	(a3)+,(a6)
0002008A 2C9B                       		move.l	(a3)+,(a6)
0002008C 2C9B                       		move.l	(a3)+,(a6)
0002008E 2C9B                       		move.l	(a3)+,(a6)
00020090 2C9B                       		move.l	(a3)+,(a6)
00020092 2C9B                       		move.l	(a3)+,(a6)
00020094 2C9B                       		move.l	(a3)+,(a6)
00020096 2C9B                       		move.l	(a3)+,(a6)
00020098 2C9B                       		move.l	(a3)+,(a6)
0002009A 2C9B                       		move.l	(a3)+,(a6)
0002009C                            
0002009C                            loc_1CA5A:
0002009C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
000200A0                            
000200A0 4E75                       		rts	
000200A2                            ; ===========================================================================
000200A2                            
000200A2                            Hud_ClrBonus:
000200A2 7A0F                       		moveq	#$F,d5
000200A4                            
000200A4                            Hud_ClrBonusLoop:
000200A4 2CBC 0000 0000             		move.l	#0,(a6)
000200AA 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
000200AE                            
000200AE 60EC                       		bra.s	loc_1CA5A
000200B0                            ; End of function Hud_TimeRingBonus
000200B0                            
000200B0                            ; ---------------------------------------------------------------------------
000200B0                            ; Subroutine to	load uncompressed lives	counter	patterns
000200B0                            ; ---------------------------------------------------------------------------
000200B0                            
000200B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000200B0                            
000200B0                            
000200B0                            Hud_Lives:
000200B0 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
000200B6 7200                       		moveq	#0,d1
000200B8 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
000200BC 45F9 0001 FFE2             		lea	(Hud_10).l,a2
000200C2 7C01                       		moveq	#1,d6
000200C4 7800                       		moveq	#0,d4
000200C6 43FA 0000                  		lea	Art_LivesNums(pc),a1
000200CA                            
000200CA                            Hud_LivesLoop:
000200CA 2D40 0004                  		move.l	d0,4(a6)
000200CE 7400                       		moveq	#0,d2
000200D0 261A                       		move.l	(a2)+,d3
000200D2                            
000200D2                            loc_1CA90:
000200D2 9283                       		sub.l	d3,d1
000200D4 6500                       		bcs.s	loc_1CA98
000200D6 5242                       		addq.w	#1,d2
000200D8 60F8                       		bra.s	loc_1CA90
000200DA                            ; ===========================================================================
000200DA                            
000200DA                            loc_1CA98:
000200DA D283                       		add.l	d3,d1
000200DC 4A42                       		tst.w	d2
000200DE 6700                       		beq.s	loc_1CAA2
000200E0 383C 0001                  		move.w	#1,d4
000200E4                            
000200E4                            loc_1CAA2:
000200E4 4A44                       		tst.w	d4
000200E6 6700                       		beq.s	Hud_ClrLives
000200E8                            
000200E8                            loc_1CAA6:
000200E8 EB4A                       		lsl.w	#5,d2
000200EA 47F1 2000                  		lea	(a1,d2.w),a3
000200EE 2C9B                       		move.l	(a3)+,(a6)
000200F0 2C9B                       		move.l	(a3)+,(a6)
000200F2 2C9B                       		move.l	(a3)+,(a6)
000200F4 2C9B                       		move.l	(a3)+,(a6)
000200F6 2C9B                       		move.l	(a3)+,(a6)
000200F8 2C9B                       		move.l	(a3)+,(a6)
000200FA 2C9B                       		move.l	(a3)+,(a6)
000200FC 2C9B                       		move.l	(a3)+,(a6)
000200FE                            
000200FE                            loc_1CABC:
000200FE 0680 0040 0000             		addi.l	#$400000,d0
00020104 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00020108                            
00020108 4E75                       		rts	
0002010A                            ; ===========================================================================
0002010A                            
0002010A                            Hud_ClrLives:
0002010A 4A46                       		tst.w	d6
0002010C 67DA                       		beq.s	loc_1CAA6
0002010E 7A07                       		moveq	#7,d5
00020110                            
00020110                            Hud_ClrLivesLoop:
00020110 2CBC 0000 0000             		move.l	#0,(a6)
00020116 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0002011A 60E2                       		bra.s	loc_1CABC
0002011C                            ; End of function Hud_Lives
0002011C                            ; End of function Hud_Lives
0002011C                            
0002011C                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
0002041C                            		even
0002041C                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
0002055C                            		even
0002055C                            
0002055C                            		include	"_incObj\DebugMode.asm"
0002055C                            ; ---------------------------------------------------------------------------
0002055C                            ; When debug mode is currently in use
0002055C                            ; ---------------------------------------------------------------------------
0002055C                            
0002055C                            DebugMode:
0002055C 7000                       		moveq	#0,d0
0002055E 1038 FE08                  		move.b	(v_debuguse).w,d0
00020562 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00020566 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0002056A                            ; ===========================================================================
0002056A 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0002056C 0000                       		dc.w Debug_Action-Debug_Index
0002056E                            ; ===========================================================================
0002056E                            
0002056E                            Debug_Main:	; Routine 0
0002056E 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020572 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
00020578 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
0002057E 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00020584 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
0002058A 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00020590 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00020596 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0002059C 117C 0000 001A             		move.b	#0,obFrame(a0)
000205A2 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000205A8 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000205AE 6600                       		bne.s	@islevel	; if not, branch
000205B0                            
000205B0 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
000205B6 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
000205BC 7006                       		moveq	#6,d0		; use 6th debug	item list
000205BE 6000                       		bra.s	@selectlist
000205C0                            ; ===========================================================================
000205C0                            
000205C0                            @islevel:
000205C0 7000                       		moveq	#0,d0
000205C2 1038 FE10                  		move.b	(v_zone).w,d0
000205C6                            
000205C6                            @selectlist:
000205C6 45F9 0000 0000             		lea	(DebugList).l,a2
000205CC D040                       		add.w	d0,d0
000205CE D4F2 0000                  		adda.w	(a2,d0.w),a2
000205D2 3C1A                       		move.w	(a2)+,d6
000205D4 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
000205D8 6200                       		bhi.s	@noreset	; if not, branch
000205DA 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
000205E0                            
000205E0                            	@noreset:
000205E0 6100 0000                  		bsr.w	Debug_ShowItem
000205E4 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000205EA 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
000205F0                            
000205F0                            Debug_Action:	; Routine 2
000205F0 7006                       		moveq	#6,d0
000205F2 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
000205F8 6700                       		beq.s	@isntlevel
000205FA                            
000205FA 7000                       		moveq	#0,d0
000205FC 1038 FE10                  		move.b	(v_zone).w,d0
00020600                            
00020600                            	@isntlevel:
00020600 45F9 0000 0000             		lea	(DebugList).l,a2
00020606 D040                       		add.w	d0,d0
00020608 D4F2 0000                  		adda.w	(a2,d0.w),a2
0002060C 3C1A                       		move.w	(a2)+,d6
0002060E 6100 0000                  		bsr.w	Debug_Control
00020612 4EF9 0000 FA22             		jmp	(DisplaySprite).l
00020618                            
00020618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020618                            
00020618                            
00020618                            Debug_Control:
00020618 7800                       		moveq	#0,d4
0002061A 323C 0001                  		move.w	#1,d1
0002061E 1838 F605                  		move.b	(v_jpadpress1).w,d4
00020622 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
00020626 6600                       		bne.s	@dirpressed	; if yes, branch
00020628                            
00020628 1038 F604                  		move.b	(v_jpadhold1).w,d0
0002062C 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
00020630 6600                       		bne.s	@dirheld	; if yes, branch
00020632                            
00020632 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020638 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
0002063E 6000 0000                  		bra.w	Debug_ChgItem
00020642                            ; ===========================================================================
00020642                            
00020642                            @dirheld:
00020642 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
00020646 6600                       		bne.s	loc_1D01C
00020648 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
0002064E 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
00020652 6600                       		bne.s	@dirpressed
00020654 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
0002065A                            
0002065A                            @dirpressed:
0002065A 1838 F604                  		move.b	(v_jpadhold1).w,d4
0002065E                            
0002065E                            loc_1D01C:
0002065E 7200                       		moveq	#0,d1
00020660 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
00020664 5241                       		addq.w	#1,d1
00020666 4841                       		swap	d1
00020668 E881                       		asr.l	#4,d1
0002066A 2428 000C                  		move.l	obY(a0),d2
0002066E 2628 0008                  		move.l	obX(a0),d3
00020672 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
00020676 6700                       		beq.s	loc_1D03C	; if not, branch
00020678 9481                       		sub.l	d1,d2
0002067A 6400                       		bcc.s	loc_1D03C
0002067C 7400                       		moveq	#0,d2
0002067E                            
0002067E                            loc_1D03C:
0002067E 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
00020682 6700                       		beq.s	loc_1D052	; if not, branch
00020684 D481                       		add.l	d1,d2
00020686 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0002068C 6500                       		bcs.s	loc_1D052
0002068E 243C 07FF 0000             		move.l	#$7FF0000,d2
00020694                            
00020694                            loc_1D052:
00020694 0804 0002                  		btst	#bitL,d4
00020698 6700                       		beq.s	loc_1D05E
0002069A 9681                       		sub.l	d1,d3
0002069C 6400                       		bcc.s	loc_1D05E
0002069E 7600                       		moveq	#0,d3
000206A0                            
000206A0                            loc_1D05E:
000206A0 0804 0003                  		btst	#bitR,d4
000206A4 6700                       		beq.s	loc_1D066
000206A6 D681                       		add.l	d1,d3
000206A8                            
000206A8                            loc_1D066:
000206A8 2142 000C                  		move.l	d2,obY(a0)
000206AC 2143 0008                  		move.l	d3,obX(a0)
000206B0                            
000206B0                            Debug_ChgItem:
000206B0 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000206B6 6700                       		beq.s	@createitem	; if not, branch
000206B8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000206BE 6700                       		beq.s	@nextitem	; if not, branch
000206C0 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
000206C4 6400                       		bcc.s	@display
000206C6 DD38 FE06                  		add.b	d6,(v_debugitem).w
000206CA 6000                       		bra.s	@display
000206CC                            ; ===========================================================================
000206CC                            
000206CC                            @nextitem:
000206CC 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000206D2 6700                       		beq.s	@createitem	; if not, branch
000206D4 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
000206D8 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
000206DC 6200                       		bhi.s	@display
000206DE 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
000206E4                            
000206E4                            	@display:
000206E4 6000 0000                  		bra.w	Debug_ShowItem
000206E8                            ; ===========================================================================
000206E8                            
000206E8                            @createitem:
000206E8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000206EE 6700                       		beq.s	@backtonormal	; if not, branch
000206F0 4EB9 0000 FEAE             		jsr	(FindFreeObj).l
000206F6 6600                       		bne.s	@backtonormal
000206F8 3368 0008 0008             		move.w	obX(a0),obX(a1)
000206FE 3368 000C 000C             		move.w	obY(a0),obY(a1)
00020704 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00020708 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
0002070E 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
00020714 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
0002071A 7000                       		moveq	#0,d0
0002071C 1038 FE06                  		move.b	(v_debugitem).w,d0
00020720 E748                       		lsl.w	#3,d0
00020722 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
00020728 4E75                       		rts	
0002072A                            ; ===========================================================================
0002072A                            
0002072A                            @backtonormal:
0002072A 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
00020730 6700                       		beq.s	@stayindebug	; if not, branch
00020732 7000                       		moveq	#0,d0
00020734 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
00020738 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020740 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020746 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
0002074A 3140 000A                  		move.w	d0,obX+2(a0)
0002074E 3140 000E                  		move.w	d0,obY+2(a0)
00020752 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
00020758 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
0002075E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
00020764 6600                       		bne.s	@stayindebug	; if not, branch
00020766                            
00020766 4278 F780                  		clr.w	(v_ssangle).w
0002076A 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
00020770 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020778 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
0002077E 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
00020784 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
0002078A 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
00020790                            
00020790                            	@stayindebug:
00020790 4E75                       		rts	
00020792                            ; End of function Debug_Control
00020792                            
00020792                            
00020792                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020792                            
00020792                            
00020792                            Debug_ShowItem:
00020792 7000                       		moveq	#0,d0
00020794 1038 FE06                  		move.b	(v_debugitem).w,d0
00020798 E748                       		lsl.w	#3,d0
0002079A 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
000207A0 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
000207A6 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
000207AC 4E75                       		rts	
000207AE                            ; End of function Debug_ShowItem
000207AE                            ; End of function Debug_ShowItem
000207AE                            		include	"_inc\DebugList.asm"
000207AE                            ; ---------------------------------------------------------------------------
000207AE                            ; Debug	mode item lists
000207AE                            ; ---------------------------------------------------------------------------
000207AE                            DebugList:
000207AE 0000                       	dc.w @GHZ-DebugList
000207B0 0000                       	dc.w @LZ-DebugList
000207B2 0000                       	dc.w @MZ-DebugList
000207B4 0000                       	dc.w @SLZ-DebugList
000207B6 0000                       	dc.w @SYZ-DebugList
000207B8 0000                       	dc.w @SBZ-DebugList
000207BA 0000                       	dc.w @Ending-DebugList
000207BC                            
000207BC                            dbug:	macro map,object,subtype,frame,vram
000207BC                            	dc.l map+(object<<24)
000207BC                            	dc.b subtype,frame
000207BC                            	dc.w vram
000207BC                            	endm
000207BC                            
000207BC                            @GHZ:
000207BC 0000                       	dc.w (@GHZend-@GHZ-2)/8
000207BE                            
000207BE                            ;		mappings	object		subtype	frame	VRAM setting
000207BE 2500 C094 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
000207C6 2600 C85A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000207CE 1F00 B474 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000207D6 2200 B8FE 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000207DE 2B00 CF96 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
000207E6 3600 F3CC 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000207EE 1800 9E1A 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
000207F6 3B00 F4F2 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
000207FE 4001 1A9E 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00020806 4101 0140 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002080E 4201 0366 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00020816 4401 0674 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
0002081E 7901 A2DA 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020826 4B00 C0E4 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
0002082E 7D01 A49C 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
00020836                            	@GHZend:
00020836                            
00020836                            @LZ:
00020836 0000                       	dc.w (@LZend-@LZ-2)/8
00020838                            
00020838                            ;		mappings	object		subtype	frame	VRAM setting
00020838 2500 C094 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020840 2600 C85A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020848 4101 0140 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020850 2C00 D03C 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
00020858 2D00 D228 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
00020860 1601 4460 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
00020868 1601 4460 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
00020870 3300 E6A6 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
00020878 3200 E266 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020880 3600 F3CC 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020888 5201 2536 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
00020890 6101 4688 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
00020898 6101 4688 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
000208A0 6101 4688 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
000208A8 6201 47DC 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
000208B0 6101 4688 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
000208B8 6101 4688 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
000208C0 6301 4B3E 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
000208C8 6001 43AA 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
000208D0 6401 4E8C 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
000208D8 6501 5014 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
000208E0 6501 5014 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
000208E8 0B01 37F6 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
000208F0 0C01 38C6 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
000208F8 7901 A2DA 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020900                            	@LZend:
00020900                            
00020900                            @MZ:
00020900 0000                       	dc.w (@MZend-@MZ-2)/8
00020902                            
00020902                            ;		mappings	object		subtype	frame	VRAM setting
00020902 2500 C094 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002090A 2600 C85A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020912 2200 B8FE 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002091A 3600 F3CC 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020922 4101 0140 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002092A 1300 D736 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
00020932 4601 0D24 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
0002093A 6E01 9376 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020942 6A01 8D2E 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
0002094A 3300 E6A6 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
00020952 1E00 AB8C 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
0002095A 5101 225C 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
00020962 5201 24E0 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
0002096A 5300 A45C 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
00020972 5401 1604 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
0002097A 5501 26D4 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
00020982 7801 9F46 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
0002098A 7901 A2DA 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020992                            	@MZend:
00020992                            
00020992                            @SLZ:
00020992 0000                       	dc.w (@SLZend-@SLZ-2)/8
00020994                            
00020994                            ;		mappings	object		subtype	frame	VRAM setting
00020994 2500 C094 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002099C 2600 C85A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000209A4 5901 321E 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
000209AC 5300 A45C 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
000209B4 1800 9E78 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
000209BC 5A01 3358 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
000209C4 5B01 3510 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
000209CC 5D01 3AE4 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
000209D4 5E01 3E76 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
000209DC 4101 0140 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000209E4 1300 D736 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
000209EC 1C00 A58E 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
000209F4 5F01 40F4 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000209FC 6001 43AA 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
00020A04 7901 A2DA 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020A0C                            	@SLZend:
00020A0C                            
00020A0C                            @SYZ:
00020A0C 0000                       	dc.w (@SYZend-@SYZ-2)/8
00020A0E                            
00020A0E                            ;		mappings	object		subtype	frame	VRAM setting
00020A0E 2500 C094 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020A16 2600 C85A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020A1E 3600 F3CC 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020A26 4101 0140 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020A2E 4301 05C6 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
00020A36 1201 0DA2 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
00020A3E 4701 0F46 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
00020A46 1F00 B474 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020A4E 2200 B8FE 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020A56 5001 1D2E 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
00020A5E 1800 9E66 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
00020A66 5601 2BDE 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
00020A6E 3200 E266 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020A76 7801 9F46 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020A7E 7901 A2DA 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020A86                            	@SYZend:
00020A86                            
00020A86                            @SBZ:
00020A86 0000                       	dc.w (@SBZend-@SBZ-2)/8
00020A88                            
00020A88                            ;		mappings	object		subtype	frame	VRAM setting
00020A88 2500 C094 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020A90 2600 C85A 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020A98 5F01 40F4 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020AA0 6001 43AA 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
00020AA8 7801 9F46 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
00020AB0 1501 2F7A 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
00020AB8 6701 881C E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
00020AC0 5201 24E0 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
00020AC8 3200 E266 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020AD0 6901 8A76 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
00020AD8 6901 8AD0 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
00020AE0 6A01 8D2E 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020AE8 5300 A45C 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
00020AF0 5201 24E0 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00020AF8 6B01 90FE 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00020B00 2A00 A71E 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020B08 6B01 90FE 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00020B10 6A01 8D2E 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00020B18 6B01 90FE 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00020B20 6A01 8D2E 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00020B28 6B01 90FE 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00020B30 6C01 92C0 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00020B38 6D01 0A16 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
00020B40 6D01 0A16 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
00020B48 6E01 9376 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020B50 7001 97BC 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
00020B58 7101 398A 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
00020B60 1E00 AB8C 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020B68 7901 A2DA 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020B70                            	@SBZend:
00020B70                            
00020B70                            @Ending:
00020B70 0000                       	dc.w (@Endingend-@Ending-2)/8
00020B72                            
00020B72                            ;		mappings	object		subtype	frame	VRAM setting
00020B72 2500 C094 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020B7A 2500 C094 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020B82                            	@Endingend:
00020B82                            
00020B82                            	even
00020B82                            	even
00020B82                            		include	"_inc\LevelHeaders.asm"
00020B82                            ; ---------------------------------------------------------------------------
00020B82                            ; Level Headers
00020B82                            ; ---------------------------------------------------------------------------
00020B82                            
00020B82                            LevelHeaders:
00020B82                            
00020B82                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020B82                            	dc.l (plc1<<24)+lvlgfx
00020B82                            	dc.l (plc2<<24)+sixteen
00020B82                            	dc.l twofivesix
00020B82                            	dc.b 0, music, pal, pal
00020B82                            	endm
00020B82                            
00020B82                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020B82                            ; music (unused), palette (unused), palette
00020B82                            
00020B82                            ;		1st PLC				2nd PLC				256x256 data			palette
00020B82                            ;				level gfx*			16x16 data			music*
00020B82                            
00020B82 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
00020B92 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00020BA2 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00020BB2 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00020BC2 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00020BD2 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00020BE2 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020BF2                            	even
00020BF2                            
00020BF2                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020BF2                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020BF2                            		include	"_inc\Pattern Load Cues.asm"
00020BF2                            ; ---------------------------------------------------------------------------
00020BF2                            ; Pattern load cues
00020BF2                            ; ---------------------------------------------------------------------------
00020BF2                            ArtLoadCues:
00020BF2                            
00020BF2 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020BF4 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020BF6 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020BF8 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00020BFA                            PLC_Levels:
00020BFA 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
00020BFC 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00020BFE 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00020C00 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020C02 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020C04 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020C06 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020C08 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00020C0A 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
00020C0C 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00020C0E 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00020C10 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00020C12 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00020C14 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020C16 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020C18 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00020C1A 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
00020C1C                            PLC_Animals:
00020C1C 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00020C1E 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00020C20 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00020C22 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00020C24 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00020C26 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00020C28 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00020C2A 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
00020C2C 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00020C2E 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00020C30 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00020C32 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00020C34                            
00020C34                            plcm:	macro gfx,vram
00020C34                            	dc.l gfx
00020C34                            	dc.w vram
00020C34                            	endm
00020C34                            
00020C34                            ; ---------------------------------------------------------------------------
00020C34                            ; Pattern load cues - standard block 1
00020C34                            ; ---------------------------------------------------------------------------
00020C34 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00020C36 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
00020C3C 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00020C42 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
00020C48 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
00020C4E 0000 0000 ACA0             		plcm	Nem_Points, $ACA0 	; points from enemy
00020C54                            	PLC_Mainend:
00020C54                            ; ---------------------------------------------------------------------------
00020C54                            ; Pattern load cues - standard block 2
00020C54                            ; ---------------------------------------------------------------------------
00020C54 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00020C56 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00020C5C                            	PLC_Main2end:
00020C5C                            ; ---------------------------------------------------------------------------
00020C5C                            ; Pattern load cues - explosion
00020C5C                            ; ---------------------------------------------------------------------------
00020C5C 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
00020C5E 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00020C64                            	PLC_Explodeend:
00020C64                            ; ---------------------------------------------------------------------------
00020C64                            ; Pattern load cues - game/time	over
00020C64                            ; ---------------------------------------------------------------------------
00020C64 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00020C66 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
00020C6C                            	PLC_GameOverend:
00020C6C                            ; ---------------------------------------------------------------------------
00020C6C                            ; Pattern load cues - Green Hill
00020C6C                            ; ---------------------------------------------------------------------------
00020C6C 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
00020C6E 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020C74 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020C7A 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020C80 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020C86 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00020C8C 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
00020C92 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020C98 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00020C9E 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020CA4 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020CAA 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020CB0 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020CB6                            
00020CB6 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020CB8 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020CBE 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020CC4 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020CCA 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020CD0 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020CD6 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00020CDC                            	PLC_GHZ2end:
00020CDC                            ; ---------------------------------------------------------------------------
00020CDC                            ; Pattern load cues - Labyrinth
00020CDC                            ; ---------------------------------------------------------------------------
00020CDC 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00020CDE 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020CE4                            		;plcm	Nem_LzBlock1, $3C00	; block
00020CE4                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020CE4                            		;plcm	Nem_Splash, $4B20	; waterfalls and splash
00020CE4 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020CEA 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020CF0 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
00020CF6 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020CFC 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020D02 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020D08 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020D0E 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020D14                            
00020D14 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020D16 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020D1C 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020D22 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
00020D28 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020D2E 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020D34 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020D3A 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020D40 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020D46 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020D4C 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D52 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D58 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D5E                            	PLC_LZ2end:
00020D5E                            ; ---------------------------------------------------------------------------
00020D5E                            ; Pattern load cues - Marble
00020D5E                            ; ---------------------------------------------------------------------------
00020D5E 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020D60 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020D66 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020D6C 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020D72 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
00020D78 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020D7E 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020D84 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020D8A 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020D90 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020D96 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020D9C                            
00020D9C 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020D9E 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020DA4 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020DAA                            		;plcm	Nem_MzSwitch, $A260	; switch
00020DAA 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020DB0 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020DB6 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020DBC 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020DC2 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020DC8                            	PLC_MZ2end:
00020DC8                            ; ---------------------------------------------------------------------------
00020DC8                            ; Pattern load cues - Star Light
00020DC8                            ; ---------------------------------------------------------------------------
00020DC8 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020DCA 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020DD0 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020DD6 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020DDC 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020DE2 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020DE8 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020DEE 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020DF4 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020DFA 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020E00 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020E06                            
00020E06 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020E08 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020E0E 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020E14 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020E1A 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020E20 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020E26 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020E2C                            	PLC_SLZ2end:
00020E2C                            ; ---------------------------------------------------------------------------
00020E2C                            ; Pattern load cues - Spring Yard
00020E2C                            ; ---------------------------------------------------------------------------
00020E2C 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020E2E 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020E34                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020E34                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020E34 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020E3A 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020E40 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020E46 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020E4C 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020E52 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020E58                            		;plcm	Nem_SbzBlock, $9860	; vanishing block
00020E58                            
00020E58 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020E5A                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020E5A 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020E60 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020E66 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020E6C                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020E6C 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020E72                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020E72 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020E78 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020E7E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020E84 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020E8A                            	PLC_SYZ2end:
00020E8A                            ; ---------------------------------------------------------------------------
00020E8A                            ; Pattern load cues - Scrap Brain
00020E8A                            ; ---------------------------------------------------------------------------
00020E8A 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020E8C 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020E92 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
00020E98                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020E98                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020E98                            		;plcm	Nem_Girder, $5E00	; girder
00020E98 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020E9E 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020EA4                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020EA4 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020EAA 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020EB0 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020EB6 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020EBC                            
00020EBC 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020EBE                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020EBE 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020EC4 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020ECA                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020ECA 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020ED0 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020ED6 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020EDC 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020EE2 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020EE8 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020EEE 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020EF4 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020EFA                            	PLC_SBZ2end:
00020EFA                            ; ---------------------------------------------------------------------------
00020EFA                            ; Pattern load cues - title card
00020EFA                            ; ---------------------------------------------------------------------------
00020EFA 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020EFC 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020F02                            	PLC_TitleCardend:
00020F02                            ; ---------------------------------------------------------------------------
00020F02                            ; Pattern load cues - act 3 boss
00020F02                            ; ---------------------------------------------------------------------------
00020F02 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020F04 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020F0A 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020F10 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020F16 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020F1C 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020F22 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020F28 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020F2E                            	PLC_Bossend:
00020F2E                            ; ---------------------------------------------------------------------------
00020F2E                            ; Pattern load cues - act 1/2 signpost
00020F2E                            ; ---------------------------------------------------------------------------
00020F2E 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020F30 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020F36 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020F3C 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020F42                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020F42                            	PLC_Signpostend:
00020F42                            ; ---------------------------------------------------------------------------
00020F42                            ; Pattern load cues - beta special stage warp effect
00020F42                            ; ---------------------------------------------------------------------------
00020F42                            PLC_Warp:
00020F42                            	PLC_Warpend:
00020F42                            ; ---------------------------------------------------------------------------
00020F42                            ; Pattern load cues - special stage
00020F42                            ; ---------------------------------------------------------------------------
00020F42 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020F44 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020F4A 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020F50 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020F56 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020F5C 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020F62 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020F68 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020F6E 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020F74 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020F7A 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020F80 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020F86 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020F8C 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020F92 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020F98                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020F98                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020F98                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020F98                            	PLC_SpeStageend:
00020F98                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020F98                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020F98                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020F98                            ; ---------------------------------------------------------------------------
00020F98                            ; Pattern load cues - GHZ animals
00020F98                            ; ---------------------------------------------------------------------------
00020F98 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020F9A 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020FA0 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020FA6                            	PLC_GHZAnimalsend:
00020FA6                            ; ---------------------------------------------------------------------------
00020FA6                            ; Pattern load cues - LZ animals
00020FA6                            ; ---------------------------------------------------------------------------
00020FA6 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020FA8 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020FAE 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020FB4                            	PLC_LZAnimalsend:
00020FB4                            ; ---------------------------------------------------------------------------
00020FB4                            ; Pattern load cues - MZ animals
00020FB4                            ; ---------------------------------------------------------------------------
00020FB4 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020FB6 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020FBC 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020FC2                            	PLC_MZAnimalsend:
00020FC2                            ; ---------------------------------------------------------------------------
00020FC2                            ; Pattern load cues - SLZ animals
00020FC2                            ; ---------------------------------------------------------------------------
00020FC2 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020FC4 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020FCA 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020FD0                            	PLC_SLZAnimalsend:
00020FD0                            ; ---------------------------------------------------------------------------
00020FD0                            ; Pattern load cues - SYZ animals
00020FD0                            ; ---------------------------------------------------------------------------
00020FD0 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020FD2 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020FD8 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020FDE                            	PLC_SYZAnimalsend:
00020FDE                            ; ---------------------------------------------------------------------------
00020FDE                            ; Pattern load cues - SBZ animals
00020FDE                            ; ---------------------------------------------------------------------------
00020FDE 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020FE0 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020FE6 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020FEC                            	PLC_SBZAnimalsend:
00020FEC                            ; ---------------------------------------------------------------------------
00020FEC                            ; Pattern load cues - special stage results screen
00020FEC                            ; ---------------------------------------------------------------------------
00020FEC 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020FEE 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020FF4 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020FFA                            	PLC_SpeStResultend:
00020FFA                            ; ---------------------------------------------------------------------------
00020FFA                            ; Pattern load cues - ending sequence
00020FFA                            ; ---------------------------------------------------------------------------
00020FFA 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020FFC 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00021002 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00021008 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
0002100E                            		;plcm	Nem_EndFlower, $7400	; flowers
0002100E 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021014 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
0002101A 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00021020 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00021026 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
0002102C 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00021032 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00021038 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
0002103E 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00021044 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
0002104A                            	PLC_Endingend:
0002104A                            ; ---------------------------------------------------------------------------
0002104A                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0002104A                            ; ---------------------------------------------------------------------------
0002104A 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
0002104C 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021052 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00021058 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
0002105E                            	PLC_TryAgainend:
0002105E                            ; ---------------------------------------------------------------------------
0002105E                            ; Pattern load cues - Eggman on SBZ 2
0002105E                            ; ---------------------------------------------------------------------------
0002105E 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00021060 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00021066 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
0002106C 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00021072                            	PLC_EggmanSBZ2end:
00021072                            ; ---------------------------------------------------------------------------
00021072                            ; Pattern load cues - final boss
00021072                            ; ---------------------------------------------------------------------------
00021072 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00021074 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
0002107A 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00021080 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021086 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
0002108C 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021092                            	PLC_FZBossend:
00021092                            ; ---------------------------------------------------------------------------
00021092                            ; Pattern load cues - Eggman
00021092                            ; ---------------------------------------------------------------------------
00021092 0006                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00021094 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
0002109A 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
000210A0 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
000210A6 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000210AC 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000210B2 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
000210B8                            	PLC_Eggend:
000210B8                            		even
000210B8                            ; ---------------------------------------------------------------------------
000210B8                            ; Pattern load cue IDs
000210B8                            ; ---------------------------------------------------------------------------
000210B8 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
000210B8 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
000210B8 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
000210B8 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
000210B8 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
000210B8 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
000210B8 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
000210B8 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
000210B8 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
000210B8 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
000210B8 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
000210B8 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
000210B8 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
000210B8 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
000210B8 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
000210B8 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
000210B8 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
000210B8 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
000210B8 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
000210B8 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
000210B8 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
000210B8 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
000210B8 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
000210B8 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
000210B8 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
000210B8 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
000210B8 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
000210B8 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
000210B8 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
000210B8 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
000210B8 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
000210B8 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
000210B8 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
000210B8 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
000210B8                            
00021200                            			dcb.b	$300,$FF
00021500                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021970                            			even
00021970                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
00021A6C                            			even
00021A6C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
00021B4C                            		even
00021B4C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022FB8                            		even
00022FB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024A52                            		even
00024A52                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024A86                            		even
00024A86                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
00024CB6                            		even		
00024CB6                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024D74                            		even
00024D74                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
0002521C                            		even
0002521C                            
0002521C                            Map_Sonic:	include	"_maps\Sonic.asm"
0002521C                            ; --------------------------------------------------------------------------------
0002521C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002521C                            ; --------------------------------------------------------------------------------
0002521C                            
0002521C                            SME_Lx_Kl:	
0002521C 0000 0000                  		dc.w SME_Lx_Kl_142-SME_Lx_Kl, SME_Lx_Kl_143-SME_Lx_Kl	
00025220 0000 0000                  		dc.w SME_Lx_Kl_158-SME_Lx_Kl, SME_Lx_Kl_186-SME_Lx_Kl	
00025224 0000 0000                  		dc.w SME_Lx_Kl_1B9-SME_Lx_Kl, SME_Lx_Kl_1CE-SME_Lx_Kl	
00025228 0000 0000                  		dc.w SME_Lx_Kl_1DE-SME_Lx_Kl, SME_Lx_Kl_1EE-SME_Lx_Kl	
0002522C 0000 0000                  		dc.w SME_Lx_Kl_203-SME_Lx_Kl, SME_Lx_Kl_20E-SME_Lx_Kl	
00025230 0000 0000                  		dc.w SME_Lx_Kl_21E-SME_Lx_Kl, SME_Lx_Kl_22E-SME_Lx_Kl	
00025234 0000 0000                  		dc.w SME_Lx_Kl_23E-SME_Lx_Kl, SME_Lx_Kl_253-SME_Lx_Kl	
00025238 0000 0000                  		dc.w SME_Lx_Kl_263-SME_Lx_Kl, SME_Lx_Kl_287-SME_Lx_Kl	
0002523C 0000 0000                  		dc.w SME_Lx_Kl_2A1-SME_Lx_Kl, SME_Lx_Kl_2AC-SME_Lx_Kl	
00025240 0000 0000                  		dc.w SME_Lx_Kl_2BC-SME_Lx_Kl, SME_Lx_Kl_2D1-SME_Lx_Kl	
00025244 0000 0000                  		dc.w SME_Lx_Kl_2DC-SME_Lx_Kl, SME_Lx_Kl_2EC-SME_Lx_Kl	
00025248 0000 0000                  		dc.w SME_Lx_Kl_306-SME_Lx_Kl, SME_Lx_Kl_320-SME_Lx_Kl	
0002524C 0000 0000                  		dc.w SME_Lx_Kl_33F-SME_Lx_Kl, SME_Lx_Kl_354-SME_Lx_Kl	
00025250 0000 0000                  		dc.w SME_Lx_Kl_364-SME_Lx_Kl, SME_Lx_Kl_37E-SME_Lx_Kl	
00025254 0000 0000                  		dc.w SME_Lx_Kl_393-SME_Lx_Kl, SME_Lx_Kl_3A3-SME_Lx_Kl	
00025258 0000 0000                  		dc.w SME_Lx_Kl_3BD-SME_Lx_Kl, SME_Lx_Kl_3D2-SME_Lx_Kl	
0002525C 0000 0000                  		dc.w SME_Lx_Kl_3DD-SME_Lx_Kl, SME_Lx_Kl_3E8-SME_Lx_Kl	
00025260 0000 0000                  		dc.w SME_Lx_Kl_402-SME_Lx_Kl, SME_Lx_Kl_417-SME_Lx_Kl	
00025264 0000 0000                  		dc.w SME_Lx_Kl_422-SME_Lx_Kl, SME_Lx_Kl_432-SME_Lx_Kl	
00025268 0000 0000                  		dc.w SME_Lx_Kl_442-SME_Lx_Kl, SME_Lx_Kl_461-SME_Lx_Kl	
0002526C 0000 0000                  		dc.w SME_Lx_Kl_480-SME_Lx_Kl, SME_Lx_Kl_495-SME_Lx_Kl	
00025270 0000 0000                  		dc.w SME_Lx_Kl_4A5-SME_Lx_Kl, SME_Lx_Kl_4BF-SME_Lx_Kl	
00025274 0000 0000                  		dc.w SME_Lx_Kl_4D4-SME_Lx_Kl, SME_Lx_Kl_4E4-SME_Lx_Kl	
00025278 0000 0000                  		dc.w SME_Lx_Kl_4FE-SME_Lx_Kl, SME_Lx_Kl_509-SME_Lx_Kl	
0002527C 0000 0000                  		dc.w SME_Lx_Kl_514-SME_Lx_Kl, SME_Lx_Kl_51F-SME_Lx_Kl	
00025280 0000 0000                  		dc.w SME_Lx_Kl_52A-SME_Lx_Kl, SME_Lx_Kl_535-SME_Lx_Kl	
00025284 0000 0000                  		dc.w SME_Lx_Kl_540-SME_Lx_Kl, SME_Lx_Kl_54B-SME_Lx_Kl	
00025288 0000 0000                  		dc.w SME_Lx_Kl_556-SME_Lx_Kl, SME_Lx_Kl_56B-SME_Lx_Kl	
0002528C 0000 0000                  		dc.w SME_Lx_Kl_57B-SME_Lx_Kl, SME_Lx_Kl_58B-SME_Lx_Kl	
00025290 0000 0000                  		dc.w SME_Lx_Kl_59B-SME_Lx_Kl, SME_Lx_Kl_5B0-SME_Lx_Kl	
00025294 0000 0000                  		dc.w SME_Lx_Kl_5C0-SME_Lx_Kl, SME_Lx_Kl_5D0-SME_Lx_Kl	
00025298 0000 0000                  		dc.w SME_Lx_Kl_5E0-SME_Lx_Kl, SME_Lx_Kl_5EB-SME_Lx_Kl	
0002529C 0000 0000                  		dc.w SME_Lx_Kl_5F6-SME_Lx_Kl, SME_Lx_Kl_601-SME_Lx_Kl	
000252A0 0000 0000                  		dc.w SME_Lx_Kl_60C-SME_Lx_Kl, SME_Lx_Kl_617-SME_Lx_Kl	
000252A4 0000 0000                  		dc.w SME_Lx_Kl_622-SME_Lx_Kl, SME_Lx_Kl_62D-SME_Lx_Kl	
000252A8 0000 0000                  		dc.w SME_Lx_Kl_638-SME_Lx_Kl, SME_Lx_Kl_64D-SME_Lx_Kl	
000252AC 0000 0000                  		dc.w SME_Lx_Kl_65D-SME_Lx_Kl, SME_Lx_Kl_668-SME_Lx_Kl	
000252B0 0000 0000                  		dc.w SME_Lx_Kl_678-SME_Lx_Kl, SME_Lx_Kl_68D-SME_Lx_Kl	
000252B4 0000 0000                  		dc.w SME_Lx_Kl_69D-SME_Lx_Kl, SME_Lx_Kl_6A8-SME_Lx_Kl	
000252B8 0000 0000                  		dc.w SME_Lx_Kl_6B8-SME_Lx_Kl, SME_Lx_Kl_6C8-SME_Lx_Kl	
000252BC 0000 0000                  		dc.w SME_Lx_Kl_6D8-SME_Lx_Kl, SME_Lx_Kl_706-SME_Lx_Kl	
000252C0 0000 0000                  		dc.w SME_Lx_Kl_734-SME_Lx_Kl, SME_Lx_Kl_744-SME_Lx_Kl	
000252C4 0000 0000                  		dc.w SME_Lx_Kl_754-SME_Lx_Kl, SME_Lx_Kl_764-SME_Lx_Kl	
000252C8 0000 0000                  		dc.w SME_Lx_Kl_77E-SME_Lx_Kl, SME_Lx_Kl_78E-SME_Lx_Kl	
000252CC 0000 0000                  		dc.w SME_Lx_Kl_79E-SME_Lx_Kl, SME_Lx_Kl_7B8-SME_Lx_Kl	
000252D0 0000 0000                  		dc.w SME_Lx_Kl_7D2-SME_Lx_Kl, SME_Lx_Kl_7E7-SME_Lx_Kl	
000252D4 0000 0000                  		dc.w SME_Lx_Kl_7FC-SME_Lx_Kl, SME_Lx_Kl_811-SME_Lx_Kl	
000252D8 0000 0000                  		dc.w SME_Lx_Kl_826-SME_Lx_Kl, SME_Lx_Kl_82C-SME_Lx_Kl	
000252DC 0000 0000                  		dc.w SME_Lx_Kl_832-SME_Lx_Kl, SME_Lx_Kl_838-SME_Lx_Kl	
000252E0 0000 0000                  		dc.w SME_Lx_Kl_83E-SME_Lx_Kl, SME_Lx_Kl_844-SME_Lx_Kl	
000252E4 0000 0000                  		dc.w SME_Lx_Kl_84A-SME_Lx_Kl, SME_Lx_Kl_850-SME_Lx_Kl	
000252E8 0000 0000                  		dc.w SME_Lx_Kl_860-SME_Lx_Kl, SME_Lx_Kl_866-SME_Lx_Kl	
000252EC 0000 0000                  		dc.w SME_Lx_Kl_871-SME_Lx_Kl, SME_Lx_Kl_877-SME_Lx_Kl	
000252F0 0000 0000                  		dc.w SME_Lx_Kl_882-SME_Lx_Kl, SME_Lx_Kl_888-SME_Lx_Kl	
000252F4 0000 0000                  		dc.w SME_Lx_Kl_89D-SME_Lx_Kl, SME_Lx_Kl_8C1-SME_Lx_Kl	
000252F8 0000 0000                  		dc.w SME_Lx_Kl_8DB-SME_Lx_Kl, SME_Lx_Kl_8EB-SME_Lx_Kl	
000252FC 0000 0000                  		dc.w SME_Lx_Kl_8F6-SME_Lx_Kl, SME_Lx_Kl_90B-SME_Lx_Kl	
00025300 0000 0000                  		dc.w SME_Lx_Kl_920-SME_Lx_Kl, SME_Lx_Kl_935-SME_Lx_Kl	
00025304 0000 0000                  		dc.w SME_Lx_Kl_963-SME_Lx_Kl, SME_Lx_Kl_973-SME_Lx_Kl	
00025308 0000 0000                  		dc.w SME_Lx_Kl_983-SME_Lx_Kl, SME_Lx_Kl_98E-SME_Lx_Kl	
0002530C 0000 0000                  		dc.w SME_Lx_Kl_98F-SME_Lx_Kl, SME_Lx_Kl_9B8-SME_Lx_Kl	
00025310 0000 0000                  		dc.w SME_Lx_Kl_9DC-SME_Lx_Kl, SME_Lx_Kl_9F1-SME_Lx_Kl	
00025314 0000 0000                  		dc.w SME_Lx_Kl_A01-SME_Lx_Kl, SME_Lx_Kl_A11-SME_Lx_Kl	
00025318 0000 0000                  		dc.w SME_Lx_Kl_A21-SME_Lx_Kl, SME_Lx_Kl_A2C-SME_Lx_Kl	
0002531C 0000 0000                  		dc.w SME_Lx_Kl_A3C-SME_Lx_Kl, SME_Lx_Kl_A4C-SME_Lx_Kl	
00025320 0000 0000                  		dc.w SME_Lx_Kl_A5C-SME_Lx_Kl, SME_Lx_Kl_A6C-SME_Lx_Kl	
00025324 0000 0000                  		dc.w SME_Lx_Kl_A81-SME_Lx_Kl, SME_Lx_Kl_AAA-SME_Lx_Kl	
00025328 0000 0000                  		dc.w SME_Lx_Kl_ABF-SME_Lx_Kl, SME_Lx_Kl_AD4-SME_Lx_Kl	
0002532C 0000 0000                  		dc.w SME_Lx_Kl_AEE-SME_Lx_Kl, SME_Lx_Kl_B08-SME_Lx_Kl	
00025330 0000 0000                  		dc.w SME_Lx_Kl_B13-SME_Lx_Kl, SME_Lx_Kl_B2D-SME_Lx_Kl	
00025334 0000 0000                  		dc.w SME_Lx_Kl_B3D-SME_Lx_Kl, SME_Lx_Kl_B57-SME_Lx_Kl	
00025338 0000 0000                  		dc.w SME_Lx_Kl_B62-SME_Lx_Kl, SME_Lx_Kl_B72-SME_Lx_Kl	
0002533C 0000 0000                  		dc.w SME_Lx_Kl_B82-SME_Lx_Kl, SME_Lx_Kl_B92-SME_Lx_Kl	
00025340 0000 0000                  		dc.w SME_Lx_Kl_B9D-SME_Lx_Kl, SME_Lx_Kl_BAD-SME_Lx_Kl	
00025344 0000 0000                  		dc.w SME_Lx_Kl_BE5-SME_Lx_Kl, SME_Lx_Kl_C04-SME_Lx_Kl	
00025348 0000 0000                  		dc.w SME_Lx_Kl_C14-SME_Lx_Kl, SME_Lx_Kl_C38-SME_Lx_Kl	
0002534C 0000 0000                  		dc.w SME_Lx_Kl_C43-SME_Lx_Kl, SME_Lx_Kl_C58-SME_Lx_Kl	
00025350 0000 0000                  		dc.w SME_Lx_Kl_C68-SME_Lx_Kl, SME_Lx_Kl_C78-SME_Lx_Kl	
00025354 0000 0000                  		dc.w SME_Lx_Kl_C8D-SME_Lx_Kl, SME_Lx_Kl_C93-SME_Lx_Kl	
00025358 0000 0000                  		dc.w SME_Lx_Kl_C99-SME_Lx_Kl, SME_Lx_Kl_C9F-SME_Lx_Kl	
0002535C 0000                       		dc.w SME_Lx_Kl_CA5-SME_Lx_Kl	
0002535E 00                         SME_Lx_Kl_142:	dc.b 0	
0002535F 04                         SME_Lx_Kl_143:	dc.b 4	
00025360 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025365 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
0002536A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
0002536F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025374 09                         SME_Lx_Kl_158:	dc.b 9	
00025375 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0002537A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
0002537F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025384 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025389 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
0002538E F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025393 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00025398 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
0002539D F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
000253A2 0A                         SME_Lx_Kl_186:	dc.b $A	
000253A3 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000253A8 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
000253AD 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
000253B2 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
000253B7 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
000253BC F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000253C1 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
000253C6 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
000253CB F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
000253D0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
000253D5 04                         SME_Lx_Kl_1B9:	dc.b 4	
000253D6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
000253DB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000253E0 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
000253E5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
000253EA 03                         SME_Lx_Kl_1CE:	dc.b 3	
000253EB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000253F0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000253F5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000253FA 03                         SME_Lx_Kl_1DE:	dc.b 3	
000253FB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025400 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025405 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002540A 04                         SME_Lx_Kl_1EE:	dc.b 4	
0002540B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025410 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025415 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
0002541A 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
0002541F 02                         SME_Lx_Kl_203:	dc.b 2	
00025420 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025425 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
0002542A 03                         SME_Lx_Kl_20E:	dc.b 3	
0002542B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025430 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025435 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002543A 03                         SME_Lx_Kl_21E:	dc.b 3	
0002543B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025440 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025445 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002544A 03                         SME_Lx_Kl_22E:	dc.b 3	
0002544B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025450 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025455 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
0002545A 04                         SME_Lx_Kl_23E:	dc.b 4	
0002545B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025460 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025465 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
0002546A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
0002546F 03                         SME_Lx_Kl_253:	dc.b 3	
00025470 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025475 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
0002547A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002547F 07                         SME_Lx_Kl_263:	dc.b 7	
00025480 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025485 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
0002548A 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002548F F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025494 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025499 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
0002549E F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
000254A3 05                         SME_Lx_Kl_287:	dc.b 5	
000254A4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
000254A9 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
000254AE EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
000254B3 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
000254B8 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
000254BD 02                         SME_Lx_Kl_2A1:	dc.b 2	
000254BE FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
000254C3 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
000254C8 03                         SME_Lx_Kl_2AC:	dc.b 3	
000254C9 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
000254CE EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
000254D3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
000254D8 04                         SME_Lx_Kl_2BC:	dc.b 4	
000254D9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
000254DE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
000254E3 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
000254E8 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
000254ED 02                         SME_Lx_Kl_2D1:	dc.b 2	
000254EE EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
000254F3 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
000254F8 03                         SME_Lx_Kl_2DC:	dc.b 3	
000254F9 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
000254FE FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025503 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025508 05                         SME_Lx_Kl_2EC:	dc.b 5	
00025509 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
0002550E 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00025513 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
00025518 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
0002551D ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00025522 05                         SME_Lx_Kl_306:	dc.b 5	
00025523 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025528 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
0002552D FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025532 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00025537 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
0002553C 06                         SME_Lx_Kl_320:	dc.b 6	
0002553D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025542 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00025547 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
0002554C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025551 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00025556 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002555B 04                         SME_Lx_Kl_33F:	dc.b 4	
0002555C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025561 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025566 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002556B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025570 03                         SME_Lx_Kl_354:	dc.b 3	
00025571 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025576 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002557B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00025580 05                         SME_Lx_Kl_364:	dc.b 5	
00025581 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025586 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002558B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00025590 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025595 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002559A 04                         SME_Lx_Kl_37E:	dc.b 4	
0002559B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000255A0 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000255A5 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000255AA 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000255AF 03                         SME_Lx_Kl_393:	dc.b 3	
000255B0 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000255B5 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000255BA 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000255BF 05                         SME_Lx_Kl_3A3:	dc.b 5	
000255C0 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000255C5 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000255CA FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000255CF FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000255D4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000255D9 04                         SME_Lx_Kl_3BD:	dc.b 4	
000255DA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000255DF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000255E4 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000255E9 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000255EE 02                         SME_Lx_Kl_3D2:	dc.b 2	
000255EF F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000255F4 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000255F9 02                         SME_Lx_Kl_3DD:	dc.b 2	
000255FA F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000255FF F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
00025604 05                         SME_Lx_Kl_3E8:	dc.b 5	
00025605 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
0002560A F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
0002560F F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00025614 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
00025619 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
0002561E 04                         SME_Lx_Kl_402:	dc.b 4	
0002561F F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00025624 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
00025629 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
0002562E 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025633 02                         SME_Lx_Kl_417:	dc.b 2	
00025634 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025639 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002563E 03                         SME_Lx_Kl_422:	dc.b 3	
0002563F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025644 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025649 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002564E 03                         SME_Lx_Kl_432:	dc.b 3	
0002564F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025654 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025659 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002565E 06                         SME_Lx_Kl_442:	dc.b 6	
0002565F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025664 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025669 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002566E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025673 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025678 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002567D 06                         SME_Lx_Kl_461:	dc.b 6	
0002567E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025683 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025688 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002568D F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025692 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025697 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002569C 04                         SME_Lx_Kl_480:	dc.b 4	
0002569D FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000256A2 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
000256A7 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000256AC 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000256B1 03                         SME_Lx_Kl_495:	dc.b 3	
000256B2 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000256B7 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000256BC 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000256C1 05                         SME_Lx_Kl_4A5:	dc.b 5	
000256C2 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000256C7 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000256CC F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000256D1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000256D6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000256DB 04                         SME_Lx_Kl_4BF:	dc.b 4	
000256DC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000256E1 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000256E6 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000256EB 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000256F0 03                         SME_Lx_Kl_4D4:	dc.b 3	
000256F1 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000256F6 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000256FB EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00025700 05                         SME_Lx_Kl_4E4:	dc.b 5	
00025701 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025706 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
0002570B F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00025710 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025715 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002571A 02                         SME_Lx_Kl_4FE:	dc.b 2	
0002571B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025720 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025725 02                         SME_Lx_Kl_509:	dc.b 2	
00025726 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002572B EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025730 02                         SME_Lx_Kl_514:	dc.b 2	
00025731 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025736 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002573B 02                         SME_Lx_Kl_51F:	dc.b 2	
0002573C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025741 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025746 02                         SME_Lx_Kl_52A:	dc.b 2	
00025747 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002574C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025751 02                         SME_Lx_Kl_535:	dc.b 2	
00025752 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025757 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002575C 02                         SME_Lx_Kl_540:	dc.b 2	
0002575D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025762 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025767 02                         SME_Lx_Kl_54B:	dc.b 2	
00025768 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002576D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025772 04                         SME_Lx_Kl_556:	dc.b 4	
00025773 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025778 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002577D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025782 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025787 03                         SME_Lx_Kl_56B:	dc.b 3	
00025788 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002578D EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025792 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025797 03                         SME_Lx_Kl_57B:	dc.b 3	
00025798 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002579D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000257A2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000257A7 03                         SME_Lx_Kl_58B:	dc.b 3	
000257A8 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000257AD EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000257B2 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000257B7 04                         SME_Lx_Kl_59B:	dc.b 4	
000257B8 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000257BD EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000257C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000257C7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000257CC 03                         SME_Lx_Kl_5B0:	dc.b 3	
000257CD FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000257D2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000257D7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000257DC 03                         SME_Lx_Kl_5C0:	dc.b 3	
000257DD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000257E2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000257E7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000257EC 03                         SME_Lx_Kl_5D0:	dc.b 3	
000257ED EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000257F2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000257F7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000257FC 02                         SME_Lx_Kl_5E0:	dc.b 2	
000257FD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025802 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025807 02                         SME_Lx_Kl_5EB:	dc.b 2	
00025808 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002580D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025812 02                         SME_Lx_Kl_5F6:	dc.b 2	
00025813 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025818 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002581D 02                         SME_Lx_Kl_601:	dc.b 2	
0002581E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025823 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025828 02                         SME_Lx_Kl_60C:	dc.b 2	
00025829 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002582E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025833 02                         SME_Lx_Kl_617:	dc.b 2	
00025834 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025839 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002583E 02                         SME_Lx_Kl_622:	dc.b 2	
0002583F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025844 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025849 02                         SME_Lx_Kl_62D:	dc.b 2	
0002584A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002584F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025854 04                         SME_Lx_Kl_638:	dc.b 4	
00025855 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002585A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002585F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025864 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025869 03                         SME_Lx_Kl_64D:	dc.b 3	
0002586A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002586F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025874 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025879 02                         SME_Lx_Kl_65D:	dc.b 2	
0002587A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002587F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025884 03                         SME_Lx_Kl_668:	dc.b 3	
00025885 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002588A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002588F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025894 04                         SME_Lx_Kl_678:	dc.b 4	
00025895 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002589A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002589F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000258A4 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000258A9 03                         SME_Lx_Kl_68D:	dc.b 3	
000258AA EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000258AF 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000258B4 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000258B9 02                         SME_Lx_Kl_69D:	dc.b 2	
000258BA F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000258BF EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000258C4 03                         SME_Lx_Kl_6A8:	dc.b 3	
000258C5 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000258CA 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000258CF F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000258D4 03                         SME_Lx_Kl_6B8:	dc.b 3	
000258D5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000258DA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000258DF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000258E4 03                         SME_Lx_Kl_6C8:	dc.b 3	
000258E5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000258EA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000258EF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000258F4 09                         SME_Lx_Kl_6D8:	dc.b 9	
000258F5 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000258FA F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000258FF 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
00025904 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025909 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002590E 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025913 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025918 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002591D F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025922 09                         SME_Lx_Kl_706:	dc.b 9	
00025923 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
00025928 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
0002592D 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025932 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025937 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002593C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025941 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025946 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002594B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025950 03                         SME_Lx_Kl_734:	dc.b 3	
00025951 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025956 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002595B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025960 03                         SME_Lx_Kl_744:	dc.b 3	
00025961 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025966 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002596B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025970 03                         SME_Lx_Kl_754:	dc.b 3	
00025971 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025976 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002597B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025980 05                         SME_Lx_Kl_764:	dc.b 5	
00025981 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025986 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002598B F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025990 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025995 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002599A 03                         SME_Lx_Kl_77E:	dc.b 3	
0002599B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000259A0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000259A5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000259AA 03                         SME_Lx_Kl_78E:	dc.b 3	
000259AB ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000259B0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000259B5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000259BA 05                         SME_Lx_Kl_79E:	dc.b 5	
000259BB 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000259C0 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000259C5 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000259CA ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000259CF ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000259D4 05                         SME_Lx_Kl_7B8:	dc.b 5	
000259D5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000259DA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000259DF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000259E4 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000259E9 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000259EE 04                         SME_Lx_Kl_7D2:	dc.b 4	
000259EF F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000259F4 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000259F9 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000259FE F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
00025A03 04                         SME_Lx_Kl_7E7:	dc.b 4	
00025A04 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
00025A09 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
00025A0E F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00025A13 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
00025A18 04                         SME_Lx_Kl_7FC:	dc.b 4	
00025A19 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
00025A1E F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00025A23 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
00025A28 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
00025A2D 04                         SME_Lx_Kl_811:	dc.b 4	
00025A2E E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025A33 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025A38 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
00025A3D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025A42 01                         SME_Lx_Kl_826:	dc.b 1	
00025A43 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A48 01                         SME_Lx_Kl_82C:	dc.b 1	
00025A49 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A4E 01                         SME_Lx_Kl_832:	dc.b 1	
00025A4F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A54 01                         SME_Lx_Kl_838:	dc.b 1	
00025A55 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A5A 01                         SME_Lx_Kl_83E:	dc.b 1	
00025A5B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A60 01                         SME_Lx_Kl_844:	dc.b 1	
00025A61 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A66 01                         SME_Lx_Kl_84A:	dc.b 1	
00025A67 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A6C 03                         SME_Lx_Kl_850:	dc.b 3	
00025A6D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025A72 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025A77 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
00025A7C 01                         SME_Lx_Kl_860:	dc.b 1	
00025A7D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A82 02                         SME_Lx_Kl_866:	dc.b 2	
00025A83 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025A88 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
00025A8D 01                         SME_Lx_Kl_871:	dc.b 1	
00025A8E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A93 02                         SME_Lx_Kl_877:	dc.b 2	
00025A94 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025A99 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00025A9E 01                         SME_Lx_Kl_882:	dc.b 1	
00025A9F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025AA4 04                         SME_Lx_Kl_888:	dc.b 4	
00025AA5 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00025AAA FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
00025AAF F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025AB4 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
00025AB9 07                         SME_Lx_Kl_89D:	dc.b 7	
00025ABA ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00025ABF FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
00025AC4 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
00025AC9 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
00025ACE F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
00025AD3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
00025AD8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
00025ADD 05                         SME_Lx_Kl_8C1:	dc.b 5	
00025ADE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
00025AE3 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
00025AE8 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
00025AED F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025AF2 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
00025AF7 03                         SME_Lx_Kl_8DB:	dc.b 3	
00025AF8 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
00025AFD ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
00025B02 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
00025B07 02                         SME_Lx_Kl_8EB:	dc.b 2	
00025B08 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00025B0D EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
00025B12 04                         SME_Lx_Kl_8F6:	dc.b 4	
00025B13 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
00025B18 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
00025B1D F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00025B22 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
00025B27 04                         SME_Lx_Kl_90B:	dc.b 4	
00025B28 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
00025B2D FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025B32 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025B37 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
00025B3C 04                         SME_Lx_Kl_920:	dc.b 4	
00025B3D EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025B42 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025B47 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
00025B4C EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025B51 09                         SME_Lx_Kl_935:	dc.b 9	
00025B52 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025B57 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
00025B5C F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025B61 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025B66 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
00025B6B F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025B70 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025B75 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
00025B7A FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
00025B7F 03                         SME_Lx_Kl_963:	dc.b 3	
00025B80 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025B85 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
00025B8A 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00025B8F 03                         SME_Lx_Kl_973:	dc.b 3	
00025B90 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025B95 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
00025B9A EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
00025B9F 02                         SME_Lx_Kl_983:	dc.b 2	
00025BA0 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025BA5 EC0C 0010 E8               		dc.b $EC, $C, 0, $10, $E8	
00025BAA 00                         SME_Lx_Kl_98E:	dc.b 0	
00025BAB 08                         SME_Lx_Kl_98F:	dc.b 8	
00025BAC E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025BB1 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025BB6 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
00025BBB F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025BC0 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025BC5 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
00025BCA 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
00025BCF 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
00025BD4 07                         SME_Lx_Kl_9B8:	dc.b 7	
00025BD5 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025BDA E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025BDF F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
00025BE4 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025BE9 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025BEE 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
00025BF3 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
00025BF8 04                         SME_Lx_Kl_9DC:	dc.b 4	
00025BF9 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025BFE F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
00025C03 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00025C08 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
00025C0D 03                         SME_Lx_Kl_9F1:	dc.b 3	
00025C0E F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00025C13 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00025C18 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00025C1D 03                         SME_Lx_Kl_A01:	dc.b 3	
00025C1E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025C23 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025C28 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025C2D 03                         SME_Lx_Kl_A11:	dc.b 3	
00025C2E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025C33 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025C38 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00025C3D 02                         SME_Lx_Kl_A21:	dc.b 2	
00025C3E F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025C43 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025C48 03                         SME_Lx_Kl_A2C:	dc.b 3	
00025C49 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025C4E 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025C53 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025C58 03                         SME_Lx_Kl_A3C:	dc.b 3	
00025C59 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025C5E FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025C63 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025C68 03                         SME_Lx_Kl_A4C:	dc.b 3	
00025C69 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00025C6E FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025C73 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025C78 03                         SME_Lx_Kl_A5C:	dc.b 3	
00025C79 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025C7E FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025C83 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025C88 04                         SME_Lx_Kl_A6C:	dc.b 4	
00025C89 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00025C8E 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025C93 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025C98 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025C9D 08                         SME_Lx_Kl_A81:	dc.b 8	
00025C9E E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025CA3 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025CA8 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
00025CAD 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025CB2 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025CB7 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
00025CBC 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025CC1 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025CC6 04                         SME_Lx_Kl_AAA:	dc.b 4	
00025CC7 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025CCC 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025CD1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025CD6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025CDB 04                         SME_Lx_Kl_ABF:	dc.b 4	
00025CDC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025CE1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025CE6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025CEB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025CF0 05                         SME_Lx_Kl_AD4:	dc.b 5	
00025CF1 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025CF6 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00025CFB 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025D00 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025D05 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025D0A 05                         SME_Lx_Kl_AEE:	dc.b 5	
00025D0B E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025D10 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00025D15 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025D1A 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025D1F 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025D24 02                         SME_Lx_Kl_B08:	dc.b 2	
00025D25 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025D2A 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025D2F 05                         SME_Lx_Kl_B13:	dc.b 5	
00025D30 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025D35 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00025D3A F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
00025D3F ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025D44 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025D49 03                         SME_Lx_Kl_B2D:	dc.b 3	
00025D4A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025D4F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025D54 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025D59 05                         SME_Lx_Kl_B3D:	dc.b 5	
00025D5A 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
00025D5F F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025D64 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025D69 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00025D6E ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025D73 02                         SME_Lx_Kl_B57:	dc.b 2	
00025D74 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025D79 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025D7E 03                         SME_Lx_Kl_B62:	dc.b 3	
00025D7F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025D84 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025D89 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025D8E 03                         SME_Lx_Kl_B72:	dc.b 3	
00025D8F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025D94 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025D99 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025D9E 03                         SME_Lx_Kl_B82:	dc.b 3	
00025D9F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025DA4 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025DA9 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025DAE 02                         SME_Lx_Kl_B92:	dc.b 2	
00025DAF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025DB4 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025DB9 03                         SME_Lx_Kl_B9D:	dc.b 3	
00025DBA E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
00025DBF E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025DC4 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025DC9 0B                         SME_Lx_Kl_BAD:	dc.b $B	
00025DCA E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025DCF E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025DD4 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
00025DD9 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
00025DDE 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
00025DE3 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
00025DE8 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
00025DED F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
00025DF2 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
00025DF7 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
00025DFC 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00025E01 06                         SME_Lx_Kl_BE5:	dc.b 6	
00025E02 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025E07 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025E0C F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00025E11 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
00025E16 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00025E1B 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00025E20 03                         SME_Lx_Kl_C04:	dc.b 3	
00025E21 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00025E26 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00025E2B 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025E30 07                         SME_Lx_Kl_C14:	dc.b 7	
00025E31 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025E36 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025E3B F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025E40 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025E45 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025E4A F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025E4F F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025E54 02                         SME_Lx_Kl_C38:	dc.b 2	
00025E55 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025E5A F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025E5F 04                         SME_Lx_Kl_C43:	dc.b 4	
00025E60 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025E65 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025E6A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025E6F 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025E74 03                         SME_Lx_Kl_C58:	dc.b 3	
00025E75 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025E7A F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025E7F F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025E84 03                         SME_Lx_Kl_C68:	dc.b 3	
00025E85 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025E8A F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025E8F F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025E94 04                         SME_Lx_Kl_C78:	dc.b 4	
00025E95 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025E9A F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025E9F F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025EA4 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025EA9 01                         SME_Lx_Kl_C8D:	dc.b 1	
00025EAA F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025EAF 01                         SME_Lx_Kl_C93:	dc.b 1	
00025EB0 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025EB5 01                         SME_Lx_Kl_C99:	dc.b 1	
00025EB6 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025EBB 01                         SME_Lx_Kl_C9F:	dc.b 1	
00025EBC F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025EC1 02                         SME_Lx_Kl_CA5:	dc.b 2	
00025EC2 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025EC7 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025ECC                            		even
00025ECC                            		even
00025ECC                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00025ECC                            ; --------------------------------------------------------------------------------
00025ECC                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00025ECC                            
00025ECC                            SME_vJmm3:	
00025ECC 0000 0000                  		dc.w SME_vJmm3_142-SME_vJmm3, SME_vJmm3_143-SME_vJmm3	
00025ED0 0000 0000                  		dc.w SME_vJmm3_14C-SME_vJmm3, SME_vJmm3_15F-SME_vJmm3	
00025ED4 0000 0000                  		dc.w SME_vJmm3_174-SME_vJmm3, SME_vJmm3_17D-SME_vJmm3	
00025ED8 0000 0000                  		dc.w SME_vJmm3_184-SME_vJmm3, SME_vJmm3_18B-SME_vJmm3	
00025EDC 0000 0000                  		dc.w SME_vJmm3_194-SME_vJmm3, SME_vJmm3_199-SME_vJmm3	
00025EE0 0000 0000                  		dc.w SME_vJmm3_1A0-SME_vJmm3, SME_vJmm3_1A7-SME_vJmm3	
00025EE4 0000 0000                  		dc.w SME_vJmm3_1AE-SME_vJmm3, SME_vJmm3_1B7-SME_vJmm3	
00025EE8 0000 0000                  		dc.w SME_vJmm3_1BE-SME_vJmm3, SME_vJmm3_1CD-SME_vJmm3	
00025EEC 0000 0000                  		dc.w SME_vJmm3_1D8-SME_vJmm3, SME_vJmm3_1DF-SME_vJmm3	
00025EF0 0000 0000                  		dc.w SME_vJmm3_1E6-SME_vJmm3, SME_vJmm3_1EF-SME_vJmm3	
00025EF4 0000 0000                  		dc.w SME_vJmm3_1F4-SME_vJmm3, SME_vJmm3_1FB-SME_vJmm3	
00025EF8 0000 0000                  		dc.w SME_vJmm3_206-SME_vJmm3, SME_vJmm3_211-SME_vJmm3	
00025EFC 0000 0000                  		dc.w SME_vJmm3_21E-SME_vJmm3, SME_vJmm3_227-SME_vJmm3	
00025F00 0000 0000                  		dc.w SME_vJmm3_22E-SME_vJmm3, SME_vJmm3_239-SME_vJmm3	
00025F04 0000 0000                  		dc.w SME_vJmm3_242-SME_vJmm3, SME_vJmm3_249-SME_vJmm3	
00025F08 0000 0000                  		dc.w SME_vJmm3_254-SME_vJmm3, SME_vJmm3_25D-SME_vJmm3	
00025F0C 0000 0000                  		dc.w SME_vJmm3_262-SME_vJmm3, SME_vJmm3_267-SME_vJmm3	
00025F10 0000 0000                  		dc.w SME_vJmm3_272-SME_vJmm3, SME_vJmm3_27B-SME_vJmm3	
00025F14 0000 0000                  		dc.w SME_vJmm3_280-SME_vJmm3, SME_vJmm3_287-SME_vJmm3	
00025F18 0000 0000                  		dc.w SME_vJmm3_28E-SME_vJmm3, SME_vJmm3_29B-SME_vJmm3	
00025F1C 0000 0000                  		dc.w SME_vJmm3_2A8-SME_vJmm3, SME_vJmm3_2B1-SME_vJmm3	
00025F20 0000 0000                  		dc.w SME_vJmm3_2B8-SME_vJmm3, SME_vJmm3_2C3-SME_vJmm3	
00025F24 0000 0000                  		dc.w SME_vJmm3_2CC-SME_vJmm3, SME_vJmm3_2D3-SME_vJmm3	
00025F28 0000 0000                  		dc.w SME_vJmm3_2DE-SME_vJmm3, SME_vJmm3_2E3-SME_vJmm3	
00025F2C 0000 0000                  		dc.w SME_vJmm3_2E8-SME_vJmm3, SME_vJmm3_2ED-SME_vJmm3	
00025F30 0000 0000                  		dc.w SME_vJmm3_2F2-SME_vJmm3, SME_vJmm3_2F7-SME_vJmm3	
00025F34 0000 0000                  		dc.w SME_vJmm3_2FC-SME_vJmm3, SME_vJmm3_301-SME_vJmm3	
00025F38 0000 0000                  		dc.w SME_vJmm3_306-SME_vJmm3, SME_vJmm3_30F-SME_vJmm3	
00025F3C 0000 0000                  		dc.w SME_vJmm3_316-SME_vJmm3, SME_vJmm3_31D-SME_vJmm3	
00025F40 0000 0000                  		dc.w SME_vJmm3_324-SME_vJmm3, SME_vJmm3_32D-SME_vJmm3	
00025F44 0000 0000                  		dc.w SME_vJmm3_334-SME_vJmm3, SME_vJmm3_33B-SME_vJmm3	
00025F48 0000 0000                  		dc.w SME_vJmm3_342-SME_vJmm3, SME_vJmm3_347-SME_vJmm3	
00025F4C 0000 0000                  		dc.w SME_vJmm3_34C-SME_vJmm3, SME_vJmm3_351-SME_vJmm3	
00025F50 0000 0000                  		dc.w SME_vJmm3_356-SME_vJmm3, SME_vJmm3_35B-SME_vJmm3	
00025F54 0000 0000                  		dc.w SME_vJmm3_360-SME_vJmm3, SME_vJmm3_365-SME_vJmm3	
00025F58 0000 0000                  		dc.w SME_vJmm3_36A-SME_vJmm3, SME_vJmm3_373-SME_vJmm3	
00025F5C 0000 0000                  		dc.w SME_vJmm3_37A-SME_vJmm3, SME_vJmm3_37F-SME_vJmm3	
00025F60 0000 0000                  		dc.w SME_vJmm3_386-SME_vJmm3, SME_vJmm3_38F-SME_vJmm3	
00025F64 0000 0000                  		dc.w SME_vJmm3_396-SME_vJmm3, SME_vJmm3_39B-SME_vJmm3	
00025F68 0000 0000                  		dc.w SME_vJmm3_3A2-SME_vJmm3, SME_vJmm3_3A9-SME_vJmm3	
00025F6C 0000 0000                  		dc.w SME_vJmm3_3B0-SME_vJmm3, SME_vJmm3_3C3-SME_vJmm3	
00025F70 0000 0000                  		dc.w SME_vJmm3_3D6-SME_vJmm3, SME_vJmm3_3DD-SME_vJmm3	
00025F74 0000 0000                  		dc.w SME_vJmm3_3E4-SME_vJmm3, SME_vJmm3_3EB-SME_vJmm3	
00025F78 0000 0000                  		dc.w SME_vJmm3_3F6-SME_vJmm3, SME_vJmm3_3FD-SME_vJmm3	
00025F7C 0000 0000                  		dc.w SME_vJmm3_404-SME_vJmm3, SME_vJmm3_40F-SME_vJmm3	
00025F80 0000 0000                  		dc.w SME_vJmm3_41A-SME_vJmm3, SME_vJmm3_423-SME_vJmm3	
00025F84 0000 0000                  		dc.w SME_vJmm3_42C-SME_vJmm3, SME_vJmm3_435-SME_vJmm3	
00025F88 0000 0000                  		dc.w SME_vJmm3_43E-SME_vJmm3, SME_vJmm3_441-SME_vJmm3	
00025F8C 0000 0000                  		dc.w SME_vJmm3_444-SME_vJmm3, SME_vJmm3_447-SME_vJmm3	
00025F90 0000 0000                  		dc.w SME_vJmm3_44A-SME_vJmm3, SME_vJmm3_44D-SME_vJmm3	
00025F94 0000 0000                  		dc.w SME_vJmm3_450-SME_vJmm3, SME_vJmm3_453-SME_vJmm3	
00025F98 0000 0000                  		dc.w SME_vJmm3_45A-SME_vJmm3, SME_vJmm3_45D-SME_vJmm3	
00025F9C 0000 0000                  		dc.w SME_vJmm3_462-SME_vJmm3, SME_vJmm3_465-SME_vJmm3	
00025FA0 0000 0000                  		dc.w SME_vJmm3_46A-SME_vJmm3, SME_vJmm3_46D-SME_vJmm3	
00025FA4 0000 0000                  		dc.w SME_vJmm3_476-SME_vJmm3, SME_vJmm3_485-SME_vJmm3	
00025FA8 0000 0000                  		dc.w SME_vJmm3_490-SME_vJmm3, SME_vJmm3_497-SME_vJmm3	
00025FAC 0000 0000                  		dc.w SME_vJmm3_49C-SME_vJmm3, SME_vJmm3_4A5-SME_vJmm3	
00025FB0 0000 0000                  		dc.w SME_vJmm3_4AE-SME_vJmm3, SME_vJmm3_4B7-SME_vJmm3	
00025FB4 0000 0000                  		dc.w SME_vJmm3_4CA-SME_vJmm3, SME_vJmm3_4D1-SME_vJmm3	
00025FB8 0000 0000                  		dc.w SME_vJmm3_4D8-SME_vJmm3, SME_vJmm3_4DD-SME_vJmm3	
00025FBC 0000 0000                  		dc.w SME_vJmm3_4DE-SME_vJmm3, SME_vJmm3_4EF-SME_vJmm3	
00025FC0 0000 0000                  		dc.w SME_vJmm3_4FE-SME_vJmm3, SME_vJmm3_507-SME_vJmm3	
00025FC4 0000 0000                  		dc.w SME_vJmm3_50E-SME_vJmm3, SME_vJmm3_515-SME_vJmm3	
00025FC8 0000 0000                  		dc.w SME_vJmm3_51C-SME_vJmm3, SME_vJmm3_51F-SME_vJmm3	
00025FCC 0000 0000                  		dc.w SME_vJmm3_526-SME_vJmm3, SME_vJmm3_52D-SME_vJmm3	
00025FD0 0000 0000                  		dc.w SME_vJmm3_534-SME_vJmm3, SME_vJmm3_53B-SME_vJmm3	
00025FD4 0000 0000                  		dc.w SME_vJmm3_544-SME_vJmm3, SME_vJmm3_555-SME_vJmm3	
00025FD8 0000 0000                  		dc.w SME_vJmm3_55E-SME_vJmm3, SME_vJmm3_567-SME_vJmm3	
00025FDC 0000 0000                  		dc.w SME_vJmm3_572-SME_vJmm3, SME_vJmm3_57D-SME_vJmm3	
00025FE0 0000 0000                  		dc.w SME_vJmm3_582-SME_vJmm3, SME_vJmm3_58D-SME_vJmm3	
00025FE4 0000 0000                  		dc.w SME_vJmm3_594-SME_vJmm3, SME_vJmm3_59F-SME_vJmm3	
00025FE8 0000 0000                  		dc.w SME_vJmm3_5A4-SME_vJmm3, SME_vJmm3_5AB-SME_vJmm3	
00025FEC 0000 0000                  		dc.w SME_vJmm3_5B2-SME_vJmm3, SME_vJmm3_5B9-SME_vJmm3	
00025FF0 0000 0000                  		dc.w SME_vJmm3_5BE-SME_vJmm3, SME_vJmm3_5C5-SME_vJmm3	
00025FF4 0000 0000                  		dc.w SME_vJmm3_5DC-SME_vJmm3, SME_vJmm3_5E9-SME_vJmm3	
00025FF8 0000 0000                  		dc.w SME_vJmm3_5F0-SME_vJmm3, SME_vJmm3_5FF-SME_vJmm3	
00025FFC 0000 0000                  		dc.w SME_vJmm3_604-SME_vJmm3, SME_vJmm3_60D-SME_vJmm3	
00026000 0000 0000                  		dc.w SME_vJmm3_614-SME_vJmm3, SME_vJmm3_61B-SME_vJmm3	
00026004 0000 0000                  		dc.w SME_vJmm3_624-SME_vJmm3, SME_vJmm3_627-SME_vJmm3	
00026008 0000 0000                  		dc.w SME_vJmm3_62A-SME_vJmm3, SME_vJmm3_62D-SME_vJmm3	
0002600C 0000                       		dc.w SME_vJmm3_630-SME_vJmm3	
0002600E 00                         SME_vJmm3_142:	dc.b 0	
0002600F 0420 0070 0320 0B20 0E     SME_vJmm3_143:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00026018 0920 0020 0B20 0E10 0300+  SME_vJmm3_14C:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
0002602B 0A20 0020 0B20 0E10 0300+  SME_vJmm3_15F:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00026040 04B6 C606 D200 0920 0E     SME_vJmm3_174:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00026049 0350 1150 1720 0E          SME_vJmm3_17D:	dc.b 3, $50, $11, $50, $17, $20, $E	
00026050 0350 2050 1720 0E          SME_vJmm3_184:	dc.b 3, $50, $20, $50, $17, $20, $E	
00026057 0450 2050 1710 2700 0E     SME_vJmm3_18B:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00026060 02B6 D316 DF               SME_vJmm3_194:	dc.b 2, $B6, $D3, $16, $DF	
00026065 0356 E126 E736 EA          SME_vJmm3_199:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
0002606C 0356 E126 E736 EE          SME_vJmm3_1A0:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00026073 03B6 F226 FE27 01          SME_vJmm3_1A7:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
0002607A 0420 0B20 0E87 0A07 13     SME_vJmm3_1AE:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00026083 0380 2920 0B20 0E          SME_vJmm3_1B7:	dc.b 3, $80, $29, $20, $B, $20, $E	
0002608A 0750 3A50 4010 4600 3530+  SME_vJmm3_1BE:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00026099 05B0 4800 3530 3600 3400+  SME_vJmm3_1CD:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
000260A4 0380 5A57 0400 09          SME_vJmm3_1D8:	dc.b 3, $80, $5A, $57, 4, 0, 9	
000260AB 03F7 1437 2407 28          SME_vJmm3_1DF:	dc.b 3, $F7, $14, $37, $24, 7, $28	
000260B2 0450 5450 6350 6910 6F     SME_vJmm3_1E6:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
000260BB 0250 54B0 71               SME_vJmm3_1EF:	dc.b 2, $50, $54, $B0, $71	
000260C0 0357 0457 2907 2F          SME_vJmm3_1F4:	dc.b 3, $57, 4, $57, $29, 7, $2F	
000260C7 0530 7D50 8100 3310 3430+  SME_vJmm3_1FB:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
000260D2 0550 8750 8D20 9350 9600+  SME_vJmm3_206:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
000260DD 0650 8710 9D30 9F50 A330+  SME_vJmm3_211:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
000260EA 0450 AE10 B470 B620 BE     SME_vJmm3_21E:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
000260F3 03F9 7539 8539 89          SME_vJmm3_227:	dc.b 3, $F9, $75, $39, $85, $39, $89	
000260FA 0550 C130 C770 CB20 D310+  SME_vJmm3_22E:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00026105 0450 C110 D870 DA20 E2     SME_vJmm3_239:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
0002610E 03F9 8D39 9D39 A1          SME_vJmm3_242:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00026115 0550 8710 9D00 9370 E520+  SME_vJmm3_249:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00026120 0470 F050 F810 FE51 00     SME_vJmm3_254:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00026129 0270 F0B1 06               SME_vJmm3_25D:	dc.b 2, $70, $F0, $B1, 6	
0002612E 0281 1858 F9               SME_vJmm3_262:	dc.b 2, $81, $18, $58, $F9	
00026133 0508 FF39 0009 04B9 0529+  SME_vJmm3_267:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
0002613E 0451 1251 2111 2751 29     SME_vJmm3_272:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00026147 0251 12B1 2F               SME_vJmm3_27B:	dc.b 2, $51, $12, $B1, $2F	
0002614C 0329 1479 1719 1F          SME_vJmm3_280:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00026153 0370 F001 0681 3B          SME_vJmm3_287:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
0002615A 0651 4411 4A11 4C81 4E01+  SME_vJmm3_28E:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00026167 0651 4421 5911 5C11 5E81+  SME_vJmm3_29B:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00026174 0451 6911 6F81 7111 7A     SME_vJmm3_2A8:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
0002617D 03F9 A529 B529 B8          SME_vJmm3_2B1:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00026184 0551 7C21 8211 8571 8721+  SME_vJmm3_2B8:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
0002618F 0451 7C11 9281 9411 9D     SME_vJmm3_2C3:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00026198 03F9 BB29 CB19 CE          SME_vJmm3_2CC:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
0002619F 0551 4481 9F11 5E11 A801+  SME_vJmm3_2D3:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
000261AA 0251 AAB1 B0               SME_vJmm3_2DE:	dc.b 2, $51, $AA, $B1, $B0	
000261AF 02B7 3057 3C               SME_vJmm3_2E3:	dc.b 2, $B7, $30, $57, $3C	
000261B4 0250 54B1 BC               SME_vJmm3_2E8:	dc.b 2, $50, $54, $B1, $BC	
000261B9 0257 3CB7 42               SME_vJmm3_2ED:	dc.b 2, $57, $3C, $B7, $42	
000261BE 0251 AAB1 C8               SME_vJmm3_2F2:	dc.b 2, $51, $AA, $B1, $C8	
000261C3 0257 3CB7 4E               SME_vJmm3_2F7:	dc.b 2, $57, $3C, $B7, $4E	
000261C8 0250 54B1 D4               SME_vJmm3_2FC:	dc.b 2, $50, $54, $B1, $D4	
000261CD 0257 3CB7 5A               SME_vJmm3_301:	dc.b 2, $57, $3C, $B7, $5A	
000261D2 0451 E011 E6B1 E801 F4     SME_vJmm3_306:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
000261DB 03F8 7128 8128 84          SME_vJmm3_30F:	dc.b 3, $F8, $71, $28, $81, $28, $84	
000261E2 0351 F511 FBB1 FD          SME_vJmm3_316:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
000261E9 03B8 BD78 C901 F4          SME_vJmm3_31D:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
000261F0 0451 E012 09B2 0B01 F4     SME_vJmm3_324:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
000261F9 03B8 D178 DD01 F4          SME_vJmm3_32D:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
00026200 0351 F511 FBB2 17          SME_vJmm3_334:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00026207 0378 E5B8 ED01 F4          SME_vJmm3_33B:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
0002620E 0252 23B2 29               SME_vJmm3_342:	dc.b 2, $52, $23, $B2, $29	
00026213 0258 87B8 8D               SME_vJmm3_347:	dc.b 2, $58, $87, $B8, $8D	
00026218 0251 12B2 35               SME_vJmm3_34C:	dc.b 2, $51, $12, $B2, $35	
0002621D 0258 87B8 99               SME_vJmm3_351:	dc.b 2, $58, $87, $B8, $99	
00026222 0252 23B2 41               SME_vJmm3_356:	dc.b 2, $52, $23, $B2, $41	
00026227 0258 87B8 A5               SME_vJmm3_35B:	dc.b 2, $58, $87, $B8, $A5	
0002622C 0251 12B2 4D               SME_vJmm3_360:	dc.b 2, $51, $12, $B2, $4D	
00026231 0258 87B8 B1               SME_vJmm3_365:	dc.b 2, $58, $87, $B8, $B1	
00026236 0452 5912 5FB2 6102 6D     SME_vJmm3_36A:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
0002623F 03B9 2129 2D59 30          SME_vJmm3_373:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00026246 0272 6EB2 76               SME_vJmm3_37A:	dc.b 2, $72, $6E, $B2, $76	
0002624B 03B9 3629 4259 45          SME_vJmm3_37F:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00026252 0452 5912 82B2 8402 6D     SME_vJmm3_386:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
0002625B 03B9 4B29 5759 5A          SME_vJmm3_38F:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00026262 0272 6EB2 90               SME_vJmm3_396:	dc.b 2, $72, $6E, $B2, $90	
00026267 03B9 6029 6C59 6F          SME_vJmm3_39B:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
0002626E 03B4 EE24 FA54 FD          SME_vJmm3_3A2:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00026275 03B5 0325 0F55 12          SME_vJmm3_3A9:	dc.b 3, $B5, 3, $25, $F, $55, $12	
0002627C 0925 1E55 2105 3715 1815+  SME_vJmm3_3B0:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
0002628F 0925 2D55 3005 3615 2715+  SME_vJmm3_3C3:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
000262A2 03F6 6416 7436 76          SME_vJmm3_3D6:	dc.b 3, $F6, $64, $16, $74, $36, $76	
000262A9 03B6 8176 8D16 95          SME_vJmm3_3DD:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
000262B0 03F5 3835 4805 4C          SME_vJmm3_3E4:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
000262B7 05B5 4D35 5915 5D15 5F25+  SME_vJmm3_3EB:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
000262C2 03B5 6425 7055 73          SME_vJmm3_3F6:	dc.b 3, $B5, $64, $25, $70, $55, $73	
000262C9 03B5 7925 8555 88          SME_vJmm3_3FD:	dc.b 3, $B5, $79, $25, $85, $55, $88	
000262D0 0555 9425 9A05 AD55 8E55+  SME_vJmm3_404:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
000262DB 0525 A355 A605 AC55 9D55+  SME_vJmm3_40F:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
000262E6 04B5 BA25 C625 C925 CC     SME_vJmm3_41A:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000262EF 04B5 AE25 CF25 D225 D5     SME_vJmm3_423:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000262F8 04F5 D825 E805 EB05 EC     SME_vJmm3_42C:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
00026301 04F5 ED25 FD16 0016 02     SME_vJmm3_435:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
0002630A 01F2 9C                    SME_vJmm3_43E:	dc.b 1, $F2, $9C	
0002630D 01F6 2B                    SME_vJmm3_441:	dc.b 1, $F6, $2B	
00026310 01F2 AC                    SME_vJmm3_444:	dc.b 1, $F2, $AC	
00026313 01F6 3B                    SME_vJmm3_447:	dc.b 1, $F6, $3B	
00026316 01F2 BC                    SME_vJmm3_44A:	dc.b 1, $F2, $BC	
00026319 01F6 4B                    SME_vJmm3_44D:	dc.b 1, $F6, $4B	
0002631C 01F2 CC                    SME_vJmm3_450:	dc.b 1, $F2, $CC	
0002631F 0386 5B36 7A26 7E          SME_vJmm3_453:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00026326 01F2 DC                    SME_vJmm3_45A:	dc.b 1, $F2, $DC	
00026329 02B2 EC22 F8               SME_vJmm3_45D:	dc.b 2, $B2, $EC, $22, $F8	
0002632E 01F2 FB                    SME_vJmm3_462:	dc.b 1, $F2, $FB	
00026331 02B3 0B23 17               SME_vJmm3_465:	dc.b 2, $B3, $B, $23, $17	
00026336 01F3 1A                    SME_vJmm3_46A:	dc.b 1, $F3, $1A	
00026339 0453 2AB3 3018 1508 17     SME_vJmm3_46D:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00026342 0753 3C73 4213 4A03 4C08+  SME_vJmm3_476:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00026351 0528 1BB8 1E28 2A18 2D08+  SME_vJmm3_485:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
0002635C 03B8 3038 3C18 40          SME_vJmm3_490:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00026363 0220 0EF4 88               SME_vJmm3_497:	dc.b 2, $20, $E, $F4, $88	
00026368 0427 6627 6927 6C20 0E     SME_vJmm3_49C:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00026371 0413 4D73 4F23 5703 5A     SME_vJmm3_4A5:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
0002637A 0423 5B23 5EF3 6108 42     SME_vJmm3_4AE:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00026383 0928 5338 5678 4303 6408+  SME_vJmm3_4B7:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00026396 03B3 7173 7D00 71          SME_vJmm3_4CA:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
0002639D 03F8 5B18 6B38 6D          SME_vJmm3_4D1:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
000263A4 02F8 0138 11               SME_vJmm3_4D8:	dc.b 2, $F8, 1, $38, $11	
000263A9 00                         SME_vJmm3_4DD:	dc.b 0	
000263AA 0839 E219 EF29 E619 E919+  SME_vJmm3_4DE:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
000263BB 0739 E219 EF29 E619 E919+  SME_vJmm3_4EF:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
000263CA 0439 E289 E619 EF59 F1     SME_vJmm3_4FE:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
000263D3 0373 9D03 A533 A6          SME_vJmm3_507:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000263DA 0373 8533 8D23 91          SME_vJmm3_50E:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000263E1 0376 9736 9F06 A3          SME_vJmm3_515:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000263E8 0183 94                    SME_vJmm3_51C:	dc.b 1, $83, $94	
000263EB 0376 9736 9F06 A3          SME_vJmm3_51F:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000263F2 0373 8533 8D23 91          SME_vJmm3_526:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000263F9 0373 9D03 A533 A6          SME_vJmm3_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00026400 0373 AA33 B223 B6          SME_vJmm3_534:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00026407 04B3 B903 C603 C503 C7     SME_vJmm3_53B:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00026410 0856 1113 C303 C503 C613+  SME_vJmm3_544:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00026421 04B3 DA33 E603 EA03 EB     SME_vJmm3_555:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
0002642A 04B3 C833 D403 D803 D9     SME_vJmm3_55E:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00026433 0583 EC13 F553 F713 FD03+  SME_vJmm3_567:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
0002643E 0584 0014 0953 F713 FD03+  SME_vJmm3_572:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00026449 0284 0B74 14               SME_vJmm3_57D:	dc.b 2, $84, $B, $74, $14	
0002644E 0534 9824 9C34 9F34 A304+  SME_vJmm3_582:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00026459 0384 1C24 2514 28          SME_vJmm3_58D:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026460 0504 A834 A934 AD34 B124+  SME_vJmm3_594:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
0002646B 0284 2A74 33               SME_vJmm3_59F:	dc.b 2, $84, $2A, $74, $33	
00026470 03B7 DF17 EB27 ED          SME_vJmm3_5A4:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00026477 0384 1C24 3B14 3E          SME_vJmm3_5AB:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002647E 03B7 F017 FC27 FE          SME_vJmm3_5B2:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00026485 0254 40B4 46               SME_vJmm3_5B9:	dc.b 2, $54, $40, $B4, $46	
0002648A 0374 5214 5AB4 5C          SME_vJmm3_5BE:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026491 0B74 6814 7004 7924 7504+  SME_vJmm3_5C5:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
000264A8 0674 7A14 7054 8204 7924+  SME_vJmm3_5DC:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
000264B5 0354 C9B4 CF10 6D          SME_vJmm3_5E9:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
000264BC 0714 C334 C514 BE04 BD14+  SME_vJmm3_5F0:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
000264CB 02F4 DB24 EB               SME_vJmm3_5FF:	dc.b 2, $F4, $DB, $24, $EB	
000264D0 04B6 A416 B026 B206 B1     SME_vJmm3_604:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000264D9 03B6 B516 C126 C3          SME_vJmm3_60D:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000264E0 03B9 D129 DD19 E0          SME_vJmm3_614:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000264E7 0427 6F37 7237 7627 7A     SME_vJmm3_61B:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000264F0 01F7 7E                    SME_vJmm3_624:	dc.b 1, $F7, $7E	
000264F3 01F7 8E                    SME_vJmm3_627:	dc.b 1, $F7, $8E	
000264F6 01F7 9E                    SME_vJmm3_62A:	dc.b 1, $F7, $9E	
000264F9 01F7 AE                    SME_vJmm3_62D:	dc.b 1, $F7, $AE	
000264FC 01F7 BE                    SME_vJmm3_630:	dc.b 1, $F7, $BE	
00026500 00                         		even
00026500 00                         		even
00026500                            
00026500                            ; ---------------------------------------------------------------------------
00026500                            ; Uncompressed graphics	- Sonic
00026500                            ; ---------------------------------------------------------------------------
00026500                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0003CB00                            		even
0003CB00                            ; ---------------------------------------------------------------------------
0003CB00                            ; Compressed graphics - various
0003CB00                            ; ---------------------------------------------------------------------------
0003CB00                            Unc_GShield:	incbin	"artunc\Gold Shield.bin"
0003CE60                            		even
0003CE60                            Unc_RedShield:	incbin	"artunc\Red Shield.bin"
0003D1C0                            		even
0003D1C0                            Unc_SpShield:	incbin	"artunc\Gray Shield.bin"
0003D520                            		even
0003D520                            Unc_Shield:	incbin	"artunc\Shield.bin"
0003D880                            		even
0003D880                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0003DD00                            		even
0003DD00                            
0003DD00                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0003DD00                            ; ---------------------------------------------------------------------------
0003DD00                            ; Sprite mappings - walls of the special stage
0003DD00                            ; ---------------------------------------------------------------------------
0003DD00                            Map_SSWalls_internal:
0003DD00 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0003DD02 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0003DD04 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0003DD06 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0003DD08 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0003DD0A 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0003DD0C 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0003DD0E 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0003DD10 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0003DD12 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0003DD14 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0003DD16 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0003DD18 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0003DD1A 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0003DD1C 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0003DD1E 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0003DD20 01                         byte_2C584:	dc.b 1
0003DD21 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003DD26 01                         byte_2C58A:	dc.b 1
0003DD27 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003DD2C 01                         byte_2C590:	dc.b 1
0003DD2D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003DD32 01                         byte_2C596:	dc.b 1
0003DD33 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003DD38 01                         byte_2C59C:	dc.b 1
0003DD39 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003DD3E 01                         byte_2C5A2:	dc.b 1
0003DD3F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003DD44 01                         byte_2C5A8:	dc.b 1
0003DD45 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003DD4A 01                         byte_2C5AE:	dc.b 1
0003DD4B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003DD50 01                         byte_2C5B4:	dc.b 1
0003DD51 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003DD56 01                         byte_2C5BA:	dc.b 1
0003DD57 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003DD5C 01                         byte_2C5C0:	dc.b 1
0003DD5D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003DD62 01                         byte_2C5C6:	dc.b 1
0003DD63 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003DD68 01                         byte_2C5CC:	dc.b 1
0003DD69 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003DD6E 01                         byte_2C5D2:	dc.b 1
0003DD6F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003DD74 01                         byte_2C5D8:	dc.b 1
0003DD75 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003DD7A 01                         byte_2C5DE:	dc.b 1
0003DD7B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003DD80                            		even
0003DD80                            		even
0003DD80                            
0003DD80                            ; ---------------------------------------------------------------------------
0003DD80                            ; Compressed graphics - special stage
0003DD80                            ; ---------------------------------------------------------------------------
0003DD80                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0003E6B8                            		even
0003E6B8                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0003E7EC                            		even
0003E7EC                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0003F47C                            		even
0003F47C                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0003F77C                            		even
0003F77C                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0003FC70                            		even
0003FC70                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0003FD5E                            		even
0003FD5E                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0003FE2E                            		even
0003FE2E                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0003FF24                            		even
0003FF24                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0003FF82                            		even
0003FF82                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
00040014                            		even
00040014                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
000400D6                            		even
000400D6                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
000401A4                            		even
000401A4                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00040270                            		even
00040270                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00040338                            		even
00040338                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00040402                            		even
00040402                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
000404D2                            		even
000404D2                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
000406C6                            		even
000406C6                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
0004082E                            		even
0004082E                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000408DE                            		even
000408DE                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
000409B8                            		even
000409B8                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
00040A3C                            		even
00040A3C                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
00040BBA                            		even
00040BBA                            ; ---------------------------------------------------------------------------
00040BBA                            ; Compressed graphics - GHZ stuff
00040BBA                            ; ---------------------------------------------------------------------------
00040BBA                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
00040C1C                            		even
00040C1C                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00040D36                            		even
00040D36                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00040E54                            		even
00040E54                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00040E9C                            		even
00040E9C                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
0004103A                            		even
0004103A                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
000410B6                            		even
000410B6                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
000412CA                            		even
000412CA                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
000413F6                            		even
000413F6                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
0004154A                            		even
0004154A                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
000415FA                            		even
000415FA                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0004165A                            		even
0004165A                            ; ---------------------------------------------------------------------------
0004165A                            ; Compressed graphics - LZ stuff
0004165A                            ; ---------------------------------------------------------------------------
0004165A                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00041732                            		even
00041732                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00041F26                            		even
00041F26                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
000420B8 00                         		even
000420B8                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00042222                            		even
00042222                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00042862 00                         		even
00042862                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00042904 00                         		even
00042904                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00042988                            		even
00042988                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
00042AEE 00                         		even
00042AEE                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
00042B74 00                         		even
00042B74                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
00042CE2                            		even
00042CE2                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
000431C4                            		even
000431C4                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00043334                            		even
00043334                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
000435EC                            		even
000435EC                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
00043732                            		even
00043732                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
0004385C                            		even
0004385C                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000439D8 00                         		even
000439D8                            ; ---------------------------------------------------------------------------
000439D8                            ; Compressed graphics - MZ stuff
000439D8                            ; ---------------------------------------------------------------------------
000439D8                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00043C66                            		even
00043C66                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
00043D24                            		even
00043D24                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
00043DFC                            		even
00043DFC                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00043E50                            		even
00043E50                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
0004416E 00                         		even
0004416E                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00044A84                            		even
00044A84                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
00044BDC                            		even
00044BDC                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00044C64                            		even
00044C64                            ; ---------------------------------------------------------------------------
00044C64                            ; Compressed graphics - SLZ stuff
00044C64                            ; ---------------------------------------------------------------------------
00044C64                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00044EA0                            		even
00044EA0                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00044FE6                            		even
00044FE6                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
0004522A                            		even
0004522A                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
000452C6 00                         		even
000452C6                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
000453A8                            		even
000453A8                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
0004558A                            		even
0004558A                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
00045696                            		even
00045696                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
0004573A                            		even
0004573A                            ; ---------------------------------------------------------------------------
0004573A                            ; Compressed graphics - SYZ stuff
0004573A                            ; ---------------------------------------------------------------------------
0004573A                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
000458CA                            		even
000458CA                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0004592C                            		even
0004592C                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
000459FC 00                         		even
000459FC                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
00045C8A                            		even
00045C8A                            ; ---------------------------------------------------------------------------
00045C8A                            ; Compressed graphics - SBZ stuff
00045C8A                            ; ---------------------------------------------------------------------------
00045C8A                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
00045CDE                            		even
00045CDE                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00045F7A                            		even
00045F7A                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
0004616A                            		even
0004616A                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00046308                            		even
00046308                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00046638                            		even
00046638                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00046816                            		even
00046816                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0004686E                            		even
0004686E                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
00046A20 00                         		even
00046A20                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
00046BF0 00                         		even
00046BF0                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
00046D7E                            		even
00046D7E                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
00046E18                            		even
00046E18                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
00046E70                            		even
00046E70                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
00046F6C                            		even
00046F6C                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
00047082                            		even
00047082                            ; ---------------------------------------------------------------------------
00047082                            ; Compressed graphics - enemies
00047082                            ; ---------------------------------------------------------------------------
00047082                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
000474CA 00                         		even
000474CA                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
000479BA 00                         		even
000479BA                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
00047C9E 00                         		even
00047C9E                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
00048012 00                         		even
00048012                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
000481FA                            		even
000481FA                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00048928 00                         		even
00048928                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
00048BB0 00                         		even
00048BB0                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
00048E4C 00                         		even
00048E4C                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
00049420                            		even
00049420                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
000496B2                            		even
000496B2                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
00049CFC 00                         		even
00049CFC                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
0004A138                            		even
0004A138                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0004A446 00                         		even
0004A446                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0004A6A6                            		even
0004A6A6                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0004A9A4                            		even
0004A9A4                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0004ABD0 00                         		even
0004ABD0                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0004AD5E                            		even
0004AD5E                            ; ---------------------------------------------------------------------------
0004AD5E                            ; Compressed graphics - various
0004AD5E                            ; ---------------------------------------------------------------------------
0004AD5E                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0004B3AC 00                         		even
0004B3AC                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0004B524 00                         		even
0004B524                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0004B648                            		even
0004B648                            Nem_Ring:	incbin	"artnem\Rings.bin"
0004B79C 00                         		even
0004B79C                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0004BC46                            		even
0004BC46                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0004C2BA                            		even
0004C2BA                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0004C354 00                         		even
0004C354                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0004C4E6                            		even
0004C4E6                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0004C604 00                         		even
0004C604                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0004C6F0                            		even
0004C6F0                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0004CC68 00                         		even
0004CC68                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0004CD52                            		even
0004CD52                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0004CEC6                            		even
0004CEC6                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0004D24E 00                         		even
0004D24E                            ; ---------------------------------------------------------------------------
0004D24E                            ; Compressed graphics - continue screen
0004D24E                            ; ---------------------------------------------------------------------------
0004D24E                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0004D522 00                         		even
0004D522                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0004D7BC 00                         		even
0004D7BC                            ; ---------------------------------------------------------------------------
0004D7BC                            ; Compressed graphics - animals
0004D7BC                            ; ---------------------------------------------------------------------------
0004D7BC                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0004D914                            		even
0004D914                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0004DA70                            		even
0004DA70                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0004DBEC                            		even
0004DBEC                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0004DD08                            		even
0004DD08                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0004DE82                            		even
0004DE82                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0004DFBC                            		even
0004DFBC                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0004E118                            		even
0004E118                            ; ---------------------------------------------------------------------------
0004E118                            ; Compressed graphics - primary patterns and block mappings
0004E118                            ; ---------------------------------------------------------------------------
0004E118                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0004EB1A                            		even
0004EB1A                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
000503E8                            		even
000503E8                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
0005197C                            		even
0005197C                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00053D5C                            		even
00053D5C                            Blk16_TS:	incbin	"map16\TS.bin"
00053FE0                            		even
00053FE0                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
0005511E                            		even
0005511E                            Blk256_TS:	incbin	"map256\TS.bin"
00055CCC                            		even
00055CCC                            Blk16_LZ:	incbin	"map16\LZ.bin"
00056F48                            		even
00056F48                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0005A41A                            		even
0005A41A                            Blk256_LZ:	incbin	"map256\LZ.bin"
0005D8D8                            		even
0005D8D8                            Blk16_MZ:	incbin	"map16\MZ.bin"
0005E0C6                            		even
0005E0C6                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
00060B5E                            		even
00060B5E                            		incbin	"map256\MZ (JP1).bin"
00062B2C                            		even
00062B2C                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
000631AE                            		even
000631AE                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
00066C18                            		even
00066C18                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00069022                            		even
00069022                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
00069BA8                            		even
00069BA8                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0006CF98                            		even
0006CF98                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0006E354                            		even
0006E354                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0006EF4E                            		even
0006EF4E                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
00071790                            		even
00071790                            		incbin	"map256\SBZ (JP1).bin"
0007231C                            		even
0007231C                            ; ---------------------------------------------------------------------------
0007231C                            ; Compressed graphics - bosses and ending sequence
0007231C                            ; ---------------------------------------------------------------------------
0007231C                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
00072B98 00                         		even
00072B98                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00072E82                            		even
00072E82                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
00073706                            		even
00073706                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00073F44 00                         		even
00073F44                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00074712 00                         		even
00074712                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00074C3A                            		even
00074C3A                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
00074D5A                            		even
00074D5A                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00074F62 00                         		even
00074F62                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00076140                            		even
00076140                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
00076A84                            		even
00076A84                            		even
00076A84                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00077014                            		even
00077014                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
0007729C                            		even
0007729C                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
0007789A                            		even
0007789A                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
00077B22                            		even
00077B22                            
00077B22 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
00077B62                            ; ---------------------------------------------------------------------------
00077B62                            ; Collision data
00077B62                            ; ---------------------------------------------------------------------------
00077B62                            AngleMap:	incbin	"collide\Angle Map.bin"
00077C62                            		even
00077C62                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
00078C62                            		even
00078C62                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
00079C62                            		even
00079C62                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
00079E20 00                         		even
00079E20                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
0007A0DE                            		even
0007A0DE                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
0007A258 00                         		even
0007A258                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0007A44C                            		even
0007A44C                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0007A638 00                         		even
0007A638                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0007A808 00                         		even
0007A808                            ; ---------------------------------------------------------------------------
0007A808                            ; Special Stage layouts
0007A808                            ; ---------------------------------------------------------------------------
0007A808                            SS_1:		incbin	"sslayout\1.bin"
0007AA82                            		even
0007AA82                            SS_2:		incbin	"sslayout\2.bin"
0007AE94                            		even
0007AE94                            SS_3:		incbin	"sslayout\3.bin"
0007B1F0                            		even
0007B1F0                            SS_4:		incbin	"sslayout\4.bin"
0007B6CA                            		even
0007B6CA                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0007BB7A                            			even
0007BB7A                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0007BE6C                            		even
0007BE6C                            ; ---------------------------------------------------------------------------
0007BE6C                            ; Animated uncompressed graphics
0007BE6C                            ; ---------------------------------------------------------------------------
0007BE6C                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0007C06C                            		even
0007C06C                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0007C46C                            		even
0007C46C                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0007C8EC                            		even
0007C8EC                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0007CBEC                            		even
0007CBEC                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0007D1EC                            		even
0007D1EC                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0007D4EC                            		even
0007D4EC                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0007DF6C                            		even
0007DF6C                            
0007DF6C                            ; ---------------------------------------------------------------------------
0007DF6C                            ; Level	layout index
0007DF6C                            ; ---------------------------------------------------------------------------
0007DF6C                            Level_Index:
0007DF6C                            		; GHZ
0007DF6C 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007DF72 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007DF78 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007DF7E 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007DF84                            		; LZ
0007DF84 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007DF8A 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007DF90 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007DF96 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007DF9C                            		; MZ
0007DF9C 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007DFA2 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007DFA8 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007DFAE 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007DFB4                            		; SLZ
0007DFB4 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DFBA 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DFC0 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DFC6 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007DFCC                            		; SYZ
0007DFCC 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007DFD2 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007DFD8 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007DFDE 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007DFE4                            		; SBZ
0007DFE4 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007DFEA 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007DFF0 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007DFF6 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007DFFC                            		; Ending
0007DFFC 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007E002 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007E008 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007E00E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007E014                            
0007E014                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0007E246                            		even
0007E246 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007E24A                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0007E36C                            		even
0007E36C 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007E370                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0007E492                            		even
0007E492                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0007E4D4                            		even
0007E4D4 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007E4D8 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007E4DC                            
0007E4DC                            Level_LZ1:	incbin	"levels\lz1.bin"
0007E59E                            		even
0007E59E                            Level_LZbg:	incbin	"levels\lzbg.bin"
0007E6A0                            		even
0007E6A0 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007E6A4                            Level_LZ2:	incbin	"levels\lz2.bin"
0007E73E                            		even
0007E73E 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007E742                            Level_LZ3:	incbin	"levels\lz3.bin"
0007E85C                            		even
0007E85C 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007E860                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0007E91A                            		even
0007E91A 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007E91E                            
0007E91E                            Level_MZ1:	incbin	"levels\mz1.bin"
0007EA10                            		even
0007EA10                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0007EB32                            		even
0007EB32                            Level_MZ2:	incbin	"levels\mz2.bin"
0007EC24                            		even
0007EC24                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0007ED46                            		even
0007ED46 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007ED4A                            Level_MZ3:	incbin	"levels\mz3.bin"
0007EDE4                            		even
0007EDE4                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0007EF06                            		even
0007EF06 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007EF0A 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007EF0E                            
0007EF0E                            Level_SLZ1:	incbin	"levels\slz1.bin"
0007F020                            		even
0007F020                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0007F09A                            		even
0007F09A                            Level_SLZ2:	incbin	"levels\slz2.bin"
0007F18A                            		even
0007F18A                            Level_SLZ3:	incbin	"levels\slz3.bin"
0007F2A4                            		even
0007F2A4 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007F2A8                            
0007F2A8                            Level_SYZ1:	incbin	"levels\syz1.bin"
0007F3AC                            		even
0007F3AC                            		incbin	"levels\syzbg (JP1).bin"
0007F3E6                            		even
0007F3E6 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007F3EA                            Level_SYZ2:	incbin	"levels\syz2.bin"
0007F4EE                            		even
0007F4EE 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007F4F2                            Level_SYZ3:	incbin	"levels\syz3.bin"
0007F64C 00                         		even
0007F64C 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007F650 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007F654                            
0007F654                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0007F776                            		even
0007F776                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0007F7B4                            		even
0007F7B4                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0007F8F6                            		even
0007F8F6                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0007FA60                            		even
0007FA60 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007FA64 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007FA68                            Level_End:	incbin	"levels\ending.bin"
0007FA98 00                         		even
0007FA98 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007FA9C                            
0007FA9C                            
0007FA9C                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
000806DC                            		even
000806DC                            
00080700                            
00080700                            ; ---------------------------------------------------------------------------
00080700                            ; Sprite locations index
00080700                            ; ---------------------------------------------------------------------------
00080700                            ObjPos_Index:
00080700                            		; GHZ
00080700 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080704 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080708 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008070C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080710                            		; LZ
00080710 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080714 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080718 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008071C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080720                            		; MZ
00080720 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080724 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080728 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008072C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080730                            		; SLZ
00080730 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080734 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080738 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008073C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080740                            		; SYZ
00080740 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080744 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080748 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008074C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080750                            		; SBZ
00080750 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080754 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080758 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008075C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080760                            		; Ending
00080760 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080764 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080768 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008076C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080770                            		; --- Put extra object data here. ---
00080770                            ObjPosLZPlatform_Index:
00080770 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080774 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00080778 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008077C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080780                            ObjPosSBZPlatform_Index:
00080780 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080784 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00080788 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0008078C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080790 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00080796                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
00080DF6                            		even
00080DF6                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00081246                            		even
00081246                            		incbin	"objpos\ghz3 (JP1).bin"
000815C4                            		even
000815C4                            		incbin	"objpos\lz1 (JP1).bin"
000815FA                            		even
000815FA                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
0008193C                            		even
0008193C                            		incbin	"objpos\lz3 (JP1).bin"
00081F00                            		even
00081F00                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00082476                            		even
00082476                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
000824A8                            		even
000824A8                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
000824DA                            		even
000824DA                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
0008250C                            		even
0008250C                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
0008253E                            		even
0008253E                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00082588                            		even
00082588                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
000825C6                            		even
000825C6                            		incbin	"objpos\mz1 (JP1).bin"
00082BA8                            		even
00082BA8                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00082F8C                            		even
00082F8C                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
000831E4                            		even
000831E4                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
00083718                            		even
00083718                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00083B86                            		even
00083B86                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00084168                            		even
00084168                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
000841C8                            		even
000841C8                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
000841F2                            		even
000841F2                            		incbin	"objpos\syz3 (JP1).bin"
00084222                            		even
00084222                            		incbin	"objpos\sbz1 (JP1).bin"
0008426A                            		even
0008426A                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00084294                            		even
00084294                            ObjPos_FZ:	incbin	"objpos\fz.bin"
000842D0                            		even
000842D0                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00084302                            		even
00084302                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00084334                            		even
00084334                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00084366                            		even
00084366                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00084398                            		even
00084398                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
000843CA                            		even
000843CA                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00084402                            		even
00084402                            ObjPos_End:	incbin	"objpos\ending.bin"
0008455E                            		even
0008455E FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00084564                            
00084564                            		dcb.b $63C,$FF
00084BA0                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00084BA0                            
00084BA0                            SoundDriver:	include "s1.sounddriver.asm"
00084BA0                            ; ---------------------------------------------------------------------------
00084BA0                            ; Modified (early?) SMPS 68k Type 1b
00084BA0                            ; ---------------------------------------------------------------------------
00084BA0                            ; Go_SoundTypes:
00084BA0 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00084BA4                            ; Go_SoundD0:
00084BA4 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00084BA8 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
00084BAC 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00084BB0                            ; off_719A0:
00084BB0 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00084BB4 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00084BB8                            ; ---------------------------------------------------------------------------
00084BB8                            ; PSG instruments used in music
00084BB8                            ; ---------------------------------------------------------------------------
00084BB8                            PSG_Index:
00084BB8 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00084BC4 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00084BD0 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00084BDC                            PSG1:		incbin	"sound/psg/psg1.bin"
00084BF3                            PSG2:		incbin	"sound/psg/psg2.bin"
00084BFA                            PSG3:		incbin	"sound/psg/psg3.bin"
00084C0B                            PSG4:		incbin	"sound/psg/psg4.bin"
00084C16                            PSG6:		incbin	"sound/psg/psg6.bin"
00084C25                            PSG5:		incbin	"sound/psg/psg5.bin"
00084C4F                            PSG7:		incbin	"sound/psg/psg7.bin"
00084C6B                            PSG8:		incbin	"sound/psg/psg8.bin"
00084C93                            PSG9:		incbin	"sound/psg/psg9.bin"
00084CA4                            ; ---------------------------------------------------------------------------
00084CA4                            ; New tempos for songs during speed shoes
00084CA4                            ; ---------------------------------------------------------------------------
00084CA4                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00084CA4                            ; tempos while speed shoes are active. If you don't want that, you should add
00084CA4                            ; their "correct" sped-up main tempos to the list.
00084CA4                            ; byte_71A94:
00084CA4                            SpeedUpIndex:
00084CA4 07                         		dc.b 7		; GHZ
00084CA5 72                         		dc.b $72	; LZ
00084CA6 73                         		dc.b $73	; MZ
00084CA7 26                         		dc.b $26	; SLZ
00084CA8 15                         		dc.b $15	; SYZ
00084CA9 08                         		dc.b 8		; SBZ
00084CAA FF                         		dc.b $FF	; Invincibility
00084CAB 05                         		dc.b 5		; Extra Life
00084CAC                            		;dc.b ?		; Special Stage
00084CAC                            		;dc.b ?		; Title Screen
00084CAC                            		;dc.b ?		; Ending
00084CAC                            		;dc.b ?		; Boss
00084CAC                            		;dc.b ?		; FZ
00084CAC                            		;dc.b ?		; Sonic Got Through
00084CAC                            		;dc.b ?		; Game Over
00084CAC                            		;dc.b ?		; Continue Screen
00084CAC                            		;dc.b ?		; Credits
00084CAC                            		;dc.b ?		; Drowning
00084CAC                            		;dc.b ?		; Get Emerald
00084CAC                            
00084CAC                            ; ---------------------------------------------------------------------------
00084CAC                            ; Music	Pointers
00084CAC                            ; ---------------------------------------------------------------------------
00084CAC                            MusicIndex:
00084CAC 0000 0000                  ptr_mus81:	dc.l Music81
00084CB0 0000 0000                  ptr_mus82:	dc.l Music82
00084CB4 0000 0000                  ptr_mus83:	dc.l Music83
00084CB8 0000 0000                  ptr_mus84:	dc.l Music84
00084CBC 0000 0000                  ptr_mus85:	dc.l Music85
00084CC0 0000 0000                  ptr_mus86:	dc.l Music86
00084CC4 0000 0000                  ptr_mus87:	dc.l Music87
00084CC8 0000 0000                  ptr_mus88:	dc.l Music88
00084CCC 0000 0000                  ptr_mus89:	dc.l Music89
00084CD0 0000 0000                  ptr_mus8A:	dc.l Music8A
00084CD4 0000 0000                  ptr_mus8B:	dc.l Music8B
00084CD8 0000 0000                  ptr_mus8C:	dc.l Music8C
00084CDC 0000 0000                  ptr_mus8D:	dc.l Music8D
00084CE0 0000 0000                  ptr_mus8E:	dc.l Music8E
00084CE4 0000 0000                  ptr_mus8F:	dc.l Music8F
00084CE8 0000 0000                  ptr_mus90:	dc.l Music90
00084CEC 0000 0000                  ptr_mus91:	dc.l Music91
00084CF0 0000 0000                  ptr_mus92:	dc.l Music92
00084CF4 0000 0000                  ptr_mus93:	dc.l Music93
00084CF8 0000 0000                  ptr_mus94:	dc.l Music94
00084CFC 0000 0000                  ptr_mus95:	dc.l Music95
00084D00 0000 0000                  ptr_mus96:	dc.l Music96
00084D04 0000 0000                  ptr_mus97:	dc.l Music97
00084D08 0000 0000                  ptr_mus98:	dc.l Music98
00084D0C 0000 0000                  ptr_mus99:	dc.l Music99
00084D10                            ptr_musend
00084D10                            ; ---------------------------------------------------------------------------
00084D10                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00084D10                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00084D10                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00084D10                            ; any music or SFX can override it (as long as it can override whatever was
00084D10                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00084D10                            ; will only override special SFX and music will only override music.
00084D10                            ; ---------------------------------------------------------------------------
00084D10                            ; SoundTypes:
00084D10                            SoundPriorities:
00084D10 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00084D1F 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00084D2F 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00084D3F 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00084D4F 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00084D5F 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
00084D6F 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00084D74                            
00084D74                            ; ---------------------------------------------------------------------------
00084D74                            ; Subroutine to update music more than once per frame
00084D74                            ; (Called by horizontal & vert. interrupts)
00084D74                            ; ---------------------------------------------------------------------------
00084D74                            
00084D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D74                            
00084D74                            ; sub_71B4C:
00084D74                            UpdateMusic:
00084D74 33FC 0100 00A1 1100        		stopZ80
00084D7C 4E71                       		nop	
00084D7E 4E71                       		nop	
00084D80 4E71                       		nop	
00084D82                            ; loc_71B5A:
00084D82                            @updateloop:
00084D82 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00084D8A 66F6                       		bne.s	@updateloop			; If so, wait
00084D8C                            
00084D8C 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00084D94 6700                       		beq.s	@driverinput			; Branch if yes
00084D96 33FC 0000 00A1 1100        		startZ80
00084D9E 4E71                       		nop	
00084DA0 4E71                       		nop	
00084DA2 4E71                       		nop	
00084DA4 4E71                       		nop	
00084DA6 4E71                       		nop	
00084DA8 60CA                       		bra.s	UpdateMusic
00084DAA                            ; ===========================================================================
00084DAA                            ; loc_71B82:
00084DAA                            @driverinput:
00084DAA 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
00084DB0 422E 000E                  		clr.b	f_voice_selector(a6)
00084DB4 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00084DB8 6600 0000                  		bne.w	PauseMusic			; if yes, branch
00084DBC 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00084DC0 6600                       		bne.s	@skipdelay
00084DC2 4EBA 0000                  		jsr	TempoWait(pc)
00084DC6                            ; loc_71B9E:
00084DC6                            @skipdelay:
00084DC6 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00084DCA 6700                       		beq.s	@skipfadeout
00084DCC 4EBA 0000                  		jsr	DoFadeOut(pc)
00084DD0                            ; loc_71BA8:
00084DD0                            @skipfadeout:
00084DD0 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00084DD4 6700                       		beq.s	@skipfadein
00084DD6 4EBA 0000                  		jsr	DoFadeIn(pc)
00084DDA                            ; loc_71BB2:
00084DDA                            @skipfadein:
00084DDA                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00084DDA 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
00084DDE 6700                       		beq.s	@nosndinput		; if not, branch
00084DE0 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00084DE4                            ; loc_71BBC:
00084DE4                            @nosndinput:
00084DE4 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
00084DEA 6700                       		beq.s	@nonewsound		; If yes, branch
00084DEC 4EBA 0000                  		jsr	PlaySoundID(pc)
00084DF0                            ; loc_71BC8:
00084DF0                            @nonewsound:
00084DF0 4A38 C901                  		tst.b	($FFFFC901).w
00084DF4 6700                       		beq.s	@cont
00084DF6 5338 C901                  		subq.b	#1,($FFFFC901).w
00084DFA                            		
00084DFA                            @cont:
00084DFA 4BEE 0040                  		lea	v_music_dac_track(a6),a5
00084DFE 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
00084E00 6A00                       		bpl.s	@dacdone		; Branch if not
00084E02 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00084E06                            ; loc_71BD4:
00084E06                            @dacdone:
00084E06 422E 0008                  		clr.b	f_updating_dac(a6)
00084E0A 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00084E0C                            ; loc_71BDA:
00084E0C                            @bgmfmloop:
00084E0C DAFC 0030                  		adda.w	#TrackSz,a5
00084E10 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E12 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00084E14 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084E18                            ; loc_71BE6:
00084E18                            @bgmfmnext:
00084E18 51CF FFF2                  		dbf	d7,@bgmfmloop
00084E1C                            
00084E1C 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00084E1E                            ; loc_71BEC:
00084E1E                            @bgmpsgloop:
00084E1E DAFC 0030                  		adda.w	#TrackSz,a5
00084E22 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E24 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00084E26 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084E2A                            ; loc_71BF8:
00084E2A                            @bgmpsgnext:
00084E2A 51CF FFF2                  		dbf	d7,@bgmpsgloop
00084E2E                            
00084E2E 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00084E34 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00084E36                            ; loc_71C04:
00084E36                            @sfxfmloop:
00084E36 DAFC 0030                  		adda.w	#TrackSz,a5
00084E3A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E3C 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00084E3E 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084E42                            ; loc_71C10:
00084E42                            @sfxfmnext:
00084E42 51CF FFF2                  		dbf	d7,@sfxfmloop
00084E46                            
00084E46 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00084E48                            ; loc_71C16:
00084E48                            @sfxpsgloop:
00084E48 DAFC 0030                  		adda.w	#TrackSz,a5
00084E4C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E4E 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
00084E50 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084E54                            ; loc_71C22:
00084E54                            @sfxpsgnext:
00084E54 51CF FFF2                  		dbf	d7,@sfxpsgloop
00084E58                            		
00084E58 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00084E5E DAFC 0030                  		adda.w	#TrackSz,a5
00084E62 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E64 6A00                       		bpl.s	@specfmdone		; Branch if not
00084E66 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084E6A                            ; loc_71C38:
00084E6A                            @specfmdone:
00084E6A DAFC 0030                  		adda.w	#TrackSz,a5
00084E6E 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00084E70 6A00                       		bpl.s	DoStartZ80		; Branch if not
00084E72 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084E76                            ; loc_71C44:
00084E76                            DoStartZ80:
00084E76 33FC 0000 00A1 1100        		startZ80
00084E7E 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00084E84 6700                       		beq.s @end ; if not, branch
00084E86 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
00084E8C 6600                       		bne.s @end ; if not, branch
00084E8E 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00084E94 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00084E98                            
00084E98                            	@end:
00084E98 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00084E9C 4E75                       		rts
00084E9E                            ; End of function UpdateMusic
00084E9E                            
00084E9E                            
00084E9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084E9E                            
00084E9E                            ; sub_71C4E: UpdateDAC:
00084E9E                            DACUpdateTrack:
00084E9E 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00084EA2 6600                       		bne.s	@locret				; Return if not
00084EA4 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00084EAA                            ;DACDoNext:
00084EAA 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00084EAE                            ; loc_71C5E:
00084EAE                            @sampleloop:
00084EAE 7A00                       		moveq	#0,d5
00084EB0 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00084EB2 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00084EB6 6500                       		blo.s	@notcoord	; Branch if not
00084EB8 4EBA 0000                  		jsr	CoordFlag(pc)
00084EBC 60F0                       		bra.s	@sampleloop
00084EBE                            ; ===========================================================================
00084EBE                            ; loc_71C6E:
00084EBE                            @notcoord:
00084EBE 4A05                       		tst.b	d5			; Is it a sample?
00084EC0 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00084EC2 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00084EC6 1A1C                       		move.b	(a4)+,d5		; Get another byte
00084EC8 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00084ECA 534C                       		subq.w	#1,a4			; Put byte back
00084ECC 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00084ED2 6000                       		bra.s	@gotsampleduration
00084ED4                            ; ===========================================================================
00084ED4                            ; loc_71C84:
00084ED4                            @gotduration:
00084ED4 4EBA 0000                  		jsr	SetDuration(pc)
00084ED8                            ; loc_71C88:
00084ED8                            @gotsampleduration:
00084ED8 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00084EDC 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084EE0 6600                       		bne.s	@locret			; Return if yes
00084EE2 7000                       		moveq	#0,d0
00084EE4 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00084EE8 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00084EEC 6700                       		beq.s	@locret			; Return if yes
00084EEE 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00084EF2 6600                       		bne.s	@timpani		; Various timpani
00084EF4 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00084EFA                            ; locret_71CAA:
00084EFA                            @locret:
00084EFA 4E75                       		rts	
00084EFC                            ; ===========================================================================
00084EFC                            ; loc_71CAC:
00084EFC                            @timpani:
00084EFC 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00084F00 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00084F04                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00084F04                            		; use this value from then on.
00084F04 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00084F0A 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00084F12 4E75                       		rts	
00084F14                            ; End of function DACUpdateTrack
00084F14                            
00084F14                            ; ===========================================================================
00084F14                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00084F14                            ; Also, $8C-$8D are so slow you may want to skip them.
00084F14                            ; byte_71CC4:
00084F14 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00084F1A                            
00084F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084F1A                            
00084F1A                            ; sub_71CCA:
00084F1A                            FMUpdateTrack:
00084F1A 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00084F1E 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00084F20 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00084F24 4EBA 0000                  		jsr	FMDoNext(pc)
00084F28 4EBA 0000                  		jsr	FMPrepareNote(pc)
00084F2C 6000 0000                  		bra.w	FMNoteOn
00084F30                            ; ===========================================================================
00084F30                            ; loc_71CE0:
00084F30                            @notegoing:
00084F30 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00084F34 4EBA 0000                  		jsr	DoModulation(pc)
00084F38 6000 0000                  		bra.w	FMUpdateFreq
00084F3C                            ; End of function FMUpdateTrack
00084F3C                            
00084F3C                            
00084F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084F3C                            
00084F3C                            ; sub_71CEC:
00084F3C                            FMDoNext:
00084F3C 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00084F40 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00084F44                            ; loc_71CF4:
00084F44                            @noteloop:
00084F44 7A00                       		moveq	#0,d5
00084F46 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00084F48 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00084F4C 6500                       		blo.s	@gotnote	; Branch if not
00084F4E 4EBA 0000                  		jsr	CoordFlag(pc)
00084F52 60F0                       		bra.s	@noteloop
00084F54                            ; ===========================================================================
00084F54                            ; loc_71D04:
00084F54                            @gotnote:
00084F54 4EBA 0000                  		jsr	FMNoteOff(pc)
00084F58 4A05                       		tst.b	d5		; Is this a note?
00084F5A 6A00                       		bpl.s	@gotduration	; Branch if not
00084F5C 4EBA 0000                  		jsr	FMSetFreq(pc)
00084F60 1A1C                       		move.b	(a4)+,d5	; Get another byte
00084F62 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00084F64 534C                       		subq.w	#1,a4		; Otherwise, put it back
00084F66 6000 0000                  		bra.w	FinishTrackUpdate
00084F6A                            ; ===========================================================================
00084F6A                            ; loc_71D1A:
00084F6A                            @gotduration:
00084F6A 4EBA 0000                  		jsr	SetDuration(pc)
00084F6E 6000 0000                  		bra.w	FinishTrackUpdate
00084F72                            ; End of function FMDoNext
00084F72                            
00084F72                            
00084F72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084F72                            
00084F72                            ; sub_71D22:
00084F72                            FMSetFreq:
00084F72 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00084F76 6700                       		beq.s	TrackSetRest
00084F78 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00084F7C 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00084F80 E34D                       		lsl.w	#1,d5
00084F82 41FA 0000                  		lea	FMFrequencies(pc),a0
00084F86 3C30 5000                  		move.w	(a0,d5.w),d6
00084F8A 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00084F8E 4E75                       		rts	
00084F90                            ; End of function FMSetFreq
00084F90                            
00084F90                            
00084F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084F90                            
00084F90                            ; sub_71D40:
00084F90                            SetDuration:
00084F90 1005                       		move.b	d5,d0
00084F92 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00084F96                            ; loc_71D46:
00084F96                            @multloop:
00084F96 5301                       		subq.b	#1,d1
00084F98 6700                       		beq.s	@donemult
00084F9A D005                       		add.b	d5,d0
00084F9C 60F8                       		bra.s	@multloop
00084F9E                            ; ===========================================================================
00084F9E                            ; loc_71D4E:
00084F9E                            @donemult:
00084F9E 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00084FA2 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00084FA6 4E75                       		rts	
00084FA8                            ; End of function SetDuration
00084FA8                            
00084FA8                            ; ===========================================================================
00084FA8                            ; loc_71D58:
00084FA8                            TrackSetRest:
00084FA8 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084FAC 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00084FB0                            
00084FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084FB0                            
00084FB0                            ; sub_71D60:
00084FB0                            FinishTrackUpdate:
00084FB0 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00084FB4 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00084FBA 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00084FBE 6600                       		bne.s	@locret				; If so, branch
00084FC0 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00084FC6 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00084FCA 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00084FCE 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00084FD0 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00084FD4 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00084FD8 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00084FDC 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00084FE0 1018                       		move.b	(a0)+,d0			; Get steps
00084FE2 E208                       		lsr.b	#1,d0				; Halve them
00084FE4 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00084FE8 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00084FEC                            ; locret_71D9C:
00084FEC                            @locret:
00084FEC 4E75                       		rts	
00084FEE                            ; End of function FinishTrackUpdate
00084FEE                            
00084FEE                            
00084FEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084FEE                            
00084FEE                            ; sub_71D9E: NoteFillUpdate
00084FEE                            NoteTimeoutUpdate:
00084FEE 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00084FF2 6700                       		beq.s	@locret
00084FF4 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00084FF8 6600                       		bne.s	@locret				; Return if it hasn't expired
00084FFA 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00084FFE 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00085002 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00085006 4EBA 0000                  		jsr	FMNoteOff(pc)
0008500A 584F                       		addq.w	#4,sp				; Do not return to caller
0008500C 4E75                       		rts	
0008500E                            ; ===========================================================================
0008500E                            ; loc_71DBE:
0008500E                            @psgnoteoff:
0008500E 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085012 584F                       		addq.w	#4,sp		; Do not return to caller
00085014                            ; locret_71DC4:
00085014                            @locret:
00085014 4E75                       		rts	
00085016                            ; End of function NoteTimeoutUpdate
00085016                            
00085016                            
00085016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085016                            
00085016                            ; sub_71DC6:
00085016                            DoModulation:
00085016 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00085018 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
0008501C 6700                       		beq.s	@locret				; Return if not
0008501E 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00085022 6700                       		beq.s	@waitdone			; If yes, branch
00085024 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00085028 4E75                       		rts	
0008502A                            ; ===========================================================================
0008502A                            ; loc_71DDA:
0008502A                            @waitdone:
0008502A 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
0008502E 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00085030 4E75                       		rts	
00085032                            ; ===========================================================================
00085032                            ; loc_71DE2:
00085032                            @updatemodulation:
00085032 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00085036 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
0008503C 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00085040 6600                       		bne.s	@calcfreq			; If nonzero, branch
00085042 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00085048 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
0008504C 4E75                       		rts	
0008504E                            ; ===========================================================================
0008504E                            ; loc_71DFE:
0008504E                            @calcfreq:
0008504E 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00085052 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00085056 4886                       		ext.w	d6
00085058 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
0008505C 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00085060 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00085064 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00085066                            ; locret_71E16:
00085066                            @locret:
00085066 4E75                       		rts	
00085068                            ; End of function DoModulation
00085068                            
00085068                            
00085068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085068                            
00085068                            ; sub_71E18:
00085068                            FMPrepareNote:
00085068 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
0008506C 6600                       		bne.s	locret_71E48		; Return if so
0008506E 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00085072 6700                       		beq.s	FMSetRest		; Branch if zero
00085074                            ; loc_71E24:
00085074                            FMUpdateFreq:
00085074 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00085078 4880                       		ext.w	d0
0008507A DC40                       		add.w	d0,d6			; Add note frequency
0008507C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00085080 6600                       		bne.s	locret_71E48		; Return if so
00085082 3206                       		move.w	d6,d1
00085084 E049                       		lsr.w	#8,d1
00085086 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
0008508A 4EBA 0000                  		jsr	WriteFMIorII(pc)
0008508E 1206                       		move.b	d6,d1
00085090 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00085094 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00085098                            ; locret_71E48:
00085098                            locret_71E48:
00085098 4E75                       		rts	
0008509A                            ; ===========================================================================
0008509A                            ; loc_71E4A:
0008509A                            FMSetRest:
0008509A 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0008509E 4E75                       		rts	
000850A0                            ; End of function FMPrepareNote
000850A0                            
000850A0                            ; ===========================================================================
000850A0                            ; loc_71E50:
000850A0                            PauseMusic:
000850A0 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
000850A2 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
000850A8 6700 0000                  		beq.w	@unpausedallfm
000850AC 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
000850B2 7602                       		moveq	#2,d3
000850B4 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
000850B8 7200                       		moveq	#0,d1		; No panning, AMS or FMS
000850BA                            ; loc_71E6A:
000850BA                            @killpanloop:
000850BA 4EBA 0000                  		jsr	WriteFMI(pc)
000850BE 4EBA 0000                  		jsr	WriteFMII(pc)
000850C2 5200                       		addq.b	#1,d0
000850C4 51CB FFF4                  		dbf	d3,@killpanloop
000850C8                            
000850C8 7602                       		moveq	#2,d3
000850CA 7028                       		moveq	#$28,d0		; Key on/off register
000850CC                            ; loc_71E7C:
000850CC                            @noteoffloop:
000850CC 1203                       		move.b	d3,d1		; FM1, FM2, FM3
000850CE 4EBA 0000                  		jsr	WriteFMI(pc)
000850D2 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
000850D4 4EBA 0000                  		jsr	WriteFMI(pc)
000850D8 51CB FFF2                  		dbf	d3,@noteoffloop
000850DC                            
000850DC 4EBA 0000                  		jsr	PSGSilenceAll(pc)
000850E0 6000 FD94                  		bra.w	DoStartZ80
000850E4                            ; ===========================================================================
000850E4                            ; loc_71E94:
000850E4                            @unpausemusic:
000850E4 422E 0003                  		clr.b	f_pausemusic(a6)
000850E8 7630                       		moveq	#TrackSz,d3
000850EA 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
000850EE 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
000850F0                            ; loc_71EA0:
000850F0                            @bgmfmloop:
000850F0 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000850F4 6700                       		beq.s	@bgmfmnext		; Branch if not
000850F6 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000850FA 6600                       		bne.s	@bgmfmnext		; Branch if yes
000850FC 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085100 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00085104 4EBA 0000                  		jsr	WriteFMIorII(pc)
00085108                            ; loc_71EB8:
00085108                            @bgmfmnext:
00085108 DAC3                       		adda.w	d3,a5
0008510A 51CC FFE4                  		dbf	d4,@bgmfmloop
0008510E                            
0008510E 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00085112 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00085114                            ; loc_71EC4:
00085114                            @sfxfmloop:
00085114 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00085118 6700                       		beq.s	@sfxfmnext		; Branch if not
0008511A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0008511E 6600                       		bne.s	@sfxfmnext		; Branch if yes
00085120 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085124 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00085128 4EBA 0000                  		jsr	WriteFMIorII(pc)
0008512C                            ; loc_71EDC:
0008512C                            @sfxfmnext:
0008512C DAC3                       		adda.w	d3,a5
0008512E 51CC FFE4                  		dbf	d4,@sfxfmloop
00085132                            
00085132 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00085136 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
0008513A 6700                       		beq.s	@unpausedallfm		; Branch if not
0008513C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00085140 6600                       		bne.s	@unpausedallfm		; Branch if yes
00085142 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085146 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
0008514A 4EBA 0000                  		jsr	WriteFMIorII(pc)
0008514E                            ; loc_71EFE:
0008514E                            @unpausedallfm:
0008514E 6000 FD26                  		bra.w	DoStartZ80
00085152                            
00085152                            ; ---------------------------------------------------------------------------
00085152                            ; Subroutine to	play a sound or	music track
00085152                            ; ---------------------------------------------------------------------------
00085152                            
00085152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085152                            
00085152                            ; Sound_Play:
00085152                            CycleSoundQueue:
00085152 2079 0008 4BA0             		movea.l	(Go_SoundPriorities).l,a0
00085158 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
0008515C 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
0008515E 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00085160                            ; loc_71F12:
00085160                            @inputloop:
00085160 1011                       		move.b	(a1),d0			; move track number to d0
00085162 1200                       		move.b	d0,d1
00085164 4219                       		clr.b	(a1)+			; Clear entry
00085166 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
0008516A 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
0008516C 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00085172 6700                       		beq.s	@havesound		; If yes, branch
00085174 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00085178 6000                       		bra.s	@nextinput
0008517A                            ; ===========================================================================
0008517A                            ; loc_71F2C:
0008517A                            @havesound:
0008517A 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
0008517E 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00085182 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00085184 6500                       		blo.s	@nextinput		; Branch if yes
00085186 1602                       		move.b	d2,d3			; Store new priority
00085188 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
0008518C                            ; loc_71F3E:
0008518C                            @nextinput:
0008518C 51CC FFD2                  		dbf	d4,@inputloop
00085190                            
00085190 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00085192 6B00                       		bmi.s	@locret
00085194 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00085196                            ; locret_71F4A:
00085196                            @locret:
00085196 4E75                       		rts	
00085198                            ; End of function CycleSoundQueue
00085198                            
00085198                            
00085198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085198                            
00085198                            ; Sound_ChkValue:
00085198                            PlaySoundID:
00085198 7E00                       		moveq	#0,d7
0008519A 1E2E 0009                  		move.b	v_sound_id(a6),d7
0008519E 6700 0000                  		beq.w	StopAllSound
000851A2 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
000851A4 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
000851AA                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
000851AA                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
000851AA                            		; See LevSel_NoCheat for more.
000851AA 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
000851AE 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
000851B2 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
000851B6 6500 0000                  		blo.w	@locret			; Return if yes
000851BA 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
000851BE 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
000851C2 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
000851C6 6500 0000                  		blo.w	@locret			; Return if yes
000851CA 0C07 00D1                  		cmpi.b	#$D1,d7
000851CE 6500 0000                  		bcs.w	Sound_PlaySpecial
000851D2 0C07 00DF                  		cmp.b	#$DF,d7
000851D6 6F00 0000                  		ble.w	Sound_D1toDF
000851DA 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
000851DE 6500 0000                  		blo.w	@locret			; Return if yes
000851E2 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
000851E6 6300                       		bls.s	Sound_E0toE4		; Branch if yes
000851E8                            ; locret_71F8C:
000851E8                            @locret:
000851E8 4E75                       		rts	
000851EA                            ; ===========================================================================
000851EA                            
000851EA                            Sound_E0toE4:
000851EA 0407 00E0                  		subi.b	#flg__First,d7
000851EE E54F                       		lsl.w	#2,d7
000851F0 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000851F4                            ; ===========================================================================
000851F4                            
000851F4                            Sound_ExIndex:
000851F4 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
000851F8 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
000851FC 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00085200 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00085204 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00085208                            ptr_flgend
00085208                            ; ===========================================================================
00085208                            ; ---------------------------------------------------------------------------
00085208                            ; Play "Say-gaa" PCM sound
00085208                            ; ---------------------------------------------------------------------------
00085208                            ; Sound_E1: PlaySega:
00085208                            PlaySegaSound:
00085208 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00085210 33FC 0000 00A1 1100        		startZ80
00085218 323C 0011                  		move.w	#$11,d1
0008521C                            ; loc_71FC0:
0008521C                            @busyloop_outer:
0008521C 303C FFFF                  		move.w	#-1,d0
00085220                            ; loc_71FC4:
00085220                            @busyloop:
00085220 4E71                       		nop	
00085222 51C8 FFFC                  		dbf	d0,@busyloop
00085226                            
00085226 51C9 FFF4                  		dbf	d1,@busyloop_outer
0008522A                            
0008522A 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
0008522C 4E75                       		rts	
0008522E                            ; ===========================================================================
0008522E                            ; ---------------------------------------------------------------------------
0008522E                            ; Play music track $81-$9F
0008522E                            ; ---------------------------------------------------------------------------
0008522E                            ; Sound_81to9F:
0008522E                            Sound_PlayBGM:
0008522E 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00085232 6600                       		bne.s	@bgmnot1up		; if not, branch
00085234 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00085238 6600 0000                  		bne.w	@locdblret		; if yes, branch
0008523C 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00085240 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00085242                            ; loc_71FE6:
00085242                            @clearsfxloop:
00085242 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085246 DAFC 0030                  		adda.w	#TrackSz,a5
0008524A 51C8 FFF6                  		dbf	d0,@clearsfxloop
0008524E                            
0008524E 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00085252 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00085254                            ; loc_71FF8:
00085254                            @cleartrackplayloop:
00085254 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00085258 DAFC 0030                  		adda.w	#TrackSz,a5
0008525C 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00085260                            
00085260 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00085262 204E                       		movea.l	a6,a0
00085264 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00085268 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
0008526C                            ; loc_72012:
0008526C                            @backupramloop:
0008526C 22D8                       		move.l	(a0)+,(a1)+
0008526E 51C8 FFFC                  		dbf	d0,@backupramloop
00085272                            
00085272 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00085278 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
0008527A 6000                       		bra.s	@bgm_loadMusic
0008527C                            ; ===========================================================================
0008527C                            ; loc_72024:
0008527C                            @bgmnot1up:
0008527C 422E 0027                  		clr.b	f_1up_playing(a6)
00085280 422E 0026                  		clr.b	v_fadein_counter(a6)
00085284                            ; loc_7202C:
00085284                            @bgm_loadMusic:
00085284 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00085288 2879 0008 4BB0             		movea.l	(Go_SpeedUpIndex).l,a4
0008528E 0407 0081                  		subi.b	#bgm__First,d7
00085292 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00085298 2879 0008 4BA8             		movea.l	(Go_MusicIndex).l,a4
0008529E E54F                       		lsl.w	#2,d7
000852A0 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
000852A4 7000                       		moveq	#0,d0
000852A6 3014                       		move.w	(a4),d0			; load voice pointer
000852A8 D08C                       		add.l	a4,d0			; It is a relative pointer
000852AA 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
000852AE 102C 0005                  		move.b	5(a4),d0		; load tempo
000852B2 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
000852B6                            		;tst.b	f_speedup(a6)
000852B6                            		;beq.s	@nospeedshoes
000852B6                            		;move.b	v_speeduptempo(a6),d0
000852B6                            ; loc_72068:
000852B6                            ;@nospeedshoes:
000852B6 1D40 0002                  		move.b	d0,v_main_tempo(a6)
000852BA 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
000852BE 7200                       		moveq	#0,d1
000852C0 264C                       		movea.l	a4,a3
000852C2 5C4C                       		addq.w	#6,a4			; Point past header
000852C4 7E00                       		moveq	#0,d7
000852C6 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
000852CA 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
000852CE 5307                       		subq.b	#1,d7
000852D0 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
000852D4 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
000852D8 7C30                       		moveq	#TrackSz,d6
000852DA 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
000852DE 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
000852E2 45FA 0000                  		lea	FMDACInitBytes(pc),a2
000852E6                            ; loc_72098:
000852E6                            @bmg_fmloadloop:
000852E6 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
000852EA 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
000852EE 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
000852F2 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
000852F6 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
000852FA 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
000852FE 7000                       		moveq	#0,d0
00085300 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00085302 D08B                       		add.l	a3,d0				; Relative pointer
00085304 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00085308 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
0008530C D2C6                       		adda.w	d6,a1
0008530E 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00085312                            		
00085312 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00085318 6600                       		bne.s	@silencefm6
0008531A 702B                       		moveq	#$2B,d0		; DAC enable/disable register
0008531C 7200                       		moveq	#0,d1		; Disable DAC
0008531E 4EBA 0000                  		jsr	WriteFMI(pc)
00085322 6000 0000                  		bra.w	@bgm_fmdone
00085326                            ; ===========================================================================
00085326                            ; loc_720D8:
00085326                            @silencefm6:
00085326 7028                       		moveq	#$28,d0		; Key on/off register
00085328 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
0008532A 4EBA 0000                  		jsr	WriteFMI(pc)
0008532E 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00085332 727F                       		moveq	#$7F,d1		; Total silence
00085334 4EBA 0000                  		jsr	WriteFMII(pc)
00085338 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
0008533C 727F                       		moveq	#$7F,d1		; Total silence
0008533E 4EBA 0000                  		jsr	WriteFMII(pc)
00085342 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00085346 727F                       		moveq	#$7F,d1		; Total silence
00085348 4EBA 0000                  		jsr	WriteFMII(pc)
0008534C 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00085350 727F                       		moveq	#$7F,d1		; Total silence
00085352 4EBA 0000                  		jsr	WriteFMII(pc)
00085356 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
0008535A 123C 00C0                  		move.b	#$C0,d1		; Stereo
0008535E 4EBA 0000                  		jsr	WriteFMII(pc)
00085362                            ; loc_72114:
00085362                            @bgm_fmdone:
00085362 7E00                       		moveq	#0,d7
00085364 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00085368 6700                       		beq.s	@bgm_psgdone	; branch if zero
0008536A 5307                       		subq.b	#1,d7
0008536C 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00085370 45FA 0000                  		lea	PSGInitBytes(pc),a2
00085374                            ; loc_72126:
00085374                            @bgm_psgloadloop:
00085374 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00085378 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
0008537C 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00085380 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00085384 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00085388 7000                       		moveq	#0,d0
0008538A 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
0008538C D08B                       		add.l	a3,d0				; Relative pointer
0008538E 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00085392 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00085396 101C                       		move.b	(a4)+,d0			; load redundant byte
00085398 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
0008539C D2C6                       		adda.w	d6,a1
0008539E 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
000853A2                            ; loc_72154:
000853A2                            @bgm_psgdone:
000853A2 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
000853A6 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
000853A8                            ; loc_7215A:
000853A8                            @sfxstoploop:
000853A8 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
000853AA 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
000853AE 7000                       		moveq	#0,d0
000853B0 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
000853B4 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
000853B6 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
000853B8 E508                       		lsl.b	#2,d0			; Convert to index
000853BA 6000                       		bra.s	@gotchannelindex
000853BC                            ; ===========================================================================
000853BC                            ; loc_7216E:
000853BC                            @sfxpsgchannel:
000853BC E608                       		lsr.b	#3,d0		; Convert to index
000853BE                            ; loc_72170:
000853BE                            @gotchannelindex:
000853BE 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
000853C2 2070 0000                  		movea.l	(a0,d0.w),a0
000853C6 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
000853CA                            ; loc_7217C:
000853CA                            @sfxnext:
000853CA D2C6                       		adda.w	d6,a1
000853CC 51CF FFDA                  		dbf	d7,@sfxstoploop
000853D0                            
000853D0 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000853D4 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
000853D6 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000853DC                            ; loc_7218E:
000853DC                            @checkspecialpsg:
000853DC 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000853E0 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
000853E2 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000853E8                            ; loc_7219A:
000853E8                            @sendfmnoteoff:
000853E8 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000853EC 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
000853EE                            ; loc_721A0:
000853EE                            @fmnoteoffloop:
000853EE 4EBA 0000                  		jsr	FMNoteOff(pc)
000853F2 DAC6                       		adda.w	d6,a5
000853F4 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
000853F8 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
000853FA                            ; loc_721AC:
000853FA                            @psgnoteoffloop:
000853FA 4EBA 0000                  		jsr	PSGNoteOff(pc)
000853FE DAC6                       		adda.w	d6,a5
00085400 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00085404                            ; loc_721B6:
00085404                            @locdblret:
00085404 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00085406 4E75                       		rts	
00085408                            ; ===========================================================================
00085408                            ; byte_721BA:
00085408 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00085410 00                         		even
00085410                            ; byte_721C2:
00085410 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00085414 00                         		even
00085414                            ; ===========================================================================
00085414                            ; ---------------------------------------------------------------------------
00085414                            ; Play Spin Dash sound effect
00085414                            ; ---------------------------------------------------------------------------
00085414                            Sound_D1toDF:
00085414 4A2E 0027                  		tst.b	$27(a6)
00085418 6600 0000                  		bne.w	loc_722C6
0008541C 4A2E 0004                  		tst.b	4(a6)
00085420 6600 0000                  		bne.w	loc_722C6
00085424 4A2E 0024                  		tst.b	$24(a6)
00085428 6600 0000                  		bne.w	loc_722C6
0008542C 4238 C900                  		clr.b	($FFFFC900).w
00085430 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00085434 6600                       		bne.s	@cont3	; if not, branch
00085436 3F00                       		move.w	d0,-(sp)
00085438 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
0008543C 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00085440 6600                       		bne.s	@cont1		; if it is, branch
00085442 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00085446                            		
00085446                            @cont1:
00085446 5200                       		addq.b	#1,d0
00085448 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
0008544C 6400                       		bcc.s	@cont2		; if it has, branch
0008544E 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00085452                            		
00085452                            @cont2:
00085452 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00085458 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
0008545E 301F                       		move.w	(sp)+,d0
00085460                            		
00085460                            @cont3:	
00085460 2079 0008 4BAC             		movea.l	(Go_SoundIndex).l,a0
00085466 0407 00A0                  		sub.b	#$A0,d7
0008546A 6000                       		bra.s	SoundEffects_Common
0008546C                            ; ---------------------------------------------------------------------------
0008546C                            ; Play normal sound effect
0008546C                            ; ---------------------------------------------------------------------------
0008546C                            ; Sound_A0toCF:
0008546C                            Sound_PlaySFX:
0008546C 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00085470 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00085474 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00085478 6600 0000                  		bne.w	loc_722C6		; Exit if it is
0008547C 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00085480 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00085484 4238 C900                  		clr.b	($FFFFC900).w
00085488 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
0008548C 6600                       		bne.s	Sound_notB5		; if not, branch
0008548E 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00085492 6600                       		bne.s	loc_721EE		; Branch if not
00085494 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00085498                            
00085498                            loc_721EE:
00085498 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
0008549E                            
0008549E                            Sound_notB5:
0008549E 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
000854A2 6600                       		bne.s	Sound_notA7		; if not, branch
000854A4 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
000854A8 6600 0000                  		bne.w	locret_722C4			; Return if not
000854AC 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
000854B2                            		
000854B2                            Sound_notA7:
000854B2 2079 0008 4BAC             		movea.l	(Go_SoundIndex).l,a0
000854B8 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
000854BC                            
000854BC                            SoundEffects_Common:		
000854BC E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
000854BE 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
000854C2 224B                       		movea.l	a3,a1
000854C4 7200                       		moveq	#0,d1
000854C6 3219                       		move.w	(a1)+,d1		; Voice pointer
000854C8 D28B                       		add.l	a3,d1			; Relative pointer
000854CA 1A19                       		move.b	(a1)+,d5		; Dividing timing	
000854CC                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
000854CC                            		; index entry is above $3F will cause a crash. This is actually the same way that
000854CC                            		; this bug is fixed in Ristar's driver.
000854CC 7E00                       		moveq	#0,d7	
000854CE 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
000854D0 5307                       		subq.b	#1,d7
000854D2 7C30                       		moveq	#TrackSz,d6
000854D4                            
000854D4                            loc_72228:
000854D4 7600                       		moveq	#0,d3
000854D6 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
000854DA 1803                       		move.b	d3,d4
000854DC 6B00                       		bmi.s	loc_72244	; Branch if PSG
000854DE 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
000854E0 E54B                       		lsl.w	#2,d3
000854E2 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000854E6 2A75 3000                  		movea.l	(a5,d3.w),a5
000854EA 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
000854EE 6000                       		bra.s	loc_7226E
000854F0                            ; ===========================================================================
000854F0                            
000854F0                            loc_72244:
000854F0 E64B                       		lsr.w	#3,d3
000854F2 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000854F6 2A75 3000                  		movea.l	(a5,d3.w),a5
000854FA 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
000854FE 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00085502 6600                       		bne.s	loc_7226E	; Branch if not
00085504 1004                       		move.b	d4,d0
00085506 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
0008550A 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085510 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00085514 13C0 00C0 0011             		move.b	d0,(psg_input).l
0008551A                            
0008551A                            loc_7226E:
0008551A 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
0008551E 2A75 3000                  		movea.l	(a5,d3.w),a5
00085522 244D                       		movea.l	a5,a2
00085524 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00085526                            
00085526                            loc_72276:
00085526 429A                       		clr.l	(a2)+
00085528 51C8 FFFC                  		dbf	d0,loc_72276
0008552C                            
0008552C 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
0008552E 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00085532 7000                       		moveq	#0,d0
00085534 3019                       		move.w	(a1)+,d0			; Track data pointer
00085536 D08B                       		add.l	a3,d0				; Relative pointer
00085538 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
0008553C 3B59 0008                  		move.w	(a1)+,8(a5)
00085540 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00085544 6700                       		beq.s	@cont		; if not, branch
00085546 3F00                       		move.w	d0,-(sp)
00085548 1038 C902                  		move.b	($FFFFC902).w,d0
0008554C D12D 0008                  		add.b	d0,8(a5)
00085550 301F                       		move.w	(sp)+,d0
00085552                            		
00085552                            @cont:
00085552 1B7C 0001 000E             		move.b	#1,$E(a5)
00085558 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
0008555C 4A04                       		tst.b	d4				; Is this a PSG channel?
0008555E 6B00                       		bmi.s	loc_722A8		; Branch if yes
00085560 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00085566 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
0008556A                            
0008556A                            loc_722A8:
0008556A 51CF FF68                  		dbf	d7,loc_72228
0008556E                            
0008556E 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00085572 6A00                       		bpl.s	loc_722B8				; Branch if not
00085574 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008557A                            
0008557A                            loc_722B8:
0008557A 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
0008557E 6A00                       		bpl.s	locret_722C4						; Branch if not
00085580 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085586                            
00085586                            locret_722C4:
00085586 4E75                       		rts	
00085588                            ; ===========================================================================
00085588                            
00085588                            loc_722C6:
00085588 4216                       		clr.b	v_sndprio(a6)	; Clear priority
0008558A 4E75                       		rts	
0008558C                            ; ===========================================================================
0008558C                            ; ---------------------------------------------------------------------------
0008558C                            ; RAM addresses for FM and PSG channel variables used by the SFX
0008558C                            ; ---------------------------------------------------------------------------
0008558C                            ; dword_722CC: BGMChannelRAM:
0008558C                            SFX_BGMChannelRAM:
0008558C 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00085590 0000 0000                  		dc.l 0
00085594 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00085598 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
0008559C 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
000855A0 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
000855A4 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
000855A8 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
000855AC                            ; dword_722EC: SFXChannelRAM:
000855AC                            SFX_SFXChannelRAM:
000855AC 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
000855B0 0000 0000                  		dc.l 0
000855B4 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
000855B8 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
000855BC 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
000855C0 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
000855C4 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
000855C8 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
000855CC                            ; ===========================================================================
000855CC                            ; ---------------------------------------------------------------------------
000855CC                            ; Play GHZ waterfall sound
000855CC                            ; ---------------------------------------------------------------------------
000855CC                            ; Sound_D0toDF:
000855CC                            Sound_PlaySpecial:
000855CC 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
000855D0 6600 0000                  		bne.w	@locret			; Return if so
000855D4 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
000855D8 6600 0000                  		bne.w	@locret			; Exit if it is
000855DC 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
000855E0 6600 0000                  		bne.w	@locret			; Exit if it is
000855E4 2079 0008 4BA4             		movea.l	(Go_SpecSoundIndex).l,a0
000855EA 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
000855EE E54F                       		lsl.w	#2,d7
000855F0 2670 7000                  		movea.l	(a0,d7.w),a3
000855F4 224B                       		movea.l	a3,a1
000855F6 7000                       		moveq	#0,d0
000855F8 3019                       		move.w	(a1)+,d0			; Voice pointer
000855FA D08B                       		add.l	a3,d0				; Relative pointer
000855FC 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00085600 1A19                       		move.b	(a1)+,d5			; Dividing timing
00085602                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00085602                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00085602 7E00                       		moveq	#0,d7	
00085604 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00085606 5307                       		subq.b	#1,d7
00085608 7C30                       		moveq	#TrackSz,d6
0008560A                            ; loc_72348:
0008560A                            @sfxloadloop:
0008560A 1829 0001                  		move.b	1(a1),d4					; Voice control bits
0008560E 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
00085610 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085616 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0008561A 6000                       		bra.s	@sfxinitpsg
0008561C                            ; ===========================================================================
0008561C                            ; loc_7235A:
0008561C                            @sfxoverridepsg:
0008561C 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085622 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00085626                            ; loc_72364:
00085626                            @sfxinitpsg:
00085626 244D                       		movea.l	a5,a2
00085628 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
0008562A                            ; loc_72368:
0008562A                            @clearsfxtrackram:
0008562A 429A                       		clr.l	(a2)+
0008562C 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
00085630                            
00085630 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00085632 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00085636 7000                       		moveq	#0,d0
00085638 3019                       		move.w	(a1)+,d0			; Track data pointer
0008563A D08B                       		add.l	a3,d0				; Relative pointer
0008563C 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00085640 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00085644 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
0008564A 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
0008564E 4A04                       		tst.b	d4				; Is this a PSG channel?
00085650 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00085652 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00085658                            ; loc_72396:
00085658                            @sfxpsginitdone:
00085658 51CF FFB0                  		dbf	d7,@sfxloadloop
0008565C                            
0008565C 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
00085660 6A00                       		bpl.s	@doneoverride					; Branch if not
00085662 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085668                            ; loc_723A6:
00085668                            @doneoverride:
00085668 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
0008566C 6A00                       		bpl.s	@locret						; Branch if not
0008566E 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085674 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00085678 13C4 00C0 0011             		move.b	d4,(psg_input).l
0008567E 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00085682 13C4 00C0 0011             		move.b	d4,(psg_input).l
00085688                            ; locret_723C6:
00085688                            @locret:
00085688 4E75                       		rts	
0008568A                            ; End of function PlaySoundID
0008568A                            
0008568A                            ; ===========================================================================
0008568A                            ; ---------------------------------------------------------------------------
0008568A                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
0008568A                            ; ---------------------------------------------------------------------------
0008568A                            ; The first block would have been used for overriding the music tracks
0008568A                            ; as they have a lower priority, just as they are in Sound_PlaySFX
0008568A                            ; The third block would be used to set up the Special SFX
0008568A                            ; The second block, however, is for the SFX tracks, which have a higher priority
0008568A                            ; and would be checked for if they're currently playing
0008568A                            ; If they are, then the third block would be used again, this time to mark
0008568A                            ; the new tracks as 'currently playing'
0008568A                            
0008568A                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
0008568A                            
0008568A                            ; BGMFM4PSG3RAM:
0008568A                            ;SpecSFX_BGMChannelRAM:
0008568A 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
0008568E 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00085692                            ; SFXFM4PSG3RAM:
00085692                            ;SpecSFX_SFXChannelRAM:
00085692 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00085696 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
0008569A                            ; SpecialSFXFM4PSG3RAM:
0008569A                            ;SpecSFX_SpecSFXChannelRAM:
0008569A 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
0008569E 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
000856A2                            
000856A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856A2                            
000856A2                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
000856A2                            StopSFX:
000856A2 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000856A4 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
000856A8 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
000856AA                            ; loc_723EA:
000856AA                            @trackloop:
000856AA 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
000856AC 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
000856B0 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
000856B4 7600                       		moveq	#0,d3
000856B6 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
000856BA 6B00                       		bmi.s	@trackpsg			; Branch if PSG
000856BC 4EBA 0000                  		jsr	FMNoteOff(pc)
000856C0 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
000856C4 6600                       		bne.s	@getfmpointer					; Branch if not
000856C6 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
000856CA 6A00                       		bpl.s	@getfmpointer					; Branch if not
000856CC                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
000856CC                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
000856CC                            		; is playing its sound!
000856CC 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000856D0 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
000856D4 6000                       		bra.s	@gotfmpointer
000856D6                            ; ===========================================================================
000856D6                            ; loc_72416:
000856D6                            @getfmpointer:
000856D6 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
000856D8 E50B                       		lsl.b	#2,d3
000856DA 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
000856DE 264D                       		movea.l	a5,a3
000856E0 2A70 3000                  		movea.l	(a0,d3.w),a5
000856E4 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
000856E8                            ; loc_72428:
000856E8                            @gotfmpointer:
000856E8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000856EC 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000856F0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000856F4 4EBA 0000                  		jsr	SetVoice(pc)
000856F8 2A4B                       		movea.l	a3,a5
000856FA 6000                       		bra.s	@nexttrack
000856FC                            ; ===========================================================================
000856FC                            ; loc_7243C:
000856FC                            @trackpsg:
000856FC 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085700 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085704 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00085708 6700                       		beq.s	@gotpsgpointer		; Branch if yes
0008570A 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
0008570E 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00085710 E60B                       		lsr.b	#3,d3
00085712 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00085716 2070 3000                  		movea.l	(a0,d3.w),a0
0008571A                            ; loc_7245A:
0008571A                            @gotpsgpointer:
0008571A 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0008571E 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085722 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00085728 6600                       		bne.s	@nexttrack			; Branch if not
0008572A 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00085732                            ; loc_72472:
00085732                            @nexttrack:
00085732 DAFC 0030                  		adda.w	#TrackSz,a5
00085736 51CF FF72                  		dbf	d7,@trackloop
0008573A                            
0008573A 4E75                       		rts	
0008573C                            ; End of function StopSFX
0008573C                            
0008573C                            
0008573C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008573C                            
0008573C                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
0008573C                            StopSpecialSFX:
0008573C 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085740 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085742 6A00                       		bpl.s	@fadedfm		; Branch if not
00085744 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085748 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
0008574C 6600                       		bne.s	@fadedfm		; Branch if not
0008574E 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00085752 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085756 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0008575A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0008575E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085760 6A00                       		bpl.s	@fadedfm		; Branch if not
00085762 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085766 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0008576A 4EBA 0000                  		jsr	SetVoice(pc)
0008576E                            ; loc_724AE:
0008576E                            @fadedfm:
0008576E 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00085772 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085774 6A00                       		bpl.s	@fadedpsg		; Branch if not
00085776 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0008577A 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
0008577E 6600                       		bne.s	@fadedpsg		; Return if not
00085780 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00085784 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00085788 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0008578C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085790 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085792 6A00                       		bpl.s	@fadedpsg		; Return if not
00085794 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
0008579A 6600                       		bne.s	@fadedpsg			; Return if not
0008579C 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
000857A4                            ; locret_724E4:
000857A4                            @fadedpsg:
000857A4 4E75                       		rts	
000857A6                            ; End of function StopSpecialSFX
000857A6                            
000857A6                            ; ===========================================================================
000857A6                            ; ---------------------------------------------------------------------------
000857A6                            ; Fade out music
000857A6                            ; ---------------------------------------------------------------------------
000857A6                            ; Sound_E0:
000857A6                            FadeOutMusic:
000857A6 4EBA FEFA                  		jsr	StopSFX(pc)
000857AA 4EBA FF90                  		jsr	StopSpecialSFX(pc)
000857AE 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
000857B4 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
000857BA 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
000857BE 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
000857C2 4E75                       		rts	
000857C4                            
000857C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000857C4                            
000857C4                            ; sub_72504:
000857C4                            DoFadeOut:
000857C4 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
000857C8 6700                       		beq.s	@continuefade		; Branch if yes
000857CA 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
000857CE 4E75                       		rts	
000857D0                            ; ===========================================================================
000857D0                            ; loc_72510:
000857D0                            @continuefade:
000857D0 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
000857D4 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
000857D8 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
000857DE 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000857E2 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000857E4                            ; loc_72524:
000857E4                            @fmloop:
000857E4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000857E6 6A00                       		bpl.s	@nextfm			; Branch if not
000857E8 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
000857EC 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
000857EE 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000857F2 6000                       		bra.s	@nextfm
000857F4                            ; ===========================================================================
000857F4                            ; loc_72534:
000857F4                            @sendfmtl:
000857F4 4EBA 0000                  		jsr	SendVoiceTL(pc)
000857F8                            ; loc_72538:
000857F8                            @nextfm:
000857F8 DAFC 0030                  		adda.w	#TrackSz,a5
000857FC 51CF FFE6                  		dbf	d7,@fmloop
00085800                            
00085800 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085802                            ; loc_72542:
00085802                            @psgloop:
00085802 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085804 6A00                       		bpl.s	@nextpsg		; branch if not
00085806 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
0008580A 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00085810 6500                       		blo.s	@sendpsgvol		; Branch if not
00085812 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085816 6000                       		bra.s	@nextpsg
00085818                            ; ===========================================================================
00085818                            ; loc_72558:
00085818                            @sendpsgvol:
00085818 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
0008581C 4EBA 0000                  		jsr	SetPSGVolume(pc)
00085820                            ; loc_72560:
00085820                            @nextpsg:
00085820 DAFC 0030                  		adda.w	#TrackSz,a5
00085824 51CF FFDC                  		dbf	d7,@psgloop
00085828                            
00085828 4E75                       		rts	
0008582A                            ; End of function DoFadeOut
0008582A                            
0008582A                            
0008582A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008582A                            
0008582A                            ; sub_7256A:
0008582A                            FMSilenceAll:
0008582A 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
0008582C 7028                       		moveq	#$28,d0		; FM key on/off register
0008582E                            ; loc_7256E:
0008582E                            @noteoffloop:
0008582E 1203                       		move.b	d3,d1
00085830 4EBA 0000                  		jsr	WriteFMI(pc)
00085834 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00085836 4EBA 0000                  		jsr	WriteFMI(pc)
0008583A 51CB FFF2                  		dbf	d3,@noteoffloop
0008583E                            
0008583E 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00085840 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00085842 7802                       		moveq	#2,d4		; ... for all 3 channels...
00085844                            ; loc_72584:
00085844                            @channelloop:
00085844 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00085846                            ; loc_72586:
00085846                            @channeltlloop:
00085846 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
0008584A 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
0008584E 5840                       		addq.w	#4,d0		; Next TL operator
00085850 51CB FFF4                  		dbf	d3,@channeltlloop
00085854                            
00085854 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00085858 51CC FFEA                  		dbf	d4,@channelloop
0008585C                            
0008585C 4E75                       		rts	
0008585E                            ; End of function FMSilenceAll
0008585E                            
0008585E                            ; ===========================================================================
0008585E                            ; ---------------------------------------------------------------------------
0008585E                            ; Stop music
0008585E                            ; ---------------------------------------------------------------------------
0008585E                            ; Sound_E4: StopSoundAndMusic:
0008585E                            StopAllSound:
0008585E 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00085860 123C 0080                  		move.b	#$80,d1		; Enable DAC
00085864 4EBA 0000                  		jsr	WriteFMI(pc)
00085868 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
0008586A 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
0008586C 4EBA 0000                  		jsr	WriteFMI(pc)
00085870 204E                       		movea.l	a6,a0
00085872                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00085872                            		; Remove the '-$10' to fix this.
00085872 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00085876                            ; loc_725B6:
00085876                            @clearramloop:
00085876 4298                       		clr.l	(a0)+
00085878 51C8 FFFC                  		dbf	d0,@clearramloop
0008587C                            
0008587C 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00085882 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00085886 6000 0000                  		bra.w	PSGSilenceAll
0008588A                            
0008588A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008588A                            
0008588A                            ; sub_725CA:
0008588A                            InitMusicPlayback:
0008588A 204E                       		movea.l	a6,a0
0008588C                            		; Save several values
0008588C 1216                       		move.b	v_sndprio(a6),d1
0008588E 142E 0027                  		move.b	f_1up_playing(a6),d2
00085892 162E 002A                  		move.b	f_speedup(a6),d3
00085896 182E 0026                  		move.b	v_fadein_counter(a6),d4
0008589A                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
0008589A 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
0008589E 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
000858A2                            ; loc_725E4:
000858A2                            @clearramloop:
000858A2 4298                       		clr.l	(a0)+
000858A4 51C8 FFFC                  		dbf	d0,@clearramloop
000858A8                            
000858A8                            		; Restore the values saved above
000858A8 1C81                       		move.b	d1,v_sndprio(a6)
000858AA 1D42 0027                  		move.b	d2,f_1up_playing(a6)
000858AE 1D43 002A                  		move.b	d3,f_speedup(a6)
000858B2 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
000858B6 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
000858BA 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
000858C0                            		; DANGER! This silences ALL channels, even the ones being used
000858C0                            		; by SFX, and not music! @sendfmnoteoff does this already, and
000858C0                            		; doesn't affect SFX channels, either.
000858C0                            		; This should be replaced with an 'rts'.
000858C0 4EBA FF68                  		jsr	FMSilenceAll(pc)
000858C4 6000 0000                  		bra.w	PSGSilenceAll
000858C8                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
000858C8                            		; don't do a very good job of setting up the music tracks.
000858C8                            		; Tracks that aren't defined in a music file's header don't have
000858C8                            		; their channels defined, meaning @sendfmnoteoff won't silence
000858C8                            		; hardware properly. In combination with removing the above
000858C8                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
000858C8                            		; notes.
000858C8                            		; To fix this, I suggest using this code, instead of an 'rts':
000858C8                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
000858C8                            		;lea	FMDACInitBytes(pc),a2
000858C8                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
000858C8                            		;bsr.s	@writeloop
000858C8                            		;lea	PSGInitBytes(pc),a2
000858C8                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
000858C8                            
000858C8                            ;@writeloop:
000858C8                            		;move.b	(a2)+,(a1)		; Write track's channel byte
000858C8                            		;lea	TrackSz(a1),a1		; Next track
000858C8                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
000858C8                            
000858C8                            		;rts
000858C8                            	
000858C8                            ; End of function InitMusicPlayback
000858C8                            
000858C8                            
000858C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000858C8                            
000858C8                            ; sub_7260C:
000858C8                            TempoWait:
000858C8 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
000858CE 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
000858D2 7030                       		moveq	#TrackSz,d0
000858D4 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
000858D6                            ; loc_7261A:
000858D6                            @tempoloop:
000858D6 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
000858D8 D0C0                       		adda.w	d0,a0	; Advance to next track
000858DA 51C9 FFFA                  		dbf	d1,@tempoloop
000858DE                            
000858DE 4E75                       		rts	
000858E0                            ; End of function TempoWait
000858E0                            
000858E0                            ; ===========================================================================
000858E0                            ; ---------------------------------------------------------------------------
000858E0                            ; Speed	up music
000858E0                            ; ---------------------------------------------------------------------------
000858E0                            ; Sound_E2:
000858E0                            SpeedUpMusic:
000858E0 4A2E 0027                  		tst.b	f_1up_playing(a6)
000858E4 6600                       		bne.s	@speedup_1up
000858E6 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
000858EC 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
000858F2 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
000858F8 4E75                       		rts	
000858FA                            ; ===========================================================================
000858FA                            ; loc_7263E:
000858FA                            @speedup_1up:
000858FA 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00085900 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00085906 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
0008590C 4E75                       		rts	
0008590E                            ; ===========================================================================
0008590E                            ; ---------------------------------------------------------------------------
0008590E                            ; Change music back to normal speed
0008590E                            ; ---------------------------------------------------------------------------
0008590E                            ; Sound_E3:
0008590E                            SlowDownMusic:
0008590E 4A2E 0027                  		tst.b	f_1up_playing(a6)
00085912 6600                       		bne.s	@slowdown_1up
00085914 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
0008591A 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00085920 422E 002A                  		clr.b	f_speedup(a6)
00085924 4E75                       		rts	
00085926                            ; ===========================================================================
00085926                            ; loc_7266A:
00085926                            @slowdown_1up:
00085926 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
0008592C 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00085932 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00085936 4E75                       		rts	
00085938                            
00085938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085938                            
00085938                            ; sub_7267C:
00085938                            DoFadeIn:
00085938 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
0008593C 6700                       		beq.s	@continuefade		; Branch if yes
0008593E 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00085942 4E75                       		rts	
00085944                            ; ===========================================================================
00085944                            ; loc_72688:
00085944                            @continuefade:
00085944 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00085948 6700                       		beq.s	@fadedone		; Branch if yes
0008594A 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
0008594E 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00085954 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085958 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0008595A                            ; loc_7269E:
0008595A                            @fmloop:
0008595A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008595C 6A00                       		bpl.s	@nextfm			; Branch if not
0008595E 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00085962 4EBA 0000                  		jsr	SendVoiceTL(pc)
00085966                            ; loc_726AA:
00085966                            @nextfm:
00085966 DAFC 0030                  		adda.w	#TrackSz,a5
0008596A 51CF FFEE                  		dbf	d7,@fmloop
0008596E 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00085970                            ; loc_726B4:
00085970                            @psgloop:
00085970 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085972 6A00                       		bpl.s	@nextpsg		; Branch if not
00085974 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00085978 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
0008597C 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00085980 6500                       		blo.s	@sendpsgvol		; Branch if yes
00085982 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00085984                            ; loc_726C8:
00085984                            @sendpsgvol:
00085984 4EBA 0000                  		jsr	SetPSGVolume(pc)
00085988                            ; loc_726CC:
00085988                            @nextpsg:
00085988 DAFC 0030                  		adda.w	#TrackSz,a5
0008598C 51CF FFE2                  		dbf	d7,@psgloop
00085990 4E75                       		rts	
00085992                            ; ===========================================================================
00085992                            ; loc_726D6:
00085992                            @fadedone:
00085992 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00085998 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
0008599C 4E75                       		rts	
0008599E                            ; End of function DoFadeIn
0008599E                            
0008599E                            ; ===========================================================================
0008599E                            ; loc_726E2:
0008599E                            FMNoteOn:
0008599E 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
000859A2 6600                       		bne.s	@locret		; Return if so
000859A4 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
000859A8 6600                       		bne.s	@locret		; Return if so
000859AA 7028                       		moveq	#$28,d0		; Note on/off register
000859AC 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
000859B0 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
000859B4 6000 0000                  		bra.w	WriteFMI
000859B8                            ; ===========================================================================
000859B8                            ; locret_726FC:
000859B8                            @locret:
000859B8 4E75                       		rts	
000859BA                            
000859BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859BA                            
000859BA                            ; sub_726FE:
000859BA                            FMNoteOff:
000859BA 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
000859BE 6600                       		bne.s	locret_72714	; Return if yes
000859C0 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000859C4 6600                       		bne.s	locret_72714	; Return if yes
000859C6                            ; loc_7270A:
000859C6                            SendFMNoteOff:
000859C6 7028                       		moveq	#$28,d0		; Note on/off register
000859C8 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
000859CC 6000 0000                  		bra.w	WriteFMI
000859D0                            ; ===========================================================================
000859D0                            
000859D0                            locret_72714:
000859D0 4E75                       		rts	
000859D2                            ; End of function FMNoteOff
000859D2                            
000859D2                            ; ===========================================================================
000859D2                            ; loc_72716:
000859D2                            WriteFMIorIIMain:
000859D2 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
000859D6 6600                       		bne.s	@locret		; Return if yes
000859D8 6000 0000                  		bra.w	WriteFMIorII
000859DC                            ; ===========================================================================
000859DC                            ; locret_72720:
000859DC                            @locret:
000859DC 4E75                       		rts	
000859DE                            
000859DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859DE                            
000859DE                            ; sub_72722:
000859DE                            WriteFMIorII:
000859DE 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
000859E4 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
000859E6 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
000859EA                            ; End of function WriteFMIorII
000859EA                            
000859EA                            
000859EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859EA                            
000859EA                            ; The reason I think this is an *early* SMPS 68k Type 1b
000859EA                            ; is because this subroutine is the one from Type 1a:
000859EA                            ; other Type 1b drivers have a newer, optimised version.
000859EA                            ; The driver itself is Type 1b, with this odd exception.
000859EA                            
000859EA                            ; sub_7272E:
000859EA                            WriteFMI:
000859EA 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000859F0 0802 0007                  		btst	#7,d2		; Is FM busy?
000859F4 66F4                       		bne.s	WriteFMI	; Loop if so
000859F6 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
000859FC 4E71                       		nop	
000859FE 4E71                       		nop	
00085A00 4E71                       		nop	
00085A02                            ; loc_72746:
00085A02                            @waitloop:
00085A02 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085A08 0802 0007                  		btst	#7,d2		; Is FM busy?
00085A0C 66F4                       		bne.s	@waitloop	; Loop if so
00085A0E                            
00085A0E 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00085A14 4E75                       		rts	
00085A16                            ; End of function WriteFMI
00085A16                            
00085A16                            ; ===========================================================================
00085A16                            ; loc_7275A:
00085A16                            WriteFMIIPart:
00085A16 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
00085A1A 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00085A1E D002                       		add.b	d2,d0			; Add in to destination register
00085A20                            
00085A20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085A20                            
00085A20                            ; sub_72764:
00085A20                            WriteFMII:
00085A20 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085A26 0802 0007                  		btst	#7,d2		; Is FM busy?
00085A2A 66F4                       		bne.s	WriteFMII	; Loop if so
00085A2C 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
00085A32 4E71                       		nop	
00085A34 4E71                       		nop	
00085A36 4E71                       		nop	
00085A38                            ; loc_7277C:
00085A38                            @waitloop:
00085A38 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085A3E 0802 0007                  		btst	#7,d2		; Is FM busy?
00085A42 66F4                       		bne.s	@waitloop	; Loop if so
00085A44                            
00085A44 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
00085A4A 4E75                       		rts	
00085A4C                            ; End of function WriteFMII
00085A4C                            
00085A4C                            ; ===========================================================================
00085A4C                            ; ---------------------------------------------------------------------------
00085A4C                            ; FM Note Values: b-0 to a#8
00085A4C                            ; ---------------------------------------------------------------------------
00085A4C                            ; word_72790: FM_Notes:
00085A4C                            FMFrequencies:
00085A4C 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
00085A64 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00085A7C 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
00085A94 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00085AAC 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00085AC4 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00085ADC 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00085AF4 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
00085B0C                            
00085B0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B0C                            
00085B0C                            ; sub_72850:
00085B0C                            PSGUpdateTrack:
00085B0C 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
00085B10 6600                       		bne.s	@notegoing
00085B12 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
00085B16 4EBA 0000                  		jsr	PSGDoNext(pc)
00085B1A 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
00085B1E 6000 0000                  		bra.w	PSGDoVolFX
00085B22                            ; ===========================================================================
00085B22                            ; loc_72866:
00085B22                            @notegoing:
00085B22 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
00085B26 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
00085B2A 4EBA F4EA                  		jsr	DoModulation(pc)
00085B2E 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
00085B32 4E75                       		rts
00085B34                            ; End of function PSGUpdateTrack
00085B34                            
00085B34                            
00085B34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B34                            
00085B34                            ; sub_72878:
00085B34                            PSGDoNext:
00085B34 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
00085B38 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
00085B3C                            ; loc_72880:
00085B3C                            @noteloop:
00085B3C 7A00                       		moveq	#0,d5
00085B3E 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00085B40 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00085B44 6500                       		blo.s	@gotnote	; Branch if not
00085B46 4EBA 0000                  		jsr	CoordFlag(pc)
00085B4A 60F0                       		bra.s	@noteloop
00085B4C                            ; ===========================================================================
00085B4C                            ; loc_72890:
00085B4C                            @gotnote:
00085B4C 4A05                       		tst.b	d5		; Is it a note?
00085B4E 6A00                       		bpl.s	@gotduration	; Branch if not
00085B50 4EBA 0000                  		jsr	PSGSetFreq(pc)
00085B54 1A1C                       		move.b	(a4)+,d5	; Get another byte
00085B56 4A05                       		tst.b	d5		; Is it a duration?
00085B58 6A00                       		bpl.s	@gotduration	; Branch if yes
00085B5A 534C                       		subq.w	#1,a4		; Put byte back
00085B5C 6000 F452                  		bra.w	FinishTrackUpdate
00085B60                            ; ===========================================================================
00085B60                            ; loc_728A4:
00085B60                            @gotduration:
00085B60 4EBA F42E                  		jsr	SetDuration(pc)
00085B64 6000 F44A                  		bra.w	FinishTrackUpdate
00085B68                            ; End of function PSGDoNext
00085B68                            
00085B68                            
00085B68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B68                            
00085B68                            ; sub_728AC:
00085B68                            PSGSetFreq:
00085B68 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00085B6C 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00085B6E DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00085B72 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00085B76 E34D                       		lsl.w	#1,d5
00085B78 41FA 0000                  		lea	PSGFrequencies(pc),a0
00085B7C 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00085B82 6000 F42C                  		bra.w	FinishTrackUpdate
00085B86                            ; ===========================================================================
00085B86                            ; loc_728CA:
00085B86                            @restpsg:
00085B86 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085B8A 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
00085B90 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
00085B94 6000 0000                  		bra.w	PSGNoteOff
00085B98                            ; End of function PSGSetFreq
00085B98                            
00085B98                            
00085B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B98                            
00085B98                            ; sub_728DC:
00085B98                            PSGDoNoteOn:
00085B98 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00085B9C 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00085B9E                            ; End of function PSGDoNoteOn
00085B9E                            
00085B9E                            
00085B9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B9E                            
00085B9E                            ; sub_728E2:
00085B9E                            PSGUpdateFreq:
00085B9E 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00085BA2 4880                       		ext.w	d0
00085BA4 DC40                       		add.w	d0,d6		; Add to frequency
00085BA6 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00085BAA 6600                       		bne.s	@locret		; Return if yes
00085BAC 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00085BB0 6600                       		bne.s	@locret		; Return if yes
00085BB2 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00085BB6 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00085BBA 6600                       		bne.s	@notnoise	; Branch if not
00085BBC 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00085BC0                            ; loc_72904:
00085BC0                            @notnoise:
00085BC0 3206                       		move.w	d6,d1
00085BC2 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00085BC6 8001                       		or.b	d1,d0		; Latch tone data to channel
00085BC8 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00085BCA 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00085BCE 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085BD4 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085BDA                            ; locret_7291E:
00085BDA                            @locret:
00085BDA 4E75                       		rts	
00085BDC                            ; End of function PSGUpdateFreq
00085BDC                            
00085BDC                            ; ===========================================================================
00085BDC                            ; loc_72920:
00085BDC                            PSGSetRest:
00085BDC 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00085BE0 4E75                       		rts	
00085BE2                            
00085BE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085BE2                            
00085BE2                            ; sub_72926:
00085BE2                            PSGUpdateVolFX:
00085BE2 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
00085BE6 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00085BEA                            ; loc_7292E:
00085BEA                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00085BEA 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00085BEE 7000                       		moveq	#0,d0
00085BF0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00085BF4 6700                       		beq.s	SetPSGVolume
00085BF6 2079 0008 4BB4             		movea.l	(Go_PSGIndex).l,a0
00085BFC 5340                       		subq.w	#1,d0
00085BFE E548                       		lsl.w	#2,d0
00085C00 2070 0000                  		movea.l	(a0,d0.w),a0
00085C04 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
00085C08 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
00085C0C 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
00085C10 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00085C14 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
00085C16 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
00085C1A 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00085C1C                            ; loc_72960:
00085C1C                            @gotflutter:
00085C1C DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00085C1E 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00085C22 6500                       		blo.s	SetPSGVolume	; Branch if not
00085C24 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
00085C26                            ; End of function PSGUpdateVolFX
00085C26                            
00085C26                            
00085C26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085C26                            
00085C26                            ; sub_7296A:
00085C26                            SetPSGVolume:
00085C26 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00085C2A 6600                       		bne.s	locret_7298A	; Return if so
00085C2C 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085C30 6600                       		bne.s	locret_7298A	; Return if so
00085C32 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
00085C36 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
00085C38                            ; loc_7297C:
00085C38                            PSGSendVolume:
00085C38 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
00085C3C 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
00085C40 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085C46                            
00085C46                            locret_7298A:
00085C46 4E75                       		rts	
00085C48                            ; ===========================================================================
00085C48                            ; loc_7298C: PSGCheckNoteFill:
00085C48                            PSGCheckNoteTimeout:
00085C48 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
00085C4C 67EA                       		beq.s	PSGSendVolume			; Branch if not
00085C4E 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00085C52 66E4                       		bne.s	PSGSendVolume			; Branch if not
00085C54 4E75                       		rts	
00085C56                            ; End of function SetPSGVolume
00085C56                            
00085C56                            ; ===========================================================================
00085C56                            ; loc_7299A: FlutterDone:
00085C56                            VolEnvHold:
00085C56 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
00085C5A 4E75                       		rts	
00085C5C                            
00085C5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085C5C                            
00085C5C                            ; sub_729A0:
00085C5C                            PSGNoteOff:
00085C5C 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085C60 6600                       		bne.s	locret_729B4	; Return if so
00085C62                            ; loc_729A6:
00085C62                            SendPSGNoteOff:
00085C62 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
00085C66 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00085C6A 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085C70                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
00085C70                            		; risk of music accidentally playing noise because it can't detect if
00085C70                            		; the PSG4/noise channel needs muting on track initialisation.
00085C70                            		; S&K's driver fixes it by doing this:
00085C70 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
00085C74 6600                       		bne.s	locret_729B4
00085C76 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00085C7E                            
00085C7E                            locret_729B4:
00085C7E 4E75                       		rts	
00085C80                            ; End of function PSGNoteOff
00085C80                            
00085C80                            
00085C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085C80                            
00085C80                            ; sub_729B6:
00085C80                            PSGSilenceAll:
00085C80 41F9 00C0 0011             		lea	(psg_input).l,a0
00085C86 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00085C8A 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00085C8E 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00085C92 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00085C96 4E75                       		rts	
00085C98                            ; End of function PSGSilenceAll
00085C98                            
00085C98                            ; ===========================================================================
00085C98                            ; word_729CE:
00085C98                            PSGFrequencies:
00085C98 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00085CA8 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00085CB8 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00085CC8 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
00085CD8 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
00085CE8 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00085CF8 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
00085D08 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
00085D18 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
00085D24                            
00085D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085D24                            
00085D24                            ; sub_72A5A:
00085D24                            CoordFlag:
00085D24 0445 00E0                  		subi.w	#$E0,d5
00085D28 E54D                       		lsl.w	#2,d5
00085D2A 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00085D2E                            ; End of function CoordFlag
00085D2E                            
00085D2E                            ; ===========================================================================
00085D2E                            ; loc_72A64:
00085D2E                            coordflagLookup:
00085D2E 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
00085D32                            ; ===========================================================================
00085D32 6000 0000                  		bra.w	cfDetune		; $E1
00085D36                            ; ===========================================================================
00085D36 6000 0000                  		bra.w	cfSetCommunication	; $E2
00085D3A                            ; ===========================================================================
00085D3A 6000 0000                  		bra.w	cfJumpReturn		; $E3
00085D3E                            ; ===========================================================================
00085D3E 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00085D42                            ; ===========================================================================
00085D42 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00085D46                            ; ===========================================================================
00085D46 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00085D4A                            ; ===========================================================================
00085D4A 6000 0000                  		bra.w	cfHoldNote		; $E7
00085D4E                            ; ===========================================================================
00085D4E 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00085D52                            ; ===========================================================================
00085D52 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00085D56                            ; ===========================================================================
00085D56 6000 0000                  		bra.w	cfSetTempo		; $EA
00085D5A                            ; ===========================================================================
00085D5A 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00085D5E                            ; ===========================================================================
00085D5E 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00085D62                            ; ===========================================================================
00085D62 6000 0000                  		bra.w	cfClearPush		; $ED
00085D66                            ; ===========================================================================
00085D66 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00085D6A                            ; ===========================================================================
00085D6A 6000 0000                  		bra.w	cfSetVoice		; $EF
00085D6E                            ; ===========================================================================
00085D6E 6000 0000                  		bra.w	cfModulation		; $F0
00085D72                            ; ===========================================================================
00085D72 6000 0000                  		bra.w	cfEnableModulation	; $F1
00085D76                            ; ===========================================================================
00085D76 6000 0000                  		bra.w	cfStopTrack		; $F2
00085D7A                            ; ===========================================================================
00085D7A 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00085D7E                            ; ===========================================================================
00085D7E 6000 0000                  		bra.w	cfDisableModulation	; $F4
00085D82                            ; ===========================================================================
00085D82 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00085D86                            ; ===========================================================================
00085D86 6000 0000                  		bra.w	cfJumpTo		; $F6
00085D8A                            ; ===========================================================================
00085D8A 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00085D8E                            ; ===========================================================================
00085D8E 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00085D92                            ; ===========================================================================
00085D92 6000 0000                  		bra.w	cfOpF9			; $F9
00085D96                            ; ===========================================================================
00085D96                            ; loc_72ACC:
00085D96                            cfPanningAMSFMS:
00085D96 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00085D98 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085D9C 6B00                       		bmi.s	locret_72AEA		; Return if yes
00085D9E 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00085DA2 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00085DA6 8200                       		or.b	d0,d1			; Mask in new value
00085DA8 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00085DAC 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085DB0 6000 FC20                  		bra.w	WriteFMIorIIMain
00085DB4                            ; ===========================================================================
00085DB4                            
00085DB4                            locret_72AEA:
00085DB4 4E75                       		rts	
00085DB6                            ; ===========================================================================
00085DB6                            ; loc_72AEC: cfAlterNotes:
00085DB6                            cfDetune:
00085DB6 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00085DBA 4E75                       		rts	
00085DBC                            ; ===========================================================================
00085DBC                            ; loc_72AF2: cfUnknown1:
00085DBC                            cfSetCommunication:
00085DBC 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00085DC0 4E75                       		rts	
00085DC2                            ; ===========================================================================
00085DC2                            ; loc_72AF8:
00085DC2                            cfJumpReturn:
00085DC2 7000                       		moveq	#0,d0
00085DC4 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00085DC8 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00085DCC 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00085DD4 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00085DD6 5800                       		addq.b	#4,d0			; Actually 'pop' value
00085DD8 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00085DDC 4E75                       		rts	
00085DDE                            ; ===========================================================================
00085DDE                            ; loc_72B14:
00085DDE                            cfFadeInToPrevious:
00085DDE 204E                       		movea.l	a6,a0
00085DE0 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00085DE4 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
00085DE8                            ; loc_72B1E:
00085DE8                            @restoreramloop:
00085DE8 20D9                       		move.l	(a1)+,(a0)+
00085DEA 51C8 FFFC                  		dbf	d0,@restoreramloop
00085DEE                            
00085DEE 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00085DF4 264D                       		movea.l	a5,a3
00085DF6 1C3C 0028                  		move.b	#$28,d6
00085DFA 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
00085DFE 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085E00 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085E04                            ; loc_72B3A:
00085E04                            @fmloop:
00085E04 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085E08 6700                       		beq.s	@nextfm		; Branch if not
00085E0A 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085E0E DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00085E12 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085E16 6600                       		bne.s	@nextfm		; Branch if yes
00085E18 7000                       		moveq	#0,d0
00085E1A 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00085E1E 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085E22 4EBA 0000                  		jsr	SetVoice(pc)
00085E26                            ; loc_72B5C:
00085E26                            @nextfm:
00085E26 DAFC 0030                  		adda.w	#TrackSz,a5
00085E2A 51CF FFD8                  		dbf	d7,@fmloop
00085E2E                            
00085E2E 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085E30                            ; loc_72B66:
00085E30                            @psgloop:
00085E30 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085E34 6700                       		beq.s	@nextpsg	; Branch if not
00085E36 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085E3A 4EBA FE20                  		jsr	PSGNoteOff(pc)
00085E3E DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00085E42                            ; loc_72B78:
00085E42                            @nextpsg:
00085E42 DAFC 0030                  		adda.w	#TrackSz,a5
00085E46 51CF FFE8                  		dbf	d7,@psgloop
00085E4A                            		
00085E4A 2A4B                       		movea.l	a3,a5
00085E4C 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00085E52 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00085E58 422E 0027                  		clr.b	f_1up_playing(a6)
00085E5C 33FC 0000 00A1 1100        		startZ80
00085E64 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
00085E66 4E75                       		rts	
00085E68                            ; ===========================================================================
00085E68                            ; loc_72B9E:
00085E68                            cfSetTempoDivider:
00085E68 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00085E6C 4E75                       		rts	
00085E6E                            ; ===========================================================================
00085E6E                            ; loc_72BA4: cfSetVolume:
00085E6E                            cfChangeFMVolume:
00085E6E 101C                       		move.b	(a4)+,d0		; Get parameter
00085E70 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00085E74 6000 0000                  		bra.w	SendVoiceTL
00085E78                            ; ===========================================================================
00085E78                            ; loc_72BAE: cfPreventAttack:
00085E78                            cfHoldNote:
00085E78 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00085E7C 4E75                       		rts	
00085E7E                            ; ===========================================================================
00085E7E                            ; loc_72BB4: cfNoteFill
00085E7E                            cfNoteTimeout:
00085E7E 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00085E82 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00085E86 4E75                       		rts	
00085E88                            ; ===========================================================================
00085E88                            ; loc_72BBE: cfAddKey:
00085E88                            cfChangeTransposition:
00085E88 101C                       		move.b	(a4)+,d0		; Get parameter
00085E8A D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00085E8E 4E75                       		rts	
00085E90                            ; ===========================================================================
00085E90                            ; loc_72BC6:
00085E90                            cfSetTempo:
00085E90 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00085E94 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00085E98 4E75                       		rts	
00085E9A                            ; ===========================================================================
00085E9A                            ; loc_72BD0: cfSetTempoMod:
00085E9A                            cfSetTempoDividerAll:
00085E9A 41EE 0040                  		lea	v_music_track_ram(a6),a0
00085E9E 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00085EA0 7230                       		moveq	#TrackSz,d1
00085EA2 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00085EA4                            ; loc_72BDA:
00085EA4                            @trackloop:
00085EA4 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00085EA8 D0C1                       		adda.w	d1,a0
00085EAA 51CA FFF8                  		dbf	d2,@trackloop
00085EAE                            
00085EAE 4E75                       		rts	
00085EB0                            ; ===========================================================================
00085EB0                            ; loc_72BE6: cfChangeVolume:
00085EB0                            cfChangePSGVolume:
00085EB0 101C                       		move.b	(a4)+,d0		; Get volume change
00085EB2 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00085EB6 4E75                       		rts	
00085EB8                            ; ===========================================================================
00085EB8                            ; loc_72BEE:
00085EB8                            cfClearPush:
00085EB8 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00085EBC 4E75                       		rts	
00085EBE                            ; ===========================================================================
00085EBE                            ; loc_72BF4:
00085EBE                            cfStopSpecialFM4:
00085EBE 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00085EC2 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085EC6 4EBA FAF2                  		jsr	FMNoteOff(pc)
00085ECA 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00085ECE 6B00                       		bmi.s	@locexit					; Branch if yes
00085ED0 264D                       		movea.l	a5,a3
00085ED2 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085ED6 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085EDA 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085EDE 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085EE2 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085EE6 4EBA 0000                  		jsr	SetVoice(pc)
00085EEA 2A4B                       		movea.l	a3,a5
00085EEC                            ; loc_72C22:
00085EEC                            @locexit:
00085EEC 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00085EEE 4E75                       		rts	
00085EF0                            ; ===========================================================================
00085EF0                            ; loc_72C26:
00085EF0                            cfSetVoice:
00085EF0 7000                       		moveq	#0,d0
00085EF2 101C                       		move.b	(a4)+,d0		; Get new voice
00085EF4 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00085EF8 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00085EFC 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00085F00 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00085F04 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00085F08 6700                       		beq.s	SetVoice		; If yes, branch
00085F0A 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00085F0E 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00085F12 6B00                       		bmi.s	SetVoice		; If yes, branch
00085F14 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00085F18                            
00085F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085F18                            
00085F18                            ; sub_72C4E:
00085F18                            SetVoice:
00085F18 5340                       		subq.w	#1,d0
00085F1A 6B00                       		bmi.s	@havevoiceptr
00085F1C 323C 0019                  		move.w	#25,d1
00085F20                            ; loc_72C56:
00085F20                            @voicemultiply:
00085F20 D2C1                       		adda.w	d1,a1
00085F22 51C8 FFFC                  		dbf	d0,@voicemultiply
00085F26                            ; loc_72C5C:
00085F26                            @havevoiceptr:
00085F26 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00085F28 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00085F2C 1801                       		move.b	d1,d4
00085F2E 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00085F32 4EBA FAAA                  		jsr	WriteFMIorII(pc)
00085F36 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00085F3A 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00085F3C                            ; loc_72C72:
00085F3C                            @sendvoiceloop:
00085F3C 101A                       		move.b	(a2)+,d0
00085F3E 1219                       		move.b	(a1)+,d1
00085F40 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00085F44 51CB FFF6                  		dbf	d3,@sendvoiceloop
00085F48                            
00085F48 7A03                       		moveq	#3,d5
00085F4A 0244 0007                  		andi.w	#7,d4			; Get algorithm
00085F4E 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00085F52 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00085F56                            ; loc_72C8C:
00085F56                            @sendtlloop:
00085F56 101A                       		move.b	(a2)+,d0
00085F58 1219                       		move.b	(a1)+,d1
00085F5A E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085F5C 6400                       		bcc.s	@sendtl		; Branch if not
00085F5E D203                       		add.b	d3,d1		; Include additional attenuation
00085F60                            ; loc_72C96:
00085F60                            @sendtl:
00085F60 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00085F64 51CD FFF0                  		dbf	d5,@sendtlloop
00085F68                            		
00085F68 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00085F6C 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00085F70 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00085F74                            
00085F74                            locret_72CAA:
00085F74 4E75                       		rts	
00085F76                            ; End of function SetVoice
00085F76                            
00085F76                            ; ===========================================================================
00085F76                            ; byte_72CAC:
00085F76 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00085F7E                            
00085F7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085F7E                            
00085F7E                            ; sub_72CB4:
00085F7E                            SendVoiceTL:
00085F7E 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085F82 6600                       		bne.s	@locret		; Return if so
00085F84 7000                       		moveq	#0,d0
00085F86 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085F8A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085F8E 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085F92 6700                       		beq.s	@gotvoiceptr
00085F94                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00085F94                            		; of a6!
00085F94 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00085F98 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085F9C 6B00                       		bmi.s	@gotvoiceptr
00085F9E 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00085FA2                            ; loc_72CD8:
00085FA2                            @gotvoiceptr:
00085FA2 5340                       		subq.w	#1,d0
00085FA4 6B00                       		bmi.s	@gotvoice
00085FA6 323C 0019                  		move.w	#25,d1
00085FAA                            ; loc_72CE0:
00085FAA                            @voicemultiply:
00085FAA D2C1                       		adda.w	d1,a1
00085FAC 51C8 FFFC                  		dbf	d0,@voicemultiply
00085FB0                            ; loc_72CE6:
00085FB0                            @gotvoice:
00085FB0 D2FC 0015                  		adda.w	#21,a1				; Want TL
00085FB4 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00085FB8 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00085FBC 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00085FC0 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00085FC4 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00085FC8 6B00                       		bmi.s	@locret				; If negative, stop
00085FCA 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00085FCC                            ; loc_72D02:
00085FCC                            @sendtlloop:
00085FCC 101A                       		move.b	(a2)+,d0
00085FCE 1219                       		move.b	(a1)+,d1
00085FD0 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085FD2 6400                       		bcc.s	@senttl		; Branch if not
00085FD4 D203                       		add.b	d3,d1		; Include additional attenuation
00085FD6 6500                       		bcs.s	@senttl		; Branch on overflow
00085FD8 4EBA FA04                  		jsr	WriteFMIorII(pc)
00085FDC                            ; loc_72D12:
00085FDC                            @senttl:
00085FDC 51CD FFEE                  		dbf	d5,@sendtlloop
00085FE0                            ; locret_72D16:
00085FE0                            @locret:
00085FE0 4E75                       		rts	
00085FE2                            ; End of function SendVoiceTL
00085FE2                            
00085FE2                            ; ===========================================================================
00085FE2                            ; byte_72D18:
00085FE2                            FMInstrumentOperatorTable:
00085FE2 30                         		dc.b  $30		; Detune/multiple operator 1
00085FE3 38                         		dc.b  $38		; Detune/multiple operator 3
00085FE4 34                         		dc.b  $34		; Detune/multiple operator 2
00085FE5 3C                         		dc.b  $3C		; Detune/multiple operator 4
00085FE6 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00085FE7 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00085FE8 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00085FE9 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00085FEA 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00085FEB 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00085FEC 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00085FED 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00085FEE 70                         		dc.b  $70		; Secondary decay rate operator 1
00085FEF 78                         		dc.b  $78		; Secondary decay rate operator 3
00085FF0 74                         		dc.b  $74		; Secondary decay rate operator 2
00085FF1 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00085FF2 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00085FF3 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00085FF4 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00085FF5 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00085FF6                            FMInstrumentOperatorTable_End
00085FF6                            ; byte_72D2C:
00085FF6                            FMInstrumentTLTable:
00085FF6 40                         		dc.b  $40		; Total level operator 1
00085FF7 48                         		dc.b  $48		; Total level operator 3
00085FF8 44                         		dc.b  $44		; Total level operator 2
00085FF9 4C                         		dc.b  $4C		; Total level operator 4
00085FFA                            FMInstrumentTLTable_End
00085FFA                            ; ===========================================================================
00085FFA                            ; loc_72D30:
00085FFA                            cfModulation:
00085FFA 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00085FFE 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00086002 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00086006 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
0008600A 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
0008600E 101C                       		move.b	(a4)+,d0			; Modulation steps...
00086010 E208                       		lsr.b	#1,d0				; ... divided by 2...
00086012 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00086016 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
0008601A 4E75                       		rts	
0008601C                            ; ===========================================================================
0008601C                            ; loc_72D52:
0008601C                            cfEnableModulation:
0008601C 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00086020 4E75                       		rts	
00086022                            ; ===========================================================================
00086022                            ; loc_72D58:
00086022                            cfStopTrack:
00086022 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00086026 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
0008602A 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0008602E 6B00                       		bmi.s	@stoppsg		; Branch if yes
00086030 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00086034 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00086038 4EBA F980                  		jsr	FMNoteOff(pc)
0008603C 6000                       		bra.s	@stoppedchannel
0008603E                            ; ===========================================================================
0008603E                            ; loc_72D74:
0008603E                            @stoppsg:
0008603E 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00086042                            ; loc_72D78:
00086042                            @stoppedchannel:
00086042 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00086046 6A00 0000                  		bpl.w	@locexit		; Exit if not
0008604A 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0008604C 7000                       		moveq	#0,d0
0008604E 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00086052 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00086054 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00086058 264D                       		movea.l	a5,a3
0008605A 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
0008605E 6600                       		bne.s	@getpointer		; Branch if not
00086060 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00086064 6A00                       		bpl.s	@getpointer		; Branch if not
00086066 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0008606A 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
0008606E 6000                       		bra.s	@gotpointer
00086070                            ; ===========================================================================
00086070                            ; loc_72DA8:
00086070                            @getpointer:
00086070 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00086072 E508                       		lsl.b	#2,d0
00086074 2A70 0000                  		movea.l	(a0,d0.w),a5
00086078 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008607A 6A00                       		bpl.s	@novoiceupd		; Branch if not
0008607C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00086080                            ; loc_72DB8:
00086080                            @gotpointer:
00086080 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00086084 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00086088 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0008608C 4EBA FE8A                  		jsr	SetVoice(pc)
00086090                            ; loc_72DC8:
00086090                            @novoiceupd:
00086090 2A4B                       		movea.l	a3,a5
00086092 6000                       		bra.s	@locexit
00086094                            ; ===========================================================================
00086094                            ; loc_72DCC:
00086094                            @getpsgptr:
00086094 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00086098 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
0008609A 6A00                       		bpl.s	@getchannelptr	; Branch if not
0008609C 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
000860A0 6700                       		beq.s	@gotchannelptr	; Branch if yes
000860A2 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
000860A6 6700                       		beq.s	@gotchannelptr	; Branch if yes
000860A8                            ; loc_72DE0:
000860A8                            @getchannelptr:
000860A8 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
000860AC E608                       		lsr.b	#3,d0
000860AE 2070 0000                  		movea.l	(a0,d0.w),a0
000860B2                            ; loc_72DEA:
000860B2                            @gotchannelptr:
000860B2 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
000860B6 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
000860BA 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
000860C0 6600                       		bne.s	@locexit			; Branch if not
000860C2 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
000860CA                            ; loc_72E02:
000860CA                            @locexit:
000860CA 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
000860CC 4E75                       		rts	
000860CE                            ; ===========================================================================
000860CE                            ; loc_72E06:
000860CE                            cfSetPSGNoise:
000860CE 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
000860D4 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
000860D8 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
000860DC 6600                       		bne.s	@locret				; Return if yes
000860DE 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
000860E6                            ; locret_72E1E:
000860E6                            @locret:
000860E6 4E75                       		rts	
000860E8                            ; ===========================================================================
000860E8                            ; loc_72E20:
000860E8                            cfDisableModulation:
000860E8 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
000860EC 4E75                       		rts	
000860EE                            ; ===========================================================================
000860EE                            ; loc_72E26:
000860EE                            cfSetPSGTone:
000860EE 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
000860F2 4E75                       		rts	
000860F4                            ; ===========================================================================
000860F4                            ; loc_72E2C:
000860F4                            cfJumpTo:
000860F4 101C                       		move.b	(a4)+,d0	; High byte of offset
000860F6 E148                       		lsl.w	#8,d0		; Shift it into place
000860F8 101C                       		move.b	(a4)+,d0	; Low byte of offset
000860FA D8C0                       		adda.w	d0,a4		; Add to current position
000860FC 534C                       		subq.w	#1,a4		; Put back one byte
000860FE 4E75                       		rts	
00086100                            ; ===========================================================================
00086100                            ; loc_72E38:
00086100                            cfRepeatAtPos:
00086100 7000                       		moveq	#0,d0
00086102 101C                       		move.b	(a4)+,d0			; Loop index
00086104 121C                       		move.b	(a4)+,d1			; Repeat count
00086106 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
0008610A 6600                       		bne.s	@loopexists			; Branch if yes
0008610C 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00086110                            ; loc_72E48:
00086110                            @loopexists:
00086110 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00086114 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00086116 544C                       		addq.w	#2,a4				; Skip target address
00086118 4E75                       		rts	
0008611A                            ; ===========================================================================
0008611A                            ; loc_72E52:
0008611A                            cfJumpToGosub:
0008611A 7000                       		moveq	#0,d0
0008611C 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00086120 5900                       		subq.b	#4,d0				; Add space for another target
00086122 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00086126 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
0008612A 60C8                       		bra.s	cfJumpTo
0008612C                            ; ===========================================================================
0008612C                            ; loc_72E64:
0008612C                            cfOpF9:
0008612C 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00086130 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00086134 4EBA F8B4                  		jsr	WriteFMI(pc)
00086138 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
0008613C 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00086140 6000 F8A8                  		bra.w	WriteFMI
00086144                            ; ===========================================================================
00086144                            
00086144                            Kos_Z80:
00086144                            		incbin	"sound\z80.bin", 0, $15
00086159 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
0008615A                            		incbin	"sound\z80.bin", $16, 6
00086160 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00086161                            		incbin	"sound\z80.bin", $1D, $93
000861F4 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
000861F6                            		incbin	"sound\z80.bin", $B2, 1
000861F7 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
000861F9                            		incbin	"sound\z80.bin", $B5, $16AB
0008789A                            		even
0008789A                            
0008789A                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
00088BBE 00                         		even
00088BBE                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0008A446                            		even
0008A446                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
00091DC6 00                         		even
00091DC6                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000935DA 00                         		even
000935DA                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
00094380                            		even
00094380                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
00095738                            		even
00095738                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
00096030 00                         		even
00096030                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
00096030                            extralifejingle_Header:
00096030                            	smpsHeaderStartSong 1
00096032 0703                       	smpsHeaderChan      $07, $03
00096034 0100                       	smpsHeaderTempo     $01, $00
00096036                            
0009603A 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
0009603E 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
00096042 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
00096046 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
0009604A 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
0009604E 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
00096064                            
00096064                            ; DAC Data
00096064                            extralifejingle_DAC:
00096064 807F 55                    	dc.b	nRst, $7F, $55
00096067 E4                         	smpsFade
00096068                            ; PSG1 Data
00096068                            extralifejingle_PSG1:
00096068                            ; PSG2 Data
00096068                            extralifejingle_PSG2:
00096068                            ; PSG3 Data
00096068                            extralifejingle_PSG3:
00096068 F2                         	smpsStop
00096069                            
00096069                            ; FM1 Data
00096069                            extralifejingle_FM1:
00096069 EF00                       	smpsSetvoice        $00
0009606B E616                       	smpsAlterVol        $16
0009606D E0C0                       	smpsPan             panCenter, $00
0009606F A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
0009607B AC06 800C                  	dc.b	nG3, $06, nRst, $0C
0009607F F2                         	smpsStop
00096080                            
00096080                            ; FM2 Data
00096080                            extralifejingle_FM2:
00096080 EF01                       	smpsSetvoice        $01
00096082 E616                       	smpsAlterVol        $16
00096084 E0C0                       	smpsPan             panCenter, $00
00096086 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
00096092 A206 800C                  	dc.b	nA2, $06, nRst, $0C
00096096 F2                         	smpsStop
00096097                            
00096097                            ; FM3 Data
00096097                            extralifejingle_FM3:
00096097 EF01                       	smpsSetvoice        $01
00096099 E616                       	smpsAlterVol        $16
0009609B E0C0                       	smpsPan             panCenter, $00
0009609D AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
000960A9 B106 800C                  	dc.b	nC4, $06, nRst, $0C
000960AD F2                         	smpsStop
000960AE                            
000960AE                            ; FM4 Data
000960AE                            extralifejingle_FM4:
000960AE EF02                       	smpsSetvoice        $02
000960B0 E0C0                       	smpsPan             panCenter, $00
000960B2 8001                       	dc.b	nRst, $01
000960B4 E616                       	smpsAlterVol        $16
000960B6 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
000960C2 C106 800C                  	dc.b	nE5, $06, nRst, $0C
000960C6 F2                         	smpsStop
000960C7                            
000960C7                            ; FM5 Data
000960C7                            extralifejingle_FM5:
000960C7 EF03                       	smpsSetvoice        $03
000960C9 E602                       	smpsAlterVol        $02
000960CB E0C0                       	smpsPan             panCenter, $00
000960CD 8001                       	dc.b	nRst, $01
000960CF EF05                       	smpsSetvoice        $05
000960D1 E60A                       	smpsAlterVol        $0A
000960D3 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
000960DF B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
000960EB 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
000960F7 C1C4 80                    	dc.b	nE5, nG5, nRst
000960FA F2                         	smpsStop
000960FB                            
000960FB                            ; FM6 Data
000960FB                            extralifejingle_FM6:
000960FB EF04                       	smpsSetvoice        $04
000960FD E607                       	smpsAlterVol        $07
000960FF E0C0                       	smpsPan             panCenter, $00
00096101 8001                       	dc.b	nRst, $01
00096103 EF06                       	smpsSetvoice        $06
00096105 E6F9                       	smpsAlterVol        $F9
00096107 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
0009610E F2                         	smpsStop
0009610F                            
0009610F                            extralifejingle_Voices:
0009610F                            ;	Voice $00
0009610F                            ;	$3A
0009610F                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
0009610F                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
0009610F                            	smpsVcAlgorithm     $02
0009610F                            	smpsVcFeedback      $07
0009610F                            	smpsVcUnusedBits    $00
0009610F                            	smpsVcDetune        $03, $07, $07, $03
0009610F                            	smpsVcCoarseFreq    $01, $04, $03, $04
0009610F                            	smpsVcRateScale     $00, $00, $00, $00
0009610F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009610F                            	smpsVcAmpMod        $00, $00, $00, $00
0009610F                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
0009610F                            	smpsVcDecayRate2    $00, $00, $00, $00
0009610F                            	smpsVcDecayLevel    $00, $00, $00, $00
0009610F                            	smpsVcReleaseRate   $05, $03, $03, $03
00096128                            
00096128                            ;	Voice $01
00096128                            ;	$3A
00096128                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00096128                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00096128                            	smpsVcAlgorithm     $02
00096128                            	smpsVcFeedback      $07
00096128                            	smpsVcUnusedBits    $00
00096128                            	smpsVcDetune        $03, $07, $07, $03
00096128                            	smpsVcCoarseFreq    $01, $04, $03, $04
00096128                            	smpsVcRateScale     $00, $00, $00, $00
00096128                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00096128                            	smpsVcAmpMod        $00, $00, $00, $00
00096128                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00096128                            	smpsVcDecayRate2    $00, $00, $00, $00
00096128                            	smpsVcDecayLevel    $00, $00, $00, $00
00096128                            	smpsVcReleaseRate   $05, $03, $03, $03
00096141                            
00096141                            ;	Voice $02
00096141                            ;	$3A
00096141                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00096141                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00096141                            	smpsVcAlgorithm     $02
00096141                            	smpsVcFeedback      $07
00096141                            	smpsVcUnusedBits    $00
00096141                            	smpsVcDetune        $03, $07, $07, $03
00096141                            	smpsVcCoarseFreq    $01, $04, $03, $04
00096141                            	smpsVcRateScale     $00, $00, $00, $00
00096141                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00096141                            	smpsVcAmpMod        $00, $00, $00, $00
00096141                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00096141                            	smpsVcDecayRate2    $00, $00, $00, $00
00096141                            	smpsVcDecayLevel    $00, $00, $00, $00
00096141                            	smpsVcReleaseRate   $05, $03, $03, $03
0009615A                            
0009615A                            ;	Voice $03
0009615A                            ;	$00
0009615A                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
0009615A                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
0009615A                            	smpsVcAlgorithm     $00
0009615A                            	smpsVcFeedback      $00
0009615A                            	smpsVcUnusedBits    $00
0009615A                            	smpsVcDetune        $00, $00, $00, $00
0009615A                            	smpsVcCoarseFreq    $00, $00, $0E, $01
0009615A                            	smpsVcRateScale     $00, $00, $00, $00
0009615A                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
0009615A                            	smpsVcAmpMod        $00, $00, $00, $00
0009615A                            	smpsVcDecayRate1    $10, $10, $1C, $1A
0009615A                            	smpsVcDecayRate2    $00, $00, $00, $00
0009615A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009615A                            	smpsVcReleaseRate   $08, $08, $0E, $0D
00096173                            
00096173                            ;	Voice $04
00096173                            ;	$03
00096173                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
00096173                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
00096173                            	smpsVcAlgorithm     $03
00096173                            	smpsVcFeedback      $00
00096173                            	smpsVcUnusedBits    $00
00096173                            	smpsVcDetune        $03, $04, $04, $06
00096173                            	smpsVcCoarseFreq    $01, $00, $00, $06
00096173                            	smpsVcRateScale     $00, $00, $00, $00
00096173                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00096173                            	smpsVcAmpMod        $00, $00, $00, $00
00096173                            	smpsVcDecayRate1    $01, $02, $05, $0E
00096173                            	smpsVcDecayRate2    $06, $04, $00, $01
00096173                            	smpsVcDecayLevel    $01, $01, $06, $0A
00096173                            	smpsVcReleaseRate   $08, $06, $0A, $0A
0009618C                            
0009618C                            ;	Voice $05
0009618C                            ;	$34
0009618C                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
0009618C                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
0009618C                            	smpsVcAlgorithm     $04
0009618C                            	smpsVcFeedback      $06
0009618C                            	smpsVcUnusedBits    $00
0009618C                            	smpsVcDetune        $07, $00, $07, $03
0009618C                            	smpsVcCoarseFreq    $04, $01, $0E, $03
0009618C                            	smpsVcRateScale     $00, $01, $00, $02
0009618C                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
0009618C                            	smpsVcAmpMod        $00, $00, $00, $00
0009618C                            	smpsVcDecayRate1    $08, $07, $07, $14
0009618C                            	smpsVcDecayRate2    $00, $00, $00, $00
0009618C                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
0009618C                            	smpsVcReleaseRate   $07, $07, $04, $06
000961A5                            
000961A5                            ;	Voice $06
000961A5                            ;	$30
000961A5                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
000961A5                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
000961A5                            	smpsVcAlgorithm     $00
000961A5                            	smpsVcFeedback      $06
000961A5                            	smpsVcUnusedBits    $00
000961A5                            	smpsVcDetune        $00, $00, $00, $00
000961A5                            	smpsVcCoarseFreq    $01, $00, $00, $01
000961A5                            	smpsVcRateScale     $01, $00, $00, $02
000961A5                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000961A5                            	smpsVcAmpMod        $00, $00, $00, $00
000961A5                            	smpsVcDecayRate1    $14, $10, $0D, $0F
000961A5                            	smpsVcDecayRate2    $08, $05, $18, $08
000961A5                            	smpsVcDecayLevel    $01, $00, $00, $06
000961A5                            	smpsVcReleaseRate   $08, $0F, $00, $0F
000961BE                            
000961BE                            
000961BE                            		even
000961BE                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
00096A16 00                         		even
00096A16                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
00096F36                            		even
00096F36                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000971F8 00                         		even
000971F8                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
00098050                            		even
00098050                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
0009829C 00                         		even
0009829C                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000985D2 00                         		even
000985D2                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
0009877E 00                         		even
0009877E                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
0009898C 00                         		even
0009898C                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
00098C70 00                         		even
00098C70                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
000993A0 00                         		even
000993A0                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
0009946E                            		even
0009946E                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000998DC 00                         		even
000998DC                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
0009A3D2                            		even
0009A3D2                            Music96:		incbin	"sound/music/Mus96 - TTZ BF US.bin"
0009AFB4                            		even
0009AFB4                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
0009C2BA 00                         		even
0009C2BA                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
0009C2BA                            PasswordEntry_Header:
0009C2BA                            	smpsHeaderStartSong 3
0009C2BC 0603                       	smpsHeaderChan      $06, $03
0009C2BE 0105                       	smpsHeaderTempo     $01, $05
0009C2C0                            
0009C2C4 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
0009C2C8 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
0009C2CC 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
0009C2D0 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
0009C2D4 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
0009C2EA                            
0009C2EA                            ; FM1 Data
0009C2EA                            PasswordEntry_FM1:
0009C2EA EF00                       	smpsSetvoice        $00
0009C2F1                            
0009C2F1                            PasswordEntry_Jump00:
0009C2F1 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
0009C2FD C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
0009C309 C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
0009C315 C918 CB                    	dc.b	nC6, $18, nD6
0009C318 F6FF D7                    	smpsJump            PasswordEntry_Jump00
0009C31B                            
0009C31B                            ; FM2 Data
0009C31B                            PasswordEntry_FM2:
0009C31B EF01                       	smpsSetvoice        $01
0009C31D                            
0009C31D                            PasswordEntry_Jump03:
0009C31D B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
0009C329 AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
0009C335 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
0009C341 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
0009C34B F6FF D0                    	smpsJump            PasswordEntry_Jump03
0009C34E                            
0009C34E                            ; FM3 Data
0009C34E                            PasswordEntry_FM3:
0009C34E E080                       	smpsPan             panLeft, $00
0009C350 EF02                       	smpsSetvoice        $02
0009C352                            
0009C352                            PasswordEntry_Jump02:
0009C352 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
0009C35E C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
0009C36A C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
0009C376 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
0009C382 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
0009C38E C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
0009C39A BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
0009C3A6 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
0009C3B2 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
0009C3BE BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C3CA BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C3D2 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
0009C3D5                            
0009C3D5                            ; FM4 Data
0009C3D5                            PasswordEntry_FM4:
0009C3D5 E040                       	smpsPan             panRight, $00
0009C3D7 EF02                       	smpsSetvoice        $02
0009C3D9                            
0009C3D9                            PasswordEntry_Jump01:
0009C3D9 C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
0009C3E5 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
0009C3F1 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
0009C3FD C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
0009C409 BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
0009C415 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
0009C421 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C42D BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
0009C439 BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
0009C445 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C451 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C459 F6FF 7E                    	smpsJump            PasswordEntry_Jump01
0009C45C                            
0009C45C                            ; FM5 Data
0009C45C                            PasswordEntry_FM5:
0009C45C EF00                       	smpsSetvoice        $00
0009C45E E1FB                       	smpsAlterNote       $FB
0009C460 800C                       	dc.b	nRst, $0C
0009C462 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
0009C465                            
0009C465                            ; PSG1 Data
0009C465                            PasswordEntry_PSG1:
0009C465 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C471 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
0009C47D C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C489 CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
0009C495 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
0009C4A1 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
0009C4AD C810 C408                  	dc.b	nB5, $10, nG5, $08
0009C4B1 F6FF B2                    	smpsJump            PasswordEntry_PSG1
0009C4B4                            
0009C4B4                            ; PSG2 Data
0009C4B4                            PasswordEntry_PSG2:
0009C4B4 E1FF                       	smpsAlterNote       $FF
0009C4B6 800C                       	dc.b	nRst, $0C
0009C4B8 F6FF AB                    	smpsJump            PasswordEntry_PSG1
0009C4BB                            
0009C4BB                            ; PSG3 Data
0009C4BB                            PasswordEntry_PSG3:
0009C4BB F502                       	smpsPSGvoice        fTone_02
0009C4BD F3E7                       	smpsPSGform         $E7
0009C4BF C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C4CB C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C4D7 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
0009C4DE F503                       	smpsPSGvoice        fTone_03
0009C4E0 C5                         	dc.b	nAb5
0009C4E1 F6FF D8                    	smpsJump            PasswordEntry_PSG3
0009C4E4                            
0009C4E4                            ; DAC Data
0009C4E4                            PasswordEntry_DAC:
0009C4E4 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C4F0 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C4F8 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
0009C4FD 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C509 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
0009C511                            
0009C511                            PasswordEntry_Loop00:
0009C511 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C51D 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C525 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
0009C52A 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
0009C536 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
0009C540 F6FF A2                    	smpsJump            PasswordEntry_DAC
0009C543                            
0009C543                            PasswordEntry_Voices:
0009C543                            ;	Voice $00
0009C543                            ;	$04
0009C543                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
0009C543                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
0009C543                            	smpsVcAlgorithm     $04
0009C543                            	smpsVcFeedback      $00
0009C543                            	smpsVcUnusedBits    $00
0009C543                            	smpsVcDetune        $00, $00, $00, $00
0009C543                            	smpsVcCoarseFreq    $00, $01, $01, $02
0009C543                            	smpsVcRateScale     $00, $00, $00, $00
0009C543                            	smpsVcAttackRate    $12, $1F, $10, $1F
0009C543                            	smpsVcAmpMod        $00, $00, $00, $00
0009C543                            	smpsVcDecayRate1    $04, $0B, $03, $09
0009C543                            	smpsVcDecayRate2    $05, $00, $00, $03
0009C543                            	smpsVcDecayLevel    $00, $02, $0F, $0E
0009C543                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C55C                            
0009C55C                            ;	Voice $01
0009C55C                            ;	$39
0009C55C                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
0009C55C                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
0009C55C                            	smpsVcAlgorithm     $01
0009C55C                            	smpsVcFeedback      $07
0009C55C                            	smpsVcUnusedBits    $00
0009C55C                            	smpsVcDetune        $00, $04, $06, $00
0009C55C                            	smpsVcCoarseFreq    $00, $00, $01, $03
0009C55C                            	smpsVcRateScale     $01, $01, $01, $00
0009C55C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C55C                            	smpsVcAmpMod        $00, $00, $00, $00
0009C55C                            	smpsVcDecayRate1    $09, $09, $11, $10
0009C55C                            	smpsVcDecayRate2    $00, $00, $00, $06
0009C55C                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
0009C55C                            	smpsVcReleaseRate   $08, $08, $08, $08
0009C575                            
0009C575                            ;	Voice $02
0009C575                            ;	$2C
0009C575                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
0009C575                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
0009C575                            	smpsVcAlgorithm     $04
0009C575                            	smpsVcFeedback      $05
0009C575                            	smpsVcUnusedBits    $00
0009C575                            	smpsVcDetune        $00, $02, $00, $04
0009C575                            	smpsVcCoarseFreq    $00, $03, $00, $01
0009C575                            	smpsVcRateScale     $00, $00, $00, $00
0009C575                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C575                            	smpsVcAmpMod        $00, $00, $00, $00
0009C575                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
0009C575                            	smpsVcDecayRate2    $05, $00, $05, $04
0009C575                            	smpsVcDecayLevel    $08, $08, $05, $04
0009C575                            	smpsVcReleaseRate   $06, $05, $06, $05
0009C58E                            
0009C58E                            
0009C58E                            		even	
0009C58E                            Music99:		include	"sound/music/Mus99 - Toxic Landfill.asm"
0009C58E                            ToxicLandfill_Header:
0009C58E                            	smpsHeaderStartSong 1
0009C590 0603                       	smpsHeaderChan      $06, $03
0009C592 0208                       	smpsHeaderTempo     $02, $08
0009C594                            
0009C598 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM1,	$00, $0A
0009C59C 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM2,	$00, $0A	
0009C5A0 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM3,	$0C, $0B
0009C5A4 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM4,	$0C, $0B
0009C5A8 0000 0012                  	smpsHeaderFM        ToxicLandfill_FM5,	$00, $12
0009C5BE                            
0009C5BE                            ; DAC Data
0009C5BE                            ToxicLandfill_DAC:
0009C5BE E0C0                       	smpsPan             panCenter, $00
0009C5C0 807F 7F22 8106 1803 0382+  	dc.b	nRst, $7F, $7F, $22, dKick, $06, $18, $03, $03, dSnare, $06, dKick
0009C5CC 8181 8281 0306 8281 0382+  	dc.b	dKick, dKick, dSnare, dKick, $03, $06, dSnare, dKick, $03, dSnare, dKick
0009C5D7                            
0009C5D7                            ToxicLandfill_Loop00:
0009C5D7 82                         	dc.b	dSnare
0009C5D8                            
0009C5D8                            ToxicLandfill_Loop01:
0009C5D8 82                         	dc.b	dSnare
0009C5D9                            
0009C5D9                            ToxicLandfill_Jump00:
0009C5D9 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
0009C5E5 0381 0603                  	dc.b	$03, dKick, $06, $03
0009C5E9 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop00
0009C5EE 8282 8206 8103 8206 8103+  	dc.b	dSnare, dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick
0009C5FA 0682 0381 8281 8281        	dc.b	$06, dSnare, $03, dKick, dSnare, dKick, dSnare, dKick
0009C602 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop01
0009C607                            
0009C607                            ToxicLandfill_Loop06:
0009C607 82                         	dc.b	dSnare
0009C608                            
0009C608                            ToxicLandfill_Loop02:
0009C608 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
0009C60C F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop02
0009C611                            
0009C611                            ToxicLandfill_Loop03:
0009C611 8281 81                    	dc.b	dSnare, dKick, dKick
0009C614 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop03
0009C619                            
0009C619                            ToxicLandfill_Loop04:
0009C619 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
0009C61D F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop04
0009C622 8182 81                    	dc.b	dKick, dSnare, dKick
0009C625                            
0009C625                            ToxicLandfill_Loop05:
0009C625 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
0009C62A F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop05
0009C62F 0303 03                    	dc.b	$03, $03, $03
0009C632 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop06
0009C637                            
0009C637                            ToxicLandfill_Loop08:
0009C637 03                         	dc.b	$03
0009C638                            
0009C638                            ToxicLandfill_Loop07:
0009C638 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
0009C641 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop07
0009C646 8182 0381 8282 82          	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare
0009C64D F701 02FF E6               	smpsLoop            $01, $02, ToxicLandfill_Loop08
0009C652                            
0009C652                            ToxicLandfill_Loop0D:
0009C652 82                         	dc.b	dSnare
0009C653                            
0009C653                            ToxicLandfill_Loop09:
0009C653 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
0009C657 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop09
0009C65C                            
0009C65C                            ToxicLandfill_Loop0A:
0009C65C 8281 81                    	dc.b	dSnare, dKick, dKick
0009C65F F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop0A
0009C664                            
0009C664                            ToxicLandfill_Loop0B:
0009C664 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
0009C668 F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop0B
0009C66D 8182 81                    	dc.b	dKick, dSnare, dKick
0009C670                            
0009C670                            ToxicLandfill_Loop0C:
0009C670 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
0009C675 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop0C
0009C67A 0303 03                    	dc.b	$03, $03, $03
0009C67D F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop0D
0009C682                            
0009C682                            ToxicLandfill_Loop0E:
0009C682 03                         	dc.b	$03
0009C683                            
0009C683                            ToxicLandfill_Loop0F:
0009C683 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
0009C68F 0381 0603 82               	dc.b	$03, dKick, $06, $03, dSnare
0009C694 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop0E
0009C699 8282 0681 0382 0681 0382+  	dc.b	dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick, $06
0009C6A5 8203 8182 8182 8182        	dc.b	dSnare, $03, dKick, dSnare, dKick, dSnare, dKick, dSnare
0009C6AD F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop0F
0009C6B2                            
0009C6B2                            ToxicLandfill_Loop10:
0009C6B2 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
0009C6BB F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop10
0009C6C0 8182 0381 8282 8282        	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare, dSnare
0009C6C8 F701 04FF E6               	smpsLoop            $01, $04, ToxicLandfill_Loop10
0009C6CD F6FF 0A                    	smpsJump            ToxicLandfill_Jump00
0009C6D0                            
0009C6D0                            ; FM1 Data
0009C6D0                            ToxicLandfill_FM1:
0009C6D0 E0C0                       	smpsPan             panCenter, $00
0009C6D2 EF00                       	smpsSetvoice        $00
0009C6D4 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
0009C6E0 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
0009C6E8                            
0009C6E8                            ToxicLandfill_Loop44:
0009C6E8 AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
0009C6F4 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
0009C700 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
0009C70C A706 06AA                  	dc.b	nD3, $06, $06, nF3
0009C710 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop44
0009C715                            
0009C715                            ToxicLandfill_Loop46:
0009C715 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
0009C721 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
0009C72D 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
0009C739 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
0009C741                            
0009C741                            ToxicLandfill_Loop45:
0009C741 AA02 A901                  	dc.b	nF3, $02, nE3, $01
0009C745 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop45
0009C74A AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
0009C751 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop46
0009C756                            
0009C756                            ToxicLandfill_Loop47:
0009C756 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
0009C762 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop47
0009C767                            
0009C767                            ToxicLandfill_Loop48:
0009C767 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
0009C772 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop48
0009C777 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop47
0009C77C                            
0009C77C                            ToxicLandfill_Loop4A:
0009C77C B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
0009C788 B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
0009C794 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
0009C7A0 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
0009C7A8                            
0009C7A8                            ToxicLandfill_Loop49:
0009C7A8 B602 B501                  	dc.b	nF4, $02, nE4, $01
0009C7AC F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop49
0009C7B1 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
0009C7B8 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop4A
0009C7BD                            
0009C7BD                            ToxicLandfill_Loop4B:
0009C7BD B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
0009C7C9 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
0009C7D5 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
0009C7E1 B306 06B6                  	dc.b	nD4, $06, $06, nF4
0009C7E5 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop4B
0009C7EA                            
0009C7EA                            ToxicLandfill_Loop4C:
0009C7EA BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
0009C7F5 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4C
0009C7FA                            
0009C7FA                            ToxicLandfill_Loop4D:
0009C7FA BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
0009C805 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4D
0009C80A F701 04FF DC               	smpsLoop            $01, $04, ToxicLandfill_Loop4C
0009C80F F6FE D7                    	smpsJump            ToxicLandfill_Loop44
0009C812                            
0009C812                            ; FM2 Data
0009C812                            ToxicLandfill_FM2:
0009C812 E0C0                       	smpsPan             panCenter, $00
0009C814 EF00                       	smpsSetvoice        $00
0009C816 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
0009C822 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
0009C82A                            
0009C82A                            ToxicLandfill_Loop3A:
0009C82A B109 0909 AF03 B106 06B4+  	dc.b	nC4, $09, $09, $09, nBb3, $03, nC4, $06, $06, nEb4, nC4, $09
0009C836 0909 AF03 B106 06B6 B109+  	dc.b	$09, $09, nBb3, $03, nC4, $06, $06, nF4, nC4, $09, $09, $09
0009C842 AF03 B106 06B4 AC09 0909+  	dc.b	nBb3, $03, nC4, $06, $06, nEb4, nG3, $09, $09, $09, nF3, $03
0009C84E AC06 06AF                  	dc.b	nG3, $06, $06, nBb3
0009C852 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop3A
0009C857                            
0009C857                            ToxicLandfill_Loop3C:
0009C857 B112 AF36 AE02 AD01 AC02+  	dc.b	nC4, $12, nBb3, $36, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
0009C863 AA02 A901 A802 A701 A602+  	dc.b	nF3, $02, nE3, $01, nEb3, $02, nD3, $01, nCs3, $02, nC3, $01
0009C86F A402 A301 A202 A101 A002+  	dc.b	nB2, $02, nBb2, $01, nA2, $02, nAb2, $01, nG2, $02, nFs2, $01
0009C87B B112 AF2A 03AE AFAE        	dc.b	nC4, $12, nBb3, $2A, $03, nA3, nBb3, nA3
0009C883                            
0009C883                            ToxicLandfill_Loop3B:
0009C883 AF02 AE01                  	dc.b	nBb3, $02, nA3, $01
0009C887 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3B
0009C88C AF02 AAA6 AFAA A6          	dc.b	nBb3, $02, nF3, nCs3, nBb3, nF3, nCs3
0009C893 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop3C
0009C898                            
0009C898                            ToxicLandfill_Loop3D:
0009C898 AC06 A7AA AB03 AC09 A706+  	dc.b	nG3, $06, nD3, nF3, nFs3, $03, nG3, $09, nD3, $06, nF3, nFs3
0009C8A4 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop3D
0009C8A9                            
0009C8A9                            ToxicLandfill_Loop3E:
0009C8A9 ACA5 A7AA 03AC 09A5 06A7+  	dc.b	nG3, nC3, nD3, nF3, $03, nG3, $09, nC3, $06, nD3, nF3
0009C8B4 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop3E
0009C8B9 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop3D
0009C8BE                            
0009C8BE                            ToxicLandfill_Loop40:
0009C8BE BD12 BB36 BA02 B901 B802+  	dc.b	nC5, $12, nBb4, $36, nA4, $02, nAb4, $01, nG4, $02, nFs4, $01
0009C8CA B602 B501 B402 B301 B202+  	dc.b	nF4, $02, nE4, $01, nEb4, $02, nD4, $01, nCs4, $02, nC4, $01
0009C8D6 B002 AF01 AE02 AD01 AC02+  	dc.b	nB3, $02, nBb3, $01, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
0009C8E2 BD12 BB2A 03BA BBBA        	dc.b	nC5, $12, nBb4, $2A, $03, nA4, nBb4, nA4
0009C8EA                            
0009C8EA                            ToxicLandfill_Loop3F:
0009C8EA BB02 BA01                  	dc.b	nBb4, $02, nA4, $01
0009C8EE F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3F
0009C8F3 BB02 B6B2 BBB6 B2          	dc.b	nBb4, $02, nF4, nCs4, nBb4, nF4, nCs4
0009C8FA F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop40
0009C8FF                            
0009C8FF                            ToxicLandfill_Loop41:
0009C8FF BD09 0909 BB03 BD06 06C0+  	dc.b	nC5, $09, $09, $09, nBb4, $03, nC5, $06, $06, nEb5, nC5, $09
0009C90B 0909 BB03 BD06 06C2 BD09+  	dc.b	$09, $09, nBb4, $03, nC5, $06, $06, nF5, nC5, $09, $09, $09
0009C917 BB03 BD06 06C0 B809 0909+  	dc.b	nBb4, $03, nC5, $06, $06, nEb5, nG4, $09, $09, $09, nF4, $03
0009C923 B806 06BB                  	dc.b	nG4, $06, $06, nBb4
0009C927 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop41
0009C92C B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4, nG4
0009C938 B3B6 B703 8009 B306 B6B7+  	dc.b	nD4, nF4, nFs4, $03, nRst, $09, nD4, $06, nF4, nFs4, nG4, nC4
0009C944 B3B6 03B8 09B1 06B3 B6B8+  	dc.b	nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4, nC4, nD4
0009C950 B603 8009 B106 B3B6 B8B3+  	dc.b	nF4, $03, nRst, $09, nC4, $06, nD4, nF4, nG4, nD4, nF4, nFs4
0009C95C 03B8 09B3 06B6 B7B8 B3B6+  	dc.b	$03, nG4, $09, nD4, $06, nF4, nFs4, nG4, nD4, nF4, nFs4, $03
0009C968 8009 B306 B6B7             	dc.b	nRst, $09, nD4, $06, nF4, nFs4
0009C96E                            
0009C96E                            ToxicLandfill_Loop42:
0009C96E B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4
0009C979 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop42
0009C97E                            
0009C97E                            ToxicLandfill_Loop43:
0009C97E B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4
0009C989 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop43
0009C98E F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop42
0009C993 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4
0009C99F B1B3 B603 8009 B106 B3B6   	dc.b	nC4, nD4, nF4, $03, nRst, $09, nC4, $06, nD4, nF4
0009C9A9 F6FE 7F                    	smpsJump            ToxicLandfill_Loop3A
0009C9AC                            
0009C9AC                            ; FM3 Data
0009C9AC                            ToxicLandfill_FM3:
0009C9AC E0C0                       	smpsPan             panCenter, $00
0009C9AE EF01                       	smpsSetvoice        $01
0009C9B0                            
0009C9B0                            ToxicLandfill_Loop2D:
0009C9B0 9903 A580 9E80 9F80 A080+  	dc.b	nC2, $03, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst
0009C9BC 9E80 9C9E 9C99 9C80 9E80+  	dc.b	nF2, nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst
0009C9C8 9E80 9F9E 9C9E 9C97 98     	dc.b	nF2, nRst, nFs2, nF2, nEb2, nF2, nEb2, nBb1, nB1
0009C9D1 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop2D
0009C9D6 99A5 809E 809F 80A0 809F+  	dc.b	nC2, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst, nF2
0009C9E2 809C 9E9C 999C 809E 809C+  	dc.b	nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst, nF2
0009C9EE 809F 9E9C 9D02 9E01 9F02+  	dc.b	nRst, nFs2, nF2, nEb2, nE2, $02, nF2, $01, nFs2, $02, nG2, $01
0009C9FA A102 A201 A302 A401        	dc.b	nAb2, $02, nA2, $01, nBb2, $02, nB2, $01
0009CA02                            
0009CA02                            ToxicLandfill_Loop2E:
0009CA02 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009CA0E F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2E
0009CA13 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
0009CA1F 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
0009CA25 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2E
0009CA2A                            
0009CA2A                            ToxicLandfill_Loop31:
0009CA2A A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
0009CA2F                            
0009CA2F                            ToxicLandfill_Loop2F:
0009CA2F 9999 A3                    	dc.b	nC2, nC2, nBb2
0009CA32 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop2F
0009CA37 99A3                       	dc.b	nC2, nBb2
0009CA39                            
0009CA39                            ToxicLandfill_Loop30:
0009CA39 99A3 99                    	dc.b	nC2, nBb2, nC2
0009CA3C F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop30
0009CA41 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
0009CA46 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop31
0009CA4B                            
0009CA4B                            ToxicLandfill_Loop32:
0009CA4B A506 06A0 A003 A309 A006+  	dc.b	nC3, $06, $06, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
0009CA57 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop32
0009CA5C                            
0009CA5C                            ToxicLandfill_Loop33:
0009CA5C A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
0009CA66 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop33
0009CA6B F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop32
0009CA70                            
0009CA70                            ToxicLandfill_Loop36:
0009CA70 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
0009CA75                            
0009CA75                            ToxicLandfill_Loop34:
0009CA75 9999 A3                    	dc.b	nC2, nC2, nBb2
0009CA78 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop34
0009CA7D 99A3                       	dc.b	nC2, nBb2
0009CA7F                            
0009CA7F                            ToxicLandfill_Loop35:
0009CA7F 99A3 99                    	dc.b	nC2, nBb2, nC2
0009CA82 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop35
0009CA87 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
0009CA8C F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop36
0009CA91                            
0009CA91                            ToxicLandfill_Loop37:
0009CA91 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009CA9D F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop37
0009CAA2 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
0009CAAE 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
0009CAB4 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop37
0009CAB9                            
0009CAB9                            ToxicLandfill_Loop38:
0009CAB9 A5A5 A0A0 03A3 09A0 06A3+  	dc.b	nC3, nC3, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
0009CAC4 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop38
0009CAC9                            
0009CAC9                            ToxicLandfill_Loop39:
0009CAC9 A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
0009CAD3 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop39
0009CAD8 F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop38
0009CADD F6FF 23                    	smpsJump            ToxicLandfill_Loop2E
0009CAE0                            
0009CAE0                            ; FM4 Data
0009CAE0                            ToxicLandfill_FM4:
0009CAE0 E0C0                       	smpsPan             panCenter, $00
0009CAE2 EF01                       	smpsSetvoice        $01
0009CAE4                            
0009CAE4                            ToxicLandfill_Loop20:
0009CAE4 8D03 9980 9280 9380 9480+  	dc.b	nC1, $03, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst
0009CAF0 9280 9092 908D 9080 9280+  	dc.b	nF1, nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst
0009CAFC 9280 9392 9092 908B 8C     	dc.b	nF1, nRst, nFs1, nF1, nEb1, nF1, nEb1, nBb0, nB0
0009CB05 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop20
0009CB0A 8D99 8092 8093 8094 8093+  	dc.b	nC1, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst, nF1
0009CB16 8090 9290 8D90 8092 8090+  	dc.b	nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst, nF1
0009CB22 8093 9290 9293 0294 0195+  	dc.b	nRst, nFs1, nF1, nEb1, nF1, nFs1, $02, nG1, $01, nAb1, $02, nA1
0009CB2E 0197 0298 01               	dc.b	$01, nBb1, $02, nB1, $01
0009CB33                            
0009CB33                            ToxicLandfill_Loop21:
0009CB33 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
0009CB3F F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop21
0009CB44 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
0009CB50 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
0009CB56 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop21
0009CB5B                            
0009CB5B                            ToxicLandfill_Loop24:
0009CB5B 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
0009CB60                            
0009CB60                            ToxicLandfill_Loop22:
0009CB60 8D8D 97                    	dc.b	nC1, nC1, nBb1
0009CB63 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop22
0009CB68 8D97                       	dc.b	nC1, nBb1
0009CB6A                            
0009CB6A                            ToxicLandfill_Loop23:
0009CB6A 8D97 8D                    	dc.b	nC1, nBb1, nC1
0009CB6D F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop23
0009CB72 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
0009CB77 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop24
0009CB7C                            
0009CB7C                            ToxicLandfill_Loop25:
0009CB7C 9906 0694 9403 9709 9406+  	dc.b	nC2, $06, $06, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
0009CB88 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop25
0009CB8D                            
0009CB8D                            ToxicLandfill_Loop26:
0009CB8D 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
0009CB97 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop26
0009CB9C F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop25
0009CBA1                            
0009CBA1                            ToxicLandfill_Loop29:
0009CBA1 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
0009CBA6                            
0009CBA6                            ToxicLandfill_Loop27:
0009CBA6 8D8D 97                    	dc.b	nC1, nC1, nBb1
0009CBA9 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop27
0009CBAE 8D97                       	dc.b	nC1, nBb1
0009CBB0                            
0009CBB0                            ToxicLandfill_Loop28:
0009CBB0 8D97 8D                    	dc.b	nC1, nBb1, nC1
0009CBB3 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop28
0009CBB8 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
0009CBBD F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop29
0009CBC2                            
0009CBC2                            ToxicLandfill_Loop2A:
0009CBC2 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
0009CBCE F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2A
0009CBD3 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
0009CBDF 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
0009CBE5 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2A
0009CBEA                            
0009CBEA                            ToxicLandfill_Loop2B:
0009CBEA 9999 9494 0397 0994 0697+  	dc.b	nC2, nC2, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
0009CBF5 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop2B
0009CBFA                            
0009CBFA                            ToxicLandfill_Loop2C:
0009CBFA 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
0009CC04 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop2C
0009CC09 F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop2B
0009CC0E F6FF 23                    	smpsJump            ToxicLandfill_Loop21
0009CC11                            
0009CC11                            ; FM5 Data
0009CC11                            ToxicLandfill_FM5:
0009CC11 E0C0                       	smpsPan             panCenter, $00
0009CC13 E6FC                       	smpsAlterVol			-$04		
0009CC15 E102                       	smpsDetune			$02	
0009CC17 EF00                       	smpsSetvoice        $00
0009CC19 807F 7F78 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $78, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
0009CC25 AD02 AE01 AF               	dc.b	nAb3, $02, nA3, $01, nBb3
0009CC2A                            
0009CC2A                            ToxicLandfill_Jump01:
0009CC2A E701 B0                    	dc.b	smpsNoAttack, $01, nB3
0009CC2D                            
0009CC2D                            ToxicLandfill_Loop11:
0009CC2D AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
0009CC39 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
0009CC45 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
0009CC51 A706 06AA                  	dc.b	nD3, $06, $06, nF3
0009CC55 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop11
0009CC5A                            
0009CC5A                            ToxicLandfill_Loop13:
0009CC5A AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
0009CC66 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
0009CC72 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
0009CC7E AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
0009CC86                            
0009CC86                            ToxicLandfill_Loop12:
0009CC86 AA02 A901                  	dc.b	nF3, $02, nE3, $01
0009CC8A F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop12
0009CC8F AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
0009CC96 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop13
0009CC9B                            
0009CC9B                            ToxicLandfill_Loop14:
0009CC9B B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
0009CCA7 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop14
0009CCAC                            
0009CCAC                            ToxicLandfill_Loop15:
0009CCAC B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
0009CCB7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop15
0009CCBC F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop14
0009CCC1                            
0009CCC1                            ToxicLandfill_Loop17:
0009CCC1 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
0009CCCD B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
0009CCD9 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
0009CCE5 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
0009CCED                            
0009CCED                            ToxicLandfill_Loop16:
0009CCED B602 B501                  	dc.b	nF4, $02, nE4, $01
0009CCF1 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop16
0009CCF6 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
0009CCFD F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop17
0009CD02                            
0009CD02                            ToxicLandfill_Loop18:
0009CD02 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
0009CD0E 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
0009CD1A B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
0009CD26 B306 06B6                  	dc.b	nD4, $06, $06, nF4
0009CD2A F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop18
0009CD2F                            
0009CD2F                            ToxicLandfill_Loop19:
0009CD2F BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
0009CD3A F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop19
0009CD3F                            
0009CD3F                            ToxicLandfill_Loop1A:
0009CD3F BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
0009CD4A F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1A
0009CD4F                            
0009CD4F                            ToxicLandfill_Loop1B:
0009CD4F BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
0009CD5A F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1B
0009CD5F BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, nC5
0009CD6B B6B8 BB03 BD09 B606 B8BB+  	dc.b	nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, $02, nRst
0009CD77 EF00                       	smpsSetvoice        $00
0009CD79 E1FE                       	smpsDetune			-$02
0009CD7B E604                       	smpsAlterVol		$04
0009CD7D                            	
0009CD7D                            ToxicLandfill_Loop1C:
0009CD7D B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3	
0009CD89 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop1C
0009CD8E                            
0009CD8E                            ToxicLandfill_Loop1D:
0009CD8E B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
0009CD99 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1D
0009CD9E                            
0009CD9E                            ToxicLandfill_Loop1E:
0009CD9E BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
0009CDA9 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1E
0009CDAE                            
0009CDAE                            ToxicLandfill_Loop1F:
0009CDAE BDC2 B8BB 03BD 09C2 06B8+  	dc.b	nC5, nF5, nG4, nBb4, $03, nC5, $09, nF5, $06, nG4, nBb4
0009CDB9 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1F
0009CDBE EF01                       	smpsSetvoice        $01
0009CDC0 E102                       	smpsDetune			$02
0009CDC2 E6FC                       	smpsAlterVol		-$04	
0009CDC4 F6FE 64                    	smpsJump            ToxicLandfill_Jump01
0009CDC7                            
0009CDC7                            ; PSG1 Data
0009CDC7                            ToxicLandfill_PSG1:
0009CDC7 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
0009CDCC                            
0009CDCC                            ToxicLandfill_Jump04:
0009CDCC 80                         	dc.b	nRst
0009CDCD                            
0009CDCD                            ToxicLandfill_Loop57:
0009CDCD 60                         	dc.b	$60
0009CDCE F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop57
0009CDD3                            
0009CDD3                            ToxicLandfill_Loop58:
0009CDD3 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009CDDF F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop58
0009CDE4                            
0009CDE4                            ToxicLandfill_Loop59:
0009CDE4 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
0009CDEF F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop59
0009CDF4                            
0009CDF4                            ToxicLandfill_Loop5A:
0009CDF4 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009CDFF F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5A
0009CE04 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
0009CE10 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $04, nRst
0009CE1C                            
0009CE1C                            ToxicLandfill_Loop5B:
0009CE1C 6E                         	dc.b	$6E
0009CE1D F700 07FF FB               	smpsLoop            $00, $07, ToxicLandfill_Loop5B
0009CE22                            
0009CE22                            ToxicLandfill_Loop5C:
0009CE22 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009CE2E F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop5C
0009CE33                            
0009CE33                            ToxicLandfill_Loop5D:
0009CE33 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
0009CE3E F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5D
0009CE43 F701 03FF DB               	smpsLoop            $01, $03, ToxicLandfill_Loop5C
0009CE48                            
0009CE48                            ToxicLandfill_Loop5E:
0009CE48 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009CE53 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5E
0009CE58 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
0009CE64 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $05, nRst
0009CE70 01                         	dc.b	$01
0009CE71 F6FF 59                    	smpsJump            ToxicLandfill_Jump04
0009CE74                            
0009CE74                            ; PSG2 Data
0009CE74                            ToxicLandfill_PSG2:
0009CE74 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
0009CE79                            
0009CE79                            ToxicLandfill_Jump03:
0009CE79 80                         	dc.b	nRst
0009CE7A                            
0009CE7A                            ToxicLandfill_Loop50:
0009CE7A 60                         	dc.b	$60
0009CE7B F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop50
0009CE80 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CE8C A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
0009CE98 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
0009CEA4 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
0009CEB0 9E                         	dc.b	nF2
0009CEB1                            
0009CEB1                            ToxicLandfill_Loop51:
0009CEB1 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CEBC F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop51
0009CEC1 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
0009CECD 999B 9E03 A008 8001 9906+  	dc.b	nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2, nF2
0009CED9 0580                       	dc.b	$05, nRst
0009CEDB                            
0009CEDB                            ToxicLandfill_Loop52:
0009CEDB 60                         	dc.b	$60
0009CEDC F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop52
0009CEE1 01                         	dc.b	$01
0009CEE2                            
0009CEE2                            ToxicLandfill_Loop53:
0009CEE2 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CEEE A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
0009CEFA 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
0009CF06 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
0009CF12 9E                         	dc.b	nF2
0009CF13 F700 02FF CB               	smpsLoop            $00, $02, ToxicLandfill_Loop53
0009CF18                            
0009CF18                            ToxicLandfill_Loop54:
0009CF18 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CF23 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop54
0009CF28                            
0009CF28                            ToxicLandfill_Loop55:
0009CF28 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
0009CF33 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop55
0009CF38                            
0009CF38                            ToxicLandfill_Loop56:
0009CF38 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CF43 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop56
0009CF48 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
0009CF54 999B 9E03 A009 9906 9B9E+  	dc.b	nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, $05, nRst
0009CF60 01                         	dc.b	$01
0009CF61 F6FF 16                    	smpsJump            ToxicLandfill_Jump03
0009CF64                            
0009CF64                            ; PSG3 Data
0009CF64                            ToxicLandfill_PSG3:
0009CF64 F3E7                       	smpsPSGform         $E7
0009CF66 807F 41C6 0C0C 0C0C        	dc.b	nRst, $7F, $41, nMaxPSG, $0C, $0C, $0C, $0C
0009CF6E                            
0009CF6E                            ToxicLandfill_Loop4E:
0009CF6E 0C0C 0603 03               	dc.b	$0C, $0C, $06, $03, $03
0009CF73 F501                       	smpsPSGvoice        fTone_01
0009CF75 0C                         	dc.b	$0C
0009CF76 F502                       	smpsPSGvoice        fTone_02
0009CF78 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop4E
0009CF7D 0603 03                    	dc.b	$06, $03, $03
0009CF80 F501                       	smpsPSGvoice        fTone_01
0009CF82 06                         	dc.b	$06
0009CF83 F502                       	smpsPSGvoice        fTone_02
0009CF85 03                         	dc.b	$03
0009CF86 F501                       	smpsPSGvoice        fTone_01
0009CF88 0906 0606                  	dc.b	$09, $06, $06, $06
0009CF8C                            
0009CF8C                            ToxicLandfill_Jump02:
0009CF8C E77F E77F E77F E715        	dc.b	smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $15
0009CF94 F502                       	smpsPSGvoice        fTone_02
0009CF96 C618 1818                  	dc.b	nMaxPSG, $18, $18, $18
0009CF9A F501                       	smpsPSGvoice        fTone_01
0009CF9C 18                         	dc.b	$18
0009CF9D F502                       	smpsPSGvoice        fTone_02
0009CF9F 1806                       	dc.b	$18, $06
0009CFA1 F501                       	smpsPSGvoice        fTone_01
0009CFA3 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
0009CFA9 F502                       	smpsPSGvoice        fTone_02
0009CFAB 1818 18                    	dc.b	$18, $18, $18
0009CFAE F501                       	smpsPSGvoice        fTone_01
0009CFB0 18                         	dc.b	$18
0009CFB1 F502                       	smpsPSGvoice        fTone_02
0009CFB3 1806                       	dc.b	$18, $06
0009CFB5 F501                       	smpsPSGvoice        fTone_01
0009CFB7 0909 0909 067F E77F E77F+  	dc.b	$09, $09, $09, $09, $06, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $1B
0009CFC3 F502                       	smpsPSGvoice        fTone_02
0009CFC5 1818 18                    	dc.b	$18, $18, $18
0009CFC8 F501                       	smpsPSGvoice        fTone_01
0009CFCA 18                         	dc.b	$18
0009CFCB F502                       	smpsPSGvoice        fTone_02
0009CFCD 1806                       	dc.b	$18, $06
0009CFCF F501                       	smpsPSGvoice        fTone_01
0009CFD1 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
0009CFD7 F502                       	smpsPSGvoice        fTone_02
0009CFD9 1818 18                    	dc.b	$18, $18, $18
0009CFDC F501                       	smpsPSGvoice        fTone_01
0009CFDE 18                         	dc.b	$18
0009CFDF F502                       	smpsPSGvoice        fTone_02
0009CFE1 1806                       	dc.b	$18, $06
0009CFE3 F501                       	smpsPSGvoice        fTone_01
0009CFE5 0909 0909 06               	dc.b	$09, $09, $09, $09, $06
0009CFEA                            
0009CFEA                            ToxicLandfill_Loop4F:
0009CFEA 59E7                       	dc.b	$59, smpsNoAttack
0009CFEC F700 0CFF FA               	smpsLoop            $00, $0C, ToxicLandfill_Loop4F
0009CFF1 5A                         	dc.b	$5A
0009CFF2 F6FF 98                    	smpsJump            ToxicLandfill_Jump02
0009CFF5                            
0009CFF5                            
0009CFF5                            ToxicLandfill_Voices:
0009CFF5                            ;	Voice $00
0009CFF5                            ;	$29
0009CFF5                            ;	$33, $02, $02, $01, 	$1F, $1F, $1F, $19, 	$00, $02, $00, $0B
0009CFF5                            ;	$03, $02, $00, $03, 	$0A, $1A, $0A, $1A, 	$1A, $1D, $20, $05
0009CFF5                            	smpsVcAlgorithm     $01
0009CFF5                            	smpsVcFeedback      $05
0009CFF5                            	smpsVcUnusedBits    $00
0009CFF5                            	smpsVcDetune        $00, $00, $00, $03
0009CFF5                            	smpsVcCoarseFreq    $01, $02, $02, $03
0009CFF5                            	smpsVcRateScale     $00, $00, $00, $00
0009CFF5                            	smpsVcAttackRate    $19, $1F, $1F, $1F
0009CFF5                            	smpsVcAmpMod        $00, $00, $00, $00
0009CFF5                            	smpsVcDecayRate1    $0B, $00, $02, $00
0009CFF5                            	smpsVcDecayRate2    $03, $00, $02, $03
0009CFF5                            	smpsVcDecayLevel    $01, $00, $01, $00
0009CFF5                            	smpsVcReleaseRate   $0A, $0A, $0A, $0A
0009D00E                            	
0009D00E                            ;	Voice $01
0009D00E                            ;	$18
0009D00E                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
0009D00E                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $00
0009D00E                            	smpsVcAlgorithm     $00
0009D00E                            	smpsVcFeedback      $03
0009D00E                            	smpsVcUnusedBits    $00
0009D00E                            	smpsVcDetune        $03, $03, $03, $03
0009D00E                            	smpsVcCoarseFreq    $01, $00, $00, $07
0009D00E                            	smpsVcRateScale     $02, $00, $03, $02
0009D00E                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
0009D00E                            	smpsVcAmpMod        $00, $00, $00, $00
0009D00E                            	smpsVcDecayRate1    $01, $04, $06, $0D
0009D00E                            	smpsVcDecayRate2    $05, $03, $0A, $08
0009D00E                            	smpsVcDecayLevel    $02, $03, $0B, $0B
0009D00E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D027                            
0009D027                            ;	Voice $02
0009D027                            ;	$2C
0009D027                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
0009D027                            ;	$00, $00, $00, $00, 	$00, $16, $00, $16, 	$16, $00, $17, $00
0009D027                            	smpsVcAlgorithm     $04
0009D027                            	smpsVcFeedback      $05
0009D027                            	smpsVcUnusedBits    $00
0009D027                            	smpsVcDetune        $03, $03, $07, $07
0009D027                            	smpsVcCoarseFreq    $04, $04, $08, $02
0009D027                            	smpsVcRateScale     $00, $00, $00, $00
0009D027                            	smpsVcAttackRate    $12, $1F, $12, $1F
0009D027                            	smpsVcAmpMod        $00, $00, $00, $00
0009D027                            	smpsVcDecayRate1    $0A, $00, $0A, $00
0009D027                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D027                            	smpsVcDecayLevel    $01, $00, $01, $00
0009D027                            	smpsVcReleaseRate   $06, $00, $06, $00
0009D040                            		even			
0009D040                            ; ---------------------------------------------------------------------------
0009D040                            ; Sound	effect pointers
0009D040                            ; ---------------------------------------------------------------------------
0009D040                            SoundIndex:
0009D040 0000 0000                  ptr_sndA0:	dc.l SoundA0
0009D044 0000 0000                  ptr_sndA1:	dc.l SoundA1
0009D048 0000 0000                  ptr_sndA2:	dc.l SoundA2
0009D04C 0000 0000                  ptr_sndA3:	dc.l SoundA3
0009D050 0000 0000                  ptr_sndA4:	dc.l SoundA4
0009D054 0000 0000                  ptr_sndA5:	dc.l SoundA5
0009D058 0000 0000                  ptr_sndA6:	dc.l SoundA6
0009D05C 0000 0000                  ptr_sndA7:	dc.l SoundA7
0009D060 0000 0000                  ptr_sndA8:	dc.l SoundA8
0009D064 0000 0000                  ptr_sndA9:	dc.l SoundA9
0009D068 0000 0000                  ptr_sndAA:	dc.l SoundAA
0009D06C 0000 0000                  ptr_FireShield:	dc.l SoundAB
0009D070 0000 0000                  ptr_sndAC:	dc.l SoundAC
0009D074 0000 0000                  ptr_sndAD:	dc.l SoundAD
0009D078 0000 0000                  ptr_sndAE:	dc.l SoundAE
0009D07C 0000 0000                  ptr_sndAF:	dc.l SoundAF
0009D080 0000 0000                  ptr_sndB0:	dc.l SoundB0
0009D084 0000 0000                  ptr_sndB1:	dc.l SoundB1
0009D088 0000 0000                  ptr_sndB2:	dc.l SoundB2
0009D08C 0000 0000                  ptr_sndB3:	dc.l SoundB3
0009D090 0000 0000                  ptr_sndB4:	dc.l SoundB4
0009D094 0000 0000                  ptr_sndB5:	dc.l SoundB5
0009D098 0000 0000                  ptr_sndB6:	dc.l SoundB6
0009D09C 0000 0000                  ptr_sndB7:	dc.l SoundB7
0009D0A0 0000 0000                  ptr_sndB8:	dc.l SoundB8
0009D0A4 0000 0000                  ptr_sndB9:	dc.l SoundB9
0009D0A8 0000 0000                  ptr_sndBA:	dc.l SoundBA
0009D0AC 0000 0000                  ptr_sndBB:	dc.l SoundBB
0009D0B0 0000 0000                  ptr_sndBC:	dc.l SoundBC
0009D0B4 0000 0000                  ptr_sndBD:	dc.l SoundBD
0009D0B8 0000 0000                  ptr_sndBE:	dc.l SoundBE
0009D0BC 0000 0000                  ptr_sndBF:	dc.l SoundBF
0009D0C0 0000 0000                  ptr_sndC0:	dc.l SoundC0
0009D0C4 0000 0000                  ptr_sndC1:	dc.l SoundC1
0009D0C8 0000 0000                  ptr_sndC2:	dc.l SoundC2
0009D0CC 0000 0000                  ptr_sndC3:	dc.l SoundC3
0009D0D0 0000 0000                  ptr_sndC4:	dc.l SoundC4
0009D0D4 0000 0000                  ptr_sndC5:	dc.l SoundC5
0009D0D8 0000 0000                  ptr_sndC6:	dc.l SoundC6
0009D0DC 0000 0000                  ptr_sndC7:	dc.l SoundC7
0009D0E0 0000 0000                  ptr_sndC8:	dc.l SoundC8
0009D0E4 0000 0000                  ptr_sndC9:	dc.l SoundC9
0009D0E8 0000 0000                  ptr_sndCA:	dc.l SoundCA
0009D0EC 0000 0000                  ptr_sndCB:	dc.l SoundCB
0009D0F0 0000 0000                  ptr_sndCC:	dc.l SoundCC
0009D0F4 0000 0000                  ptr_sndCD:	dc.l SoundCD
0009D0F8 0000 0000                  ptr_sndCE:	dc.l SoundCE
0009D0FC 0000 0000                  ptr_sndCF:	dc.l SoundCF
0009D100                            ptr_sndend
0009D100                            ; ---------------------------------------------------------------------------
0009D100                            ; Special sound effect pointers
0009D100                            ; ---------------------------------------------------------------------------
0009D100                            SpecSoundIndex:
0009D100 0000 0000                  ptr_sndD0:	dc.l SoundD0
0009D104 0000 0000                  ptr_sndD1:	dc.l SoundD1
0009D108 0000 0000                  ptr_sndD2:	dc.l SoundD2
0009D10C 0000 0000                  ptr_sndD3:	dc.l SoundD3
0009D110 0000 0000                  ptr_sndD4:	dc.l SoundD4
0009D114 0000 0000                  ptr_sndD5:	dc.l SoundD5
0009D118                            ptr_specend
0009D118                            SoundA0:	include	"sound/sfx/Jump.asm"
0009D118                            SndA0_Jump_Header:
0009D118                            	smpsHeaderStartSong 1
0009D11A 01                         	smpsHeaderTempoSFX  $01
0009D11B 01                         	smpsHeaderChanSFX   $01
0009D11C                            
0009D122                            
0009D122                            ; PSG2 Data
0009D122                            SndA0_Jump_PSG2:
0009D122 F500                       	smpsPSGvoice        $00
0009D124 9E05                       	dc.b	nF2, $05
0009D12B A315                       	dc.b	nBb2, $15
0009D12D F2                         	smpsStop
0009D12E                            
0009D12E                            ; Song seems to not use any FM voices
0009D12E                            SndA0_Jump_Voices:
0009D12E                            SndA0_Jump_Voices:
0009D12E                            		even
0009D12E                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
0009D158                            		even
0009D158                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
0009D158                            SndDF_Header:
0009D158                            	smpsHeaderStartSong 3
0009D15A 01                         	smpsHeaderTempoSFX  $01
0009D15B 01                         	smpsHeaderChanSFX   $01
0009D15C                            
0009D162                            
0009D162                            ; FM5 Data
0009D162                            SndDF_FM5:
0009D162 EF00                       	smpsSetvoice        $00
0009D164                            
0009D164                            SndDF_Loop00:
0009D164 F800 00                    	smpsCall            SndDF_Call00
0009D167 E905                       	smpsAlterPitch $05
0009D169 E608                       	smpsFMAlterVol      $08
0009D16B F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
0009D170 E9EC                       	smpsAlterPitch $EC
0009D172 E6E0                       	smpsFMAlterVol      $E0
0009D174 F2                         	smpsStop
0009D175                            
0009D175                            SndDF_Call00:
0009D175 9902                       	dc.b	nC2, $02
0009D177 E901                       	smpsAlterPitch $01
0009D179 F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
0009D17E E9F6                       	smpsAlterPitch $F6
0009D180 E3                         	smpsReturn
0009D181                            
0009D181                            SndDF_Voices:
0009D181                            ;	Voice $00
0009D181                            ;	$07
0009D181                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
0009D181                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
0009D181                            	smpsVcAlgorithm     $07
0009D181                            	smpsVcFeedback      $00
0009D181                            	smpsVcUnusedBits    $00
0009D181                            	smpsVcDetune        $00, $00, $00, $00
0009D181                            	smpsVcCoarseFreq    $04, $05, $04, $04
0009D181                            	smpsVcRateScale     $00, $00, $00, $00
0009D181                            	smpsVcAttackRate    $15, $15, $1F, $1F
0009D181                            	smpsVcAmpMod        $00, $00, $00, $00
0009D181                            	smpsVcDecayRate1    $00, $00, $00, $00
0009D181                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D181                            	smpsVcDecayLevel    $01, $01, $01, $01
0009D181                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D19A                            		even
0009D19A                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0009D1CC                            		even
0009D1CC                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
0009D210 00                         		even
0009D210                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
0009D210                            SndD2_Header:
0009D210                            	smpsHeaderStartSong 3
0009D212 01                         	smpsHeaderTempoSFX  $01
0009D213 01                         	smpsHeaderChanSFX   $01
0009D214                            
0009D21A                            
0009D21A                            ; FM4 Data
0009D21A                            SndD2_FM4:
0009D21A EF00                       	smpsSetvoice        $00
0009D221 C645                       	dc.b	nA5, $45
0009D223 F2                         	smpsStop
0009D224                            
0009D224                            SndD2_Voices:
0009D224                            ;	Voice $00
0009D224                            ;	$04
0009D224                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009D224                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
0009D224                            	smpsVcAlgorithm     $04
0009D224                            	smpsVcFeedback      $00
0009D224                            	smpsVcUnusedBits    $00
0009D224                            	smpsVcDetune        $04, $00, $00, $02
0009D224                            	smpsVcCoarseFreq    $07, $07, $02, $07
0009D224                            	smpsVcRateScale     $00, $00, $00, $00
0009D224                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D224                            	smpsVcAmpMod        $00, $00, $00, $00
0009D224                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009D224                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009D224                            	smpsVcDecayLevel    $00, $01, $00, $01
0009D224                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D23E 00                         		even
0009D23E                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0009D26E                            		even
0009D26E                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
0009D29E                            		even
0009D29E                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
0009D2D2                            		even
0009D2D2                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
0009D2E4                            		even
0009D2E4                            SoundAA:	include	"sound/sfx/Splash.asm"
0009D2E4                            SndA2_Header:
0009D2E4                            	smpsHeaderStartSong 3
0009D2E6 01                         	smpsHeaderTempoSFX  $01
0009D2E7 02                         	smpsHeaderChanSFX   $02
0009D2E8                            
0009D2F4                            
0009D2F4                            ; FM3 Data
0009D2F4                            SndA2_FM3:
0009D2F4 EF00                       	smpsSetvoice        $00
0009D2FB 8106                       	dc.b	nC0, $06
0009D2FD                            
0009D2FD                            SndA2_Loop00:
0009D2FD 810E                       	dc.b	nC0, $0E
0009D2FF E60E                       	smpsAlterVol      $0E
0009D301 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
0009D306 F2                         	smpsStop
0009D307                            
0009D307                            ; FM4 Data
0009D307                            SndA2_FM4:
0009D307 EF01                       	smpsSetvoice        $01
0009D309 A606 14                    	dc.b	nCs3, $06, $14
0009D30C F2                         	smpsStop
0009D30D                            
0009D30D                            SndA2_Voices:
0009D30D                            ;	Voice $00
0009D30D                            ;	$F9
0009D30D                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
0009D30D                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
0009D30D                            	smpsVcAlgorithm     $01
0009D30D                            	smpsVcFeedback      $07
0009D30D                            	smpsVcUnusedBits    $03
0009D30D                            	smpsVcDetune        $03, $01, $03, $02
0009D30D                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009D30D                            	smpsVcRateScale     $00, $00, $00, $00
0009D30D                            	smpsVcAttackRate    $10, $1F, $1F, $1C
0009D30D                            	smpsVcAmpMod        $00, $00, $00, $00
0009D30D                            	smpsVcDecayRate1    $02, $09, $18, $05
0009D30D                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009D30D                            	smpsVcDecayLevel    $02, $04, $02, $01
0009D30D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D326                            
0009D326                            ;	Voice $01
0009D326                            ;	$00
0009D326                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
0009D326                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
0009D326                            	smpsVcAlgorithm     $00
0009D326                            	smpsVcFeedback      $00
0009D326                            	smpsVcUnusedBits    $00
0009D326                            	smpsVcDetune        $00, $00, $00, $00
0009D326                            	smpsVcCoarseFreq    $00, $02, $03, $00
0009D326                            	smpsVcRateScale     $00, $00, $03, $03
0009D326                            	smpsVcAttackRate    $1F, $1F, $1F, $19
0009D326                            	smpsVcAmpMod        $00, $00, $00, $00
0009D326                            	smpsVcDecayRate1    $0F, $14, $11, $12
0009D326                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
0009D326                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009D326                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D340 00                         		even
0009D340                            SoundAB:	include	"sound/sfx/FireShield.asm"
0009D340                            Sound_3E_Header:
0009D340                            	smpsHeaderStartSong 3
0009D342 01                         	smpsHeaderTempoSFX  $01
0009D343 01                         	smpsHeaderChanSFX   $01
0009D344                            
0009D34A                            
0009D34A                            ; FM5 Data
0009D34A                            Sound_3E_3F_40_41_FM5:
0009D34A EF00                       	smpsSetvoice        $00
0009D34C A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009D351 F2                         	smpsStop
0009D352                            
0009D352                            Sound_3E_Voices:
0009D352                            ;	Voice $00
0009D352                            ;	$0C
0009D352                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
0009D352                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
0009D352                            	smpsVcAlgorithm     $04
0009D352                            	smpsVcFeedback      $01
0009D352                            	smpsVcUnusedBits    $00
0009D352                            	smpsVcDetune        $03, $03, $02, $00
0009D352                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009D352                            	smpsVcRateScale     $00, $00, $00, $00
0009D352                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
0009D352                            	smpsVcAmpMod        $00, $00, $00, $00
0009D352                            	smpsVcDecayRate1    $00, $04, $00, $0A
0009D352                            	smpsVcDecayRate2    $0C, $08, $12, $08
0009D352                            	smpsVcDecayLevel    $00, $0B, $00, $0F
0009D352                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D36B                            
0009D36B                            
0009D36C 00                         		even
0009D36C                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
0009D3A0                            		even
0009D3A0                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
0009D3D6                            		even
0009D3D6                            SoundAE:	include	"sound/sfx/Fireball.asm"
0009D3D6                            Sound_70_Header:
0009D3D6                            	smpsHeaderStartSong 3
0009D3D8 01                         	smpsHeaderTempoSFX  $01
0009D3D9 02                         	smpsHeaderChanSFX   $02
0009D3DA                            
0009D3E6                            
0009D3E6                            ; FM5 Data
0009D3E6                            Sound_70_FM5:
0009D3E6 EF00                       	smpsSetvoice        $00
0009D3E8 8001                       	dc.b	nRst, $01
0009D3EF 8306 8502                  	dc.b	nD0, $06, nE0, $02
0009D3F3 F2                         	smpsStop
0009D3F4                            
0009D3F4                            ; PSG3 Data
0009D3F4                            Sound_70_PSG3:
0009D3F4 F500                       	smpsPSGvoice        sTone_0D
0009D3F6 800B                       	dc.b	nRst, $0B
0009D3F8 F3E7                       	smpsPSGform         $E7
0009D3FA C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
0009D3FD                            
0009D3FD                            Sound_70_Loop00:
0009D3FD 02                         	dc.b	$02
0009D3FE EC01                       	smpsPSGAlterVol     $01
0009D400 E7                         	dc.b	smpsNoAttack
0009D401 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
0009D406 F2                         	smpsStop
0009D407                            
0009D407                            Sound_70_Voices:
0009D407                            ;	Voice $00
0009D407                            ;	$FA
0009D407                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
0009D407                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
0009D407                            	smpsVcAlgorithm     $02
0009D407                            	smpsVcFeedback      $07
0009D407                            	smpsVcUnusedBits    $03
0009D407                            	smpsVcDetune        $00, $00, $00, $00
0009D407                            	smpsVcCoarseFreq    $05, $00, $03, $02
0009D407                            	smpsVcRateScale     $00, $00, $00, $00
0009D407                            	smpsVcAttackRate    $13, $0F, $11, $12
0009D407                            	smpsVcAmpMod        $00, $00, $00, $00
0009D407                            	smpsVcDecayRate1    $02, $09, $18, $05
0009D407                            	smpsVcDecayRate2    $02, $06, $0F, $06
0009D407                            	smpsVcDecayLevel    $02, $04, $02, $01
0009D407                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D420                            
0009D420                            
0009D420                            		even
0009D420                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
0009D44E                            		even
0009D44E                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
0009D480                            		even
0009D480                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
0009D4AC                            		even
0009D4AC                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
0009D4FC                            		even
0009D4FC                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0009D546                            		even
0009D546                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0009D5A2                            		even
0009D5A2                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
0009D5D0                            		even
0009D5D0                            SoundB6:	include	"sound/sfx/Spikes.asm"
0009D5D0                            SpikesSFX_Header:
0009D5D0                            	smpsHeaderStartSong 3
0009D5D2 01                         	smpsHeaderTempoSFX  $01
0009D5D3 02                         	smpsHeaderChanSFX   $02
0009D5D4                            
0009D5E0                            
0009D5E0                            ; FM6 Data
0009D5E0                            SndB7_FM3:
0009D5E0 EF01                       	smpsSetvoice        $01
0009D5E7 B105                       	dc.b	nC4, $05
0009D5E9 F1                         	smpsModOn
0009D5EA E10A                       	smpsAlterNote       $0A
0009D5EC E601                       	smpsAlterVol        $01
0009D5EE F2                         	smpsStop
0009D5EF                            
0009D5EF                            ; FM5 Data
0009D5EF                            SndB7_FM5:
0009D5EF 8005                       	dc.b	nRst, $05			 
0009D5F1 EF00                       	smpsSetvoice        $00
0009D5F3 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
0009D5F9 F2                         	smpsStop
0009D5FA                            
0009D5FA                            SndB7_Voices:
0009D5FA                            ;	Voice $00
0009D5FA                            ;	$34
0009D5FA                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
0009D5FA                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
0009D5FA                            	smpsVcAlgorithm     $04
0009D5FA                            	smpsVcFeedback      $06
0009D5FA                            	smpsVcUnusedBits    $00
0009D5FA                            	smpsVcDetune        $0D, $00, $00, $00
0009D5FA                            	smpsVcCoarseFreq    $07, $01, $0F, $09
0009D5FA                            	smpsVcRateScale     $00, $00, $00, $00
0009D5FA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D5FA                            	smpsVcAmpMod        $00, $00, $00, $00
0009D5FA                            	smpsVcDecayRate1    $0F, $09, $11, $0C
0009D5FA                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
0009D5FA                            	smpsVcDecayLevel    $03, $05, $01, $03
0009D5FA                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0009D613                            
0009D613                            ;	Voice $01
0009D613                            ;	$FA
0009D613                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009D613                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009D613                            	smpsVcAlgorithm     $02
0009D613                            	smpsVcFeedback      $07
0009D613                            	smpsVcUnusedBits    $03
0009D613                            	smpsVcDetune        $03, $01, $03, $02
0009D613                            	smpsVcCoarseFreq    $00, $09, $0A, $01
0009D613                            	smpsVcRateScale     $00, $00, $00, $00
0009D613                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D613                            	smpsVcAmpMod        $00, $00, $00, $00
0009D613                            	smpsVcDecayRate1    $02, $09, $18, $05
0009D613                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009D613                            	smpsVcDecayLevel    $02, $04, $02, $01
0009D613                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D62C                            		even
0009D62C                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
0009D668                            		even
0009D668                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
0009D668                            SndBD_Header:
0009D668                            	smpsHeaderStartSong 3
0009D66A 01                         	smpsHeaderTempoSFX  $01
0009D66B 01                         	smpsHeaderChanSFX   $01
0009D66C                            
0009D672                            
0009D672                            ; FM6 Data
0009D672                            SndBD_FM3:
0009D672 EF00                       	smpsSetvoice        $00
0009D674                            
0009D674                            SndBD_Loop00:
0009D674 C009                       	dc.b	nEb5, $09
0009D676 F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
0009D67B F2                         	smpsStop
0009D67C                            
0009D67C                            SndBD_Voices:
0009D67C                            ;	Voice $00
0009D67C                            ;	$02
0009D67C                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
0009D67C                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
0009D67C                            	smpsVcAlgorithm     $02
0009D67C                            	smpsVcFeedback      $00
0009D67C                            	smpsVcUnusedBits    $00
0009D67C                            	smpsVcDetune        $00, $02, $05, $00
0009D67C                            	smpsVcCoarseFreq    $01, $00, $01, $02
0009D67C                            	smpsVcRateScale     $00, $00, $00, $00
0009D67C                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
0009D67C                            	smpsVcAmpMod        $00, $00, $00, $00
0009D67C                            	smpsVcDecayRate1    $13, $14, $0A, $10
0009D67C                            	smpsVcDecayRate2    $00, $00, $00, $01
0009D67C                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009D67C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D696 00                         		even
0009D696                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
0009D696                            Sound_59_Header:
0009D696                            	smpsHeaderStartSong 3
0009D698 01                         	smpsHeaderTempoSFX  $01
0009D699 04                         	smpsHeaderChanSFX   $04
0009D69A                            
0009D6B2                            
0009D6B2                            ; FM3 Data
0009D6B2                            Sound_59_FM3:
0009D6B2 E040                       	smpsPan             panRight, $00
0009D6B4 8002                       	dc.b	nRst, $02
0009D6B6 F600 00                    	smpsJump            Sound_59_FM4
0009D6B9                            
0009D6B9                            ; FM5 Data
0009D6B9                            Sound_59_FM5:
0009D6B9 E080                       	smpsPan             panLeft, $00
0009D6BB 8001                       	dc.b	nRst, $01
0009D6BD                            
0009D6BD                            ; FM4 Data
0009D6BD                            Sound_59_FM4:
0009D6BD EF00                       	smpsSetvoice        $00
0009D6C4 8110                       	dc.b	nC0, $10
0009D6C6 F2                         	smpsStop
0009D6C7                            
0009D6C7                            ; PSG3 Data
0009D6C7                            Sound_59_PSG3:
0009D6CC F3E7                       	smpsPSGform         $E7
0009D6CE                            
0009D6CE                            Sound_59_Loop00:
0009D6CE B018 E7                    	dc.b	nB3, $18, smpsNoAttack
0009D6D1 EC03                       	smpsPSGAlterVol     $03
0009D6D3 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
0009D6D8 F2                         	smpsStop
0009D6D9                            
0009D6D9                            Sound_59_Voices:
0009D6D9                            ;	Voice $00
0009D6D9                            ;	$F9
0009D6D9                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009D6D9                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009D6D9                            	smpsVcAlgorithm     $01
0009D6D9                            	smpsVcFeedback      $07
0009D6D9                            	smpsVcUnusedBits    $03
0009D6D9                            	smpsVcDetune        $03, $01, $03, $02
0009D6D9                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009D6D9                            	smpsVcRateScale     $00, $00, $00, $00
0009D6D9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D6D9                            	smpsVcAmpMod        $00, $00, $00, $00
0009D6D9                            	smpsVcDecayRate1    $02, $09, $18, $05
0009D6D9                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009D6D9                            	smpsVcDecayLevel    $02, $04, $02, $01
0009D6D9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D6F2                            
0009D6F2                            
0009D6F2                            		even
0009D6F2                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0009D71A                            		even
0009D71A                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
0009D746                            		even
0009D746                            SoundBC:	include	"sound/sfx/DashRelease.asm"
0009D746                            Sound_B6_Header:
0009D746                            	smpsHeaderStartSong 3
0009D748 01                         	smpsHeaderTempoSFX  $01
0009D749 02                         	smpsHeaderChanSFX   $02
0009D74A                            
0009D756                            
0009D756                            ; FM5 Data
0009D756                            Sound_B6_FM5:
0009D756 EF00                       	smpsSetvoice        $00
0009D75D CD0F                       	dc.b	nE6, $0F
0009D75F F2                         	smpsStop
0009D760                            
0009D760                            ; PSG3 Data
0009D760                            Sound_B6_PSG3:
0009D760 F507                       	smpsPSGvoice        sTone_1D
0009D762 8006                       	dc.b	nRst, $06
0009D769 F3E7                       	smpsPSGform         $E7
0009D76B CD4F                       	dc.b	nE6, $4F
0009D76D F2                         	smpsStop
0009D76E                            
0009D76E                            Sound_B6_Voices:
0009D76E                            ;	Voice $00
0009D76E                            ;	$3D
0009D76E                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
0009D76E                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
0009D76E                            	smpsVcAlgorithm     $05
0009D76E                            	smpsVcFeedback      $07
0009D76E                            	smpsVcUnusedBits    $00
0009D76E                            	smpsVcDetune        $00, $00, $00, $00
0009D76E                            	smpsVcCoarseFreq    $00, $00, $03, $09
0009D76E                            	smpsVcRateScale     $00, $00, $00, $00
0009D76E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D76E                            	smpsVcAmpMod        $00, $00, $00, $00
0009D76E                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
0009D76E                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009D76E                            	smpsVcDecayLevel    $02, $04, $02, $01
0009D76E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D787                            
0009D787                            
0009D788 00                         		even
0009D788                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0009D7DC                            		even
0009D7DC                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
0009D816                            		even
0009D816                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0009D888                            		even
0009D888                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
0009D8B6                            		even
0009D8B6                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
0009D8F0                            		even
0009D8F0                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
0009D8F0                            SndC1_Header:
0009D8F0                            	smpsHeaderStartSong 3
0009D8F2 01                         	smpsHeaderTempoSFX  $01
0009D8F3 01                         	smpsHeaderChanSFX   $01
0009D8F4                            
0009D8FA                            
0009D8FA                            ; FM4 Data
0009D8FA                            SndC1_FM4:
0009D8FA EF00                       	smpsSetvoice        $00
0009D8FC D506 40                    	dc.b	nC7, $06, $40
0009D8FF F2                         	smpsStop
0009D900                            
0009D900                            SndC1_Voices:
0009D900                            ;	Voice $00
0009D900                            ;	$38
0009D900                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
0009D900                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
0009D900                            	smpsVcAlgorithm     $00
0009D900                            	smpsVcFeedback      $07
0009D900                            	smpsVcUnusedBits    $00
0009D900                            	smpsVcDetune        $00, $00, $00, $00
0009D900                            	smpsVcCoarseFreq    $00, $00, $00, $01
0009D900                            	smpsVcRateScale     $00, $00, $00, $00
0009D900                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D900                            	smpsVcAmpMod        $00, $00, $00, $00
0009D900                            	smpsVcDecayRate1    $0B, $09, $09, $09
0009D900                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D900                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009D900                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D91A 00                         		even
0009D91A                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
0009D994                            		even
0009D994                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0009D9BC                            		even
0009D9BC                            SoundC5:	include	"sound/sfx/Cash Register.asm"
0009D9BC                            Sound_B0_Header:
0009D9BC                            	smpsHeaderStartSong 3
0009D9BE 01                         	smpsHeaderTempoSFX  $01
0009D9BF 03                         	smpsHeaderChanSFX   $03
0009D9C0                            
0009D9D2                            
0009D9D2                            ; FM5 Data
0009D9D2                            Sound_B0_FM5:
0009D9D2 EF00                       	smpsSetvoice        $00
0009D9D4 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
0009D9DA F2                         	smpsStop
0009D9DB                            
0009D9DB                            ; FM4 Data
0009D9DB                            Sound_B0_FM4:
0009D9DB EF01                       	smpsSetvoice        $01
0009D9DD 8012 C655                  	dc.b	nRst, $12, nA5, $55
0009D9E1 F2                         	smpsStop
0009D9E2                            
0009D9E2                            ; FM3 Data
0009D9E2                            Sound_B0_FM3:
0009D9E2 EF02                       	smpsSetvoice        $02
0009D9E4 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
0009D9EB F2                         	smpsStop
0009D9EC                            
0009D9EC                            Sound_B0_Voices:
0009D9EC                            ;	Voice $00
0009D9EC                            ;	$3B
0009D9EC                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
0009D9EC                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
0009D9EC                            	smpsVcAlgorithm     $03
0009D9EC                            	smpsVcFeedback      $07
0009D9EC                            	smpsVcUnusedBits    $00
0009D9EC                            	smpsVcDetune        $00, $00, $00, $00
0009D9EC                            	smpsVcCoarseFreq    $06, $03, $02, $03
0009D9EC                            	smpsVcRateScale     $02, $00, $00, $00
0009D9EC                            	smpsVcAttackRate    $16, $1A, $1A, $18
0009D9EC                            	smpsVcAmpMod        $00, $00, $00, $00
0009D9EC                            	smpsVcDecayRate1    $10, $0A, $0E, $17
0009D9EC                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D9EC                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009D9EC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DA05                            
0009DA05                            ;	Voice $01
0009DA05                            ;	$04
0009DA05                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009DA05                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
0009DA05                            	smpsVcAlgorithm     $04
0009DA05                            	smpsVcFeedback      $00
0009DA05                            	smpsVcUnusedBits    $00
0009DA05                            	smpsVcDetune        $04, $07, $07, $03
0009DA05                            	smpsVcCoarseFreq    $09, $07, $02, $07
0009DA05                            	smpsVcRateScale     $00, $00, $00, $00
0009DA05                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009DA05                            	smpsVcAmpMod        $00, $00, $00, $00
0009DA05                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009DA05                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009DA05                            	smpsVcDecayLevel    $00, $01, $00, $01
0009DA05                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DA1E                            
0009DA1E                            ;	Voice $02
0009DA1E                            ;	$3C
0009DA1E                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
0009DA1E                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
0009DA1E                            	smpsVcAlgorithm     $04
0009DA1E                            	smpsVcFeedback      $07
0009DA1E                            	smpsVcUnusedBits    $00
0009DA1E                            	smpsVcDetune        $00, $00, $00, $00
0009DA1E                            	smpsVcCoarseFreq    $00, $00, $00, $0F
0009DA1E                            	smpsVcRateScale     $00, $00, $00, $00
0009DA1E                            	smpsVcAttackRate    $1C, $18, $1A, $1F
0009DA1E                            	smpsVcAmpMod        $00, $00, $00, $00
0009DA1E                            	smpsVcDecayRate1    $0E, $1A, $11, $17
0009DA1E                            	smpsVcDecayRate2    $10, $14, $0F, $00
0009DA1E                            	smpsVcDecayLevel    $02, $09, $09, $01
0009DA1E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DA37                            
0009DA37                            
0009DA38 00                         		even
0009DA38                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
0009DA7A                            		even
0009DA7A                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
0009DAA8                            		even
0009DAA8                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
0009DABA                            		even
0009DABA                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
0009DAE8                            		even
0009DAE8                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
0009DB16                            		even
0009DB16                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
0009DB62                            		even
0009DB62                            SoundCC:	include	"sound/sfx/Spring.asm"
0009DB62                            Spring_Header:
0009DB62                            	smpsHeaderStartSong 1
0009DB64 01                         	smpsHeaderTempoSFX  $01
0009DB65 01                         	smpsHeaderChanSFX   $01
0009DB66                            
0009DB6C                            
0009DB6C                            ; FM6 Data
0009DB6C                            Spring_FM6:
0009DB6C EF00                       	smpsSetvoice        $00
0009DB6E 8001                       	dc.b	nRst, $01
0009DB75 B006                       	dc.b	nB3, $06
0009DB77 F4                         	smpsModOff
0009DB78 EF01                       	smpsSetvoice        $01
0009DB7A                            
0009DB7A                            Spring_Loop00:
0009DB7A BD02                       	dc.b	nC5, $02
0009DB7C E601                       	smpsAlterVol      $01
0009DB7E E7                         	dc.b	smpsNoAttack
0009DB7F F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
0009DB84 F2                         	smpsStop
0009DB85                            
0009DB85                            Spring_Voices:
0009DB85                            ;	Voice $00
0009DB85                            ;	$20
0009DB85                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009DB85                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
0009DB85                            	smpsVcAlgorithm     $00
0009DB85                            	smpsVcFeedback      $04
0009DB85                            	smpsVcUnusedBits    $00
0009DB85                            	smpsVcDetune        $03, $03, $03, $03
0009DB85                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009DB85                            	smpsVcRateScale     $02, $02, $03, $03
0009DB85                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009DB85                            	smpsVcAmpMod        $00, $00, $00, $00
0009DB85                            	smpsVcDecayRate1    $06, $09, $06, $07
0009DB85                            	smpsVcDecayRate2    $08, $06, $06, $07
0009DB85                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009DB85                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DB9E                            
0009DB9E                            ;	Voice $01
0009DB9E                            ;	$20
0009DB9E                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
0009DB9E                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
0009DB9E                            	smpsVcAlgorithm     $00
0009DB9E                            	smpsVcFeedback      $04
0009DB9E                            	smpsVcUnusedBits    $00
0009DB9E                            	smpsVcDetune        $03, $03, $03, $03
0009DB9E                            	smpsVcCoarseFreq    $01, $00, $03, $01
0009DB9E                            	smpsVcRateScale     $02, $02, $02, $02
0009DB9E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009DB9E                            	smpsVcAmpMod        $00, $00, $00, $00
0009DB9E                            	smpsVcDecayRate1    $06, $09, $06, $07
0009DB9E                            	smpsVcDecayRate2    $08, $06, $06, $07
0009DB9E                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009DB9E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DBB8 00                         		even
0009DBB8                            SoundCD:	include	"sound/sfx/Beep.asm"
0009DBB8                            Snd99_Header:
0009DBB8                            	smpsHeaderStartSong 3
0009DBBA 01                         	smpsHeaderTempoSFX  $01
0009DBBB 01                         	smpsHeaderChanSFX   $01
0009DBBC                            
0009DBC2                            
0009DBC2                            ; FM4 Data
0009DBC2                            Snd99_FM4:
0009DBC2 EF00                       	smpsSetvoice        $00
0009DBC4 B502                       	dc.b	nE4, $02
0009DBC6 F2                         	smpsStop
0009DBC7                            
0009DBC7                            Snd99_Voices:
0009DBC7                            ;	Voice $00
0009DBC7                            ;	$07
0009DBC7                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009DBC7                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
0009DBC7                            	smpsVcAlgorithm     $07
0009DBC7                            	smpsVcFeedback      $00
0009DBC7                            	smpsVcUnusedBits    $00
0009DBC7                            	smpsVcDetune        $00, $00, $00, $00
0009DBC7                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
0009DBC7                            	smpsVcRateScale     $00, $00, $00, $00
0009DBC7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009DBC7                            	smpsVcAmpMod        $00, $00, $00, $00
0009DBC7                            	smpsVcDecayRate1    $00, $00, $00, $00
0009DBC7                            	smpsVcDecayRate2    $00, $00, $00, $00
0009DBC7                            	smpsVcDecayLevel    $00, $00, $00, $00
0009DBC7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DBE0                            		even
0009DBE0                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
0009DC0E                            		even
0009DC0E                            SoundCF:	include	"sound/sfx/Signpost.asm"
0009DC0E                            SignpostCD_Header:
0009DC0E                            	smpsHeaderStartSong 3
0009DC10 01                         	smpsHeaderTempoSFX  $01
0009DC11 02                         	smpsHeaderChanSFX   $02
0009DC12                            
0009DC1E                            
0009DC1E                            ; FM5 Data
0009DC1E                            Snd9D_FM5:
0009DC1E 8004                       	dc.b	nRst, $04
0009DC20                            
0009DC20                            ; FM4 Data
0009DC20                            Snd9D_FM4:
0009DC20 EF00                       	smpsSetvoice        $00
0009DC22                            
0009DC22                            Snd9D_Loop00:
0009DC22 B405                       	dc.b	nEb4, $05
0009DC24 E604                       	smpsFMAlterVol      $04
0009DC26 F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
0009DC2B F2                         	smpsStop
0009DC2C                            
0009DC2C                            Snd9D_Voices:
0009DC2C                            ;	Voice $00
0009DC2C                            ;	$F4
0009DC2C                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
0009DC2C                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
0009DC2C                            	smpsVcAlgorithm     $04
0009DC2C                            	smpsVcFeedback      $06
0009DC2C                            	smpsVcUnusedBits    $03
0009DC2C                            	smpsVcDetune        $00, $00, $00, $00
0009DC2C                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
0009DC2C                            	smpsVcRateScale     $00, $00, $00, $00
0009DC2C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009DC2C                            	smpsVcAmpMod        $00, $00, $00, $00
0009DC2C                            	smpsVcDecayRate1    $0B, $0B, $00, $00
0009DC2C                            	smpsVcDecayRate2    $08, $05, $00, $00
0009DC2C                            	smpsVcDecayLevel    $0F, $0F, $00, $00
0009DC2C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DC46 00                         		even
0009DC46                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
0009DC80                            		even
0009DC80                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
0009DC80                            Sound_41_Header:
0009DC80                            	smpsHeaderStartSong 3
0009DC82 01                         	smpsHeaderTempoSFX  $01
0009DC83 01                         	smpsHeaderChanSFX   $01
0009DC84                            
0009DC8A                            	
0009DC8A                            Sound41_FM5:
0009DC8A EF00                       	smpsSetvoice        $00
0009DC8C A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009DC91 F2                         	smpsStop
0009DC92                            
0009DC92                            Sound_41_Voices:
0009DC92                            ;	Voice $00
0009DC92                            ;	$36
0009DC92                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009DC92                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
0009DC92                            	smpsVcAlgorithm     $06
0009DC92                            	smpsVcFeedback      $06
0009DC92                            	smpsVcUnusedBits    $00
0009DC92                            	smpsVcDetune        $00, $00, $01, $00
0009DC92                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
0009DC92                            	smpsVcRateScale     $00, $00, $00, $00
0009DC92                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009DC92                            	smpsVcAmpMod        $00, $00, $00, $00
0009DC92                            	smpsVcDecayRate1    $00, $00, $00, $00
0009DC92                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
0009DC92                            	smpsVcDecayLevel    $00, $00, $00, $00
0009DC92                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DCAB                            
0009DCAB                            
0009DCAC 00                         		even
0009DCAC                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
0009DCAC                            Snd9B_Header:
0009DCAC                            	smpsHeaderStartSong 3
0009DCAE 01                         	smpsHeaderTempoSFX  $01
0009DCAF 01                         	smpsHeaderChanSFX   $01
0009DCB0                            
0009DCB6                            
0009DCB6                            ; FM5 Data
0009DCB6                            Snd9B_FM5:
0009DCB6 EF00                       	smpsSetvoice        $00
0009DCB8 8001                       	dc.b	nRst, $01
0009DCBF CA25                       	dc.b	nCs6, $25
0009DCC1 F4                         	smpsModOff
0009DCC2                            
0009DCC2                            Snd9B_Loop00:
0009DCC2 E7                         	dc.b	smpsNoAttack
0009DCC3 E601                       	smpsFMAlterVol      $01
0009DCC5 D102                       	dc.b	nAb6, $02
0009DCC7 F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
0009DCCC F2                         	smpsStop
0009DCCD                            
0009DCCD                            Snd9B_Voices:
0009DCCD                            ;	Voice $00
0009DCCD                            ;	$3C
0009DCCD                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
0009DCCD                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
0009DCCD                            	smpsVcAlgorithm     $04
0009DCCD                            	smpsVcFeedback      $07
0009DCCD                            	smpsVcUnusedBits    $00
0009DCCD                            	smpsVcDetune        $00, $00, $04, $00
0009DCCD                            	smpsVcCoarseFreq    $02, $02, $04, $00
0009DCCD                            	smpsVcRateScale     $00, $00, $00, $00
0009DCCD                            	smpsVcAttackRate    $15, $1F, $1F, $1F
0009DCCD                            	smpsVcAmpMod        $00, $00, $00, $00
0009DCCD                            	smpsVcDecayRate1    $00, $00, $1F, $00
0009DCCD                            	smpsVcDecayRate2    $00, $00, $00, $00
0009DCCD                            	smpsVcDecayLevel    $00, $00, $00, $00
0009DCCD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DCE6                            
0009DCE6                            
0009DCE6                            		even		
0009DCE6                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
0009DD7E                            		even
0009DD7E                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
0009DD8A                            		even				
0009DD8A                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
0009DDC6                            		even			
0009DDC6                            		; Don't let Sega sample cross $8000-byte boundary
0009DDC6                            		; (DAC driver doesn't switch banks automatically)
000A0000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000A6978                            SegaPCM_End
000A6978                            		even
000A6978                            
000A6978                            
000A6978                            
000A6978                            
000A6978                            			include "_inc\Sonic 2 Options.asm"
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            ; Common menu screen subroutine for transferring text to RAM
000A6978                            
000A6978                            ; ARGUMENTS:
000A6978                            ; d0 = starting art tile
000A6978                            ; a1 = data source
000A6978                            ; a2 = destination
000A6978                            ;
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            MenuScreen:
000A6978 103C 0000                  		move.b	#bgm_Fade,d0
000A697C 4EB8 12A0                  		jsr	PlaySound_Special ; fade out music
000A6980 4EB8 21D2                  		jsr	PaletteFadeOut
000A6984 46FC 2700                  		move	#$2700,sr
000A6988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000A698C 0200 00BF                  		andi.b	#$BF,d0
000A6990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000A6996 4EB8 11D0                  		jsr	ClearScreen
000A699A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000A69A0 3CBC 8004                  		move.w	#$8004,(a6)
000A69A4 3CBC 8230                  		move.w	#$8230,(a6)
000A69A8 3CBC 8407                  		move.w	#$8407,(a6)
000A69AC 3CBC 8230                  		move.w	#$8230,(a6)
000A69B0 3CBC 8700                  		move.w	#$8700,(a6)
000A69B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000A69B8 3CBC 9001                  		move.w	#$9001,(a6)
000A69BC                            
000A69BC                            
000A69BC 43F8 D000                  		lea	(v_objspace).w,a1
000A69C0 7000                       		moveq	#0,d0
000A69C2 323C 07FF                  		move.w	#$7FF,d1
000A69C6                            
000A69C6                            MenuScreen_ClrObjRam:
000A69C6 22C0                       		move.l	d0,(a1)+
000A69C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000A69CC                            
000A69CC                            ; ===========================================================================
000A69CC                            
000A69CC 31FC C800 C8FC             		ResetDMAQueue
000A69D2                            
000A69DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000A69E2 4EB8 134E                  		jsr	NemDec
000A69F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000A69F6 4EB8 134E                  		jsr	NemDec
000A69FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000A6A00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000A6A06 303C 6000                  		move.w	#$6000,d0
000A6A0A 4EB8 18D8                  		jsr	EniDec
000A6A0E                            
000A6A0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000A6A22                            
000A6A22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000A6A26                            
000A6A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6A26                            
000A6A26                            ; sub_8FBE:
000A6A26                            MenuScreenTextToRAM:
000A6A26 7200                       		moveq	#0,d1
000A6A28 1219                       		move.b	(a1)+,d1
000A6A2A                            
000A6A2A                            MenuScreenTextToRAM_Cont:
000A6A2A 1019                       		move.b	(a1)+,d0
000A6A2C 34C0                       		move.w	d0,(a2)+
000A6A2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000A6A32 4E75                       		rts
000A6A34                            ; End of function MenuScreenTextToRAM
000A6A34                            
000A6A34                            ; ===========================================================================
000A6A34                            ; loc_8FCC:
000A6A34                            MenuScreen_Options:
000A6A34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6A3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A40 303C 0070                  		move.w	#$70,d0
000A6A44 4EB8 18D8                  		jsr	EniDec
000A6A48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000A6A4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A54 303C 2070                  		move.w	#$2070,d0
000A6A58 4EB8 18D8                  		jsr	EniDec
000A6A5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6A64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A74 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A78 4238 F711                  		clr.b	($FFFFF711).w		
000A6A7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000A6A80                            ;-------------------------------------------------------------------------------
000A6A80 4278 F7B8                  		clr.w	($FFFFF7B8).w
000A6A84 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2
000A6A8A 6100 0000                  		bsr.w	Dynamic_Menu
000A6A8E                            ;-------------------------------------------------------------------------------
000A6A8E 7014                       		moveq	#palid_Options,d0
000A6A90 4EB8 247C                  		jsr		PalLoad1
000A6A94 103C 0098                  		move.b	#$98,d0
000A6A98 4EB8 12A0                  		jsr	PlaySound_Special ; play options music
000A6A9C 42B8 F700                  		clr.l	(v_screenposx).w
000A6AA0 42B8 F704                  		clr.l	(v_screenposy).w
000A6AA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AAA 4EB8 3A50                  		jsr	WaitForVBla
000A6AAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000A6AB2 0000 0040                  		ori.b	#$40,d0
000A6AB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000A6ABC 4EB8 212C                  		jsr	PaletteFadeIn
000A6AC0                            ; loc_9060:
000A6AC0                            OptionScreen_Main:
000A6AC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AC6 4EB8 3A50                  		jsr	WaitForVBla				
000A6ACA 46FC 2700                  		move	#$2700,sr
000A6ACE 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6AD2 6100 0000                  		bsr.w	OptionScreen_Controls			
000A6AD6 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6ADA 46FC 2300                  		move	#$2300,sr
000A6ADE 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2		
000A6AE4 6100 0000                  		bsr.w	Dynamic_Menu		
000A6AE8 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000A6AEE                            
000A6AEE 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000A6AF0 60CE                       		bra.s	OptionScreen_Main
000A6AF2                            ; ===========================================================================
000A6AF2                            ; loc_909A:
000A6AF2                            OptionScreen_Select:
000A6AF2 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000A6AF6 6600                       		bne.s	OptionScreen_Select_Not1P
000A6AF8 7000                       		moveq	#0,d0
000A6AFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000A6B00 4E75                       		rts
000A6B02                            ; ===========================================================================
000A6B02                            ; loc_90B6:
000A6B02                            OptionScreen_Select_Not1P:
000A6B02 5300                       		subq.b	#1,d0
000A6B04 6600                       		bne.s	OptionScreen_Select_Other
000A6B06 60B8                       		bra.s	OptionScreen_Main
000A6B08                            ; ===========================================================================
000A6B08                            ; loc_90D8:
000A6B08                            OptionScreen_Select_Other:
000A6B08 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; => SegaScreen
000A6B0E 4E75                       		rts
000A6B10                            
000A6B10                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B10                            
000A6B10                            ;sub_90E0:
000A6B10                            OptionScreen_Controls:
000A6B10 7400                       		moveq	#0,d2
000A6B12 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000A6B16 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000A6B1A 0800 0000                  		btst	#0,d0			; is up pressed?
000A6B1E 6700                       		beq.s	Option_Controls_Down	; if not, branch
000A6B20 5302                       		subq.b	#1,d2					; move up 1 selection
000A6B22 6400                       		bcc.s	Option_Controls_Down
000A6B24 143C 0002                  		move.b	#2,d2
000A6B28                            
000A6B28                            Option_Controls_Down:
000A6B28 0800 0001                  		btst	#1,d0			; is down pressed?
000A6B2C 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000A6B2E 5202                       		addq.b	#1,d2					; move down 1 selection
000A6B30 0C02 0003                  		cmpi.b	#3,d2
000A6B34 6500                       		blo.s	Option_Controls_Refresh
000A6B36 7400                       		moveq	#0,d2
000A6B38                            
000A6B38                            Option_Controls_Refresh:
000A6B38 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000A6B3C E54A                       		lsl.w	#2,d2
000A6B3E 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000A6B42 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000A6B46 3411                       		move.w	(a1),d2
000A6B48 0800 0002                  		btst	#2,d0				; is left pressed?
000A6B4C 6700                       		beq.s	Option_Controls_Right		; if not, branch
000A6B4E 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000A6B50 6400                       		bcc.s	Option_Controls_Right
000A6B52 1403                       		move.b	d3,d2
000A6B54                            
000A6B54                            Option_Controls_Right:
000A6B54 0800 0003                  		btst	#3,d0			; is right pressed?
000A6B58 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000A6B5A 5202                       		addq.b	#1,d2						; add 1 to sound test
000A6B5C B403                       		cmp.b	d3,d2
000A6B5E 6300                       		bls.s	Option_Controls_Button_A
000A6B60 7400                       		moveq	#0,d2
000A6B62                            
000A6B62                            Option_Controls_Button_A:
000A6B62 0800 0006                  		btst	#6,d0				; is button A pressed?
000A6B66 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000A6B68 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000A6B6C B403                       		cmp.b	d3,d2
000A6B6E 6300                       		bls.s	Option_Controls_Refresh2
000A6B70 7400                       		moveq	#0,d2
000A6B72                            
000A6B72                            Option_Controls_Refresh2:
000A6B72 3282                       		move.w	d2,(a1)
000A6B74                            
000A6B74                            Option_Controls_NoMove:
000A6B74 4E75                       		rts
000A6B76                            ; End of function OptionScreen_Controls
000A6B76                            
000A6B76                            ; ===========================================================================
000A6B76                            ; word_917A:
000A6B76                            OptionScreen_Choices:
000A6B76 09FF FFBE                  		dc.l ($A-1)<<24|($FFFFBE&$FFFFFF)
000A6B7A 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000A6B7E 01FF FF84                  		dc.l (2-1)<<24|($FFFF84&$FFFFFF)
000A6B82                            		even
000A6B82                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B82                            
000A6B82                            
000A6B82                            OptionScreen_DrawSelected:
000A6B82 6100 0000                  		bsr.w	loc_9268
000A6B86 7200                       		moveq	#0,d1
000A6B88 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6B8C E749                       		lsl.w	#3,d1
000A6B8E 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6B94 47F3 1000                  		lea	(a3,d1.w),a3
000A6B98 303C 6000                  		move.w	#$6000,d0
000A6B9C 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000A6BA2 225B                       		movea.l	(a3)+,a1
000A6BA4 6100 FE80                  		bsr.w	MenuScreenTextToRAM
000A6BA8 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000A6BAE 7200                       		moveq	#0,d1
000A6BB0 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6BB6 6700                       		beq.s	loc_9186
000A6BB8 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BBC E549                       		lsl.w	#2,d1
000A6BBE 43FA FFB6                  		lea	OptionScreen_Choices(pc),a1
000A6BC2 2271 1000                  		movea.l	(a1,d1.w),a1
000A6BC6 3211                       		move.w	(a1),d1
000A6BC8 E549                       		lsl.w	#2,d1
000A6BCA                            
000A6BCA                            loc_9186:		
000A6BCA 2274 1000                  		movea.l	(a4,d1.w),a1
000A6BCE 6100 FE56                  		bsr.w	MenuScreenTextToRAM
000A6BD2                            		;cmpi.b	#2,(Options_menu_box).w
000A6BD2                            		;bne.s	loc2_9186
000A6BD2                            		;lea	($FFFF00C2).l,a2
000A6BD2                            		;bsr.w	loc_9296
000A6BD2                            
000A6BD2                            loc2_9186:		
000A6BD2 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6BD8 201B                       		move.l	(a3)+,d0
000A6BDA 7215                       		moveq	#$15,d1
000A6BDC 7407                       		moveq	#7,d2
000A6BDE 4EF8 1324                  		jmp	TilemapToVRAM
000A6BE2                            ; ===========================================================================
000A6BE2                            
000A6BE2                            OptionScreen_DrawUnselected:
000A6BE2 6100 0000                  		bsr.w	loc_9268
000A6BE6 7200                       		moveq	#0,d1
000A6BE8 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BEC E749                       		lsl.w	#3,d1
000A6BEE 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6BF4 47F3 1000                  		lea	(a3,d1.w),a3
000A6BF8 7000                       		moveq	#0,d0
000A6BFA 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000A6C00 225B                       		movea.l	(a3)+,a1
000A6C02 6100 FE22                  		bsr.w	MenuScreenTextToRAM
000A6C06 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000A6C0C 7200                       		moveq	#0,d1
000A6C0E 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C14 6700                       		beq.s	loc2_91F8
000A6C16 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C1A E549                       		lsl.w	#2,d1
000A6C1C 43FA FF58                  		lea	OptionScreen_Choices(pc),a1
000A6C20 2271 1000                  		movea.l	(a1,d1.w),a1
000A6C24 3211                       		move.w	(a1),d1
000A6C26 E549                       		lsl.w	#2,d1
000A6C28                            
000A6C28                            loc2_91F8		
000A6C28 2274 1000                  		movea.l	(a4,d1.w),a1
000A6C2C 6100 FDF8                  		bsr.w	MenuScreenTextToRAM
000A6C30                            		;cmpi.b	#2,(Options_menu_box).w
000A6C30                            		;bne.s	loc3_91F8
000A6C30                            		;lea	($FFFF0222).l,a2
000A6C30                            		;bsr.w	loc_9296
000A6C30                            
000A6C30                            loc3_91F8		
000A6C30 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000A6C36 201B                       		move.l	(a3)+,d0
000A6C38 7215                       		moveq	#$15,d1
000A6C3A 7407                       		moveq	#7,d2
000A6C3C 4EF8 1324                  		jmp	TilemapToVRAM
000A6C40                            ; ===========================================================================
000A6C40                            
000A6C40                            loc_9268:
000A6C40 49F9 0000 0000             		lea	(off_92D2).l,a4
000A6C46 4A38 FFF8                  		tst.b	(v_megadrive).w
000A6C4A 6A00                       		bpl.s	loc2_9268
000A6C4C 49F9 0000 0000             		lea	(off_92DE).l,a4
000A6C52                            
000A6C52                            loc2_9268:
000A6C52 4A38 FF8C                  		tst.b	(Options_menu_box).w
000A6C56 6700                       		beq.s	loc3_9268
000A6C58 49F9 0000 0000             		lea	(off_92EA).l,a4
000A6C5E                            
000A6C5E                            loc3_9268:
000A6C5E 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C64 6600                       		bne.s	loc4_9268		; rts
000A6C66 49F9 0000 0000             		lea	(off_92F2).l,a4
000A6C6C                            
000A6C6C                            loc4_9268:
000A6C6C 4E75                       		rts
000A6C6E                            ; ===========================================================================
000A6C6E                            
000A6C6E                            loc_9296:
000A6C6E 4E75                       		rts
000A6C70                            
000A6C70                            Dynamic_Menu:
000A6C70 47F8 F7B8                  	lea	($FFFFF7B8).w,a3
000A6C74                            
000A6C74                            loc_3FF30:
000A6C74 3C1A                       	move.w	(a2)+,d6	; loop counter. We start off with 00 the first time.
000A6C76                            
000A6C76                            loc_3FF32:
000A6C76 5313                       	subq.b	#1,(a3)		; decrement timer
000A6C78 6400                       	bcc.s	loc_3FF78	; if time remains, branch ahead
000A6C7A 7000                       	moveq	#0,d0
000A6C7C 102B 0001                  	move.b	1(a3),d0	; load animation counter from animation data table
000A6C80 B02A 0006                  	cmp.b	6(a2),d0
000A6C84 6500                       	blo.s	loc_3FF48
000A6C86 7000                       	moveq	#0,d0
000A6C88 1740 0001                  	move.b	d0,1(a3)	; set animation counter
000A6C8C                            
000A6C8C                            loc_3FF48:
000A6C8C 522B 0001                  	addq.b	#1,1(a3)	; increment animation counter
000A6C90 1692                       	move.b	(a2),(a3)	; set timer
000A6C92 6A00                       	bpl.s	loc_3FF56
000A6C94 D040                       	add.w	d0,d0
000A6C96 16B2 0009                  	move.b	9(a2,d0.w),(a3)
000A6C9A                            
000A6C9A                            loc_3FF56:
000A6C9A 1032 0008                  	move.b	8(a2,d0.w),d0
000A6C9E EB48                       	lsl.w	#5,d0
000A6CA0 342A 0004                  	move.w	4(a2),d2
000A6CA4 2212                       	move.l	(a2),d1
000A6CA6 0281 00FF FFFF             	andi.l	#$FFFFFF,d1		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
000A6CAC D280                       	add.l	d0,d1
000A6CAE 7600                       	moveq	#0,d3
000A6CB0 162A 0007                  	move.b	7(a2),d3
000A6CB4 E94B                       	lsl.w	#4,d3
000A6CB6 4EB9 0000 1476             	jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
000A6CBC                            
000A6CBC                            loc_3FF78:
000A6CBC 102A 0006                  	move.b	6(a2),d0
000A6CC0 4A12                       	tst.b	(a2)
000A6CC2 6A00                       	bpl.s	loc_3FF82
000A6CC4 D000                       	add.b	d0,d0
000A6CC6                            
000A6CC6                            loc_3FF82:
000A6CC6 5200                       	addq.b	#1,d0
000A6CC8 0240 00FE                  	andi.w	#$FE,d0
000A6CCC 45F2 0008                  	lea	8(a2,d0.w),a2
000A6CD0 544B                       	addq.w	#2,a3
000A6CD2 51CE FFA2                  	dbf	d6,loc_3FF32
000A6CD6 4E75                       	rts
000A6CD8                            ; ------------------------------------------------------------------------
000A6CD8                            ; MENU ANIMATION SCRIPT
000A6CD8                            ; ------------------------------------------------------------------------
000A6CD8                            ;word_87C6:
000A6CD8                            Anim_SonicMilesBG:
000A6CD8 0000                       	dc.w   0
000A6CDA                            ; Sonic/Miles animated background
000A6CDA 0000 0000                  	dc.l $FF<<24|Sonic_Miles_Spr
000A6CDE 0020                       	dc.w $20
000A6CE0 06                         	dc.b 6
000A6CE1 0A                         	dc.b $A
000A6CE2 00C7                       	dc.b   0,$C7    ; "SONIC"
000A6CE4 0A05                       	dc.b  $A,  5	; 2
000A6CE6 1405                       	dc.b $14,  5	; 4
000A6CE8 1EC7                       	dc.b $1E,$C7	; "TAILS"
000A6CEA 1405                       	dc.b $14,  5	; 8
000A6CEC 0A05                       	dc.b  $A,  5	; 10	
000A6CEE                            ; ===========================================================================
000A6CEE                            ; off_92BA:
000A6CEE                            OptScrBoxData:
000A6CEE                            
000A6CEE 0000 0000                  		dc.l TextOptScr_PlayerSelect
000A6CF2 4192                       		dc.w $4192
000A6CF4 0003                       		dc.w 3
000A6CF6 0000 0000                  		dc.l TextOptScr_LivesSystem
000A6CFA 4592                       		dc.w $4592
000A6CFC 0003                       		dc.w 3
000A6CFE 0000 0000                  		dc.l TextOptScr_SoundTest
000A6D02 4992                       		dc.w $4992
000A6D04 0003                       		dc.w 3
000A6D06                            
000A6D06                            off_92D2:
000A6D06 0000 0000                  		dc.l TextOptScr_Default
000A6D0A 0000 0000                  		dc.l TextOptScr_Original
000A6D0E 0000 0000                  		dc.l TextOptScr_Beta
000A6D12 0000 0000                  		dc.l TextOptScr_Midnight
000A6D16 0000 0000                  		dc.l TextOptScr_C2
000A6D1A 0000 0000                  		dc.l TextOptScr_Clackers
000A6D1E 0000 0000                  		dc.l TextOptScr_RHS
000A6D22 0000 0000                  		dc.l TextOptScr_Socket
000A6D26 0000 0000                  		dc.l TextOptScr_Cringe
000A6D2A 0000 0000                  		dc.l TextOptScr_Dark		
000A6D2E                            off_92DE:
000A6D2E 0000 0000                  		dc.l TextOptScr_Default
000A6D32 0000 0000                  		dc.l TextOptScr_Original
000A6D36 0000 0000                  		dc.l TextOptScr_Beta
000A6D3A 0000 0000                  		dc.l TextOptScr_Midnight
000A6D3E 0000 0000                  		dc.l TextOptScr_C2
000A6D42 0000 0000                  		dc.l TextOptScr_Clackers
000A6D46 0000 0000                  		dc.l TextOptScr_RHS
000A6D4A 0000 0000                  		dc.l TextOptScr_Socket
000A6D4E 0000 0000                  		dc.l TextOptScr_Cringe
000A6D52 0000 0000                  		dc.l TextOptScr_Dark	
000A6D56                            off_92EA:
000A6D56 0000 0000                  		dc.l TextOptScr_On
000A6D5A 0000 0000                  		dc.l TextOptScr_Off
000A6D5E                            off_92F2:
000A6D5E 0000 0000                  		dc.l TextOptScr_Null
000A6D62 0000 0000                  		dc.l TextOptScr_Null2
000A6D66                            ; ===========================================================================
000A6D66                            
000A6E85                            ; ============================================================================
000A6E85                            
000A6E85                            Sonic_Miles_Spr:incbin  "artunc/Sonic and Miles text.bin"
000A7386 00                         		even
000A7386                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000A7532                            		even
000A7532                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000A7A9C                            		even
000A7A9C                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000A7B1C                            		even
000A7B1C                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000A7B48                            		even
000A7B48                            		even
000A7B48                            
000A7B48                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
001253CC                                        even
001253CC                            
001253CC                            Art_Dust:	incbin	artunc\spindust.bin
00126D0C                            
00126D0C                            ; ===============================================================
00126D0C                            ; ---------------------------------------------------------------
00126D0C                            ; Error handling module
00126D0C                            ; ---------------------------------------------------------------
00126D0C                             
00126D0C 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00126D10 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
00126D1A 01                                 dc.b    1               ; extended stack frame
00126D1C 00                                 even
00126D1C                             
00126D1C 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00126D20 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00126D2E 01                                 dc.b    1               ; extended stack frame
00126D30 00                                 even
00126D30                             
00126D30 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00126D34 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
00126D48 00                                 dc.b    0               ; extended stack frame
00126D4A 00                                 even
00126D4A                             
00126D4A 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00126D4E 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
00126D5A 00                                 dc.b    0               ; extended stack frame
00126D5C 00                                 even
00126D5C                             
00126D5C 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00126D60 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00126D70 00                                 dc.b    0               ; extended stack frame
00126D72 00                                 even
00126D72                             
00126D72 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
00126D76 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
00126D88 00                                 dc.b    0               ; extended stack frame
00126D8A 00                                 even
00126D8A                             
00126D8A 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00126D8E 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00126DA2 00                                 dc.b    0               ; extended stack frame
00126DA4 00                                 even
00126DA4                             
00126DA4 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
00126DA8 5452 4143 4500                     dc.b    "TRACE",0           ; text
00126DAE 00                                 dc.b    0               ; extended stack frame
00126DB0 00                                 even
00126DB0                             
00126DB0 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00126DB4 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
00126DC7 00                                 dc.b    0               ; extended stack frame
00126DC8                                    even
00126DC8                             
00126DC8 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00126DCC 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00126DDF 00                                 dc.b    0               ; extended stack frame
00126DE0                                    even
00126DE0                             
00126DE0 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00126DE4 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00126DF4 00                                 dc.b    0               ; extended stack frame
00126DF6 00                                 even
00126DF6                             
00126DF6                            ErrorHandler:   incbin  "ErrorHandler.bin"
001275DA                            
001275DA                            ; end of 'ROM'
001275DA                            		even
001275DA                            EndOfRom:
001275DA                            
001275DA                            
