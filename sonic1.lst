00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dVLowTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	smpsAlterNote val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Duck3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_Balance5:	equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_skele3:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000392 0240 001C                  		andi.w	#$1C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
00000396 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000039A 60F2                       		bra.s	MainGameLoop	; loop indefinitely
0000039C                            ; ===========================================================================
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C                            
0000039C 6000 0000                  ptr_GM_Sega:	bra.w	GM_Sega		; Sega Screen ($00)
000003A0                            
000003A0 6000 0000                  ptr_GM_Title:	bra.w	GM_Title	; Title	Screen ($04)
000003A4                            
000003A4 6000 0000                  ptr_GM_Demo:	bra.w	GM_Level	; Demo Mode ($08)
000003A8                            
000003A8 6000 0000                  ptr_GM_Level:	bra.w	GM_Level	; Normal Level ($0C)
000003AC                            
000003AC 6000 0000                  ptr_GM_Special:	bra.w	GM_Special	; Special Stage	($10)
000003B0                            
000003B0 6000 0000                  ptr_GM_Cont:	bra.w	GM_Continue	; Continue Screen ($14)
000003B4                            
000003B4 6000 0000                  ptr_GM_Ending:	bra.w	GM_Ending	; End of game sequence ($18)
000003B8                            
000003B8 6000 0000                  ptr_GM_Credits:	bra.w	GM_Credits	; Credits ($1C)
000003BC                            
000003BC 4E75                       		rts	
000003BE                            ; ===========================================================================
000003BE                            
000003BE                            CheckSumError:
000003BE 6100 0000                  		bsr.w	VDPSetupGame
000003C2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003CC 7E3F                       		moveq	#$3F,d7
000003CE                            
000003CE                            	@fillred:
000003CE 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003D6 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003DA                            
000003DA                            	@endlessloop:
000003DA 60FE                       		bra.s	@endlessloop
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            loc_43A:
000003DC 46FC 2700                  		disable_ints
000003E0 544F                       		addq.w	#2,sp
000003E2 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003E6 544F                       		addq.w	#2,sp
000003E8 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003EE 6100 0000                  		bsr.w	ShowErrorMessage
000003F2 202F 0002                  		move.l	2(sp),d0
000003F6 6100 0000                  		bsr.w	ShowErrorValue
000003FA 2038 FC40                  		move.l	(v_spbuffer).w,d0
000003FE 6100 0000                  		bsr.w	ShowErrorValue
00000402 6000                       		bra.s	loc_478
00000404                            ; ===========================================================================
00000404                            
00000404                            loc_462:
00000404 46FC 2700                  		disable_ints
00000408 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000040E 6100 0000                  		bsr.w	ShowErrorMessage
00000412 202F 0002                  		move.l	2(sp),d0
00000416 6100 0000                  		bsr.w	ShowErrorValue
0000041A                            
0000041A                            loc_478:
0000041A 6100 0000                  		bsr.w	ErrorWaitForC
0000041E 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000424 46FC 2300                  		enable_ints
00000428 4E73                       		rte	
0000042A                            
0000042A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000042A                            
0000042A                            
0000042A                            ShowErrorMessage:
0000042A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000043A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000440 323C 027F                  		move.w	#$27F,d1
00000444                            	@loadgfx:
00000444 3C98                       		move.w	(a0)+,(a6)
00000446 51C9 FFFC                  		dbf	d1,@loadgfx
0000044A                            
0000044A 7000                       		moveq	#0,d0		; clear	d0
0000044C 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
00000450 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000454 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000462 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000464                            
00000464                            	@showchars:
00000464 7000                       		moveq	#0,d0
00000466 1018                       		move.b	(a0)+,d0
00000468 0640 0790                  		addi.w	#$790,d0
0000046C 3C80                       		move.w	d0,(a6)
0000046E 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
00000472 4E75                       		rts	
00000474                            ; End of function ShowErrorMessage
00000474                            
00000474                            ; ===========================================================================
00000474 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000478 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
0000047C 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
00000480 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000484 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000488 0000                       		dc.w @line1111-ErrorText
0000048A 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
0000049D 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004B0 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004C3 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004D6 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004E9 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
000004FC 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000050F 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
00000522 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000535 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000548 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
0000055C 00                         		even
0000055C                            
0000055C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000055C                            
0000055C                            
0000055C                            ShowErrorValue:
0000055C 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
00000560 7407                       		moveq	#7,d2
00000562                            
00000562                            	@loop:
00000562 E998                       		rol.l	#4,d0
00000564 6100                       		bsr.s	@shownumber	; display 8 numbers
00000566 51CA FFFA                  		dbf	d2,@loop
0000056A 4E75                       		rts	
0000056C                            ; End of function ShowErrorValue
0000056C                            
0000056C                            
0000056C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000056C                            
0000056C                            
0000056C                            @shownumber:
0000056C 3200                       		move.w	d0,d1
0000056E 0241 000F                  		andi.w	#$F,d1
00000572 0C41 000A                  		cmpi.w	#$A,d1
00000576 6500                       		blo.s	@chars0to9
00000578 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
0000057A                            
0000057A                            	@chars0to9:
0000057A 0641 07C0                  		addi.w	#$7C0,d1
0000057E 3C81                       		move.w	d1,(a6)
00000580 4E75                       		rts	
00000582                            ; End of function sub_5CA
00000582                            
00000582                            
00000582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000582                            
00000582                            
00000582                            ErrorWaitForC:
00000582 6100 0000                  		bsr.w	ReadJoypads
00000586 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
0000058C 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000590 4E75                       		rts	
00000592                            ; End of function ErrorWaitForC
00000592                            
00000592                            ; ===========================================================================
00000592                            
00000592                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000AB2                            		even
00000AB2                            
00000AB2                            ; ===========================================================================
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            ; Vertical interrupt
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            
00000AB2                            VBlank:
00000AB2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB6 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000ABA 6700                       		beq.s	VBla_00
00000ABC 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000AC2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000ACC 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AD4 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000ADA 6700                       		beq.s	@notPAL		; if not, branch
00000ADC                            
00000ADC 303C 0700                  		move.w	#$700,d0
00000AE0                            	@waitPAL:
00000AE0 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AE4                            
00000AE4                            	@notPAL:
00000AE4 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AE8 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AEE 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000AF4 0240 003E                  		andi.w	#$3E,d0
00000AF8 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000AFC 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B00                            
00000B00                            VBla_Music:
00000B00 4EB9 0000 0000             		jsr		(UpdateMusic).l
00000B06                            
00000B06                            VBla_Exit:
00000B06 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B0A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0E 4E73                       		rte	
00000B10                            ; ===========================================================================
00000B10 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B14 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B18 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B1C 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B20 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B24 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B28 0000                       		dc.w VBla_0C-VBla_Index
00000B2A                            ; ===========================================================================
00000B2A                            
00000B2A                            VBla_00:
00000B2A 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B30 6700                       		beq.s	@islevel
00000B32 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B38 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B3C                            
00000B3C                            	@islevel:
00000B3C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B42 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B46                            
00000B46 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B4C 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B52 6700                       		beq.s	@notPAL		; if not, branch
00000B54                            
00000B54 303C 0700                  		move.w	#$700,d0
00000B58                            	@waitPAL:
00000B58 51C8 FFFE                  		dbf	d0,@waitPAL
00000B5C                            
00000B5C                            	@notPAL:
00000B5C 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B62 33FC 0100 00A1 1100        		stopZ80
00000B6A 0839 0000 00A1 1100 66F6   		waitZ80
00000B74 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B78 6600                       		bne.s	@waterabove 	; if yes, branch
00000B7A                            
00000B7A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000B9E 6000                       		bra.s	@waterbelow
00000BA0                            
00000BA0                            @waterabove:
00000BA0 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BC4                            
00000BC4                            	@waterbelow:
00000BC4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BC8 33FC 0000 00A1 1100        		startZ80
00000BD0 6000 FF2E                  		bra.w	VBla_Music
00000BD4                            ; ===========================================================================
00000BD4                            
00000BD4                            VBla_02:
00000BD4 6100 0000                  		bsr.w	sub_106E
00000BD8                            
00000BD8                            VBla_14:
00000BD8 4A78 F614                  		tst.w	(v_demolength).w
00000BDC 6700 0000                  		beq.w	@end
00000BE0 5378 F614                  		subq.w	#1,(v_demolength).w
00000BE4                            
00000BE4                            	@end:
00000BE4 4E75                       		rts	
00000BE6                            ; ===========================================================================
00000BE6                            
00000BE6                            VBla_04:
00000BE6 6100 0000                  		bsr.w	sub_106E
00000BEA 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BEE 6100 0000                  		bsr.w	sub_1642
00000BF2 4A78 F614                  		tst.w	(v_demolength).w
00000BF6 6700 0000                  		beq.w	@end
00000BFA 5378 F614                  		subq.w	#1,(v_demolength).w
00000BFE                            
00000BFE                            	@end:
00000BFE 4E75                       		rts	
00000C00                            ; ===========================================================================
00000C00                            
00000C00                            VBla_06:
00000C00 6100 0000                  		bsr.w	sub_106E
00000C04 4E75                       		rts	
00000C06                            ; ===========================================================================
00000C06                            
00000C06                            VBla_10:
00000C06 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C0C 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C10                            
00000C10                            VBla_08:
00000C10 33FC 0100 00A1 1100        		stopZ80
00000C18 0839 0000 00A1 1100 66F6   		waitZ80
00000C22 6100 0000                  		bsr.w	ReadJoypads
00000C26 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C2A 6600                       		bne.s	@waterabove
00000C2C                            
00000C2C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C50 6000                       		bra.s	@waterbelow
00000C52                            
00000C52                            @waterabove:
00000C52 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C76                            
00000C76                            	@waterbelow:
00000C76 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C7A                            
00000C7A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000C9E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CC2 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CC8                            
00000CC8                            	@nochg:
00000CC8 33FC 0000 00A1 1100        		startZ80
00000CD0 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CD6 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CDC 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CE2 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CE8 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000CEE 6400                       		bhs.s	Demo_Time
00000CF0 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CF6 588F                       		addq.l	#4,sp
00000CF8 6000 FE0C                  		bra.w	VBla_Exit
00000CFC                            
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            ; Subroutine to	run a demo for an amount of time
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            
00000CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CFC                            
00000CFC                            
00000CFC                            Demo_Time:
00000CFC 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D00 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D06 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D0C 6100 0000                  		bsr.w	ProcessDPLC2
00000D10 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D14 6700 0000                  		beq.w	@end		; if not, branch
00000D18 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D1C                            
00000D1C                            	@end:
00000D1C 4E75                       		rts	
00000D1E                            ; End of function Demo_Time
00000D1E                            
00000D1E                            ; ===========================================================================
00000D1E                            
00000D1E                            VBla_0A:
00000D1E 33FC 0100 00A1 1100        		stopZ80
00000D26 0839 0000 00A1 1100 66F6   		waitZ80
00000D30 6100 0000                  		bsr.w	ReadJoypads
00000D34 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D58 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D7C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DA0 33FC 0000 00A1 1100        		startZ80
00000DA8 6100 0000                  		bsr.w	PalCycle_SS
00000DAC 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DB2                            	@nochg:
00000DB2 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DB6 6700 0000                  		beq.w	@end	; if not, return
00000DBA 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DBE                            
00000DBE                            	@end:
00000DBE 4E75                       		rts	
00000DC0                            ; ===========================================================================
00000DC0                            
00000DC0                            VBla_0C:
00000DC0 33FC 0100 00A1 1100        		stopZ80
00000DC8 0839 0000 00A1 1100 66F6   		waitZ80
00000DD2 6100 0000                  		bsr.w	ReadJoypads
00000DD6 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DDA 6600                       		bne.s	@waterabove
00000DDC                            
00000DDC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E00 6000                       		bra.s	@waterbelow
00000E02                            
00000E02                            @waterabove:
00000E02 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E26                            
00000E26                            	@waterbelow:
00000E26 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E2A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E4E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E72 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E78                            
00000E78                            	@nochg:
00000E78 33FC 0000 00A1 1100        		startZ80
00000E80 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E86 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E8C 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000E92 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000E98 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E9C 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EA2 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EA8 6100 0000                  		bsr.w	sub_1642
00000EAC 4E75                       		rts	
00000EAE                            ; ===========================================================================
00000EAE                            
00000EAE                            VBla_0E:
00000EAE 6100 0000                  		bsr.w	sub_106E
00000EB2 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EB6 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000EBC 4E75                       		rts	
00000EBE                            ; ===========================================================================
00000EBE                            
00000EBE                            VBla_12:
00000EBE 6100 0000                  		bsr.w	sub_106E
00000EC2 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000EC6 6000 0000                  		bra.w	sub_1642
00000ECA                            ; ===========================================================================
00000ECA                            
00000ECA                            Vbla_16:
00000ECA 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ECE 6100 0000                  		bsr.w	ReadJoypads
00000ED2 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000EF6 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F1A 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F20                            
00000F20                            	@nochg:
00000F20 4A78 F614                  		tst.w	(v_demolength).w
00000F24 6700 0000                  		beq.w	@end
00000F28 5378 F614                  		subq.w	#1,(v_demolength).w
00000F2C                            
00000F2C                            	@end:
00000F2C 4E75                       		rts	
00000F2E                            
00000F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F2E                            
00000F2E                            
00000F2E                            sub_106E:
00000F2E 33FC 0100 00A1 1100        		stopZ80
00000F36 0839 0000 00A1 1100 66F6   		waitZ80
00000F40 6100 0000                  		bsr.w	ReadJoypads
00000F44 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F48 6600                       		bne.s	@waterabove	; if yes, branch
00000F4A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F6E 6000                       		bra.s	@waterbelow
00000F70                            
00000F70                            	@waterabove:
00000F70 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000F94                            
00000F94                            	@waterbelow:
00000F94 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000FB8 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000FDC 33FC 0000 00A1 1100        		startZ80
00000FE4 4E75                       		rts	
00000FE6                            ; End of function sub_106E
00000FE6                            
00000FE6                            ; ---------------------------------------------------------------------------
00000FE6                            ; Horizontal interrupt
00000FE6                            ; ---------------------------------------------------------------------------
00000FE6                            
00000FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FE6                            
00000FE6                            
00000FE6                            HBlank:
00000FE6 46FC 2700                  		disable_ints
00000FEA 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
00000FEE 6700                       		beq.s	@nochg		; if not, branch
00000FF0 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00000FF6 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000FFA 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00001000 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001004 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000100C 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000100E 2298                       		move.l	(a0)+,(a1)
00001010 2298                       		move.l	(a0)+,(a1)
00001012 2298                       		move.l	(a0)+,(a1)
00001014 2298                       		move.l	(a0)+,(a1)
00001016 2298                       		move.l	(a0)+,(a1)
00001018 2298                       		move.l	(a0)+,(a1)
0000101A 2298                       		move.l	(a0)+,(a1)
0000101C 2298                       		move.l	(a0)+,(a1)
0000101E 2298                       		move.l	(a0)+,(a1)
00001020 2298                       		move.l	(a0)+,(a1)
00001022 2298                       		move.l	(a0)+,(a1)
00001024 2298                       		move.l	(a0)+,(a1)
00001026 2298                       		move.l	(a0)+,(a1)
00001028 2298                       		move.l	(a0)+,(a1)
0000102A 2298                       		move.l	(a0)+,(a1)
0000102C 2298                       		move.l	(a0)+,(a1)
0000102E 2298                       		move.l	(a0)+,(a1)
00001030 2298                       		move.l	(a0)+,(a1)
00001032 2298                       		move.l	(a0)+,(a1)
00001034 2298                       		move.l	(a0)+,(a1)
00001036 2298                       		move.l	(a0)+,(a1)
00001038 2298                       		move.l	(a0)+,(a1)
0000103A 2298                       		move.l	(a0)+,(a1)
0000103C 2298                       		move.l	(a0)+,(a1)
0000103E 2298                       		move.l	(a0)+,(a1)
00001040 2298                       		move.l	(a0)+,(a1)
00001042 2298                       		move.l	(a0)+,(a1)
00001044 2298                       		move.l	(a0)+,(a1)
00001046 2298                       		move.l	(a0)+,(a1)
00001048 2298                       		move.l	(a0)+,(a1)
0000104A 2298                       		move.l	(a0)+,(a1)
0000104C 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
00001052 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001056 4A38 F64F                  		tst.b	($FFFFF64F).w
0000105A 6600                       		bne.s	loc_119E
0000105C                            
0000105C                            	@nochg:
0000105C 4E73                       		rte	
0000105E                            ; ===========================================================================
0000105E                            
0000105E                            loc_119E:
0000105E 4238 F64F                  		clr.b	($FFFFF64F).w
00001062 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001066 6100 FC94                  		bsr.w	Demo_Time	
0000106A 4EB9 0000 0000             		jsr	(UpdateMusic).l
00001070 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001074 4E73                       		rte	
00001076                            ; End of function HBlank
00001076                            
00001076                            ; ---------------------------------------------------------------------------
00001076                            ; Subroutine to	initialise joypads
00001076                            ; ---------------------------------------------------------------------------
00001076                            
00001076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001076                            
00001076                            
00001076                            JoypadInit:
00001076 33FC 0100 00A1 1100        		stopZ80
0000107E 0839 0000 00A1 1100 66F6   		waitZ80
00001088 7040                       		moveq	#$40,d0
0000108A 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001090 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001096 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
0000109C 33FC 0000 00A1 1100        		startZ80
000010A4 4E75                       		rts	
000010A6                            ; End of function JoypadInit
000010A6                            
000010A6                            ; ---------------------------------------------------------------------------
000010A6                            ; Subroutine to	read joypad input, and send it to the RAM
000010A6                            ; ---------------------------------------------------------------------------
000010A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010A6                            
000010A6                            
000010A6                            ReadJoypads:
000010A6 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010AA 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010B0 6100                       		bsr.s	@read		; do the first joypad
000010B2 5449                       		addq.w	#2,a1		; do the second	joypad
000010B4                            
000010B4                            	@read:
000010B4 12BC 0000                  		move.b	#0,(a1)
000010B8 4E71                       		nop	
000010BA 4E71                       		nop	
000010BC 1011                       		move.b	(a1),d0
000010BE E508                       		lsl.b	#2,d0
000010C0 0200 00C0                  		andi.b	#$C0,d0
000010C4 12BC 0040                  		move.b	#$40,(a1)
000010C8 4E71                       		nop	
000010CA 4E71                       		nop	
000010CC 1211                       		move.b	(a1),d1
000010CE 0201 003F                  		andi.b	#$3F,d1
000010D2 8001                       		or.b	d1,d0
000010D4 4600                       		not.b	d0
000010D6 1210                       		move.b	(a0),d1
000010D8 B101                       		eor.b	d0,d1
000010DA 10C0                       		move.b	d0,(a0)+
000010DC C200                       		and.b	d0,d1
000010DE 10C1                       		move.b	d1,(a0)+
000010E0 4E75                       		rts	
000010E2                            ; End of function ReadJoypads
000010E2                            
000010E2                            
000010E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010E2                            
000010E2                            
000010E2                            VDPSetupGame:
000010E2 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
000010E8 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
000010EE 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000010F4 7E12                       		moveq	#$12,d7
000010F6                            
000010F6                            	@setreg:
000010F6 309A                       		move.w	(a2)+,(a0)
000010F8 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
000010FC                            
000010FC 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001102 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001106 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
0000110C 7000                       		moveq	#0,d0
0000110E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001118 3E3C 003F                  		move.w	#$3F,d7
0000111C                            
0000111C                            	@clrCRAM:
0000111C 3280                       		move.w	d0,(a1)
0000111E 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
00001122                            
00001122 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001126 42B8 F61A                  		clr.l	(v_scrposx_dup).w
0000112A 2F01                       		move.l	d1,-(sp)
0000112C 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000114E                            
0000114E                            	@waitforDMA:
0000114E 3215                       		move.w	(a5),d1
00001150 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
00001154 66F8                       		bne.s	@waitforDMA	; if yes, branch
00001156                            
00001156 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
0000115A 221F                       		move.l	(sp)+,d1
0000115C 4E75                       		rts	
0000115E                            ; End of function VDPSetupGame
0000115E                            
0000115E                            ; ===========================================================================
0000115E 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
00001160 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
00001162 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00001164 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00001166 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00001168 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
0000116A 8600                       		dc.w $8600		; unused
0000116C 8700                       		dc.w $8700		; set background colour (palette entry 0)
0000116E 8800                       		dc.w $8800		; unused
00001170 8900                       		dc.w $8900		; unused
00001172 8A00                       		dc.w $8A00		; default H.interrupt register
00001174 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00001176 8C81                       		dc.w $8C81		; 40-cell display mode
00001178 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
0000117A 8E00                       		dc.w $8E00		; unused
0000117C 8F02                       		dc.w $8F02		; set VDP increment size
0000117E 9001                       		dc.w $9001		; 64-cell hscroll size
00001180 9100                       		dc.w $9100		; window horizontal position
00001182 9200                       		dc.w $9200		; window vertical position
00001184                            
00001184                            ; ---------------------------------------------------------------------------
00001184                            ; Subroutine to	clear the screen
00001184                            ; ---------------------------------------------------------------------------
00001184                            
00001184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001184                            
00001184                            
00001184                            ClearScreen:
00001184 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011A6                            
000011A6                            	@wait1:
000011A6 3215                       		move.w	(a5),d1
000011A8 0801 0001                  		btst	#1,d1
000011AC 66F8                       		bne.s	@wait1
000011AE                            
000011AE 3ABC 8F02                  		move.w	#$8F02,(a5)
000011B2 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
000011D4                            
000011D4                            	@wait2:
000011D4 3215                       		move.w	(a5),d1
000011D6 0801 0001                  		btst	#1,d1
000011DA 66F8                       		bne.s	@wait2
000011DC                            
000011DC 3ABC 8F02                  		move.w	#$8F02,(a5)
000011E0 42B8 F616                  		clr.l	(v_scrposy_dup).w
000011E4 42B8 F61A                  		clr.l	(v_scrposx_dup).w
000011E8                            
000011E8 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
000011EC 7000                       		moveq	#0,d0
000011EE 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
000011F2                            
000011F2                            	@clearsprites:
000011F2 22C0                       		move.l	d0,(a1)+
000011F4 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
000011F8                            
000011F8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000011FC 7000                       		moveq	#0,d0
000011FE 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
00001202                            
00001202                            	@clearhscroll:
00001202 22C0                       		move.l	d0,(a1)+
00001204 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001208 4E75                       		rts	
0000120A                            ; End of function ClearScreen
0000120A                            
0000120A                            ; ---------------------------------------------------------------------------
0000120A                            ; Subroutine to	load the sound driver
0000120A                            ; ---------------------------------------------------------------------------
0000120A                            
0000120A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000120A                            
0000120A                            
0000120A                            SoundDriverLoad:
0000120A 4E71                       		nop	
0000120C 33FC 0100 00A1 1100        		stopZ80
00001214 33FC 0100 00A1 1200        		resetZ80
0000121C 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001222 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001228 6100 0000                  		bsr.w	KosDec		; decompress
0000122C 33FC 0000 00A1 1200        		resetZ80a
00001234 4E71                       		nop	
00001236 4E71                       		nop	
00001238 4E71                       		nop	
0000123A 4E71                       		nop	
0000123C 33FC 0100 00A1 1200        		resetZ80
00001244 33FC 0000 00A1 1100        		startZ80
0000124C 4E75                       		rts	
0000124E                            ; End of function SoundDriverLoad
0000124E                            
0000124E                            		include	"_incObj\sub PlaySound.asm"
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            ; Subroutine to	play a music track
0000124E                            
0000124E                            ; input:
0000124E                            ;	d0 = track to play
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            
0000124E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000124E                            
0000124E                            
0000124E                            PlaySound:
0000124E 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
00001252 4E75                       		rts	
00001254                            ; End of function PlaySound
00001254                            
00001254                            ; ---------------------------------------------------------------------------
00001254                            ; Subroutine to	play a sound effect
00001254                            ; ---------------------------------------------------------------------------
00001254                            
00001254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001254                            
00001254                            
00001254                            PlaySound_Special:
00001254 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
00001258 4E75                       		rts	
0000125A                            ; End of function PlaySound_Special
0000125A                            
0000125A                            ; ===========================================================================
0000125A                            ; ---------------------------------------------------------------------------
0000125A                            ; Unused sound/music subroutine
0000125A                            ; ---------------------------------------------------------------------------
0000125A                            
0000125A                            PlaySound_Unused:
0000125A 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
0000125E 4E75                       		rts	
0000125E 4E75                       		rts	
00001260                            		include	"_inc\PauseGame.asm"
00001260                            ; ---------------------------------------------------------------------------
00001260                            ; Subroutine to	pause the game
00001260                            ; ---------------------------------------------------------------------------
00001260                            
00001260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001260                            
00001260                            
00001260                            PauseGame:
00001260 4E71                       		nop	
00001262 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
00001266 6700                       		beq.s	Unpause		; if not, branch
00001268 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
0000126C 6600                       		bne.s	Pause_StopGame	; if yes, branch
0000126E 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001274 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001276                            
00001276                            Pause_StopGame:
00001276 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
0000127C 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
00001282                            
00001282                            Pause_Loop:
00001282 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
00001288 6100 0000                  		bsr.w	WaitForVBla
0000128C 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
00001290 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001292 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00001298 6700                       		beq.s	Pause_ChkBC	; if not, branch
0000129A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000012A0 4E71                       		nop	
000012A2 6000                       		bra.s	Pause_EndMusic
000012A4                            ; ===========================================================================
000012A4                            
000012A4                            Pause_ChkBC:
000012A4 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012AA 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012AC 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012B2 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012B4                            
000012B4                            Pause_ChkStart:
000012B4 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012BA 67C6                       		beq.s	Pause_Loop	; if not, branch
000012BC                            
000012BC                            Pause_EndMusic:
000012BC 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
000012C2                            
000012C2                            Unpause:
000012C2 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
000012C8                            
000012C8                            Pause_DoNothing:
000012C8 4E75                       		rts	
000012CA                            ; ===========================================================================
000012CA                            
000012CA                            Pause_SlowMo:
000012CA 31FC 0001 F63A             		move.w	#1,(f_pause).w
000012D0 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
000012D6 4E75                       		rts	
000012D8                            ; End of function PauseGame
000012D8                            ; End of function PauseGame
000012D8                            
000012D8                            ; ---------------------------------------------------------------------------
000012D8                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
000012D8                            
000012D8                            ; input:
000012D8                            ;	a1 = tile map address
000012D8                            ;	d0 = VRAM address
000012D8                            ;	d1 = width (cells)
000012D8                            ;	d2 = height (cells)
000012D8                            ; ---------------------------------------------------------------------------
000012D8                            
000012D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012D8                            
000012D8                            
000012D8                            TilemapToVRAM:
000012D8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000012DE 283C 0080 0000             		move.l	#$800000,d4
000012E4                            
000012E4                            	Tilemap_Line:
000012E4 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
000012E8 3601                       		move.w	d1,d3
000012EA                            
000012EA                            	Tilemap_Cell:
000012EA 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
000012EC 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
000012F0 D084                       		add.l	d4,d0		; goto next line
000012F2 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
000012F6 4E75                       		rts	
000012F8                            ; End of function TilemapToVRAM
000012F8                            
000012F8                            		include	"_inc\Nemesis Decompression.asm"
000012F8                            ; ==============================================================================
000012F8                            ; ------------------------------------------------------------------------------
000012F8                            ; Nemesis decompression routine
000012F8                            ; ------------------------------------------------------------------------------
000012F8                            ; Optimized by vladikcomper
000012F8                            ; ------------------------------------------------------------------------------
000012F8                             
000012F8                            NemDec_RAM:
000012F8 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012FC 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
00001300 6000                           bra.s   NemDec_Main
00001302                             
00001302                            ; ------------------------------------------------------------------------------
00001302                            NemDec:
00001302 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001306 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
0000130C 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
00001310                             
00001310                            NemDec_Main:
00001310 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001314 3418                           move.w  (a0)+,d2        ; get number of patterns
00001316 6A00                           bpl.s   @0          ; are we in Mode 0?
00001318 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
0000131C E74A                       @0  lsl.w   #3,d2
0000131E 3A42                           movea.w d2,a5
00001320 7607                           moveq   #7,d3
00001322 7400                           moveq   #0,d2
00001324 7800                           moveq   #0,d4
00001326 6100 0000                      bsr.w   NemDec_BuildCodeTable
0000132A 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
0000132C E145                           asl.w   #8,d5           ; shift up by a byte
0000132E 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
00001330 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001334 6100                           bsr.s   NemDec2
00001336 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
0000133A 4E75                           rts
0000133C                             
0000133C                            ; ---------------------------------------------------------------------------
0000133C                            ; Part of the Nemesis decompressor, processes the actual compressed data
0000133C                            ; ---------------------------------------------------------------------------
0000133C                             
0000133C                            NemDec2:
0000133C 3E06                           move.w  d6,d7
0000133E 5147                           subq.w  #8,d7           ; get shift value
00001340 3205                           move.w  d5,d1
00001342 EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001344 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001348 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
0000134A 0241 00FF                      andi.w  #$FF,d1
0000134E D241                           add.w   d1,d1
00001350 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
00001354 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
00001358 6400                           bcc.s   @0          ; if not, branch
0000135A 5046                           addq.w  #8,d6
0000135C E145                           asl.w   #8,d5
0000135E 1A18                           move.b  (a0)+,d5        ; read next byte
00001360 1231 1001                  @0  move.b  1(a1,d1.w),d1
00001364 3001                           move.w  d1,d0
00001366 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000136A 0240 00F0                      andi.w  #$F0,d0
0000136E                             
0000136E                            NemDec_GetRepeatCount:
0000136E E848                           lsr.w   #4,d0           ; get repeat count
00001370                             
00001370                            NemDec_WritePixel:
00001370 E98C                           lsl.l   #4,d4           ; shift up by a nybble
00001372 8801                           or.b    d1,d4           ; write pixel
00001374 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
00001378 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
0000137A                            ; ---------------------------------------------------------------------------
0000137A                             
0000137A                            NemPCD_NewRow:
0000137A 7800                           moveq   #0,d4           ; reset row
0000137C 7607                           moveq   #7,d3           ; reset nybble counter
0000137E                             
0000137E                            NemDec_WritePixelLoop:
0000137E 51C8 FFF0                      dbf d0,NemDec_WritePixel
00001382 60B8                           bra.s   NemDec2
00001384                            ; ---------------------------------------------------------------------------
00001384                             
00001384                            NemDec_InlineData:
00001384 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
00001386 0C46 0009                      cmpi.w  #9,d6
0000138A 6400                           bcc.s   @0
0000138C 5046                           addq.w  #8,d6
0000138E E145                           asl.w   #8,d5
00001390 1A18                           move.b  (a0)+,d5
00001392 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
00001394 3205                           move.w  d5,d1
00001396 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
00001398 3001                           move.w  d1,d0
0000139A 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000139E 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013A2 0C46 0009                      cmpi.w  #9,d6
000013A6 64C6                           bcc.s   NemDec_GetRepeatCount
000013A8 5046                           addq.w  #8,d6
000013AA E145                           asl.w   #8,d5
000013AC 1A18                           move.b  (a0)+,d5
000013AE 60BE                           bra.s   NemDec_GetRepeatCount
000013B0                             
000013B0                            ; ---------------------------------------------------------------------------
000013B0                            ; Subroutines to output decompressed entry
000013B0                            ; Selected depending on current decompression mode
000013B0                            ; ---------------------------------------------------------------------------
000013B0                             
000013B0                            NemPCD_WriteRowToVDP:
000013B0                            loc_1502:
000013B0 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013B2 534D                           subq.w  #1,a5
000013B4 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013B6 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
000013B8 4E75                           rts
000013BA                            ; ---------------------------------------------------------------------------
000013BA                             
000013BA                            NemPCD_WriteRowToVDP_XOR:
000013BA B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013BC 2882                           move.l  d2,(a4)         ; and write the result
000013BE 534D                           subq.w  #1,a5
000013C0 380D                           move.w  a5,d4
000013C2 66B6                           bne.s   NemPCD_NewRow
000013C4 4E75                           rts
000013C6                            ; ---------------------------------------------------------------------------
000013C6                             
000013C6                            NemDec_WriteRowToRAM:
000013C6 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013C8 534D                           subq.w  #1,a5
000013CA 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013CC 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
000013CE 4E75                           rts
000013D0                            ; ---------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_WriteRowToRAM_XOR:
000013D0 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013D2 28C2                           move.l  d2,(a4)+        ; and write the result
000013D4 534D                           subq.w  #1,a5
000013D6 380D                           move.w  a5,d4
000013D8 66A0                           bne.s   NemPCD_NewRow
000013DA 4E75                           rts
000013DC                             
000013DC                            ; ---------------------------------------------------------------------------
000013DC                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013DC                            ; ---------------------------------------------------------------------------
000013DC                             
000013DC                            NemDec_BuildCodeTable:
000013DC 1018                           move.b  (a0)+,d0        ; read first byte
000013DE                             
000013DE                            @ChkEnd:
000013DE 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013E2 6600                           bne.s   @NewPalIndex        ; if not, branch
000013E4 4E75                           rts
000013E6                            ; ---------------------------------------------------------------------------
000013E6                             
000013E6                            @NewPalIndex:
000013E6 3E00                           move.w  d0,d7
000013E8                             
000013E8                            @ItemLoop:
000013E8 1018                           move.b  (a0)+,d0        ; read next byte
000013EA 6BF2                           bmi.s   @ChkEnd         ; ~~
000013EC 1200                           move.b  d0,d1
000013EE 0247 000F                      andi.w  #$F,d7          ; get palette index
000013F2 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000013F6 8E41                           or.w    d1,d7           ; combine the two
000013F8 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000013FC 1200                           move.b  d0,d1
000013FE E149                           lsl.w   #8,d1
00001400 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
00001402 7208                           moveq   #8,d1
00001404 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001406 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001408 1018                           move.b  (a0)+,d0        ; get code
0000140A D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
0000140C 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
00001410 60D6                           bra.s   @ItemLoop       ; repeat
00001412                            ; ---------------------------------------------------------------------------
00001412                             
00001412                            @ItemShortCode:
00001412 1018                           move.b  (a0)+,d0        ; get code
00001414 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001416 D040                           add.w   d0,d0           ; get index into code table
00001418 7A01                           moveq   #1,d5
0000141A E36D                           lsl.w   d1,d5
0000141C 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000141E 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
00001422                             
00001422                            @ItemShortCodeLoop:
00001422 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001424 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001428 60BE                           bra.s   @ItemLoop
00001428 60BE                           bra.s   @ItemLoop
0000142A                            
0000142A                              
0000142A                                pusho	; buffer local label symbol config
0000142A                                opt ws+  ; change local label symbol to '.'
0000142A                            
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; MACRO ResetDMAQueue
0000142A                            ; Clears the DMA queue, discarding all previously-queued DMAs.
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
0000142A                            ; Performs all queued DMA transfers and clears the DMA queue.
0000142A                            ;
0000142A                            ; Output:
0000142A                            ; 	a1,a5	trashed
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; ROUTINE InitDMAQueue
0000142A                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
0000142A                            ; Must be called before the queue is used, and the queue expects that only it
0000142A                            ; write to this region of RAM.
0000142A                            ;
0000142A                            ; Output:
0000142A                            ; 	a0,d0,d1	trashed
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
0000142A                            ; Queues a DMA with parameters given in registers.
0000142A                            ;
0000142A                            ; Options:
0000142A                            ; 	AssumeSourceAddressInBytes (default 1)
0000142A                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
0000142A                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
0000142A                            ; 	Use128kbSafeDMA (default 0)
0000142A                            ; 	UseVIntSafeDMA (default 0)
0000142A                            ; Input:
0000142A                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
0000142A                            ; 		set to 0)
0000142A                            ; 	d2	Destination address
0000142A                            ; 	d3	Transfer length (in words)
0000142A                            ; Output:
0000142A                            ; 	d0,d1,d2,d3,a1	trashed
0000142A                            ;
0000142A                            ; With the default settings, runs in:
0000142A                            ; * 48(11/0) cycles if queue is full (DMA discarded)
0000142A                            ; * 184(29/9) cycles otherwise (DMA queued)
0000142A                            ;
0000142A                            ; With Use128kbSafeDMA = 1, runs in:
0000142A                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
0000142A                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
0000142A                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
0000142A                            ;   fills the queue (second piece is discarded)
0000142A                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
0000142A                            ;   space for both pieces (both pieces queued)
0000142A                            ;
0000142A                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
0000142A                            ;
0000142A                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
0000142A                            ; but only if the DMA is not entirely discarded. However, all callers must be
0000142A                            ; edited to make sure the adresss given is correct.
0000142A                            ;
0000142A                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
0000142A                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
0000142A                            ; discarded. However, all callers must be edited to make sure the adresss given
0000142A                            ; in the correct form. You can use the dmaSource function for that.
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; MACRO QueueStaticDMA
0000142A                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
0000142A                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
0000142A                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
0000142A                            ;
0000142A                            ; Options:
0000142A                            ; 	UseVIntSafeDMA (default 0)
0000142A                            ; Input:
0000142A                            ; 	Source address (in bytes), transfer length (in bytes), destination address
0000142A                            ; Output:
0000142A                            ; 	d0,a1	trashed
0000142A                            ;
0000142A                            ; With the default settings, runs in:
0000142A                            ; * 32(7/0) cycles if queue is full (DMA discarded)
0000142A                            ; * 122(21/8) cycles otherwise (DMA queued)
0000142A                            ;
0000142A                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
0000142A                            ; ===========================================================================
0000142A                            ; option: AssumeSourceAddressInBytes
0000142A                            ;
0000142A                            ; This option makes the function work as a drop-in replacement of the original
0000142A                            ; functions. If you modify all callers to supply a position in words instead of
0000142A                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
0000142A =00000001                  AssumeSourceAddressInBytes = 1
0000142A                            ; ===========================================================================
0000142A                            ; option: AssumeSourceAddressIsRAMSafe
0000142A                            ;
0000142A                            ; This option (which is disabled by default) makes the DMA queue assume that the
0000142A                            ; source address is given to the function in a way that makes them safe to use
0000142A                            ; with RAM sources. You need to edit all callers to ensure this.
0000142A                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
0000142A =00000000                  AssumeSourceAddressIsRAMSafe = 0
0000142A                            ; ===========================================================================
0000142A                            ; option: UseRAMSourceSafeDMA
0000142A                            ;
0000142A                            ; This option (which is enabled by default) makes source addresses in RAM safe
0000142A                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
0000142A                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
0000142A =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
0000142A                            ; ===========================================================================
0000142A                            ; option: Use128kbSafeDMA
0000142A                            ;
0000142A                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
0000142A                            ; disabled by default because you can simply align the art in ROM and avoid the
0000142A                            ; issue altogether. It is here so that you have a high-performance routine to do
0000142A                            ; the job in situations where you can't align it in ROM.
0000142A =00000001                  Use128kbSafeDMA = 1
0000142A                            ; ===========================================================================
0000142A                            ; option UseVIntSafeDMA
0000142A                            ;
0000142A                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
0000142A                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
0000142A                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
0000142A                            ; KosM decoder) prevent these by masking off interrupts before calling and then
0000142A                            ; restore interrupts after.
0000142A =00000000                  UseVIntSafeDMA = 0
0000142A                            ; ===========================================================================
0000142A                            
0000142A                            
0000142A                            ; Convenience macros, for increased maintainability of the code.
0000142A =00000027                  DMA = %100111
0000142A =00000021                  VRAM = %100001
0000142A                            ; Like vdpComm, but starting from an address contained in a register
0000142A =00000001                  vdpCommReg_defined = 1
0000142A                            vdpCommReg macro reg,type,rwd,clr
0000142A                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
0000142A                            	if ((\type&\rwd)&3)<>0
0000142A                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
0000142A                            	endif
0000142A                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
0000142A                            	swap	\reg								; Put all bits in proper places
0000142A                            	if \clr <> 0
0000142A                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
0000142A                            	endif
0000142A                            	if ((\type&\rwd)&$FC)=$20
0000142A                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
0000142A                            	elseif ((\type&\rwd)&$FC)<>0
0000142A                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
0000142A                            	endif
0000142A                            	endm
0000142A                            ; ---------------------------------------------------------------------------
0000142A =00000001                  intMacros_defined = 1
0000142A                            enableInts macro
0000142A                            	move	#$2300,sr
0000142A                            	endm
0000142A                            
0000142A                            disableInts macro
0000142A                            	move	#$2700,sr
0000142A                            	endm
0000142A                            ; ---------------------------------------------------------------------------
0000142A =00000001                  DMAEntry_defined = 1
0000142A                                    rsreset
0000142A =00000000                  DMAEntry.Reg94:		rs.b	1
0000142A                            			  
0000142A =00000001                  DMAEntry.Size:      rs.b    0
0000142A =00000001                  DMAEntry.SizeH:		rs.b	1
0000142A =00000002                  DMAEntry.Reg93:		rs.b	1
0000142A =00000003                  DMAEntry.Source:    rs.b    0
0000142A =00000003                  DMAEntry.SizeL:		rs.b	1
0000142A =00000004                  DMAEntry.Reg97:		rs.b	1
0000142A =00000005                  DMAEntry.SrcH:		rs.b	1
0000142A =00000006                  DMAEntry.Reg96:		rs.b	1
0000142A =00000007                  DMAEntry.SrcM:		rs.b	1
0000142A =00000008                  DMAEntry.Reg95:		rs.b	1
0000142A =00000009                  DMAEntry.SrcL:		rs.b	1
0000142A =0000000A                  DMAEntry.Command:	rs.l	1
0000142A =0000000E                  DMAEntry.len:   rs.w    0
0000142A                            ; ---------------------------------------------------------------------------
0000142A =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            						
0000142A                            										   
0000142A                            									   
0000142A                            	  
0000142A                            																			 
0000142A                            							  
0000142A =00000001                  QueueStaticDMA_defined = 1
0000142A                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
0000142A                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
0000142A                            ; crosses a 128kB boundary, or has size 0.
0000142A                            QueueStaticDMA macro src,length,dest
0000142A                                local   len
0000142A                            		if ((\src)&1)<>0
0000142A                            			inform 3,"DMA queued from odd source \1!"
0000142A                            		endif
0000142A                            		if ((\length)&1)<>0
0000142A                            			inform 3,"DMA an odd number of bytes \2!"
0000142A                            		endif
0000142A                            		if (\length)=0
0000142A                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
0000142A                            		endif
0000142A                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
0000142A                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
0000142A                            		endif
0000142A                            	  
0000142A                            	if UseVIntSafeDMA=1
0000142A                            		move.w	sr,-(sp)										; Save current interrupt mask
0000142A                            		disableInts												; Mask off interrupts
0000142A                            	endif ; UseVIntSafeDMA=1
0000142A                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000142A                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000142A                            	beq.s	.done												; Return if there's no more room in the buffer
0000142A                            	len: = ((length>>1)&$7FFF)
0000142A                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
0000142A                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
0000142A                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
0000142A                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
0000142A                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
0000142A                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
0000142A                            .done:
0000142A                            	if UseVIntSafeDMA=1
0000142A                            		move.w	(sp)+,sr										; Restore interrupts to previous state
0000142A                            	endif ;UseVIntSafeDMA=1
0000142A                            	endm
0000142A                            
0000142A                                
0000142A                            
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ResetDMAQueue: macro
0000142A                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
0000142A                            	endm
0000142A                            ; ===========================================================================
0000142A                            
0000142A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000142A                            
0000142A                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
0000142A                            Add_To_DMA_Queue:
0000142A                            QueueDMATransfer:
0000142A 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000142E B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001432 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001434                            
00001434 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001436 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
0000143A 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000143E 7000                       	moveq	#0,d0											; We need a zero on d0
00001440                            
00001440                            		; Detect if transfer crosses 128KB boundary
00001440                            		; Using sub+sub instead of move+add handles the following edge cases:
00001440                            		; (1) d3.w = 0 => 128kB transfer
00001440                            		;   (a) d1.w = 0 => no carry, don't split the DMA
00001440                            		;   (b) d1.w != 0 => carry, need to split the DMA
00001440                            		; (2) d3.w != 0
00001440                            		;   (a) if there is carry on d1.w + d3.w
00001440                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
00001440                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
00001440                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
00001440                            		; The reason this works is that carry on d1.w + d3.w means that
00001440                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
00001440                            		; d1.w + d3.w > $10000.
00001440 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
00001442 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001444 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001446                            	; It does not cross a 128kB boundary. So just finish writing it.
00001446 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
0000144A                            
0000144A                            .finishxfer:
0000144A                            	; Command to specify destination address and begin DMA
0000144A 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
00001456 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
0000145A 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
0000145C 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
00001460                            
00001460                            .done:
00001460 4E75                       	rts
00001462                            ; ---------------------------------------------------------------------------
00001462                            .doubletransfer:
00001462                            		; We need to split the DMA into two parts, since it crosses a 128kB block
00001462 D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
00001464 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
00001468                            
00001468 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
0000146C 67DC                       		beq.s	.finishxfer									; Branch if not
0000146E                            
0000146E                            		; Get second transfer's source, destination, and length
0000146E 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
00001470 D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
00001472 D040                       		add.w	d0,d0										; Convert to number of bytes
00001474 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
00001476                            
00001476                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
00001476                            		; clear it. There is, unfortunately, no faster way to clear it than this.
00001484 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
00001488                            
00001488                            		; Do second transfer
00001488 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
0000148C 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
00001490                            
00001490                            		; Command to specify destination address and begin DMA
0000149A 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
0000149E 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
000014A0                            
000014A0 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014A4 4E75                       		rts
000014A6                            ; End of function QueueDMATransfer
000014A6                            ; ===========================================================================
000014A6                            
000014A6                            ; ---------------------------------------------------------------------------
000014A6                            ; Subroutine for issuing all VDP commands that were queued
000014A6                            ; (by earlier calls to QueueDMATransfer)
000014A6                            ; Resets the queue when it's done
000014A6                            ; ---------------------------------------------------------------------------
000014A6                            
000014A6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014A6                            
000014A6                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014A6                            Process_DMA_Queue:
000014A6                            ProcessDMAQueue:
000014A6 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014AA 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014AE                            ; ---------------------------------------------------------------------------
000014AE                            .jump_table:
000014AE 4E75                       	rts
000014B0                            	rept 6
000014B0                            		trap	#0											; Just in case
000014B0 4E40 4E40 4E40 4E40 4E40+  	endr
000014BC                            ; ---------------------------------------------------------------------------
000014BC =00000001                      c: = 1
000014BC                            	rept QueueSlotCount
000014BC                            		lea	(vdp_control_port).l,a5
000014BC                            		lea	(VDP_Command_Buffer).w,a1
000014BC                            		if c<>QueueSlotCount
000014BC                            			bra.w	.jump0 - c*8
000014BC                            		endif
000014BC                                c: = c + 1
000015B4                            ; ---------------------------------------------------------------------------
000015B4                            	rept QueueSlotCount
000015B4                            		move.l	(a1)+,(a5)									; Transfer length
000015B4                            		move.l	(a1)+,(a5)									; Source address high
000015B4                            		move.l	(a1)+,(a5)									; Source address low + destination high
000015B4                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
000015B4 2A99 2A99 2A99 3A99 2A99+  	endr
00001644                            
00001644                            .jump0:
00001644 31FC C800 C8FC             	ResetDMAQueue
0000164A 4E75                       	rts
0000164C                            ; End of function ProcessDMAQueue
0000164C                            ; ===========================================================================
0000164C                            
0000164C                            ; ---------------------------------------------------------------------------
0000164C                            ; Subroutine for initializing the DMA queue.
0000164C                            ; ---------------------------------------------------------------------------
0000164C                            
0000164C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000164C                            
0000164C                            InitDMAQueue:
0000164C 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
00001650 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
00001652 223C 9397 9695             	move.l	#$93979695,d1
00001658 =00000000                      c: = 0
00001658                            	rept QueueSlotCount
00001658                            		move.b	d0,c + DMAEntry.Reg94(a0)
00001658                            		movep.l	d1,c + DMAEntry.Reg93(a0)
00001658                                c: = c + DMAEntry.len
00001658 1080 03C8 0002 1140 000E+  	endr
000016E6                            
000016E6 31FC C800 C8FC             	ResetDMAQueue
000016EC 4E75                       	rts
000016EE                            ; End of function ProcessDMAQueue
000016EE                            ; ===========================================================================
000016EE                            
000016EE                            
000016EE                                popo	; buffer local label symbol config
000016EE                            
000016EE                            
000016EE                            ; ---------------------------------------------------------------------------
000016EE                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
000016EE                            ; ---------------------------------------------------------------------------
000016EE                            
000016EE                            ; ARGUMENTS
000016EE                            ; d0 = index of PLC list
000016EE                            ; ---------------------------------------------------------------------------
000016EE                            
000016EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EE                            
000016EE                            ; LoadPLC:
000016EE                            AddPLC:
000016EE 48E7 0060                  		movem.l	a1-a2,-(sp)
000016F2 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016F8 D040                       		add.w	d0,d0
000016FA 3031 0000                  		move.w	(a1,d0.w),d0
000016FE 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
00001702 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001706                            
00001706                            	@findspace:
00001706 4A92                       		tst.l	(a2)		; is space available in RAM?
00001708 6700                       		beq.s	@copytoRAM	; if yes, branch
0000170A 5C4A                       		addq.w	#6,a2		; if not, try next space
0000170C 60F8                       		bra.s	@findspace
0000170E                            ; ===========================================================================
0000170E                            
0000170E                            @copytoRAM:
0000170E 3019                       		move.w	(a1)+,d0	; get length of PLC
00001710 6B00                       		bmi.s	@skip
00001712                            
00001712                            	@loop:
00001712 24D9                       		move.l	(a1)+,(a2)+
00001714 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001716 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
0000171A                            
0000171A                            	@skip:
0000171A 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000171E 4E75                       		rts	
00001720                            ; End of function AddPLC
00001720                            
00001720                            
00001720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001720                            ; Queue pattern load requests, but clear the PLQ first
00001720                            
00001720                            ; ARGUMENTS
00001720                            ; d0 = index of PLC list (see ArtLoadCues)
00001720                            
00001720                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
00001720                            ;	  (or hacker) is responsible for making sure that no more than
00001720                            ;	  16 load requests are copied into the buffer.
00001720                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
00001720                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
00001720                            
00001720                            ; LoadPLC2:
00001720                            NewPLC:
00001720 48E7 0060                  		movem.l	a1-a2,-(sp)
00001724 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000172A D040                       		add.w	d0,d0
0000172C 3031 0000                  		move.w	(a1,d0.w),d0
00001730 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001734 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001736 45F8 F680                  		lea	(v_plc_buffer).w,a2
0000173A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000173C 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000173E                            
0000173E                            	@loop:
0000173E 24D9                       		move.l	(a1)+,(a2)+
00001740 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001742 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001746                            
00001746                            	@skip:
00001746 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000174A 4E75                       		rts	
0000174C                            ; End of function NewPLC
0000174C                            
0000174C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174C                            
0000174C                            ; ---------------------------------------------------------------------------
0000174C                            ; Subroutine to	clear the pattern load cues
0000174C                            ; ---------------------------------------------------------------------------
0000174C                            
0000174C                            ; Clear the pattern load queue ($FFF680 - $FFF700)
0000174C                            
0000174C                            
0000174C                            ClearPLC:
0000174C 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
00001750 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
00001752                            
00001752                            	@loop:
00001752 429A                       		clr.l	(a2)+
00001754 51C8 FFFC                  		dbf	d0,@loop
00001758 4E75                       		rts	
0000175A                            ; End of function ClearPLC
0000175A                            
0000175A                            ; ---------------------------------------------------------------------------
0000175A                            ; Subroutine to	use graphics listed in a pattern load cue
0000175A                            ; ---------------------------------------------------------------------------
0000175A                            
0000175A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000175A                            
0000175A                            
0000175A                            RunPLC:
0000175A 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000175E 6700                       		beq.s	Rplc_Exit
00001760 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001764 6600                       		bne.s	Rplc_Exit
00001766 2078 F680                  		movea.l	(v_plc_buffer).w,a0
0000176A 47F9 0000 13B0             		lea	(NemPCD_WriteRowToVDP).l,a3
00001770 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001774 3418                       		move.w	(a0)+,d2
00001776 6A00                       		bpl.s	loc_160E
00001778 D6FC 000A                  		adda.w	#$A,a3
0000177C                            
0000177C                            loc_160E:
0000177C 0242 7FFF                  		andi.w	#$7FFF,d2
00001780 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
00001784 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
00001788 1A18                       		move.b	(a0)+,d5
0000178A E145                       		asl.w	#8,d5
0000178C 1A18                       		move.b	(a0)+,d5
0000178E 7C10                       		moveq	#$10,d6
00001790 7000                       		moveq	#0,d0
00001792 21C8 F680                  		move.l	a0,(v_plc_buffer).w
00001796 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
0000179A 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000179E 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017A2 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017AA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017AE                            
000017AE                            Rplc_Exit:
000017AE 4E75                       		rts	
000017B0                            ; End of function RunPLC
000017B0                            
000017B0                            
000017B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B0                            
000017B0                            
000017B0                            sub_1642:
000017B0 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B4 6700 0000                  		beq.w	locret_16DA
000017B8 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017BE 7000                       		moveq	#0,d0
000017C0 3038 F684                  		move.w	($FFFFF684).w,d0
000017C4 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017CA 6000                       		bra.s	loc_1676
000017CC                            ; End of function sub_1642
000017CC                            
000017CC                            
000017CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017CC                            
000017CC                            
000017CC                            ; sub_165E:
000017CC                            ProcessDPLC2:
000017CC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017D0 6700                       		beq.s	locret_16DA
000017D2 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017D8 7000                       		moveq	#0,d0
000017DA 3038 F684                  		move.w	($FFFFF684).w,d0
000017DE 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E4                            
000017E4                            loc_1676:
000017E4 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
000017EA E588                       		lsl.l	#2,d0
000017EC E448                       		lsr.w	#2,d0
000017EE 0040 4000                  		ori.w	#$4000,d0
000017F2 4840                       		swap	d0
000017F4 2880                       		move.l	d0,(a4)
000017F6 594C                       		subq.w	#4,a4
000017F8 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017FC 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
00001800 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001804 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001808 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000180C 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001810 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001814 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001818                            
00001818                            loc_16AA:
00001818 3A7C 0008                  		movea.w	#8,a5
0000181C 6100 FB5C                  		bsr.w	NemPCD_NewRow
00001820 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001824 6700                       		beq.s	loc_16DC
00001826 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000182A 66EC                       		bne.s	loc_16AA
0000182C 21C8 F680                  		move.l	a0,(v_plc_buffer).w
00001830 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001834 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001838 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
0000183C 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001840 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001844 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001848                            
00001848                            locret_16DA:
00001848 4E75                       		rts	
0000184A                            ; ===========================================================================
0000184A                            
0000184A                            loc_16DC:
0000184A 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000184E 7015                       		moveq	#$15,d0
00001850                            
00001850                            loc_16E2:
00001850 20E8 0006                  		move.l	6(a0),(a0)+
00001854 51C8 FFFA                  		dbf	d0,loc_16E2
00001858 4E75                       		rts	
0000185A                            ; End of function ProcessDPLC2
0000185A                            
0000185A                            ; ---------------------------------------------------------------------------
0000185A                            ; Subroutine to	execute	the pattern load cue
0000185A                            ; ---------------------------------------------------------------------------
0000185A                            
0000185A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000185A                            
0000185A                            
0000185A                            QuickPLC:
0000185A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001860 D040                       		add.w	d0,d0
00001862 3031 0000                  		move.w	(a1,d0.w),d0
00001866 43F1 0000                  		lea	(a1,d0.w),a1
0000186A 3219                       		move.w	(a1)+,d1	; get length of PLC
0000186C                            
0000186C                            	Qplc_Loop:
0000186C 2059                       		movea.l	(a1)+,a0	; get art pointer
0000186E 7000                       		moveq	#0,d0
00001870 3019                       		move.w	(a1)+,d0	; get VRAM address
00001872 E588                       		lsl.l	#2,d0
00001874 E448                       		lsr.w	#2,d0
00001876 0040 4000                  		ori.w	#$4000,d0
0000187A 4840                       		swap	d0
0000187C 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
00001882 6100 FA7E                  		bsr.w	NemDec		; decompress
00001886 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
0000188A 4E75                       		rts	
0000188C                            ; End of function QuickPLC
0000188C                            
0000188C                            		include	"_inc\Enigma Decompression.asm"
0000188C                            ; ---------------------------------------------------------------------------
0000188C                            ; Enigma decompression algorithm
0000188C                            
0000188C                            ; input:
0000188C                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
0000188C                            ;	a0 = source address
0000188C                            ;	a1 = destination address
0000188C                            
0000188C                            ; usage:
0000188C                            ;	lea	(source).l,a0
0000188C                            ;	lea	(destination).l,a1
0000188C                            ;	move.w	#arttile,d0
0000188C                            ;	bsr.w	EniDec
0000188C                            
0000188C                            ; See http://www.segaretro.org/Enigma_compression for format description
0000188C                            ; ---------------------------------------------------------------------------
0000188C                            
0000188C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000188C                            
0000188C                            
0000188C                            EniDec:
0000188C 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001890 3640                       		movea.w	d0,a3		; store starting art tile
00001892 1018                       		move.b	(a0)+,d0
00001894 4880                       		ext.w	d0
00001896 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001898 1818                       		move.b	(a0)+,d4
0000189A E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
0000189C 3458                       		movea.w	(a0)+,a2
0000189E D4CB                       		adda.w	a3,a2		; store incremental copy word
000018A0 3858                       		movea.w	(a0)+,a4
000018A2 D8CB                       		adda.w	a3,a4		; store literal copy word
000018A4 1A18                       		move.b	(a0)+,d5
000018A6 E145                       		asl.w	#8,d5
000018A8 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018AA 7C10                       		moveq	#16,d6		; initial shift value
000018AC                            ; loc_173E:
000018AC                            Eni_Loop:
000018AC 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018AE 3E06                       		move.w	d6,d7
000018B0 9E40                       		sub.w	d0,d7
000018B2 3205                       		move.w	d5,d1
000018B4 EE69                       		lsr.w	d7,d1
000018B6 0241 007F                  		andi.w	#$7F,d1		; get format list entry
000018BA 3401                       		move.w	d1,d2		; and copy it
000018BC 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
000018C0 6400                       		bhs.s	@sevenbitentry
000018C2 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
000018C4 E24A                       		lsr.w	#1,d2
000018C6                            ; loc_1758:
000018C6                            @sevenbitentry:
000018C6 6100 0000                  		bsr.w	EniDec_FetchByte
000018CA 0242 000F                  		andi.w	#$F,d2		; get repeat count
000018CE E849                       		lsr.w	#4,d1
000018D0 D241                       		add.w	d1,d1
000018D2 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
000018D6                            ; End of function EniDec
000018D6                            
000018D6                            ; ===========================================================================
000018D6                            ; loc_1768:
000018D6                            EniDec_00:
000018D6 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
000018D8 524A                       		addq.w	#1,a2		; increment it
000018DA 51CA FFFA                  		dbf	d2,@loop	; repeat
000018DE 60CC                       		bra.s	Eni_Loop
000018E0                            ; ===========================================================================
000018E0                            ; loc_1772:
000018E0                            EniDec_01:
000018E0 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
000018E2 51CA FFFC                  		dbf	d2,@loop	; repeat
000018E6 60C4                       		bra.s	Eni_Loop
000018E8                            ; ===========================================================================
000018E8                            ; loc_177A:
000018E8                            EniDec_100:
000018E8 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018EC                            ; loc_177E:
000018EC 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018EE 51CA FFFC                  		dbf	d2,@loop	; repeat
000018F2                            
000018F2 60B8                       		bra.s	Eni_Loop
000018F4                            ; ===========================================================================
000018F4                            ; loc_1786:
000018F4                            EniDec_101:
000018F4 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018F8                            ; loc_178A:
000018F8 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018FA 5241                       		addq.w	#1,d1		; increment
000018FC 51CA FFFA                  		dbf	d2,@loop	; repeat
00001900                            
00001900 60AA                       		bra.s	Eni_Loop
00001902                            ; ===========================================================================
00001902                            ; loc_1794:
00001902                            EniDec_110:
00001902 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001906                            ; loc_1798:
00001906 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001908 5341                       		subq.w	#1,d1		; decrement
0000190A 51CA FFFA                  		dbf	d2,@loop	; repeat
0000190E                            
0000190E 609C                       		bra.s	Eni_Loop
00001910                            ; ===========================================================================
00001910                            ; loc_17A2:
00001910                            EniDec_111:
00001910 0C42 000F                  		cmpi.w	#$F,d2
00001914 6700                       		beq.s	EniDec_Done
00001916                            ; loc_17A8:
00001916 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
0000191A 32C1                       		move.w	d1,(a1)+	; copy it
0000191C 51CA FFF8                  		dbf	d2,@loop	; and repeat
00001920                            
00001920 608A                       		bra.s	Eni_Loop
00001922                            ; ===========================================================================
00001922                            ; loc_17B4:
00001922                            EniDec_Index:
00001922 60B2                       		bra.s	EniDec_00
00001924 60B0                       		bra.s	EniDec_00
00001926 60B8                       		bra.s	EniDec_01
00001928 60B6                       		bra.s	EniDec_01
0000192A 60BC                       		bra.s	EniDec_100
0000192C 60C6                       		bra.s	EniDec_101
0000192E 60D2                       		bra.s	EniDec_110
00001930 60DE                       		bra.s	EniDec_111
00001932                            ; ===========================================================================
00001932                            ; loc_17C4:
00001932                            EniDec_Done:
00001932 5348                       		subq.w	#1,a0		; go back by one byte
00001934 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001938 6600                       		bne.s	@notnewbyte	; if not, branch
0000193A 5348                       		subq.w	#1,a0		; and another one if needed
0000193C                            ; loc_17CE:
0000193C                            @notnewbyte:
0000193C 3008                       		move.w	a0,d0
0000193E E248                       		lsr.w	#1,d0		; are we on an odd byte?
00001940 6400                       		bcc.s	@evenbyte	; if not, branch
00001942 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001944                            ; loc_17D6:
00001944                            @evenbyte:
00001944 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001948 4E75                       		rts	
0000194A                            
0000194A                            ; ---------------------------------------------------------------------------
0000194A                            ; Part of the Enigma decompressor
0000194A                            ; Fetches an inline copy value and stores it in d1
0000194A                            ; ---------------------------------------------------------------------------
0000194A                            
0000194A                            ; =============== S U B R O U T I N E =======================================
0000194A                            
0000194A                            ; loc_17DC:
0000194A                            EniDec_FetchInlineValue:
0000194A 360B                       		move.w	a3,d3		; copy starting art tile
0000194C 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000194E D201                       		add.b	d1,d1		; is the priority bit set?
00001950 6400                       		bcc.s	@skippriority	; if not, branch
00001952 5346                       		subq.w	#1,d6
00001954 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
00001956 6700                       		beq.s	@skippriority	; if not, branch
00001958 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
0000195C                            ; loc_17EE:
0000195C                            @skippriority:
0000195C D201                       		add.b	d1,d1		; is the high palette line bit set?
0000195E 6400                       		bcc.s	@skiphighpal	; if not, branch
00001960 5346                       		subq.w	#1,d6
00001962 0D05                       		btst	d6,d5
00001964 6700                       		beq.s	@skiphighpal
00001966 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
0000196A                            ; loc_17FC:
0000196A                            @skiphighpal:
0000196A D201                       		add.b	d1,d1		; is the low palette line bit set?
0000196C 6400                       		bcc.s	@skiplowpal	; if not, branch
0000196E 5346                       		subq.w	#1,d6
00001970 0D05                       		btst	d6,d5
00001972 6700                       		beq.s	@skiplowpal
00001974 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
00001978                            ; loc_180A:
00001978                            @skiplowpal:
00001978 D201                       		add.b	d1,d1		; is the vertical flip flag set?
0000197A 6400                       		bcc.s	@skipyflip	; if not, branch
0000197C 5346                       		subq.w	#1,d6
0000197E 0D05                       		btst	d6,d5
00001980 6700                       		beq.s	@skipyflip
00001982 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
00001986                            ; loc_1818:
00001986                            @skipyflip:
00001986 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001988 6400                       		bcc.s	@skipxflip	; if not, branch
0000198A 5346                       		subq.w	#1,d6
0000198C 0D05                       		btst	d6,d5
0000198E 6700                       		beq.s	@skipxflip
00001990 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
00001994                            ; loc_1826:
00001994                            @skipxflip:
00001994 3205                       		move.w	d5,d1
00001996 3E06                       		move.w	d6,d7
00001998 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
0000199A 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
0000199C 3C07                       		move.w	d7,d6
0000199E 0646 0010                  		addi.w	#16,d6
000019A2 4447                       		neg.w	d7		; calculate bit deficit
000019A4 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019A6 1A10                       		move.b	(a0),d5		; get next byte
000019A8 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019AA DE47                       		add.w	d7,d7
000019AC CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019B0 D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019B2                            ; loc_1844:
000019B2                            @maskvalue:
000019B2 300D                       		move.w	a5,d0		; get length in bits of inline copy value
000019B4 D040                       		add.w	d0,d0
000019B6 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
000019BA D243                       		add.w	d3,d1		; add starting art tile
000019BC 1A18                       		move.b	(a0)+,d5
000019BE E14D                       		lsl.w	#8,d5
000019C0 1A18                       		move.b	(a0)+,d5	; get next word
000019C2 4E75                       		rts	
000019C4                            ; ===========================================================================
000019C4                            ; loc_1856:
000019C4                            @enoughbits:
000019C4 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
000019C6 EE69                       		lsr.w	d7,d1	; get inline copy value
000019C8 300D                       		move.w	a5,d0
000019CA D040                       		add.w	d0,d0
000019CC C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
000019D0 D243                       		add.w	d3,d1	; add starting art tile
000019D2 300D                       		move.w	a5,d0
000019D4 6000                       		bra.s	EniDec_FetchByte
000019D6                            ; ===========================================================================
000019D6                            ; loc_1868:
000019D6                            @justenough:
000019D6 7C10                       		moveq	#16,d6	; reset shift value
000019D8 60D8                       		bra.s	@maskvalue
000019DA                            ; ===========================================================================
000019DA                            ; word_186C:
000019DA                            EniDec_Masks:
000019DA 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
000019E2 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
000019EA 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
000019F2 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
000019FA                            
000019FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019FA                            
000019FA                            ; sub_188C:
000019FA                            EniDec_FetchByte:
000019FA 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
000019FC 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001A00 6400                       		bhs.s	@locret	; if not, branch
00001A02 5046                       		addq.w	#8,d6
00001A04 E145                       		asl.w	#8,d5
00001A06 1A18                       		move.b	(a0)+,d5
00001A08                            @locret:
00001A08 4E75                       		rts	
00001A0A                            ; End of function EniDec_FetchByte
00001A0A                            ; End of function EniDec_FetchByte
00001A0A                            		include	"_inc\Kosinski Decompression.asm"
00001A0A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A0A                            ; ---------------------------------------------------------------------------
00001A0A                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A0A                            ; (sometimes called KOZINSKI decompression)
00001A0A                            ;
00001A0A                            ; ARGUMENTS:
00001A0A                            ; a0 = source address
00001A0A                            ; a1 = destination address
00001A0A                            ;
00001A0A                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A0A                            ; New faster version by written by vladikcomper, with additional improvements by
00001A0A                            ; MarkeyJester and Flamewing
00001A0A                            ; Converted to ASM68K by Beta Filter.
00001A0A                            ; ---------------------------------------------------------------------------
00001A0A =00000001                  Kos_UseLUT: equ 1
00001A0A =00000003                  Kos_LoopUnroll: equ 3
00001A0A =00000001                  Kos_ExtremeUnrolling: equ 1
00001A0A                            
00001A0A                            Kos_RunBitStream macro
00001A0A                                dbra    d2,@skip\@
00001A0A                                moveq   #7,d2                   ; Set repeat count to 8.
00001A0A                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A0A                                not.w   d3                      ; Have all 16 bits been used up?
00001A0A                                bne.s   @skip\@                   ; Branch if not.
00001A0A                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A0A                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A0A                                if Kos_UseLUT=1
00001A0A                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A0A                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A0A                                endif
00001A0A                            @skip\@
00001A0A                                endm
00001A0A                            
00001A0A                            Kos_ReadBit macro
00001A0A                                if Kos_UseLUT=1
00001A0A                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A0A                                else
00001A0A                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A0A                                endif
00001A0A                                endm
00001A0A                            ; ===========================================================================
00001A0A                            ; KozDec@193A:
00001A0A                            KosDec:
00001A0A 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A0C 7000                           moveq   #0,d0
00001A0E 7200                           moveq   #0,d1
00001A10 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A14 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A16 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A18 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A1C 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A20 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A22 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A24 6000                           bra.s   @FetchNewCode
00001A26                            ; ---------------------------------------------------------------------------
00001A26                            @FetchCodeLoop:
00001A26                                ; Code 1 (Uncompressed byte).
00001A3E 12D8                           move.b  (a0)+,(a1)+
00001A40                            
00001A40                            @FetchNewCode:
00001A42 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A44                            
00001A44                                ; Codes 00 and 01.
00001A44 7AFF                           moveq   #-1,d5
00001A46 4BD1                           lea (a1),a5
00001A62 6500 0000                      bcs.w   @Code_01
00001A66                            
00001A66                                ; Code 00 (Dictionary ref. short).
00001A80 6500                           bcs.s   @Copy45
00001A9C 6500                           bcs.s   @Copy3
00001AB6 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001AB8 DAC5                           adda.w  d5,a5
00001ABA 12DD                           move.b  (a5)+,(a1)+
00001ABC 12DD                           move.b  (a5)+,(a1)+
00001ABE 6080                           bra.s   @FetchNewCode
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            @Copy3:
00001AD8 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001ADA DAC5                           adda.w  d5,a5
00001ADC 12DD                           move.b  (a5)+,(a1)+
00001ADE 12DD                           move.b  (a5)+,(a1)+
00001AE0 12DD                           move.b  (a5)+,(a1)+
00001AE2 6000 FF5C                      bra.w   @FetchNewCode
00001AE6                            ; ---------------------------------------------------------------------------
00001AE6                            @Copy45:
00001B00 6500                           bcs.s   @Copy5
00001B1A 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B1C DAC5                           adda.w  d5,a5
00001B1E 12DD                           move.b  (a5)+,(a1)+
00001B20 12DD                           move.b  (a5)+,(a1)+
00001B22 12DD                           move.b  (a5)+,(a1)+
00001B24 12DD                           move.b  (a5)+,(a1)+
00001B26 6000 FF18                      bra.w   @FetchNewCode
00001B2A                            ; ---------------------------------------------------------------------------
00001B2A                            @Copy5:
00001B42 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B44 DAC5                           adda.w  d5,a5
00001B46 12DD                           move.b  (a5)+,(a1)+
00001B48 12DD                           move.b  (a5)+,(a1)+
00001B4A 12DD                           move.b  (a5)+,(a1)+
00001B4C 12DD                           move.b  (a5)+,(a1)+
00001B4E 12DD                           move.b  (a5)+,(a1)+
00001B50 6000 FEEE                      bra.w   @FetchNewCode
00001B54                            ; ---------------------------------------------------------------------------
00001B54                            ; ---------------------------------------------------------------------------
00001B54                            @Code_01:
00001B54 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001B56                                ; Code 01 (Dictionary ref. long / special).
00001B6E 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001B70 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001B72 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001B74 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001B76 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001B78 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001B7A 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001B7C                            
00001B7C                                ; special mode (extended counter)
00001B7C 1818                           move.b  (a0)+,d4                ; Read cnt
00001B7E 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001B80 5304                           subq.b  #1,d4
00001B82 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001B86                            
00001B86 DAC5                           adda.w  d5,a5
00001B88 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001B8A 3C04                           move.w  d4,d6
00001B8C 4646                           not.w   d6
00001B8E CC47                           and.w   d7,d6
00001B90 DC46                           add.w   d6,d6
00001B92 E64C                           lsr.w   #Kos_LoopUnroll,d4
00001B94 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001B98                            ; ---------------------------------------------------------------------------
00001B98                            @largecopy:
00001B98                                rept (1<<Kos_LoopUnroll)
00001B98                                move.b  (a5)+,(a1)+
00001B98 12DD 12DD 12DD 12DD 12DD+      endr
00001BA8 51CC FFEE                      dbra    d4,@largecopy
00001BAC 6000 FE92                      bra.w   @FetchNewCode
00001BB0                            ; ---------------------------------------------------------------------------
00001BB0                            @StreamCopy:
00001BB0 DAC5                           adda.w  d5,a5
00001BB2 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BB4 BF44                           eor.w   d7,d4
00001BB6 D844                           add.w   d4,d4
00001BB8 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001BBC                            ; ---------------------------------------------------------------------------
00001BBC                            @mediumcopy:
00001BBC                                rept 8
00001BBC                                move.b  (a5)+,(a1)+
00001BBC 12DD 12DD 12DD 12DD 12DD+      endr
00001BCC 6000 FE72                      bra.w   @FetchNewCode
00001BD0                            ; ---------------------------------------------------------------------------
00001BD0                            @Quit:
00001BD0 4E75                           rts                             ; End of function KosDec.
00001BD2                            ; ===========================================================================
00001BD2                            KosDec_ByteMap:
00001BD2 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001BE2 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001BF2 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001C02 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C12 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C22 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C32 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C42 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C52 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001C62 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001C72 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001C82 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001C92 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001CA2 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CB2 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001CC2 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001CD2                            ; ===========================================================================
00001CD2                            ; ===========================================================================
00001CD2                            
00001CD2                            		include	"_inc\PaletteCycle.asm"
00001CD2                            ; ---------------------------------------------------------------------------
00001CD2                            ; Palette cycling routine loading subroutine
00001CD2                            ; ---------------------------------------------------------------------------
00001CD2                            
00001CD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CD2                            
00001CD2                            
00001CD2                            PaletteCycle:
00001CD2 7400                       		moveq	#0,d2
00001CD4 7000                       		moveq	#0,d0
00001CD6 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001CDA D040                       		add.w	d0,d0
00001CDC 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001CE0 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001CE4                            ; End of function PaletteCycle
00001CE4                            
00001CE4                            ; ===========================================================================
00001CE4                            ; ---------------------------------------------------------------------------
00001CE4                            ; Palette cycling routines
00001CE4                            ; ---------------------------------------------------------------------------
00001CE4 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001CE6 0000                       		dc.w PCycle_LZ-PCycle_Index
00001CE8 0000                       		dc.w PCycle_MZ-PCycle_Index
00001CEA 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001CEC 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001CEE 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001CF0 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001CF2                            
00001CF2                            
00001CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CF2                            
00001CF2                            
00001CF2                            PCycle_Title:
00001CF2 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001CF8 6000                       		bra.s	PCycGHZ_Go
00001CFA                            ; ===========================================================================
00001CFA                            
00001CFA                            PCycle_GHZ:
00001CFA 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001D00                            
00001D00                            PCycGHZ_Go:
00001D00 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D04 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D06                            
00001D06 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D0C 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D10 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D14 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D18 E748                       		lsl.w	#3,d0
00001D1A 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D1E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D22 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D26                            
00001D26                            PCycGHZ_Skip:
00001D26 4E75                       		rts	
00001D28                            ; End of function PCycle_GHZ
00001D28                            
00001D28                            
00001D28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D28                            
00001D28                            
00001D28                            PCycle_LZ:
00001D28                            ; Waterfalls
00001D28 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D2C 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D2E                            
00001D2E 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D34 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D38 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D3C 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D40 E748                       		lsl.w	#3,d0
00001D42 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D48 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D4E 6600                       		bne.s	PCycLZ_NotSBZ3
00001D50 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001D56                            
00001D56                            	PCycLZ_NotSBZ3:
00001D56 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001D5A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D62 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001D66 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D6A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D6E                            
00001D6E                            PCycLZ_Skip1:
00001D6E                            ; Conveyor belts
00001D6E                            		;move.w	(v_framecount).w,d0
00001D6E                            		;andi.w	#7,d0
00001D6E                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001D6E                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001D6E                            		;moveq	#1,d1
00001D6E                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001D6E                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001D6E                            		;neg.w	d1
00001D6E                            
00001D6E                            	;PCycLZ_NoRev:
00001D6E                            		;move.w	(v_pal_buffer).w,d0
00001D6E                            		;andi.w	#3,d0
00001D6E                            		;add.w	d1,d0
00001D6E                            		;cmpi.w	#3,d0
00001D6E                            		;bcs.s	loc_1A0A
00001D6E                            		;move.w	d0,d1
00001D6E                            		;moveq	#0,d0
00001D6E                            		;tst.w	d1
00001D6E                            		;bpl.s	loc_1A0A
00001D6E                            		;moveq	#2,d0
00001D6E                            
00001D6E                            ;loc_1A0A:
00001D6E                            		;move.w	d0,(v_pal_buffer).w
00001D6E                            		;add.w	d0,d0
00001D6E                            		;move.w	d0,d1
00001D6E                            		;add.w	d0,d0
00001D6E                            		;add.w	d1,d0
00001D6E                            		;lea	(Pal_LZCyc2).l,a0
00001D6E                            		;lea	(v_pal_dry+$76).w,a1
00001D6E                            		;move.l	(a0,d0.w),(a1)+
00001D6E                            		;move.w	4(a0,d0.w),(a1)
00001D6E                            		;lea	(Pal_LZCyc3).l,a0
00001D6E                            		;lea	(v_pal_water+$76).w,a1
00001D6E                            		;move.l	(a0,d0.w),(a1)+
00001D6E                            		;move.w	4(a0,d0.w),(a1)
00001D6E                            
00001D6E                            ;PCycLZ_Skip2:
00001D6E 4E75                       		rts	
00001D70                            ; End of function PCycle_LZ
00001D70                            
00001D70                            ; ===========================================================================
00001D70 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001D78                            ; ===========================================================================
00001D78                            
00001D78                            PCycle_MZ:
00001D78 4E75                       		rts	
00001D7A                            
00001D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D7A                            
00001D7A                            
00001D7A                            PalCycle_SLZ:
00001D7A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001D7E 6A00                       		bpl.s	locret_1A80
00001D80 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001D86 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D8A 5240                       		addq.w	#1,d0
00001D8C 0C40 0006                  		cmpi.w	#6,d0
00001D90 6500                       		bcs.s	loc_1A60
00001D92 7000                       		moveq	#0,d0
00001D94                            
00001D94                            loc_1A60:
00001D94 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001D98 3200                       		move.w	d0,d1
00001D9A D241                       		add.w	d1,d1
00001D9C D041                       		add.w	d1,d0
00001D9E D040                       		add.w	d0,d0
00001DA0 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DA6 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DAA 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DAE 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001DB4                            
00001DB4                            locret_1A80:
00001DB4 4E75                       		rts	
00001DB6                            ; End of function PalCycle_SLZ
00001DB6                            
00001DB6                            
00001DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DB6                            
00001DB6                            
00001DB6                            PalCycle_SYZ:
00001DB6 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DBA 6A00                       		bpl.s	locret_1AC6
00001DBC 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001DC2 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DC6 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001DCA 0240 0003                  		andi.w	#3,d0
00001DCE E548                       		lsl.w	#2,d0
00001DD0 3200                       		move.w	d0,d1
00001DD2 D040                       		add.w	d0,d0
00001DD4 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001DDA 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001DDE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DE2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DE6 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001DEC 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001DF0 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001DF4 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001DFA                            
00001DFA                            locret_1AC6:
00001DFA 4E75                       		rts	
00001DFC                            ; End of function PalCycle_SYZ
00001DFC                            
00001DFC                            
00001DFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DFC                            
00001DFC                            
00001DFC                            PalCycle_SBZ:
00001DFC 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E02 4A38 FE11                  		tst.b	(v_act).w
00001E06 6700                       		beq.s	loc_1ADA
00001E08 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E0E                            
00001E0E                            loc_1ADA:
00001E0E 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E12 321A                       		move.w	(a2)+,d1
00001E14                            
00001E14                            loc_1AE0:
00001E14 5311                       		subq.b	#1,(a1)
00001E16 6B00                       		bmi.s	loc_1AEA
00001E18 5489                       		addq.l	#2,a1
00001E1A 5C8A                       		addq.l	#6,a2
00001E1C 6000                       		bra.s	loc_1B06
00001E1E                            ; ===========================================================================
00001E1E                            
00001E1E                            loc_1AEA:
00001E1E 12DA                       		move.b	(a2)+,(a1)+
00001E20 1011                       		move.b	(a1),d0
00001E22 5200                       		addq.b	#1,d0
00001E24 B01A                       		cmp.b	(a2)+,d0
00001E26 6500                       		bcs.s	loc_1AF6
00001E28 7000                       		moveq	#0,d0
00001E2A                            
00001E2A                            loc_1AF6:
00001E2A 12C0                       		move.b	d0,(a1)+
00001E2C 0240 000F                  		andi.w	#$F,d0
00001E30 D040                       		add.w	d0,d0
00001E32 305A                       		movea.w	(a2)+,a0
00001E34 365A                       		movea.w	(a2)+,a3
00001E36 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E3A                            
00001E3A                            loc_1B06:
00001E3A 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E3E 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E42 6A00                       		bpl.s	locret_1B64
00001E44 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E4A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E50 4A38 FE11                  		tst.b	(v_act).w
00001E54 6700                       		beq.s	loc_1B2E
00001E56 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001E5C 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001E62                            
00001E62                            loc_1B2E:
00001E62 72FF                       		moveq	#-1,d1
00001E64 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001E68 6700                       		beq.s	loc_1B38
00001E6A 4441                       		neg.w	d1
00001E6C                            
00001E6C                            loc_1B38:
00001E6C 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E70 0240 0003                  		andi.w	#3,d0
00001E74 D041                       		add.w	d1,d0
00001E76 0C40 0003                  		cmpi.w	#3,d0
00001E7A 6500                       		bcs.s	loc_1B52
00001E7C 3200                       		move.w	d0,d1
00001E7E 7000                       		moveq	#0,d0
00001E80 4A41                       		tst.w	d1
00001E82 6A00                       		bpl.s	loc_1B52
00001E84 7002                       		moveq	#2,d0
00001E86                            
00001E86                            loc_1B52:
00001E86 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001E8A D040                       		add.w	d0,d0
00001E8C 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001E90 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E94 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001E98                            
00001E98                            locret_1B64:
00001E98 4E75                       		rts	
00001E9A                            ; End of function PalCycle_SBZ
00001E9A                            ; End of function PalCycle_SBZ
00001E9A                            
00001E9A                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001EBA                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001EDA                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001EFA                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F0C                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F1E                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001F86                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FAA                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00001FCA                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00001FDA                            
00001FDA                            		include	"_inc\SBZ Palette Scripts.asm"
00001FDA                            ; ---------------------------------------------------------------------------
00001FDA                            ; Scrap Brain Zone palette cycling script
00001FDA                            ; ---------------------------------------------------------------------------
00001FDA                            
00001FDA                            mSBZp:	macro duration,colors,paladdress,ramaddress
00001FDA                            	dc.b duration, colors
00001FDA                            	dc.w paladdress, ramaddress
00001FDA                            	endm
00001FDA                            
00001FDA                            ; duration in frames, number of colors, palette address, RAM address
00001FDA                            
00001FDA                            Pal_SBZCycList1:
00001FDA 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00001FDC 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001FE2 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001FE8 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00001FEE 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00001FF4 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001FFA 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00002000 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002006 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
0000200C 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00002012                            end_SBZCycList1:
00002012                            	even
00002012                            
00002012                            Pal_SBZCycList2:
00002012 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002014 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
0000201A 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00002020 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002026 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
0000202C 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002032 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002038 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000203E                            end_SBZCycList2:
0000203E                            	even
0000203E                            	even
0000203E                            
0000203E                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
0000204E                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
0000205E                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
0000206E                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
0000207A                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
0000208A                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
0000209A                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
000020BA                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
000020C4                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
000020D4                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
000020E0                            ; ---------------------------------------------------------------------------
000020E0                            ; Subroutine to	fade in from black
000020E0                            ; ---------------------------------------------------------------------------
000020E0                            
000020E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E0                            
000020E0                            
000020E0                            PaletteFadeIn:
000020E0 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
000020E6                            
000020E6                            PalFadeIn_Alt:				; start position and size are already set
000020E6 7000                       		moveq	#0,d0
000020E8 41F8 FB00                  		lea	(v_pal_dry).w,a0
000020EC 1038 F626                  		move.b	(v_pfade_start).w,d0
000020F0 D0C0                       		adda.w	d0,a0
000020F2 7200                       		moveq	#cBlack,d1
000020F4 1038 F627                  		move.b	(v_pfade_size).w,d0
000020F8                            
000020F8                            	@fill:
000020F8 30C1                       		move.w	d1,(a0)+
000020FA 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000020FE                            
000020FE 383C 0015                  		move.w	#$15,d4
00002102                            
00002102                            	@mainloop:
00002102 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002108 6100 0000                  		bsr.w	WaitForVBla
0000210C 6100                       		bsr.s	FadeIn_FromBlack
0000210E 6100 F64A                  		bsr.w	RunPLC
00002112 51CC FFEE                  		dbf	d4,@mainloop
00002116 4E75                       		rts	
00002118                            ; End of function PaletteFadeIn
00002118                            
00002118                            
00002118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002118                            
00002118                            
00002118                            FadeIn_FromBlack:
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000211E 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002122 1038 F626                  		move.b	(v_pfade_start).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000212E                            
0000212E                            	@addcolour:
0000212E 6100                       		bsr.s	FadeIn_AddColour ; increase colour
00002130 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002134                            
00002134 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000213A 6600                       		bne.s	@exit		; if not, branch
0000213C                            
0000213C 7000                       		moveq	#0,d0
0000213E 41F8 FA80                  		lea	(v_pal_water).w,a0
00002142 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002146 1038 F626                  		move.b	(v_pfade_start).w,d0
0000214A D0C0                       		adda.w	d0,a0
0000214C D2C0                       		adda.w	d0,a1
0000214E 1038 F627                  		move.b	(v_pfade_size).w,d0
00002152                            
00002152                            	@addcolour2:
00002152 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002154 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00002158                            
00002158                            @exit:
00002158 4E75                       		rts	
0000215A                            ; End of function FadeIn_FromBlack
0000215A                            
0000215A                            
0000215A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000215A                            
0000215A                            
0000215A                            FadeIn_AddColour:
0000215A                            @addblue:
0000215A 3419                       		move.w	(a1)+,d2
0000215C 3610                       		move.w	(a0),d3
0000215E B642                       		cmp.w	d2,d3		; is colour already at threshold level?
00002160 6700                       		beq.s	@next		; if yes, branch
00002162 3203                       		move.w	d3,d1
00002164 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002168 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000216A 6200                       		bhi.s	@addgreen	; if yes, branch
0000216C 30C1                       		move.w	d1,(a0)+	; update palette
0000216E 4E75                       		rts	
00002170                            ; ===========================================================================
00002170                            
00002170                            @addgreen:
00002170 3203                       		move.w	d3,d1
00002172 0641 0020                  		addi.w	#$20,d1		; increase green value
00002176 B242                       		cmp.w	d2,d1
00002178 6200                       		bhi.s	@addred
0000217A 30C1                       		move.w	d1,(a0)+	; update palette
0000217C 4E75                       		rts	
0000217E                            ; ===========================================================================
0000217E                            
0000217E                            @addred:
0000217E 5458                       		addq.w	#2,(a0)+	; increase red value
00002180 4E75                       		rts	
00002182                            ; ===========================================================================
00002182                            
00002182                            @next:
00002182 5448                       		addq.w	#2,a0		; next colour
00002184 4E75                       		rts	
00002186                            ; End of function FadeIn_AddColour
00002186                            
00002186                            
00002186                            ; ---------------------------------------------------------------------------
00002186                            ; Subroutine to fade out to black
00002186                            ; ---------------------------------------------------------------------------
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            PaletteFadeOut:
00002186 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000218C 383C 0015                  		move.w	#$15,d4
00002190                            
00002190                            	@mainloop:
00002190 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002196 6100 0000                  		bsr.w	WaitForVBla
0000219A 6100                       		bsr.s	FadeOut_ToBlack
0000219C 6100 F5BC                  		bsr.w	RunPLC
000021A0 51CC FFEE                  		dbf	d4,@mainloop
000021A4 4E75                       		rts	
000021A6                            ; End of function PaletteFadeOut
000021A6                            
000021A6                            
000021A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A6                            
000021A6                            
000021A6                            FadeOut_ToBlack:
000021A6 7000                       		moveq	#0,d0
000021A8 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021AC 1038 F626                  		move.b	(v_pfade_start).w,d0
000021B0 D0C0                       		adda.w	d0,a0
000021B2 1038 F627                  		move.b	(v_pfade_size).w,d0
000021B6                            
000021B6                            	@decolour:
000021B6 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
000021B8 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000021BC                            
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FA80                  		lea	(v_pal_water).w,a0
000021C2 1038 F626                  		move.b	(v_pfade_start).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	(v_pfade_size).w,d0
000021CC                            
000021CC                            	@decolour2:
000021CC 6100                       		bsr.s	FadeOut_DecColour
000021CE 51C8 FFFC                  		dbf	d0,@decolour2
000021D2 4E75                       		rts	
000021D4                            ; End of function FadeOut_ToBlack
000021D4                            
000021D4                            
000021D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D4                            
000021D4                            
000021D4                            FadeOut_DecColour:
000021D4                            @dered:
000021D4 3410                       		move.w	(a0),d2
000021D6 6700                       		beq.s	@next
000021D8 3202                       		move.w	d2,d1
000021DA 0241 000E                  		andi.w	#$E,d1
000021DE 6700                       		beq.s	@degreen
000021E0 5558                       		subq.w	#2,(a0)+	; decrease red value
000021E2 4E75                       		rts	
000021E4                            ; ===========================================================================
000021E4                            
000021E4                            @degreen:
000021E4 3202                       		move.w	d2,d1
000021E6 0241 00E0                  		andi.w	#$E0,d1
000021EA 6700                       		beq.s	@deblue
000021EC 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000021F0 4E75                       		rts	
000021F2                            ; ===========================================================================
000021F2                            
000021F2                            @deblue:
000021F2 3202                       		move.w	d2,d1
000021F4 0241 0E00                  		andi.w	#$E00,d1
000021F8 6700                       		beq.s	@next
000021FA 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000021FE 4E75                       		rts	
00002200                            ; ===========================================================================
00002200                            
00002200                            @next:
00002200 5448                       		addq.w	#2,a0
00002202 4E75                       		rts	
00002204                            ; End of function FadeOut_DecColour
00002204                            
00002204                            ; ---------------------------------------------------------------------------
00002204                            ; Subroutine to	fade in from white (Special Stage)
00002204                            ; ---------------------------------------------------------------------------
00002204                            
00002204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002204                            
00002204                            
00002204                            PaletteWhiteIn:
00002204 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000220A 7000                       		moveq	#0,d0
0000220C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002210 1038 F626                  		move.b	(v_pfade_start).w,d0
00002214 D0C0                       		adda.w	d0,a0
00002216 323C 0EEE                  		move.w	#cWhite,d1
0000221A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000221E                            
0000221E                            	@fill:
0000221E 30C1                       		move.w	d1,(a0)+
00002220 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002224                            
00002224 383C 0015                  		move.w	#$15,d4
00002228                            
00002228                            	@mainloop:
00002228 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000222E 6100 0000                  		bsr.w	WaitForVBla
00002232 6100                       		bsr.s	WhiteIn_FromWhite
00002234 6100 F524                  		bsr.w	RunPLC
00002238 51CC FFEE                  		dbf	d4,@mainloop
0000223C 4E75                       		rts	
0000223E                            ; End of function PaletteWhiteIn
0000223E                            
0000223E                            
0000223E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223E                            
0000223E                            
0000223E                            WhiteIn_FromWhite:
0000223E 7000                       		moveq	#0,d0
00002240 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002244 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002248 1038 F626                  		move.b	(v_pfade_start).w,d0
0000224C D0C0                       		adda.w	d0,a0
0000224E D2C0                       		adda.w	d0,a1
00002250 1038 F627                  		move.b	(v_pfade_size).w,d0
00002254                            
00002254                            	@decolour:
00002254 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00002256 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
0000225A                            
0000225A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002260 6600                       		bne.s	@exit		; if not, branch
00002262 7000                       		moveq	#0,d0
00002264 41F8 FA80                  		lea	(v_pal_water).w,a0
00002268 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
0000226C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002270 D0C0                       		adda.w	d0,a0
00002272 D2C0                       		adda.w	d0,a1
00002274 1038 F627                  		move.b	(v_pfade_size).w,d0
00002278                            
00002278                            	@decolour2:
00002278 6100                       		bsr.s	WhiteIn_DecColour
0000227A 51C8 FFFC                  		dbf	d0,@decolour2
0000227E                            
0000227E                            	@exit:
0000227E 4E75                       		rts	
00002280                            ; End of function WhiteIn_FromWhite
00002280                            
00002280                            
00002280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002280                            
00002280                            
00002280                            WhiteIn_DecColour:
00002280                            @deblue:
00002280 3419                       		move.w	(a1)+,d2
00002282 3610                       		move.w	(a0),d3
00002284 B642                       		cmp.w	d2,d3
00002286 6700                       		beq.s	@next
00002288 3203                       		move.w	d3,d1
0000228A 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000228E 6500                       		blo.s	@degreen
00002290 B242                       		cmp.w	d2,d1
00002292 6500                       		blo.s	@degreen
00002294 30C1                       		move.w	d1,(a0)+
00002296 4E75                       		rts	
00002298                            ; ===========================================================================
00002298                            
00002298                            @degreen:
00002298 3203                       		move.w	d3,d1
0000229A 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000229E 6500                       		blo.s	@dered
000022A0 B242                       		cmp.w	d2,d1
000022A2 6500                       		blo.s	@dered
000022A4 30C1                       		move.w	d1,(a0)+
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            @dered:
000022A8 5558                       		subq.w	#2,(a0)+	; decrease red value
000022AA 4E75                       		rts	
000022AC                            ; ===========================================================================
000022AC                            
000022AC                            @next:
000022AC 5448                       		addq.w	#2,a0
000022AE 4E75                       		rts	
000022B0                            ; End of function WhiteIn_DecColour
000022B0                            
000022B0                            ; ---------------------------------------------------------------------------
000022B0                            ; Subroutine to fade to white (Special Stage)
000022B0                            ; ---------------------------------------------------------------------------
000022B0                            
000022B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B0                            
000022B0                            
000022B0                            PaletteWhiteOut:
000022B0 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000022B6 383C 0015                  		move.w	#$15,d4
000022BA                            
000022BA                            	@mainloop:
000022BA 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022C0 6100 0000                  		bsr.w	WaitForVBla
000022C4 6100                       		bsr.s	WhiteOut_ToWhite
000022C6 6100 F492                  		bsr.w	RunPLC
000022CA 51CC FFEE                  		dbf	d4,@mainloop
000022CE 4E75                       		rts	
000022D0                            ; End of function PaletteWhiteOut
000022D0                            
000022D0                            
000022D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022D0                            
000022D0                            
000022D0                            WhiteOut_ToWhite:
000022D0 7000                       		moveq	#0,d0
000022D2 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022D6 1038 F626                  		move.b	(v_pfade_start).w,d0
000022DA D0C0                       		adda.w	d0,a0
000022DC 1038 F627                  		move.b	(v_pfade_size).w,d0
000022E0                            
000022E0                            	@addcolour:
000022E0 6100                       		bsr.s	WhiteOut_AddColour
000022E2 51C8 FFFC                  		dbf	d0,@addcolour
000022E6                            
000022E6 7000                       		moveq	#0,d0
000022E8 41F8 FA80                  		lea	(v_pal_water).w,a0
000022EC 1038 F626                  		move.b	(v_pfade_start).w,d0
000022F0 D0C0                       		adda.w	d0,a0
000022F2 1038 F627                  		move.b	(v_pfade_size).w,d0
000022F6                            
000022F6                            	@addcolour2:
000022F6 6100                       		bsr.s	WhiteOut_AddColour
000022F8 51C8 FFFC                  		dbf	d0,@addcolour2
000022FC 4E75                       		rts	
000022FE                            ; End of function WhiteOut_ToWhite
000022FE                            
000022FE                            
000022FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FE                            
000022FE                            
000022FE                            WhiteOut_AddColour:
000022FE                            @addred:
000022FE 3410                       		move.w	(a0),d2
00002300 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002304 6700                       		beq.s	@next
00002306 3202                       		move.w	d2,d1
00002308 0241 000E                  		andi.w	#$E,d1
0000230C 0C41 000E                  		cmpi.w	#cRed,d1
00002310 6700                       		beq.s	@addgreen
00002312 5458                       		addq.w	#2,(a0)+	; increase red value
00002314 4E75                       		rts	
00002316                            ; ===========================================================================
00002316                            
00002316                            @addgreen:
00002316 3202                       		move.w	d2,d1
00002318 0241 00E0                  		andi.w	#$E0,d1
0000231C 0C41 00E0                  		cmpi.w	#cGreen,d1
00002320 6700                       		beq.s	@addblue
00002322 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002326 4E75                       		rts	
00002328                            ; ===========================================================================
00002328                            
00002328                            @addblue:
00002328 3202                       		move.w	d2,d1
0000232A 0241 0E00                  		andi.w	#$E00,d1
0000232E 0C41 0E00                  		cmpi.w	#cBlue,d1
00002332 6700                       		beq.s	@next
00002334 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002338 4E75                       		rts	
0000233A                            ; ===========================================================================
0000233A                            
0000233A                            @next:
0000233A 5448                       		addq.w	#2,a0
0000233C 4E75                       		rts	
0000233E                            ; End of function WhiteOut_AddColour
0000233E                            
0000233E                            ; ---------------------------------------------------------------------------
0000233E                            ; Palette cycling routine - Sega logo
0000233E                            ; ---------------------------------------------------------------------------
0000233E                            
0000233E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233E                            
0000233E                            
0000233E                            PalCycle_Sega:
0000233E 4A38 F635                  		tst.b	(v_pcyc_time+1).w
00002342 6600                       		bne.s	loc_206A
00002344 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002348 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000234E 7205                       		moveq	#5,d1
00002350 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002354                            
00002354                            loc_2020:
00002354 6A00                       		bpl.s	loc_202A
00002356 5448                       		addq.w	#2,a0
00002358 5341                       		subq.w	#1,d1
0000235A 5440                       		addq.w	#2,d0
0000235C 60F6                       		bra.s	loc_2020
0000235E                            ; ===========================================================================
0000235E                            
0000235E                            loc_202A:
0000235E 3400                       		move.w	d0,d2
00002360 0242 001E                  		andi.w	#$1E,d2
00002364 6600                       		bne.s	loc_2034
00002366 5440                       		addq.w	#2,d0
00002368                            
00002368                            loc_2034:
00002368 0C40 0060                  		cmpi.w	#$60,d0
0000236C 6400                       		bhs.s	loc_203E
0000236E 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002372                            
00002372                            loc_203E:
00002372 5440                       		addq.w	#2,d0
00002374 51C9 FFE8                  		dbf	d1,loc_202A
00002378                            
00002378 3038 F632                  		move.w	(v_pcyc_num).w,d0
0000237C 5440                       		addq.w	#2,d0
0000237E 3400                       		move.w	d0,d2
00002380 0242 001E                  		andi.w	#$1E,d2
00002384 6600                       		bne.s	loc_2054
00002386 5440                       		addq.w	#2,d0
00002388                            
00002388                            loc_2054:
00002388 0C40 0064                  		cmpi.w	#$64,d0
0000238C 6D00                       		blt.s	loc_2062
0000238E 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002394 70F4                       		moveq	#-$C,d0
00002396                            
00002396                            loc_2062:
00002396 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000239A 7001                       		moveq	#1,d0
0000239C 4E75                       		rts	
0000239E                            ; ===========================================================================
0000239E                            
0000239E                            loc_206A:
0000239E 5338 F634                  		subq.b	#1,(v_pcyc_time).w
000023A2 6A00                       		bpl.s	loc_20BC
000023A4 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000023AA 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023AE 0640 000C                  		addi.w	#$C,d0
000023B2 0C40 0030                  		cmpi.w	#$30,d0
000023B6 6500                       		blo.s	loc_2088
000023B8 7000                       		moveq	#0,d0
000023BA 4E75                       		rts	
000023BC                            ; ===========================================================================
000023BC                            
000023BC                            loc_2088:
000023BC 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000023C0 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023C6 41F0 0000                  		lea	(a0,d0.w),a0
000023CA 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
000023CE 22D8                       		move.l	(a0)+,(a1)+
000023D0 22D8                       		move.l	(a0)+,(a1)+
000023D2 3298                       		move.w	(a0)+,(a1)
000023D4 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000023D8 7000                       		moveq	#0,d0
000023DA 722C                       		moveq	#$2C,d1
000023DC                            
000023DC                            loc_20A8:
000023DC 3400                       		move.w	d0,d2
000023DE 0242 001E                  		andi.w	#$1E,d2
000023E2 6600                       		bne.s	loc_20B2
000023E4 5440                       		addq.w	#2,d0
000023E6                            
000023E6                            loc_20B2:
000023E6 3390 0000                  		move.w	(a0),(a1,d0.w)
000023EA 5440                       		addq.w	#2,d0
000023EC 51C9 FFEE                  		dbf	d1,loc_20A8
000023F0                            
000023F0                            loc_20BC:
000023F0 7001                       		moveq	#1,d0
000023F2 4E75                       		rts	
000023F4                            ; End of function PalCycle_Sega
000023F4                            
000023F4                            ; ===========================================================================
000023F4                            
000023F4                            Pal_Sega1:	incbin	"palette\Sega1.bin"
00002400                            Pal_Sega2:	incbin	"palette\Sega2.bin"
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Subroutines to load palettes
00002430                            
00002430                            ; input:
00002430                            ;	d0 = index number for palette
00002430                            ; ---------------------------------------------------------------------------
00002430                            
00002430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002430                            
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Subroutines to load pallets
00002430                            ; ---------------------------------------------------------------------------
00002430                            
00002430                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002430                            
00002430                            PalLoad1:
00002430 1238 FE11                  		move.b ($FFFFFE11),d1
00002434 43F9 0000 0000             		lea (PalPointers).l,a1
0000243A 0C01 0000                  		cmp.b #0,d1
0000243E 6700 0000                  		beq.w PalLoad1_Continue
00002442 43F9 0000 0000             		lea (PalPointers2).l,a1
00002448 0C01 0001                  		cmp.b #1,d1
0000244C 6700 0000                  		beq.w PalLoad1_Continue
00002450 43F9 0000 0000             		lea (PalPointers3).l,a1
00002456                            
00002456                            PalLoad1_Continue:
00002456 E748                       		lsl.w #3,d0
00002458 D2C0                       		adda.w d0,a1
0000245A 2459                       		movea.l (a1)+,a2
0000245C 3659                       		movea.w (a1)+,a3
0000245E D6FC 0080                  		adda.w #$80,a3
00002462 3E19                       		move.w (a1)+,d7
00002464                            
00002464                            loc_2110:
00002464 26DA                       		move.l (a2)+,(a3)+
00002466 51CF FFFC                  		dbf d7,loc_2110
0000246A 4E75                       		rts
0000246C                             ; End of function PalLoad1
0000246C                            
0000246C                            
0000246C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000246C                            
0000246C                            PalLoad2:
0000246C 1238 FE11                  		move.b ($FFFFFE11),d1
00002470 43F9 0000 0000             		lea (PalPointers).l,a1
00002476 0C01 0000                  		cmp.b #0,d1
0000247A 6700 0000                  		beq.w PalLoad2_Continue
0000247E 43F9 0000 0000             		lea (PalPointers2).l,a1
00002484 0C01 0001                  		cmp.b #1,d1
00002488 6700 0000                  		beq.w PalLoad2_Continue
0000248C 43F9 0000 0000             		lea (PalPointers3).l,a1
00002492                            
00002492                            
00002492                            PalLoad2_Continue:
00002492 E748                       		lsl.w #3,d0
00002494 D2C0                       		adda.w d0,a1
00002496 2459                       		movea.l (a1)+,a2
00002498 3659                       		movea.w (a1)+,a3
0000249A 3E19                       		move.w (a1)+,d7
0000249C                            
0000249C                            loc_2128:
0000249C 26DA                       		move.l (a2)+,(a3)+
0000249E 51CF FFFC                  		dbf d7,loc_2128
000024A2 4E75                       		rts
000024A4                            ; End of function PalLoad2
000024A4                            
000024A4                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000024A4                            
000024A4                            
000024A4                            PalLoad_Loop: ;Quick load - TIS
000024A4                                    
000024A4 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000024A6 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000024AA 4E75                               rts
000024AC                            
000024AC                            ; ---------------------------------------------------------------------------
000024AC                            ; Underwater pallet loading subroutine
000024AC                            ; ---------------------------------------------------------------------------
000024AC                            
000024AC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024AC                            
000024AC                            PalLoad3_Water:
000024AC 1238 FE11                  		move.b ($FFFFFE11),d1
000024B0 43F9 0000 0000             		lea (PalPointers).l,a1
000024B6 0C01 0000                  		cmp.b #0,d1
000024BA 6700 0000                  		beq.w PalLoad3_Continue
000024BE 43F9 0000 0000             		lea (PalPointers2).l,a1
000024C4 0C01 0001                  		cmp.b #1,d1
000024C8 6700 0000                  		beq.w PalLoad3_Continue
000024CC 43F9 0000 0000             		lea (PalPointers3).l,a1
000024D2                            
000024D2                            PalLoad3_Continue:
000024D2 E748                       		lsl.w #3,d0
000024D4 D2C0                       		adda.w d0,a1
000024D6 2459                       		movea.l (a1)+,a2
000024D8 3659                       		movea.w (a1)+,a3
000024DA 96FC 0080                  		suba.w #$80,a3
000024DE 3E19                       		move.w (a1)+,d7
000024E0                            
000024E0                            loc_2144:
000024E0 26DA                       		move.l (a2)+,(a3)+
000024E2 51CF FFFC                  		dbf d7,loc_2144
000024E6 4E75                       		rts
000024E8                            ; End of function PalLoad3_Water
000024E8                            
000024E8                            
000024E8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024E8                            
000024E8                            
000024E8                            PalLoad4_Water:
000024E8 1238 FE11                  		move.b ($FFFFFE11),d1
000024EC 43F9 0000 0000             		lea (PalPointers).l,a1
000024F2 0C01 0000                  		cmp.b #0,d1
000024F6 6700 0000                  		beq.w PalLoad4_Continue
000024FA 43F9 0000 0000             		lea (PalPointers2).l,a1
00002500 0C01 0001                  		cmp.b #1,d1
00002504 6700 0000                  		beq.w PalLoad4_Continue
00002508 43F9 0000 0000             		lea (PalPointers3).l,a1
0000250E                            
0000250E                            PalLoad4_Continue:
0000250E E748                       		lsl.w #3,d0
00002510 D2C0                       		adda.w d0,a1
00002512 2459                       		movea.l (a1)+,a2
00002514 3659                       		movea.w (a1)+,a3
00002516 96FC 0100                  		suba.w #$100,a3
0000251A 3E19                       		move.w (a1)+,d7
0000251C                            loc_2160:
0000251C 26DA                       		move.l (a2)+,(a3)+
0000251E 51CF FFFC                  		dbf d7,loc_2160
00002522 4E75                       		rts
00002524                             ; End of function PalLoad4_Water
00002524                            
00002524                            ; ===========================================================================
00002524                            
00002524                            		include	"_inc\Palette Pointers.asm"
00002524                            ; ---------------------------------------------------------------------------
00002524                            ; Palette pointers
00002524                            ; ---------------------------------------------------------------------------
00002524                            
00002524                            palp:	macro paladdress,ramaddress,colors
00002524                            	dc.l paladdress
00002524                            	dc.w ramaddress, (colors>>1)-1
00002524                            	endm
00002524                            
00002524                            PalPointers:
00002524                            
00002524                            ; palette address, RAM address, colors
00002524                            
00002524 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
0000252C 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002534 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
0000253C 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002544                            Pal_Levels:
00002544 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
0000254C 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002554 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
0000255C 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002564 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
0000256C 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002574 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
0000257C 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002584 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
0000258C 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002594 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
0000259C 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000025A4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000025AC 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000025B4 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000025BC 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000025C4 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
000025CC 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
000025D4 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
000025DC 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
000025E4 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000025EC 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000025F4 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000025FC 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
00002604 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
0000260C 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002614 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
0000261C 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (21) - Sonic Underwater (Beta)
00002624 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (22) - Sonic Underwater (Midnight)
0000262C 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (23) - Sonic Underwater (C2)
00002634 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (24) - Sonic Underwater (Crackers)
0000263C 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (25) - Sonic Underwater (RHS)
00002644 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (26) - Sonic Underwater (Socket)
0000264C 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (27) - Sonic Underwater (Cringe)
00002654 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (28) - Sonic Underwater (Darker)
0000265C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002664 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (21) - Sonic Underwater (Beta)
0000266C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (22) - Sonic Underwater (Midnight)
00002674 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (23) - Sonic Underwater (C2)
0000267C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (24) - Sonic Underwater (Crackers)
00002684 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (25) - Sonic Underwater (RHS)
0000268C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (26) - Sonic Underwater (Socket)
00002694 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (27) - Sonic Underwater (Cringe)
0000269C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (28) - Sonic Underwater (Darker)
000026A4                            			even
000026A4                            
000026A4                            PalPointers2:
000026A4                            
000026A4                            ; palette address, RAM address, colors
000026A4                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000026A4 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000026AC 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000026B4 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000026BC 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000026C4                            Pal_Levels_2:
000026C4 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
000026CC 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000026D4 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000026DC 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000026E4 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000026EC 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000026F4 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000026FC 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002704 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
0000270C 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002714 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
0000271C 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002724 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
0000272C 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002734 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
0000273C 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002744 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
0000274C 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002754 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
0000275C 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002764 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
0000276C 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002774 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
0000277C 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002784 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
0000278C 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002794 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
0000279C 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
000027A4 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
000027AC 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
000027B4 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
000027BC 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
000027C4 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
000027CC 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
000027D4 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
000027DC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
000027E4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
000027EC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
000027F4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
000027FC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002804 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
0000280C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002814 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
0000281C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
00002824                            			even
00002824                            			
00002824                            PalPointers3:
00002824                            			
00002824                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002824 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
0000282C 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002834 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
0000283C 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002844                            Pal_Levels_3:
00002844 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
0000284C 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002854 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
0000285C 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002864 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
0000286C 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002874 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
0000287C 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002884 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
0000288C 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002894 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
0000289C 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000028A4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000028AC 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000028B4 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000028BC 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000028C4 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
000028CC 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000028D4 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000028DC 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000028E4 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000028EC 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000028F4 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000028FC 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002904 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
0000290C 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002914 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
0000291C 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
00002924 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
0000292C 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
00002934 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
0000293C 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
00002944 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
0000294C 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
00002954 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
0000295C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
00002964 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
0000296C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
00002974 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
0000297C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002984 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
0000298C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002994 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
0000299C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
000029A4                            			even
000029A4                            
000029A4                            
000029A4 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
000029A4 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
000029A4 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
000029A4 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
000029A4 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A4 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
000029A4 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
000029A4 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A4 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A4 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
000029A4 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
000029A4 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
000029A4 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
000029A4 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
000029A4 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
000029A4 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A4 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
000029A4 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
000029A4 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
000029A4 =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
000029A4 =00000014                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
000029A4 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A4 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
000029A4 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
000029A4 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A4 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A4 =0000003B                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
000029A4 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A4 =00000064                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
000029A4 =00000065                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
000029A4 =00000066                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
000029A4 =00000067                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
000029A4 =00000068                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
000029A4 =0000006B                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
000029A4 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A4 =00000015                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
000029A4 =00000016                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
000029A4 =00000017                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
000029A4 =00000018                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
000029A4 =00000019                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
000029A4 =0000001A                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
000029A4 =0000001B                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
000029A4 =0000001C                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
000029A4 =0000001D                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
000029A4 =0000001E                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
000029A4 =0000001F                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
000029A4 =00000020                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
000029A4 =00000021                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
000029A4 =00000022                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
000029A4 =00000023                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
000029A4 =00000024                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
000029A4 =00000025                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
000029A4 =00000026                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
000029A4 =00000027                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
000029A4 =00000028                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
000029A4 =00000029                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
000029A4 =0000002A                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
000029A4 =0000002B                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
000029A4 =0000002C                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
000029A4 =0000002D                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
000029A4 =0000002E                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
000029A4 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A4 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A4                            		
000029A4                            		;include	"_inc\Palette Pointers2.asm"
000029A4                            		
000029A4                            		;include	"_inc\Palette Pointers3.asm"
000029A4                            		
000029A4                            
000029A4                            ; ---------------------------------------------------------------------------
000029A4                            ; Palette data
000029A4                            ; ---------------------------------------------------------------------------
000029A4                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002A24                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002AA4                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002B24                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002B44                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002BA4                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002C04                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002C64                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002CC4                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002D24                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002D84                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002E04                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002E84                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002F04                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00002F64                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00002FC4                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003024                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003084                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
000030E4                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003144                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000031A4                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003204                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003264                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000032C4                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003324                            Pal_Special:	incbin	"palette\Special Stage.bin"
000033A4                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003404                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003484                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000034A4                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000034C4                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
000034E4                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003564                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000035A4                            Pal_Ending:	incbin	"palette\Ending.bin"
00003624                            Pal_Options:	incbin	"palette\Options.bin"
000036A4                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000036C4                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
000036E4                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003704                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003724                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003744                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003764                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003784                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000037A4                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000037C4                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
000037E4                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003804                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003824                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003844                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003864                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003884                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
000038A4                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
000038C4                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
000038E4                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003904                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003924                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003944                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003964                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003984                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
000039A4                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
000039C4                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
000039E4                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003A04                            ; ---------------------------------------------------------------------------
00003A04                            ; Subroutine to	wait for VBlank routines to complete
00003A04                            ; ---------------------------------------------------------------------------
00003A04                            
00003A04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A04                            
00003A04                            
00003A04                            WaitForVBla:
00003A04 46FC 2300                  		enable_ints
00003A08                            
00003A08                            	@wait:
00003A08 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003A0C 66FA                       		bne.s	@wait		; if not, branch
00003A0E 4E75                       		rts	
00003A10                            ; End of function WaitForVBla
00003A10                            
00003A10                            		include	"_incObj\sub RandomNumber.asm"
00003A10                            ; ---------------------------------------------------------------------------
00003A10                            ; Subroutine to	generate a pseudo-random number	in d0
00003A10                            ; ---------------------------------------------------------------------------
00003A10                            
00003A10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A10                            
00003A10                            
00003A10                            RandomNumber:
00003A10 2238 F636                  		move.l	(v_random).w,d1
00003A14 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003A16 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003A1C                            
00003A1C                            	@scramble:
00003A1C 2001                       		move.l	d1,d0
00003A1E E581                       		asl.l	#2,d1
00003A20 D280                       		add.l	d0,d1
00003A22 E781                       		asl.l	#3,d1
00003A24 D280                       		add.l	d0,d1
00003A26 3001                       		move.w	d1,d0
00003A28 4841                       		swap	d1
00003A2A D041                       		add.w	d1,d0
00003A2C 3200                       		move.w	d0,d1
00003A2E 4841                       		swap	d1
00003A30 21C1 F636                  		move.l	d1,(v_random).w
00003A34 4E75                       		rts	
00003A34 4E75                       		rts	
00003A36                            		include	"_incObj\sub CalcSine.asm"
00003A36                            ; ---------------------------------------------------------------------------
00003A36                            ; Subroutine calculate a sine
00003A36                            
00003A36                            ; input:
00003A36                            ;	d0 = angle
00003A36                            
00003A36                            ; output:
00003A36                            ;	d0 = sine
00003A36                            ;	d1 = cosine
00003A36                            ; ---------------------------------------------------------------------------
00003A36                            
00003A36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A36                            
00003A36                            
00003A36                            CalcSine:
00003A36 0240 00FF                          andi.w  #$FF,d0
00003A3A 5040                               addq.w  #8,d0
00003A3C D040                               add.w   d0,d0
00003A3E 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003A42 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003A46 4E75                               rts
00003A48                            ; End of function CalcSine
00003A48                            
00003A48                            ; ===========================================================================
00003A48                            
00003A48                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003CC8                            
00003CC8                            ; ===========================================================================
00003CC8                            ; ===========================================================================
00003CC8                            		include	"_incObj\sub CalcAngle.asm"
00003CC8                            ; ---------------------------------------------------------------------------
00003CC8                            ; Subroutine calculate an angle
00003CC8                            
00003CC8                            ; input:
00003CC8                            ;	d1 = x-axis distance
00003CC8                            ;	d2 = y-axis distance
00003CC8                            
00003CC8                            ; output:
00003CC8                            ;	d0 = angle
00003CC8                            ; ---------------------------------------------------------------------------
00003CC8                            
00003CC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CC8                            
00003CC8                            
00003CC8                            CalcAngle:
00003CC8 48E7 1800                  		movem.l	d3-d4,-(sp)
00003CCC 7600                       		moveq	#0,d3
00003CCE 7800                       		moveq	#0,d4
00003CD0 3601                       		move.w	d1,d3
00003CD2 3802                       		move.w	d2,d4
00003CD4 8843                       		or.w	d3,d4
00003CD6 6700                       		beq.s	loc_2D04
00003CD8 3802                       		move.w	d2,d4
00003CDA 4A43                       		tst.w	d3
00003CDC 6A00 0000                  		bpl.w	loc_2CC2
00003CE0 4443                       		neg.w	d3
00003CE2                            
00003CE2                            loc_2CC2:
00003CE2 4A44                       		tst.w	d4
00003CE4 6A00 0000                  		bpl.w	loc_2CCA
00003CE8 4444                       		neg.w	d4
00003CEA                            
00003CEA                            loc_2CCA:
00003CEA B843                       		cmp.w	d3,d4
00003CEC 6400 0000                  		bcc.w	loc_2CDC
00003CF0 E18C                       		lsl.l	#8,d4
00003CF2 88C3                       		divu.w	d3,d4
00003CF4 7000                       		moveq	#0,d0
00003CF6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003CFA 6000                       		bra.s	loc_2CE6
00003CFC                            ; ===========================================================================
00003CFC                            
00003CFC                            loc_2CDC:
00003CFC E18B                       		lsl.l	#8,d3
00003CFE 86C4                       		divu.w	d4,d3
00003D00 7040                       		moveq	#$40,d0
00003D02 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003D06                            
00003D06                            loc_2CE6:
00003D06 4A41                       		tst.w	d1
00003D08 6A00 0000                  		bpl.w	loc_2CF2
00003D0C 4440                       		neg.w	d0
00003D0E 0640 0080                  		addi.w	#$80,d0
00003D12                            
00003D12                            loc_2CF2:
00003D12 4A42                       		tst.w	d2
00003D14 6A00 0000                  		bpl.w	loc_2CFE
00003D18 4440                       		neg.w	d0
00003D1A 0640 0100                  		addi.w	#$100,d0
00003D1E                            
00003D1E                            loc_2CFE:
00003D1E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D22 4E75                       		rts	
00003D24                            ; ===========================================================================
00003D24                            
00003D24                            loc_2D04:
00003D24 303C 0040                  		move.w	#$40,d0
00003D28 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D2C 4E75                       		rts	
00003D2E                            ; End of function CalcAngle
00003D2E                            
00003D2E                            ; ===========================================================================
00003D2E                            
00003D2E                            Angle_Data:	incbin	"misc\angles.bin"
00003E30                            
00003E30                            ; ===========================================================================
00003E30                            ; ===========================================================================
00003E30                            
00003E30                            ; ---------------------------------------------------------------------------
00003E30                            ; Sega screen
00003E30                            ; ---------------------------------------------------------------------------
00003E30                            
00003E30                            GM_Sega:
00003E38 6100 D912                  		bsr.w	ClearPLC
00003E3C 6100 E348                  		bsr.w	PaletteFadeOut
00003E40 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003E46 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003E4A 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003E4E 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003E52 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003E56 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003E5A 4238 F64E                  		clr.b	(f_wtr_state).w
00003E5E 46FC 2700                  		disable_ints
00003E62 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003E66 0200 00BF                  		andi.b	#$BF,d0
00003E6A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003E70 6100 D312                  		bsr.w	ClearScreen
00003E7E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003E84 6100 D47C                  		bsr.w	NemDec
00003E88 43F9 00FF 0000             		lea	($FF0000).l,a1
00003E8E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003E94 303C 0000                  		move.w	#0,d0
00003E98 6100 D9F2                  		bsr.w	EniDec
00003E9C                            
00003E9C 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003EB0 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003EC4                            
00003EC4 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003EC8 6B00                       			bmi.s   @loadpal
00003ECA 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003EDE                            
00003EDE                            	@loadpal:
00003EDE 7000                       		moveq	#palid_SegaBG,d0
00003EE0 6100 E58A                  		bsr.w	PalLoad2	; load Sega logo palette
00003EE4 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003EEA 7E3F                               moveq    #$3F,d7
00003EEC                             
00003EEC                                .loop:
00003EEC 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003EF0 51CF FFFA                          dbf        d7,.loop
00003EF4 6100 E1EA                          bsr.w     PaletteFadeIn ; added to allow fade in			
00003EF8 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00003EFE 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00003F04 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00003F0A 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00003F10 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F14 0000 0040                  		ori.b	#$40,d0
00003F18 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F1E                            
00003F1E                            Sega_WaitPal:
00003F1E 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F24 6100 FADE                  		bsr.w	WaitForVBla
00003F28 6100 E414                  		bsr.w	PalCycle_Sega
00003F2C 66F0                       		bne.s	Sega_WaitPal
00003F2E                            
00003F36 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00003F3C 6100 FAC6                  		bsr.w	WaitForVBla
00003F40 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00003F46                            
00003F46                            Sega_WaitEnd:
00003F46 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F4C 6100 FAB6                  		bsr.w	WaitForVBla
00003F50 4A78 F614                  		tst.w	(v_demolength).w
00003F54 6700                       		beq.s	Sega_GotoTitle
00003F56 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00003F5C 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003F5E                            
00003F5E                            Sega_GotoTitle:
00003F5E 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00003F64 4E75                       		rts	
00003F66                            ; ===========================================================================
00003F66                            
00003F66                            ; ---------------------------------------------------------------------------
00003F66                            ; Title	screen
00003F66                            ; ---------------------------------------------------------------------------
00003F66                            
00003F66                            GM_Title:
00003F6E 6100 D7DC                  		bsr.w	ClearPLC
00003F72 6100 E212                  		bsr.w	PaletteFadeOut
00003F76 46FC 2700                  		disable_ints
00003F7A 6100 D28E                  		bsr.w	SoundDriverLoad
00003F7E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003F84 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00003F88 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003F8C 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003F90 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00003F94 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00003F98 3CBC 8B03                  		move.w	#$8B03,(a6)
00003F9C 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00003FA0 4238 F64E                  		clr.b	(f_wtr_state).w
00003FA4 6100 D1DE                  		bsr.w	ClearScreen
00003FA8 4EB9 0000 0000             		jsr		SHC2022 
00003FAE                            
00003FAE 43F8 D000                  		lea	(v_objspace).w,a1
00003FB2 7000                       		moveq	#0,d0
00003FB4 323C 07FF                  		move.w	#$7FF,d1
00003FB8                            
00003FB8                            	Tit_ClrObj1:
00003FB8 22C0                       		move.l	d0,(a1)+
00003FBA 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00003FBE                            
00003FC8 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003FCE 6100 D332                  		bsr.w	NemDec
00003FDC 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003FE2 6100 D31E                  		bsr.w	NemDec
00003FE6 43F9 00FF 0000             		lea	($FF0000).l,a1
00003FEC 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003FF2 303C 0000                  		move.w	#0,d0
00003FF6 6100 D894                  		bsr.w	EniDec
00003FFA                            
00003FFA 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
0000400E                            
0000400E 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00004012 7000                       		moveq	#cBlack,d0
00004014 323C 001F                  		move.w	#$1F,d1
00004018                            
00004018                            	Tit_ClrPal:
00004018 22C0                       		move.l	d0,(a1)+
0000401A 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
0000401E                            
0000401E 4EB9 0000 0000             		jsr		LoadPlayerPal
00004024 6100 E40A                  		bsr.w	PalLoad1
00004028 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
0000402E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004034 4EB9 0000 0000             		jsr	(BuildSprites).l
0000403A 6100 E0A4                  		bsr.w	PaletteFadeIn
0000403E 46FC 2700                  		disable_ints
0000404C 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00004052 6100 D2AE                  		bsr.w	NemDec
00004060 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004066 6100 D29A                  		bsr.w	NemDec
00004074 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
0000407A 6100 D286                  		bsr.w 	NemDec
0000407E 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000408C 4BF9 0000 0592             		lea	(Art_Text).l,a5	; load level select font
00004092 323C 028F                  		move.w	#$28F,d1
00004096                            
00004096                            	Tit_LoadText:
00004096 3C9D                       		move.w	(a5)+,(a6)
00004098 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
0000409C                            
0000409C 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
000040A2 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
000040A8 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
000040AE 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
000040B4 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000040BA 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000040C0 6100 0000                  		bsr.w	LevelSizeLoad
000040C4 6100 0000                  		bsr.w	DeformLayers
000040C8 43F8 B000                  		lea	(v_16x16).w,a1
000040CC 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000040D2 303C 0000                  		move.w	#0,d0
000040D6 6100 D7B4                  		bsr.w	EniDec
000040DA 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000040E0 43F9 00FF 0000             		lea	(v_256x256).l,a1
000040E6 6100 D922                  		bsr.w	KosDec
000040EA 6100 0000                  		bsr.w	LevelLayoutLoad
000040EE 6100 E096                  		bsr.w	PaletteFadeOut
000040F2 46FC 2700                  		disable_ints
000040F6 6100 D08C                  		bsr.w	ClearScreen
000040FA 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00004100 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004106 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000410A 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000410E 343C 6000                  		move.w	#$6000,d2
00004112 6100 0000                  		bsr.w	DrawChunks
00004116 43F9 00FF 0000             		lea	($FF0000).l,a1
0000411C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00004122 303C 0000                  		move.w	#0,d0
00004126 6100 D764                  		bsr.w	EniDec
0000412A                            
0000412A 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
0000413E                            
00004148 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
0000414E 6100 D1B2                  		bsr.w	NemDec
00004152 7001                       		moveq	#palid_Title,d0	; load title screen palette
00004154 6100 E2DA                  		bsr.w	PalLoad1
00004160 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
00004166 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
0000416C 43F8 D080                  		lea	(v_objspace+$80).w,a1
00004170 7000                       		moveq	#0,d0
00004172 323C 0007                  		move.w	#7,d1
00004176                            
00004176                            	Tit_ClrObj2:
00004176 22C0                       		move.l	d0,(a1)+
00004178 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
0000417C                            
0000417C 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
00004182 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
00004188 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
0000418C                            
0000418C 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00004190 6A00                       			bpl.s   @isjap		; if yes, branch
00004192                            
00004192 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00004198 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0000419E                            	@isjap:
0000419E 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
000041A4 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
000041AA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041B0 6100 0000                  		bsr.w	DeformLayers
000041B4 4EB9 0000 0000             		jsr	(BuildSprites).l
000041BA 7000                       		moveq	#plcid_Main,d0
000041BC 6100 D562                  		bsr.w	NewPLC
000041C0 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000041C6 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000041CC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000041D0 0000 0040                  		ori.b	#$40,d0
000041D4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000041DA 6100 DF04                  		bsr.w	PaletteFadeIn
000041DE                            
000041DE                            Tit_MainLoop:
000041DE 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000041E4 6100 F81E                  		bsr.w	WaitForVBla
000041E8 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041EE 6100 0000                  		bsr.w	DeformLayers
000041F2 4EB9 0000 0000             		jsr	(BuildSprites).l
000041F8 6100 DAF8                  		bsr.w	PCycle_Title
000041FC 6100 D55C                  		bsr.w	RunPLC
00004200 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004204 5440                       		addq.w	#2,d0
00004206 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
0000420A 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
0000420E 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00004210                            
00004210 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004216 4E75                       		rts	
00004218                            ; ===========================================================================
00004218                            
00004218                            Tit_ChkRegion:
00004218 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
0000421C 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
0000421E                            
0000421E 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00004224 6000                       		bra.s	Tit_EnterCheat
00004226                            
00004226                            	Tit_RegionJap:
00004226 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
0000422C                            
0000422C                            Tit_EnterCheat:
0000422C 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004230 D0C0                       		adda.w	d0,a0
00004232 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00004236 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
0000423A B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000423C 6600                       		bne.s	Tit_ResetCheat	; if not, branch
0000423E 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
00004242 4A00                       		tst.b	d0
00004244 6600                       		bne.s	Tit_CountC
00004246 41F8 FFE0                  		lea	(f_levselcheat).w,a0
0000424A 3238 FFE6                  		move.w	(v_title_ccount).w,d1
0000424E E249                       		lsr.w	#1,d1
00004250 0241 0003                  		andi.w	#3,d1
00004254 6700                       		beq.s	Tit_PlayRing
00004256 4A38 FFF8                  		tst.b	(v_megadrive).w
0000425A 6A00                       		bpl.s	Tit_PlayRing
0000425C 7201                       		moveq	#1,d1
0000425E 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
00004262                            
00004262                            	Tit_PlayRing:
00004262 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004270 6000                       		bra.s	Tit_CountC
00004272                            ; ===========================================================================
00004272                            
00004272                            Tit_ResetCheat:
00004272 4A00                       		tst.b	d0
00004274 6700                       		beq.s	Tit_CountC
00004276 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
0000427C 6700                       		beq.s	Tit_CountC
0000427E 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
00004284                            
00004284                            Tit_CountC:
00004284 1038 F605                  		move.b	(v_jpadpress1).w,d0
00004288 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
0000428C                            
0000428C                            loc_3230:
0000428C 4A78 F614                  		tst.w	(v_demolength).w
00004290 6700 0000                  		beq.w	GotoDemo
00004294 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
0000429A 6700 FF42                  		beq.w	Tit_MainLoop	; if not, branch
0000429E                            
0000429E                            Tit_ChkLevSel:
0000429E 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
000042A2 6700 0000                  		beq.w	@cont	; if not, play level
000042A6 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
000042AC 6700 0000                  		beq.w	@cont	; if not, play level
000042B0 6000 0000                  		bra.w	Tit_LevelSelect
000042B4                            
000042B4                            	@cont:		
000042B4 7400                       		moveq   #0,d2
000042B6 1438 FFB0                  		move.b   (Title_screen_option).w,d2   ; load the choice
000042BA D442                       		add.w   d2,d2            ; multiply by 2
000042BC 343B 2000                  		move.w   Tit_Menu_Choice(pc,d2.w),d2
000042C0 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
000042C4                            
000042C4                            ; ===========================================================================
000042C4                            Tit_Menu_Choice:
000042C4 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
000042C6 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
000042C8                            ; ===========================================================================
000042C8                            
000042C8                            Menu_Options:
000042C8 4EF9 0000 0000             	jmp	MenuScreen ; => OptionsMenu
000042CE 4E75                       	rts
000042D0                            
000042D0                            Tit_LevelSelect:	
000042D0 7002                       		moveq	#palid_LevelSel,d0
000042D2 6100 E198                  		bsr.w	PalLoad2	; load level select palette
000042D6 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000042DA 7000                       		moveq	#0,d0
000042DC 323C 00DF                  		move.w	#$DF,d1
000042E0                            
000042E0                            	Tit_ClrScroll1:
000042E0 22C0                       		move.l	d0,(a1)+
000042E2 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
000042E6                            
000042E6 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
000042EA 46FC 2700                  		disable_ints
000042EE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000042FE 323C 03FF                  		move.w	#$3FF,d1
00004302                            
00004302                            	Tit_ClrScroll2:
00004302 2C80                       		move.l	d0,(a6)
00004304 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
00004308                            
00004308 6100 0000                  		bsr.w	LevSelTextLoad
0000430C                            
0000430C                            ; ---------------------------------------------------------------------------
0000430C                            ; Level	Select
0000430C                            ; ---------------------------------------------------------------------------
0000430C                            
0000430C                            LevelSelect:
0000430C 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004312 6100 F6F0                  		bsr.w	WaitForVBla
00004316 6100 0000                  		bsr.w	LevSelControls
0000431A 6100 D43E                  		bsr.w	RunPLC
0000431E 4AB8 F680                  		tst.l	(v_plc_buffer).w
00004322 66E8                       		bne.s	LevelSelect
00004324 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
0000432A 67E0                       		beq.s	LevelSelect	; if not, branch
0000432C 3038 FF82                  		move.w	(v_levselitem).w,d0
00004330 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004334 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004336 3038 FF84                  		move.w	(v_levselsound).w,d0
0000433A 0640 0080                  		addi.w	#$80,d0
0000433E 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00004342 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004344 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00004348 6700                       		beq.s	LevSel_Credits	; if yes, branch
0000434A                            
0000434A                            LevSel_PlaySnd:
0000434A 6100 CF08                  		bsr.w	PlaySound_Special
0000434E 60BC                       		bra.s	LevelSelect
00004350                            ; ===========================================================================
00004350                            
00004350                            LevSel_Ending:
00004350 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
00004356 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
0000435C 4E75                       		rts	
0000435E                            ; ===========================================================================
0000435E                            
0000435E                            LevSel_Credits:
0000435E 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
0000436C 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
00004372 4E75                       		rts	
00004374                            ; ===========================================================================
00004374                            
00004374                            LevSel_Level_SS:
00004374 D040                       		add.w	d0,d0
00004376 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
0000437A 6B00 FF90                  		bmi.w	LevelSelect
0000437E 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
00004382 6600                       		bne.s	LevSel_Level	; if not, branch
00004384 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
0000438A 4278 FE10                  		clr.w	(v_zone).w	; clear	level
0000438E 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004394 7000                       		moveq	#0,d0
00004396 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000439A 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000439E 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000043A2 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000043AA 4E75                       		rts	
000043AC                            ; ===========================================================================
000043AC                            
000043AC                            LevSel_Level:
000043AC 0240 3FFF                  		andi.w	#$3FFF,d0
000043B0 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
000043B4                            
000043B4                            PlayLevel:
000043B4 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000043BA 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000043C0 7000                       		moveq	#0,d0
000043C2 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000043C6 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000043CA 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000043CE 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000043D2 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000043D6 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000043DA 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000043DE 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000043E4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000043F4 4E75                       		rts	
000043F6                            ; ===========================================================================
000043F6                            ; ---------------------------------------------------------------------------
000043F6                            ; Level	select - level pointers
000043F6                            ; ---------------------------------------------------------------------------
000043F6                            		; correct level order
000043F6 0000                       		dc.b id_GHZ, 0
000043F8 0001                       		dc.b id_GHZ, 1
000043FA 0002                       		dc.b id_GHZ, 2
000043FC 0200                       		dc.b id_MZ, 0
000043FE 0201                       		dc.b id_MZ, 1
00004400 0202                       		dc.b id_MZ, 2
00004402 0400                       		dc.b id_SYZ, 0
00004404 0401                       		dc.b id_SYZ, 1
00004406 0402                       		dc.b id_SYZ, 2
00004408 0100                       		dc.b id_LZ, 0
0000440A 0101                       		dc.b id_LZ, 1
0000440C 0102                       		dc.b id_LZ, 2
0000440E 0300                       		dc.b id_SLZ, 0
00004410 0301                       		dc.b id_SLZ, 1
00004412 0302                       		dc.b id_SLZ, 2
00004414 0500                       		dc.b id_SBZ, 0
00004416 0501                       		dc.b id_SBZ, 1
00004418 0103                       		dc.b id_LZ, 3
0000441A 0502                       		dc.b id_SBZ, 2
0000441C 0700                       		dc.b id_SS, 0		; Special Stage
0000441E 8000                       		dc.w $8000		; Sound Test
00004420                            		even
00004420                            ; ---------------------------------------------------------------------------
00004420                            ; Level	select codes
00004420                            ; ---------------------------------------------------------------------------
00004420 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
00004428                            		even
00004428                            
00004428 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
0000442E                            		even
0000442E                            ; ===========================================================================
0000442E                            
0000442E                            ; ---------------------------------------------------------------------------
0000442E                            ; Demo mode
0000442E                            ; ---------------------------------------------------------------------------
0000442E                            
0000442E                            GotoDemo:
0000442E 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004434                            
00004434                            loc_33B6:
00004434 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000443A 6100 F5C8                  		bsr.w	WaitForVBla
0000443E 6100 0000                  		bsr.w	DeformLayers
00004442 6100 D88E                  		bsr.w	PaletteCycle
00004446 6100 D312                  		bsr.w	RunPLC
0000444A 3038 D008                  		move.w	(v_objspace+obX).w,d0
0000444E 5440                       		addq.w	#2,d0
00004450 31C0 D008                  		move.w	d0,(v_objspace+obX).w
00004454 0C40 1C00                  		cmpi.w	#$1C00,d0
00004458 6500                       		blo.s	loc_33E4
0000445A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
00004460 4E75                       		rts	
00004462                            ; ===========================================================================
00004462                            
00004462                            loc_33E4:
00004462 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00004468 6600 FE34                  		bne.w	Tit_ChkLevSel	; if yes, branch
0000446C 4A78 F614                  		tst.w	(v_demolength).w
00004470 6600 FFC2                  		bne.w	loc_33B6
0000447C 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
00004480 0240 0007                  		andi.w	#7,d0
00004484 D040                       		add.w	d0,d0
00004486 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000448A 31C0 FE10                  		move.w	d0,(v_zone).w
0000448E 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
00004492 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
00004498 6500                       		blo.s	loc_3422	; if yes, branch
0000449A 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
000044A0                            
000044A0                            loc_3422:
000044A0 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
000044A6 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
000044AC 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000044B0 6600                       		bne.s	Demo_Level	; if not, branch
000044B2 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000044B8 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
000044BC 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
000044C0                            
000044C0                            Demo_Level:
000044C0 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000044C6 7000                       		moveq	#0,d0
000044C8 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000044CC 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000044D0 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000044D4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000044DC 4E75                       		rts	
000044DE                            ; ===========================================================================
000044DE                            ; ---------------------------------------------------------------------------
000044DE                            ; Levels used in demos
000044DE                            ; ---------------------------------------------------------------------------
000044DE                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000044E6                            		even
000044E6                            
000044E6                            ; ---------------------------------------------------------------------------
000044E6                            ; Subroutine to	change what you're selecting in the level select
000044E6                            ; ---------------------------------------------------------------------------
000044E6                            
000044E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044E6                            
000044E6                            
000044E6                            LevSelControls:
000044E6 1238 F605                  		move.b	(v_jpadpress1).w,d1
000044EA 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
000044EE 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000044F0 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
000044F4 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
000044F6                            
000044F6                            LevSel_UpDown:
000044F6 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
000044FC 1238 F604                  		move.b	(v_jpadhold1).w,d1
00004500 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
00004504 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004506 3038 FF82                  		move.w	(v_levselitem).w,d0
0000450A 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
0000450E 6700                       		beq.s	LevSel_Down	; if not, branch
00004510 5340                       		subq.w	#1,d0		; move up 1 selection
00004512 6400                       		bhs.s	LevSel_Down
00004514 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004516                            
00004516                            LevSel_Down:
00004516 0801 0001                  		btst	#bitDn,d1	; is down pressed?
0000451A 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000451C 5240                       		addq.w	#1,d0		; move down 1 selection
0000451E 0C40 0015                  		cmpi.w	#$15,d0
00004522 6500                       		blo.s	LevSel_Refresh
00004524 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004526                            
00004526                            LevSel_Refresh:
00004526 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
0000452A 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000452E 4E75                       		rts	
00004530                            ; ===========================================================================
00004530                            
00004530                            LevSel_SndTest:
00004530 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
00004536 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004538 1238 F605                  		move.b	(v_jpadpress1).w,d1
0000453C 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
00004540 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004542 3038 FF84                  		move.w	(v_levselsound).w,d0
00004546 0801 0002                  		btst	#bitL,d1	; is left pressed?
0000454A 6700                       		beq.s	LevSel_Right	; if not, branch
0000454C 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
0000454E 6400                       		bhs.s	LevSel_Right
00004550 705F                       		moveq	#$5F,d0		; if sound test	moves below 0, set to $4F
00004552                            
00004552                            LevSel_Right:
00004552 0801 0003                  		btst	#bitR,d1	; is right pressed?
00004556 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004558 5240                       		addq.w	#1,d0		; add 1	to sound test
0000455A 0C40 0050                  		cmpi.w	#$50,d0
0000455E 6500                       		blo.s	LevSel_Refresh2
00004560 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00004562                            
00004562                            LevSel_Refresh2:
00004562 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
00004566 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000456A                            
0000456A                            LevSel_NoMove:
0000456A 4E75                       		rts	
0000456C                            ; End of function LevSelControls
0000456C                            
0000456C                            ; ---------------------------------------------------------------------------
0000456C                            ; Subroutine to load level select text
0000456C                            ; ---------------------------------------------------------------------------
0000456C                            
0000456C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000456C                            
0000456C                            
0000456C                            LevSelTextLoad:
0000456C                            
0000456C =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
0000456C                            					; $E210 is a VRAM address
0000456C                            
0000456C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004572 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004578 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
0000457E 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
00004582 7214                       		moveq	#$14,d1		; number of lines of text
00004584                            
00004584                            	LevSel_DrawAll:
00004584 2D44 0004                  		move.l	d4,4(a6)
00004588 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
0000458C 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
00004592 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
00004596                            
00004596 7000                       		moveq	#0,d0
00004598 3038 FF82                  		move.w	(v_levselitem).w,d0
0000459C 3200                       		move.w	d0,d1
0000459E 283C 6210 0003             		move.l	#textpos,d4
000045A4 EF48                       		lsl.w	#7,d0
000045A6 4840                       		swap	d0
000045A8 D880                       		add.l	d0,d4
000045AA 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000045B0 E749                       		lsl.w	#3,d1
000045B2 3001                       		move.w	d1,d0
000045B4 D241                       		add.w	d1,d1
000045B6 D240                       		add.w	d0,d1
000045B8 D2C1                       		adda.w	d1,a1
000045BA 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
000045BE 2D44 0004                  		move.l	d4,4(a6)
000045C2 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
000045C6 363C E680                  		move.w	#$E680,d3
000045CA 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000045D0 6600                       		bne.s	LevSel_DrawSnd
000045D2 363C C680                  		move.w	#$C680,d3
000045D6                            
000045D6                            LevSel_DrawSnd:
000045E0 3038 FF84                  		move.w	(v_levselsound).w,d0
000045E4 0640 0080                  		addi.w	#$80,d0
000045E8 1400                       		move.b	d0,d2
000045EA E808                       		lsr.b	#4,d0
000045EC 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
000045F0 1002                       		move.b	d2,d0
000045F2 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
000045F6 4E75                       		rts	
000045F8                            ; End of function LevSelTextLoad
000045F8                            
000045F8                            
000045F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045F8                            
000045F8                            
000045F8                            LevSel_ChgSnd:
000045F8 0240 000F                  		andi.w	#$F,d0
000045FC 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00004600 6500                       		blo.s	LevSel_Numb	; if not, branch
00004602 5E00                       		addi.b	#7,d0		; use alpha characters
00004604                            
00004604                            	LevSel_Numb:
00004604 D043                       		add.w	d3,d0
00004606 3C80                       		move.w	d0,(a6)
00004608 4E75                       		rts	
0000460A                            ; End of function LevSel_ChgSnd
0000460A                            
0000460A                            
0000460A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000460A                            
0000460A                            
0000460A                            LevSel_ChgLine:
0000460A 7417                       		moveq	#$17,d2		; number of characters per line
0000460C                            
0000460C                            	LevSel_LineLoop:
0000460C 7000                       		moveq	#0,d0
0000460E 1019                       		move.b	(a1)+,d0	; get character
00004610 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
00004612 3CBC 0000                  		move.w	#0,(a6)		; use blank character
00004616 51CA FFF4                  		dbf	d2,LevSel_LineLoop
0000461A 4E75                       		rts	
0000461C                            
0000461C                            
0000461C                            	LevSel_CharOk:
0000461C D043                       		add.w	d3,d0		; combine char with VRAM setting
0000461E 3C80                       		move.w	d0,(a6)		; send to VRAM
00004620 51CA FFEA                  		dbf	d2,LevSel_LineLoop
00004624 4E75                       		rts	
00004626                            ; End of function LevSel_ChgLine
00004626                            
00004626                            ; ===========================================================================
00004626                            ; ---------------------------------------------------------------------------
00004626                            ; Level	select menu text
00004626                            ; ---------------------------------------------------------------------------
00004626                            		incbin	"misc\Level Select Text (JP1).bin"
0000481E                            		even
0000481E                            ; ---------------------------------------------------------------------------
0000481E                            ; Music	playlist
0000481E                            ; ---------------------------------------------------------------------------
0000481E                            MusicList:
0000481E 00                         			dc.b bgm_GHZ    ; GHZ1
0000481F 00                                 	dc.b bgm_LZ    ; GHZ2
00004820 00                                 	dc.b bgm_Seaside   ; GHZ3
00004821 00                                 	dc.b bgm_LZ    ; GHZ4
00004822 00                                 	dc.b bgm_Stop    ; LZ1
00004823 00                                 	dc.b bgm_Stop   ; LZ2
00004824 00                                 	dc.b bgm_Stop    ; LZ3
00004825 00                                 	dc.b bgm_SBZ3    ; LZ4
00004826 00                                 	dc.b bgm_MZ    ; MZ1
00004827 00                                 	dc.b bgm_SBZ    ; MZ2
00004828 00                                 	dc.b bgm_MZ    ; MZ3
00004829 00                                 	dc.b bgm_SBZ    ; MZ4
0000482A 00                                 	dc.b bgm_LZ    ; SLZ1
0000482B 00                                 	dc.b bgm_LZ    ; SLZ2
0000482C 00                                 	dc.b bgm_LZ    ; SLZ3
0000482D 00                                 	dc.b bgm_LZ    ; SLZ4
0000482E 00                                 	dc.b bgm_SYZ    ; SYZ1
0000482F 00                                 	dc.b bgm_SLZ    ; SYZ2
00004830 00                                 	dc.b bgm_SLZ    ; SYZ3
00004831 00                                 	dc.b bgm_SLZ    ; SYZ4
00004832 00                                 	dc.b bgm_SBZ    ; SBZ1
00004833 00                                 	dc.b bgm_SBZ    ; SBZ2
00004834 00                                 	dc.b bgm_FZ		; SBZ3
00004835 00                                 	dc.b bgm_SBZ    ; SBZ4
00004836 00                                 	dc.b bgm_GHZ    ; GHZ1
00004837 00                                 	dc.b bgm_GHZ    ; GHZ1
00004838 00                                 	dc.b bgm_GHZ    ; GHZ1
00004839 00                                 	dc.b bgm_GHZ    ; GHZ1
0000483A                                    	even
0000483A                            ; ===========================================================================
0000483A                            
0000483A                            ; ---------------------------------------------------------------------------
0000483A                            ; Level
0000483A                            ; ---------------------------------------------------------------------------
0000483A                            
0000483A                            GM_Level:
0000483A 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004840 4A78 FFF0                  		tst.w	(f_demo).w
00004844 6B00                       		bmi.s	Level_NoMusicFade
0000484E                            
0000484E                            	Level_NoMusicFade:
0000484E 6100 CEFC                  		bsr.w	ClearPLC
00004852 6100 D932                  		bsr.w	PaletteFadeOut
00004856 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
0000485A 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
0000485C 46FC 2700                  		disable_ints
0000486A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004870 6100 CA90                  		bsr.w	NemDec
00004874 46FC 2300                  		enable_ints
00004878 7000                       		moveq	#0,d0
0000487A 1038 FE10                  		move.b	(v_zone).w,d0
0000487E E948                       		lsl.w	#4,d0
00004880 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004886 45F2 0000                  		lea	(a2,d0.w),a2
0000488A 7000                       		moveq	#0,d0
0000488C 1012                       		move.b	(a2),d0
0000488E 6700                       		beq.s	loc_37FC
00004890 6100 CE5C                  		bsr.w	AddPLC		; load level patterns
00004894                            
00004894                            loc_37FC:
00004894 7000                       		moveq	#plcid_Main2,d0
00004896 6100 CE56                  		bsr.w	AddPLC		; load standard	patterns
0000489A                            
0000489A                            Level_ClrRam:
0000489A 43F8 D000                  		lea	(v_objspace).w,a1
0000489E 7000                       		moveq	#0,d0
000048A0 323C 07FF                  		move.w	#$7FF,d1
000048A4                            
000048A4                            	Level_ClrObjRam:
000048A4 22C0                       		move.l	d0,(a1)+
000048A6 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000048AA                            
000048AA 43F8 F628                  		lea	($FFFFF628).w,a1
000048AE 7000                       		moveq	#0,d0
000048B0 323C 0015                  		move.w	#$15,d1
000048B4                            
000048B4                            	Level_ClrVars1:
000048B4 22C0                       		move.l	d0,(a1)+
000048B6 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
000048BA                            
000048BA 43F8 F700                  		lea	(v_screenposx).w,a1
000048BE 7000                       		moveq	#0,d0
000048C0 323C 003F                  		move.w	#$3F,d1
000048C4                            
000048C4                            	Level_ClrVars2:
000048C4 22C0                       		move.l	d0,(a1)+
000048C6 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000048CA                            
000048CA 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000048CE 7000                       		moveq	#0,d0
000048D0 323C 0047                  		move.w	#$47,d1
000048D4                            
000048D4                            	Level_ClrVars3:
000048D4 22C0                       		move.l	d0,(a1)+
000048D6 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000048DA                            
000048DA 46FC 2700                  		disable_ints
000048DE 6100 C8A4                  		bsr.w	ClearScreen
000048E2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000048E8 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000048EC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000048F0 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000048F4 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
000048F8 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000048FC 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004900 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004904 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
0000490A 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
0000490E 31FC C800 C8FC             		ResetDMAQueue	
00004914 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
0000491A 6600                       		bne.s	Level_LoadPal	; if not, branch
0000491C                            
0000491C 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004920 7000                       		moveq	#0,d0
00004922 1038 FE11                  		move.b	(v_act).w,d0
00004926 D040                       		add.w	d0,d0
00004928 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000492E 3031 0000                  		move.w	(a1,d0.w),d0
00004932 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004936 31C0 F648                  		move.w	d0,(v_waterpos2).w
0000493A 31C0 F64A                  		move.w	d0,(v_waterpos3).w
0000493E 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004942 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004946 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
0000494C                            
0000494C                            Level_LoadPal:
0000494C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004952 46FC 2300                  		move	#$2300,sr
00004956 4EB9 0000 0000             		jsr		LoadPlayerPal
0000495C 6100 DB0E                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004960 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004966 6600                       		bne.s	Level_GetBgm	; if not, branch
00004968 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
0000496E 6100 DB3C                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004972 4A38 FE30                  		tst.b	($FFFFFE30).w
00004976 6700                       		beq.s	Level_GetBgm
00004978 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000497E                            
0000497E                            	Level_GetBgm:
0000497E 4A78 FFF0                  		tst.w	(f_demo).w
00004982 6B00                               	bmi.s	Level_SkipTtlCard
00004984 7000                               	moveq	#0,d0
00004986 3038 FE10                  		move.w	(v_zone).w,d0
0000498A E418                       		ror.b	#2,d0
0000498C EC48                       		lsr.w   #6,d0
0000498E 43F9 0000 481E                     	lea	(MusicList).l,a1 ; load    music playlist
00004994 1031 0000                          	move.b	(a1,d0.w),d0
00004998 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
0000499C 6100 C8B0                          	bsr.w	PlaySound    ; play music
000049A0 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
000049A6                            
000049A6                            
000049A6                            Level_TtlCardLoop:
000049A6 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
000049AC 6100 F056                  		bsr.w	WaitForVBla
000049B0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000049B6 4EB9 0000 0000             		jsr	(BuildSprites).l
000049BC 6100 CD9C                  		bsr.w	RunPLC
000049C0 3038 D108                  		move.w	(v_objspace+$108).w,d0
000049C4 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
000049C8 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
000049CA 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
000049CE 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
000049D0 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
000049D6                            
000049D6                            	Level_SkipTtlCard:
000049D6 4EB9 0000 0000             		jsr		LoadPlayerPal
000049DC 6100 DA52                  		bsr.w	PalLoad1	; load Sonic's palette
000049E0 6100 0000                  		bsr.w	LevelSizeLoad
000049E4 6100 0000                  		bsr.w	DeformLayers
000049E8 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000049EE 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
000049F2 6100 0000                  		bsr.w	LoadTilesFromStart
000049F6 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
000049FC 6100 0000                  		bsr.w	ColIndexLoad
00004A00 6100 0000                  		bsr.w	LZWaterFeatures
00004A04 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004A0A 4A78 FFF0                  		tst.w	(f_demo).w
00004A0E 6B00                       		bmi.s	Level_ChkDebug
00004A10 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004A16                            
00004A16                            Level_ChkDebug:
00004A16 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004A1A 6700                       		beq.s	Level_ChkWater	; if not, branch
00004A1C 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004A22 6700                       		beq.s	Level_ChkWater	; if not, branch
00004A24 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004A2A                            
00004A2A                            Level_ChkWater:
00004A2A 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004A30 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004A36 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A3C 6600                       		bne.s	Level_LoadObj	; if not, branch
00004A3E 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004A44 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004A4A 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004A50 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004A56                            
00004A56                            Level_LoadObj:
00004A56 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004A5C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004A62 4EB9 0000 0000             		jsr	(BuildSprites).l
00004A68 7000                       		moveq	#0,d0
00004A6A 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004A6E 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004A70 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004A74 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004A78 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004A7C                            
00004A7C                            	Level_SkipClr:
00004A7C 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004A80 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004A84 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004A88 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004A8C 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004A90 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004A94 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004A98 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004A9C 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004AA0 31C0 FE02                  		move.w	d0,(f_restart).w
00004AA4 31C0 FE04                  		move.w	d0,(v_framecount).w
00004AA8 6100 0000                  		bsr.w	OscillateNumInit
00004AAC 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004AB2 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004AB8 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004ABE 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004AC4 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004ACA 7000                       		moveq	#0,d0
00004ACC 1038 FE10                  		move.b	(v_zone).w,d0
00004AD0 E548                       		lsl.w	#2,d0
00004AD2 2271 0000                  		movea.l	(a1,d0.w),a1
00004AD6 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004ADA 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004ADC 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004AE2 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004AE6 5340                       		subq.w	#1,d0
00004AE8 E548                       		lsl.w	#2,d0
00004AEA 2271 0000                  		movea.l	(a1,d0.w),a1
00004AEE                            
00004AEE                            Level_Demo:
00004AEE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004AF4 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004AF8 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004AFE 4A78 FFF0                  		tst.w	(f_demo).w
00004B02 6A00                       		bpl.s	Level_ChkWaterPal
00004B04 31FC 021C F614             		move.w	#540,(v_demolength).w
00004B0A 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004B10 6600                       		bne.s	Level_ChkWaterPal
00004B12 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004B18                            
00004B18                            Level_ChkWaterPal:
00004B18 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004B1E 6600                       		bne.s	Level_Delay	; if not, branch
00004B20 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004B22 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004B28 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004B2A 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004B2C                            
00004B2C                            	Level_WtrNotSbz:
00004B2C 6100 D9BA                  		bsr.w	PalLoad4_Water
00004B30                            
00004B30                            Level_Delay:
00004B30 323C 0003                  		move.w	#3,d1
00004B34                            
00004B34                            	Level_DelayLoop:
00004B34 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B3A 6100 EEC8                  		bsr.w	WaitForVBla
00004B3E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004B42                            
00004B42 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004B48 6100 D59C                  		bsr.w	PalFadeIn_Alt
00004B4C 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004B50 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004B52 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004B56 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004B5A 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004B5E 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004B62 6000                       		bra.s	Level_StartGame
00004B64                            ; ===========================================================================
00004B64                            
00004B64                            Level_ClrCardArt:
00004B64 7000                       		moveq	#plcid_Explode,d0
00004B66 4EB9 0000 16EE             		jsr	(AddPLC).l	; load explosion gfx
00004B6C 7000                       		moveq	#0,d0
00004B6E 1038 FE10                  		move.b	(v_zone).w,d0
00004B72 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004B76 4EB9 0000 16EE             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004B7C                            
00004B7C                            Level_StartGame:
00004B7C 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004B82                            
00004B82                            ; ---------------------------------------------------------------------------
00004B82                            ; Main level loop (when	all title card and loading sequences are finished)
00004B82                            ; ---------------------------------------------------------------------------
00004B82                            
00004B82                            Level_MainLoop:
00004B82 6100 C6DC                  		bsr.w	PauseGame
00004B86 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B8C 6100 EE76                  		bsr.w	WaitForVBla
00004B90 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004B94 6100 0000                  		bsr.w	MoveSonicInDemo
00004B98 6100 0000                  		bsr.w	LZWaterFeatures
00004B9C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004BA2 4A78 FE02                  			tst.w   (f_restart).w
00004BA6 6600 FC92                  			bne     GM_Level
00004BAA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004BAE 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004BB0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004BB6 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004BB8                            
00004BB8                            	Level_DoScroll:
00004BB8 6100 0000                  		bsr.w	DeformLayers
00004BBC                            
00004BBC                            	Level_SkipScroll:
00004BBC 4EB9 0000 0000             		jsr	(BuildSprites).l
00004BC2 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004BC8 6100 D108                  		bsr.w	PaletteCycle
00004BCC 6100 CB8C                  		bsr.w	RunPLC
00004BD0 6100 0000                  		bsr.w	OscillateNumDo
00004BD4 6100 0000                  		bsr.w	SynchroAnimate
00004BD8 6100 0000                  		bsr.w	SignpostArtLoad
00004BDC                            
00004BDC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BE2 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004BE4 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004BEA 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004BEE 4E75                       		rts	
00004BF0                            ; ===========================================================================
00004BF0                            
00004BF0                            Level_ChkDemo:
00004BF0 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004BF4 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004BF6 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004BFA 6700                       		beq.s	Level_EndDemo	; if not, branch
00004BFC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004C02 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004C06 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004C0C 4E75                       		rts	
00004C0E                            ; ===========================================================================
00004C0E                            
00004C0E                            Level_EndDemo:
00004C0E 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004C14 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004C16 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004C1C 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004C20 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004C22 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004C28                            
00004C28                            Level_FadeDemo:
00004C28 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004C2E 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004C34 4278 F794                  		clr.w	(v_palchgspeed).w
00004C38                            
00004C38                            	Level_FDLoop:
00004C38 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C3E 6100 EDC4                  		bsr.w	WaitForVBla
00004C42 6100 0000                  		bsr.w	MoveSonicInDemo
00004C46 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C4C 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C52 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C58 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004C5C 6A00                       		bpl.s	loc_3BC8
00004C5E 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004C64 6100 D540                  		bsr.w	FadeOut_ToBlack
00004C68                            
00004C68                            loc_3BC8:
00004C68 4A78 F614                  		tst.w	(v_demolength).w
00004C6C 66CA                       		bne.s	Level_FDLoop
00004C6E 4E75                       		rts	
00004C70                            ; ===========================================================================
00004C70                            
00004C70                            		include	"_inc\LZWaterFeatures.asm"
00004C70                            ; ---------------------------------------------------------------------------
00004C70                            ; Subroutine to	do special water effects in Labyrinth Zone
00004C70                            ; ---------------------------------------------------------------------------
00004C70                            
00004C70                            LZWaterFeatures:
00004C70 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004C76 6600                       		bne.s	@notlabyrinth	; if not, branch
00004C78 4A38 F744                  			tst.b   (f_nobgscroll).w
00004C7C 6600                       			bne.s	@setheight
00004C7E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004C84 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004C86                            
00004C86 6100 0000                  		bsr.w	LZWindTunnels
00004C8A 6100 0000                  		bsr.w	LZWaterSlides
00004C8E 6100 0000                  		bsr.w	LZDynamicWater
00004C92                            
00004C92                            @setheight:
00004C92 4238 F64E                  		clr.b	(f_wtr_state).w
00004C96 7000                       		moveq	#0,d0
00004C98 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004C9C E248                       		lsr.w	#1,d0
00004C9E D078 F648                  		add.w	(v_waterpos2).w,d0
00004CA2 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004CA6 3038 F646                  		move.w	(v_waterpos1).w,d0
00004CAA 9078 F704                  		sub.w	(v_screenposy).w,d0
00004CAE 6400                       		bcc.s	@isbelow
00004CB0 4A40                       		tst.w	d0
00004CB2 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004CB4                            
00004CB4 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004CBA 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004CC0                            
00004CC0                            	@isbelow:
00004CC0 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004CC4 6500                       		bcs.s	@isvisible	; if yes, branch
00004CC6 303C 00DF                  		move.w	#223,d0
00004CCA                            
00004CCA                            	@isvisible:
00004CCA 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004CCE                            
00004CCE                            @notlabyrinth:
00004CCE 4E75                       		rts	
00004CD0                            ; ===========================================================================
00004CD0                            ; ---------------------------------------------------------------------------
00004CD0                            ; Initial water heights
00004CD0                            ; ---------------------------------------------------------------------------
00004CD0 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004CD2 0328                       		dc.w $328	; Labyrinth 2
00004CD4 0900                       		dc.w $900	; Labyrinth 3
00004CD6 0228                       		dc.w $228	; Scrap Brain 3
00004CD8                            		even
00004CD8                            ; ===========================================================================
00004CD8                            
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            ; Labyrinth dynamic water routines
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            
00004CD8                            LZDynamicWater:
00004CD8 7000                       		moveq	#0,d0
00004CDA 1038 FE11                  		move.b	(v_act).w,d0
00004CDE D040                       		add.w	d0,d0
00004CE0 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004CE4 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004CE8 7200                       		moveq	#0,d1
00004CEA 1238 F64C                  		move.b	(f_water).w,d1
00004CEE 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004CF2 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004CF6 6700                       		beq.s	@exit		; if water level is correct, branch
00004CF8 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004CFA 4441                       		neg.w	d1		; set water to move up instead
00004CFC                            
00004CFC                            	@movewater:
00004CFC D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004D00                            
00004D00                            	@exit:
00004D00 4E75                       		rts	
00004D02                            ; ===========================================================================
00004D02 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004D04 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004D06 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004D08 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004D0A                            ; ===========================================================================
00004D0A                            
00004D0A                            DynWater_LZ1:
00004D0A 4E75                       		rts	
00004D0C                            ; ===========================================================================
00004D0C                            
00004D0C                            DynWater_LZ2:
00004D0C 3038 F700                  		move.w	(v_screenposx).w,d0
00004D10 323C 0328                  		move.w	#$328,d1
00004D14 0C40 0500                  		cmpi.w	#$500,d0
00004D18 6500                       		bcs.s	@setwater
00004D1A 323C 03C8                  		move.w	#$3C8,d1
00004D1E 0C40 0B00                  		cmpi.w	#$B00,d0
00004D22 6500                       		bcs.s	@setwater
00004D24 323C 0428                  		move.w	#$428,d1
00004D28                            
00004D28                            	@setwater:
00004D28 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D2C 4E75                       		rts	
00004D2E                            ; ===========================================================================
00004D2E                            
00004D2E                            DynWater_LZ3:
00004D2E 3038 F700                  		move.w	(v_screenposx).w,d0
00004D32 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004D36 6600                       		bne.s	@routine2
00004D38                            
00004D38 323C 0900                  		move.w	#$900,d1
00004D3C 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004D40 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004D42 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004D48 6500                       		bcs.s	@setwaterlz3
00004D4A 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004D50 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004D52                            
00004D52 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004D56 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004D5C 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004D6A                            
00004D6A                            	@setwaterlz3:
00004D6A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D6E 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004D72 4E75                       		rts	
00004D74                            ; ===========================================================================
00004D74                            
00004D74                            @routine2:
00004D74 5302                       		subq.b	#1,d2
00004D76 6600                       		bne.s	@routine3
00004D78 323C 04C8                  		move.w	#$4C8,d1
00004D7C 0C40 0770                  		cmpi.w	#$770,d0
00004D80 6500                       		bcs.s	@setwater2
00004D82 323C 0308                  		move.w	#$308,d1
00004D86 0C40 1400                  		cmpi.w	#$1400,d0
00004D8A 6500                       		bcs.s	@setwater2
00004D8C 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004D92 6700                       		beq.s	@sonicislow
00004D94 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004D9A 6400                       		bcc.s	@sonicislow	; if yes, branch
00004D9C 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004DA2 6400                       		bcc.s	@setwater2
00004DA4                            
00004DA4                            @sonicislow:
00004DA4 323C 0508                  		move.w	#$508,d1
00004DA8 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004DAC 0C40 1770                  		cmpi.w	#$1770,d0
00004DB0 6500                       		bcs.s	@setwater2
00004DB2 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004DB8                            
00004DB8                            	@setwater2:
00004DB8 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DBC 4E75                       		rts	
00004DBE                            ; ===========================================================================
00004DBE                            
00004DBE                            @routine3:
00004DBE 5302                       		subq.b	#1,d2
00004DC0 6600                       		bne.s	@routine4
00004DC2 323C 0508                  		move.w	#$508,d1
00004DC6 0C40 1860                  		cmpi.w	#$1860,d0
00004DCA 6500                       		bcs.s	@setwater3
00004DCC 323C 0188                  		move.w	#$188,d1
00004DD0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DD4 6400                       		bcc.s	@loc_3DC6
00004DD6 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004DDA 6600                       		bne.s	@setwater3
00004DDC                            
00004DDC                            	@loc_3DC6:
00004DDC 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004DE2                            
00004DE2                            	@setwater3:
00004DE2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DE6 4E75                       		rts	
00004DE8                            ; ===========================================================================
00004DE8                            
00004DE8                            @routine4:
00004DE8 5302                       		subq.b	#1,d2
00004DEA 6600                       		bne.s	@routine5
00004DEC 323C 0188                  		move.w	#$188,d1
00004DF0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DF4 6500                       		bcs.s	@setwater4
00004DF6 323C 0900                  		move.w	#$900,d1
00004DFA 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004DFE 6500                       		bcs.s	@setwater4
00004E00 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004E06 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004E0C 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004E12 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004E18 4E75                       		rts	
00004E1A                            ; ===========================================================================
00004E1A                            
00004E1A                            @setwater4:
00004E1A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E1E 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004E22 4E75                       		rts	
00004E24                            ; ===========================================================================
00004E24                            
00004E24                            @routine5:
00004E24 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004E28 6500                       		bcs.s	@dontset	; if not, branch
00004E2A 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004E30                            
00004E30                            	@dontset:
00004E30 4E75                       		rts	
00004E32                            ; ===========================================================================
00004E32                            
00004E32                            DynWater_SBZ3:
00004E32 323C 0228                  		move.w	#$228,d1
00004E36 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00004E3C 6500                       		bcs.s	@setwater
00004E3E 323C 04C8                  		move.w	#$4C8,d1
00004E42                            
00004E42                            	@setwater:
00004E42 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E46 4E75                       		rts
00004E48                            
00004E48                            ; ---------------------------------------------------------------------------
00004E48                            ; Labyrinth Zone "wind tunnels"	subroutine
00004E48                            ; ---------------------------------------------------------------------------
00004E48                            
00004E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E48                            
00004E48                            
00004E48                            LZWindTunnels:
00004E48 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004E4C 6600 0000                  		bne.w	@quit	; if yes, branch
00004E50 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004E56 7000                       		moveq	#0,d0
00004E58 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004E5C E748                       		lsl.w	#3,d0		; multiply by 8
00004E5E D4C0                       		adda.w	d0,a2		; add to address for data
00004E60 7200                       		moveq	#0,d1
00004E62 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004E66 6600                       		bne.s	@notact1	; if not, branch
00004E68 7201                       		moveq	#1,d1
00004E6A 514A                       		subq.w	#8,a2		; use different data for act 1
00004E6C                            
00004E6C                            	@notact1:
00004E6C 43F8 D000                  		lea	(v_player).w,a1
00004E70                            
00004E70                            @chksonic:
00004E70 3029 0008                  		move.w	obX(a1),d0
00004E74 B052                       		cmp.w	(a2),d0
00004E76 6500 0000                  		bcs.w	@chknext
00004E7A B06A 0004                  		cmp.w	4(a2),d0
00004E7E 6400 0000                  		bcc.w	@chknext
00004E82 3429 000C                  		move.w	obY(a1),d2
00004E86 B46A 0002                  		cmp.w	2(a2),d2
00004E8A 6500                       		bcs.s	@chknext
00004E8C B46A 0006                  		cmp.w	6(a2),d2
00004E90 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004E92 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004E96 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004E9A 6600                       		bne.s	@skipsound	; if not, branch
00004EA6                            
00004EA6                            	@skipsound:
00004EA6 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004EAA 6600 0000                  		bne.w	@quit	; if yes, branch
00004EAE 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004EB4 6400                       		bcc.s	@clrquit	; if yes, branch
00004EB6 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004EBC 0440 0080                  		subi.w	#$80,d0
00004EC0 B052                       		cmp.w	(a2),d0
00004EC2 6400                       		bcc.s	@movesonic
00004EC4 7002                       		moveq	#2,d0
00004EC6 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004ECC 6600                       		bne.s	@notact2	; if not, branch
00004ECE 4440                       		neg.w	d0
00004ED0                            
00004ED0                            	@notact2:
00004ED0 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004ED4                            
00004ED4                            @movesonic:
00004ED4 5869 0008                  		addq.w	#4,obX(a1)
00004ED8 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004EDE 337C 0000 0012             		move.w	#0,obVelY(a1)
00004EE4 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004EEA 08E9 0001 0022             		bset	#1,obStatus(a1)
00004EF0 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004EF6 6700                       		beq.s	@down		; if not, branch
00004EF8 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004EFC                            
00004EFC                            	@down:
00004EFC 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004F02 6700                       		beq.s	@end		; if not, branch
00004F04 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004F08                            
00004F08                            	@end:
00004F08 4E75                       		rts	
00004F0A                            ; ===========================================================================
00004F0A                            
00004F0A                            @chknext:
00004F0A 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004F0C 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004F10 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004F14 6700                       		beq.s	@quit		; if yes, branch
00004F16 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00004F1C                            
00004F1C                            @clrquit:
00004F1C 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00004F20                            
00004F20                            @quit:
00004F20 4E75                       		rts	
00004F22                            ; End of function LZWindTunnels
00004F22                            
00004F22                            ; ===========================================================================
00004F22                            
00004F22                            		;    left, top,  right, bottom boundaries
00004F22 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00004F2A 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00004F32 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00004F3A 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00004F42 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00004F4A                            		even
00004F4A                            
00004F4A                            ; ---------------------------------------------------------------------------
00004F4A                            ; Labyrinth Zone water slide subroutine
00004F4A                            ; ---------------------------------------------------------------------------
00004F4A                            
00004F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F4A                            
00004F4A                            
00004F4A                            LZWaterSlides:
00004F4A 43F8 D000                  		lea	(v_player).w,a1
00004F4E 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00004F54 6600                       		bne.s	loc_3F6A	; if not, branch
00004F56 3029 000C                  		move.w	obY(a1),d0
00004F5A E248                       		lsr.w	#1,d0
00004F5C 0240 0380                  		andi.w	#$380,d0
00004F60 1229 0008                  		move.b	obX(a1),d1
00004F64 0241 007F                  		andi.w	#$7F,d1
00004F68 D041                       		add.w	d1,d0
00004F6A 45F8 A400                  		lea	(v_lvllayout).w,a2
00004F6E 1032 0000                  		move.b	(a2,d0.w),d0
00004F72 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00004F76 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00004F78                            
00004F78                            loc_3F62:
00004F78 B022                       		cmp.b	-(a2),d0
00004F7A 57C9 FFFC                  		dbeq	d1,loc_3F62
00004F7E 6700                       		beq.s	LZSlide_Move
00004F80                            
00004F80                            loc_3F6A:
00004F80 4A38 F7CA                  		tst.b	(f_jumponly).w
00004F84 6700                       		beq.s	locret_3F7A
00004F86 337C 0005 003E             		move.w	#5,$3E(a1)
00004F8C 4238 F7CA                  		clr.b	(f_jumponly).w
00004F90                            
00004F90                            locret_3F7A:
00004F90 4E75                       		rts	
00004F92                            ; ===========================================================================
00004F92                            
00004F92                            LZSlide_Move:
00004F92 0C41 0003                  		cmpi.w	#3,d1
00004F96 6400                       		bcc.s	loc_3F84
00004F98 4E71                       		nop	
00004F9A                            
00004F9A                            loc_3F84:
00004F9A 08A9 0000 0022             		bclr	#0,obStatus(a1)
00004FA0 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00004FA4 1340 0020                  		move.b	d0,obInertia(a1)
00004FA8 6A00                       		bpl.s	loc_3F9A
00004FAA 08E9 0000 0022             		bset	#0,obStatus(a1)
00004FB0                            
00004FB0                            loc_3F9A:
00004FB0 4229 0021                  		clr.b	obInertia+1(a1)
00004FB4 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00004FBA 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00004FC0 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004FC4 0200 001F                  		andi.b	#$1F,d0
00004FC8 6600                       		bne.s	locret_3FBE
00004FD4                            
00004FD4                            locret_3FBE:
00004FD4 4E75                       		rts	
00004FD6                            ; End of function LZWaterSlides
00004FD6                            
00004FD6                            ; ===========================================================================
00004FD6                            ; byte_3FC0:
00004FD6                            Slide_Speeds:
00004FD6 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00004FDE 00                         		even
00004FDE                            
00004FDE                            Slide_Chunks:
00004FDE 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00004FDF                            ; byte_3FCF
00004FDF                            Slide_Chunks_End
00004FE0 00                         		even
00004FE0 00                         		even
00004FE0                            		include	"_inc\MoveSonicInDemo.asm"
00004FE0                            ; ---------------------------------------------------------------------------
00004FE0                            ; Subroutine to	move Sonic in demo mode
00004FE0                            ; ---------------------------------------------------------------------------
00004FE0                            
00004FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FE0                            
00004FE0                            
00004FE0                            MoveSonicInDemo:
00004FE0 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004FE4 6600                       		bne.s	MDemo_On	; if yes, branch
00004FE6 4E75                       		rts	
00004FE8                            ; ===========================================================================
00004FE8                            
00004FE8                            ; This is an unused subroutine for recording a demo
00004FE8                            
00004FE8                            DemoRecorder:
00004FE8 43F9 0008 0000             		lea	($80000).l,a1
00004FEE 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004FF2 D2C0                       		adda.w	d0,a1
00004FF4 1038 F604                  		move.b	(v_jpadhold1).w,d0
00004FF8 B011                       		cmp.b	(a1),d0
00004FFA 6600                       		bne.s	@next
00004FFC 5229 0001                  		addq.b	#1,1(a1)
00005000 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005006 6700                       		beq.s	@next
00005008 4E75                       		rts	
0000500A                            
0000500A                            	@next:
0000500A 1340 0002                  		move.b	d0,2(a1)
0000500E 137C 0000 0003             		move.b	#0,3(a1)
00005014 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005018 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
0000501E 4E75                       		rts	
00005020                            ; ===========================================================================
00005020                            
00005020                            MDemo_On:
00005020 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005024 6A00                       		bpl.s	@dontquit	; if not, branch
00005026 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
0000502A 6B00                       		bmi.s	@dontquit	; if yes, branch
0000502C 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00005032                            
00005032                            	@dontquit:
00005032 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005038 7000                       		moveq	#0,d0
0000503A 1038 FE10                  		move.b	(v_zone).w,d0
0000503E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005044 6600                       		bne.s	@notspecial	; if not, branch
00005046 7006                       		moveq	#6,d0		; use demo #6
00005048                            
00005048                            	@notspecial:
00005048 E548                       		lsl.w	#2,d0
0000504A 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000504E 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005052 6A00                       		bpl.s	@notcredits	; if not, branch
00005054 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
0000505A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000505E 5340                       		subq.w	#1,d0
00005060 E548                       		lsl.w	#2,d0
00005062 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005066                            
00005066                            	@notcredits:
00005066 3038 F790                  		move.w	(v_btnpushtime1).w,d0
0000506A D2C0                       		adda.w	d0,a1
0000506C 1011                       		move.b	(a1),d0
0000506E 41F8 F604                  		lea	(v_jpadhold1).w,a0
00005072 1200                       		move.b	d0,d1
00005074 7400                       			moveq	#0,d2
00005076 B500                       		eor.b	d2,d0
00005078 10C1                       		move.b	d1,(a0)+
0000507A C001                       		and.b	d1,d0
0000507C 10C0                       		move.b	d0,(a0)+
0000507E 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005082 6400                       		bcc.s	@end
00005084 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
0000508A 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000508E                            
0000508E                            	@end:
0000508E 4E75                       		rts	
00005090                            ; End of function MoveSonicInDemo
00005090                            
00005090                            ; ===========================================================================
00005090                            ; ---------------------------------------------------------------------------
00005090                            ; Demo sequence	pointers
00005090                            ; ---------------------------------------------------------------------------
00005090 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00005094 0000 0000                  		dc.l Demo_GHZ
00005098 0000 0000                  		dc.l Demo_MZ
0000509C 0000 0000                  		dc.l Demo_MZ
000050A0 0000 0000                  		dc.l Demo_SYZ
000050A4 0000 0000                  		dc.l Demo_SYZ
000050A8 0000 0000                  		dc.l Demo_SS
000050AC 0000 0000                  		dc.l Demo_SS
000050B0                            
000050B0 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
000050B4 0000 0000                  		dc.l Demo_EndMZ
000050B8 0000 0000                  		dc.l Demo_EndSYZ
000050BC 0000 0000                  		dc.l Demo_EndLZ
000050C0 0000 0000                  		dc.l Demo_EndSLZ
000050C4 0000 0000                  		dc.l Demo_EndSBZ1
000050C8 0000 0000                  		dc.l Demo_EndSBZ2
000050CC 0000 0000                  		dc.l Demo_EndGHZ2
000050D0                            
000050D0 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000050E0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000050F0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00005100                            		even
00005100                            		even
00005100                            
00005100                            ; ---------------------------------------------------------------------------
00005100                            ; Collision index pointer loading subroutine
00005100                            ; ---------------------------------------------------------------------------
00005100                            
00005100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005100                            
00005100                            
00005100                            ColIndexLoad:
00005100 7000                       		moveq	#0,d0
00005102 1038 FE10                  		move.b	(v_zone).w,d0
00005106 E548                       		lsl.w	#2,d0
00005108 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
0000510E 4E75                       		rts	
00005110                            ; End of function ColIndexLoad
00005110                            
00005110                            ; ===========================================================================
00005110                            ; ---------------------------------------------------------------------------
00005110                            ; Collision index pointers
00005110                            ; ---------------------------------------------------------------------------
00005110 0000 0000                  ColPointers:	dc.l Col_GHZ
00005114 0000 0000                  		dc.l Col_LZ
00005118 0000 0000                  		dc.l Col_MZ
0000511C 0000 0000                  		dc.l Col_SLZ
00005120 0000 0000                  		dc.l Col_SYZ
00005124 0000 0000                  		dc.l Col_SBZ
00005128                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00005128                            
00005128                            		include	"_inc\Oscillatory Routines.asm"
00005128                            ; ---------------------------------------------------------------------------
00005128                            ; Oscillating number subroutines
00005128                            ; ---------------------------------------------------------------------------
00005128                            
00005128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005128                            
00005128                            ; Initialise the values
00005128                            
00005128                            OscillateNumInit:
00005128 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000512C 45F9 0000 0000             		lea	(@baselines).l,a2
00005132 7220                       		moveq	#$20,d1
00005134                            
00005134                            	@loop:
00005134 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005136 51C9 FFFC                  		dbf	d1,@loop
0000513A 4E75                       		rts	
0000513C                            
0000513C                            
0000513C                            ; ===========================================================================
0000513C 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000513E 0080 0000                  		dc.w $80, 0
00005142 0080 0000                  		dc.w $80, 0
00005146 0080 0000                  		dc.w $80, 0
0000514A 0080 0000                  		dc.w $80, 0
0000514E 0080 0000                  		dc.w $80, 0
00005152 0080 0000                  		dc.w $80, 0
00005156 0080 0000                  		dc.w $80, 0
0000515A 0080 0000                  		dc.w $80, 0
0000515E 0080 0000                  		dc.w $80, 0
00005162 50F0 011E                  		dc.w $50F0, $11E
00005166 2080 00B4                  		dc.w $2080, $B4
0000516A 3080 010E                  		dc.w $3080, $10E
0000516E 5080 01C2                  		dc.w $5080, $1C2
00005172 7080 0276                  		dc.w $7080, $276
00005176 0080 0000                  		dc.w $80, 0
0000517A 0080 0000                  		dc.w $80, 0
0000517E                            		even
0000517E                            
0000517E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000517E                            
0000517E                            ; Oscillate values
0000517E                            
0000517E                            OscillateNumDo:
0000517E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005184 6400                       		bcc.s	@end		; if yes, branch
00005186 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000518A 45F9 0000 0000             		lea	(@settings).l,a2
00005190 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
00005192 720F                       		moveq	#$F,d1
00005194                            
00005194                            @loop:
00005194 341A                       		move.w	(a2)+,d2	; get frequency
00005196 381A                       		move.w	(a2)+,d4	; get amplitude
00005198 0303                       		btst	d1,d3		; check oscillation direction
0000519A 6600                       		bne.s	@down		; branch if 1
0000519C                            
0000519C                            	@up:
0000519C 3029 0002                  		move.w	2(a1),d0	; get current rate
000051A0 D042                       		add.w	d2,d0		; add frequency
000051A2 3340 0002                  		move.w	d0,2(a1)
000051A6 D151                       		add.w	d0,0(a1)	; add rate to value
000051A8 B811                       		cmp.b	0(a1),d4
000051AA 6200                       		bhi.s	@next
000051AC 03C3                       		bset	d1,d3
000051AE 6000                       		bra.s	@next
000051B0                            
000051B0                            	@down:
000051B0 3029 0002                  		move.w	2(a1),d0
000051B4 9042                       		sub.w	d2,d0
000051B6 3340 0002                  		move.w	d0,2(a1)
000051BA D151                       		add.w	d0,0(a1)
000051BC B811                       		cmp.b	0(a1),d4
000051BE 6300                       		bls.s	@next
000051C0 0383                       		bclr	d1,d3
000051C2                            
000051C2                            	@next:
000051C2 5849                       		addq.w	#4,a1
000051C4 51C9 FFCE                  		dbf	d1,@loop
000051C8 31C3 FE5E                  		move.w	d3,(v_oscillate).w
000051CC                            
000051CC                            @end:
000051CC 4E75                       		rts	
000051CE                            ; End of function OscillateNumDo
000051CE                            
000051CE                            ; ===========================================================================
000051CE 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000051D2 0002 0018                  		dc.w 2,	$18
000051D6 0002 0020                  		dc.w 2,	$20
000051DA 0002 0030                  		dc.w 2,	$30
000051DE 0004 0020                  		dc.w 4,	$20
000051E2 0008 0008                  		dc.w 8,	8
000051E6 0008 0040                  		dc.w 8,	$40
000051EA 0004 0040                  		dc.w 4,	$40
000051EE 0002 0050                  		dc.w 2,	$50
000051F2 0002 0050                  		dc.w 2,	$50
000051F6 0002 0020                  		dc.w 2,	$20
000051FA 0003 0030                  		dc.w 3,	$30
000051FE 0005 0050                  		dc.w 5,	$50
00005202 0007 0070                  		dc.w 7,	$70
00005206 0002 0010                  		dc.w 2,	$10
0000520A 0002 0010                  		dc.w 2,	$10
0000520E                            		even
0000520E                            		even
0000520E                            
0000520E                            ; ---------------------------------------------------------------------------
0000520E                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
0000520E                            ; ---------------------------------------------------------------------------
0000520E                            
0000520E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000520E                            
0000520E                            
0000520E                            SynchroAnimate:
0000520E                            
0000520E                            ; Used for GHZ spiked log
0000520E                            Sync1:
0000520E 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
00005212 6A00                       		bpl.s	Sync2		; if not, branch
00005214 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
0000521A 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
0000521E 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005224                            
00005224                            ; Used for rings and giant rings
00005224                            Sync2:
00005224 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00005228 6A00                       		bpl.s	Sync3
0000522A 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
00005230 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005234 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0000523A                            
0000523A                            ; Used for nothing
0000523A                            Sync3:
0000523A 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000523E 6A00                       		bpl.s	Sync4
00005240 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005246 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0000524A 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
00005250 6500                       		blo.s	Sync4
00005252 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005258                            
00005258                            ; Used for bouncing rings
00005258                            Sync4:
00005258 4A38 FEC6                  		tst.b	(v_ani3_time).w
0000525C 6700                       		beq.s	SyncEnd
0000525E 7000                       		moveq	#0,d0
00005260 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005264 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005268 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
0000526C EF58                       		rol.w	#7,d0
0000526E 0240 0003                  		andi.w	#3,d0
00005272 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005276 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0000527A                            
0000527A                            SyncEnd:
0000527A 4E75                       		rts	
0000527C                            ; End of function SynchroAnimate
0000527C                            
0000527C                            ; ---------------------------------------------------------------------------
0000527C                            ; End-of-act signpost pattern loading subroutine
0000527C                            ; ---------------------------------------------------------------------------
0000527C                            
0000527C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000527C                            
0000527C                            
0000527C                            SignpostArtLoad:
0000527C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00005280 6600 0000                  		bne.w	@exit		; if yes, branch
00005284 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
0000528A 6700                       		beq.s	@exit		; if yes, branch
0000528C                            
0000528C 3038 F700                  		move.w	(v_screenposx).w,d0
00005290 3238 F72A                  		move.w	(v_limitright2).w,d1
00005294 0441 0100                  		subi.w	#$100,d1
00005298 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000529A 6D00                       		blt.s	@exit		; if not, branch
0000529C 4A38 FE1E                  		tst.b	(f_timecount).w
000052A0 6700                       		beq.s	@exit
000052A2 B278 F728                  		cmp.w	(v_limitleft2).w,d1
000052A6 6700                       		beq.s	@exit
000052A8 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
000052AC 7000                       		moveq	#plcid_Signpost,d0
000052AE 6000 C470                  		bra.w	NewPLC		; load signpost	patterns
000052B2                            
000052B2                            	@exit:
000052B2 4E75                       		rts	
000052B4                            ; End of function SignpostArtLoad
000052B4                            
000052B4                            ; ===========================================================================
000052B4                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005334                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005464                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000054E4                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000055E4                            ; ===========================================================================
000055E4                            
000055E4                            ; ---------------------------------------------------------------------------
000055E4                            ; Special Stage
000055E4                            ; ---------------------------------------------------------------------------
000055E4                            
000055E4                            GM_Special:
000055EC 6100 CCC2                  		bsr.w	PaletteWhiteOut
000055F0 46FC 2700                  		disable_ints
000055F4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000055FA 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000055FE 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00005602 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005608 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
0000560C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005610 0200 00BF                  		andi.b	#$BF,d0
00005614 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000561A 6100 BB68                  		bsr.w	ClearScreen
0000561E 46FC 2300                  		enable_ints
00005622 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005644                            
00005644                            	SS_WaitForDMA:
00005644 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005646 0801 0001                  		btst	#1,d1		; is DMA running?
0000564A 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
0000564C 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
00005650 6100 0000                  		bsr.w	SS_BGLoad
00005654 7000                       		moveq	#plcid_SpecialStage,d0
00005656 6100 C202                  		bsr.w	QuickPLC	; load special stage patterns
0000565A                            
0000565A 43F8 D000                  		lea	(v_objspace).w,a1
0000565E 7000                       		moveq	#0,d0
00005660 323C 07FF                  		move.w	#$7FF,d1
00005664                            	SS_ClrObjRam:
00005664 22C0                       		move.l	d0,(a1)+
00005666 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000566A                            
0000566A 43F8 F700                  		lea	(v_screenposx).w,a1
0000566E 7000                       		moveq	#0,d0
00005670 323C 003F                  		move.w	#$3F,d1
00005674                            	SS_ClrRam1:
00005674 22C0                       		move.l	d0,(a1)+
00005676 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
0000567A                            
0000567A 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000567E 7000                       		moveq	#0,d0
00005680 323C 0027                  		move.w	#$27,d1
00005684                            	SS_ClrRam2:
00005684 22C0                       		move.l	d0,(a1)+
00005686 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000568A                            
0000568A 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000568E 7000                       		moveq	#0,d0
00005690 323C 007F                  		move.w	#$7F,d1
00005694                            	SS_ClrNemRam:
00005694 22C0                       		move.l	d0,(a1)+
00005696 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000569A                            
0000569A 4238 F64E                  		clr.b	(f_wtr_state).w
0000569E 4278 FE02                  		clr.w	(f_restart).w
000056A2 700A                       		moveq	#palid_Special,d0
000056A4 6100 CD8A                  		bsr.w	PalLoad1	; load special stage palette
000056A8 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
000056AE 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
000056B6 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
000056BE 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
000056C4 6100 0000                  		bsr.w	PalCycle_SS
000056C8 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
000056CC 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000056DA 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000056E0 43F9 0000 5090             		lea	(DemoDataPtr).l,a1
000056E6 7006                       		moveq	#6,d0
000056E8 E548                       		lsl.w	#2,d0
000056EA 2271 0000                  		movea.l	(a1,d0.w),a1
000056EE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
000056F4 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000056F8 4278 FE20                  		clr.w	(v_rings).w
000056FC 4238 FE1B                  		clr.b	(v_lifecount).w
00005700 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005706 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000570C 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00005710 6700                       		beq.s	SS_NoDebug	; if not, branch
00005712 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005718 6700                       		beq.s	SS_NoDebug	; if not, branch
0000571A 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005720                            
00005720                            	SS_NoDebug:
00005720 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005724 0000 0040                  		ori.b	#$40,d0
00005728 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000572E 6100 CAD4                  		bsr.w	PaletteWhiteIn
00005732                            
00005732                            ; ---------------------------------------------------------------------------
00005732                            ; Main Special Stage loop
00005732                            ; ---------------------------------------------------------------------------
00005732                            
00005732                            SS_MainLoop:
00005732 6100 BB2C                  		bsr.w	PauseGame
00005736 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
0000573C 6100 E2C6                  		bsr.w	WaitForVBla
00005740 6100 F89E                  		bsr.w	MoveSonicInDemo
00005744 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
0000574A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005750 4EB9 0000 0000             		jsr	(BuildSprites).l
00005756 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
0000575C 6100 0000                  		bsr.w	SS_BGAnimate
00005760 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005764 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005766 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
0000576A 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000576E                            
0000576E                            	SS_ChkEnd:
0000576E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005774 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005778                            
00005778 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
0000577C 6600 0000                  		bne.w	SS_ToLevel
00005780 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005786 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
0000578C 6500                       		blo.s	SS_Finish	; if not, branch
0000578E 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
00005792                            
00005792                            SS_Finish:
00005792 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005798 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000579E 4278 F794                  		clr.w	(v_palchgspeed).w
000057A2                            
000057A2                            	SS_FinLoop:
000057A2 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000057A8 6100 E25A                  		bsr.w	WaitForVBla
000057AC 6100 F832                  		bsr.w	MoveSonicInDemo
000057B0 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000057B6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000057BC 4EB9 0000 0000             		jsr	(BuildSprites).l
000057C2 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000057C8 6100 0000                  		bsr.w	SS_BGAnimate
000057CC 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000057D0 6A00                       		bpl.s	loc_47D4
000057D2 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000057D8 6100 CAF6                  		bsr.w	WhiteOut_ToWhite
000057DC                            
000057DC                            loc_47D4:
000057DC 4A78 F614                  		tst.w	(v_demolength).w
000057E0 66C0                       		bne.s	SS_FinLoop
000057E2                            
000057E2 46FC 2700                  		disable_ints
000057E6 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000057EC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000057F0 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000057F4 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000057F8 6100 B98A                  		bsr.w	ClearScreen
00005806 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000580C 6100 BAF4                  		bsr.w	NemDec
00005810 4EB9 0000 0000             		jsr	(Hud_Base).l
00005816 31FC C800 C8FC             		ResetDMAQueue	
0000581C 46FC 2300                  		enable_ints
00005820 7011                       		moveq	#palid_SSResult,d0
00005822 6100 CC48                  		bsr.w	PalLoad2	; load results screen palette
00005826 7000                       		moveq	#plcid_Main,d0
00005828 6100 BEF6                  		bsr.w	NewPLC
0000582C 7000                       		moveq	#plcid_SSResult,d0
0000582E 6100 BEBE                  		bsr.w	AddPLC		; load results screen patterns
00005832 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005838 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
0000583E 3038 FE20                  		move.w	(v_rings).w,d0
00005842 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005846 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005854                            
00005854 43F8 D000                  		lea	(v_objspace).w,a1
00005858 7000                       		moveq	#0,d0
0000585A 323C 07FF                  		move.w	#$7FF,d1
0000585E                            	SS_EndClrObjRam:
0000585E 22C0                       		move.l	d0,(a1)+
00005860 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005864                            
00005864 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
0000586A                            
0000586A                            SS_NormalExit:
0000586A 6100 B9F4                  		bsr.w	PauseGame
0000586E 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005874 6100 E18E                  		bsr.w	WaitForVBla
00005878 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000587E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005884 6100 BED4                  		bsr.w	RunPLC
00005888 4A78 FE02                  		tst.w	(f_restart).w
0000588C 67DC                       		beq.s	SS_NormalExit
0000588E 4AB8 F680                  		tst.l	(v_plc_buffer).w
00005892 66D6                       		bne.s	SS_NormalExit
0000589C 6100 CA12                  		bsr.w	PaletteWhiteOut
000058A0 4E75                       		rts	
000058A2                            ; ===========================================================================
000058A2                            
000058A2                            SS_ToSegaScreen:
000058A2 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
000058A8 4E75                       		rts
000058AA                            
000058AA 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
000058B0 67F0                       		beq.s	SS_ToSegaScreen
000058B2 4E75                       		rts
000058B4                            
000058B4                            ; ---------------------------------------------------------------------------
000058B4                            ; Special stage	background loading subroutine
000058B4                            ; ---------------------------------------------------------------------------
000058B4                            
000058B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058B4                            
000058B4                            
000058B4                            SS_BGLoad:
000058B4 43F9 00FF 0000             		lea	($FF0000).l,a1
000058BA 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000058C0 303C 4051                  		move.w	#$4051,d0
000058C4 6100 BFC6                  		bsr.w	EniDec
000058C8 263C 5000 0001             		move.l	#$50000001,d3
000058CE 45F9 00FF 0080             		lea	($FF0080).l,a2
000058D4 7E06                       		moveq	#6,d7
000058D6                            
000058D6                            loc_48BE:
000058D6 2003                       		move.l	d3,d0
000058D8 7C03                       		moveq	#3,d6
000058DA 7800                       		moveq	#0,d4
000058DC 0C47 0003                  		cmpi.w	#3,d7
000058E0 6400                       		bhs.s	loc_48CC
000058E2 7801                       		moveq	#1,d4
000058E4                            
000058E4                            loc_48CC:
000058E4 7A07                       		moveq	#7,d5
000058E6                            
000058E6                            loc_48CE:
000058E6 224A                       		movea.l	a2,a1
000058E8 0A04 0001                  		eori.b	#1,d4
000058EC 6600                       		bne.s	loc_48E2
000058EE 0C47 0006                  		cmpi.w	#6,d7
000058F2 6600                       		bne.s	loc_48F2
000058F4 43F9 00FF 0000             		lea	($FF0000).l,a1
000058FA                            
000058FA                            loc_48E2:
000058FA 48E7 F800                  		movem.l	d0-d4,-(sp)
000058FE 7207                       		moveq	#7,d1
00005900 7407                       		moveq	#7,d2
00005902 6100 B9D4                  		bsr.w	TilemapToVRAM
00005906 4CDF 001F                  		movem.l	(sp)+,d0-d4
0000590A                            
0000590A                            loc_48F2:
0000590A 0680 0010 0000             		addi.l	#$100000,d0
00005910 51CD FFD4                  		dbf	d5,loc_48CE
00005914 0680 0380 0000             		addi.l	#$3800000,d0
0000591A 0A04 0001                  		eori.b	#1,d4
0000591E 51CE FFC4                  		dbf	d6,loc_48CC
00005922 0683 1000 0000             		addi.l	#$10000000,d3
00005928 6A00                       		bpl.s	loc_491C
0000592A 4843                       		swap	d3
0000592C 0683 0000 C000             		addi.l	#$C000,d3
00005932 4843                       		swap	d3
00005934                            
00005934                            loc_491C:
00005934 D4FC 0080                  		adda.w	#$80,a2
00005938 51CF FF9C                  		dbf	d7,loc_48BE
0000593C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005942 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005948 303C 4000                  		move.w	#$4000,d0
0000594C 6100 BF3E                  		bsr.w	EniDec
00005950 43F9 00FF 0000             		lea	($FF0000).l,a1
00005956 203C 4000 0003             		move.l	#$40000003,d0
0000595C 723F                       		moveq	#$3F,d1
0000595E 741F                       		moveq	#$1F,d2
00005960 6100 B976                  		bsr.w	TilemapToVRAM
00005964 43F9 00FF 0000             		lea	($FF0000).l,a1
0000596A 203C 5000 0003             		move.l	#$50000003,d0
00005970 723F                       		moveq	#$3F,d1
00005972 743F                       		moveq	#$3F,d2
00005974 6100 B962                  		bsr.w	TilemapToVRAM
00005978 4E75                       		rts	
0000597A                            ; End of function SS_BGLoad
0000597A                            
0000597A                            ; ---------------------------------------------------------------------------
0000597A                            ; Palette cycling routine - special stage
0000597A                            ; ---------------------------------------------------------------------------
0000597A                            
0000597A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000597A                            
0000597A                            
0000597A                            PalCycle_SS:
0000597A 4A78 F63A                  		tst.w	(f_pause).w
0000597E 6600                       		bne.s	locret_49E6
00005980 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005984 6A00                       		bpl.s	locret_49E6
00005986 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000598C 3038 F79A                  		move.w	(v_palss_num).w,d0
00005990 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005994 0240 001F                  		andi.w	#$1F,d0
00005998 E548                       		lsl.w	#2,d0
0000599A 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000059A0 D0C0                       		adda.w	d0,a0
000059A2 1018                       		move.b	(a0)+,d0
000059A4 6A00                       		bpl.s	loc_4992
000059A6 303C 01FF                  		move.w	#$1FF,d0
000059AA                            
000059AA                            loc_4992:
000059AA 31C0 F79C                  		move.w	d0,(v_palss_time).w
000059AE 7000                       		moveq	#0,d0
000059B0 1018                       		move.b	(a0)+,d0
000059B2 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000059B6 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000059BC 43F1 0000                  		lea	(a1,d0.w),a1
000059C0 303C 8200                  		move.w	#-$7E00,d0
000059C4 1019                       		move.b	(a1)+,d0
000059C6 3C80                       		move.w	d0,(a6)
000059C8 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
000059CC 303C 8400                  		move.w	#-$7C00,d0
000059D0 1018                       		move.b	(a0)+,d0
000059D2 3C80                       		move.w	d0,(a6)
000059D4 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
000059DE 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
000059E6 7000                       		moveq	#0,d0
000059E8 1018                       		move.b	(a0)+,d0
000059EA 6B00                       		bmi.s	loc_49E8
000059EC 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000059F2 D2C0                       		adda.w	d0,a1
000059F4 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
000059F8 24D9                       		move.l	(a1)+,(a2)+
000059FA 24D9                       		move.l	(a1)+,(a2)+
000059FC 24D9                       		move.l	(a1)+,(a2)+
000059FE                            
000059FE                            locret_49E6:
000059FE 4E75                       		rts	
00005A00                            ; ===========================================================================
00005A00                            
00005A00                            loc_49E8:
00005A00 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005A04 0C40 008A                  		cmpi.w	#$8A,d0
00005A08 6500                       		blo.s	loc_49F4
00005A0A 5241                       		addq.w	#1,d1
00005A0C                            
00005A0C                            loc_49F4:
00005A0C C2FC 002A                  		mulu.w	#$2A,d1
00005A10 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005A16 D2C1                       		adda.w	d1,a1
00005A18 0240 007F                  		andi.w	#$7F,d0
00005A1C 0880 0000                  		bclr	#0,d0
00005A20 6700                       		beq.s	loc_4A18
00005A22 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005A26 24D1                       		move.l	(a1),(a2)+
00005A28 24E9 0004                  		move.l	4(a1),(a2)+
00005A2C 24E9 0008                  		move.l	8(a1),(a2)+
00005A30                            
00005A30                            loc_4A18:
00005A30 D2FC 000C                  		adda.w	#$C,a1
00005A34 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005A38 0C40 000A                  		cmpi.w	#$A,d0
00005A3C 6500                       		blo.s	loc_4A2E
00005A3E 0440 000A                  		subi.w	#$A,d0
00005A42 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005A46                            
00005A46                            loc_4A2E:
00005A46 3200                       		move.w	d0,d1
00005A48 D040                       		add.w	d0,d0
00005A4A D041                       		add.w	d1,d0
00005A4C D2C0                       		adda.w	d0,a1
00005A4E 24D9                       		move.l	(a1)+,(a2)+
00005A50 34D9                       		move.w	(a1)+,(a2)+
00005A52 4E75                       		rts	
00005A54                            ; End of function PalCycle_SS
00005A54                            
00005A54                            ; ===========================================================================
00005A54 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005A64                            
00005A64 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005A74 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005A84 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005A94 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005AA4 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005AB4 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005AC4 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005AD4                            		even
00005AD4 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005AE2                            		even
00005AE2                            
00005AE2                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005B2A                            		even
00005B2A                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005BFC                            		even
00005BFC                            
00005BFC                            ; ---------------------------------------------------------------------------
00005BFC                            ; Subroutine to	make the special stage background animated
00005BFC                            ; ---------------------------------------------------------------------------
00005BFC                            
00005BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BFC                            
00005BFC                            
00005BFC                            SS_BGAnimate:
00005BFC 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005C00 6600                       		bne.s	loc_4BF6
00005C02 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005C08 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005C0E                            
00005C0E                            loc_4BF6:
00005C0E 0C40 0008                  		cmpi.w	#8,d0
00005C12 6400                       		bhs.s	loc_4C4E
00005C14 0C40 0006                  		cmpi.w	#6,d0
00005C18 6600                       		bne.s	loc_4C10
00005C1A 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005C1E 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005C22 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005C28                            
00005C28                            loc_4C10:
00005C28 7000                       		moveq	#0,d0
00005C2A 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005C2E 4440                       		neg.w	d0
00005C30 4840                       		swap	d0
00005C32 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005C38 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C3C 7609                       		moveq	#9,d3
00005C3E                            
00005C3E                            loc_4C26:
00005C3E 302B 0002                  		move.w	2(a3),d0
00005C42 6100 DDF2                  		bsr.w	CalcSine
00005C46 7400                       		moveq	#0,d2
00005C48 1419                       		move.b	(a1)+,d2
00005C4A C1C2                       		muls.w	d2,d0
00005C4C E080                       		asr.l	#8,d0
00005C4E 36C0                       		move.w	d0,(a3)+
00005C50 1419                       		move.b	(a1)+,d2
00005C52 4882                       		ext.w	d2
00005C54 D55B                       		add.w	d2,(a3)+
00005C56 51CB FFE6                  		dbf	d3,loc_4C26
00005C5A 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C5E 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005C64 6000                       		bra.s	loc_4C7E
00005C66                            ; ===========================================================================
00005C66                            
00005C66                            loc_4C4E:
00005C66 0C40 000C                  		cmpi.w	#$C,d0
00005C6A 6600                       		bne.s	loc_4C74
00005C6C 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005C70 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C74 243C 0001 8000             		move.l	#$18000,d2
00005C7A 7206                       		moveq	#6,d1
00005C7C                            
00005C7C                            loc_4C64:
00005C7C 2013                       		move.l	(a3),d0
00005C7E 9082                       		sub.l	d2,d0
00005C80 26C0                       		move.l	d0,(a3)+
00005C82 0482 0000 2000             		subi.l	#$2000,d2
00005C88 51C9 FFF2                  		dbf	d1,loc_4C64
00005C8C                            
00005C8C                            loc_4C74:
00005C8C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C90 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005C96                            
00005C96                            loc_4C7E:
00005C96 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005C9A 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005C9E 4440                       		neg.w	d0
00005CA0 4840                       		swap	d0
00005CA2 7600                       		moveq	#0,d3
00005CA4 161A                       		move.b	(a2)+,d3
00005CA6 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005CAA 4442                       		neg.w	d2
00005CAC 0242 00FF                  		andi.w	#$FF,d2
00005CB0 E54A                       		lsl.w	#2,d2
00005CB2                            
00005CB2                            loc_4C9A:
00005CB2 301B                       		move.w	(a3)+,d0
00005CB4 544B                       		addq.w	#2,a3
00005CB6 7200                       		moveq	#0,d1
00005CB8 121A                       		move.b	(a2)+,d1
00005CBA 5341                       		subq.w	#1,d1
00005CBC                            
00005CBC                            loc_4CA4:
00005CBC 2380 2000                  		move.l	d0,(a1,d2.w)
00005CC0 5842                       		addq.w	#4,d2
00005CC2 0242 03FC                  		andi.w	#$3FC,d2
00005CC6 51C9 FFF4                  		dbf	d1,loc_4CA4
00005CCA 51CB FFE6                  		dbf	d3,loc_4C9A
00005CCE 4E75                       		rts	
00005CD0                            ; End of function SS_BGAnimate
00005CD0                            
00005CD0                            ; ===========================================================================
00005CD0 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005CDC                            		even
00005CDC 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005CE4                            		even
00005CE4 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005CF8                            		even
00005CF8                            
00005CF8                            ; ===========================================================================
00005CF8                            
00005CF8                            ; ---------------------------------------------------------------------------
00005CF8                            ; Continue screen
00005CF8                            ; ---------------------------------------------------------------------------
00005CF8                            
00005CF8                            GM_Continue:
00005CF8 6100 C48C                  		bsr.w	PaletteFadeOut
00005CFC 46FC 2700                  		disable_ints
00005D00 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005D04 0200 00BF                  		andi.b	#$BF,d0
00005D08 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005D0E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005D14 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005D18 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005D1C 6100 B466                  		bsr.w	ClearScreen
00005D20 31FC C800 C8FC             		ResetDMAQueue
00005D26 4EB8 10A6                  		jsr		ReadJoypads
00005D2A 43F8 D000                  		lea	(v_objspace).w,a1
00005D2E 7000                       		moveq	#0,d0
00005D30 323C 07FF                  		move.w	#$7FF,d1
00005D34                            	Cont_ClrObjRam:
00005D34 22C0                       		move.l	d0,(a1)+
00005D36 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005D3A                            
00005D44 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005D4A 6100 B5B6                  		bsr.w	NemDec
00005D58 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005D5E 6100 B5A2                  		bsr.w	NemDec
00005D6C 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005D72 6100 B58E                  		bsr.w	NemDec
00005D76 720A                       		moveq	#10,d1
00005D78 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005D7E 7012                       		moveq	#palid_Continue,d0
00005D80 6100 C6AE                  		bsr.w	PalLoad1	; load continue	screen palette
00005D8C 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005D92 42B8 F700                  		clr.l	(v_screenposx).w
00005D96 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005D9E 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005DA4 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005DAA 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005DB0 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005DB6 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005DBC 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005DC2 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005DC8 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005DCE 4EB9 0000 0000             		jsr	(BuildSprites).l
00005DD4 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005DD8 0000 0040                  		ori.b	#$40,d0
00005DDC 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005DE2 6100 C2FC                  		bsr.w	PaletteFadeIn
00005DE6                            
00005DE6                            ; ---------------------------------------------------------------------------
00005DE6                            ; Continue screen main loop
00005DE6                            ; ---------------------------------------------------------------------------
00005DE6                            
00005DE6                            Cont_MainLoop:
00005DE6 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005DEC 6100 DC16                  		bsr.w	WaitForVBla
00005DF0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005DF6 6400                       		bhs.s	loc_4DF2
00005DF8 46FC 2700                  		disable_ints
00005DFC 3238 F614                  		move.w	(v_demolength).w,d1
00005E00 82FC 003C                  		divu.w	#$3C,d1
00005E04 0281 0000 000F             		andi.l	#$F,d1
00005E0A 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005E10 46FC 2300                  		enable_ints
00005E14                            
00005E14                            loc_4DF2:
00005E14 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005E1A 4EB9 0000 0000             		jsr	(BuildSprites).l
00005E20 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005E26 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005E28 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005E2E 64B6                       		bhs.s	Cont_MainLoop
00005E30 4A78 F614                  		tst.w	(v_demolength).w
00005E34 6600 FFB0                  		bne.w	Cont_MainLoop
00005E38 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005E3E 4E75                       		rts	
00005E40                            ; ===========================================================================
00005E40                            
00005E40                            Cont_GotoLevel:
00005E40 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005E46 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005E4C 7000                       		moveq	#0,d0
00005E4E 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005E52 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005E56 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005E5A 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005E5E 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005E62 4E75                       		rts	
00005E64                            ; ===========================================================================
00005E64                            
00005E64                            		include	"_incObj\80 Continue Screen Elements.asm"
00005E64                            ; ---------------------------------------------------------------------------
00005E64                            ; Object 80 - Continue screen elements
00005E64                            ; ---------------------------------------------------------------------------
00005E64                            
00005E64                            ContScrItem:
00005E64 7000                       		moveq	#0,d0
00005E66 1028 0024                  		move.b	$24(a0),d0
00005E6A 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005E6E 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005E72                            ; ===========================================================================
00005E72 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005E74 0000                       		dc.w CSI_Display-CSI_Index
00005E76 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005E78 0000                       		dc.w CSI_ChkDel-CSI_Index
00005E7A                            ; ===========================================================================
00005E7A                            
00005E7A                            CSI_Main:	; Routine 0
00005E7A 5428 0024                  		addq.b	#2,obRoutine(a0)
00005E7E 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005E86 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005E8C 117C 0000 0001             		move.b	#0,obRender(a0)
00005E92 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005E98 317C 0120 0008             		move.w	#$120,obX(a0)
00005E9E 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005EA4 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005EAA                            
00005EAA                            CSI_Display:	; Routine 2
00005EAA 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005EB0                            ; ===========================================================================
00005EB0                            
00005EB0                            	CSI_MiniSonicPos:
00005EB0 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005EC2 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005ECE                            
00005ECE                            CSI_MakeMiniSonic:
00005ECE                            		; Routine 4
00005ECE 2248                       		movea.l	a0,a1
00005ED0 45F9 0000 5EB0             		lea	(CSI_MiniSonicPos).l,a2
00005ED6 7200                       		moveq	#0,d1
00005ED8 1238 FE18                  		move.b	(v_continues).w,d1
00005EDC 5501                       		subq.b	#2,d1
00005EDE 6400                       		bcc.s	CSI_MoreThan1
00005EE0 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005EE6                            
00005EE6                            	CSI_MoreThan1:
00005EE6 7601                       		moveq	#1,d3
00005EE8 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005EEC 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005EEE                            
00005EEE 7600                       		moveq	#0,d3
00005EF0 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005EF2                            
00005EF2                            	CSI_FewerThan16:
00005EF2 1401                       		move.b	d1,d2
00005EF4 0202 0001                  		andi.b	#1,d2
00005EF8                            
00005EF8                            CSI_MiniSonicLoop:
00005EF8 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005EFC 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005F00 4A02                       		tst.b	d2		; do you have an even number of continues?
00005F02 6700                       		beq.s	CSI_Even	; if yes, branch
00005F04 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005F0A                            
00005F0A                            	CSI_Even:
00005F0A 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005F10 137C 0006 001A             		move.b	#6,obFrame(a1)
00005F16 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005F1C 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00005F24 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00005F2A 137C 0000 0001             		move.b	#0,obRender(a1)
00005F30 43E9 0040                  		lea	$40(a1),a1
00005F34 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00005F38                            
00005F38 43E9 FFC0                  		lea	-$40(a1),a1
00005F3C 1343 0028                  		move.b	d3,obSubtype(a1)
00005F40                            
00005F40                            CSI_ChkDel:	; Routine 6
00005F40 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00005F44 6700                       		beq.s	CSI_Animate	; if yes, branch
00005F46 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00005F4C 6500                       		bcs.s	CSI_Animate	; if not, branch
00005F4E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F52 0200 0001                  		andi.b	#1,d0
00005F56 6600                       		bne.s	CSI_Animate
00005F58 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00005F5C 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00005F5E 4E75                       		rts	
00005F60                            
00005F60                            CSI_Animate:
00005F60 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F64 0200 000F                  		andi.b	#$F,d0
00005F68 6600                       		bne.s	CSI_Display2
00005F6A 0868 0000 001A             		bchg	#0,obFrame(a0)
00005F70                            
00005F70                            	CSI_Display2:
00005F70 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F76                            ; ===========================================================================
00005F76                            
00005F76                            CSI_Delete:
00005F76 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F76 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F7C                            		include	"_incObj\81 Continue Screen Sonic.asm"
00005F7C                            ; ---------------------------------------------------------------------------
00005F7C                            ; Object 81 - Sonic on the continue screen
00005F7C                            ; ---------------------------------------------------------------------------
00005F7C                            
00005F7C                            ContSonic:
00005F7C 7000                       		moveq	#0,d0
00005F7E 1028 0024                  		move.b	obRoutine(a0),d0
00005F82 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00005F86 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00005F8A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F90                            ; ===========================================================================
00005F90 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00005F92 0000                       		dc.w CSon_ChkLand-CSon_Index
00005F94 0000                       		dc.w CSon_Animate-CSon_Index
00005F96 0000                       		dc.w CSon_Run-CSon_Index
00005F98                            ; ===========================================================================
00005F98                            
00005F98                            CSon_Main:	; Routine 0
00005F98 5428 0024                  		addq.b	#2,obRoutine(a0)
00005F9C 317C 00A0 0008             		move.w	#$A0,obX(a0)
00005FA2 317C 00C0 000C             		move.w	#$C0,obY(a0)
00005FA8 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005FB0 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005FB6 117C 0004 0001             		move.b	#4,obRender(a0)
00005FBC 317C 0100 0018             		move.w	#$100,obPriority(a0)
00005FC2 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00005FC8 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00005FCE                            
00005FCE                            CSon_ChkLand:	; Routine 2
00005FCE 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00005FD4 6600                       		bne.s	CSon_ShowFall	; if not, branch
00005FD6                            
00005FD6 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FDA 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00005FDE 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005FE6 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005FEC 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00005FF2 6000                       		bra.s	CSon_Animate
00005FF4                            
00005FF4                            CSon_ShowFall:
00005FF4 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005FFA 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00006000 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006006                            ; ===========================================================================
00006006                            
00006006                            CSon_Animate:	; Routine 4
00006006 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
0000600A 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
0000600C 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00006012 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006018                            
00006018                            CSon_GetUp:
00006018 5428 0024                  		addq.b	#2,obRoutine(a0)
0000601C 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00006024 317C 0780 0002             		move.w	#$780,obGfx(a0)
0000602A 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00006030 4268 0020                  		clr.w	obInertia(a0)
00006034 5168 000C                  		subq.w	#8,obY(a0)
00006040                            
00006040                            CSon_Run:	; Routine 6
00006040 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00006046 6600                       		bne.s	CSon_AddInertia	; if too low, branch
00006048 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
0000604E 6000                       		bra.s	CSon_ShowRun
00006050                            
00006050                            CSon_AddInertia:
00006050 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
00006056                            
00006056                            CSon_ShowRun:
00006056 4EB9 0000 0000             		jsr	(SpeedToPos).l
0000605C 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00006062 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006062 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006068                            		include	"_anim\Continue Screen Sonic.asm"
00006068                            ; ---------------------------------------------------------------------------
00006068                            ; Animation script - Sonic on the continue screen
00006068                            ; ---------------------------------------------------------------------------
00006068 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
0000606A 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
00006074                            		even
00006074                            		even
00006074                            Map_ContScr:	include	"_maps\Continue Screen.asm"
00006074                            ; --------------------------------------------------------------------------------
00006074                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006074                            ; --------------------------------------------------------------------------------
00006074                            
00006074                            SME_phED7:	
00006074 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
00006078 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
0000607C 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
00006080 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
00006084 0B                         SME_phED7_10:	dc.b $B	
00006085 F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
0000608A F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
0000608F F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
00006094 F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
00006099 F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
0000609E F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
000060A3 F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
000060A8 F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
000060AD 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
000060B2 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
000060B7 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
000060BC 03                         SME_phED7_48:	dc.b 3	
000060BD 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
000060C2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000060C7 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000060CC 03                         SME_phED7_58:	dc.b 3	
000060CD 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
000060D2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000060D7 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000060DC 03                         SME_phED7_68:	dc.b 3	
000060DD 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
000060E2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000060E7 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000060EC 02                         SME_phED7_78:	dc.b 2	
000060ED 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
000060F2 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
000060F7 01                         SME_phED7_83:	dc.b 1	
000060F8 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
000060FD 01                         SME_phED7_89:	dc.b 1	
000060FE 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00006103 01                         SME_phED7_8F:	dc.b 1	
00006104 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
0000610A 00                         		even
0000610A 00                         		even
0000610A                            
0000610A                            ; ===========================================================================
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            ; Ending sequence in Green Hill	Zone
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            
0000610A                            GM_Ending:
00006112 6100 C072                  		bsr.w	PaletteFadeOut
00006116                            
00006116 43F8 D000                  		lea	(v_objspace).w,a1
0000611A 7000                       		moveq	#0,d0
0000611C 323C 07FF                  		move.w	#$7FF,d1
00006120                            	End_ClrObjRam:
00006120 22C0                       		move.l	d0,(a1)+
00006122 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006126                            
00006126 43F8 F628                  		lea	($FFFFF628).w,a1
0000612A 7000                       		moveq	#0,d0
0000612C 323C 0015                  		move.w	#$15,d1
00006130                            	End_ClrRam1:
00006130 22C0                       		move.l	d0,(a1)+
00006132 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00006136                            
00006136 43F8 F700                  		lea	(v_screenposx).w,a1
0000613A 7000                       		moveq	#0,d0
0000613C 323C 003F                  		move.w	#$3F,d1
00006140                            	End_ClrRam2:
00006140 22C0                       		move.l	d0,(a1)+
00006142 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006146                            
00006146 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000614A 7000                       		moveq	#0,d0
0000614C 323C 0047                  		move.w	#$47,d1
00006150                            	End_ClrRam3:
00006150 22C0                       		move.l	d0,(a1)+
00006152 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006156                            
00006156 46FC 2700                  		disable_ints
0000615A 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000615E 0200 00BF                  		andi.b	#$BF,d0
00006162 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006168 6100 B01A                  		bsr.w	ClearScreen
0000616C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006172 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006176 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000617A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000617E 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00006182 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006186 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
0000618A 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
0000618E 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00006194 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00006198 31FC 001E FE14             		move.w	#30,(v_air).w
0000619E 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
000061A4 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
000061AA 6700                       		beq.s	End_LoadData	; if yes, branch
000061AC 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
000061B2                            
000061B2                            End_LoadData:
000061B2 7000                       		moveq	#plcid_Ending,d0
000061B4 6100 B6A4                  		bsr.w	QuickPLC	; load ending sequence patterns
000061B8 4EB9 0000 0000             		jsr	(Hud_Base).l
000061BE 6100 0000                  		bsr.w	LevelSizeLoad
000061C2 6100 0000                  		bsr.w	DeformLayers
000061C6 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000061CC 6100 0000                  		bsr.w	LevelDataLoad
000061D0 6100 0000                  		bsr.w	LoadTilesFromStart
000061D4 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
000061DC 46FC 2300                  		enable_ints
000061E0 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000061E6 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000061EA 6100 B81E                  		bsr.w	KosDec
000061EE 4EB9 0000 0000             		jsr		LoadPlayerPal
000061F4 6100 C23A                  		bsr.w	PalLoad1	; load Sonic's palette
00006200 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00006206 6700                       		beq.s	End_LoadSonic	; if not, branch
00006208 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
0000620E                            
0000620E                            End_LoadSonic:
0000620E 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00006214 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
0000621A 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
00006220 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00006226 31FC F800 D020             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
0000622C 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00006232 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006238 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000623E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006244 7000                       		moveq	#0,d0
00006246 31C0 FE20                  		move.w	d0,(v_rings).w
0000624A 21C0 FE22                  		move.l	d0,(v_time).w
0000624E 11C0 FE1B                  		move.b	d0,(v_lifecount).w
00006252 11C0 FE2C                  		move.b	d0,(v_shield).w
00006256 11C0 FE2D                  		move.b	d0,(v_invinc).w
0000625A 11C0 FE2E                  		move.b	d0,(v_shoes).w
0000625E 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006262 31C0 FE08                  		move.w	d0,(v_debuguse).w
00006266 31C0 FE02                  		move.w	d0,(f_restart).w
0000626A 31C0 FE04                  		move.w	d0,(v_framecount).w
0000626E 6100 EEB8                  		bsr.w	OscillateNumInit
00006272 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
00006278 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
0000627E 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00006284 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000628A 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006290 6100 D772                  		bsr.w	WaitForVBla
00006294 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006298 0000 0040                  		ori.b	#$40,d0
0000629C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000062A2 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000062A8 6100 BE36                  		bsr.w	PaletteFadeIn
000062AC                            
000062AC                            ; ---------------------------------------------------------------------------
000062AC                            ; Main ending sequence loop
000062AC                            ; ---------------------------------------------------------------------------
000062AC                            
000062AC                            End_MainLoop:
000062AC 6100 AFB2                  		bsr.w	PauseGame
000062B0 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000062B6 6100 D74C                  		bsr.w	WaitForVBla
000062BA 5278 FE04                  		addq.w	#1,(v_framecount).w
000062BE 6100 0000                  		bsr.w	End_MoveSonic
000062C2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000062C8 6100 0000                  		bsr.w	DeformLayers
000062CC 4EB9 0000 0000             		jsr	(BuildSprites).l
000062D2 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000062D8 6100 B9F8                  		bsr.w	PaletteCycle
000062DC 6100 EEA0                  		bsr.w	OscillateNumDo
000062E0 6100 EF2C                  		bsr.w	SynchroAnimate
000062E4 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000062EA 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000062EC                            
000062EC 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000062FA 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
00006300 4E75                       		rts	
00006302                            ; ===========================================================================
00006302                            
00006302                            End_ChkEmerald:
00006302 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
00006306 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000630A                            
0000630A 4278 FE02                  		clr.w	(f_restart).w
0000630E 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006314 4278 F794                  		clr.w	(v_palchgspeed).w
00006318                            
00006318                            	End_AllEmlds:
00006318 6100 AF46                  		bsr.w	PauseGame
0000631C 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006322 6100 D6E0                  		bsr.w	WaitForVBla
00006326 5278 FE04                  		addq.w	#1,(v_framecount).w
0000632A 6100 0000                  		bsr.w	End_MoveSonic
0000632E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006334 6100 0000                  		bsr.w	DeformLayers
00006338 4EB9 0000 0000             		jsr	(BuildSprites).l
0000633E 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006344 6100 EE38                  		bsr.w	OscillateNumDo
00006348 6100 EEC4                  		bsr.w	SynchroAnimate
0000634C 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00006350 6A00                       		bpl.s	End_SlowFade
00006352 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00006358 6100 BF76                  		bsr.w	WhiteOut_ToWhite
0000635C                            
0000635C                            	End_SlowFade:
0000635C 4A78 FE02                  		tst.w	(f_restart).w
00006360 6700 FFB6                  		beq.w	End_AllEmlds
00006364 4278 FE02                  		clr.w	(f_restart).w
00006368 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
0000636E 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006374 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000637A 47F8 F700                  		lea	(v_screenposx).w,a3
0000637E 49F8 A400                  		lea	(v_lvllayout).w,a4
00006382 343C 4000                  		move.w	#$4000,d2
00006386 6100 0000                  		bsr.w	DrawChunks
0000638A 7013                       		moveq	#palid_Ending,d0
0000638C 6100 C0A2                  		bsr.w	PalLoad1	; load ending palette
00006390 6100 BE72                  		bsr.w	PaletteWhiteIn
00006394 6000 FF16                  		bra.w	End_MainLoop
00006398                            
00006398                            ; ---------------------------------------------------------------------------
00006398                            ; Subroutine controlling Sonic on the ending sequence
00006398                            ; ---------------------------------------------------------------------------
00006398                            
00006398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006398                            
00006398                            
00006398                            End_MoveSonic:
00006398 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000639C 6600                       		bne.s	End_MoveSon2
0000639E 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
000063A4 6400                       		bhs.s	End_MoveSonExit	; if not, branch
000063A6                            
000063A6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063AA 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
000063B0 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
000063B6 4E75                       		rts	
000063B8                            ; ===========================================================================
000063B8                            
000063B8                            End_MoveSon2:
000063B8 5500                       		subq.b	#2,d0
000063BA 6600                       		bne.s	End_MoveSon3
000063BC 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
000063C2 6500                       		blo.s	End_MoveSonExit	; if not, branch
000063C4                            
000063C4 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063C8 7000                       		moveq	#0,d0
000063CA 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
000063CE 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
000063D2 31C0 D020                  		move.w	d0,(v_player+obInertia).w
000063D6 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
000063DC 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000063E2 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000063E8 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000063EE 4E75                       		rts	
000063F0                            ; ===========================================================================
000063F0                            
000063F0                            End_MoveSon3:
000063F0 5500                       		subq.b	#2,d0
000063F2 6600                       		bne.s	End_MoveSonExit
000063F4 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063F8 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
000063FE 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
00006404 4278 D024                  		clr.w	(v_player+obRoutine).w
00006408                            
00006408                            End_MoveSonExit:
00006408 4E75                       		rts	
0000640A                            ; End of function End_MoveSonic
0000640A                            
0000640A                            ; ===========================================================================
0000640A                            
0000640A                            		include	"_incObj\87 Ending Sequence Sonic.asm"
0000640A                            ; ---------------------------------------------------------------------------
0000640A                            ; Object 87 - Sonic on ending sequence
0000640A                            ; ---------------------------------------------------------------------------
0000640A                            
0000640A                            EndSonic:
0000640A 7000                       		moveq	#0,d0
0000640C 1028 0025                  		move.b	ob2ndRout(a0),d0
00006410 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006414 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
00006418 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000641E                            ; ===========================================================================
0000641E 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006422 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00006426 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
0000642A 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
0000642E 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
00006432                            
00006432 =00000030                  eson_time:	equ $30	; time to wait between events
00006432                            ; ===========================================================================
00006432                            
00006432                            ESon_Main:	; Routine 0
00006432 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006438 6700                       		beq.s	ESon_Main2	; if yes, branch
0000643A 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00006440 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006446 4E75                       		rts	
00006448                            ; ===========================================================================
00006448                            
00006448                            ESon_Main2:
00006448 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000644C 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006454 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000645A 117C 0004 0001             		move.b	#4,obRender(a0)
00006460 4228 0022                  		clr.b	obStatus(a0)
00006464 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000646A 117C 0000 001A             		move.b	#0,obFrame(a0)
00006470 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006476                            
00006476                            ESon_MakeEmeralds:
00006476                            		; Routine 2
00006476 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
0000647A 6600                       		bne.s	ESon_Wait
0000647C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006480 317C 0001 001C             		move.w	#1,obAnim(a0)
00006486 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
0000648C                            
0000648C                            	ESon_Wait:
0000648C 4E75                       		rts	
0000648E                            ; ===========================================================================
0000648E                            
0000648E                            Obj87_LookUp:	; Routine 6
0000648E 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006496 6600                       		bne.s	locret_5480
00006498 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
0000649E 317C 005A 0030             		move.w	#90,eson_time(a0)
000064A4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064A8                            
000064A8                            locret_5480:
000064A8 4E75                       		rts	
000064AA                            ; ===========================================================================
000064AA                            
000064AA                            Obj87_ClrObjRam:
000064AA                            		; Routine 8
000064AA 5368 0030                  		subq.w	#1,eson_time(a0)
000064AE 6600                       		bne.s	ESon_Wait2
000064B0 43F8 D400                  		lea	(v_objspace+$400).w,a1
000064B4 323C 00FF                  		move.w	#$FF,d1
000064B8                            
000064B8                            Obj87_ClrLoop:
000064B8 4299                       		clr.l	(a1)+
000064BA 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000064BE 31FC 0001 FE02             		move.w	#1,(f_restart).w
000064C4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064C8 117C 0001 001C             		move.b	#1,obAnim(a0)
000064CE 317C 003C 0030             		move.w	#60,eson_time(a0)
000064D4                            
000064D4                            ESon_Wait2:
000064D4 4E75                       		rts	
000064D6                            ; ===========================================================================
000064D6                            
000064D6                            Obj87_MakeLogo:	; Routine $C
000064D6 5368 0030                  		subq.w	#1,eson_time(a0)
000064DA 6600                       		bne.s	ESon_Wait3
000064DC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064E0 317C 00B4 0030             		move.w	#180,eson_time(a0)
000064E6 117C 0002 001C             		move.b	#2,obAnim(a0)
000064EC 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000064F2                            
000064F2                            ESon_Wait3:
000064F2 4E75                       		rts	
000064F4                            ; ===========================================================================
000064F4                            
000064F4                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000064F4 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000064FA 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006500                            ; ===========================================================================
00006500                            
00006500                            Obj87_Leap:	; Routine $10
00006500 5368 0030                  		subq.w	#1,eson_time(a0)
00006504 6600                       		bne.s	ESon_Wait4
00006506 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000650A 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006512 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006518 117C 0004 0001             		move.b	#4,obRender(a0)
0000651E 4228 0022                  		clr.b	obStatus(a0)
00006522 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006528 117C 0005 001A             		move.b	#5,obFrame(a0)
0000652E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
00006534 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
0000653A 60B8                       		bra.s	Obj87_Animate
0000653C                            ; ===========================================================================
0000653C                            
0000653C                            ESon_Wait4:
0000653C 4E75                       		rts	
0000653C 4E75                       		rts	
0000653E                            		include "_anim\Ending Sequence Sonic.asm"
0000653E                            ; ---------------------------------------------------------------------------
0000653E                            ; Animation script - Sonic on the ending sequence
0000653E                            ; ---------------------------------------------------------------------------
0000653E 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00006540 0000                       		dc.w byte_552A-AniScript_ESon
00006542 0000                       		dc.w byte_5534-AniScript_ESon
00006544 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006552 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000655C 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006564                            		even
00006564                            		even
00006564                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006564                            ; ---------------------------------------------------------------------------
00006564                            ; Object 88 - chaos emeralds on	the ending sequence
00006564                            ; ---------------------------------------------------------------------------
00006564                            
00006564                            EndChaos:
00006564 7000                       		moveq	#0,d0
00006566 1028 0024                  		move.b	obRoutine(a0),d0
0000656A 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
0000656E 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00006572 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006578                            ; ===========================================================================
00006578 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
0000657A 0000                       		dc.w ECha_Move-ECha_Index
0000657C                            
0000657C =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000657C =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000657C =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000657C =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000657C                            ; ===========================================================================
0000657C                            
0000657C                            ECha_Main:	; Routine 0
0000657C 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
00006582 6700                       		beq.s	ECha_CreateEms
00006584 588F                       		addq.l	#4,sp
00006586 4E75                       		rts	
00006588                            ; ===========================================================================
00006588                            
00006588                            ECha_CreateEms:
00006588 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
0000658E 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006594 2248                       		movea.l	a0,a1
00006596 7600                       		moveq	#0,d3
00006598 7401                       		moveq	#1,d2
0000659A 7205                       		moveq	#5,d1
0000659C                            
0000659C                            	ECha_LoadLoop:
0000659C 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
000065A0 5429 0024                  		addq.b	#2,obRoutine(a1)
000065A4 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
000065AC 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000065B2 137C 0004 0001             		move.b	#4,obRender(a1)
000065B8 337C 0080 0018             		move.w	#$80,obPriority(a1)
000065BE 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
000065C4 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
000065CA 1342 001C                  		move.b	d2,obAnim(a1)
000065CE 1342 001A                  		move.b	d2,obFrame(a1)
000065D2 5202                       		addq.b	#1,d2
000065D4 1343 0026                  		move.b	d3,obAngle(a1)
000065D8 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
000065DC 43E9 0040                  		lea	$40(a1),a1
000065E0 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000065E4                            
000065E4                            ECha_Move:	; Routine 2
000065E4 3028 003E                  		move.w	echa_angle(a0),d0
000065E8 D168 0026                  		add.w	d0,obAngle(a0)
000065EC 1028 0026                  		move.b	obAngle(a0),d0
000065F0 4EB9 0000 3A36             		jsr	(CalcSine).l
000065F6 7800                       		moveq	#0,d4
000065F8 1828 003C                  		move.b	echa_radius(a0),d4
000065FC C3C4                       		muls.w	d4,d1
000065FE E081                       		asr.l	#8,d1
00006600 C1C4                       		muls.w	d4,d0
00006602 E080                       		asr.l	#8,d0
00006604 D268 0038                  		add.w	echa_origX(a0),d1
00006608 D068 003A                  		add.w	echa_origY(a0),d0
0000660C 3141 0008                  		move.w	d1,obX(a0)
00006610 3140 000C                  		move.w	d0,obY(a0)
00006614                            
00006614                            	ECha_Expand:
00006614 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
0000661A 6700                       		beq.s	ECha_Rotate
0000661C 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006622                            
00006622                            	ECha_Rotate:
00006622 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
00006628 6700                       		beq.s	ECha_Rise
0000662A 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
00006630                            
00006630                            	ECha_Rise:
00006630 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
00006636 6700                       		beq.s	ECha_End
00006638 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
0000663C                            
0000663C                            ECha_End:
0000663C 4E75                       		rts	
0000663C 4E75                       		rts	
0000663E                            		include	"_incObj\89 Ending Sequence STH.asm"
0000663E                            ; ---------------------------------------------------------------------------
0000663E                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000663E                            ; ---------------------------------------------------------------------------
0000663E                            
0000663E                            EndSTH:
0000663E 7000                       		moveq	#0,d0
00006640 1028 0024                  		move.b	$24(a0),d0
00006644 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
00006648 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000664C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006652                            ; ===========================================================================
00006652 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006654 0000                       		dc.w ESth_Move-ESth_Index
00006656 0000                       		dc.w ESth_GotoCredits-ESth_Index
00006658                            
00006658 =00000030                  esth_time:	equ $30		; time until exit
00006658                            ; ===========================================================================
00006658                            
00006658                            ESth_Main:	; Routine 0
00006658 5428 0024                  		addq.b	#2,obRoutine(a0)
0000665C 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00006662 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
00006668 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
00006670 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006676 117C 0000 0001             		move.b	#0,obRender(a0)
0000667C 317C 0000 0018             		move.w	#0,obPriority(a0)
00006682                            
00006682                            ESth_Move:	; Routine 2
00006682 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
00006688 6700                       		beq.s	ESth_Delay	; if yes, branch
0000668A 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006690 4E75                       		rts
00006692                            
00006692                            ESth_Delay:
00006692 5428 0024                  		addq.b	#2,obRoutine(a0)
00006696 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000669C                            
0000669C                            ESth_GotoCredits:
0000669C                            		; Routine 4
0000669C 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
000066A0 6A00                       		bpl.s	ESth_Wait
000066A2 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
000066A8                            
000066A8                            	ESth_Wait:
000066A8 4E75                       		rts
000066AA                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
000066AA                            ; ---------------------------------------------------------------------------
000066AA                            ; Sprite mappings - Sonic on the ending	sequence
000066AA                            ; ---------------------------------------------------------------------------
000066AA                            Map_ESon_internal:
000066AA 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
000066AC 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
000066AE 0000                       		dc.w M_ESon_Up-Map_ESon_internal
000066B0 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
000066B2 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
000066B4 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
000066B6 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
000066B8 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
000066BA 02                         M_ESon_Hold1:	dc.b 2
000066BB EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000066C0 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000066C5 03                         M_ESon_Hold2:	dc.b 3
000066C6 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000066CB EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000066D0 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000066D5 02                         M_ESon_Up:	dc.b 2
000066D6 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000066DB FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000066E0 02                         M_ESon_Conf1:	dc.b 2
000066E1 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000066E6 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000066EB 02                         M_ESon_Conf2:	dc.b 2
000066EC EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000066F1 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000066F6 03                         M_ESon_Leap1:	dc.b 3
000066F7 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000066FC EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006701 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00006706 07                         M_ESon_Leap2:	dc.b 7
00006707 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
0000670C BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006711 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00006716 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
0000671B DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006720 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006725 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
0000672A 18                         M_ESon_Leap3:	dc.b $18
0000672B 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00006730 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00006735 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000673A 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000673F A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006744 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00006749 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000674E A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006753 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00006758 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000675D A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00006762 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006767 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000676C B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00006771 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006776 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000677B D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00006780 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00006785 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000678A E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000678F D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00006794 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00006799 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000679E F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000067A4 00                         		even
000067A4 00                         		even
000067A4                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
000067A4                            ; --------------------------------------------------------------------------------
000067A4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000067A4                            ; --------------------------------------------------------------------------------
000067A4                            
000067A4                            SME_0ZTmS:	
000067A4 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
000067A8 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
000067AC 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
000067B0 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
000067B2 01                         SME_0ZTmS_E:	dc.b 1	
000067B3 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
000067B8 01                         SME_0ZTmS_14:	dc.b 1	
000067B9 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
000067BE 01                         SME_0ZTmS_1A:	dc.b 1	
000067BF F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000067C4 01                         SME_0ZTmS_20:	dc.b 1	
000067C5 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
000067CA 01                         SME_0ZTmS_26:	dc.b 1	
000067CB F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
000067D0 01                         SME_0ZTmS_2C:	dc.b 1	
000067D1 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000067D6 01                         SME_0ZTmS_32:	dc.b 1	
000067D7 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
000067DC                            		even
000067DC                            		even
000067DC                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
000067DC                            ; ---------------------------------------------------------------------------
000067DC                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000067DC                            ; ---------------------------------------------------------------------------
000067DC                            Map_ESth_internal:
000067DC 0000                       		dc.w M_ESth_1-Map_ESth_internal
000067DE 03                         M_ESth_1:	dc.b 3
000067DF F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000067E4 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000067E9 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000067EE                            		even
000067EE                            		even
000067EE                            
000067EE                            ; ===========================================================================
000067EE                            ; ---------------------------------------------------------------------------
000067EE                            ; Credits ending sequence
000067EE                            ; ---------------------------------------------------------------------------
000067EE                            
000067EE                            GM_Credits:
000067EE                            		
000067EE 6100 AF5C                  		bsr.w	ClearPLC
000067F2 6100 B992                  		bsr.w	PaletteFadeOut
000067F6 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000067FC 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00006800 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006804 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006808 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
0000680C 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006810 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006814 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006818 4238 F64E                  		clr.b	(f_wtr_state).w
0000681C 6100 A966                  		bsr.w	ClearScreen
00006820                            
00006820 43F8 D000                  		lea	(v_objspace).w,a1
00006824 7000                       		moveq	#0,d0
00006826 323C 07FF                  		move.w	#$7FF,d1
0000682A                            	TryAg_ClrObjRam:
0000682A 22C0                       		move.l	d0,(a1)+
0000682C 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00006830                            
00006830 7000                       		moveq	#plcid_TryAgain,d0
00006832 6100 B026                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00006836                            
00006836 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000683A 7000                       		moveq	#0,d0
0000683C 323C 001F                  		move.w	#$1F,d1
00006840                            	TryAg_ClrPal:
00006840 22C0                       		move.l	d0,(a1)+
00006842 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006846                            
00006846 7013                       		moveq	#palid_Ending,d0
00006848 6100 BBE6                  		bsr.w	PalLoad1	; load ending palette
0000684C 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
00006850 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006856 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000685C 4EB9 0000 0000             		jsr	(BuildSprites).l
00006862 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
00006868 6100 B876                  		bsr.w	PaletteFadeIn
0000686C                            
0000686C                            ; ---------------------------------------------------------------------------
0000686C                            ; "TRY AGAIN" and "END"	screen main loop
0000686C                            ; ---------------------------------------------------------------------------
0000686C                            TryAg_MainLoop:
0000686C 6100 A9F2                  		bsr.w	PauseGame
00006870 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006876 6100 D18C                  		bsr.w	WaitForVBla
0000687A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006880 4EB9 0000 0000             		jsr	(BuildSprites).l
00006886 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000688C 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000688E 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006892 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006894 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
0000689A 67D0                       		beq.s	TryAg_MainLoop
0000689C                            
0000689C                            TryAg_Exit:
0000689C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
000068A2 4E75                       		rts	
000068A4                            
000068A4                            ; ===========================================================================
000068A4                            
000068A4                            		include	"_incObj\8B Try Again & End Eggman.asm"
000068A4                            ; ---------------------------------------------------------------------------
000068A4                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000068A4                            ; ---------------------------------------------------------------------------
000068A4                            
000068A4                            EndEggman:
000068A4 7000                       		moveq	#0,d0
000068A6 1028 0024                  		move.b	obRoutine(a0),d0
000068AA 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
000068AE 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
000068B2 4EF9 0000 0000             		jmp	(DisplaySprite).l
000068B8                            ; ===========================================================================
000068B8 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
000068BA 0000                       		dc.w EEgg_Animate-EEgg_Index
000068BC 0000                       		dc.w EEgg_Juggle-EEgg_Index
000068BE 0000                       		dc.w EEgg_Wait-EEgg_Index
000068C0                            
000068C0 =00000030                  eegg_time:	equ $30		; time between juggle motions
000068C0                            ; ===========================================================================
000068C0                            
000068C0                            EEgg_Main:	; Routine 0
000068C0 5428 0024                  		addq.b	#2,obRoutine(a0)
000068C4 317C 0120 0008             		move.w	#$120,obX(a0)
000068CA 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
000068D0 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
000068D8 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000068DE 117C 0000 0001             		move.b	#0,obRender(a0)
000068E4 317C 0100 0018             		move.w	#$100,obPriority(a0)
000068EA 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
000068F0 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000068F6 6700                       		beq.s	EEgg_Animate	; if yes, branch
000068F8                            
000068F8 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
000068FE 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006904 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
0000690A 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006910                            
00006910                            EEgg_Animate:	; Routine 2
00006910 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006916 4EF9 0000 0000             		jmp	(AnimateSprite).l
0000691C                            ; ===========================================================================
0000691C                            
0000691C                            EEgg_Juggle:	; Routine 4
0000691C 5428 0024                  		addq.b	#2,obRoutine(a0)
00006920 7002                       		moveq	#2,d0
00006922 0828 0000 001C             		btst	#0,obAnim(a0)
00006928 6700                       		beq.s	@noflip
0000692A 4440                       		neg.w	d0
0000692C                            
0000692C                            	@noflip:
0000692C 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
00006930 7205                       		moveq	#5,d1
00006932                            
00006932                            @emeraldloop:
00006932 1340 003E                  		move.b	d0,$3E(a1)
00006936 3400                       		move.w	d0,d2
00006938 E742                       		asl.w	#3,d2
0000693A D529 0026                  		add.b	d2,obAngle(a1)
0000693E 43E9 0040                  		lea	$40(a1),a1
00006942 51C9 FFEE                  		dbf	d1,@emeraldloop
00006946 5228 001A                  		addq.b	#1,obFrame(a0)
0000694A 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006950                            
00006950                            EEgg_Wait:	; Routine 6
00006950 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006954 6A00                       		bpl.s	@nochg		; branch if time remains
00006956 0868 0000 001C             		bchg	#0,obAnim(a0)
0000695C 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006962                            
00006962                            	@nochg:
00006962 4E75                       		rts	
00006962 4E75                       		rts	
00006964                            		include "_anim\Try Again & End Eggman.asm"
00006964                            ; ---------------------------------------------------------------------------
00006964                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006964                            ; ---------------------------------------------------------------------------
00006964 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006966 0000                       		dc.w @tryagain2-Ani_EEgg
00006968 0000                       		dc.w @end-Ani_EEgg
0000696A 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
0000696E 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006972 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006984                            		even
00006984                            		even
00006984                            		include	"_incObj\8C Try Again Emeralds.asm"
00006984                            ; ---------------------------------------------------------------------------
00006984                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006984                            ; ---------------------------------------------------------------------------
00006984                            
00006984                            TryChaos:
00006984 7000                       		moveq	#0,d0
00006986 1028 0024                  		move.b	obRoutine(a0),d0
0000698A 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
0000698E 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006992 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006998                            ; ===========================================================================
00006998 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
0000699A 0000                       		dc.w TCha_Move-TCha_Index
0000699C                            ; ===========================================================================
0000699C                            
0000699C                            TCha_Main:	; Routine 0
0000699C 2248                       		movea.l	a0,a1
0000699E 7400                       		moveq	#0,d2
000069A0 7600                       		moveq	#0,d3
000069A2 7205                       		moveq	#5,d1
000069A4 9238 FE57                  		sub.b	(v_emeralds).w,d1
000069A8                            
000069A8                            @makeemerald:
000069A8 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
000069AC 5429 0024                  		addq.b	#2,obRoutine(a1)
000069B0 237C 0000 67A4 0004        		move.l	#Map_ECha,obMap(a1)
000069B8 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000069BE 137C 0000 0001             		move.b	#0,obRender(a1)
000069C4 337C 0080 0018             		move.w	#$80,obPriority(a1)
000069CA 337C 0104 0008             		move.w	#$104,obX(a1)
000069D0 337C 0120 0038             		move.w	#$120,$38(a1)
000069D6 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
000069DC 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
000069E2 137C 001C 003C             		move.b	#$1C,$3C(a1)
000069E8 47F8 FE58                  		lea	(v_emldlist).w,a3
000069EC                            
000069EC                            	@chkemerald:
000069EC 7000                       		moveq	#0,d0
000069EE 1038 FE57                  		move.b	(v_emeralds).w,d0
000069F2 5340                       		subq.w	#1,d0
000069F4 6500                       		bcs.s	@loc_5B42
000069F6                            
000069F6                            	@chkloop:
000069F6 B433 0000                  		cmp.b	(a3,d0.w),d2
000069FA 6600                       		bne.s	@notgot
000069FC 5202                       		addq.b	#1,d2
000069FE 60EC                       		bra.s	@chkemerald
00006A00                            ; ===========================================================================
00006A00                            
00006A00                            	@notgot:
00006A00 51C8 FFF4                  		dbf	d0,@chkloop
00006A04                            
00006A04                            @loc_5B42:
00006A04 1342 001A                  		move.b	d2,obFrame(a1)
00006A08 5229 001A                  		addq.b	#1,obFrame(a1)
00006A0C 5202                       		addq.b	#1,d2
00006A0E 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006A14 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006A18 1343 001F                  		move.b	d3,obDelayAni(a1)
00006A1C 0643 000A                  		addi.w	#10,d3
00006A20 43E9 0040                  		lea	$40(a1),a1
00006A24 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006A28                            
00006A28                            TCha_Move:	; Routine 2
00006A28 4A68 003E                  		tst.w	$3E(a0)
00006A2C 6700                       		beq.s	locret_5BBA
00006A2E 4A28 001E                  		tst.b	obTimeFrame(a0)
00006A32 6700                       		beq.s	loc_5B78
00006A34 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006A38 6600                       		bne.s	loc_5B80
00006A3A                            
00006A3A                            loc_5B78:
00006A3A 3028 003E                  		move.w	$3E(a0),d0
00006A3E D168 0026                  		add.w	d0,obAngle(a0)
00006A42                            
00006A42                            loc_5B80:
00006A42 1028 0026                  		move.b	obAngle(a0),d0
00006A46 6700                       		beq.s	loc_5B8C
00006A48 0C00 0080                  		cmpi.b	#$80,d0
00006A4C 6600                       		bne.s	loc_5B96
00006A4E                            
00006A4E                            loc_5B8C:
00006A4E 4268 003E                  		clr.w	$3E(a0)
00006A52 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006A58                            
00006A58                            loc_5B96:
00006A58 4EB9 0000 3A36             		jsr	(CalcSine).l
00006A5E 7800                       		moveq	#0,d4
00006A60 1828 003C                  		move.b	$3C(a0),d4
00006A64 C3C4                       		muls.w	d4,d1
00006A66 E081                       		asr.l	#8,d1
00006A68 C1C4                       		muls.w	d4,d0
00006A6A E080                       		asr.l	#8,d0
00006A6C D268 0038                  		add.w	$38(a0),d1
00006A70 D068 003A                  		add.w	$3A(a0),d0
00006A74 3141 0008                  		move.w	d1,obX(a0)
00006A78 3140 000A                  		move.w	d0,obScreenY(a0)
00006A7C                            
00006A7C                            locret_5BBA:
00006A7C 4E75                       		rts	
00006A7C 4E75                       		rts	
00006A7E                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006A7E                            ; ---------------------------------------------------------------------------
00006A7E                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006A7E                            ; ---------------------------------------------------------------------------
00006A7E                            Map_EEgg_internal:
00006A7E 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006A80 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006A82 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006A84 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006A86 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006A88 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006A8A 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006A8C 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006A8E 08                         M_EEgg_Try1:	dc.b 8
00006A8F E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006A94 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006A99 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006A9E F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006AA3 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006AA8 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006AAD 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AB2 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AB7 08                         M_EEgg_Try2:	dc.b 8
00006AB8 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006ABD F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006AC2 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006AC7 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006ACC 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006AD1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006AD6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006ADB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AE0 08                         M_EEgg_Try3:	dc.b 8
00006AE1 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006AE6 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006AEB E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006AF0 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006AF5 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006AFA 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006AFF 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B04 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B09 08                         M_EEgg_Try4:	dc.b 8
00006B0A E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006B0F F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006B14 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006B19 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006B1E 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006B23 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006B28 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B2D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B32 0C                         M_EEgg_End1:	dc.b $C
00006B33 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006B38 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006B3D 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006B42 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006B47 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006B4C F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006B51 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006B56 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006B5B 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006B60 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006B65 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006B6A 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006B6F 0A                         M_EEgg_End2:	dc.b $A
00006B70 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006B75 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006B7A F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006B7F D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006B84 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006B89 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006B8E 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006B93 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006B98 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006B9D 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006BA2 0A                         M_EEgg_End3:	dc.b $A
00006BA3 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006BA8 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006BAD EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006BB2 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006BB7 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006BBC EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006BC1 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006BC6 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006BCB 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006BD0 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006BD5 0C                         M_EEgg_End4:	dc.b $C
00006BD6 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006BDB FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006BE0 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006BE5 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006BEA F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006BEF FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006BF4 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006BF9 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006BFE 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006C03 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006C08 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006C0D 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006C12                            		even
00006C12                            		even
00006C12                            
00006C12                            ; ---------------------------------------------------------------------------
00006C12                            ; Ending sequence demos
00006C12                            ; ---------------------------------------------------------------------------
00006C12                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006C40                            		even
00006C40                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006C80                            		even
00006C80                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006CB0                            		even
00006CB0                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006CE0                            		even
00006CE0                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006D00                            		even
00006D00                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006D20                            		even
00006D20                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006D50                            		even
00006D50                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006D80                            		even
00006D80                            
00006D80                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006D80                            ; ---------------------------------------------------------------------------
00006D80                            ; Subroutine to	load level boundaries and start	locations
00006D80                            ; ---------------------------------------------------------------------------
00006D80                            
00006D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D80                            
00006D80                            
00006D80                            LevelSizeLoad:
00006D80 7000                       		moveq	#0,d0
00006D82 11C0 F740                  		move.b	d0,($FFFFF740).w
00006D86 11C0 F741                  		move.b	d0,($FFFFF741).w
00006D8A 11C0 F746                  		move.b	d0,($FFFFF746).w
00006D8E 11C0 F748                  		move.b	d0,($FFFFF748).w
00006D92 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006D96 3038 FE10                  		move.w	(v_zone).w,d0
00006D9A ED08                       		lsl.b	#6,d0
00006D9C E848                       		lsr.w	#4,d0
00006D9E 3200                       		move.w	d0,d1
00006DA0 D040                       		add.w	d0,d0
00006DA2 D041                       		add.w	d1,d0
00006DA4 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006DA8 3018                       		move.w	(a0)+,d0
00006DAA 31C0 F730                  		move.w	d0,($FFFFF730).w
00006DAE 2018                       		move.l	(a0)+,d0
00006DB0 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006DB4 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006DB8 2018                       		move.l	(a0)+,d0
00006DBA 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006DBE 21C0 F724                  		move.l	d0,(v_limittop1).w
00006DC2 3038 F728                  		move.w	(v_limitleft2).w,d0
00006DC6 0640 0240                  		addi.w	#$240,d0
00006DCA 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006DCE 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006DD4 3018                       		move.w	(a0)+,d0
00006DD6 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006DDA 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006DE0 6000 0000                  		bra.w	LevSz_ChkLamp
00006DE4                            
00006DE4                            ; ===========================================================================
00006DE4                            ; ---------------------------------------------------------------------------
00006DE4                            ; Level size array
00006DE4                            ; ---------------------------------------------------------------------------
00006DE4                            LevelSizeArray:
00006DE4                            		; GHZ
00006DE4 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006DF0 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006DFC 0004 0000 1360 0000 0400+  		dc.w $0004, $0000, $1360, $0000, $0400, $0060
00006E08 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006E14                            		; LZ
00006E14 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006E20 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006E2C 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006E38 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006E44                            		; MZ
00006E44 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006E50 0004 0000 25E0 0000 0520+  		dc.w $0004, $0000, $25E0, $0000, $0520, $0060
00006E5C 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006E68 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006E74                            		; SLZ
00006E74 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E80 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E8C 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006E98 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006EA4                            		; SYZ
00006EA4 0004 0000 22C0 0000 0520+  		dc.w $0004, $0000, $22C0, $0000, $0520, $0060
00006EB0 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006EBC 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006EC8 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006ED4                            		; SBZ
00006ED4 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006EE0 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006EEC 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006EF8 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006F04                            		; Ending
00006F04 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006F10 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006F1C 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006F28 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006F34                            
00006F34                            ; ---------------------------------------------------------------------------
00006F34                            ; Ending start location array
00006F34                            ; ---------------------------------------------------------------------------
00006F34                            EndingStLocArray:
00006F34                            		include	"_inc\Start Location Array - Ending.asm"
00006F34                            ; ---------------------------------------------------------------------------
00006F34                            ; Ending start location array
00006F34                            ; ---------------------------------------------------------------------------
00006F34                            
00006F34                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00006F38                            		incbin	"startpos\mz2 (Credits demo).bin"
00006F3C                            		incbin	"startpos\syz3 (Credits demo).bin"
00006F40                            		incbin	"startpos\lz3 (Credits demo).bin"
00006F44                            		incbin	"startpos\slz3 (Credits demo).bin"
00006F48                            		incbin	"startpos\sbz1 (Credits demo).bin"
00006F4C                            		incbin	"startpos\sbz2 (Credits demo).bin"
00006F50                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00006F54                            		even
00006F54                            		even
00006F54                            
00006F54                            ; ===========================================================================
00006F54                            
00006F54                            LevSz_ChkLamp:
00006F54 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00006F58 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006F5A                            
00006F5A 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00006F60 3238 D008                  		move.w	(v_player+obX).w,d1
00006F64 3038 D00C                  		move.w	(v_player+obY).w,d0
00006F68 6000                       		bra.s	LevSz_SkipStartPos
00006F6A                            ; ===========================================================================
00006F6A                            
00006F6A                            LevSz_StartLoc:
00006F6A 3038 FE10                  		move.w	(v_zone).w,d0
00006F6E ED08                       		lsl.b	#6,d0
00006F70 E848                       		lsr.w	#4,d0
00006F72 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F76 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00006F7A 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006F7C                            
00006F7C 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00006F80 5340                       		subq.w	#1,d0
00006F82 E548                       		lsl.w	#2,d0
00006F84 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F88                            
00006F88                            LevSz_SonicPos:
00006F88 7200                       		moveq	#0,d1
00006F8A 3219                       		move.w	(a1)+,d1
00006F8C 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00006F90 7000                       		moveq	#0,d0
00006F92 3011                       		move.w	(a1),d0
00006F94 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00006F98                            
00006F98                            SetScreen:
00006F98                            	LevSz_SkipStartPos:
00006F98 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
00006F9C 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
00006FA0 743F                       		moveq #63,d2 ; begin a 64-step loop 
00006FA2                            @looppoint: 
00006FA2 34C1                       		move.w d1,(a2)+ ; fill in X 
00006FA4 34C0                       		move.w d0,(a2)+ ; fill in Y 
00006FA6 51CA FFFA                  		dbf d2,@looppoint ; loop	
00006FAA 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00006FAE 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
00006FB0 7200                       		moveq	#0,d1
00006FB2                            
00006FB2                            	SetScr_WithinLeft:
00006FB2 3438 F72A                  		move.w	(v_limitright2).w,d2
00006FB6 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00006FB8 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00006FBA 3202                       		move.w	d2,d1
00006FBC                            
00006FBC                            	SetScr_WithinRight:
00006FBC 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
00006FC0                            
00006FC0 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00006FC4 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00006FC6 7000                       		moveq	#0,d0
00006FC8                            
00006FC8                            	SetScr_WithinTop:
00006FC8 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00006FCC 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00006FCE 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00006FD2                            
00006FD2                            	SetScr_WithinBottom:
00006FD2 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00006FD6 6100 0000                  		bsr.w	BgScrollSpeed
00006FDA 7000                       		moveq	#0,d0
00006FDC 1038 FE10                  		move.b	(v_zone).w,d0
00006FE0 E508                       		lsl.b	#2,d0
00006FE2 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00006FE8 4E75                       		rts
00006FEA                            ; ===========================================================================
00006FEA                            ; ---------------------------------------------------------------------------
00006FEA                            ; Sonic start location array
00006FEA                            ; ---------------------------------------------------------------------------
00006FEA                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00006FEA                            ; ---------------------------------------------------------------------------
00006FEA                            ; Sonic start location array
00006FEA                            ; ---------------------------------------------------------------------------
00006FEA                            
00006FEA                            		incbin	"startpos\ghz1.bin"
00006FEE                            		incbin	"startpos\ghz2.bin"
00006FF2                            		incbin	"startpos\ghz3.bin"
00006FF6 0080 00A8                  		dc.w	$80,$A8
00006FFA                            
00006FFA                            		incbin	"startpos\lz1.bin"
00006FFE                            		incbin	"startpos\lz2.bin"
00007002                            		incbin	"startpos\lz3.bin"
00007006                            		incbin	"startpos\sbz3.bin"
0000700A                            
0000700A                            		incbin	"startpos\mz1.bin"
0000700E                            		incbin	"startpos\mz2.bin"
00007012                            		incbin	"startpos\mz3.bin"
00007016 0080 00A8                  		dc.w	$80,$A8
0000701A                            
0000701A                            		incbin	"startpos\slz1.bin"
0000701E                            		incbin	"startpos\slz2.bin"
00007022                            		incbin	"startpos\slz3.bin"
00007026 0080 00A8                  		dc.w	$80,$A8
0000702A                            
0000702A                            		incbin	"startpos\syz1.bin"
0000702E                            		incbin	"startpos\syz2.bin"
00007032                            		incbin	"startpos\syz3.bin"
00007036 0080 00A8                  		dc.w	$80,$A8
0000703A                            
0000703A                            		incbin	"startpos\sbz1.bin"
0000703E                            		incbin	"startpos\sbz2.bin"
00007042                            		incbin	"startpos\fz.bin"
00007046 0080 00A8                  		dc.w	$80,$A8
0000704A                            
0000704A                            
0000704A                            		incbin	"startpos\end1.bin"
0000704E                            		incbin	"startpos\end2.bin"
00007052 0080 00A8                  		dc.w	$80,$A8
00007056 0080 00A8                  		dc.w	$80,$A8
0000705A                            
0000705A                            		even
0000705A                            		even
0000705A                            
0000705A                            ; ---------------------------------------------------------------------------
0000705A                            ; Which	256x256	tiles contain loops or roll-tunnels
0000705A                            ; ---------------------------------------------------------------------------
0000705A                            
0000705A                            LoopTileNums:
0000705A                            
0000705A                            ; 		loop	loop	tunnel	tunnel
0000705A                            
0000705A B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
0000705E 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007062 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00007066 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
0000706A 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
0000706E 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007072 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00007076                            
00007076                            		even
00007076                            
00007076                            ; ---------------------------------------------------------------------------
00007076                            ; Subroutine to	set scroll speed of some backgrounds
00007076                            ; ---------------------------------------------------------------------------
00007076                            
00007076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007076                            
00007076                            
00007076                            BgScrollSpeed:
00007076 4A38 FE30                  		tst.b	(v_lastlamp).w
0000707A 6600                       		bne.s	loc_6206
0000707C 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007080 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007084 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
00007088 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
0000708C 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
00007090                            
00007090                            loc_6206:
00007090 7400                       		moveq	#0,d2
00007092 1438 FE10                  		move.b	(v_zone).w,d2
00007096 D442                       		add.w	d2,d2
00007098 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000709C 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000070A0                            ; End of function BgScrollSpeed
000070A0                            
000070A0                            ; ===========================================================================
000070A0 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000070A4 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000070A8 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000070AC 0000                       		dc.w BgScroll_End-BgScroll_Index
000070AE                            ; ===========================================================================
000070AE                            
000070AE                            BgScroll_GHZ:
000070AE 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070B2 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000070B6 42B8 F714                  		clr.l	(v_bg2screenposy).w
000070BA 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000070BE 45F8 A800                  		lea	($FFFFA800).w,a2
000070C2 429A                       		clr.l	(a2)+
000070C4 429A                       		clr.l	(a2)+
000070C6 429A                       		clr.l	(a2)+
000070C8 4E75                       		rts
000070CA                            ; ===========================================================================
000070CA                            
000070CA                            BgScroll_LZ:
000070CA E280                       		asr.l	#1,d0
000070CC 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070D0 4E75                       		rts	
000070D2                            ; ===========================================================================
000070D2                            
000070D2                            BgScroll_MZ:
000070D2 4E75                       		rts	
000070D4                            ; ===========================================================================
000070D4                            
000070D4                            BgScroll_SLZ:
000070D4 E280                       		asr.l	#1,d0
000070D6 0640 00C0                  		addi.w	#$C0,d0
000070DA 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070DE 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070E2 4E75                       		rts	
000070E4                            ; ===========================================================================
000070E4                            
000070E4                            BgScroll_SYZ:
000070E4 E980                       		asl.l	#4,d0
000070E6 2400                       		move.l	d0,d2
000070E8 E380                       		asl.l	#1,d0
000070EA D082                       		add.l	d2,d0
000070EC E080                       		asr.l	#8,d0
000070EE 5240                       		addq.w	#1,d0
000070F0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070F4 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070F8 4E75                       		rts	
000070FA                            ; ===========================================================================
000070FA                            
000070FA                            BgScroll_SBZ:
000070FA 0240 07F8                  		andi.w	#$7F8,d0
000070FE E640                       		asr.w	#3,d0
00007100 5240                       		addq.w	#1,d0
00007102 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007106 4E75                       		rts	
00007108                            ; ===========================================================================
00007108                            
00007108                            BgScroll_End:
00007108 3038 F700                  		move.w	(v_screenposx).w,d0
0000710C E240                       		asr.w	#1,d0
0000710E 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00007112 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
00007116 E440                       		asr.w	#2,d0
00007118 3200                       		move.w	d0,d1
0000711A D040                       		add.w	d0,d0
0000711C D041                       		add.w	d1,d0
0000711E 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00007122 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007126 42B8 F714                  		clr.l	(v_bg2screenposy).w
0000712A 42B8 F71C                  		clr.l	(v_bg3screenposy).w
0000712E 45F8 A800                  		lea	($FFFFA800).w,a2
00007132 429A                       		clr.l	(a2)+
00007134 429A                       		clr.l	(a2)+
00007136 429A                       		clr.l	(a2)+
00007138 4E75                       		rts
00007138 4E75                       		rts
0000713A                            		include	"_inc\DeformLayers (JP1).asm"
0000713A                            ; ---------------------------------------------------------------------------
0000713A                            ; Background layer deformation subroutines
0000713A                            ; ---------------------------------------------------------------------------
0000713A                            
0000713A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000713A                            
0000713A                            
0000713A                            DeformLayers:
0000713A 4A38 F744                  		tst.b	(f_nobgscroll).w
0000713E 6700                       		beq.s	@bgscroll
00007140 4E75                       		rts	
00007142                            ; ===========================================================================
00007142                            
00007142                            	@bgscroll:
00007142 4278 F754                  		clr.w	(v_fg_scroll_flags).w
00007146 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
0000714A 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
0000714E 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00007152 6100 0000                  		bsr.w	ScrollHoriz
00007156 6100 0000                  		bsr.w	ScrollVertical
0000715A 6100 0000                  		bsr.w	DynamicLevelEvents
0000715E 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00007164 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000716A 7000                       		moveq	#0,d0
0000716C 1038 FE10                  		move.b	(v_zone).w,d0
00007170 D040                       		add.w	d0,d0
00007172 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007176 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000717A                            ; End of function DeformLayers
0000717A                            
0000717A                            ; ===========================================================================
0000717A                            ; ---------------------------------------------------------------------------
0000717A                            ; Offset index for background layer deformation	code
0000717A                            ; ---------------------------------------------------------------------------
0000717A 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000717E 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007182 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007186 0000                       		dc.w Deform_GHZ-Deform_Index
00007188                            ; ---------------------------------------------------------------------------
00007188                            ; Green	Hill Zone background layer deformation code
00007188                            ; ---------------------------------------------------------------------------
00007188                            
00007188                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007188                            
00007188                            
00007188                            Deform_GHZ:
00007188                            	;cmpi.b    #id_Title,(v_gamemode).w
00007188                            	;beq.w    Deform_Title
00007188                            
00007188                            ;Deform_GHZ_Stage:
00007188                            	; block 3 - distant mountains
00007188 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000718C 48C4                       		ext.l	d4
0000718E EB84                       		asl.l	#5,d4
00007190 2204                       		move.l	d4,d1
00007192 E384                       		asl.l	#1,d4
00007194 D881                       		add.l	d1,d4
00007196 7C00                       		moveq	#0,d6
00007198 6100 0000                  		bsr.w	BGScroll_Block3
0000719C                            	; block 2 - hills & waterfalls
0000719C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000071A0 48C4                       		ext.l	d4
000071A2 EF84                       		asl.l	#7,d4
000071A4 7C00                       		moveq	#0,d6
000071A6 6100 0000                  		bsr.w	BGScroll_Block2
000071AA                            	; calculate Y position
000071AA 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000071AE 3038 F704                  		move.w	(v_screenposy).w,d0
000071B2 0240 07FF                  		andi.w	#$7FF,d0
000071B6 EA48                       		lsr.w	#5,d0
000071B8 4440                       		neg.w	d0
000071BA 0640 0020                  		addi.w	#$20,d0
000071BE 6A00                       		bpl.s	@limitY
000071C0 7000                       		moveq	#0,d0
000071C2                            	@limitY:
000071C2 3800                       		move.w	d0,d4
000071C4 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
000071C8 3038 F700                  		move.w	(v_screenposx).w,d0
000071CC 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000071D2 6600                       		bne.s	@notTitle
000071D4 7000                       		moveq	#0,d0	; reset foreground position in title screen
000071D6                            	@notTitle:
000071D6 4440                       		neg.w	d0
000071D8 4840                       		swap	d0
000071DA                            	; auto-scroll clouds
000071DA 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000071DE 069A 0001 0000             		addi.l	#$10000,(a2)+
000071E4 069A 0000 C000             		addi.l	#$C000,(a2)+
000071EA 069A 0000 8000             		addi.l	#$8000,(a2)+
000071F0                            	; calculate background scroll	
000071F0 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
000071F4 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071F8 4440                       		neg.w	d0
000071FA 323C 001F                  		move.w	#$1F,d1
000071FE 9244                       		sub.w	d4,d1
00007200 6500                       		bcs.s	@gotoCloud2
00007202                            	@cloudLoop1:		; upper cloud (32px)
00007202 22C0                       		move.l	d0,(a1)+
00007204 51C9 FFFC                  		dbf	d1,@cloudLoop1
00007208                            
00007208                            	@gotoCloud2:
00007208 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
0000720C D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007210 4440                       		neg.w	d0
00007212 323C 000F                  		move.w	#$F,d1
00007216                            	@cloudLoop2:		; middle cloud (16px)
00007216 22C0                       		move.l	d0,(a1)+
00007218 51C9 FFFC                  		dbf	d1,@cloudLoop2
0000721C                            
0000721C 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
00007220 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007224 4440                       		neg.w	d0
00007226 323C 000F                  		move.w	#$F,d1
0000722A                            	@cloudLoop3:		; lower cloud (16px)
0000722A 22C0                       		move.l	d0,(a1)+
0000722C 51C9 FFFC                  		dbf	d1,@cloudLoop3
00007230                            
00007230 323C 002F                  		move.w	#$2F,d1
00007234 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007238 4440                       		neg.w	d0
0000723A                            	@mountainLoop:		; distant mountains (48px)
0000723A 22C0                       		move.l	d0,(a1)+
0000723C 51C9 FFFC                  		dbf	d1,@mountainLoop
00007240                            
00007240 323C 0027                  		move.w	#$27,d1
00007244 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007248 4440                       		neg.w	d0
0000724A                            	@hillLoop:			; hills & waterfalls (40px)
0000724A 22C0                       		move.l	d0,(a1)+
0000724C 51C9 FFFC                  		dbf	d1,@hillLoop
00007250                            
00007250 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007254 3438 F700                  		move.w	(v_screenposx).w,d2
00007258 9440                       		sub.w	d0,d2
0000725A 48C2                       		ext.l	d2
0000725C E182                       		asl.l	#8,d2
0000725E 85FC 0068                  		divs.w	#$68,d2
00007262 48C2                       		ext.l	d2
00007264 E182                       		asl.l	#8,d2
00007266 7600                       		moveq	#0,d3
00007268 3600                       		move.w	d0,d3
0000726A 323C 0047                  		move.w	#$47,d1
0000726E D244                       		add.w	d4,d1
00007270                            	@waterLoop:			; water deformation
00007270 3003                       		move.w	d3,d0
00007272 4440                       		neg.w	d0
00007274 22C0                       		move.l	d0,(a1)+
00007276 4843                       		swap	d3
00007278 D682                       		add.l	d2,d3
0000727A 4843                       		swap	d3
0000727C 51C9 FFF2                  		dbf	d1,@waterLoop
00007280 4E75                       		rts
00007282                            ; End of function Deform_GHZ
00007282                            
00007282                            Deform_Title:
00007282 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007286 48C4                       		ext.l	d4
00007288 EB84                       		asl.l	#5,d4
0000728A 2204                       		move.l	d4,d1
0000728C E384                       		asl.l	#1,d4
0000728E D881                       		add.l	d1,d4
00007290 7A00                       		moveq	#0,d5
00007292 6100 0000                  		bsr.w	BGScroll_Block1
00007296 6100 0000                  		bsr.w	BGScroll_Block3
0000729A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000729E 3038 F704                  		move.w	(v_screenposy).w,d0
000072A2 0240 07FF                  		andi.w	#$7FF,d0
000072A6 EA48                       		lsr.w	#5,d0
000072A8 4440                       		neg.w	d0
000072AA 0640 0026                  		addi.w	#$26,d0
000072AE 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000072B2 3800                       		move.w	d0,d4
000072B4 6100 0000                  		bsr.w	BGScroll_Block3
000072B8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000072BE 323C 006F                  		move.w	#$6F,d1
000072C2 9244                       		sub.w	d4,d1
000072C4 3038 F700                  		move.w	(v_screenposx).w,d0
000072C8 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000072CE 6600                       		bne.s	loc_633C
000072D0 7000                       		moveq	#0,d0
000072D2                            
000072D2                            loc_633C:
000072D2 4440                       		neg.w	d0
000072D4 4840                       		swap	d0
000072D6 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000072DA 4440                       		neg.w	d0
000072DC                            
000072DC                            loc_6346:
000072DC 22C0                       		move.l	d0,(a1)+
000072DE 51C9 FFFC                  		dbf	d1,loc_6346
000072E2 323C 0027                  		move.w	#$27,d1
000072E6 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072EA 4440                       		neg.w	d0
000072EC                            
000072EC                            loc_6356:
000072EC 22C0                       		move.l	d0,(a1)+
000072EE 51C9 FFFC                  		dbf	d1,loc_6356
000072F2 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072F6 0640 0000                  		addi.w	#0,d0
000072FA 3438 F700                  		move.w	(v_screenposx).w,d2
000072FE 0642 FE00                  		addi.w	#-$200,d2
00007302 9440                       		sub.w	d0,d2
00007304 48C2                       		ext.l	d2
00007306 E182                       		asl.l	#8,d2
00007308 85FC 0068                  		divs.w	#$68,d2
0000730C 48C2                       		ext.l	d2
0000730E E182                       		asl.l	#8,d2
00007310 7600                       		moveq	#0,d3
00007312 3600                       		move.w	d0,d3
00007314 323C 0047                  		move.w	#$47,d1
00007318 D244                       		add.w	d4,d1
0000731A                            
0000731A                            loc_6384:
0000731A 3003                       		move.w	d3,d0
0000731C 4440                       		neg.w	d0
0000731E 22C0                       		move.l	d0,(a1)+
00007320 4843                       		swap	d3
00007322 D682                       		add.l	d2,d3
00007324 4843                       		swap	d3
00007326 51C9 FFF2                  		dbf	d1,loc_6384
0000732A 4E75                       		rts	
0000732C                            
0000732C                            ; ===========================================================================
0000732C                            ; ---------------------------------------------------------------------------
0000732C                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
0000732C                            ; ---------------------------------------------------------------------------
0000732C                             
0000732C                            Deform_LZ:
0000732C 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
0000732E 3838 F73A                  		move.w	(v_scrshiftx).w,d4			; load horizontal movement distance (Since last frame)
00007332 48C4                       		ext.l	d4					; extend to long-word signed
00007334 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
00007336 3A38 F73C                  		move.w	(v_scrshifty).w,d5			; load vertical movement distance (Since last frame)
0000733A 48C5                       		ext.l	d5					; extend to long-word signed
0000733C E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
0000733E 6100 0000                  		bsr.w	BGScroll_Block1				; adjust BG scroll positions (and set draw code direction flags)
00007342 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w		; set BG V-scroll position
00007348 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1			; load H-scroll buffer
0000734C 3038 F700                  		move.w	(v_screenposx).w,d0			; load FG X position
00007350 4440                       		neg.w	d0					; reverse
00007352 4840                       		swap	d0					; send to upper word
00007354 3038 F708                  		move.w	(v_bgscreenposx).w,d0			; load BG X position
00007358 4440                       		neg.w	d0					; reverse
0000735A 7600                       		moveq	#$00,d3					; clear d3
0000735C 1638 F7D8                  		move.b	(v_lz_deform).w,d3			; load wave-scroll timer
00007360 0678 0080 F7D8             		addi.w	#$0080,(v_lz_deform).w			; increase wave-scroll timer
00007366 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
0000736A 3238 F646                  		move.w	(v_waterpos1).w,d1			; load water line position
0000736E 9278 F704                  		sub.w	(v_screenposy).w,d1			; minus FG Y position
00007372 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
00007374 B242                       		cmp.w	d2,d1					; is the water line below the screen?
00007376 6F00                       		ble.s	DLZ_NoWater				; if not, branch
00007378 3202                       		move.w	d2,d1					; set at maximum
0000737A                             
0000737A                            DLZ_NoWater:
0000737A 9441                       		sub.w	d1,d2					; subtract from water-line count
0000737C D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
0000737E 5301                       		subq.b	#$01,d1					; decrease above water count
00007380 6500                       		bcs.s	DLZ_Water				; if finished, branch
00007382                             
00007382                            DLZ_Above:
00007382 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
00007384 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
00007388                             
00007388                            DLZ_Water:
00007388 5302                       		subq.b	#$01,d2					; decrease below water count
0000738A 6500                       		bcs.s	DLZ_Finish				; if finished, branch
0000738C 3200                       		move.w	d0,d1					; copy BG position back to d1
0000738E 4840                       		swap	d0					; move FG position back to lower word in d0
00007390 3803                       		move.w	d3,d4					; copy sroll timer for BG use
00007392 D638 F705                  		add.b	(v_screenposy+$01).w,d3			; add FG Y position
00007396 D838 F70D                  		add.b	(v_bgscreenposy+$01).w,d4			; add BG Y position
0000739A D643                       		add.w	d3,d3					; multiply by word size (2)
0000739C D844                       		add.w	d4,d4					; ''
0000739E 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
000073A4 D6C4                       		adda.w	d4,a3					; advance to correct starting point
000073A6 1813                       		move.b	(a3),d4					; get current position byte
000073A8 E404                       		asr.b	#$02,d4					; get only the position bits
000073AA 4884                       		ext.w	d4					; extend to word
000073AC D244                       		add.w	d4,d1					; adjust BG's current position
000073AE 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
000073B2 1812                       		move.b	(a2),d4					; get current position byte
000073B4 E404                       		asr.b	#$02,d4					; get only the position bits
000073B6 4884                       		ext.w	d4					; extend to word
000073B8 D044                       		add.w	d4,d0					; adjust FG's current position
000073BA                             
000073BA                            DLZ_Below:
000073BA D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
000073BC 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
000073BE D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
000073C0 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
000073C2 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
000073C6                             
000073C6                            DLZ_Finish:
000073C6 4E75                       		rts						; return
000073C8                             
000073C8                            ; ---------------------------------------------------------------------------
000073C8                            ; Scroll data for the FG
000073C8                            ; ---------------------------------------------------------------------------
000073C8                             
000073C8                            DLZ_WaveFG:
000073C8                            		rept	$02
000073C8                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000073C8                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C8                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C8                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C8                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C8                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C8                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C8                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C8                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
000073C8                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C8                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000073C8                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C8                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C8                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C8                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C8                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C8 0001 0400 0401 0800 0801+  		endr
000077C8                             
000077C8                            ; ---------------------------------------------------------------------------
000077C8                            ; Scroll data for the BG
000077C8                            ; ---------------------------------------------------------------------------
000077C8                             
000077C8                            DLZ_WaveBG:	rept	$04
000077C8                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
000077C8                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
000077C8                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
000077C8                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
000077C8                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
000077C8                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
000077C8                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
000077C8                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
000077C8 FC01 0000 0000 0000 0000+  		endr
00007BC8                             
00007BC8                            ; ===========================================================================
00007BC8                            ; End of function Deform_LZ
00007BC8                            
00007BC8                            ; ---------------------------------------------------------------------------
00007BC8                            ; Marble Zone background layer deformation code
00007BC8                            ; ---------------------------------------------------------------------------
00007BC8                            
00007BC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BC8                            
00007BC8                            
00007BC8                            Deform_MZ:
00007BC8                            	; block 1 - dungeon interior
00007BC8 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BCC 48C4                       		ext.l	d4
00007BCE ED84                       		asl.l	#6,d4
00007BD0 2204                       		move.l	d4,d1
00007BD2 E384                       		asl.l	#1,d4
00007BD4 D881                       		add.l	d1,d4
00007BD6 7C02                       		moveq	#2,d6
00007BD8 6100 0000                  		bsr.w	BGScroll_Block1
00007BDC                            	; block 3 - mountains
00007BDC 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BE0 48C4                       		ext.l	d4
00007BE2 ED84                       		asl.l	#6,d4
00007BE4 7C06                       		moveq	#6,d6
00007BE6 6100 0000                  		bsr.w	BGScroll_Block3
00007BEA                            	; block 2 - bushes & antique buildings
00007BEA 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BEE 48C4                       		ext.l	d4
00007BF0 EF84                       		asl.l	#7,d4
00007BF2 7C04                       		moveq	#4,d6
00007BF4 6100 0000                  		bsr.w	BGScroll_Block2
00007BF8                            	; calculate y-position of background
00007BF8 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007BFC 3238 F704                  		move.w	(v_screenposy).w,d1
00007C00 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007C04 6500                       		bcs.s	@noYscroll
00007C06 3401                       		move.w	d1,d2
00007C08 D241                       		add.w	d1,d1
00007C0A D242                       		add.w	d2,d1
00007C0C E441                       		asr.w	#2,d1
00007C0E D041                       		add.w	d1,d0
00007C10                            	@noYscroll:
00007C10 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007C14 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007C18 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007C1C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007C22                            	; do something with redraw flags
00007C22 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007C26 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007C2A 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
00007C2E 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00007C32 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007C36                            	; calculate background scroll buffer
00007C36 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007C3A 3438 F700                  		move.w	(v_screenposx).w,d2
00007C3E 4442                       		neg.w	d2
00007C40 3002                       		move.w	d2,d0
00007C42 E440                       		asr.w	#2,d0
00007C44 9042                       		sub.w	d2,d0
00007C46 48C0                       		ext.l	d0
00007C48 E780                       		asl.l	#3,d0
00007C4A 81FC 0005                  		divs.w	#5,d0
00007C4E 48C0                       		ext.l	d0
00007C50 E980                       		asl.l	#4,d0
00007C52 E180                       		asl.l	#8,d0
00007C54 7600                       		moveq	#0,d3
00007C56 3602                       		move.w	d2,d3
00007C58 E243                       		asr.w	#1,d3
00007C5A 323C 0004                  		move.w	#4,d1
00007C5E                            	@cloudLoop:		
00007C5E 32C3                       		move.w	d3,(a1)+
00007C60 4843                       		swap	d3
00007C62 D680                       		add.l	d0,d3
00007C64 4843                       		swap	d3
00007C66 51C9 FFF6                  		dbf	d1,@cloudLoop
00007C6A                            
00007C6A 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007C6E 4440                       		neg.w	d0
00007C70 323C 0001                  		move.w	#1,d1
00007C74                            	@mountainLoop:		
00007C74 32C0                       		move.w	d0,(a1)+
00007C76 51C9 FFFC                  		dbf	d1,@mountainLoop
00007C7A                            
00007C7A 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007C7E 4440                       		neg.w	d0
00007C80 323C 0008                  		move.w	#8,d1
00007C84                            	@bushLoop:		
00007C84 32C0                       		move.w	d0,(a1)+
00007C86 51C9 FFFC                  		dbf	d1,@bushLoop
00007C8A                            
00007C8A 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007C8E 4440                       		neg.w	d0
00007C90 323C 000F                  		move.w	#$F,d1
00007C94                            	@interiorLoop:		
00007C94 32C0                       		move.w	d0,(a1)+
00007C96 51C9 FFFC                  		dbf	d1,@interiorLoop
00007C9A                            
00007C9A 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007C9E 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007CA2 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007CA6 3400                       		move.w	d0,d2
00007CA8 0C40 0100                  		cmpi.w	#$100,d0
00007CAC 6500                       		bcs.s	@limitY
00007CAE 303C 0100                  		move.w	#$100,d0
00007CB2                            	@limitY:
00007CB2 0240 01F0                  		andi.w	#$1F0,d0
00007CB6 E648                       		lsr.w	#3,d0
00007CB8 45F2 0000                  		lea	(a2,d0),a2
00007CBC 6000 0000                  		bra.w	Bg_Scroll_X
00007CC0                            ; End of function Deform_MZ
00007CC0                            
00007CC0                            ; ---------------------------------------------------------------------------
00007CC0                            ; Star Light Zone background layer deformation code
00007CC0                            ; ---------------------------------------------------------------------------
00007CC0                            
00007CC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CC0                            
00007CC0                            
00007CC0                            Deform_SLZ:
00007CC0                            	; vertical scrolling
00007CC0 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007CC4 48C5                       		ext.l	d5
00007CC6 EF85                       		asl.l	#7,d5
00007CC8 6100 0000                  		bsr.w	Bg_Scroll_Y
00007CCC 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007CD2                            	; calculate background scroll buffer
00007CD2 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007CD6 3438 F700                  		move.w	(v_screenposx).w,d2
00007CDA 4442                       		neg.w	d2
00007CDC 3002                       		move.w	d2,d0
00007CDE E640                       		asr.w	#3,d0
00007CE0 9042                       		sub.w	d2,d0
00007CE2 48C0                       		ext.l	d0
00007CE4 E980                       		asl.l	#4,d0
00007CE6 81FC 001C                  		divs.w	#$1C,d0
00007CEA 48C0                       		ext.l	d0
00007CEC E980                       		asl.l	#4,d0
00007CEE E180                       		asl.l	#8,d0
00007CF0 7600                       		moveq	#0,d3
00007CF2 3602                       		move.w	d2,d3
00007CF4 323C 001B                  		move.w	#$1B,d1
00007CF8                            	@starLoop:		
00007CF8 32C3                       		move.w	d3,(a1)+
00007CFA 4843                       		swap	d3
00007CFC D680                       		add.l	d0,d3
00007CFE 4843                       		swap	d3
00007D00 51C9 FFF6                  		dbf	d1,@starLoop
00007D04                            
00007D04 3002                       		move.w	d2,d0
00007D06 E640                       		asr.w	#3,d0
00007D08 3200                       		move.w	d0,d1
00007D0A E241                       		asr.w	#1,d1
00007D0C D041                       		add.w	d1,d0
00007D0E 323C 0004                  		move.w	#4,d1
00007D12                            	@buildingLoop1:		; distant black buildings
00007D12 32C0                       		move.w	d0,(a1)+
00007D14 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007D18                            
00007D18 3002                       		move.w	d2,d0
00007D1A E440                       		asr.w	#2,d0
00007D1C 323C 0004                  		move.w	#4,d1
00007D20                            	@buildingLoop2:		; closer buildings
00007D20 32C0                       		move.w	d0,(a1)+
00007D22 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007D26                            
00007D26 3002                       		move.w	d2,d0
00007D28 E240                       		asr.w	#1,d0
00007D2A 323C 001D                  		move.w	#$1D,d1
00007D2E                            	@bottomLoop:		; bottom part of background
00007D2E 32C0                       		move.w	d0,(a1)+
00007D30 51C9 FFFC                  		dbf	d1,@bottomLoop
00007D34                            
00007D34 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007D38 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007D3C 3400                       		move.w	d0,d2
00007D3E 0440 00C0                  		subi.w	#$C0,d0
00007D42 0240 03F0                  		andi.w	#$3F0,d0
00007D46 E648                       		lsr.w	#3,d0
00007D48 45F2 0000                  		lea	(a2,d0),a2
00007D4C                            ;-------------------------------------------------------------------------------
00007D4C                            ;-------------------------------------------------------------------------------
00007D4C                            Bg_Scroll_X:
00007D4C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007D50 323C 000E                  		move.w	#$E,d1
00007D54 3038 F700                  		move.w	(v_screenposx).w,d0
00007D58 4440                       		neg.w	d0
00007D5A 4840                       		swap	d0
00007D5C 0242 000F                  		andi.w	#$F,d2
00007D60 D442                       		add.w	d2,d2
00007D62 301A                       		move.w	(a2)+,d0
00007D64 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007D68                            	@blockLoop:
00007D68 301A                       		move.w	(a2)+,d0
00007D6A                            	@pixelJump:		
00007D6A 22C0                       		move.l	d0,(a1)+
00007D6C 22C0                       		move.l	d0,(a1)+
00007D6E 22C0                       		move.l	d0,(a1)+
00007D70 22C0                       		move.l	d0,(a1)+
00007D72 22C0                       		move.l	d0,(a1)+
00007D74 22C0                       		move.l	d0,(a1)+
00007D76 22C0                       		move.l	d0,(a1)+
00007D78 22C0                       		move.l	d0,(a1)+
00007D7A 22C0                       		move.l	d0,(a1)+
00007D7C 22C0                       		move.l	d0,(a1)+
00007D7E 22C0                       		move.l	d0,(a1)+
00007D80 22C0                       		move.l	d0,(a1)+
00007D82 22C0                       		move.l	d0,(a1)+
00007D84 22C0                       		move.l	d0,(a1)+
00007D86 22C0                       		move.l	d0,(a1)+
00007D88 22C0                       		move.l	d0,(a1)+
00007D8A 51C9 FFDC                  		dbf	d1,@blockLoop
00007D8E 4E75                       		rts
00007D90                            
00007D90                            ; ---------------------------------------------------------------------------
00007D90                            ; Spring Yard Zone background layer deformation	code
00007D90                            ; ---------------------------------------------------------------------------
00007D90                            
00007D90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D90                            
00007D90                            
00007D90                            Deform_SYZ:
00007D90                            	; vertical scrolling
00007D90 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007D94 48C5                       		ext.l	d5
00007D96 E985                       		asl.l	#4,d5
00007D98 2205                       		move.l	d5,d1
00007D9A E385                       		asl.l	#1,d5
00007D9C DA81                       		add.l	d1,d5
00007D9E 6100 0000                  		bsr.w	Bg_Scroll_Y
00007DA2 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007DA8                            	; calculate background scroll buffer
00007DA8 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007DAC 3438 F700                  		move.w	(v_screenposx).w,d2
00007DB0 4442                       		neg.w	d2
00007DB2 3002                       		move.w	d2,d0
00007DB4 E640                       		asr.w	#3,d0
00007DB6 9042                       		sub.w	d2,d0
00007DB8 48C0                       		ext.l	d0
00007DBA E780                       		asl.l	#3,d0
00007DBC 81FC 0008                  		divs.w	#8,d0
00007DC0 48C0                       		ext.l	d0
00007DC2 E980                       		asl.l	#4,d0
00007DC4 E180                       		asl.l	#8,d0
00007DC6 7600                       		moveq	#0,d3
00007DC8 3602                       		move.w	d2,d3
00007DCA E243                       		asr.w	#1,d3
00007DCC 323C 0007                  		move.w	#7,d1
00007DD0                            	@cloudLoop:		
00007DD0 32C3                       		move.w	d3,(a1)+
00007DD2 4843                       		swap	d3
00007DD4 D680                       		add.l	d0,d3
00007DD6 4843                       		swap	d3
00007DD8 51C9 FFF6                  		dbf	d1,@cloudLoop
00007DDC                            
00007DDC 3002                       		move.w	d2,d0
00007DDE E640                       		asr.w	#3,d0
00007DE0 323C 0004                  		move.w	#4,d1
00007DE4                            	@mountainLoop:		
00007DE4 32C0                       		move.w	d0,(a1)+
00007DE6 51C9 FFFC                  		dbf	d1,@mountainLoop
00007DEA                            
00007DEA 3002                       		move.w	d2,d0
00007DEC E440                       		asr.w	#2,d0
00007DEE 323C 0005                  		move.w	#5,d1
00007DF2                            	@buildingLoop:		
00007DF2 32C0                       		move.w	d0,(a1)+
00007DF4 51C9 FFFC                  		dbf	d1,@buildingLoop
00007DF8                            
00007DF8 3002                       		move.w	d2,d0
00007DFA 3202                       		move.w	d2,d1
00007DFC E241                       		asr.w	#1,d1
00007DFE 9041                       		sub.w	d1,d0
00007E00 48C0                       		ext.l	d0
00007E02 E980                       		asl.l	#4,d0
00007E04 81FC 000E                  		divs.w	#$E,d0
00007E08 48C0                       		ext.l	d0
00007E0A E980                       		asl.l	#4,d0
00007E0C E180                       		asl.l	#8,d0
00007E0E 7600                       		moveq	#0,d3
00007E10 3602                       		move.w	d2,d3
00007E12 E243                       		asr.w	#1,d3
00007E14 323C 000D                  		move.w	#$D,d1
00007E18                            	@bushLoop:		
00007E18 32C3                       		move.w	d3,(a1)+
00007E1A 4843                       		swap	d3
00007E1C D680                       		add.l	d0,d3
00007E1E 4843                       		swap	d3
00007E20 51C9 FFF6                  		dbf	d1,@bushLoop
00007E24                            
00007E24 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007E28 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007E2C 3400                       		move.w	d0,d2
00007E2E 0240 01F0                  		andi.w	#$1F0,d0
00007E32 E648                       		lsr.w	#3,d0
00007E34 45F2 0000                  		lea	(a2,d0),a2
00007E38 6000 FF12                  		bra.w	Bg_Scroll_X
00007E3C                            ; End of function Deform_SYZ
00007E3C                            
00007E3C                            ; ---------------------------------------------------------------------------
00007E3C                            ; Scrap	Brain Zone background layer deformation	code
00007E3C                            ; ---------------------------------------------------------------------------
00007E3C                            
00007E3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E3C                            
00007E3C                            
00007E3C                            Deform_SBZ:
00007E3C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E40 48C4                       		ext.l	d4
00007E42 ED84                       		asl.l	#6,d4
00007E44 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E48 48C5                       		ext.l	d5
00007E4A E985                       		asl.l	#4,d5
00007E4C E385                       		asl.l	#1,d5
00007E4E 6100 0000                  		bsr.w	BGScroll_XY
00007E52 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E58 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E5C 323C 00DF                  		move.w	#223,d1
00007E60 3038 F700                  		move.w	(v_screenposx).w,d0
00007E64 4440                       		neg.w	d0
00007E66 4840                       		swap	d0
00007E68 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E6C 4440                       		neg.w	d0
00007E6E                            
00007E6E                            loc_6576:
00007E6E 22C0                       		move.l	d0,(a1)+
00007E70 51C9 FFFC                  		dbf	d1,loc_6576
00007E74 4E75                       		rts	
00007E76                            ;-------------------------------------------------------------------------------
00007E76                            Deform_SBZ2:;loc_68A2:
00007E76 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E7A 48C4                       		ext.l	d4
00007E7C ED84                       		asl.l	#6,d4
00007E7E 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E82 48C5                       		ext.l	d5
00007E84 E985                       		asl.l	#4,d5
00007E86 E385                       		asl.l	#1,d5
00007E88 6100 0000                  		bsr.w	BGScroll_XY
00007E8C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E92 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E96 323C 00DF                  		move.w	#223,d1
00007E9A 3038 F700                  		move.w	(v_screenposx).w,d0
00007E9E 4440                       		neg.w	d0
00007EA0 4840                       		swap	d0
00007EA2 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007EA6 4440                       		neg.w	d0
00007EA8                            
00007EA8                            loc_6577:
00007EA8 22C0                       		move.l	d0,(a1)+
00007EAA 51C9 FFFC                  		dbf	d1,loc_6577
00007EAE 4E75                       		rts	
00007EB0                            
00007EB0                            ; ---------------------------------------------------------------------------
00007EB0                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007EB0                            ; ---------------------------------------------------------------------------
00007EB0                            
00007EB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EB0                            
00007EB0                            
00007EB0                            ScrollHoriz:
00007EB0 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007EB4 6100                       		bsr.s	MoveScreenHoriz
00007EB6 3038 F700                  		move.w	(v_screenposx).w,d0
00007EBA 0240 0010                  		andi.w	#$10,d0
00007EBE 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007EC2 B300                       		eor.b	d1,d0
00007EC4 6600                       		bne.s	@return
00007EC6 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007ECC 3038 F700                  		move.w	(v_screenposx).w,d0
00007ED0 9044                       		sub.w	d4,d0		; compare new with old screen position
00007ED2 6A00                       		bpl.s	@scrollRight
00007ED4                            
00007ED4 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007EDA 4E75                       		rts	
00007EDC                            
00007EDC                            	@scrollRight:
00007EDC 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007EE2                            
00007EE2                            	@return:
00007EE2 4E75                       		rts	
00007EE4                            ; End of function ScrollHoriz
00007EE4                            
00007EE4                            
00007EE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EE4                            
00007EE4                            MoveScreenHoriz:
00007EE4 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007EE8 6700 0000                  		beq.w	@cont		
00007EEC 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007EF2                            		
00007EF2                            	@cont:		
00007EF2 3238 C904                  		move.w	($FFFFC904).w,d1
00007EF6 6700                       		beq.s	@cont1
00007EF8 0441 0100                  		sub.w	#$100,d1
00007EFC 31C1 C904                  		move.w	d1,($FFFFC904).w
00007F00 7200                       		moveq	#0,d1
00007F02 1238 C904                  		move.b	($FFFFC904).w,d1
00007F06 E509                       		lsl.b	#2,d1
00007F08 5801                       		addq.b	#4,d1
00007F0A 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007F0E 9001                       		sub.b	d1,d0
00007F10 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007F14 3031 0000                  		move.w	(a1,d0.w),d0
00007F18 0240 3FFF                  		and.w	#$3FFF,d0
00007F1C 6000                       		bra.s	@cont2
00007F1E                            		
00007F1E                            @cont1:
00007F1E 3038 D008                  		move.w	($FFFFD008).w,d0
00007F22                            		
00007F22                            @cont2:
00007F22 9078 F700                  		sub.w	($FFFFF700).w,d0
00007F26 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007F2A 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007F2C 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007F30 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007F32 4278 F73A                          clr.w    (v_scrshiftx).w
00007F36 4E75                               rts 
00007F38                            ; ===========================================================================
00007F38                            
00007F38                            SH_AheadOfMid:
00007F38 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007F3C 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007F3E 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007F42                            
00007F42                                SH_Ahead16:
00007F42 D078 F700                          add.w    (v_screenposx).w,d0
00007F46 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007F4A 6D00                               blt.s    SH_SetScreen
00007F4C 3038 F72A                          move.w    (v_limitright2).w,d0
00007F50                            
00007F50                            SH_SetScreen:
00007F50 3200                               move.w    d0,d1
00007F52 9278 F700                          sub.w    (v_screenposx).w,d1
00007F56 E141                               asl.w    #8,d1
00007F58 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007F5C 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007F60 4E75                               rts 
00007F62                            ; ===========================================================================
00007F62                            
00007F62                            SH_BehindMid:
00007F62 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F66 6400                       		bcc.s	@cont
00007F68 303C FFF0                  		move.w	#-$10,d0	
00007F6C                            
00007F6C                            @cont:
00007F6C D078 F700                  		add.w	(v_screenposx).w,d0
00007F70 B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007F74 6EDA                       		bgt.s	SH_SetScreen
00007F76 3038 F728                  		move.w	(v_limitleft2).w,d0
00007F7A 60D4                       		bra.s	SH_SetScreen
00007F7C                            ; End of function MoveScreenHoriz
00007F7C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007F7C                            
00007F7C                            MoveScreenHorizEXT:
00007F7C 3238 C904                  		move.w	($FFFFC904).w,d1
00007F80 6700                       		beq.s	@cont1
00007F82 0441 0100                  		sub.w	#$100,d1
00007F86 31C1 C904                  		move.w	d1,($FFFFC904).w
00007F8A 7200                       		moveq	#0,d1
00007F8C 1238 C904                  		move.b	($FFFFC904).w,d1
00007F90 E509                       		lsl.b	#2,d1
00007F92 5801                       		addq.b	#4,d1
00007F94 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007F98 9001                       		sub.b	d1,d0
00007F9A 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007F9E 3031 0000                  		move.w	(a1,d0.w),d0
00007FA2 0240 3FFF                  		and.w	#$3FFF,d0
00007FA6 6000                       		bra.s	@cont2
00007FA8                            		
00007FA8                            @cont1:
00007FA8 3038 D008                  		move.w	($FFFFD008).w,d0
00007FAC                            		
00007FAC                            @cont2:
00007FAC 9078 F700                  		sub.w	($FFFFF700).w,d0
00007FB0 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007FB4 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007FB6 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007FB8 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007FBA                            ; ===========================================================================
00007FBA                            
00007FBA                            SHEXT_ProperlyFramed:
00007FBA 4278 F73A                          clr.w    (v_scrshiftx).w
00007FBE 4E75                               rts 
00007FC0                            ; ===========================================================================
00007FC0                            
00007FC0                            SHEXT_AheadOfMid:
00007FC0 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007FC4 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007FC6 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007FCA                            
00007FCA                            SHEXT_Ahead16:
00007FCA D078 F700                          add.w    (v_screenposx).w,d0
00007FCE B078 F72A                          cmp.w    (v_limitright2).w,d0
00007FD2 6D00                               blt.s    SHEXT_SetScreen
00007FD4 3038 F72A                          move.w    (v_limitright2).w,d0
00007FD8                            
00007FD8                            SHEXT_SetScreen:
00007FD8 3200                               move.w    d0,d1
00007FDA 9278 F700                          sub.w    (v_screenposx).w,d1
00007FDE E141                               asl.w    #8,d1
00007FE0 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007FE4 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007FE8 4E75                               rts
00007FEA                            
00007FEA                            ; ===========================================================================
00007FEA                            
00007FEA                            SHEXT_BehindMid:
00007FEA 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007FEE 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007FF0 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007FF4                            
00007FF4                            SHEXT_Behind16:
00007FF4 D078 F700                          add.w    (v_screenposx).w,d0
00007FF8 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007FFC 6EDA                               bgt.s    SHEXT_SetScreen
00007FFE 3038 F728                          move.w    (v_limitleft2).w,d0
00008002 60D4                               bra.s    SHEXT_SetScreen
00008004                                  
00008004                            ; End of function MoveScreenHoriz
00008004                            
00008004                            
00008004                            ; ---------------------------------------------------------------------------
00008004                            ; Subroutine to	scroll the level vertically as Sonic moves
00008004                            ; ---------------------------------------------------------------------------
00008004                            
00008004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008004                            
00008004                            
00008004                            ScrollVertical:
00008004 7200                       		moveq	#0,d1
00008006 3038 D00C                  		move.w	(v_player+obY).w,d0
0000800A 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
0000800E 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00008014 6700                       		beq.s	SV_NotRolling	; if not, branch
00008016 5B40                       		subq.w	#5,d0
00008018                            
00008018                            	SV_NotRolling:
00008018 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
0000801E 6700                       		beq.s	loc_664A	; if not, branch
00008020                            
00008020 0640 0020                  		addi.w	#32,d0
00008024 9078 F73E                  		sub.w	(v_lookshift).w,d0
00008028 6500                       		bcs.s	loc_6696
0000802A 0440 0040                  		subi.w	#64,d0
0000802E 6400                       		bcc.s	loc_6696
00008030 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00008034 6600                       		bne.s	loc_66A8
00008036 6000                       		bra.s	loc_6656
00008038                            ; ===========================================================================
00008038                            
00008038                            loc_664A:
00008038 9078 F73E                  		sub.w	(v_lookshift).w,d0
0000803C 6600                       		bne.s	loc_665C
0000803E 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00008042 6600                       		bne.s	loc_66A8
00008044                            
00008044                            loc_6656:
00008044 4278 F73C                  		clr.w	(v_scrshifty).w
00008048 4E75                       		rts	
0000804A                            ; ===========================================================================
0000804A                            
0000804A                            loc_665C:
0000804A 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00008050 6600                       		bne.s	loc_6684
00008052 3238 D020                  		move.w	(v_player+obInertia).w,d1
00008056 6A00                       		bpl.s	loc_666C
00008058 4441                       		neg.w	d1
0000805A                            
0000805A                            loc_666C:
0000805A 0C41 0800                  		cmpi.w	#$800,d1
0000805E 6400                       		bcc.s	loc_6696
00008060 323C 0600                  		move.w	#$600,d1
00008064 0C40 0006                  		cmpi.w	#6,d0
00008068 6E00                       		bgt.s	loc_66F6
0000806A 0C40 FFFA                  		cmpi.w	#-6,d0
0000806E 6D00                       		blt.s	loc_66C0
00008070 6000                       		bra.s	loc_66AE
00008072                            ; ===========================================================================
00008072                            
00008072                            loc_6684:
00008072 323C 0200                  		move.w	#$200,d1
00008076 0C40 0002                  		cmpi.w	#2,d0
0000807A 6E00                       		bgt.s	loc_66F6
0000807C 0C40 FFFE                  		cmpi.w	#-2,d0
00008080 6D00                       		blt.s	loc_66C0
00008082 6000                       		bra.s	loc_66AE
00008084                            ; ===========================================================================
00008084                            
00008084                            loc_6696:
00008084 323C 1000                  		move.w	#$1000,d1
00008088 0C40 0010                  		cmpi.w	#$10,d0
0000808C 6E00                       		bgt.s	loc_66F6
0000808E 0C40 FFF0                  		cmpi.w	#-$10,d0
00008092 6D00                       		blt.s	loc_66C0
00008094 6000                       		bra.s	loc_66AE
00008096                            ; ===========================================================================
00008096                            
00008096                            loc_66A8:
00008096 7000                       		moveq	#0,d0
00008098 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
0000809C                            
0000809C                            loc_66AE:
0000809C 7200                       		moveq	#0,d1
0000809E 3200                       		move.w	d0,d1
000080A0 D278 F704                  		add.w	(v_screenposy).w,d1
000080A4 4A40                       		tst.w	d0
000080A6 6A00 0000                  		bpl.w	loc_6700
000080AA 6000 0000                  		bra.w	loc_66CC
000080AE                            ; ===========================================================================
000080AE                            
000080AE                            loc_66C0:
000080AE 4441                       		neg.w	d1
000080B0 48C1                       		ext.l	d1
000080B2 E181                       		asl.l	#8,d1
000080B4 D2B8 F704                  		add.l	(v_screenposy).w,d1
000080B8 4841                       		swap	d1
000080BA                            
000080BA                            loc_66CC:
000080BA B278 F72C                  		cmp.w	(v_limittop2).w,d1
000080BE 6E00                       		bgt.s	loc_6724
000080C0 0C41 FF00                  		cmpi.w	#-$100,d1
000080C4 6E00                       		bgt.s	loc_66F0
000080C6 0241 07FF                  		andi.w	#$7FF,d1
000080CA 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000080D0 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
000080D6 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000080DC 6000                       		bra.s	loc_6724
000080DE                            ; ===========================================================================
000080DE                            
000080DE                            loc_66F0:
000080DE 3238 F72C                  		move.w	(v_limittop2).w,d1
000080E2 6000                       		bra.s	loc_6724
000080E4                            ; ===========================================================================
000080E4                            
000080E4                            loc_66F6:
000080E4 48C1                       		ext.l	d1
000080E6 E181                       		asl.l	#8,d1
000080E8 D2B8 F704                  		add.l	(v_screenposy).w,d1
000080EC 4841                       		swap	d1
000080EE                            
000080EE                            loc_6700:
000080EE B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
000080F2 6D00                       		blt.s	loc_6724
000080F4 0441 0800                  		subi.w	#$800,d1
000080F8 6500                       		bcs.s	loc_6720
000080FA 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00008100 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00008106 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0000810C 6000                       		bra.s	loc_6724
0000810E                            ; ===========================================================================
0000810E                            
0000810E                            loc_6720:
0000810E 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00008112                            
00008112                            loc_6724:
00008112 3838 F704                  		move.w	(v_screenposy).w,d4
00008116 4841                       		swap	d1
00008118 2601                       		move.l	d1,d3
0000811A 96B8 F704                  		sub.l	(v_screenposy).w,d3
0000811E E09B                       		ror.l	#8,d3
00008120 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00008124 21C1 F704                  		move.l	d1,(v_screenposy).w
00008128 3038 F704                  		move.w	(v_screenposy).w,d0
0000812C 0240 0010                  		andi.w	#$10,d0
00008130 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00008134 B300                       		eor.b	d1,d0
00008136 6600                       		bne.s	@return
00008138 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
0000813E 3038 F704                  		move.w	(v_screenposy).w,d0
00008142 9044                       		sub.w	d4,d0
00008144 6A00                       		bpl.s	@scrollBottom
00008146 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
0000814C 4E75                       		rts	
0000814E                            ; ===========================================================================
0000814E                            
0000814E                            	@scrollBottom:
0000814E 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00008154                            
00008154                            	@return:
00008154 4E75                       		rts	
00008156                            ; End of function ScrollVertical
00008156                            
00008156                            
00008156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008156                            ; Scrolls background and sets redraw flags.
00008156                            ; d4 - background x offset * $10000
00008156                            ; d5 - background y offset * $10000
00008156                            
00008156                            BGScroll_XY:
00008156 2438 F708                  		move.l	(v_bgscreenposx).w,d2
0000815A 2002                       		move.l	d2,d0
0000815C D084                       		add.l	d4,d0
0000815E 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00008162 2200                       		move.l	d0,d1
00008164 4841                       		swap	d1
00008166 0241 0010                  		andi.w	#$10,d1
0000816A 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
0000816E B701                       		eor.b	d3,d1
00008170 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00008172 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00008178 9082                       		sub.l	d2,d0	; new - old
0000817A 6A00                       		bpl.s	@scrollRight
0000817C 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00008182 6000                       		bra.s	BGScroll_YRelative
00008184                            	@scrollRight:
00008184 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
0000818A                            BGScroll_YRelative:
0000818A 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
0000818E 2003                       		move.l	d3,d0
00008190 D085                       		add.l	d5,d0
00008192 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00008196 2200                       		move.l	d0,d1
00008198 4841                       		swap	d1
0000819A 0241 0010                  		andi.w	#$10,d1
0000819E 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
000081A2 B501                       		eor.b	d2,d1
000081A4 6600                       		bne.s	@return
000081A6 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
000081AC 9083                       		sub.l	d3,d0
000081AE 6A00                       		bpl.s	@scrollBottom
000081B0 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
000081B6 4E75                       		rts
000081B8                            	@scrollBottom:
000081B8 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
000081BE                            	@return:
000081BE 4E75                       		rts
000081C0                            ; End of function BGScroll_XY
000081C0                            
000081C0                            Bg_Scroll_Y:
000081C0 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
000081C4 2003                       		move.l	d3,d0
000081C6 D085                       		add.l	d5,d0
000081C8 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
000081CC 2200                       		move.l	d0,d1
000081CE 4841                       		swap	d1
000081D0 0241 0010                  		andi.w	#$10,d1
000081D4 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
000081D8 B501                       		eor.b	d2,d1
000081DA 6600                       		bne.s	@return
000081DC 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
000081E2 9083                       		sub.l	d3,d0
000081E4 6A00                       		bpl.s	@scrollBottom
000081E6 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
000081EC 4E75                       		rts
000081EE                            	@scrollBottom:
000081EE 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
000081F4                            	@return:
000081F4 4E75                       		rts
000081F6                            
000081F6                            
000081F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081F6                            
000081F6                            
000081F6                            BGScroll_YAbsolute:
000081F6 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
000081FA 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000081FE 3200                       		move.w	d0,d1
00008200 0241 0010                  		andi.w	#$10,d1
00008204 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008208 B501                       		eor.b	d2,d1
0000820A 6600                       		bne.s	@return
0000820C 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00008212 9043                       		sub.w	d3,d0
00008214 6A00                       		bpl.s	@scrollBottom
00008216 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
0000821C 4E75                       		rts
0000821E                            	@scrollBottom:
0000821E 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00008224                            	@return:
00008224 4E75                       		rts
00008226                            ; End of function BGScroll_YAbsolute
00008226                            
00008226                            
00008226                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008226                            ; d6 - bit to set for redraw
00008226                            
00008226                            BGScroll_Block1:
00008226 2438 F708                  		move.l	(v_bgscreenposx).w,d2
0000822A 2002                       		move.l	d2,d0
0000822C D084                       		add.l	d4,d0
0000822E 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00008232 2200                       		move.l	d0,d1
00008234 4841                       		swap	d1
00008236 0241 0010                  		andi.w	#$10,d1
0000823A 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
0000823E B701                       		eor.b	d3,d1
00008240 6600                       		bne.s	@return
00008242 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00008248 9082                       		sub.l	d2,d0
0000824A 6A00                       		bpl.s	@scrollRight
0000824C 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00008250 6000                       		bra.s	@return
00008252                            	@scrollRight:
00008252 5206                       		addq.b	#1,d6
00008254 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00008258                            	@return:
00008258 4E75                       		rts
0000825A                            ; End of function BGScroll_Block1
0000825A                            
0000825A                            
0000825A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000825A                            
0000825A                            
0000825A                            BGScroll_Block2:
0000825A 2438 F710                  		move.l	(v_bg2screenposx).w,d2
0000825E 2002                       		move.l	d2,d0
00008260 D084                       		add.l	d4,d0
00008262 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00008266 2200                       		move.l	d0,d1
00008268 4841                       		swap	d1
0000826A 0241 0010                  		andi.w	#$10,d1
0000826E 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00008272 B701                       		eor.b	d3,d1
00008274 6600                       		bne.s	@return
00008276 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
0000827C 9082                       		sub.l	d2,d0
0000827E 6A00                       		bpl.s	@scrollRight
00008280 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00008284 6000                       		bra.s	@return
00008286                            	@scrollRight:
00008286 5206                       		addq.b	#1,d6
00008288 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
0000828C                            	@return:
0000828C 4E75                       		rts
0000828E                            ;-------------------------------------------------------------------------------
0000828E                            BGScroll_Block3:
0000828E 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00008292 2002                       		move.l	d2,d0
00008294 D084                       		add.l	d4,d0
00008296 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
0000829A 2200                       		move.l	d0,d1
0000829C 4841                       		swap	d1
0000829E 0241 0010                  		andi.w	#$10,d1
000082A2 1638 F750                  		move.b	(v_bg3_xblock).w,d3
000082A6 B701                       		eor.b	d3,d1
000082A8 6600                       		bne.s	@return
000082AA 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
000082B0 9082                       		sub.l	d2,d0
000082B2 6A00                       		bpl.s	@scrollRight
000082B4 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
000082B8 6000                       		bra.s	@return
000082BA                            	@scrollRight:
000082BA 5206                       		addq.b	#1,d6
000082BC 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
000082C0                            	@return:
000082C0 4E75                       		rts
000082C0 4E75                       		rts
000082C2                            
000082C2                            
000082C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082C2                            
000082C2                            ; sub_6886:
000082C2                            LoadTilesAsYouMove_BGOnly:
000082C2 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000082C8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000082CE 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
000082D2 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000082D6 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000082DA 343C 6000                  		move.w	#$6000,d2
000082DE 6100 0000                  		bsr.w	DrawBGScrollBlock1
000082E2 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
000082E6 47F8 F710                  		lea	(v_bg2screenposx).w,a3
000082EA 6000 0000                  		bra.w	DrawBGScrollBlock2
000082EE                            ; End of function sub_6886
000082EE                            
000082EE                            ; ---------------------------------------------------------------------------
000082EE                            ; Subroutine to	display	correct	tiles as you move
000082EE                            ; ---------------------------------------------------------------------------
000082EE                            
000082EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082EE                            
000082EE                            
000082EE                            LoadTilesAsYouMove:
000082EE 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000082F4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000082FA                            		; First, update the background
000082FA 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
000082FE 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00008302 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008306 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
0000830A 6100 0000                  		bsr.w	DrawBGScrollBlock1
0000830E 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00008312 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00008316 6100 0000                  		bsr.w	DrawBGScrollBlock2
0000831A                            		; REV01 added a third scroll block, though, technically,
0000831A                            		; the RAM for it was already there in REV00
0000831A 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
0000831E 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00008322 6100 0000                  		bsr.w	DrawBGScrollBlock3
00008326                            		; Then, update the foreground
00008326 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
0000832A 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
0000832E 49F8 A400                  		lea	(v_lvllayout).w,a4
00008332 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00008336                            		; The FG's update function is inlined here
00008336 4A12                       		tst.b	(a2)
00008338 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
0000833A 0892 0000                  		bclr	#0,(a2)
0000833E 6700                       		beq.s	loc_6908
00008340                            		; Draw new tiles at the top
00008340 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00008342 7AF0                       		moveq	#-16,d5 ; X coordinate
00008344 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008348 78F0                       		moveq	#-16,d4 ; Y coordinate
0000834A 7AF0                       		moveq	#-16,d5 ; X coordinate
0000834C 6100 0000                  		bsr.w	DrawBlocks_LR
00008350                            
00008350                            loc_6908:
00008350 0892 0001                  		bclr	#1,(a2)
00008354 6700                       		beq.s	loc_6922
00008356                            		; Draw new tiles at the bottom
00008356 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
0000835A 7AF0                       		moveq	#-16,d5
0000835C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008360 383C 00E0                  		move.w	#224,d4
00008364 7AF0                       		moveq	#-16,d5
00008366 6100 0000                  		bsr.w	DrawBlocks_LR
0000836A                            
0000836A                            loc_6922:
0000836A 0892 0002                  		bclr	#2,(a2)
0000836E 6700                       		beq.s	loc_6938
00008370                            		; Draw new tiles on the left
00008370 78F0                       		moveq	#-16,d4
00008372 7AF0                       		moveq	#-16,d5
00008374 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008378 78F0                       		moveq	#-16,d4
0000837A 7AF0                       		moveq	#-16,d5
0000837C 6100 0000                  		bsr.w	DrawBlocks_TB
00008380                            
00008380                            loc_6938:
00008380 0892 0003                  		bclr	#3,(a2)
00008384 6700                       		beq.s	locret_6952
00008386                            		; Draw new tiles on the right
00008386 78F0                       		moveq	#-16,d4
00008388 3A3C 0140                  		move.w	#320,d5
0000838C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008390 78F0                       		moveq	#-16,d4
00008392 3A3C 0140                  		move.w	#320,d5
00008396 6100 0000                  		bsr.w	DrawBlocks_TB
0000839A                            
0000839A                            locret_6952:
0000839A 4E75                       		rts	
0000839C                            ; End of function LoadTilesAsYouMove
0000839C                            
0000839C                            
0000839C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000839C                            
0000839C                            ; sub_6954:
0000839C                            DrawBGScrollBlock1:
0000839C 4A12                       		tst.b	(a2)
0000839E 6700 0000                  		beq.w	locret_69F2
000083A2 0892 0000                  		bclr	#0,(a2)
000083A6 6700                       		beq.s	loc_6972
000083A8                            		; Draw new tiles at the top
000083A8 78F0                       		moveq	#-16,d4
000083AA 7AF0                       		moveq	#-16,d5
000083AC 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083B0 78F0                       		moveq	#-16,d4
000083B2 7AF0                       		moveq	#-16,d5
000083B4 6100 0000                  			bsr.w	DrawBlocks_LR
000083B8                            
000083B8                            loc_6972:
000083B8 0892 0001                  		bclr	#1,(a2)
000083BC 6700                       		beq.s	loc_698E
000083BE                            		; Draw new tiles at the top
000083BE 383C 00E0                  		move.w	#224,d4
000083C2 7AF0                       		moveq	#-16,d5
000083C4 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083C8 383C 00E0                  		move.w	#224,d4
000083CC 7AF0                       		moveq	#-16,d5
000083CE 6100 0000                  			bsr.w	DrawBlocks_LR
000083D2                            
000083D2                            loc_698E:
000083D2 0892 0002                  		bclr	#2,(a2)
000083D6                            
000083D6                            
000083D6 6700                       			beq.s	locj_6D56
000083D8                            			; Draw new tiles on the left
000083D8 78F0                       			moveq	#-16,d4
000083DA 7AF0                       			moveq	#-16,d5
000083DC 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083E0 78F0                       			moveq	#-16,d4
000083E2 7AF0                       			moveq	#-16,d5
000083E4 6100 0000                  			bsr.w	DrawBlocks_TB
000083E8                            	locj_6D56:
000083E8                            
000083E8 0892 0003                  			bclr	#3,(a2)
000083EC 6700                       			beq.s	locj_6D70
000083EE                            			; Draw new tiles on the right
000083EE 78F0                       			moveq	#-16,d4
000083F0 3A3C 0140                  			move.w	#320,d5
000083F4 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083F8 78F0                       			moveq	#-16,d4
000083FA 3A3C 0140                  			move.w	#320,d5
000083FE 6100 0000                  			bsr.w	DrawBlocks_TB
00008402                            	locj_6D70:
00008402                            
00008402 0892 0004                  			bclr	#4,(a2)
00008406 6700                       			beq.s	locj_6D88
00008408                            			; Draw entire row at the top
00008408 78F0                       			moveq	#-16,d4
0000840A 7A00                       			moveq	#0,d5
0000840C 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008410 78F0                       			moveq	#-16,d4
00008412 7A00                       			moveq	#0,d5
00008414 7C1F                       			moveq	#(512/16)-1,d6
00008416 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000841A                            	locj_6D88:
0000841A                            
0000841A 0892 0005                  			bclr	#5,(a2)
0000841E 6700                       			beq.s	locret_69F2
00008420                            			; Draw entire row at the bottom
00008420 383C 00E0                  			move.w	#224,d4
00008424 7A00                       			moveq	#0,d5
00008426 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000842A 383C 00E0                  			move.w	#224,d4
0000842E 7A00                       			moveq	#0,d5
00008430 7C1F                       			moveq	#(512/16)-1,d6
00008432 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008436                            
00008436                            locret_69F2:
00008436 4E75                       		rts	
00008438                            ; End of function DrawBGScrollBlock1
00008438                            
00008438                            
00008438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008438                            
00008438                            ; Essentially, this draws everything that isn't scroll block 1
00008438                            ; sub_69F4:
00008438                            DrawBGScrollBlock2:
00008438                            
00008438 4A12                       			tst.b	(a2)
0000843A 6700 0000                  			beq.w	locj_6DF2
0000843E 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00008444 6700 0000                  			beq.w	Draw_SBz
00008448 0892 0000                  			bclr	#0,(a2)
0000844C 6700                       			beq.s	locj_6DD2
0000844E                            			; Draw new tiles on the left
0000844E 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00008452 7AF0                       			moveq	#-16,d5
00008454 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008458 383C 0070                  			move.w	#224/2,d4
0000845C 7AF0                       			moveq	#-16,d5
0000845E 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00008460 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008464                            	locj_6DD2:
00008464 0892 0001                  			bclr	#1,(a2)
00008468 6700                       			beq.s	locj_6DF2
0000846A                            			; Draw new tiles on the right
0000846A 383C 0070                  			move.w	#224/2,d4
0000846E 3A3C 0140                  			move.w	#320,d5
00008472 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008476 383C 0070                  			move.w	#224/2,d4
0000847A 3A3C 0140                  			move.w	#320,d5
0000847E 7C02                       			moveq	#3-1,d6
00008480 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008484                            	locj_6DF2:
00008484 4E75                       			rts
00008486                            ;===============================================================================
00008486                            	locj_6DF4:
00008486 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00008496 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000084A6 0200                       			dc.b $02,$00						
000084A8                            ;===============================================================================
000084A8                            	Draw_SBz:
000084A8 78F0                       			moveq	#-16,d4
000084AA 0892 0000                  			bclr	#0,(a2)
000084AE 6600                       			bne.s	locj_6E28
000084B0 0892 0001                  			bclr	#1,(a2)
000084B4 6700                       			beq.s	locj_6E72
000084B6 383C 00E0                  			move.w	#224,d4
000084BA                            	locj_6E28:
000084BA 41F9 0000 8487             			lea	(locj_6DF4+1).l,a0
000084C0 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000084C4 D044                       			add.w	d4,d0
000084C6 0240 01F0                  			andi.w	#$1F0,d0
000084CA E848                       			lsr.w	#4,d0
000084CC 1030 0000                  			move.b	(a0,d0.w),d0
000084D0 47F9 0000 0000             			lea	(locj_6FE4).l,a3
000084D6 3673 0000                  			movea.w	(a3,d0.w),a3
000084DA 6700                       			beq.s	locj_6E5E
000084DC 7AF0                       			moveq	#-16,d5
000084DE 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084E2 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084E6 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084EA 6100 0000                  			bsr.w	DrawBlocks_LR
000084EE 6000                       			bra.s	locj_6E72
000084F0                            ;===============================================================================
000084F0                            	locj_6E5E:
000084F0 7A00                       			moveq	#0,d5
000084F2 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084F6 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000084FA 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084FE 7C1F                       			moveq	#(512/16)-1,d6
00008500 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008504                            	locj_6E72:
00008504 4A12                       			tst.b	(a2)
00008506 6600                       			bne.s	locj_6E78
00008508 4E75                       			rts
0000850A                            ;===============================================================================			
0000850A                            	locj_6E78:
0000850A 78F0                       			moveq	#-16,d4
0000850C 7AF0                       			moveq	#-16,d5
0000850E 1012                       			move.b	(a2),d0
00008510 0200 00A8                  			andi.b	#$A8,d0
00008514 6700                       			beq.s	locj_6E8C
00008516 E208                       			lsr.b	#1,d0
00008518 1480                       			move.b	d0,(a2)
0000851A 3A3C 0140                  			move.w	#320,d5
0000851E                            	locj_6E8C:
0000851E 41F9 0000 8486             			lea	(locj_6DF4).l,a0
00008524 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008528 0240 01F0                  			andi.w	#$1F0,d0
0000852C E848                       			lsr.w	#4,d0
0000852E 41F0 0000                  			lea	(a0,d0.w),a0
00008532 6000 0000                  			bra.w	locj_6FEC						
00008536                            ;===============================================================================
00008536                            
00008536                            
00008536                            	; locj_6EA4:
00008536                            	DrawBGScrollBlock3:
00008536 4A12                       			tst.b	(a2)
00008538 6700 0000                  			beq.w	locj_6EF0
0000853C 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008542 6700 0000                  			beq.w	Draw_Mz
00008546 0892 0000                  			bclr	#0,(a2)
0000854A 6700                       			beq.s	locj_6ED0
0000854C                            			; Draw new tiles on the left
0000854C 383C 0040                  			move.w	#$40,d4
00008550 7AF0                       			moveq	#-16,d5
00008552 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008556 383C 0040                  			move.w	#$40,d4
0000855A 7AF0                       			moveq	#-16,d5
0000855C 7C02                       			moveq	#3-1,d6
0000855E 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008562                            	locj_6ED0:
00008562 0892 0001                  			bclr	#1,(a2)
00008566 6700                       			beq.s	locj_6EF0
00008568                            			; Draw new tiles on the right
00008568 383C 0040                  			move.w	#$40,d4
0000856C 3A3C 0140                  			move.w	#320,d5
00008570 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008574 383C 0040                  			move.w	#$40,d4
00008578 3A3C 0140                  			move.w	#320,d5
0000857C 7C02                       			moveq	#3-1,d6
0000857E 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008582                            	locj_6EF0:
00008582 4E75                       			rts
00008584                            	locj_6EF2:
00008584 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00008594 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085A4 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085B4 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085C4 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085D4 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085E4 0200                       			dc.b $02,$00
000085E6                            ;===============================================================================
000085E6                            	Draw_Mz:
000085E6 78F0                       			moveq	#-16,d4
000085E8 0892 0000                  			bclr	#0,(a2)
000085EC 6600                       			bne.s	locj_6F66
000085EE 0892 0001                  			bclr	#1,(a2)
000085F2 6700                       			beq.s	locj_6FAE
000085F4 383C 00E0                  			move.w	#224,d4
000085F8                            	locj_6F66:
000085F8 41F9 0000 8585             			lea	(locj_6EF2+1).l,a0
000085FE 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008602 0440 0200                  			subi.w	#$200,d0
00008606 D044                       			add.w	d4,d0
00008608 0240 07F0                  			andi.w	#$7F0,d0
0000860C E848                       			lsr.w	#4,d0
0000860E 1030 0000                  			move.b	(a0,d0.w),d0
00008612 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008616 6700                       			beq.s	locj_6F9A
00008618 7AF0                       			moveq	#-16,d5
0000861A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000861E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008622 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008626 6100 0000                  			bsr.w	DrawBlocks_LR
0000862A 6000                       			bra.s	locj_6FAE
0000862C                            ;===============================================================================
0000862C                            	locj_6F9A:
0000862C 7A00                       			moveq	#0,d5
0000862E 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008632 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008636 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000863A 7C1F                       			moveq	#(512/16)-1,d6
0000863C 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008640                            	locj_6FAE:
00008640 4A12                       			tst.b	(a2)
00008642 6600                       			bne.s	locj_6FB4
00008644 4E75                       			rts
00008646                            ;===============================================================================			
00008646                            	locj_6FB4:
00008646 78F0                       			moveq	#-16,d4
00008648 7AF0                       			moveq	#-16,d5
0000864A 1012                       			move.b	(a2),d0
0000864C 0200 00A8                  			andi.b	#$A8,d0
00008650 6700                       			beq.s	locj_6FC8
00008652 E208                       			lsr.b	#1,d0
00008654 1480                       			move.b	d0,(a2)
00008656 3A3C 0140                  			move.w	#320,d5
0000865A                            	locj_6FC8:
0000865A 41F9 0000 8584             			lea	(locj_6EF2).l,a0
00008660 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008664 0440 0200                  			subi.w	#$200,d0
00008668 0240 07F0                  			andi.w	#$7F0,d0
0000866C E848                       			lsr.w	#4,d0
0000866E 41F0 0000                  			lea	(a0,d0.w),a0
00008672 6000 0000                  			bra.w	locj_6FEC
00008676                            ;===============================================================================			
00008676                            	locj_6FE4:
00008676 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
0000867E                            	locj_6FEC:
0000867E 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008680 2E3C 0080 0000             			move.l	#$800000,d7
00008686                            	locj_6FF4:			
00008686 7000                       			moveq	#0,d0
00008688 1018                       			move.b	(a0)+,d0
0000868A 0112                       			btst	d0,(a2)
0000868C 6700                       			beq.s	locj_701C
0000868E 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
00008692 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
00008696 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000869A 6100 0000                  			bsr.w	GetBlockData
0000869E 4CDF 0030                  			movem.l	(sp)+,d4/d5
000086A2 6100 0000                  			bsr.w	Calc_VRAM_Pos
000086A6 6100 0000                  			bsr.w	DrawBlock
000086AA 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
000086AE                            	locj_701C:
000086AE 0644 0010                  			addi.w	#16,d4
000086B2 51CE FFD2                  			dbf	d6,locj_6FF4
000086B6 4212                       			clr.b	(a2)
000086B8 4E75                       			rts			
000086BA                            
000086BA                            
000086BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086BA                            
000086BA                            ; Don't be fooled by the name: this function's for drawing from left to right
000086BA                            ; when the camera's moving up or down
000086BA                            ; DrawTiles_LR:
000086BA                            DrawBlocks_LR:
000086BA 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
000086BC                            ; DrawTiles_LR_2:
000086BC                            DrawBlocks_LR_2:
000086BC 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000086C2 2200                       		move.l	d0,d1
000086C4                            
000086C4                            	@loop:
000086C4 48E7 0C00                  		movem.l	d4-d5,-(sp)
000086C8 6100 0000                  		bsr.w	GetBlockData
000086CC 2001                       		move.l	d1,d0
000086CE 6100 0000                  		bsr.w	DrawBlock
000086D2 5801                       		addq.b	#4,d1		; Two tiles ahead
000086D4 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
000086D8 4CDF 0030                  		movem.l	(sp)+,d4-d5
000086DC 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
000086E0 51CE FFE2                  		dbf	d6,@loop
000086E4 4E75                       		rts
000086E6                            ; End of function DrawBlocks_LR
000086E6                            
000086E6                            ; DrawTiles_LR_3:
000086E6                            DrawBlocks_LR_3:
000086E6 2E3C 0080 0000             		move.l	#$800000,d7
000086EC 2200                       		move.l	d0,d1
000086EE                            
000086EE                            	@loop:
000086EE 48E7 0C00                  		movem.l	d4-d5,-(sp)
000086F2 6100 0000                  		bsr.w	GetBlockData_2
000086F6 2001                       		move.l	d1,d0
000086F8 6100 0000                  		bsr.w	DrawBlock
000086FC 5801                       		addq.b	#4,d1
000086FE 0201 007F                  		andi.b	#$7F,d1
00008702 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008706 0645 0010                  		addi.w	#16,d5
0000870A 51CE FFE2                  		dbf	d6,@loop
0000870E 4E75                       		rts	
00008710                            ; End of function DrawBlocks_LR_3
00008710                            
00008710                            
00008710                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008710                            
00008710                            ; Don't be fooled by the name: this function's for drawing from top to bottom
00008710                            ; when the camera's moving left or right
00008710                            ; DrawTiles_TB:
00008710                            DrawBlocks_TB:
00008710 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
00008712                            ; DrawTiles_TB_2:
00008712                            DrawBlocks_TB_2:
00008712 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008718 2200                       		move.l	d0,d1
0000871A                            
0000871A                            	@loop:
0000871A 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000871E 6100 0000                  		bsr.w	GetBlockData
00008722 2001                       		move.l	d1,d0
00008724 6100 0000                  		bsr.w	DrawBlock
00008728 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
0000872C 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
00008730 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008734 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
00008738 51CE FFE0                  		dbf	d6,@loop
0000873C 4E75                       		rts	
0000873E                            ; End of function DrawBlocks_TB_2
0000873E                            
0000873E                            
0000873E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000873E                            
0000873E                            ; Draws a block's worth of tiles
0000873E                            ; Parameters:
0000873E                            ; a0 = Pointer to block metadata (block index and X/Y flip)
0000873E                            ; a1 = Pointer to block
0000873E                            ; a5 = Pointer to VDP command port
0000873E                            ; a6 = Pointer to VDP data port
0000873E                            ; d0 = VRAM command to access plane
0000873E                            ; d2 = VRAM plane A/B specifier
0000873E                            ; d7 = Plane row delta
0000873E                            ; DrawTiles:
0000873E                            DrawBlock:
0000873E 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
00008740 4840                       		swap	d0
00008742 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008746 6600                       		bne.s	DrawFlipY
00008748 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
0000874C 6600                       		bne.s	DrawFlipX
0000874E 2A80                       		move.l	d0,(a5)
00008750 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
00008752 D087                       		add.l	d7,d0		; Next row
00008754 2A80                       		move.l	d0,(a5)
00008756 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
00008758 4E75                       		rts	
0000875A                            ; ===========================================================================
0000875A                            
0000875A                            DrawFlipX:
0000875A 2A80                       		move.l	d0,(a5)
0000875C 2819                       		move.l	(a1)+,d4
0000875E 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
00008764 4844                       		swap	d4		; Swap the tiles around
00008766 2C84                       		move.l	d4,(a6)		; Write top two tiles
00008768 D087                       		add.l	d7,d0		; Next row
0000876A 2A80                       		move.l	d0,(a5)
0000876C 2819                       		move.l	(a1)+,d4
0000876E 0A84 0800 0800             		eori.l	#$8000800,d4
00008774 4844                       		swap	d4
00008776 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
00008778 4E75                       		rts	
0000877A                            ; ===========================================================================
0000877A                            
0000877A                            DrawFlipY:
0000877A 0810 0003                  		btst	#3,(a0)
0000877E 6600                       		bne.s	DrawFlipXY
00008780 2A80                       		move.l	d0,(a5)
00008782 2A19                       		move.l	(a1)+,d5
00008784 2819                       		move.l	(a1)+,d4
00008786 0A84 1000 1000             		eori.l	#$10001000,d4
0000878C 2C84                       		move.l	d4,(a6)
0000878E D087                       		add.l	d7,d0
00008790 2A80                       		move.l	d0,(a5)
00008792 0A85 1000 1000             		eori.l	#$10001000,d5
00008798 2C85                       		move.l	d5,(a6)
0000879A 4E75                       		rts	
0000879C                            ; ===========================================================================
0000879C                            
0000879C                            DrawFlipXY:
0000879C 2A80                       		move.l	d0,(a5)
0000879E 2A19                       		move.l	(a1)+,d5
000087A0 2819                       		move.l	(a1)+,d4
000087A2 0A84 1800 1800             		eori.l	#$18001800,d4
000087A8 4844                       		swap	d4
000087AA 2C84                       		move.l	d4,(a6)
000087AC D087                       		add.l	d7,d0
000087AE 2A80                       		move.l	d0,(a5)
000087B0 0A85 1800 1800             		eori.l	#$18001800,d5
000087B6 4845                       		swap	d5
000087B8 2C85                       		move.l	d5,(a6)
000087BA 4E75                       		rts	
000087BC                            ; End of function DrawBlocks
000087BC                            
000087BC                            ; ===========================================================================
000087BC                            ; unused garbage
000087BC                            
000087BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087BC                            
000087BC                            ; Gets address of block at a certain coordinate
000087BC                            ; Parameters:
000087BC                            ; a4 = Pointer to level layout
000087BC                            ; d4 = Relative Y coordinate
000087BC                            ; d5 = Relative X coordinate
000087BC                            ; Returns:
000087BC                            ; a0 = Address of block metadata
000087BC                            ; a1 = Address of block
000087BC                            ; DrawBlocks:
000087BC                            GetBlockData:
000087BC DA53                       			add.w	(a3),d5
000087BE                            	GetBlockData_2:
000087BE D86B 0004                  			add.w	4(a3),d4
000087C2 43F8 B000                  			lea	(v_16x16).w,a1
000087C6                            		; Turn Y coordinate into index into level layout
000087C6 3604                       		move.w	d4,d3
000087C8 E24B                       		lsr.w	#1,d3
000087CA 0243 0380                  		andi.w	#$380,d3
000087CE                            		; Turn X coordinate into index into level layout
000087CE E64D                       		lsr.w	#3,d5
000087D0 3005                       		move.w	d5,d0
000087D2 EA48                       		lsr.w	#5,d0
000087D4 0240 007F                  		andi.w	#$7F,d0
000087D8                            		; Get chunk from level layout
000087D8 D043                       		add.w	d3,d0
000087DA 76FF                       		moveq	#-1,d3
000087DC 1634 0000                  		move.b	(a4,d0.w),d3
000087E0 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
000087E2                            		; Turn chunk ID into index into chunk table
000087E2 5303                       		subq.b	#1,d3
000087E4 0243 007F                  		andi.w	#$7F,d3
000087E8 EE5B                       		ror.w	#7,d3
000087EA                            		; Turn Y coordinate into index into chunk
000087EA D844                       		add.w	d4,d4
000087EC 0244 01E0                  		andi.w	#$1E0,d4
000087F0                            		; Turn X coordinate into index into chunk
000087F0 0245 001E                  		andi.w	#$1E,d5
000087F4                            		; Get block metadata from chunk
000087F4 D644                       		add.w	d4,d3
000087F6 D645                       		add.w	d5,d3
000087F8 2043                       		movea.l	d3,a0
000087FA 3610                       		move.w	(a0),d3
000087FC                            		; Turn block ID into address
000087FC 0243 03FF                  		andi.w	#$3FF,d3
00008800 E74B                       		lsl.w	#3,d3
00008802 D2C3                       		adda.w	d3,a1
00008804                            
00008804                            locret_6C1E:
00008804 4E75                       		rts	
00008806                            ; End of function GetBlockData
00008806                            
00008806                            
00008806                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008806                            
00008806                            ; Produces a VRAM plane access command from coordinates
00008806                            ; Parameters:
00008806                            ; d4 = Relative Y coordinate
00008806                            ; d5 = Relative X coordinate
00008806                            ; Returns VDP command in d0
00008806                            Calc_VRAM_Pos:
00008806 DA53                       			add.w	(a3),d5
00008808                            	Calc_VRAM_Pos_2:
00008808 D86B 0004                  			add.w	4(a3),d4
0000880C                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
0000880C                            		; Also note that this wraps the value to the size of the plane:
0000880C                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
0000880C 0244 00F0                  		andi.w	#$F0,d4
00008810 0245 01F0                  		andi.w	#$1F0,d5
00008814                            		; Transform the adjusted coordinates into a VDP command
00008814 E94C                       		lsl.w	#4,d4
00008816 E44D                       		lsr.w	#2,d5
00008818 D845                       		add.w	d5,d4
0000881A 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
0000881C 4840                       		swap	d0
0000881E 3004                       		move.w	d4,d0
00008820 4E75                       		rts	
00008822                            ; End of function Calc_VRAM_Pos
00008822                            
00008822                            
00008822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008822                            ; not used
00008822                            
00008822                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
00008822                            ; VRAM layout: the only difference is the high bits of the
00008822                            ; plane's VRAM address, which are 10 instead of 11.
00008822                            ; Both the foreground and background are at $C000 and $E000
00008822                            ; respectively, so this one starting at $8000 makes no sense.
00008822                            ; sub_6C3C:
00008822                            Calc_VRAM_Pos_Unknown:
00008822 D86B 0004                  		add.w	4(a3),d4
00008826 DA53                       		add.w	(a3),d5
00008828 0244 00F0                  		andi.w	#$F0,d4
0000882C 0245 01F0                  		andi.w	#$1F0,d5
00008830 E94C                       		lsl.w	#4,d4
00008832 E44D                       		lsr.w	#2,d5
00008834 D845                       		add.w	d5,d4
00008836 7002                       		moveq	#2,d0
00008838 4840                       		swap	d0
0000883A 3004                       		move.w	d4,d0
0000883C 4E75                       		rts	
0000883E                            ; End of function Calc_VRAM_Pos_Unknown
0000883E                            
0000883E                            ; ---------------------------------------------------------------------------
0000883E                            ; Subroutine to	load tiles as soon as the level	appears
0000883E                            ; ---------------------------------------------------------------------------
0000883E                            
0000883E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000883E                            
0000883E                            
0000883E                            LoadTilesFromStart:
0000883E 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008844 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000884A 47F8 F700                  		lea	(v_screenposx).w,a3
0000884E 49F8 A400                  		lea	(v_lvllayout).w,a4
00008852 343C 4000                  		move.w	#$4000,d2
00008856 6100                       		bsr.s	DrawChunks
00008858 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000885C 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008860 343C 6000                  		move.w	#$6000,d2
00008864 4A38 FE10                  			tst.b	(v_zone).w
00008868 6700 0000                  			beq.w	Draw_GHz_Bg
0000886C 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008872 6700 0000                  			beq.w	Draw_Mz_Bg
00008876 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
0000887C 6700 0000                  			beq.w	Draw_SBz_Bg
00008880 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
00008886 6700 0000                  			beq.w	Draw_GHz_Bg
0000888A                            ; End of function LoadTilesFromStart
0000888A                            
0000888A                            
0000888A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000888A                            
0000888A                            
0000888A                            DrawChunks:
0000888A 78F0                       		moveq	#-16,d4
0000888C 7C0F                       		moveq	#((224+16+16)/16)-1,d6
0000888E                            
0000888E                            	@loop:
0000888E 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008892 7A00                       		moveq	#0,d5
00008894 3204                       		move.w	d4,d1
00008896 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
0000889A 3801                       		move.w	d1,d4
0000889C 7A00                       		moveq	#0,d5
0000889E 7C1F                       		moveq	#(512/16)-1,d6
000088A0 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
000088A4 4CDF 0070                  		movem.l	(sp)+,d4-d6
000088A8 0644 0010                  		addi.w	#16,d4
000088AC 51CE FFE0                  		dbf	d6,@loop
000088B0 4E75                       		rts	
000088B2                            ; End of function DrawChunks
000088B2                            
000088B2                            	Draw_GHz_Bg:
000088B2 7800                       			moveq	#0,d4
000088B4 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000088B6                            	locj_7224:			
000088B6 48E7 0E00                  			movem.l	d4-d6,-(sp)
000088BA 41F9 0000 0000             			lea	(locj_724a),a0
000088C0 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000088C4 D044                       			add.w	d4,d0
000088C6 0240 00F0                  			andi.w	#$F0,d0
000088CA 6100 0000                  			bsr.w	locj_72Ba
000088CE 4CDF 0070                  			movem.l	(sp)+,d4-d6
000088D2 0644 0010                  			addi.w	#16,d4
000088D6 51CE FFDE                  			dbf	d6,locj_7224
000088DA 4E75                       			rts
000088DC                            	locj_724a:
000088DC 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
000088EC                            ;-------------------------------------------------------------------------------
000088EC                            	Draw_Mz_Bg:;locj_725a:
000088EC 78F0                       			moveq	#-16,d4
000088EE 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000088F0                            	locj_725E:			
000088F0 48E7 0E00                  			movem.l	d4-d6,-(sp)
000088F4 41FA FC8F                  			lea	(locj_6EF2+1),a0
000088F8 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000088FC 0440 0200                  			subi.w	#$200,d0
00008900 D044                       			add.w	d4,d0
00008902 0240 07F0                  			andi.w	#$7F0,d0
00008906 6100 0000                  			bsr.w	locj_72Ba
0000890A 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000890E 0644 0010                  			addi.w	#16,d4
00008912 51CE FFDC                  			dbf	d6,locj_725E
00008916 4E75                       			rts
00008918                            ;-------------------------------------------------------------------------------
00008918                            	Draw_SBz_Bg:;locj_7288:
00008918 78F0                       			moveq	#-16,d4
0000891A 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000891C                            	locj_728C:			
0000891C 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008920 41FA FB65                  			lea	(locj_6DF4+1),a0
00008924 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008928 D044                       			add.w	d4,d0
0000892A 0240 01F0                  			andi.w	#$1F0,d0
0000892E 6100 0000                  			bsr.w	locj_72Ba
00008932 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008936 0644 0010                  			addi.w	#16,d4
0000893A 51CE FFE0                  			dbf	d6,locj_728C
0000893E 4E75                       			rts
00008940                            ;-------------------------------------------------------------------------------
00008940                            	locj_72B2:
00008940 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
00008948                            	locj_72Ba:
00008948 E848                       			lsr.w	#4,d0
0000894A 1030 0000                  			move.b	(a0,d0.w),d0
0000894E 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
00008952 6700                       			beq.s	locj_72da
00008954 7AF0                       			moveq	#-16,d5
00008956 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000895A 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
0000895E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008962 6100 FD56                  			bsr.w	DrawBlocks_LR
00008966 6000                       			bra.s	locj_72EE
00008968                            	locj_72da:
00008968 7A00                       			moveq	#0,d5
0000896A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000896E 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
00008972 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008976 7C1F                       			moveq	#(512/16)-1,d6
00008978 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
0000897C                            	locj_72EE:
0000897C 4E75                       			rts
0000897E                            
0000897E                            ; ---------------------------------------------------------------------------
0000897E                            ; Subroutine to load basic level data
0000897E                            ; ---------------------------------------------------------------------------
0000897E                            
0000897E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000897E                            
0000897E                            
0000897E                            LevelDataLoad:
0000897E 7000                       		moveq	#0,d0
00008980 1038 FE10                  		move.b	(v_zone).w,d0
00008984 E948                       		lsl.w	#4,d0
00008986 45F9 0000 0000             		lea	(LevelHeaders).l,a2
0000898C 45F2 0000                  		lea	(a2,d0.w),a2
00008990 2F0A                       		move.l	a2,-(sp)
00008992 588A                       		addq.l	#4,a2
00008994 205A                       		movea.l	(a2)+,a0
00008996 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
0000899A 303C 0000                  		move.w	#0,d0
0000899E 6100 8EEC                  		bsr.w	EniDec
000089A2 205A                       		movea.l	(a2)+,a0
000089A4 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
000089AA 6100 905E                  		bsr.w	KosDec
000089AE 6100 0000                  		bsr.w	LevelLayoutLoad
000089B2 301A                       		move.w	(a2)+,d0
000089B4 3012                       		move.w	(a2),d0
000089B6 0240 00FF                  		andi.w	#$FF,d0
000089BA 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
000089C0 6600                       		bne.s	@notSBZ3	; if not, branch
000089C2 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
000089C4                            
000089C4                            	@notSBZ3:
000089C4 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
000089CA 6700                       		beq.s	@isSBZorFZ	; if yes, branch
000089CC 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
000089D2 6600                       		bne.s	@normalpal	; if not, branch
000089D4                            
000089D4                            	@isSBZorFZ:
000089D4 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
000089D6                            
000089D6                            	@normalpal:
000089D6 6100 9A58                  		bsr.w	PalLoad1	; load palette (based on d0)
000089DA 245F                       		movea.l	(sp)+,a2
000089DC 584A                       		addq.w	#4,a2		; read number for 2nd PLC
000089DE 7000                       		moveq	#0,d0
000089E0 1012                       		move.b	(a2),d0
000089E2 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
000089E4 6100 8D08                  		bsr.w	AddPLC		; load pattern load cues
000089E8                            
000089E8                            	@skipPLC:
000089E8 4E75                       		rts	
000089EA                            ; End of function LevelDataLoad
000089EA                            
000089EA                            ; ---------------------------------------------------------------------------
000089EA                            ; Level	layout loading subroutine
000089EA                            ; ---------------------------------------------------------------------------
000089EA                            
000089EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089EA                            
000089EA                            
000089EA                            LevelLayoutLoad:
000089EA 47F8 A400                  		lea	(v_lvllayout).w,a3
000089EE 323C 01FF                  		move.w	#$1FF,d1
000089F2 7000                       		moveq	#0,d0
000089F4                            
000089F4                            LevLoad_ClrRam:
000089F4 26C0                       		move.l	d0,(a3)+
000089F6 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
000089FA                            
000089FA 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
000089FE 7200                       		moveq	#0,d1
00008A00 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008A04 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008A08 7202                       		moveq	#2,d1
00008A0A                            ; End of function LevelLayoutLoad
00008A0A                            
00008A0A                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00008A0A                            
00008A0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A0A                            
00008A0A                            
00008A0A                            LevelLayoutLoad2:
00008A0A 3038 FE10                  		move.w	(v_zone).w,d0
00008A0E ED08                       		lsl.b	#6,d0
00008A10 EA48                       		lsr.w	#5,d0
00008A12 3400                       		move.w	d0,d2
00008A14 D040                       		add.w	d0,d0
00008A16 D042                       		add.w	d2,d0
00008A18 D041                       		add.w	d1,d0
00008A1A 43F9 0000 0000             		lea	(Level_Index).l,a1
00008A20 3031 0000                  		move.w	(a1,d0.w),d0
00008A24 43F1 0000                  		lea	(a1,d0.w),a1
00008A28 7200                       		moveq	#0,d1
00008A2A 3401                       		move.w	d1,d2
00008A2C 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00008A2E 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00008A30                            
00008A30                            LevLoad_NumRows:
00008A30 3001                       		move.w	d1,d0
00008A32 204B                       		movea.l	a3,a0
00008A34                            
00008A34                            LevLoad_Row:
00008A34 10D9                       		move.b	(a1)+,(a0)+
00008A36 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008A3A 47EB 0080                  		lea	$80(a3),a3	; do next row
00008A3E 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00008A42 4E75                       		rts	
00008A44                            ; End of function LevelLayoutLoad2
00008A44                            
00008A44                            		include	"_inc\DynamicLevelEvents.asm"
00008A44                            ; ---------------------------------------------------------------------------
00008A44                            ; Dynamic level events
00008A44                            ; ---------------------------------------------------------------------------
00008A44                            
00008A44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A44                            
00008A44                            
00008A44                            DynamicLevelEvents:
00008A44 7000                       		moveq	#0,d0
00008A46 1038 FE10                  		move.b	(v_zone).w,d0
00008A4A D040                       		add.w	d0,d0
00008A4C 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
00008A50 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
00008A54 7202                       		moveq	#2,d1
00008A56 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008A5A 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
00008A5E 6700                       		beq.s	DLE_NoChg	; if not, branch
00008A60 6400                       		bcc.s	loc_6DAC
00008A62                            
00008A62 4441                       		neg.w	d1
00008A64 3038 F704                  		move.w	(v_screenposy).w,d0
00008A68 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008A6C 6300                       		bls.s	loc_6DA0
00008A6E 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
00008A72 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
00008A78                            
00008A78                            loc_6DA0:
00008A78 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008A7C 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008A82                            
00008A82                            DLE_NoChg:
00008A82 4E75                       		rts	
00008A84                            ; ===========================================================================
00008A84                            
00008A84                            loc_6DAC:
00008A84 3038 F704                  		move.w	(v_screenposy).w,d0
00008A88 5040                       		addq.w	#8,d0
00008A8A B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008A8E 6500                       		bcs.s	loc_6DC4
00008A90 0838 0001 D022             		btst	#1,(v_player+obStatus).w
00008A96 6700                       		beq.s	loc_6DC4
00008A98 D241                       		add.w	d1,d1
00008A9A D241                       		add.w	d1,d1
00008A9C                            
00008A9C                            loc_6DC4:
00008A9C D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008AA0 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008AA6 4E75                       		rts	
00008AA8                            ; End of function DynamicLevelEvents
00008AA8                            
00008AA8                            ; ===========================================================================
00008AA8                            ; ---------------------------------------------------------------------------
00008AA8                            ; Offset index for dynamic level events
00008AA8                            ; ---------------------------------------------------------------------------
00008AA8 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
00008AAC 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008AB0 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008AB4 0000                       		dc.w DLE_Ending-DLE_Index
00008AB6                            ; ===========================================================================
00008AB6                            ; ---------------------------------------------------------------------------
00008AB6                            ; Green	Hill Zone dynamic level events
00008AB6                            ; ---------------------------------------------------------------------------
00008AB6                            
00008AB6                            DLE_GHZ:
00008AB6 7000                       		moveq	#0,d0
00008AB8 1038 FE11                  		move.b	(v_act).w,d0
00008ABC D040                       		add.w	d0,d0
00008ABE 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008AC2 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00008AC6                            ; ===========================================================================
00008AC6 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00008AC8 0000                       		dc.w DLE_GHZ2-DLE_GHZx
00008ACA 0000                       		dc.w DLE_GHZ3-DLE_GHZx
00008ACC                            ; ===========================================================================
00008ACC                            
00008ACC                            DLE_GHZ1:
00008ACC 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008AD2 6600                       		bne.s	gohere
00008AD4 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008ADA 4E75                       		rts
00008ADC                            gohere:
00008ADC 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008AE2 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00008AE8 6500                       		bcs.s	locret_6E08	; if not, branch
00008AEA 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008AF0                            
00008AF0                            locret_6E08:
00008AF0 4E75                       		rts	
00008AF2                            ; ===========================================================================
00008AF2                            
00008AF2                            DLE_GHZ2:
00008AF2 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008AF8 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008AFE 6500                       		bcs.s	locret_6E3A
00008B00 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008B06 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008B0C 6500                       		bcs.s	locret_6E3A
00008B0E 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008B14 6500                       		bcs.s	loc_6E9A
00008B16 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008B1C 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008B22 6400                       		bcc.s	loc_6E8F
00008B24 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008B2A 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008B30                            
00008B30                            loc_6E8F:
00008B30 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008B36 6400                       		bcc.s	loc_6E9A
00008B38                            
00008B38                            locret_6E3A:
00008B38 4E75                       		rts	
00008B3A                            ; ===========================================================================
00008B3A                            
00008B3A                            loc_6E9A:
00008B3A 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B40 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B44 4E75                       		rts		
00008B46                            ; ===========================================================================
00008B46                            
00008B46                            DLE_GHZ3:
00008B46 7000                       		moveq	#0,d0
00008B48 1038 F742                  		move.b	(v_dle_routine).w,d0
00008B4C 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008B50 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008B54                            ; ===========================================================================
00008B54 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008B56 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008B58 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008B5A                            ; ===========================================================================
00008B5A                            
00008B5A                            DLE_GHZ3main:
00008B5A 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B60 0C78 0400 F700             		cmpi.w	#$400,(v_screenposx).w
00008B66 6500                       		bcs.s	locret_6E96
00008B68 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B6E 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008B74 6500                       		bcs.s	locret_6E96
00008B76 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008B7C 6500                       		bcs.s	loc_6E98
00008B7E 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B84 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008B8A 6400                       		bcc.s	loc_6E8E
00008B8C 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B92 31FC 0300 F72E             		move.w	#$300,(v_limitbtm2).w
00008B98                            
00008B98                            loc_6E8E:
00008B98 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008B9E 6400                       		bcc.s	loc_6E98
00008BA0                            
00008BA0                            locret_6E96:
00008BA0 4E75                       		rts	
00008BA2                            ; ===========================================================================
00008BA2                            
00008BA2                            loc_6E98:
00008BA2 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008BA8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BAC 4E75                       		rts	
00008BAE                            ; ===========================================================================
00008BAE                            
00008BAE                            DLE_GHZ3boss:
00008BAE 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008BB4 6400                       		bcc.s	loc_6EB0
00008BB6 5538 F742                  		subq.b	#2,(v_dle_routine).w
00008BBA                            
00008BBA                            loc_6EB0:
00008BBA 0C78 1360 F700             		cmpi.w	#$1360,(v_screenposx).w
00008BC0 6500                       		bcs.s	locret_6EE8
00008BC2 6100 0000                  		bsr.w	FindFreeObj
00008BC6 6600                       		bne.s	loc_6ED0
00008BC8 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
00008BCC 337C 1460 0008             		move.w	#$1460,obX(a1)
00008BD2 337C 0280 000C             		move.w	#$280,obY(a1)
00008BD8                            
00008BD8                            loc_6ED0:
00008BE0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008BE6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BEA 7000                       		moveq	#plcid_Egg,d0
00008BEC 6000 8B00                  		bra.w	AddPLC		; load boss patterns
00008BF0                            		
00008BF0                            ; ===========================================================================
00008BF0                            
00008BF0                            locret_6EE8:
00008BF0 4E75                       		rts	
00008BF2                            ; ===========================================================================
00008BF2                            
00008BF2                            DLE_GHZ3end:
00008BF2 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008BF8 337C 0280 000C             		move.w	#$280,obY(a1)
00008BFE 4E75                       		rts	
00008C00                            ; ===========================================================================
00008C00                            ; ---------------------------------------------------------------------------
00008C00                            ; Labyrinth Zone dynamic level events
00008C00                            ; ---------------------------------------------------------------------------
00008C00                            
00008C00                            DLE_LZ:
00008C00 7000                       		moveq	#0,d0
00008C02 1038 FE11                  		move.b	(v_act).w,d0
00008C06 D040                       		add.w	d0,d0
00008C08 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008C0C 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008C10                            ; ===========================================================================
00008C10 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008C12 0000                       		dc.w DLE_LZ12-DLE_LZx
00008C14 0000                       		dc.w DLE_LZ3-DLE_LZx
00008C16 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008C18                            ; ===========================================================================
00008C18                            
00008C18                            DLE_LZ12:
00008C18 4E75                       		rts	
00008C1A                            ; ===========================================================================
00008C1A                            
00008C1A                            DLE_LZ3:
00008C1A 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008C1E 6700                       		beq.s	loc_6F28	; if not, branch
00008C20 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008C24 0C11 0007                  		cmpi.b	#7,(a1)
00008C28 6700                       		beq.s	loc_6F28
00008C2A 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008C36                            
00008C36                            loc_6F28:
00008C36 4A38 F742                  		tst.b	(v_dle_routine).w
00008C3A 6600                       		bne.s	locret_6F64
00008C3C 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008C42 6500                       		bcs.s	locret_6F62
00008C44 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008C4A 6400                       		bcc.s	locret_6F62
00008C4C 6100 0000                  		bsr.w	FindFreeObj
00008C50 6600                       		bne.s	loc_6F4A
00008C52 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
00008C56                            
00008C56                            loc_6F4A:
00008C5E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008C64 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C68 7000                       		moveq	#plcid_Boss,d0
00008C6A 6000 8A82                  		bra.w	AddPLC		; load boss patterns
00008C6E                            ; ===========================================================================
00008C6E                            
00008C6E                            locret_6F62:
00008C6E 4E75                       		rts	
00008C70                            ; ===========================================================================
00008C70                            
00008C70                            locret_6F64:
00008C70 4E75                       		rts	
00008C72                            ; ===========================================================================
00008C72                            
00008C72                            DLE_SBZ3:
00008C72 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008C78 6500                       		bcs.s	locret_6F8C
00008C7A 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008C80 6400                       		bcc.s	locret_6F8C	; if not, branch
00008C82 4238 FE30                  		clr.b	(v_lastlamp).w
00008C86 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008C8C 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008C92 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008C98                            
00008C98                            locret_6F8C:
00008C98 4E75                       		rts	
00008C9A                            ; ===========================================================================
00008C9A                            ; ---------------------------------------------------------------------------
00008C9A                            ; Marble Zone dynamic level events
00008C9A                            ; ---------------------------------------------------------------------------
00008C9A                            
00008C9A                            DLE_MZ:
00008C9A 7000                       		moveq	#0,d0
00008C9C 1038 FE11                  		move.b	(v_act).w,d0
00008CA0 D040                       		add.w	d0,d0
00008CA2 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008CA6 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008CAA                            ; ===========================================================================
00008CAA 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008CAC 0000                       		dc.w DLE_MZ2-DLE_MZx
00008CAE 0000                       		dc.w DLE_MZ3-DLE_MZx
00008CB0                            ; ===========================================================================
00008CB0                            
00008CB0                            DLE_MZ1:
00008CB0 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008CB6 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008CBC 6500                       		bcs.s	locret_6FE8
00008CBE 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008CC4                            
00008CC4                            locret_6FE8:
00008CC4 4E75                       		rts	
00008CC6                            
00008CC6                            ; ===========================================================================
00008CC6                            
00008CC6                            DLE_MZ2:
00008CC6 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008CCC 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008CD2 6500                       		bcs.s	locret_6FE9
00008CD4 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008CDA                            		
00008CDA                            locret_6FE9:
00008CDA 4E75                       		rts	
00008CDC                            ; ===========================================================================
00008CDC                            
00008CDC                            DLE_MZ3:
00008CDC 7000                       		moveq	#0,d0
00008CDE 1038 F742                  		move.b	(v_dle_routine).w,d0
00008CE2 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008CE6 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008CEA                            ; ===========================================================================
00008CEA 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008CEC 0000                       		dc.w DLE_MZ3end-off_7098
00008CEE                            ; ===========================================================================
00008CEE                            
00008CEE                            DLE_MZ3boss:
00008CEE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008CF4 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008CFA 6500                       		bcs.s	locret_70E8
00008CFC 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008D02 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008D08 6500                       		bcs.s	locret_70E8
00008D0A 6100 0000                  		bsr.w	FindFreeObj
00008D0E 6600                       		bne.s	loc_70D0
00008D10 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008D14 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008D1A 337C 022C 000C             		move.w	#$22C,obY(a1)
00008D20                            
00008D20                            loc_70D0:
00008D28 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D2E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D32 7000                       		moveq	#plcid_Boss,d0
00008D34 6000 89B8                  		bra.w	AddPLC		; load boss patterns
00008D38                            ; ===========================================================================
00008D38                            
00008D38                            locret_70E8:
00008D38 4E75                       		rts	
00008D3A                            ; ===========================================================================
00008D3A                            
00008D3A                            DLE_MZ3end:
00008D3A 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008D40 4E75                       		rts	
00008D42                            		
00008D42                            ; ===========================================================================
00008D42                            ; ---------------------------------------------------------------------------
00008D42                            ; Star Light Zone dynamic level events
00008D42                            ; ---------------------------------------------------------------------------
00008D42                            
00008D42                            DLE_SLZ:
00008D42 7000                       		moveq	#0,d0
00008D44 1038 FE11                  		move.b	(v_act).w,d0
00008D48 D040                       		add.w	d0,d0
00008D4A 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008D4E 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008D52                            ; ===========================================================================
00008D52 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008D54 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008D56 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008D58                            ; ===========================================================================
00008D58                            
00008D58                            DLE_SLZ12:
00008D58 4E75                       		rts	
00008D5A                            ; ===========================================================================
00008D5A                            
00008D5A                            DLE_SLZ3:
00008D5A 7000                       		moveq	#0,d0
00008D5C 1038 F742                  		move.b	(v_dle_routine).w,d0
00008D60 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008D64 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008D68                            ; ===========================================================================
00008D68 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008D6A 0000                       		dc.w DLE_SLZ3boss-off_7118
00008D6C 0000                       		dc.w DLE_SLZ3end-off_7118
00008D6E                            ; ===========================================================================
00008D6E                            
00008D6E                            DLE_SLZ3main:
00008D6E 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008D74 6500                       		bcs.s	locret_7130
00008D76 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008D7C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D80                            
00008D80                            locret_7130:
00008D80 4E75                       		rts	
00008D82                            ; ===========================================================================
00008D82                            
00008D82                            DLE_SLZ3boss:
00008D82 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008D88 6500                       		bcs.s	locret_715C
00008D8A 6100 0000                  		bsr.w	FindFreeObj
00008D8E 6600                       		bne.s	loc_7144
00008D90 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008D94                            
00008D94                            loc_7144:
00008D9C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008DA2 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008DA6 7000                       		moveq	#plcid_Boss,d0
00008DA8 6000 8944                  		bra.w	AddPLC		; load boss patterns
00008DAC                            ; ===========================================================================
00008DAC                            
00008DAC                            locret_715C:
00008DAC 4E75                       		rts	
00008DAE                            ; ===========================================================================
00008DAE                            
00008DAE                            DLE_SLZ3end:
00008DAE 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008DB4 4E75                       		rts
00008DB6 4E75                       		rts
00008DB8                            ; ===========================================================================
00008DB8                            ; ---------------------------------------------------------------------------
00008DB8                            ; Spring Yard Zone dynamic level events
00008DB8                            ; ---------------------------------------------------------------------------
00008DB8                            
00008DB8                            DLE_SYZ:
00008DB8 7000                       		moveq	#0,d0
00008DBA 1038 FE11                  		move.b	(v_act).w,d0
00008DBE D040                       		add.w	d0,d0
00008DC0 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008DC4 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008DC8                            ; ===========================================================================
00008DC8 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008DCA 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008DCC 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008DCE                            ; ===========================================================================
00008DCE                            
00008DCE                            DLE_SYZ1:
00008DCE 4E75                       		rts	
00008DD0                            ; ===========================================================================
00008DD0                            
00008DD0                            DLE_SYZ2:
00008DD0 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008DD6 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008DDC 6500                       		bcs.s	locret_71A2
00008DDE 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008DE4 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008DEA 6500                       		bcs.s	locret_71A2
00008DEC 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008DF2                            
00008DF2                            locret_71A2:
00008DF2 4E75                       		rts	
00008DF4                            ; ===========================================================================
00008DF4                            
00008DF4                            DLE_SYZ3:
00008DF4 7000                       		moveq	#0,d0
00008DF6 1038 F742                  		move.b	(v_dle_routine).w,d0
00008DFA 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008DFE 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008E02                            ; ===========================================================================
00008E02 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008E04 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008E06 0000                       		dc.w DLE_SYZ3end-off_71B2
00008E08                            ; ===========================================================================
00008E08                            
00008E08                            DLE_SYZ3main:
00008E08 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008E0E 6500                       		bcs.s	locret_71CE
00008E10 6100 0000                  		bsr.w	FindFreeObj
00008E14 6600                       		bne.s	locret_71CE
00008E16 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008E1A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E1E                            
00008E1E                            locret_71CE:
00008E1E 4E75                       		rts	
00008E20                            ; ===========================================================================
00008E20                            
00008E20                            DLE_SYZ3boss:
00008E20 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008E26 6500                       		bcs.s	locret_7200
00008E28 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008E2E 6100 0000                  		bsr.w	FindFreeObj
00008E32 6600                       		bne.s	loc_71EC
00008E34 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008E38 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E3C                            
00008E3C                            loc_71EC:
00008E44 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008E4A 7000                       		moveq	#plcid_Boss,d0
00008E4C 6000 88A0                  		bra.w	AddPLC		; load boss patterns
00008E50                            ; ===========================================================================
00008E50                            
00008E50                            locret_7200:
00008E50 4E75                       		rts	
00008E52                            ; ===========================================================================
00008E52                            
00008E52                            DLE_SYZ3end:
00008E52 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008E58 4E75                       		rts	
00008E5A                            ; ===========================================================================
00008E5A                            ; ---------------------------------------------------------------------------
00008E5A                            ; Scrap	Brain Zone dynamic level events
00008E5A                            ; ---------------------------------------------------------------------------
00008E5A                            
00008E5A                            DLE_SBZ:
00008E5A 7000                       		moveq	#0,d0
00008E5C 1038 FE11                  		move.b	(v_act).w,d0
00008E60 D040                       		add.w	d0,d0
00008E62 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008E66 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008E6A                            ; ===========================================================================
00008E6A 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008E6C 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008E6E 0000                       		dc.w DLE_FZ-DLE_SBZx
00008E70                            ; ===========================================================================
00008E70                            
00008E70                            DLE_SBZ1:
00008E70 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008E76 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008E7C 6500                       		bcs.s	locret_7242
00008E7E 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008E84 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008E8A 6500                       		bcs.s	locret_7242
00008E8C 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008E92                            
00008E92                            locret_7242:
00008E92 4E75                       		rts	
00008E94                            ; ===========================================================================
00008E94                            
00008E94                            DLE_SBZ2:
00008E94 7000                       		moveq	#0,d0
00008E96 1038 F742                  		move.b	(v_dle_routine).w,d0
00008E9A 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008E9E 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008EA2                            ; ===========================================================================
00008EA2 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008EA4 0000                       		dc.w DLE_SBZ2boss-off_7252
00008EA6 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008EA8 0000                       		dc.w DLE_SBZ2end-off_7252
00008EAA                            ; ===========================================================================
00008EAA                            
00008EAA                            DLE_SBZ2main:
00008EAA 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008EB0 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008EB6 6500                       		bcs.s	locret_727A
00008EB8 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008EBE 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008EC4 6500                       		bcs.s	locret_727A
00008EC6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008ECA                            
00008ECA                            locret_727A:
00008ECA 4E75                       		rts	
00008ECC                            ; ===========================================================================
00008ECC                            
00008ECC                            DLE_SBZ2boss:
00008ECC 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008ED2 6500                       		bcs.s	locret_7298
00008ED4 6100 0000                  		bsr.w	FindFreeObj
00008ED8 6600                       		bne.s	locret_7298
00008EDA 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008EDE 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EE2 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008EE4 6000 8808                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008EE8                            ; ===========================================================================
00008EE8                            
00008EE8                            locret_7298:
00008EE8 4E75                       		rts	
00008EEA                            ; ===========================================================================
00008EEA                            
00008EEA                            DLE_SBZ2boss2:
00008EEA 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008EF0 6500                       		bcs.s	loc_72B6
00008EF2 6100 0000                  		bsr.w	FindFreeObj
00008EF6 6600                       		bne.s	loc_72B0
00008EF8 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008EFC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F00                            
00008F00                            loc_72B0:
00008F00 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008F06                            
00008F06                            loc_72B6:
00008F06 6000                       		bra.s	loc_72C2
00008F08                            ; ===========================================================================
00008F08                            
00008F08                            DLE_SBZ2end:
00008F08 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008F0E 6500                       		bcs.s	loc_72C2
00008F10 4E75                       		rts	
00008F12                            ; ===========================================================================
00008F12                            
00008F12                            loc_72C2:
00008F12 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008F18 4E75                       		rts	
00008F1A                            ; ===========================================================================
00008F1A                            
00008F1A                            DLE_FZ:
00008F1A 7000                       		moveq	#0,d0
00008F1C 1038 F742                  		move.b	(v_dle_routine).w,d0
00008F20 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008F24 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008F28                            ; ===========================================================================
00008F28 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008F2C 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008F30 0000                       		dc.w DLE_FZend2-off_72D8
00008F32                            ; ===========================================================================
00008F32                            
00008F32                            DLE_FZmain:
00008F32 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008F38 6500                       		bcs.s	loc_72F4
00008F3A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F3E 7000                       		moveq	#plcid_FZBoss,d0
00008F40 6100 87AC                  		bsr.w	AddPLC		; load FZ boss patterns
00008F44                            
00008F44                            loc_72F4:
00008F44 60CC                       		bra.s	loc_72C2
00008F46                            ; ===========================================================================
00008F46                            
00008F46                            DLE_FZboss:
00008F46 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008F4C 6500                       		bcs.s	loc_7312
00008F4E 6100 0000                  		bsr.w	FindFreeObj
00008F52 6600                       		bne.s	loc_7312
00008F54 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008F58 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F5C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008F62                            
00008F62                            loc_7312:
00008F62 60AE                       		bra.s	loc_72C2
00008F64                            ; ===========================================================================
00008F64                            
00008F64                            DLE_FZend:
00008F64 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008F6A 6500                       		bcs.s	loc_7320
00008F6C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F70                            
00008F70                            loc_7320:
00008F70 60A0                       		bra.s	loc_72C2
00008F72                            ; ===========================================================================
00008F72                            
00008F72                            locret_7322:
00008F72 4E75                       		rts	
00008F74                            ; ===========================================================================
00008F74                            
00008F74                            DLE_FZend2:
00008F74 609C                       		bra.s	loc_72C2
00008F76                            ; ===========================================================================
00008F76                            ; ---------------------------------------------------------------------------
00008F76                            ; Ending sequence dynamic level events (empty)
00008F76                            ; ---------------------------------------------------------------------------
00008F76                            
00008F76                            DLE_Ending:
00008F76 4E75                       		rts	
00008F76 4E75                       		rts	
00008F78                            
00008F78                            		include	"_incObj\11 Bridge (part 1).asm"
00008F78                            ; ---------------------------------------------------------------------------
00008F78                            ; Object 11 - GHZ bridge
00008F78                            ; ---------------------------------------------------------------------------
00008F78                            
00008F78                            Bridge:
00008F78 7000                       		moveq	#0,d0
00008F7A 1028 0024                  		move.b	obRoutine(a0),d0
00008F7E 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008F82 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008F86                            ; ===========================================================================
00008F86 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008F8A 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008F8E 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008F92                            ; ===========================================================================
00008F92                            
00008F92                            Bri_Main:	; Routine 0
00008F92 5428 0024                  		addq.b	#2,obRoutine(a0)
00008F96 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008F9E 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008FA4 117C 0004 0001             		move.b	#4,obRender(a0)
00008FAA 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008FB0 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008FB6 3428 000C                  		move.w	obY(a0),d2
00008FBA 3628 0008                  		move.w	obX(a0),d3
00008FBE 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008FC0 45E8 0028                  		lea	obSubtype(a0),a2
00008FC4 7200                       		moveq	#0,d1
00008FC6 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008FC8 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008FCC 3001                       		move.w	d1,d0
00008FCE E248                       		lsr.w	#1,d0
00008FD0 E948                       		lsl.w	#4,d0
00008FD2 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008FD4 5501                       		subq.b	#2,d1
00008FD6 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008FD8                            
00008FD8                            @buildloop:
00008FD8 6100 0000                  		bsr.w	FindFreeObj
00008FDC 6600                       		bne.s	Bri_Action
00008FDE 5228 0028                  		addq.b	#1,obSubtype(a0)
00008FE2 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008FE6 6600                       		bne.s	@notleftmost	; if not, branch
00008FE8                            
00008FE8 0643 0010                  		addi.w	#$10,d3
00008FEC 3142 000C                  		move.w	d2,obY(a0)
00008FF0 3142 003C                  		move.w	d2,$3C(a0)
00008FF4 3A08                       		move.w	a0,d5
00008FF6 0445 D000                  		subi.w	#$D000,d5
00008FFA EC4D                       		lsr.w	#6,d5
00008FFC 0245 007F                  		andi.w	#$7F,d5
00009000 14C5                       		move.b	d5,(a2)+
00009002 5228 0028                  		addq.b	#1,obSubtype(a0)
00009006                            
00009006                            	@notleftmost:
00009006 3A09                       		move.w	a1,d5
00009008 0445 D000                  		subi.w	#$D000,d5
0000900C EC4D                       		lsr.w	#6,d5
0000900E 0245 007F                  		andi.w	#$7F,d5
00009012 14C5                       		move.b	d5,(a2)+
00009014 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0000901A 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
0000901C 3342 000C                  		move.w	d2,obY(a1)
00009020 3342 003C                  		move.w	d2,$3C(a1)
00009024 3343 0008                  		move.w	d3,obX(a1)
00009028 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00009030 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00009036 137C 0004 0001             		move.b	#4,obRender(a1)
0000903C 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009042 137C 0008 0014             		move.b	#8,obActWid(a1)
00009048 0643 0010                  		addi.w	#$10,d3
0000904C 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00009050                            
00009050                            Bri_Action:	; Routine 2
00009050 6100                       		bsr.s	Bri_Solid
00009052 4A28 003E                  		tst.b	$3E(a0)
00009056 6700                       		beq.s	@display
00009058 5928 003E                  		subq.b	#4,$3E(a0)
0000905C 6100 0000                  		bsr.w	Bri_Bend
00009060                            
00009060                            	@display:
00009060 6100 0000                  		bsr.w	DisplaySprite
00009064 6000 0000                  		bra.w	Bri_ChkDel
00009068                            
00009068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009068                            
00009068                            
00009068                            Bri_Solid:
00009068 7200                       		moveq	#0,d1
0000906A 1228 0028                  		move.b	obSubtype(a0),d1
0000906E E749                       		lsl.w	#3,d1
00009070 3401                       		move.w	d1,d2
00009072 5041                       		addq.w	#8,d1
00009074 D442                       		add.w	d2,d2
00009076 43F8 D000                  		lea	(v_player).w,a1
0000907A 4A69 0012                  		tst.w	obVelY(a1)
0000907E 6B00 0000                  		bmi.w	Plat_Exit
00009082 3029 0008                  		move.w	obX(a1),d0
00009086 9068 0008                  		sub.w	obX(a0),d0
0000908A D041                       		add.w	d1,d0
0000908C 6B00 0000                  		bmi.w	Plat_Exit
00009090 B042                       		cmp.w	d2,d0
00009092 6400 0000                  		bcc.w	Plat_Exit
00009096 6000                       		bra.s	Plat_NoXCheck
00009098                            ; End of function Bri_Solid
00009098                            ; End of function Bri_Solid
00009098                            
00009098                            ; ---------------------------------------------------------------------------
00009098                            ; Platform subroutine
00009098                            ; ---------------------------------------------------------------------------
00009098                            
00009098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009098                            
00009098                            PlatformObject:
00009098 43F8 D000                  		lea	(v_player).w,a1
0000909C 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
000090A0 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
000090A4                            
000090A4                            ;		perform x-axis range check
000090A4 3029 0008                  		move.w	obX(a1),d0
000090A8 9068 0008                  		sub.w	obX(a0),d0
000090AC D041                       		add.w	d1,d0
000090AE 6B00 0000                  		bmi.w	Plat_Exit
000090B2 D241                       		add.w	d1,d1
000090B4 B041                       		cmp.w	d1,d0
000090B6 6400 0000                  		bhs.w	Plat_Exit
000090BA                            
000090BA                            	Plat_NoXCheck:
000090BA 3028 000C                  		move.w	obY(a0),d0
000090BE 5140                       		subq.w	#8,d0
000090C0                            
000090C0                            Platform3:
000090C0                            ;		perform y-axis range check
000090C0 3429 000C                  		move.w	obY(a1),d2
000090C4 1229 0016                  		move.b	obHeight(a1),d1
000090C8 4881                       		ext.w	d1
000090CA D242                       		add.w	d2,d1
000090CC 5841                       		addq.w	#4,d1
000090CE 9041                       		sub.w	d1,d0
000090D0 6200 0000                  		bhi.w	Plat_Exit
000090D4 0C40 FFF0                  		cmpi.w	#-$10,d0
000090D8 6500 0000                  		blo.w	Plat_Exit
000090DC                            
000090DC 4A38 F7C8                  		tst.b	(f_lockmulti).w
000090E0 6B00 0000                  		bmi.w	Plat_Exit
000090E4 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000090EA 6400 0000                  		bhs.w	Plat_Exit
000090EE D440                       		add.w	d0,d2
000090F0 5642                       		addq.w	#3,d2
000090F2 3342 000C                  		move.w	d2,obY(a1)
000090F6 5428 0024                  		addq.b	#2,obRoutine(a0)
000090FA                            
000090FA                            loc_74AE:
000090FA 0829 0003 0022             		btst	#3,obStatus(a1)
00009100 6700                       		beq.s	loc_74DC
00009102 7000                       		moveq	#0,d0
00009104 1029 003D                  		move.b	$3D(a1),d0
00009108 ED48                       		lsl.w	#6,d0
0000910A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009110 2440                       		movea.l	d0,a2
00009112 08AA 0003 0022             		bclr	#3,obStatus(a2)
00009118 422A 0025                  		clr.b	ob2ndRout(a2)
0000911C 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00009122 6600                       		bne.s	loc_74DC
00009124 552A 0024                  		subq.b	#2,obRoutine(a2)
00009128                            
00009128                            loc_74DC:
00009128 3008                       		move.w	a0,d0
0000912A 0440 D000                  		subi.w	#-$3000,d0
0000912E EC48                       		lsr.w	#6,d0
00009130 0240 007F                  		andi.w	#$7F,d0
00009134 1340 003D                  		move.b	d0,$3D(a1)
00009138 137C 0000 0026             		move.b	#0,obAngle(a1)
0000913E 337C 0000 0012             		move.w	#0,obVelY(a1)
00009144 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000914A 0829 0001 0022             		btst	#1,obStatus(a1)
00009150 6700                       		beq.s	loc_7512
00009152 2F08                       		move.l	a0,-(sp)
00009154 2049                       		movea.l	a1,a0
00009156 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
0000915C 205F                       		movea.l	(sp)+,a0
0000915E                            
0000915E                            loc_7512:
0000915E 08E9 0003 0022             		bset	#3,obStatus(a1)
00009164 08E8 0003 0022             		bset	#3,obStatus(a0)
0000916A                            
0000916A                            Plat_Exit:
0000916A 4E75                       		rts	
0000916C                            ; End of function PlatformObject
0000916C                            
0000916C                            ; ---------------------------------------------------------------------------
0000916C                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000916C                            ; ---------------------------------------------------------------------------
0000916C                            
0000916C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000916C                            
0000916C                            
0000916C                            SlopeObject:
0000916C 43F8 D000                  		lea	(v_player).w,a1
00009170 4A69 0012                  		tst.w	obVelY(a1)
00009174 6B00 FFF4                  		bmi.w	Plat_Exit
00009178 3029 0008                  		move.w	obX(a1),d0
0000917C 9068 0008                  		sub.w	obX(a0),d0
00009180 D041                       		add.w	d1,d0
00009182 6BE6                       		bmi.s	Plat_Exit
00009184 D241                       		add.w	d1,d1
00009186 B041                       		cmp.w	d1,d0
00009188 64E0                       		bhs.s	Plat_Exit
0000918A 0828 0000 0001             		btst	#0,obRender(a0)
00009190 6700                       		beq.s	loc_754A
00009192 4640                       		not.w	d0
00009194 D041                       		add.w	d1,d0
00009196                            
00009196                            loc_754A:
00009196 E248                       		lsr.w	#1,d0
00009198 7600                       		moveq	#0,d3
0000919A 1632 0000                  		move.b	(a2,d0.w),d3
0000919E 3028 000C                  		move.w	obY(a0),d0
000091A2 9043                       		sub.w	d3,d0
000091A4 6000 FF1A                  		bra.w	Platform3
000091A8                            ; End of function SlopeObject
000091A8                            
000091A8                            
000091A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091A8                            
000091A8                            
000091A8                            Swing_Solid:
000091A8 43F8 D000                  		lea	(v_player).w,a1
000091AC 4A69 0012                  		tst.w	obVelY(a1)
000091B0 6B00 FFB8                  		bmi.w	Plat_Exit
000091B4 3029 0008                  		move.w	obX(a1),d0
000091B8 9068 0008                  		sub.w	obX(a0),d0
000091BC D041                       		add.w	d1,d0
000091BE 6B00 FFAA                  		bmi.w	Plat_Exit
000091C2 D241                       		add.w	d1,d1
000091C4 B041                       		cmp.w	d1,d0
000091C6 6400 FFA2                  		bhs.w	Plat_Exit
000091CA 3028 000C                  		move.w	obY(a0),d0
000091CE 9043                       		sub.w	d3,d0
000091D0 6000 FEEE                  		bra.w	Platform3
000091D4                            ; End of function Obj15_Solid
000091D4                            
000091D4                            ; ===========================================================================
000091D4                            
000091D4                            		include	"_incObj\11 Bridge (part 2).asm"
000091D4                            
000091D4                            Bri_Platform:	; Routine 4
000091D4 6100                       		bsr.s	Bri_WalkOff
000091D6 6100 0000                  		bsr.w	DisplaySprite
000091DA 6000 0000                  		bra.w	Bri_ChkDel
000091DE                            
000091DE                            ; ---------------------------------------------------------------------------
000091DE                            ; Subroutine allowing Sonic to walk off a bridge
000091DE                            ; ---------------------------------------------------------------------------
000091DE                            
000091DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091DE                            
000091DE                            
000091DE                            Bri_WalkOff:
000091DE 7200                       		moveq	#0,d1
000091E0 1228 0028                  		move.b	obSubtype(a0),d1
000091E4 E749                       		lsl.w	#3,d1
000091E6 3401                       		move.w	d1,d2
000091E8 5041                       		addq.w	#8,d1
000091EA 6100                       		bsr.s	ExitPlatform2
000091EC 6400                       		bcc.s	locret_75BE
000091EE E848                       		lsr.w	#4,d0
000091F0 1140 003F                  		move.b	d0,$3F(a0)
000091F4 1028 003E                  		move.b	$3E(a0),d0
000091F8 0C00 0040                  		cmpi.b	#$40,d0
000091FC 6700                       		beq.s	loc_75B6
000091FE 5828 003E                  		addq.b	#4,$3E(a0)
00009202                            
00009202                            loc_75B6:
00009202 6100 0000                  		bsr.w	Bri_Bend
00009206 6100 0000                  		bsr.w	Bri_MoveSonic
0000920A                            
0000920A                            locret_75BE:
0000920A 4E75                       		rts	
0000920C                            ; End of function Bri_WalkOff
0000920C                            ; End of function Bri_WalkOff
0000920C                            
0000920C                            ; ---------------------------------------------------------------------------
0000920C                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000920C                            ; ---------------------------------------------------------------------------
0000920C                            
0000920C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000920C                            
0000920C                            
0000920C                            ExitPlatform:
0000920C 3401                       		move.w	d1,d2
0000920E                            
0000920E                            ExitPlatform2:
0000920E D442                       		add.w	d2,d2
00009210 43F8 D000                  		lea	(v_player).w,a1
00009214 0829 0001 0022             		btst	#1,obStatus(a1)
0000921A 6600                       		bne.s	loc_75E0
0000921C 3029 0008                  		move.w	obX(a1),d0
00009220 9068 0008                  		sub.w	obX(a0),d0
00009224 D041                       		add.w	d1,d0
00009226 6B00                       		bmi.s	loc_75E0
00009228 B042                       		cmp.w	d2,d0
0000922A 6500                       		blo.s	locret_75F2
0000922C                            
0000922C                            loc_75E0:
0000922C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009232 117C 0002 0024             		move.b	#2,obRoutine(a0)
00009238 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000923E                            
0000923E                            locret_75F2:
0000923E 4E75                       		rts	
00009240                            ; End of function ExitPlatform
00009240                            
00009240                            		include	"_incObj\11 Bridge (part 3).asm"
00009240                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009240                            
00009240                            
00009240                            Bri_MoveSonic:
00009240 7000                       		moveq	#0,d0
00009242 1028 003F                  		move.b	$3F(a0),d0
00009246 1030 0029                  		move.b	$29(a0,d0.w),d0
0000924A ED48                       		lsl.w	#6,d0
0000924C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009252 2440                       		movea.l	d0,a2
00009254 43F8 D000                  		lea	(v_player).w,a1
00009258 302A 000C                  		move.w	obY(a2),d0
0000925C 5140                       		subq.w	#8,d0
0000925E 7200                       		moveq	#0,d1
00009260 1229 0016                  		move.b	obHeight(a1),d1
00009264 9041                       		sub.w	d1,d0
00009266 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
0000926A 4E75                       		rts	
0000926C                            ; End of function Bri_MoveSonic
0000926C                            
0000926C                            
0000926C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000926C                            
0000926C                            
0000926C                            Bri_Bend:
0000926C 1028 003E                  		move.b	$3E(a0),d0
00009270 6100 A7C4                  		bsr.w	CalcSine
00009274 3800                       		move.w	d0,d4
00009276 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000927C 7000                       		moveq	#0,d0
0000927E 1028 0028                  		move.b	obSubtype(a0),d0
00009282 E948                       		lsl.w	#4,d0
00009284 7600                       		moveq	#0,d3
00009286 1628 003F                  		move.b	$3F(a0),d3
0000928A 3403                       		move.w	d3,d2
0000928C D640                       		add.w	d0,d3
0000928E 7A00                       		moveq	#0,d5
00009290 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009296 1A35 3000                  		move.b	(a5,d3.w),d5
0000929A 0243 000F                  		andi.w	#$F,d3
0000929E E94B                       		lsl.w	#4,d3
000092A0 47F4 3000                  		lea	(a4,d3.w),a3
000092A4 45E8 0029                  		lea	$29(a0),a2
000092A8                            
000092A8                            loc_765C:
000092A8 7000                       		moveq	#0,d0
000092AA 101A                       		move.b	(a2)+,d0
000092AC ED48                       		lsl.w	#6,d0
000092AE 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092B4 2240                       		movea.l	d0,a1
000092B6 7000                       		moveq	#0,d0
000092B8 101B                       		move.b	(a3)+,d0
000092BA 5240                       		addq.w	#1,d0
000092BC C0C5                       		mulu.w	d5,d0
000092BE C0C4                       		mulu.w	d4,d0
000092C0 4840                       		swap	d0
000092C2 D069 003C                  		add.w	$3C(a1),d0
000092C6 3340 000C                  		move.w	d0,obY(a1)
000092CA 51CA FFDC                  		dbf	d2,loc_765C
000092CE 7000                       		moveq	#0,d0
000092D0 1028 0028                  		move.b	obSubtype(a0),d0
000092D4 7600                       		moveq	#0,d3
000092D6 1628 003F                  		move.b	$3F(a0),d3
000092DA 5203                       		addq.b	#1,d3
000092DC 9600                       		sub.b	d0,d3
000092DE 4403                       		neg.b	d3
000092E0 6B00                       		bmi.s	locret_76CA
000092E2 3403                       		move.w	d3,d2
000092E4 E94B                       		lsl.w	#4,d3
000092E6 47F4 3000                  		lea	(a4,d3.w),a3
000092EA D6C2                       		adda.w	d2,a3
000092EC 5342                       		subq.w	#1,d2
000092EE 6500                       		bcs.s	locret_76CA
000092F0                            
000092F0                            loc_76A4:
000092F0 7000                       		moveq	#0,d0
000092F2 101A                       		move.b	(a2)+,d0
000092F4 ED48                       		lsl.w	#6,d0
000092F6 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092FC 2240                       		movea.l	d0,a1
000092FE 7000                       		moveq	#0,d0
00009300 1023                       		move.b	-(a3),d0
00009302 5240                       		addq.w	#1,d0
00009304 C0C5                       		mulu.w	d5,d0
00009306 C0C4                       		mulu.w	d4,d0
00009308 4840                       		swap	d0
0000930A D069 003C                  		add.w	$3C(a1),d0
0000930E 3340 000C                  		move.w	d0,obY(a1)
00009312 51CA FFDC                  		dbf	d2,loc_76A4
00009316                            
00009316                            locret_76CA:
00009316 4E75                       		rts	
00009318                            ; End of function Bri_Bend
00009318                            
00009318                            ; ===========================================================================
00009318                            ; ---------------------------------------------------------------------------
00009318                            ; GHZ bridge-bending data
00009318                            ; (Defines how the bridge bends	when Sonic walks across	it)
00009318                            ; ---------------------------------------------------------------------------
00009318                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00009428                            		even
00009428                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
00009528                            		even
00009528                            
00009528                            ; ===========================================================================
00009528                            
00009528                            Bri_ChkDel:
00009546 4E75                       		rts	
00009548                            ; ===========================================================================
00009548                            
00009548                            @deletebridge:
00009548 7400                       		moveq	#0,d2
0000954A 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
0000954E 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00009550 5302                       		subq.b	#1,d2		; subtract 1
00009552 6500                       		bcs.s	@delparent
00009554                            
00009554                            	@loop:
00009554 7000                       		moveq	#0,d0
00009556 101A                       		move.b	(a2)+,d0
00009558 ED48                       		lsl.w	#6,d0
0000955A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009560 2240                       		movea.l	d0,a1
00009562 B048                       		cmp.w	a0,d0
00009564 6700                       		beq.s	@skipdel
00009566 6100 0000                  		bsr.w	DeleteChild
0000956A                            
0000956A                            	@skipdel:
0000956A 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
0000956E                            
0000956E                            @delparent:
0000956E 6100 0000                  		bsr.w	DeleteObject
00009572 4E75                       		rts	
00009574                            ; ===========================================================================
00009574                            
00009574                            Bri_Delete:	; Routine 6, 8
00009574 6100 0000                  		bsr.w	DeleteObject
00009578 4E75                       		rts	
0000957A                            ; ===========================================================================
0000957A                            
0000957A                            Bri_Display:	; Routine $A
0000957A 6100 0000                  		bsr.w	DisplaySprite
0000957E 4E75                       		rts	
0000957E 4E75                       		rts	
00009580                            Map_Bri:	include	"_maps\Bridge.asm"
00009580                            ; ---------------------------------------------------------------------------
00009580                            ; Sprite mappings - GHZ	bridge
00009580                            ; ---------------------------------------------------------------------------
00009580                            Map_Bri_internal:
00009580 0000                       		dc.w M_Bri_Log-Map_Bri_internal
00009582 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009584 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009586 01                         M_Bri_Log:	dc.b 1
00009587 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
0000958C 02                         M_Bri_Stump:	dc.b 2
0000958D F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00009592 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009597 01                         M_Bri_Rope:	dc.b 1
00009598 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
0000959E 00                         		even
0000959E 00                         		even
0000959E                            
0000959E                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000959E                            ;	    - spiked ball on a chain (SBZ)
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            
0000959E                            SwingingPlatform:
0000959E 7000                       		moveq	#0,d0
000095A0 1028 0024                  		move.b	obRoutine(a0),d0
000095A4 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
000095A8 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
000095AC                            ; ===========================================================================
000095AC 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
000095B0 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
000095B4 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
000095B8 0000                       		dc.w Swing_Action-Swing_Index
000095BA                            
000095BA =0000003A                  swing_origX:	equ $3A		; original x-axis position
000095BA =00000038                  swing_origY:	equ $38		; original y-axis position
000095BA                            ; ===========================================================================
000095BA                            
000095BA                            Swing_Main:	; Routine 0
000095BA 5428 0024                  		addq.b	#2,obRoutine(a0)
000095BE 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
000095C6 317C 4380 0002             		move.w	#$4380,obGfx(a0)
000095CC 117C 0004 0001             		move.b	#4,obRender(a0)
000095D2 317C 0180 0018             		move.w	#$180,obPriority(a0)
000095D8 117C 0018 0014             		move.b	#$18,obActWid(a0)
000095DE 117C 0008 0016             		move.b	#8,obHeight(a0)
000095E4 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
000095EA 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
000095F0 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000095F6 6600                       		bne.s	@notSLZ
000095F8                            
000095F8 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
00009600 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
00009606 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000960C 117C 0010 0016             		move.b	#$10,obHeight(a0)
00009612 117C 0099 0020             		move.b	#$99,obColType(a0)
00009618                            
00009618                            	@notSLZ:
00009618 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0000961E 6600                       		bne.s	@length
00009620                            
00009620 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
00009628 317C 0391 0002             		move.w	#$391,obGfx(a0)
0000962E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009634 117C 0018 0016             		move.b	#$18,obHeight(a0)
0000963A 117C 0086 0020             		move.b	#$86,obColType(a0)
00009640 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
00009646                            
00009646                            @length:
00009646 1810                       		move.b	0(a0),d4
00009648 7200                       		moveq	#0,d1
0000964A 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
0000964E 1212                       		move.b	(a2),d1		; move a2 to d1
00009650 3F01                       		move.w	d1,-(sp)
00009652 0241 000F                  		andi.w	#$F,d1
00009656 14FC 0000                  		move.b	#0,(a2)+
0000965A 3601                       		move.w	d1,d3
0000965C E94B                       		lsl.w	#4,d3
0000965E 5003                       		addq.b	#8,d3
00009660 1143 003C                  		move.b	d3,$3C(a0)
00009664 5103                       		subq.b	#8,d3
00009666 4A28 001A                  		tst.b	obFrame(a0)
0000966A 6700                       		beq.s	@makechain
0000966C 5003                       		addq.b	#8,d3
0000966E 5341                       		subq.w	#1,d1
00009670                            
00009670                            @makechain:
00009670 6100 0000                  		bsr.w	FindFreeObj
00009674 6600                       		bne.s	@fail
00009676 5228 0028                  		addq.b	#1,obSubtype(a0)
0000967A 3A09                       		move.w	a1,d5
0000967C 0445 D000                  		subi.w	#$D000,d5
00009680 EC4D                       		lsr.w	#6,d5
00009682 0245 007F                  		andi.w	#$7F,d5
00009686 14C5                       		move.b	d5,(a2)+
00009688 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
0000968E 1284                       		move.b	d4,0(a1)	; load swinging	object
00009690 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009696 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000969C 08A9 0006 0002             		bclr	#6,obGfx(a1)
000096A2 137C 0004 0001             		move.b	#4,obRender(a1)
000096A8 337C 0200 0018             		move.w	#$200,obPriority(a1)
000096AE 137C 0008 0014             		move.b	#8,obActWid(a1)
000096B4 137C 0001 001A             		move.b	#1,obFrame(a1)
000096BA 1343 003C                  		move.b	d3,$3C(a1)
000096BE 0403 0010                  		subi.b	#$10,d3
000096C2 6400                       		bcc.s	@notanchor
000096C4 137C 0002 001A             		move.b	#2,obFrame(a1)
000096CA 337C 0180 0018             		move.w	#$180,obPriority(a1)
000096D0 08E9 0006 0002             		bset	#6,obGfx(a1)
000096D6                            
000096D6                            	@notanchor:
000096D6 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
000096DA                            
000096DA                            	@fail:
000096DA 3A08                       		move.w	a0,d5
000096DC 0445 D000                  		subi.w	#$D000,d5
000096E0 EC4D                       		lsr.w	#6,d5
000096E2 0245 007F                  		andi.w	#$7F,d5
000096E6 14C5                       		move.b	d5,(a2)+
000096E8 317C 4080 0026             		move.w	#$4080,obAngle(a0)
000096EE 317C FE00 003E             		move.w	#-$200,$3E(a0)
000096F4 321F                       		move.w	(sp)+,d1
000096F6 0801 0004                  		btst	#4,d1		; is object type $1X ?
000096FA 6700                       		beq.s	@not1X	; if not, branch
000096FC 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00009704 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
0000970A 117C 0001 001A             		move.b	#1,obFrame(a0)
00009710 317C 0100 0018             		move.w	#$100,obPriority(a0)
00009716 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
0000971C                            
0000971C                            	@not1X:
0000971C 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
00009722 6700                       		beq.s	Swing_Action	; if yes, branch
00009724                            
00009724                            Swing_SetSolid:	; Routine 2
00009724 7200                       		moveq	#0,d1
00009726 1228 0014                  		move.b	obActWid(a0),d1
0000972A 7600                       		moveq	#0,d3
0000972C 1628 0016                  		move.b	obHeight(a0),d3
00009730 6100 FA76                  		bsr.w	Swing_Solid
00009734                            
00009734                            Swing_Action:	; Routine $C
00009734 6100 0000                  		bsr.w	Swing_Move
00009738 6100 0000                  		bsr.w	DisplaySprite
0000973C 6000 0000                  		bra.w	Swing_ChkDel
00009740                            ; ===========================================================================
00009740                            
00009740                            Swing_Action2:	; Routine 4
00009740 7200                       		moveq	#0,d1
00009742 1228 0014                  		move.b	obActWid(a0),d1
00009746 6100 FAC4                  		bsr.w	ExitPlatform
0000974A 3F28 0008                  		move.w	obX(a0),-(sp)
0000974E 6100 0000                  		bsr.w	Swing_Move
00009752 341F                       		move.w	(sp)+,d2
00009754 7600                       		moveq	#0,d3
00009756 1628 0016                  		move.b	obHeight(a0),d3
0000975A 5203                       		addq.b	#1,d3
0000975C 6100 0000                  		bsr.w	MvSonicOnPtfm
00009760 6100 0000                  		bsr.w	DisplaySprite
00009764 6000 0000                  		bra.w	Swing_ChkDel
00009768                            
00009768 4E75                       		rts
00009768 4E75                       		rts
0000976A                            
0000976A                            ; ---------------------------------------------------------------------------
0000976A                            ; Subroutine to	change Sonic's position with a platform
0000976A                            ; ---------------------------------------------------------------------------
0000976A                            
0000976A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000976A                            
0000976A                            
0000976A                            MvSonicOnPtfm:
0000976A 43F8 D000                  		lea	(v_player).w,a1
0000976E 3028 000C                  		move.w	obY(a0),d0
00009772 9043                       		sub.w	d3,d0
00009774 6000                       		bra.s	MvSonic2
00009776                            ; End of function MvSonicOnPtfm
00009776                            
00009776                            ; ---------------------------------------------------------------------------
00009776                            ; Subroutine to	change Sonic's position with a platform
00009776                            ; ---------------------------------------------------------------------------
00009776                            
00009776                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009776                            
00009776                            
00009776                            MvSonicOnPtfm2:
00009776 43F8 D000                  		lea	(v_player).w,a1
0000977A 3028 000C                  		move.w	obY(a0),d0
0000977E 0440 0009                  		subi.w	#9,d0
00009782                            
00009782                            MvSonic2:
00009782 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009786 6B00                       		bmi.s	locret_7B62
00009788 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000978E 6400                       		bhs.s	locret_7B62
00009790 4A78 FE08                  		tst.w	(v_debuguse).w
00009794 6600                       		bne.s	locret_7B62
00009796 7200                       		moveq	#0,d1
00009798 1229 0016                  		move.b	obHeight(a1),d1
0000979C 9041                       		sub.w	d1,d0
0000979E 3340 000C                  		move.w	d0,obY(a1)
000097A2 9468 0008                  		sub.w	obX(a0),d2
000097A6 9569 0008                  		sub.w	d2,obX(a1)
000097AA                            
000097AA                            locret_7B62:
000097AA 4E75                       		rts	
000097AC                            ; End of function MvSonicOnPtfm2
000097AC                            
000097AC                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
000097AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000097AC                            
000097AC                            
000097AC                            Swing_Move:
000097AC 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
000097B0 323C 0080                  		move.w	#$80,d1
000097B4 0828 0000 0022             		btst	#0,obStatus(a0)
000097BA 6700                       		beq.s	loc_7B78
000097BC 4440                       		neg.w	d0
000097BE D041                       		add.w	d1,d0
000097C0                            
000097C0                            loc_7B78:
000097C0 6000                       		bra.s	Swing_Move2
000097C2                            ; End of function Swing_Move
000097C2                            
000097C2                            
000097C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000097C2                            
000097C2                            
000097C2                            Obj48_Move:
000097C2 4A28 003D                  		tst.b	$3D(a0)
000097C6 6600                       		bne.s	loc_7B9C
000097C8 3028 003E                  		move.w	$3E(a0),d0
000097CC 5040                       		addq.w	#8,d0
000097CE 3140 003E                  		move.w	d0,$3E(a0)
000097D2 D168 0026                  		add.w	d0,obAngle(a0)
000097D6 0C40 0200                  		cmpi.w	#$200,d0
000097DA 6600                       		bne.s	loc_7BB6
000097DC 117C 0001 003D             		move.b	#1,$3D(a0)
000097E2 6000                       		bra.s	loc_7BB6
000097E4                            ; ===========================================================================
000097E4                            
000097E4                            loc_7B9C:
000097E4 3028 003E                  		move.w	$3E(a0),d0
000097E8 5140                       		subq.w	#8,d0
000097EA 3140 003E                  		move.w	d0,$3E(a0)
000097EE D168 0026                  		add.w	d0,obAngle(a0)
000097F2 0C40 FE00                  		cmpi.w	#-$200,d0
000097F6 6600                       		bne.s	loc_7BB6
000097F8 117C 0000 003D             		move.b	#0,$3D(a0)
000097FE                            
000097FE                            loc_7BB6:
000097FE 1028 0026                  		move.b	obAngle(a0),d0
00009802                            ; End of function Obj48_Move
00009802                            
00009802                            
00009802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009802                            
00009802                            
00009802                            Swing_Move2:
00009802 6100 A232                  		bsr.w	CalcSine
00009806 3428 0038                  		move.w	$38(a0),d2
0000980A 3628 003A                  		move.w	$3A(a0),d3
0000980E 45E8 0028                  		lea	obSubtype(a0),a2
00009812 7C00                       		moveq	#0,d6
00009814 1C1A                       		move.b	(a2)+,d6
00009816                            
00009816                            loc_7BCE:
00009816 7800                       		moveq	#0,d4
00009818 181A                       		move.b	(a2)+,d4
0000981A ED4C                       		lsl.w	#6,d4
0000981C 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00009822 2244                       		movea.l	d4,a1
00009824 7800                       		moveq	#0,d4
00009826 1829 003C                  		move.b	$3C(a1),d4
0000982A 2A04                       		move.l	d4,d5
0000982C C9C0                       		muls.w	d0,d4
0000982E E084                       		asr.l	#8,d4
00009830 CBC1                       		muls.w	d1,d5
00009832 E085                       		asr.l	#8,d5
00009834 D842                       		add.w	d2,d4
00009836 DA43                       		add.w	d3,d5
00009838 3344 000C                  		move.w	d4,obY(a1)
0000983C 3345 0008                  		move.w	d5,obX(a1)
00009840 51CE FFD4                  		dbf	d6,loc_7BCE
00009844 4E75                       		rts	
00009846                            ; End of function Swing_Move2
00009846                            
00009846                            ; ===========================================================================
00009846                            
00009846                            Swing_ChkDel:
00009864 4E75                       		rts	
00009866                            ; ===========================================================================
00009866                            
00009866                            Swing_DelAll:
00009866 7400                       		moveq	#0,d2
00009868 45E8 0028                  		lea	obSubtype(a0),a2
0000986C 141A                       		move.b	(a2)+,d2
0000986E                            
0000986E                            Swing_DelLoop:
0000986E 7000                       		moveq	#0,d0
00009870 101A                       		move.b	(a2)+,d0
00009872 ED48                       		lsl.w	#6,d0
00009874 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000987A 2240                       		movea.l	d0,a1
0000987C 6100 0000                  		bsr.w	DeleteChild
00009880 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009884 4E75                       		rts	
00009886                            ; ===========================================================================
00009886                            
00009886                            Swing_Delete:	; Routine 6, 8
00009886 6100 0000                  		bsr.w	DeleteObject
0000988A 4E75                       		rts	
0000988C                            ; ===========================================================================
0000988C                            
0000988C                            Swing_Display:	; Routine $A
0000988C 6000 0000                  		bra.w	DisplaySprite
0000988C 6000 0000                  		bra.w	DisplaySprite
00009890                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
00009890                            ; ---------------------------------------------------------------------------
00009890                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00009890                            ; ---------------------------------------------------------------------------
00009890                            Map_Swing_GHZ_internal:
00009890 0000                       		dc.w @block-Map_Swing_GHZ_internal
00009892 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009894 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009896 02                         @block:		dc.b 2
00009897 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000989C F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000098A1 01                         @chain:		dc.b 1
000098A2 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000098A7 01                         @anchor:	dc.b 1
000098A8 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000098AE 00                         		even
000098AE 00                         		even
000098AE                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
000098AE                            ; ---------------------------------------------------------------------------
000098AE                            ; Sprite mappings - SLZ	swinging platforms
000098AE                            ; ---------------------------------------------------------------------------
000098AE                            Map_Swing_SLZ_internal:
000098AE 0000                       		dc.w @block-Map_Swing_SLZ_internal
000098B0 0000                       		dc.w @chain-Map_Swing_SLZ_internal
000098B2 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
000098B4 08                         @block:		dc.b 8
000098B5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000098BA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000098BF F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000098C4 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000098C9 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000098CE 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000098D3 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000098D8 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000098DD 01                         @chain:		dc.b 1
000098DE F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000098E3 01                         @anchor:	dc.b 1
000098E4 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000098EA 00                         		even
000098EA 00                         		even
000098EA                            		include	"_incObj\17 Spiked Pole Helix.asm"
000098EA                            ; ---------------------------------------------------------------------------
000098EA                            ; Object 17 - helix of spikes on a pole	(GHZ)
000098EA                            ; ---------------------------------------------------------------------------
000098EA                            
000098EA                            Helix:
000098EA 7000                       		moveq	#0,d0
000098EC 1028 0024                  		move.b	obRoutine(a0),d0
000098F0 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
000098F4 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
000098F8                            ; ===========================================================================
000098F8 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
000098FA 0000                       		dc.w Hel_Action-Hel_Index
000098FC 0000                       		dc.w Hel_Action-Hel_Index
000098FE 0000                       		dc.w Hel_Delete-Hel_Index
00009900 0000                       		dc.w Hel_Display-Hel_Index
00009902                            
00009902 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
00009902                            
00009902                            ;		$29-38 are used for child object addresses
00009902                            ; ===========================================================================
00009902                            
00009902                            Hel_Main:	; Routine 0
00009902 5428 0024                  		addq.b	#2,obRoutine(a0)
00009906 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
0000990E 317C 4398 0002             		move.w	#$4398,obGfx(a0)
00009914 117C 0007 0022             		move.b	#7,obStatus(a0)
0000991A 117C 0004 0001             		move.b	#4,obRender(a0)
00009920 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009926 117C 0008 0014             		move.b	#8,obActWid(a0)
0000992C 3428 000C                  		move.w	obY(a0),d2
00009930 3628 0008                  		move.w	obX(a0),d3
00009934 1810                       		move.b	0(a0),d4
00009936 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000993A 7200                       		moveq	#0,d1
0000993C 1212                       		move.b	(a2),d1		; move helix length to d1
0000993E 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
00009942 3001                       		move.w	d1,d0
00009944 E248                       		lsr.w	#1,d0
00009946 E948                       		lsl.w	#4,d0
00009948 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
0000994A 5501                       		subq.b	#2,d1
0000994C 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
0000994E 7C00                       		moveq	#0,d6
00009950                            
00009950                            Hel_Build:
00009950 6100 0000                  		bsr.w	FindFreeObj
00009954 6600                       		bne.s	Hel_Action
00009956 5228 0028                  		addq.b	#1,obSubtype(a0)
0000995A 3A09                       		move.w	a1,d5
0000995C 0445 D000                  		subi.w	#$D000,d5
00009960 EC4D                       		lsr.w	#6,d5
00009962 0245 007F                  		andi.w	#$7F,d5
00009966 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
00009968 137C 0008 0024             		move.b	#8,obRoutine(a1)
0000996E 1284                       		move.b	d4,0(a1)
00009970 3342 000C                  		move.w	d2,ObY(a1)
00009974 3343 0008                  		move.w	d3,obX(a1)
00009978 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0000997E 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009984 137C 0004 0001             		move.b	#4,obRender(a1)
0000998A 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009990 137C 0008 0014             		move.b	#8,obActWid(a1)
00009996 1346 003E                  		move.b	d6,hel_frame(a1)
0000999A 5206                       		addq.b	#1,d6
0000999C 0206 0007                  		andi.b	#7,d6
000099A0 0643 0010                  		addi.w	#$10,d3
000099A4 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
000099A8 6600                       		bne.s	Hel_NotCentre	; if not, branch
000099AA                            
000099AA 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
000099AE 5206                       		addq.b	#1,d6
000099B0 0206 0007                  		andi.b	#7,d6
000099B4 0643 0010                  		addi.w	#$10,d3		; skip to next spike
000099B8 5228 0028                  		addq.b	#1,obSubtype(a0)
000099BC                            
000099BC                            	Hel_NotCentre:
000099BC 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
000099C0                            
000099C0                            Hel_Action:	; Routine 2, 4
000099C0 6100 0000                  		bsr.w	Hel_RotateSpikes
000099C4 6100 0000                  		bsr.w	DisplaySprite
000099C8 6000 0000                  		bra.w	Hel_ChkDel
000099CC                            
000099CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000099CC                            
000099CC                            
000099CC                            Hel_RotateSpikes:
000099CC 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
000099D0 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
000099D6 D028 003E                  		add.b	hel_frame(a0),d0
000099DA 0200 0007                  		andi.b	#7,d0
000099DE 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
000099E2 6600                       		bne.s	locret_7DA6
000099E4 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
000099EA                            
000099EA                            locret_7DA6:
000099EA 4E75                       		rts	
000099EC                            ; End of function Hel_RotateSpikes
000099EC                            
000099EC                            ; ===========================================================================
000099EC                            
000099EC                            Hel_ChkDel:
00009A0A 4E75                       		rts	
00009A0C                            ; ===========================================================================
00009A0C                            
00009A0C                            Hel_DelAll:
00009A0C 7400                       		moveq	#0,d2
00009A0E 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009A12 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009A14 5502                       		subq.b	#2,d2
00009A16 6500                       		bcs.s	Hel_Delete
00009A18                            
00009A18                            	Hel_DelLoop:
00009A18 7000                       		moveq	#0,d0
00009A1A 101A                       		move.b	(a2)+,d0
00009A1C ED48                       		lsl.w	#6,d0
00009A1E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009A24 2240                       		movea.l	d0,a1		; get child address
00009A26 6100 0000                  		bsr.w	DeleteChild	; delete object
00009A2A 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
00009A2E                            
00009A2E                            Hel_Delete:	; Routine 6
00009A2E 6100 0000                  		bsr.w	DeleteObject
00009A32 4E75                       		rts	
00009A34                            ; ===========================================================================
00009A34                            
00009A34                            Hel_Display:	; Routine 8
00009A34 6100 FF96                  		bsr.w	Hel_RotateSpikes
00009A38 6000 0000                  		bra.w	DisplaySprite
00009A38 6000 0000                  		bra.w	DisplaySprite
00009A3C                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
00009A3C                            ; ---------------------------------------------------------------------------
00009A3C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00009A3C                            ; ---------------------------------------------------------------------------
00009A3C                            Map_Hel_internal:
00009A3C 0000                       		dc.w byte_7E08-Map_Hel_internal
00009A3E 0000                       		dc.w byte_7E0E-Map_Hel_internal
00009A40 0000                       		dc.w byte_7E14-Map_Hel_internal
00009A42 0000                       		dc.w byte_7E1A-Map_Hel_internal
00009A44 0000                       		dc.w byte_7E20-Map_Hel_internal
00009A46 0000                       		dc.w byte_7E26-Map_Hel_internal
00009A48 0000                       		dc.w byte_7E2E-Map_Hel_internal
00009A4A 0000                       		dc.w byte_7E2C-Map_Hel_internal
00009A4C 01                         byte_7E08:	dc.b 1
00009A4D F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
00009A52 01                         byte_7E0E:	dc.b 1
00009A53 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
00009A58 01                         byte_7E14:	dc.b 1
00009A59 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
00009A5E 01                         byte_7E1A:	dc.b 1
00009A5F FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
00009A64 01                         byte_7E20:	dc.b 1
00009A65 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
00009A6A 01                         byte_7E26:	dc.b 1
00009A6B 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
00009A70 01                         byte_7E2C:	dc.b 1
00009A71 F4                         		dc.b $F4
00009A72                            byte_7E2E:	; reads the 0 below	; not visible
00009A72 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009A76                            		even
00009A76                            		even
00009A76                            		include	"_incObj\18 Platforms.asm"
00009A76                            ; ---------------------------------------------------------------------------
00009A76                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009A76                            ; ---------------------------------------------------------------------------
00009A76                            
00009A76                            BasicPlatform:
00009A76 7000                       		moveq	#0,d0
00009A78 1028 0024                  		move.b	obRoutine(a0),d0
00009A7C 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
00009A80 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009A84                            ; ===========================================================================
00009A84 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009A86 0000                       		dc.w Plat_Solid-Plat_Index
00009A88 0000                       		dc.w Plat_Action2-Plat_Index
00009A8A 0000                       		dc.w Plat_Delete-Plat_Index
00009A8C 0000                       		dc.w Plat_Action-Plat_Index
00009A8E                            ; ===========================================================================
00009A8E                            
00009A8E                            Plat_Main:	; Routine 0
00009A8E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009A92 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A98 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009AA0 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009AA6 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009AAC 6600                       		bne.s	@notSYZ
00009AAE                            
00009AAE 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009AB6 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009ABC                            
00009ABC                            	@notSYZ:
00009ABC 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009AC2 6600                       		bne.s	@notSLZ
00009AC4 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009ACC 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009AD2 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009AD8 117C 0003 0028             		move.b	#3,obSubtype(a0)
00009ADE                            
00009ADE                            	@notSLZ:
00009ADE 117C 0004 0001             		move.b	#4,obRender(a0)
00009AE4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009AEA 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009AF0 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009AF6 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009AFC 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009B02 7200                       		moveq	#0,d1
00009B04 1028 0028                  		move.b	obSubtype(a0),d0
00009B08 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009B0C 6600                       		bne.s	@setframe	; if not, branch
00009B0E 5201                       		addq.b	#1,d1		; use frame #1
00009B10 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009B16                            
00009B16                            	@setframe:
00009B16 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
00009B1A                            
00009B1A                            Plat_Solid:	; Routine 2
00009B1A 4A28 0038                  		tst.b	$38(a0)
00009B1E 6700                       		beq.s	loc_7EE0
00009B20 5928 0038                  		subq.b	#4,$38(a0)
00009B24                            
00009B24                            	loc_7EE0:
00009B24 7200                       		moveq	#0,d1
00009B26 1228 0014                  		move.b	obActWid(a0),d1
00009B2A 6100 F56C                  		bsr.w	PlatformObject
00009B2E                            
00009B2E                            Plat_Action:	; Routine 8
00009B2E 6100 0000                  		bsr.w	Plat_Move
00009B32 6100 0000                  		bsr.w	Plat_Nudge
00009B36 6100 0000                  		bsr.w	DisplaySprite
00009B3A 6000 0000                  		bra.w	Plat_ChkDel
00009B3E                            ; ===========================================================================
00009B3E                            
00009B3E                            Plat_Action2:	; Routine 4
00009B3E 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009B44 6700                       		beq.s	loc_7F06
00009B46 5828 0038                  		addq.b	#4,$38(a0)
00009B4A                            
00009B4A                            	loc_7F06:
00009B4A 7200                       		moveq	#0,d1
00009B4C 1228 0014                  		move.b	obActWid(a0),d1
00009B50 6100 F6BA                  		bsr.w	ExitPlatform
00009B54 3F28 0008                  		move.w	obX(a0),-(sp)
00009B58 6100 0000                  		bsr.w	Plat_Move
00009B5C 6100 0000                  		bsr.w	Plat_Nudge
00009B60 341F                       		move.w	(sp)+,d2
00009B62 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009B66 6100 0000                  		bsr.w	DisplaySprite
00009B6A 6000 0000                  		bra.w	Plat_ChkDel
00009B6E                            
00009B6E 4E75                       		rts
00009B70                            
00009B70                            ; ---------------------------------------------------------------------------
00009B70                            ; Subroutine to	move platform slightly when you	stand on it
00009B70                            ; ---------------------------------------------------------------------------
00009B70                            
00009B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B70                            
00009B70                            
00009B70                            Plat_Nudge:
00009B70 1028 0038                  		move.b	$38(a0),d0
00009B74 6100 9EC0                  		bsr.w	CalcSine
00009B78 323C 0400                  		move.w	#$400,d1
00009B7C C1C1                       		muls.w	d1,d0
00009B7E 4840                       		swap	d0
00009B80 D068 002C                  		add.w	$2C(a0),d0
00009B84 3140 000C                  		move.w	d0,obY(a0)
00009B88 4E75                       		rts	
00009B8A                            ; End of function Plat_Nudge
00009B8A                            
00009B8A                            ; ---------------------------------------------------------------------------
00009B8A                            ; Subroutine to	move platforms
00009B8A                            ; ---------------------------------------------------------------------------
00009B8A                            
00009B8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B8A                            
00009B8A                            
00009B8A                            Plat_Move:
00009B8A 7000                       		moveq	#0,d0
00009B8C 1028 0028                  		move.b	obSubtype(a0),d0
00009B90 0240 000F                  		andi.w	#$F,d0
00009B94 D040                       		add.w	d0,d0
00009B96 323B 0000                  		move.w	@index(pc,d0.w),d1
00009B9A 4EFB 1000                  		jmp	@index(pc,d1.w)
00009B9E                            ; End of function Plat_Move
00009B9E                            
00009B9E                            ; ===========================================================================
00009B9E 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009BA2 0000 0000                  		dc.w @type02-@index, @type03-@index
00009BA6 0000 0000                  		dc.w @type04-@index, @type05-@index
00009BAA 0000 0000                  		dc.w @type06-@index, @type07-@index
00009BAE 0000 0000                  		dc.w @type08-@index, @type00-@index
00009BB2 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009BB6 0000                       		dc.w @type0C-@index
00009BB8                            ; ===========================================================================
00009BB8                            
00009BB8                            @type00:
00009BB8 4E75                       		rts			; platform 00 doesn't move
00009BBA                            ; ===========================================================================
00009BBA                            
00009BBA                            @type05:
00009BBA 3028 0032                  		move.w	$32(a0),d0
00009BBE 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BC2 4401                       		neg.b	d1		; reverse platform-motion
00009BC4 0601 0040                  		addi.b	#$40,d1
00009BC8 6000                       		bra.s	@type01_move
00009BCA                            ; ===========================================================================
00009BCA                            
00009BCA                            @type01:
00009BCA 3028 0032                  		move.w	$32(a0),d0
00009BCE 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BD2 0401 0040                  		subi.b	#$40,d1
00009BD6                            
00009BD6                            	@type01_move:
00009BD6 4881                       		ext.w	d1
00009BD8 D041                       		add.w	d1,d0
00009BDA 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00009BDE 6000 0000                  		bra.w	@chgmotion
00009BE2                            ; ===========================================================================
00009BE2                            
00009BE2                            @type0C:
00009BE2 3028 0034                  		move.w	$34(a0),d0
00009BE6 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009BEA 4401                       		neg.b	d1		; reverse platform-motion
00009BEC 0601 0030                  		addi.b	#$30,d1
00009BF0 6000                       		bra.s	@type02_move
00009BF2                            ; ===========================================================================
00009BF2                            
00009BF2                            @type0B:
00009BF2 3028 0034                  		move.w	$34(a0),d0
00009BF6 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009BFA 0401 0030                  		subi.b	#$30,d1
00009BFE 6000                       		bra.s	@type02_move
00009C00                            ; ===========================================================================
00009C00                            
00009C00                            @type06:
00009C00 3028 0034                  		move.w	$34(a0),d0
00009C04 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009C08 4401                       		neg.b	d1		; reverse platform-motion
00009C0A 0601 0040                  		addi.b	#$40,d1
00009C0E 6000                       		bra.s	@type02_move
00009C10                            ; ===========================================================================
00009C10                            
00009C10                            @type02:
00009C10 3028 0034                  		move.w	$34(a0),d0
00009C14 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009C18 0401 0040                  		subi.b	#$40,d1
00009C1C                            
00009C1C                            	@type02_move:
00009C1C 4881                       		ext.w	d1
00009C1E D041                       		add.w	d1,d0
00009C20 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009C24 6000 0000                  		bra.w	@chgmotion
00009C28                            ; ===========================================================================
00009C28                            
00009C28                            @type03:
00009C28 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009C2C 6600                       		bne.s	@type03_wait	; if yes, branch
00009C2E 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009C34 6700                       		beq.s	@type03_nomove	; if not, branch
00009C36 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009C3C                            
00009C3C                            	@type03_nomove:
00009C3C 4E75                       		rts	
00009C3E                            
00009C3E                            	@type03_wait:
00009C3E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009C42 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009C44 317C 0020 003A             		move.w	#32,$3A(a0)
00009C4A 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
00009C4E 4E75                       		rts	
00009C50                            ; ===========================================================================
00009C50                            
00009C50                            @type04:
00009C50 4A68 003A                  		tst.w	$3A(a0)
00009C54 6700                       		beq.s	@loc_8048
00009C56 5368 003A                  		subq.w	#1,$3A(a0)
00009C5A 6600                       		bne.s	@loc_8048
00009C5C 0828 0003 0022             		btst	#3,obStatus(a0)
00009C62 6700                       		beq.s	@loc_8042
00009C64 08E9 0001 0022             		bset	#1,obStatus(a1)
00009C6A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009C70 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009C76 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009C7C 4228 0025                  		clr.b	$25(a0)
00009C80 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009C86                            
00009C86                            	@loc_8042:
00009C86 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009C8C                            
00009C8C                            	@loc_8048:
00009C8C 2628 002C                  		move.l	$2C(a0),d3
00009C90 3028 0012                  		move.w	obVelY(a0),d0
00009C94 48C0                       		ext.l	d0
00009C96 E180                       		asl.l	#8,d0
00009C98 D680                       		add.l	d0,d3
00009C9A 2143 002C                  		move.l	d3,$2C(a0)
00009C9E 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009CA4 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009CA8 0640 00E0                  		addi.w	#$E0,d0
00009CAC B068 002C                  		cmp.w	$2C(a0),d0
00009CB0 6400                       		bcc.s	@locret_8074
00009CB2 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009CB8                            
00009CB8                            	@locret_8074:
00009CB8 4E75                       		rts	
00009CBA                            ; ===========================================================================
00009CBA                            
00009CBA                            @type07:
00009CBA 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009CBE 6600                       		bne.s	@type07_wait	; if yes, branch
00009CC0 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009CC4 7000                       		moveq	#0,d0
00009CC6 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009CCA E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009CCC 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009CD0 6700                       		beq.s	@type07_nomove	; if not, branch
00009CD2 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009CD8                            
00009CD8                            	@type07_nomove:
00009CD8 4E75                       		rts	
00009CDA                            
00009CDA                            	@type07_wait:
00009CDA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009CDE 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009CE0 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009CE4 4E75                       		rts	
00009CE6                            ; ===========================================================================
00009CE6                            
00009CE6                            @type08:
00009CE6 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009CEA 3028 0034                  		move.w	$34(a0),d0
00009CEE 0440 0200                  		subi.w	#$200,d0
00009CF2 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009CF6 6600                       		bne.s	@type08_nostop	; if not, branch
00009CF8 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009CFC                            
00009CFC                            	@type08_nostop:
00009CFC 4E75                       		rts	
00009CFE                            ; ===========================================================================
00009CFE                            
00009CFE                            @type0A:
00009CFE 3028 0034                  		move.w	$34(a0),d0
00009D02 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009D06 0401 0040                  		subi.b	#$40,d1
00009D0A 4881                       		ext.w	d1
00009D0C E241                       		asr.w	#1,d1
00009D0E D041                       		add.w	d1,d0
00009D10 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009D14                            
00009D14                            @chgmotion:
00009D14 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009D1A 4E75                       		rts	
00009D1C                            ; ===========================================================================
00009D1C                            
00009D1C                            Plat_ChkDel:
00009D38 4E75                       		rts	
00009D3A                            ; ===========================================================================
00009D3A                            
00009D3A                            Plat_Delete:	; Routine 6
00009D3A 6000 0000                  		bra.w	DeleteObject
00009D3A 6000 0000                  		bra.w	DeleteObject
00009D3E                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009D3E                            ; ---------------------------------------------------------------------------
00009D3E                            ; Sprite mappings - unused
00009D3E                            ; ---------------------------------------------------------------------------
00009D3E                            Map_Plat_Unused_internal:
00009D3E 0000                       		dc.w @small-Map_Plat_Unused_internal
00009D40 0000                       		dc.w @large-Map_Plat_Unused_internal
00009D42 02                         @small:		dc.b 2
00009D43 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009D48 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009D4D 0A                         @large:		dc.b $A
00009D4E F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009D53 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009D58 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009D5D 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009D62 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009D67 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009D6C 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009D71 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009D76 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009D7B 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009D80                            		even
00009D80                            		even
00009D80                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009D80                            ; ---------------------------------------------------------------------------
00009D80                            ; Sprite mappings - GHZ	platforms
00009D80                            ; ---------------------------------------------------------------------------
00009D80                            Map_Plat_GHZ_internal:
00009D80 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009D82 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009D84 04                         @small:		dc.b 4
00009D85 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009D8A F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009D8F F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009D94 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009D99 0A                         @large:		dc.b $A
00009D9A F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009D9F 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009DA4 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009DA9 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009DAE 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009DB3 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009DB8 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009DBD 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009DC2 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009DC7 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009DCC                            		even
00009DCC                            		even
00009DCC                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009DCC                            ; ---------------------------------------------------------------------------
00009DCC                            ; Sprite mappings - SYZ	platforms
00009DCC                            ; ---------------------------------------------------------------------------
00009DCC                            Map_Plat_SYZ_internal:
00009DCC 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009DCE 03                         @platform:	dc.b 3
00009DCF F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009DD4 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009DD9 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009DDE                            		even
00009DDE                            		even
00009DDE                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009DDE                            ; ---------------------------------------------------------------------------
00009DDE                            ; Sprite mappings - SLZ	platforms
00009DDE                            ; ---------------------------------------------------------------------------
00009DDE                            Map_Plat_SLZ_internal:
00009DDE 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009DE0 02                         @platform:	dc.b 2
00009DE1 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009DE6 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009DEC 00                         		even
00009DEC 00                         		even
00009DEC                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009DEC                            ; ---------------------------------------------------------------------------
00009DEC                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009DEC                            ; ---------------------------------------------------------------------------
00009DEC                            Map_GBall_internal:
00009DEC 0000                       		dc.w @shiny-Map_GBall_internal
00009DEE 0000                       		dc.w @check1-Map_GBall_internal
00009DF0 0000                       		dc.w @check2-Map_GBall_internal
00009DF2 0000                       		dc.w @check3-Map_GBall_internal
00009DF4 06                         @shiny:		dc.b 6
00009DF5 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009DFA F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009DFF E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009E04 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009E09 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009E0E 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009E13 04                         @check1:	dc.b 4
00009E14 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009E19 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009E1E 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009E23 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009E28 04                         @check2:	dc.b 4
00009E29 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009E2E E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009E33 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009E38 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009E3D 04                         @check3:	dc.b 4
00009E3E E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009E43 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009E48 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009E4D 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009E52                            		even
00009E52                            		even
00009E52                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009E52                            ; ---------------------------------------------------------------------------
00009E52                            ; Object 1A - GHZ collapsing ledge
00009E52                            ; ---------------------------------------------------------------------------
00009E52                            
00009E52                            CollapseLedge:
00009E52 7000                       		moveq	#0,d0
00009E54 1028 0024                  		move.b	obRoutine(a0),d0
00009E58 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009E5C 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009E60                            ; ===========================================================================
00009E60 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009E64 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009E68 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009E6C                            
00009E6C =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009E6C =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009E6C                            ; ===========================================================================
00009E6C                            
00009E6C                            Ledge_Main:	; Routine 0
00009E6C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009E70 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009E78 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009E7E 0028 0004 0001             		ori.b	#4,obRender(a0)
00009E84 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009E8A 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009E90 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009E96 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009E9C 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009EA2 08E8 0004 0001             		bset	#4,obRender(a0)
00009EA8                            
00009EA8                            Ledge_Touch:	; Routine 2
00009EA8 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009EAC 6700                       		beq.s	@slope		; if not, branch
00009EAE 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009EB2 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009EB6 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009EBA                            
00009EBA                            	@slope:
00009EBA 323C 0030                  		move.w	#$30,d1
00009EBE 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009EC4 6100 F2A6                  		bsr.w	SlopeObject
00009EC8 6000 0000                  		bra.w	RememberState
00009ECC                            ; ===========================================================================
00009ECC                            
00009ECC                            Ledge_Collapse:	; Routine 4
00009ECC 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009ED0 6700 0000                  		beq.w	loc_847A
00009ED4 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009EDA 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009EDE                            
00009EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009EDE                            
00009EDE                            
00009EDE                            Ledge_WalkOff:	; Routine $A
00009EDE 323C 0030                  		move.w	#$30,d1
00009EE2 6100 F328                  		bsr.w	ExitPlatform
00009EE6 323C 0030                  		move.w	#$30,d1
00009EEA 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009EF0 3428 0008                  		move.w	obX(a0),d2
00009EF4 6100 0000                  		bsr.w	SlopeObject2
00009EF8 6000 0000                  		bra.w	RememberState
00009EFC                            ; End of function Ledge_WalkOff
00009EFC                            
00009EFC                            ; ===========================================================================
00009EFC                            
00009EFC                            Ledge_Display:	; Routine 6
00009EFC 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009F00 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009F02 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009F06 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009F0A 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009F0E 6000 0000                  		bra.w	DisplaySprite
00009F12                            ; ===========================================================================
00009F12                            
00009F12                            loc_82D0:
00009F12 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009F16 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009F1A 43F8 D000                  		lea	(v_player).w,a1
00009F1E 0829 0003 0022             		btst	#3,obStatus(a1)
00009F24 6700                       		beq.s	loc_82FC
00009F26 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009F2A 6600                       		bne.s	locret_8308
00009F2C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009F32 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009F38 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009F3E                            
00009F3E                            loc_82FC:
00009F3E 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009F44 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009F4A                            
00009F4A                            locret_8308:
00009F4A 4E75                       		rts	
00009F4C                            ; ===========================================================================
00009F4C                            
00009F4C                            Ledge_TimeZero:
00009F4C 6100 0000                  		bsr.w	ObjectFall
00009F50 6100 0000                  		bsr.w	DisplaySprite
00009F54 4A28 0001                  		tst.b	obRender(a0)
00009F58 6A00                       		bpl.s	Ledge_Delete
00009F5A 4E75                       		rts	
00009F5C                            ; ===========================================================================
00009F5C                            
00009F5C                            Ledge_Delete:	; Routine 8
00009F5C 6100 0000                  		bsr.w	DeleteObject
00009F60 4E75                       		rts	
00009F60 4E75                       		rts	
00009F62                            		include	"_incObj\53 Collapsing Floors.asm"
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            
00009F62                            CollapseFloor:
00009F62 7000                       		moveq	#0,d0
00009F64 1028 0024                  		move.b	obRoutine(a0),d0
00009F68 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009F6C 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009F70                            ; ===========================================================================
00009F70 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009F74 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009F78 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009F7C                            
00009F7C =00000038                  cflo_timedelay:		equ $38
00009F7C =0000003A                  cflo_collapse_flag:	equ $3A
00009F7C                            ; ===========================================================================
00009F7C                            
00009F7C                            CFlo_Main:	; Routine 0
00009F7C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009F80 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009F88 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009F8E 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009F94 6600                       		bne.s	@notSLZ
00009F96                            
00009F96 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009F9C 5428 001A                  		addq.b	#2,obFrame(a0)
00009FA0                            
00009FA0                            	@notSLZ:
00009FA0 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009FA6 6600                       		bne.s	@notSBZ
00009FA8 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
00009FAE                            
00009FAE                            	@notSBZ:
00009FAE 0028 0004 0001             		ori.b	#4,obRender(a0)
00009FB4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009FBA 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009FC0 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009FC6                            
00009FC6                            CFlo_Touch:	; Routine 2
00009FC6 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009FCA 6700                       		beq.s	@solid		; if not, branch
00009FCC 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009FD0 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009FD4 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009FD8                            
00009FD8                            	@solid:
00009FD8 323C 0020                  		move.w	#$20,d1
00009FDC 6100 F0BA                  		bsr.w	PlatformObject
00009FE0 4A28 0028                  		tst.b	obSubtype(a0)
00009FE4 6A00                       		bpl.s	@remstate
00009FE6 0829 0003 0022             		btst	#3,obStatus(a1)
00009FEC 6700                       		beq.s	@remstate
00009FEE 08A8 0000 0001             		bclr	#0,obRender(a0)
00009FF4 3029 0008                  		move.w	obX(a1),d0
00009FF8 9068 0008                  		sub.w	obX(a0),d0
00009FFC 6400                       		bcc.s	@remstate
00009FFE 08E8 0000 0001             		bset	#0,obRender(a0)
0000A004                            
0000A004                            	@remstate:
0000A004 6000 0000                  		bra.w	RememberState
0000A008                            ; ===========================================================================
0000A008                            
0000A008                            CFlo_Collapse:	; Routine 4
0000A008 4A28 0038                  		tst.b	cflo_timedelay(a0)
0000A00C 6700 0000                  		beq.w	loc_8458
0000A010 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
0000A016 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A01A                            
0000A01A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A01A                            
0000A01A                            
0000A01A                            CFlo_WalkOff:	; Routine $A
0000A01A 323C 0020                  		move.w	#$20,d1
0000A01E 6100 F1EC                  		bsr.w	ExitPlatform
0000A022 3428 0008                  		move.w	obX(a0),d2
0000A026 6100 F74E                  		bsr.w	MvSonicOnPtfm2
0000A02A 6000 0000                  		bra.w	RememberState
0000A02E                            ; End of function CFlo_WalkOff
0000A02E                            
0000A02E                            ; ===========================================================================
0000A02E                            
0000A02E                            CFlo_Display:	; Routine 6
0000A02E 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
0000A032 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
0000A034 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
0000A038 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000A03C 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
0000A040 6000 0000                  		bra.w	DisplaySprite
0000A044                            ; ===========================================================================
0000A044                            
0000A044                            loc_8402:
0000A044 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A048 6100 FFD0                  		bsr.w	CFlo_WalkOff
0000A04C 43F8 D000                  		lea	(v_player).w,a1
0000A050 0829 0003 0022             		btst	#3,obStatus(a1)
0000A056 6700                       		beq.s	loc_842E
0000A058 4A28 0038                  		tst.b	cflo_timedelay(a0)
0000A05C 6600                       		bne.s	locret_843A
0000A05E 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000A064 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A06A 137C 0001 001D             		move.b	#1,obNextAni(a1)
0000A070                            
0000A070                            loc_842E:
0000A070 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A076 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
0000A07C                            
0000A07C                            locret_843A:
0000A07C 4E75                       		rts	
0000A07E                            ; ===========================================================================
0000A07E                            
0000A07E                            CFlo_TimeZero:
0000A07E 6100 0000                  		bsr.w	ObjectFall
0000A082 6100 0000                  		bsr.w	DisplaySprite
0000A086 4A28 0001                  		tst.b	obRender(a0)
0000A08A 6A00                       		bpl.s	CFlo_Delete
0000A08C 4E75                       		rts	
0000A08E                            ; ===========================================================================
0000A08E                            
0000A08E                            CFlo_Delete:	; Routine 8
0000A08E 6100 0000                  		bsr.w	DeleteObject
0000A092 4E75                       		rts	
0000A094                            ; ===========================================================================
0000A094                            
0000A094                            CFlo_Fragment:
0000A094 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A09A                            
0000A09A                            loc_8458:
0000A09A 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
0000A0A0 0828 0000 0028             		btst	#0,obSubtype(a0)
0000A0A6 6700                       		beq.s	loc_846C
0000A0A8 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
0000A0AE                            
0000A0AE                            loc_846C:
0000A0AE 7207                       		moveq	#7,d1
0000A0B0 5228 001A                  		addq.b	#1,obFrame(a0)
0000A0B4 6000                       		bra.s	loc_8486
0000A0B4 6000                       		bra.s	loc_8486
0000A0B6                            
0000A0B6                            ; ===========================================================================
0000A0B6                            
0000A0B6                            Ledge_Fragment:
0000A0B6 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
0000A0BC                            
0000A0BC                            loc_847A:
0000A0BC 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
0000A0C2 7218                       		moveq	#$18,d1
0000A0C4 5428 001A                  		addq.b	#2,obFrame(a0)
0000A0C8                            
0000A0C8                            loc_8486:
0000A0C8 7000                       		moveq	#0,d0
0000A0CA 1028 001A                  		move.b	obFrame(a0),d0
0000A0CE D040                       		add.w	d0,d0
0000A0D0 2668 0004                  		movea.l	obMap(a0),a3
0000A0D4 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000A0D8 524B                       		addq.w	#1,a3
0000A0DA 08E8 0005 0001             		bset	#5,obRender(a0)
0000A0E0 1810                       		move.b	0(a0),d4
0000A0E2 1A28 0001                  		move.b	obRender(a0),d5
0000A0E6 2248                       		movea.l	a0,a1
0000A0E8 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A0EE 1284                       		move.b	d4,0(a1)
0000A0F0 234B 0004                  		move.l	a3,obMap(a1)
0000A0F4 1345 0001                  		move.b	d5,obRender(a1)
0000A0F8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A0FE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A104 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A10A 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A110 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A116 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A11A 5341                       		subq.w	#1,d1
0000A11C 43F8 D800                  		lea		(v_lvlobjspace).w,a1
0000A120 303C 005F                  		move.w	#$5F,d0
0000A124                            ; ===========================================================================
0000A124                            
0000A124                            loc_84AA:
0000A124 4A11                       		tst.b	(a1)
0000A126 6700                       		beq.s	@cont		
0000A128 43E9 0040                  		lea		$40(a1),a1
0000A12C 51C8 FFF6                  		dbf		d0,loc_84AA	
0000A130 6600                       		bne.s	loc_84F2	
0000A132                            	@cont:
0000A132 5A4B                       		addq.w	#5,a3
0000A134                            
0000A134                            loc_84B2:
0000A134 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A13A 1284                       		move.b	d4,0(a1)
0000A13C 234B 0004                  		move.l	a3,obMap(a1)
0000A140 1345 0001                  		move.b	d5,obRender(a1)
0000A144 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A14A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A150 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A156 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A15C 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A162 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A166 6100 0000                  		bsr.w	DisplaySprite1
0000A16A                            
0000A16A                            loc_84EE:
0000A16A 51C9 FFB8                  		dbf	d1,loc_84AA
0000A16E                            
0000A16E                            loc_84F2:
0000A16E 6100 0000                  		bsr.w	DisplaySprite
0000A17C                            ; ===========================================================================
0000A17C                            ; ---------------------------------------------------------------------------
0000A17C                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000A17C                            ; ---------------------------------------------------------------------------
0000A17C 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000A18C 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000A196 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000A19E 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000A1A6                            
0000A1A6                            ; ---------------------------------------------------------------------------
0000A1A6                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000A1A6                            ; ---------------------------------------------------------------------------
0000A1A6                            
0000A1A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A1A6                            
0000A1A6                            
0000A1A6                            SlopeObject2:
0000A1A6 43F8 D000                  		lea	(v_player).w,a1
0000A1AA 0829 0003 0022             		btst	#3,obStatus(a1)
0000A1B0 6700                       		beq.s	locret_856E
0000A1B2 3029 0008                  		move.w	obX(a1),d0
0000A1B6 9068 0008                  		sub.w	obX(a0),d0
0000A1BA D041                       		add.w	d1,d0
0000A1BC E248                       		lsr.w	#1,d0
0000A1BE 0828 0000 0001             		btst	#0,obRender(a0)
0000A1C4 6700                       		beq.s	loc_854E
0000A1C6 4640                       		not.w	d0
0000A1C8 D041                       		add.w	d1,d0
0000A1CA                            
0000A1CA                            loc_854E:
0000A1CA 7200                       		moveq	#0,d1
0000A1CC 1232 0000                  		move.b	(a2,d0.w),d1
0000A1D0 3028 000C                  		move.w	obY(a0),d0
0000A1D4 9041                       		sub.w	d1,d0
0000A1D6 7200                       		moveq	#0,d1
0000A1D8 1229 0016                  		move.b	obHeight(a1),d1
0000A1DC 9041                       		sub.w	d1,d0
0000A1DE 3340 000C                  		move.w	d0,obY(a1)
0000A1E2 9468 0008                  		sub.w	obX(a0),d2
0000A1E6 9569 0008                  		sub.w	d2,obX(a1)
0000A1EA                            
0000A1EA                            locret_856E:
0000A1EA 4E75                       		rts	
0000A1EC                            ; End of function SlopeObject2
0000A1EC                            
0000A1EC                            ; ===========================================================================
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC                            ; Collision data for GHZ collapsing ledge
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC                            Ledge_SlopeData:
0000A1EC                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
0000A21C                            		even
0000A21C                            
0000A21C                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
0000A21C                            ; ---------------------------------------------------------------------------
0000A21C                            ; Sprite mappings - GHZ	collapsing ledge
0000A21C                            ; ---------------------------------------------------------------------------
0000A21C                            Map_Ledge_internal:
0000A21C 0000                       		dc.w @left-Map_Ledge_internal
0000A21E 0000                       		dc.w @right-Map_Ledge_internal
0000A220 0000                       		dc.w @leftsmash-Map_Ledge_internal
0000A222 0000                       		dc.w @rightsmash-Map_Ledge_internal
0000A224 10                         @left:		dc.b $10
0000A225 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000A22A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A22F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A234 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A239 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A23E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A243 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A248 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A24D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A252 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A257 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A25C 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A261 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A266 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A26B 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A270 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A275 10                         @right:		dc.b $10
0000A276 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000A27B D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A280 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A285 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A28A D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A28F D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A294 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A299 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A29E F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A2A3 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A2A8 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A2AD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A2B2 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A2B7 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A2BC 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A2C1 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A2C6 19                         @leftsmash:	dc.b $19
0000A2C7 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A2CC C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A2D1 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A2D6 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A2DB E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A2E0 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A2E5 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A2EA E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A2EF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A2F4 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A2F9 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A2FE F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A303 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A308 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A30D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A312 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A317 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A31C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A321 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A326 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A32B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A330 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A335 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A33A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A33F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A344 19                         @rightsmash:	dc.b $19
0000A345 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A34A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A34F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A354 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A359 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A35E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A363 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A368 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A36D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A372 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A377 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A37C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A381 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A386 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A38B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A390 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A395 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A39A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A39F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A3A4 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A3A9 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A3AE 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A3B3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A3B8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A3BD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A3C2                            		even
0000A3C2                            		even
0000A3C2                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
0000A3C2                            ; ---------------------------------------------------------------------------
0000A3C2                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A3C2                            ; ---------------------------------------------------------------------------
0000A3C2                            Map_CFlo_internal:
0000A3C2 0000                       		dc.w byte_874E-Map_CFlo_internal
0000A3C4 0000                       		dc.w byte_8763-Map_CFlo_internal
0000A3C6 0000                       		dc.w byte_878C-Map_CFlo_internal
0000A3C8 0000                       		dc.w byte_87A1-Map_CFlo_internal
0000A3CA 04                         byte_874E:	dc.b 4
0000A3CB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A3D0 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A3D5 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A3DA 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A3DF 08                         byte_8763:	dc.b 8
0000A3E0 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A3E5 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A3EA F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A3EF F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A3F4 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A3F9 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A3FE 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A403 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A408 04                         byte_878C:	dc.b 4
0000A409 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A40E 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A413 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A418 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A41D 08                         byte_87A1:	dc.b 8
0000A41E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A423 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A428 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A42D F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A432 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A437 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A43C 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A441 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A446                            		even
0000A446                            		even
0000A446                            
0000A446                            		include	"_incObj\1C Scenery.asm"
0000A446                            ; ---------------------------------------------------------------------------
0000A446                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A446                            ; ---------------------------------------------------------------------------
0000A446                            
0000A446                            Scenery:
0000A446 7000                       		moveq	#0,d0
0000A448 1028 0024                  		move.b	obRoutine(a0),d0
0000A44C 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A450 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A454                            ; ===========================================================================
0000A454 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A456 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A458                            ; ===========================================================================
0000A458                            
0000A458                            Scen_Main:	; Routine 0
0000A458 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A45C 7000                       		moveq	#0,d0
0000A45E 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A462 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A466 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A46A 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A46E 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A472 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A478 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A47C 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A480 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A484 3028 0018                  		move.w obPriority(a0),d0 
0000A488 E248                       		lsr.w #1,d0 
0000A48A 0240 0380                  		andi.w #$380,d0 
0000A48E 3140 0018                  		move.w d0,obPriority(a0)		
0000A492 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A496                            
0000A496                            Scen_ChkDel:	; Routine 2
0000A4B4 6000 0000                  		bra.w	DisplaySprite
0000A4B8                            ; ===========================================================================
0000A4B8                            ; ---------------------------------------------------------------------------
0000A4B8                            ; Variables for	object $1C are stored in an array
0000A4B8                            ; ---------------------------------------------------------------------------
0000A4B8 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A4BC 44D8                       		dc.w $44D8		; VRAM setting
0000A4BE 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A4C2 0000 0000                  		dc.l Map_Scen
0000A4C6 44D8                       		dc.w $44D8
0000A4C8 0008 0200                  		dc.b 0,	8, 2, 0
0000A4CC 0000 0000                  		dc.l Map_Scen
0000A4D0 44D8                       		dc.w $44D8
0000A4D2 0008 0200                  		dc.b 0,	8, 2, 0
0000A4D6 0000 9580                  		dc.l Map_Bri
0000A4DA 438E                       		dc.w $438E
0000A4DC 0110 0100                  		dc.b 1,	$10, 1,	0
0000A4E0                            		even
0000A4E0                            		even
0000A4E0                            Map_Scen:	include	"_maps\Scenery.asm"
0000A4E0                            ; ---------------------------------------------------------------------------
0000A4E0                            ; Sprite mappings - SLZ	lava thrower
0000A4E0                            ; ---------------------------------------------------------------------------
0000A4E0                            Map_Scen_internal:
0000A4E0 0000                       		dc.w byte_8858-Map_Scen_internal
0000A4E2 01                         byte_8858:	dc.b 1
0000A4E3 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A4E8                            		even
0000A4E8                            		even
0000A4E8                            
0000A4E8                            		include	"_incObj\1D Unused Switch.asm"
0000A4E8                            ; ---------------------------------------------------------------------------
0000A4E8                            ; Object 1D - switch that activates when Sonic touches it
0000A4E8                            ; (this	is not used anywhere in	the game)
0000A4E8                            ; ---------------------------------------------------------------------------
0000A4E8                            
0000A4E8                            MagicSwitch:
0000A4E8 7000                       		moveq	#0,d0
0000A4EA 1028 0024                  		move.b	obRoutine(a0),d0
0000A4EE 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A4F2 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A4F6                            ; ===========================================================================
0000A4F6 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A4F8 0000                       		dc.w Swi_Action-Swi_Index
0000A4FA 0000                       		dc.w Swi_Delete-Swi_Index
0000A4FC                            
0000A4FC =00000030                  swi_origY:	equ $30		; original y-axis position
0000A4FC                            ; ===========================================================================
0000A4FC                            
0000A4FC                            Swi_Main:	; Routine 0
0000A4FC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A500 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A508 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A50E 117C 0004 0001             		move.b	#4,obRender(a0)
0000A514 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A51A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A520 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A526                            
0000A526                            Swi_Action:	; Routine 2
0000A526 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A52C 323C 0010                  		move.w	#$10,d1
0000A530 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A534 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A536                            
0000A536 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A53A 7001                       		moveq	#1,d0
0000A53C 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A540                            
0000A540                            Swi_ChkDel:
0000A540 6100 0000                  		bsr.w	DisplaySprite
0000A562 4E75                       		rts	
0000A564                            ; ===========================================================================
0000A564                            
0000A564                            Swi_Delete:	; Routine 4
0000A564 6100 0000                  		bsr.w	DeleteObject
0000A568 4E75                       		rts	
0000A56A                            
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A                            ; Subroutine to	check if Sonic touches the object
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A                            
0000A56A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A56A                            
0000A56A                            
0000A56A                            Swi_ChkTouch:
0000A56A 43F8 D000                  		lea	(v_player).w,a1
0000A56E 3029 0008                  		move.w	obX(a1),d0
0000A572 9068 0008                  		sub.w	obX(a0),d0
0000A576 D041                       		add.w	d1,d0
0000A578 6B00                       		bmi.s	Swi_NoTouch
0000A57A D241                       		add.w	d1,d1
0000A57C B041                       		cmp.w	d1,d0
0000A57E 6400                       		bcc.s	Swi_NoTouch
0000A580 3429 000C                  		move.w	obY(a1),d2
0000A584 1229 0016                  		move.b	obHeight(a1),d1
0000A588 4881                       		ext.w	d1
0000A58A D242                       		add.w	d2,d1
0000A58C 3028 000C                  		move.w	obY(a0),d0
0000A590 0440 0010                  		subi.w	#$10,d0
0000A594 9041                       		sub.w	d1,d0
0000A596 6200                       		bhi.s	Swi_NoTouch
0000A598 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A59C 6500                       		bcs.s	Swi_NoTouch
0000A59E 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A5A0 4E75                       		rts	
0000A5A2                            ; ===========================================================================
0000A5A2                            
0000A5A2                            Swi_NoTouch:
0000A5A2 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A5A4 4E75                       		rts	
0000A5A6                            ; End of function Swi_ChkTouch
0000A5A6                            ; End of function Swi_ChkTouch
0000A5A6                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A5A6                            ; ---------------------------------------------------------------------------
0000A5A6                            ; Sprite mappings - Unused switch thingy
0000A5A6                            ; ---------------------------------------------------------------------------
0000A5A6                            Map_Swi_internal:
0000A5A6 0000                       		dc.w byte_891E-Map_Swi_internal
0000A5A8 04                         byte_891E:	dc.b 4
0000A5A9 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A5AE 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A5B3 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A5B8 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A5BE 00                         		even
0000A5BE 00                         		even
0000A5BE                            
0000A5BE                            		include	"_incObj\2A SBZ Small Door.asm"
0000A5BE                            ; ---------------------------------------------------------------------------
0000A5BE                            ; Object 2A - small vertical door (SBZ)
0000A5BE                            ; ---------------------------------------------------------------------------
0000A5BE                            
0000A5BE                            AutoDoor:
0000A5BE 7000                       		moveq	#0,d0
0000A5C0 1028 0024                  		move.b	obRoutine(a0),d0
0000A5C4 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A5C8 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A5CC                            ; ===========================================================================
0000A5CC 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A5CE 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A5D0                            ; ===========================================================================
0000A5D0                            
0000A5D0                            ADoor_Main:	; Routine 0
0000A5D0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A5D4 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A5DC 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A5E2 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A5E8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A5EE                            		;move.b	#4,obPriority(a0)
0000A5EE                            
0000A5EE                            ADoor_OpenShut:	; Routine 2
0000A5EE 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A5F2 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A5F6 3038 D008                  		move.w	(v_player+obX).w,d0
0000A5FA D041                       		add.w	d1,d0
0000A5FC B068 0008                  		cmp.w	obX(a0),d0
0000A600 6500                       		bcs.s	ADoor_Animate
0000A602 9041                       		sub.w	d1,d0
0000A604 9041                       		sub.w	d1,d0
0000A606 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A60A 6400                       		bcc.s	ADoor_Animate	; close door
0000A60C D041                       		add.w	d1,d0
0000A60E B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A612 6400                       		bcc.s	loc_899A	; if yes, branch
0000A614 0828 0000 0022             		btst	#0,obStatus(a0)
0000A61A 6600                       		bne.s	ADoor_Animate
0000A61C 6000                       		bra.s	ADoor_Open
0000A61E                            ; ===========================================================================
0000A61E                            
0000A61E                            loc_899A:
0000A61E 0828 0000 0022             		btst	#0,obStatus(a0)
0000A624 6700                       		beq.s	ADoor_Animate
0000A626                            
0000A626                            ADoor_Open:
0000A626 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A62C                            
0000A62C                            ADoor_Animate:
0000A62C 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A632 6100 0000                  		bsr.w	AnimateSprite
0000A636 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A63A 6600                       		bne.s	@remember	; if yes, branch
0000A63C 323C 0011                  		move.w	#$11,d1
0000A640 343C 0020                  		move.w	#$20,d2
0000A644 3602                       		move.w	d2,d3
0000A646 5243                       		addq.w	#1,d3
0000A648 3828 0008                  		move.w	obX(a0),d4
0000A64C 6100 0000                  		bsr.w	SolidObject
0000A650                            
0000A650                            	@remember:
0000A650 6000 0000                  		bra.w	RememberState
0000A650 6000 0000                  		bra.w	RememberState
0000A654                            		include	"_anim\SBZ Small Door.asm"
0000A654                            ; ---------------------------------------------------------------------------
0000A654                            ; Animation script - doors (SBZ)
0000A654                            ; ---------------------------------------------------------------------------
0000A654 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A656 0000                       		dc.w @open-Ani_ADoor
0000A658 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A664 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A670                            		even
0000A670                            		even
0000A670                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A670                            ; --------------------------------------------------------------------------------
0000A670                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A670                            ; --------------------------------------------------------------------------------
0000A670                            
0000A670                            SME_YnmwF:	
0000A670 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A674 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A678 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A67C 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A680 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A682 02                         SME_YnmwF_12:	dc.b 2	
0000A683 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A688 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A68D 02                         SME_YnmwF_1D:	dc.b 2	
0000A68E DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A693 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A698 02                         SME_YnmwF_28:	dc.b 2	
0000A699 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A69E 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A6A3 02                         SME_YnmwF_33:	dc.b 2	
0000A6A4 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A6A9 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A6AE 02                         SME_YnmwF_3E:	dc.b 2	
0000A6AF D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A6B4 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A6B9 02                         SME_YnmwF_49:	dc.b 2	
0000A6BA CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A6BF 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A6C4 02                         SME_YnmwF_54:	dc.b 2	
0000A6C5 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A6CA 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A6CF 02                         SME_YnmwF_5F:	dc.b 2	
0000A6D0 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A6D5 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A6DA 02                         SME_YnmwF_6A:	dc.b 2	
0000A6DB C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A6E0 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A6E6 00                         		even
0000A6E6 00                         		even
0000A6E6                            
0000A6E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6E6                            
0000A6E6                            
0000A6E6                            Obj44_SolidWall:
0000A6E6 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A6EA 6700                       		beq.s	loc_8AA8
0000A6EC 6B00 0000                  		bmi.w	loc_8AC4
0000A6F0 4A40                       		tst.w	d0
0000A6F2 6700 0000                  		beq.w	loc_8A92
0000A6F6 6B00                       		bmi.s	loc_8A7C
0000A6F8 4A69 0010                  		tst.w	obVelX(a1)
0000A6FC 6B00                       		bmi.s	loc_8A92
0000A6FE 6000                       		bra.s	loc_8A82
0000A700                            ; ===========================================================================
0000A700                            
0000A700                            loc_8A7C:
0000A700 4A69 0010                  		tst.w	obVelX(a1)
0000A704 6A00                       		bpl.s	loc_8A92
0000A706                            
0000A706                            loc_8A82:
0000A706 9169 0008                  		sub.w	d0,obX(a1)
0000A70A 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A710 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A716                            
0000A716                            loc_8A92:
0000A716 0829 0001 0022             		btst	#1,obStatus(a1)
0000A71C 6600                       		bne.s	loc_8AB6
0000A71E 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A724 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A72A 4E75                       		rts	
0000A72C                            ; ===========================================================================
0000A72C                            
0000A72C                            loc_8AA8:
0000A72C 0828 0005 0022             		btst	#5,obStatus(a0)
0000A732 6700                       		beq.s	locret_8AC2
0000A734 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A73A                            
0000A73A                            loc_8AB6:
0000A73A 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A740 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A746                            
0000A746                            locret_8AC2:
0000A746 4E75                       		rts	
0000A748                            ; ===========================================================================
0000A748                            
0000A748                            loc_8AC4:
0000A748 4A69 0012                  		tst.w	obVelY(a1)
0000A74C 6A00                       		bpl.s	locret_8AD8
0000A74E 4A43                       		tst.w	d3
0000A750 6A00                       		bpl.s	locret_8AD8
0000A752 9769 000C                  		sub.w	d3,obY(a1)
0000A756 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A75C                            
0000A75C                            locret_8AD8:
0000A75C 4E75                       		rts	
0000A75E                            ; End of function Obj44_SolidWall
0000A75E                            
0000A75E                            
0000A75E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A75E                            
0000A75E                            
0000A75E                            Obj44_SolidWall2:
0000A75E 43F8 D000                  		lea	(v_player).w,a1
0000A762 3029 0008                  		move.w	obX(a1),d0
0000A766 9068 0008                  		sub.w	obX(a0),d0
0000A76A D041                       		add.w	d1,d0
0000A76C 6B00                       		bmi.s	loc_8B48
0000A76E 3601                       		move.w	d1,d3
0000A770 D643                       		add.w	d3,d3
0000A772 B043                       		cmp.w	d3,d0
0000A774 6200                       		bhi.s	loc_8B48
0000A776 1629 0016                  		move.b	obHeight(a1),d3
0000A77A 4883                       		ext.w	d3
0000A77C D443                       		add.w	d3,d2
0000A77E 3629 000C                  		move.w	obY(a1),d3
0000A782 9668 000C                  		sub.w	obY(a0),d3
0000A786 D642                       		add.w	d2,d3
0000A788 6B00                       		bmi.s	loc_8B48
0000A78A 3802                       		move.w	d2,d4
0000A78C D844                       		add.w	d4,d4
0000A78E B644                       		cmp.w	d4,d3
0000A790 6400                       		bhs.s	loc_8B48
0000A792 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A796 6B00                       		bmi.s	loc_8B48
0000A798 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A79E 6400                       		bhs.s	loc_8B48
0000A7A0 4A78 FE08                  		tst.w	(v_debuguse).w
0000A7A4 6600                       		bne.s	loc_8B48
0000A7A6 3A00                       		move.w	d0,d5
0000A7A8 B240                       		cmp.w	d0,d1
0000A7AA 6400                       		bhs.s	loc_8B30
0000A7AC D241                       		add.w	d1,d1
0000A7AE 9041                       		sub.w	d1,d0
0000A7B0 3A00                       		move.w	d0,d5
0000A7B2 4445                       		neg.w	d5
0000A7B4                            
0000A7B4                            loc_8B30:
0000A7B4 3203                       		move.w	d3,d1
0000A7B6 B443                       		cmp.w	d3,d2
0000A7B8 6400                       		bhs.s	loc_8B3C
0000A7BA 9644                       		sub.w	d4,d3
0000A7BC 3203                       		move.w	d3,d1
0000A7BE 4441                       		neg.w	d1
0000A7C0                            
0000A7C0                            loc_8B3C:
0000A7C0 BA41                       		cmp.w	d1,d5
0000A7C2 6200                       		bhi.s	loc_8B44
0000A7C4 7801                       		moveq	#1,d4
0000A7C6 4E75                       		rts	
0000A7C8                            ; ===========================================================================
0000A7C8                            
0000A7C8                            loc_8B44:
0000A7C8 78FF                       		moveq	#-1,d4
0000A7CA 4E75                       		rts	
0000A7CC                            ; ===========================================================================
0000A7CC                            
0000A7CC                            loc_8B48:
0000A7CC 7800                       		moveq	#0,d4
0000A7CE 4E75                       		rts	
0000A7D0                            ; End of function Obj44_SolidWall2
0000A7D0                            
0000A7D0                            ; ===========================================================================
0000A7D0                            
0000A7D0                            		include	"_incObj\1E Ball Hog.asm"
0000A7D0                            ; ---------------------------------------------------------------------------
0000A7D0                            ; Object 1E - Ball Hog enemy (SBZ)
0000A7D0                            ; ---------------------------------------------------------------------------
0000A7D0                            
0000A7D0                            BallHog:
0000A7D0 7000                       		moveq	#0,d0
0000A7D2 1028 0024                  		move.b	obRoutine(a0),d0
0000A7D6 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A7DA 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A7DE                            ; ===========================================================================
0000A7DE 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A7E0 0000                       		dc.w Hog_Action-Hog_Index
0000A7E2                            
0000A7E2 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A7E2                            ; ===========================================================================
0000A7E2                            
0000A7E2                            Hog_Main:	; Routine 0
0000A7E2 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A7E8 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A7EE 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A7F6 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A7FC 117C 0004 0001             		move.b	#4,obRender(a0)
0000A802 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A808 117C 0005 0020             		move.b	#5,obColType(a0)
0000A80E 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A814 6100 0000                  		bsr.w	ObjectFall
0000A818 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A81E 4A41                       		tst.w	d1
0000A820 6A00                       		bpl.s	@floornotfound
0000A822 D368 000C                  		add.w	d1,obY(a0)
0000A826 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A82C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A830                            
0000A830                            	@floornotfound:
0000A830 4E75                       		rts	
0000A832                            ; ===========================================================================
0000A832                            
0000A832                            Hog_Action:	; Routine 2
0000A832 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A838 6100 0000                  		bsr.w	AnimateSprite
0000A83C 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A842 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A844 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A848 6700                       		beq.s	@makeball	; if yes, branch
0000A84A 6000                       		bra.s	@remember
0000A84C                            ; ===========================================================================
0000A84C                            
0000A84C                            @setlaunchflag:
0000A84C 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A850                            
0000A850                            @remember:
0000A850 6000 0000                  		bra.w	RememberState
0000A854                            ; ===========================================================================
0000A854                            
0000A854                            @makeball:
0000A854 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A85A 6100 0000                  		bsr.w	FindFreeObj
0000A85E 6600                       		bne.s	@fail
0000A860 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A864 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A86A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A870 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A876 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A87C 70FC                       		moveq	#-4,d0
0000A87E 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A884 6700                       		beq.s	@noflip		; if not, branch
0000A886 4440                       		neg.w	d0
0000A888 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A88C                            
0000A88C                            	@noflip:
0000A88C D169 0008                  		add.w	d0,obX(a1)
0000A890 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A896 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A89C                            
0000A89C                            	@fail:
0000A89C 60B2                       		bra.s	@remember
0000A89C 60B2                       		bra.s	@remember
0000A89E                            		include	"_incObj\20 Cannonball.asm"
0000A89E                            ; ---------------------------------------------------------------------------
0000A89E                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A89E                            ; ---------------------------------------------------------------------------
0000A89E                            
0000A89E                            Cannonball:
0000A89E 7000                       		moveq	#0,d0
0000A8A0 1028 0024                  		move.b	obRoutine(a0),d0
0000A8A4 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A8A8 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A8AC                            ; ===========================================================================
0000A8AC 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A8AE 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A8B0                            
0000A8B0 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A8B0                            ; ===========================================================================
0000A8B0                            
0000A8B0                            Cbal_Main:	; Routine 0
0000A8B0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A8B4 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A8BA 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A8C2 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A8C8 117C 0004 0001             		move.b	#4,obRender(a0)
0000A8CE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A8D4 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A8DA 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A8E0 7000                       		moveq	#0,d0
0000A8E2 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A8E6 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A8EA 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A8EE 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A8F4                            
0000A8F4                            Cbal_Bounce:	; Routine 2
0000A8F4 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A8FA 4A68 0012                  		tst.w	obVelY(a0)
0000A8FE 6B00                       		bmi.s	Cbal_ChkExplode
0000A900 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A906 4A41                       		tst.w	d1		; has ball hit the floor?
0000A908 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A90A                            
0000A90A D368 000C                  		add.w	d1,obY(a0)
0000A90E 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A914 4A03                       		tst.b	d3
0000A916 6700                       		beq.s	Cbal_ChkExplode
0000A918 6B00                       		bmi.s	loc_8CA4
0000A91A 4A68 0010                  		tst.w	obVelX(a0)
0000A91E 6A00                       		bpl.s	Cbal_ChkExplode
0000A920 4468 0010                  		neg.w	obVelX(a0)
0000A924 6000                       		bra.s	Cbal_ChkExplode
0000A926                            ; ===========================================================================
0000A926                            
0000A926                            loc_8CA4:
0000A926 4A68 0010                  		tst.w	obVelX(a0)
0000A92A 6B00                       		bmi.s	Cbal_ChkExplode
0000A92C 4468 0010                  		neg.w	obVelX(a0)
0000A930                            
0000A930                            Cbal_ChkExplode:
0000A930 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A934 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A936                            
0000A936                            	Cbal_Explode:
0000A936 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A93A 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A93E 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A944 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A948                            ; ===========================================================================
0000A948                            
0000A948                            Cbal_Animate:
0000A948 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A94C 6A00                       		bpl.s	Cbal_Display
0000A94E 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A954 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A95A                            
0000A95A                            Cbal_Display:
0000A95A 6100 0000                  		bsr.w	DisplaySprite
0000A95E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A962 0640 00E0                  		addi.w	#$E0,d0
0000A966 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A96A 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A96E 4E75                       		rts	
0000A96E 4E75                       		rts	
0000A970                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A970                            ; ---------------------------------------------------------------------------
0000A970                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A970                            ; ---------------------------------------------------------------------------
0000A970                            
0000A970                            MissileDissolve:
0000A970 7000                       		moveq	#0,d0
0000A972 1028 0024                  		move.b	obRoutine(a0),d0
0000A976 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A97A 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A97E                            ; ===========================================================================
0000A97E 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A980 0000                       		dc.w MDis_Animate-MDis_Index
0000A982                            ; ===========================================================================
0000A982                            
0000A982                            MDis_Main:	; Routine 0
0000A982 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A986 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A98E 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A994 117C 0004 0001             		move.b	#4,obRender(a0)
0000A99A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A9A0 117C 0000 0020             		move.b	#0,obColType(a0)
0000A9A6 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A9AC 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A9B2 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A9C2                            
0000A9C2                            MDis_Animate:	; Routine 2
0000A9C2 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A9C6 6A00                       		bpl.s	@display
0000A9C8 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A9CE 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A9D2 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A9D8 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A9DC                            
0000A9DC                            	@display:
0000A9DC 6000 0000                  		bra.w	DisplaySprite
0000A9E0                            ; ===========================================================================
0000A9E0                            
0000A9E0                            ; ---------------------------------------------------------------------------
0000A9E0                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A9E0                            ; ---------------------------------------------------------------------------
0000A9E0                            
0000A9E0                            ExplosionItem:
0000A9E0 7000                       		moveq	#0,d0
0000A9E2 1028 0024                  		move.b	obRoutine(a0),d0
0000A9E6 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A9EA 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A9EE                            ; ===========================================================================
0000A9EE 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A9F0 0000                       		dc.w ExItem_Main-ExItem_Index
0000A9F2 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A9F4                            ; ===========================================================================
0000A9F4                            
0000A9F4                            ExItem_Animal:	; Routine 0
0000A9F4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A9F8 6100 0000                  		bsr.w	FindFreeObj
0000A9FC 6600                       		bne.s	ExItem_Main
0000A9FE 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000AA02 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AA08 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AA0E 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000AA14                            
0000AA14                            ExItem_Main:	; Routine 2
0000AA14 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA18 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000AA20 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AA26 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA2C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AA32 117C 0000 0020             		move.b	#0,obColType(a0)
0000AA38 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AA3E 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AA44 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA54                            
0000AA54                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000AA54 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000AA58 6A00                       		bpl.s	@display
0000AA5A 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AA60 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000AA64 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000AA6A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000AA6E                            
0000AA6E                            	@display:
0000AA6E 6000 0000                  		bra.w	DisplaySprite
0000AA72                            ; ===========================================================================
0000AA72                            ; ---------------------------------------------------------------------------
0000AA72                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000AA72                            ; ---------------------------------------------------------------------------
0000AA72                            
0000AA72                            ExplosionBomb:
0000AA72 7000                       		moveq	#0,d0
0000AA74 1028 0024                  		move.b	obRoutine(a0),d0
0000AA78 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000AA7C 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000AA80                            ; ===========================================================================
0000AA80 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000AA82 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000AA84                            ; ===========================================================================
0000AA84                            
0000AA84                            ExBom_Main:	; Routine 0
0000AA84 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA88 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000AA90 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AA96 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA9C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AAA2 117C 0000 0020             		move.b	#0,obColType(a0)
0000AAA8 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AAAE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AAB4 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AAC4                            		include	"_anim\Ball Hog.asm"
0000AAC4                            ; ---------------------------------------------------------------------------
0000AAC4                            ; Animation script - doors (SBZ)
0000AAC4                            ; ---------------------------------------------------------------------------
0000AAC4 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000AAC6 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000AADE 00                         		even
0000AADE 00                         		even
0000AADE                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000AADE                            ; --------------------------------------------------------------------------------
0000AADE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AADE                            ; --------------------------------------------------------------------------------
0000AADE                            
0000AADE                            SME_ZER01:	
0000AADE 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000AAE2 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000AAE6 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000AAEA 02                         SME_ZER01_C:	dc.b 2	
0000AAEB EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AAF0 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000AAF5 02                         SME_ZER01_17:	dc.b 2	
0000AAF6 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AAFB FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000AB00 02                         SME_ZER01_22:	dc.b 2	
0000AB01 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000AB06 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000AB0B 02                         SME_ZER01_2D:	dc.b 2	
0000AB0C E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000AB11 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000AB16 01                         SME_ZER01_38:	dc.b 1	
0000AB17 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000AB1C 01                         SME_ZER01_3E:	dc.b 1	
0000AB1D F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000AB22                            		even
0000AB22                            		even
0000AB22                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000AB22                            ; ---------------------------------------------------------------------------
0000AB22                            ; Sprite mappings - buzz bomber missile vanishing
0000AB22                            ; ---------------------------------------------------------------------------
0000AB22                            Map_MisDissolve_internal:
0000AB22 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000AB24 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000AB26 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000AB28 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000AB2A 01                         byte_8EAE:	dc.b 1
0000AB2B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000AB30 01                         byte_8EB4:	dc.b 1
0000AB31 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000AB36 01                         byte_8EBA:	dc.b 1
0000AB37 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000AB3C 01                         byte_8EC0:	dc.b 1
0000AB3D F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000AB42                            		even
0000AB42                            		even
0000AB42                            		include	"_maps\Explosions.asm"
0000AB42                            ; ---------------------------------------------------------------------------
0000AB42                            ; Sprite mappings - explosion from a badnik or monitor
0000AB42                            ; ---------------------------------------------------------------------------
0000AB42 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000AB46 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000AB4A 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000AB4C 01                         byte_8ED0:	dc.b 1
0000AB4D F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000AB52 01                         byte_8ED6:	dc.b 1
0000AB53 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000AB58 01                         byte_8EDC:	dc.b 1
0000AB59 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000AB5E 04                         byte_8EE2:	dc.b 4
0000AB5F EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000AB64 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000AB69 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000AB6E FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000AB73 04                         byte_8EF7:	dc.b 4
0000AB74 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000AB79 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000AB7E 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000AB83 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000AB88                            		even
0000AB88                            ; ---------------------------------------------------------------------------
0000AB88                            ; Sprite mappings - explosion from when	a boss is destroyed
0000AB88                            ; ---------------------------------------------------------------------------
0000AB88 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000AB8A 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000AB8C 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000AB8E FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000AB90 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000AB92 01                         byte_8F16:	dc.b 1
0000AB93 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000AB98 01                         byte_8F1C:	dc.b 1
0000AB99 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000AB9E                            		even
0000AB9E                            		even
0000AB9E                            
0000AB9E                            		include	"_incObj\28 Animals.asm"
0000AB9E                            ; ---------------------------------------------------------------------------
0000AB9E                            ; Object 28 - animals
0000AB9E                            ; ---------------------------------------------------------------------------
0000AB9E                            
0000AB9E                            Animals:
0000AB9E 7000                       		moveq	#0,d0
0000ABA0 1028 0024                  		move.b	obRoutine(a0),d0
0000ABA4 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000ABA8 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000ABAC                            ; ===========================================================================
0000ABAC 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000ABB0 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000ABB4 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000ABB8 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000ABBC 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000ABC0 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000ABC4 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000ABC8 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000ABCC 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000ABD0 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000ABD4 0000                       		dc.w loc_92D6-Anml_Index
0000ABD6                            
0000ABD6 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000ABE2                            
0000ABE2 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000ABE6 0000 0000                  		dc.l Map_Animal1
0000ABEA FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000ABEE 0000 0000                  		dc.l Map_Animal2	; mappings address
0000ABF2 FE80 FD00                  		dc.w $FE80, $FD00
0000ABF6 0000 0000                  		dc.l Map_Animal1
0000ABFA FEC0 FE80                  		dc.w $FEC0, $FE80
0000ABFE 0000 0000                  		dc.l Map_Animal2
0000AC02 FE40 FD00                  		dc.w $FE40, $FD00
0000AC06 0000 0000                  		dc.l Map_Animal3
0000AC0A FD00 FC00                  		dc.w $FD00, $FC00
0000AC0E 0000 0000                  		dc.l Map_Animal2
0000AC12 FD80 FC80                  		dc.w $FD80, $FC80
0000AC16 0000 0000                  		dc.l Map_Animal3
0000AC1A                            
0000AC1A FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000AC2A FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000AC3A FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AC46                            
0000AC46 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AC5A 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AC6E 0000 0000                  		dc.l Map_Animal3
0000AC72                            
0000AC72 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AC84 0565 05B3                  		dc.w $565, $5B3
0000AC88                            ; ===========================================================================
0000AC88                            
0000AC88                            Anml_Ending:	; Routine 0
0000AC88 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AC8C 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AC90 7000                       		moveq	#0,d0
0000AC92 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AC96 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AC98 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AC9C 0440 0014                  		subi.w	#$14,d0
0000ACA0 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000ACA6 D040                       		add.w	d0,d0
0000ACA8 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000ACAE 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000ACB2 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000ACB8 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000ACBE 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000ACC4 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000ACCA 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000ACD0 117C 0004 0001             		move.b	#4,obRender(a0)
0000ACD6 08E8 0000 0001             		bset	#0,obRender(a0)
0000ACDC 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000ACE2 117C 0008 0014             		move.b	#8,obActWid(a0)
0000ACE8 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000ACEE 6000 0000                  		bra.w	DisplaySprite
0000ACF2                            ; ===========================================================================
0000ACF2                            
0000ACF2                            Anml_FromEnemy:
0000ACF2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ACF6 6100 8D18                  		bsr.w	RandomNumber
0000ACFA 0240 0001                  		andi.w	#1,d0
0000ACFE 7200                       		moveq	#0,d1
0000AD00 1238 FE10                  		move.b	(v_zone).w,d1
0000AD04 D241                       		add.w	d1,d1
0000AD06 D240                       		add.w	d0,d1
0000AD08 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000AD0C 1031 1000                  		move.b	(a1,d1.w),d0
0000AD10 1140 0030                  		move.b	d0,$30(a0)
0000AD14 E748                       		lsl.w	#3,d0
0000AD16 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AD1A D2C0                       		adda.w	d0,a1
0000AD1C 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AD20 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AD24 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AD28 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AD2E 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AD34 6700                       		beq.s	loc_90C0	; if yes, branch
0000AD36 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AD3C                            
0000AD3C                            loc_90C0:
0000AD3C 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AD42 117C 0004 0001             		move.b	#4,obRender(a0)
0000AD48 08E8 0000 0001             		bset	#0,obRender(a0)
0000AD4E 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AD54 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AD5A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AD60 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AD66 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AD6C 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AD70 6600                       		bne.s	loc_911C
0000AD72 6100 0000                  		bsr.w	FindFreeObj
0000AD76 6600                       		bne.s	Anml_Display
0000AD78 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AD7C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AD82 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AD88 3028 003E                  		move.w	$3E(a0),d0
0000AD8C E248                       		lsr.w	#1,d0
0000AD8E 1340 001A                  		move.b	d0,obFrame(a1)
0000AD92                            
0000AD92                            Anml_Display:
0000AD92 6000 0000                  		bra.w	DisplaySprite
0000AD96                            ; ===========================================================================
0000AD96                            
0000AD96                            loc_911C:
0000AD96 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AD9C 4268 0010                  		clr.w	obVelX(a0)
0000ADA0 6000 0000                  		bra.w	DisplaySprite
0000ADA4                            ; ===========================================================================
0000ADA4                            
0000ADA4                            loc_912A:
0000ADA4 4A28 0001                  		tst.b	obRender(a0)
0000ADA8 6A00 0000                  		bpl.w	DeleteObject
0000ADAC 6100 0000                  		bsr.w	ObjectFall
0000ADB0 4A68 0012                  		tst.w	obVelY(a0)
0000ADB4 6B00                       		bmi.s	loc_9180
0000ADB6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADBC 4A41                       		tst.w	d1
0000ADBE 6A00                       		bpl.s	loc_9180
0000ADC0 D368 000C                  		add.w	d1,obY(a0)
0000ADC4 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ADCA 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADD0 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ADD6 1028 0030                  		move.b	$30(a0),d0
0000ADDA D000                       		add.b	d0,d0
0000ADDC 5800                       		addq.b	#4,d0
0000ADDE 1140 0024                  		move.b	d0,obRoutine(a0)
0000ADE2 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ADE6 6700                       		beq.s	loc_9180
0000ADE8 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000ADEE 6700                       		beq.s	loc_9180
0000ADF0 4468 0010                  		neg.w	obVelX(a0)
0000ADF4 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADFA                            
0000ADFA                            loc_9180:
0000ADFA 6000 0000                  		bra.w	DisplaySprite
0000ADFE                            ; ===========================================================================
0000ADFE                            
0000ADFE                            loc_9184:
0000ADFE 6100 0000                  		bsr.w	ObjectFall
0000AE02 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AE08 4A68 0012                  		tst.w	obVelY(a0)
0000AE0C 6B00                       		bmi.s	loc_91AE
0000AE0E 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AE14 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE1A 4A41                       		tst.w	d1
0000AE1C 6A00                       		bpl.s	loc_91AE
0000AE1E D368 000C                  		add.w	d1,obY(a0)
0000AE22 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE28                            
0000AE28                            loc_91AE:
0000AE28 4A28 0028                  		tst.b	obSubtype(a0)
0000AE2C 6600                       		bne.s	loc_9224
0000AE2E 4A28 0001                  		tst.b	obRender(a0)
0000AE32 6A00 0000                  		bpl.w	DeleteObject
0000AE36 6000 0000                  		bra.w	DisplaySprite
0000AE3A                            ; ===========================================================================
0000AE3A                            
0000AE3A                            loc_91C0:
0000AE3A 6100 0000                  		bsr.w	SpeedToPos
0000AE3E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AE44 4A68 0012                  		tst.w	obVelY(a0)
0000AE48 6B00                       		bmi.s	loc_91FC
0000AE4A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE50 4A41                       		tst.w	d1
0000AE52 6A00                       		bpl.s	loc_91FC
0000AE54 D368 000C                  		add.w	d1,obY(a0)
0000AE58 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE5E 4A28 0028                  		tst.b	obSubtype(a0)
0000AE62 6700                       		beq.s	loc_91FC
0000AE64 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AE6A 6700                       		beq.s	loc_91FC
0000AE6C 4468 0010                  		neg.w	obVelX(a0)
0000AE70 0868 0000 0001             		bchg	#0,obRender(a0)
0000AE76                            
0000AE76                            loc_91FC:
0000AE76 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AE7A 6A00                       		bpl.s	loc_9212
0000AE7C 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AE82 5228 001A                  		addq.b	#1,obFrame(a0)
0000AE86 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE8C                            
0000AE8C                            loc_9212:
0000AE8C 4A28 0028                  		tst.b	obSubtype(a0)
0000AE90 6600                       		bne.s	loc_9224
0000AE92 4A28 0001                  		tst.b	obRender(a0)
0000AE96 6A00 0000                  		bpl.w	DeleteObject
0000AE9A 6000 0000                  		bra.w	DisplaySprite
0000AE9E                            ; ===========================================================================
0000AE9E                            
0000AE9E                            loc_9224:
0000AE9E 3028 0008                  		move.w	obX(a0),d0
0000AEA2 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AEA6 6500                       		bcs.s	loc_923C
0000AEA8 0440 0180                  		subi.w	#$180,d0
0000AEAC 6A00                       		bpl.s	loc_923C
0000AEAE 4A28 0001                  		tst.b	obRender(a0)
0000AEB2 6A00 0000                  		bpl.w	DeleteObject
0000AEB6                            
0000AEB6                            loc_923C:
0000AEB6 6000 0000                  		bra.w	DisplaySprite
0000AEBA                            ; ===========================================================================
0000AEBA                            
0000AEBA                            loc_9240:
0000AEBA 4A28 0001                  		tst.b	obRender(a0)
0000AEBE 6A00 0000                  		bpl.w	DeleteObject
0000AEC2 5368 0036                  		subq.w	#1,$36(a0)
0000AEC6 6600 0000                  		bne.w	loc_925C
0000AECA 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AED0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AED6                            
0000AED6                            loc_925C:
0000AED6 6000 0000                  		bra.w	DisplaySprite
0000AEDA                            ; ===========================================================================
0000AEDA                            
0000AEDA                            loc_9260:
0000AEDA 6100 0000                  		bsr.w	sub_9404
0000AEDE 6400                       		bcc.s	loc_927C
0000AEE0 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AEE6 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AEEC 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AEF2 6000 FF46                  		bra.w	loc_91C0
0000AEF6                            ; ===========================================================================
0000AEF6                            
0000AEF6                            loc_927C:
0000AEF6 6000 FFA6                  		bra.w	loc_9224
0000AEFA                            ; ===========================================================================
0000AEFA                            
0000AEFA                            loc_9280:
0000AEFA 6100 0000                  		bsr.w	sub_9404
0000AEFE 6A00                       		bpl.s	loc_92B6
0000AF00 4268 0010                  		clr.w	obVelX(a0)
0000AF04 4268 0032                  		clr.w	$32(a0)
0000AF08 6100 0000                  		bsr.w	SpeedToPos
0000AF0C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AF12 6100 0000                  		bsr.w	loc_93C4
0000AF16 6100 0000                  		bsr.w	loc_93EC
0000AF1A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AF1E 6A00                       		bpl.s	loc_92B6
0000AF20 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AF26 5228 001A                  		addq.b	#1,obFrame(a0)
0000AF2A 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AF30                            
0000AF30                            loc_92B6:
0000AF30 6000 FF6C                  		bra.w	loc_9224
0000AF34                            ; ===========================================================================
0000AF34                            
0000AF34                            loc_92BA:
0000AF34 6100 0000                  		bsr.w	sub_9404
0000AF38 6A00                       		bpl.s	loc_9310
0000AF3A 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AF40 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF46 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AF4C 6000 FEB0                  		bra.w	loc_9184
0000AF50                            ; ===========================================================================
0000AF50                            
0000AF50                            loc_92D6:
0000AF50 6100 0000                  		bsr.w	ObjectFall
0000AF54 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AF5A 4A68 0012                  		tst.w	obVelY(a0)
0000AF5E 6B00                       		bmi.s	loc_9310
0000AF60 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AF66 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AF6C 4A41                       		tst.w	d1
0000AF6E 6A00                       		bpl.s	loc_9310
0000AF70 4628 0029                  		not.b	$29(a0)
0000AF74 6600                       		bne.s	loc_9306
0000AF76 4468 0010                  		neg.w	obVelX(a0)
0000AF7A 0868 0000 0001             		bchg	#0,obRender(a0)
0000AF80                            
0000AF80                            loc_9306:
0000AF80 D368 000C                  		add.w	d1,obY(a0)
0000AF84 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF8A                            
0000AF8A                            loc_9310:
0000AF8A 6000 FF12                  		bra.w	loc_9224
0000AF8E                            ; ===========================================================================
0000AF8E                            
0000AF8E                            loc_9314:
0000AF8E 6100 0000                  		bsr.w	sub_9404
0000AF92 6A00                       		bpl.s	loc_932E
0000AF94 4268 0010                  		clr.w	obVelX(a0)
0000AF98 4268 0032                  		clr.w	$32(a0)
0000AF9C 6100 0000                  		bsr.w	ObjectFall
0000AFA0 6100 0000                  		bsr.w	loc_93C4
0000AFA4 6100 0000                  		bsr.w	loc_93EC
0000AFA8                            
0000AFA8                            loc_932E:
0000AFA8 6000 FEF4                  		bra.w	loc_9224
0000AFAC                            ; ===========================================================================
0000AFAC                            
0000AFAC                            loc_9332:
0000AFAC 6100 0000                  		bsr.w	sub_9404
0000AFB0 6A00                       		bpl.s	loc_936C
0000AFB2 6100 0000                  		bsr.w	ObjectFall
0000AFB6 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AFBC 4A68 0012                  		tst.w	obVelY(a0)
0000AFC0 6B00                       		bmi.s	loc_936C
0000AFC2 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AFC8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AFCE 4A41                       		tst.w	d1
0000AFD0 6A00                       		bpl.s	loc_936C
0000AFD2 4468 0010                  		neg.w	obVelX(a0)
0000AFD6 0868 0000 0001             		bchg	#0,obRender(a0)
0000AFDC D368 000C                  		add.w	d1,obY(a0)
0000AFE0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AFE6                            
0000AFE6                            loc_936C:
0000AFE6 6000 FEB6                  		bra.w	loc_9224
0000AFEA                            ; ===========================================================================
0000AFEA                            
0000AFEA                            loc_9370:
0000AFEA 6100 0000                  		bsr.w	sub_9404
0000AFEE 6A00                       		bpl.s	loc_93C0
0000AFF0 6100 0000                  		bsr.w	SpeedToPos
0000AFF4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AFFA 4A68 0012                  		tst.w	obVelY(a0)
0000AFFE 6B00                       		bmi.s	loc_93AA
0000B000 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B006 4A41                       		tst.w	d1
0000B008 6A00                       		bpl.s	loc_93AA
0000B00A 4628 0029                  		not.b	$29(a0)
0000B00E 6600                       		bne.s	loc_93A0
0000B010 4468 0010                  		neg.w	obVelX(a0)
0000B014 0868 0000 0001             		bchg	#0,obRender(a0)
0000B01A                            
0000B01A                            loc_93A0:
0000B01A D368 000C                  		add.w	d1,obY(a0)
0000B01E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B024                            
0000B024                            loc_93AA:
0000B024 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000B028 6A00                       		bpl.s	loc_93C0
0000B02A 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000B030 5228 001A                  		addq.b	#1,obFrame(a0)
0000B034 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000B03A                            
0000B03A                            loc_93C0:
0000B03A 6000 FE62                  		bra.w	loc_9224
0000B03E                            ; ===========================================================================
0000B03E                            
0000B03E                            loc_93C4:
0000B03E 117C 0001 001A             		move.b	#1,obFrame(a0)
0000B044 4A68 0012                  		tst.w	obVelY(a0)
0000B048 6B00                       		bmi.s	locret_93EA
0000B04A 117C 0000 001A             		move.b	#0,obFrame(a0)
0000B050 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B056 4A41                       		tst.w	d1
0000B058 6A00                       		bpl.s	locret_93EA
0000B05A D368 000C                  		add.w	d1,obY(a0)
0000B05E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B064                            
0000B064                            locret_93EA:
0000B064 4E75                       		rts	
0000B066                            ; ===========================================================================
0000B066                            
0000B066                            loc_93EC:
0000B066 08E8 0000 0001             		bset	#0,obRender(a0)
0000B06C 3028 0008                  		move.w	obX(a0),d0
0000B070 9078 D008                  		sub.w	(v_player+obX).w,d0
0000B074 6400                       		bcc.s	locret_9402
0000B076 08A8 0000 0001             		bclr	#0,obRender(a0)
0000B07C                            
0000B07C                            locret_9402:
0000B07C 4E75                       		rts	
0000B07E                            
0000B07E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B07E                            
0000B07E                            
0000B07E                            sub_9404:
0000B07E 3038 D008                  		move.w	(v_player+obX).w,d0
0000B082 9068 0008                  		sub.w	obX(a0),d0
0000B086 0440 00B8                  		subi.w	#$B8,d0
0000B08A 4E75                       		rts	
0000B08C                            ; End of function sub_9404
0000B08C                            ; End of function sub_9404
0000B08C                            		include	"_incObj\29 Points.asm"
0000B08C                            ; ---------------------------------------------------------------------------
0000B08C                            ; Object 29 - points that appear when you destroy something
0000B08C                            ; ---------------------------------------------------------------------------
0000B08C                            
0000B08C                            Points:
0000B08C 7000                       		moveq	#0,d0
0000B08E 1028 0024                  		move.b	obRoutine(a0),d0
0000B092 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000B096 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000B09A 6000 0000                  		bra.w	DisplaySprite
0000B09E                            ; ===========================================================================
0000B09E 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000B0A0 0000                       		dc.w Poi_Slower-Poi_Index
0000B0A2                            ; ===========================================================================
0000B0A2                            
0000B0A2                            Poi_Main:	; Routine 0
0000B0A2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B0A6 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000B0AE 317C 2565 0002             		move.w	#$2565,obGfx(a0)
0000B0B4 117C 0004 0001             		move.b	#4,obRender(a0)
0000B0BA 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B0C0 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B0C6 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000B0CC                            
0000B0CC                            Poi_Slower:	; Routine 2
0000B0CC 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000B0D0 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000B0D4 6100 0000                  		bsr.w	SpeedToPos
0000B0D8 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000B0DE 4E75                       		rts	
0000B0DE 4E75                       		rts	
0000B0E0                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000B0E0                            ; ---------------------------------------------------------------------------
0000B0E0                            ; Sprite mappings - animals
0000B0E0                            ; ---------------------------------------------------------------------------
0000B0E0                            Map_Animal1_internal:
0000B0E0 0000                       		dc.w byte_9472-Map_Animal1_internal
0000B0E2 0000                       		dc.w byte_9478-Map_Animal1_internal
0000B0E4 0000                       		dc.w byte_946C-Map_Animal1_internal
0000B0E6 01                         byte_946C:	dc.b 1
0000B0E7 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B0EC 01                         byte_9472:	dc.b 1
0000B0ED F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000B0F2 01                         byte_9478:	dc.b 1
0000B0F3 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000B0F8                            		even
0000B0F8                            		even
0000B0F8                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000B0F8                            ; ---------------------------------------------------------------------------
0000B0F8                            ; Sprite mappings - animals
0000B0F8                            ; ---------------------------------------------------------------------------
0000B0F8                            Map_Animal2_internal:
0000B0F8 0000                       		dc.w byte_948A-Map_Animal2_internal
0000B0FA 0000                       		dc.w byte_9490-Map_Animal2_internal
0000B0FC 0000                       		dc.w byte_9484-Map_Animal2_internal
0000B0FE 01                         byte_9484:	dc.b 1
0000B0FF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B104 01                         byte_948A:	dc.b 1
0000B105 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000B10A 01                         byte_9490:	dc.b 1
0000B10B FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000B110                            		even
0000B110                            		even
0000B110                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000B110                            ; ---------------------------------------------------------------------------
0000B110                            ; Sprite mappings - animals
0000B110                            ; ---------------------------------------------------------------------------
0000B110                            Map_Animal3_internal:
0000B110 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000B112 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000B114 0000                       		dc.w byte_949C-Map_Animal3_internal
0000B116 01                         byte_949C:	dc.b 1
0000B117 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B11C 01                         byte_94A2:	dc.b 1
0000B11D FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000B122 01                         byte_94A8:	dc.b 1
0000B123 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000B128                            		even
0000B128                            		even
0000B128                            Map_Poi:	include	"_maps\Points.asm"
0000B128                            ; --------------------------------------------------------------------------------
0000B128                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B128                            ; --------------------------------------------------------------------------------
0000B128                            
0000B128                            SME_qLvsg:	
0000B128 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000B12C 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000B130 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000B134 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000B136 01                         SME_qLvsg_E:	dc.b 1	
0000B137 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000B13C 01                         SME_qLvsg_14:	dc.b 1	
0000B13D FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000B142 01                         SME_qLvsg_1A:	dc.b 1	
0000B143 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000B148 01                         SME_qLvsg_20:	dc.b 1	
0000B149 FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000B14E 01                         SME_qLvsg_26:	dc.b 1	
0000B14F FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000B154 02                         SME_qLvsg_2C:	dc.b 2	
0000B155 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B15A FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000B15F 02                         SME_qLvsg_37:	dc.b 2	
0000B160 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B165 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000B16A                            		even
0000B16A                            		even
0000B16A                            
0000B16A                            		include	"_incObj\1F Crabmeat.asm"
0000B16A                            ; ---------------------------------------------------------------------------
0000B16A                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000B16A                            ; ---------------------------------------------------------------------------
0000B16A                            
0000B16A                            Crabmeat:
0000B16A 7000                       		moveq	#0,d0
0000B16C 1028 0024                  		move.b	obRoutine(a0),d0
0000B170 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000B174 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000B178                            ; ===========================================================================
0000B178                            Crab_Index:
0000B178 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000B17A 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000B17C 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000B17E 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000B180 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000B182                            
0000B182 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000B182 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000B182 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000B182 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000B182 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000B182                            
0000B182 =00000030                  crab_timedelay:	equ $30
0000B182 =00000032                  crab_mode:	equ $32
0000B182                            ; ===========================================================================
0000B182                            
0000B182                            Crab_Main:	; Routine 0
0000B182 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000B188 117C 0008 0017             		move.b	#8,obWidth(a0)
0000B18E 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B196 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B19C 117C 0004 0001             		move.b	#4,obRender(a0)
0000B1A2 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B1A8 117C 0006 0020             		move.b	#6,obColType(a0)
0000B1AE 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000B1B4 6100 0000                  		bsr.w	ObjectFall
0000B1B8 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000B1BE 4A41                       		tst.w	d1
0000B1C0 6A00                       		bpl.s	@floornotfound
0000B1C2 D368 000C                  		add.w	d1,obY(a0)
0000B1C6 1143 0026                  		move.b	d3,obAngle(a0)
0000B1CA 317C 0000 0012             		move.w	#0,obVelY(a0)
0000B1D0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B1D4                            
0000B1D4                            	@floornotfound:
0000B1D4 4E75                       		rts	
0000B1D6                            ; ===========================================================================
0000B1D6                            
0000B1D6                            Crab_Action:	; Routine 2
0000B1D6 7000                       		moveq	#0,d0
0000B1D8 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B1DC 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B1E0 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B1E4 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B1EA 6100 0000                  		bsr.w	AnimateSprite
0000B1EE 6000 0000                  		bra.w	RememberState
0000B1F2                            ; ===========================================================================
0000B1F2 0000                       @index:		dc.w @waittofire-@index
0000B1F4 0000                       		dc.w @walkonfloor-@index
0000B1F6                            ; ===========================================================================
0000B1F6                            
0000B1F6                            @waittofire:
0000B1F6 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000B1FA 6A00                       		bpl.s	@dontmove
0000B1FC 4A28 0001                  		tst.b	obRender(a0)
0000B200 6A00                       		bpl.s	@movecrab
0000B202 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000B208 6600                       		bne.s	@fire
0000B20A                            
0000B20A                            	@movecrab:
0000B20A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B20E 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000B214 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000B21A 6100 0000                  		bsr.w	Crab_SetAni
0000B21E 5600                       		addq.b	#3,d0
0000B220 1140 001C                  		move.b	d0,obAnim(a0)
0000B224 0868 0000 0022             		bchg	#0,obStatus(a0)
0000B22A 6600                       		bne.s	@noflip
0000B22C 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000B230                            
0000B230                            	@dontmove:
0000B230                            	@noflip:
0000B230 4E75                       		rts	
0000B232                            ; ===========================================================================
0000B232                            
0000B232                            @fire:
0000B232 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B238 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B23E 6100 0000                  		bsr.w	FindFreeObj
0000B242 6600                       		bne.s	@failleft
0000B244 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B248 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B24E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B254 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B25A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B260 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B266                            
0000B266                            	@failleft:
0000B266 6100 0000                  		bsr.w	FindFreeObj
0000B26A 6600                       		bne.s	@failright
0000B26C 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B270 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B276 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B27C 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B282 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B288 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B28E                            
0000B28E                            	@failright:
0000B28E 4E75                       		rts	
0000B290                            ; ===========================================================================
0000B290                            
0000B290                            @walkonfloor:
0000B290 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B294 6B00                       		bmi.s	loc_966E
0000B296 6100 0000                  		bsr.w	SpeedToPos
0000B29A 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B2A0 6600                       		bne.s	loc_9654
0000B2A2 3628 0008                  		move.w	obX(a0),d3
0000B2A6 0643 0010                  		addi.w	#$10,d3
0000B2AA 0828 0000 0022             		btst	#0,obStatus(a0)
0000B2B0 6700                       		beq.s	loc_9640
0000B2B2 0443 0020                  		subi.w	#$20,d3
0000B2B6                            
0000B2B6                            loc_9640:
0000B2B6 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B2BC 0C41 FFF8                  		cmpi.w	#-8,d1
0000B2C0 6D00                       		blt.s	loc_966E
0000B2C2 0C41 000C                  		cmpi.w	#$C,d1
0000B2C6 6C00                       		bge.s	loc_966E
0000B2C8 4E75                       		rts	
0000B2CA                            ; ===========================================================================
0000B2CA                            
0000B2CA                            loc_9654:
0000B2CA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B2D0 D368 000C                  		add.w	d1,obY(a0)
0000B2D4 1143 0026                  		move.b	d3,obAngle(a0)
0000B2D8 6100 0000                  		bsr.w	Crab_SetAni
0000B2DC 5600                       		addq.b	#3,d0
0000B2DE 1140 001C                  		move.b	d0,obAnim(a0)
0000B2E2 4E75                       		rts	
0000B2E4                            ; ===========================================================================
0000B2E4                            
0000B2E4                            loc_966E:
0000B2E4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B2E8 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B2EE 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B2F4 6100 0000                  		bsr.w	Crab_SetAni
0000B2F8 1140 001C                  		move.b	d0,obAnim(a0)
0000B2FC 4E75                       		rts	
0000B2FE                            ; ---------------------------------------------------------------------------
0000B2FE                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B2FE                            ; ---------------------------------------------------------------------------
0000B2FE                            
0000B2FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2FE                            
0000B2FE                            
0000B2FE                            Crab_SetAni:
0000B2FE 7000                       		moveq	#0,d0
0000B300 1628 0026                  		move.b	obAngle(a0),d3
0000B304 6B00                       		bmi.s	loc_96A4
0000B306 0C03 0006                  		cmpi.b	#6,d3
0000B30A 6500                       		bcs.s	locret_96A2
0000B30C 7001                       		moveq	#1,d0
0000B30E 0828 0000 0022             		btst	#0,obStatus(a0)
0000B314 6600                       		bne.s	locret_96A2
0000B316 7002                       		moveq	#2,d0
0000B318                            
0000B318                            locret_96A2:
0000B318 4E75                       		rts	
0000B31A                            ; ===========================================================================
0000B31A                            
0000B31A                            loc_96A4:
0000B31A 0C03 00FA                  		cmpi.b	#-6,d3
0000B31E 6200                       		bhi.s	locret_96B6
0000B320 7002                       		moveq	#2,d0
0000B322 0828 0000 0022             		btst	#0,obStatus(a0)
0000B328 6600                       		bne.s	locret_96B6
0000B32A 7001                       		moveq	#1,d0
0000B32C                            
0000B32C                            locret_96B6:
0000B32C 4E75                       		rts	
0000B32E                            ; End of function Crab_SetAni
0000B32E                            
0000B32E                            ; ===========================================================================
0000B32E                            
0000B32E                            Crab_Delete:	; Routine 4
0000B32E 6100 0000                  		bsr.w	DeleteObject
0000B332 4E75                       		rts	
0000B334                            ; ===========================================================================
0000B334                            ; ---------------------------------------------------------------------------
0000B334                            ; Sub-object - missile that the	Crabmeat throws
0000B334                            ; ---------------------------------------------------------------------------
0000B334                            
0000B334                            Crab_BallMain:	; Routine 6
0000B334 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B338 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B340 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B346 117C 0004 0001             		move.b	#4,obRender(a0)
0000B34C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B352 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B358 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B35E 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B364 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B36A                            
0000B36A                            Crab_BallMove:	; Routine 8
0000B36A 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B370 6100 0000                  		bsr.w	AnimateSprite
0000B374 6100 0000                  		bsr.w	ObjectFall
0000B378 6100 0000                  		bsr.w	DisplaySprite
0000B37C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B380 0640 00E0                  		addi.w	#$E0,d0
0000B384 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B388 6500                       		bcs.s	@delete		; if yes, branch
0000B38A 4E75                       		rts	
0000B38C                            
0000B38C                            	@delete:
0000B38C 6000 0000                  		bra.w	DeleteObject
0000B38C 6000 0000                  		bra.w	DeleteObject
0000B390                            		include	"_anim\Crabmeat.asm"
0000B390                            ; ---------------------------------------------------------------------------
0000B390                            ; Animation script - Crabmeat enemy
0000B390                            ; ---------------------------------------------------------------------------
0000B390 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B396 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B39C 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B3A0 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B3A4 00                         		even
0000B3A4 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B3A8 00                         		even
0000B3A8 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B3AC 00                         		even
0000B3AC 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B3B2 00                         		even
0000B3B2 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B3B8 00                         		even
0000B3B8 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B3BE 00                         		even
0000B3BE 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B3C2 00                         		even
0000B3C2 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B3C6                            		even
0000B3C6                            		even
0000B3C6                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B3C6                            ; ---------------------------------------------------------------------------
0000B3C6                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B3C6                            ; ---------------------------------------------------------------------------
0000B3C6                            Map_Crab_internal:
0000B3C6 0000                       		dc.w @stand-Map_Crab_internal
0000B3C8 0000                       		dc.w @walk-Map_Crab_internal
0000B3CA 0000                       		dc.w @slope1-Map_Crab_internal
0000B3CC 0000                       		dc.w @slope2-Map_Crab_internal
0000B3CE 0000                       		dc.w @firing-Map_Crab_internal
0000B3D0 0000                       		dc.w @ball1-Map_Crab_internal
0000B3D2 0000                       		dc.w @ball2-Map_Crab_internal
0000B3D4 04                         @stand:		dc.b 4
0000B3D5 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B3DA F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B3DF 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B3E4 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B3E9 04                         @walk:		dc.b 4
0000B3EA F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B3EF F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B3F4 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B3F9 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B3FE 04                         @slope1:	dc.b 4
0000B3FF EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B404 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B409 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B40E FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B413 04                         @slope2:	dc.b 4
0000B414 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B419 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B41E FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B423 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B428 06                         @firing:	dc.b 6
0000B429 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B42E F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B433 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B438 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B43D 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B442 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B447 01                         @ball1:		dc.b 1
0000B448 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B44D 01                         @ball2:		dc.b 1
0000B44E F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B454 00                         		even
0000B454 00                         		even
0000B454                            		include	"_incObj\06 Mozzietron.asm"
0000B454                            ; ===========================================================================
0000B454                            ; ---------------------------------------------------------------------------
0000B454                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B454                            ; ---------------------------------------------------------------------------
0000B454                            
0000B454                            Mozzietron:					; XREF: Obj_Index
0000B454 7000                       		moveq	#0,d0
0000B456 1028 0024                  		move.b	$24(a0),d0
0000B45A 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B45E 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B462                            ; ===========================================================================
0000B462 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B464 0000                       		dc.w MozAction-MozIndex
0000B466 0000                       		dc.w MozDelete-MozIndex
0000B468                            ; ===========================================================================
0000B468                            
0000B468                            MozMain:				; XREF: MozIndex
0000B468 5428 0024                  		addq.b	#2,$24(a0)
0000B46C 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B474 317C 0444 0002             		move.w	#$444,2(a0)
0000B47A 117C 0004 0001             		move.b	#4,1(a0)
0000B480 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B486 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B48C 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B492                            MozAction:				; XREF: MozIndex
0000B492 7000                       		moveq	#0,d0
0000B494 1028 0025                  		move.b	$25(a0),d0
0000B498 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B49C 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B4A0 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B4A6 6100 0000                  		bsr.w	AnimateSprite
0000B4AA 6000 0000                  		bra.w	RememberState
0000B4AE                            ; ===========================================================================
0000B4AE 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B4B0 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B4B2 0000                       		dc.w MozPinned-MozIndex2
0000B4B4                            ; ===========================================================================
0000B4B4                            
0000B4B4                            MozMove:				; XREF: MozIndex2
0000B4B4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B4B8 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B4BA 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B4C0 6600                       		bne.s	MozFire	; if yes, branch
0000B4C2 5428 0025                  		addq.b	#2,$25(a0)
0000B4C6 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B4CC 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B4D2 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B4D8 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B4DE 6600                       		bne.s	locret_986C	; if not, branch
0000B4E0 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B4E4                            
0000B4E4                            locret_986C:
0000B4E4 4E75                       		rts	
0000B4E6                            ; ===========================================================================
0000B4E6                            
0000B4E6                            MozFire:				; XREF: MozMove
0000B4E6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B4EC 6100 0000                  		bsr.w	ObjectFall
0000B4F0 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B4F6 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B4F8 6A00                       		bpl.s   @return ; if yes, branch 
0000B4FA 303C 00B6                  		move.w    #$B6,d0
0000B4FE 4EB9 0000 1254             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B504 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B50A D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B50E 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B512 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B516                            		@return:
0000B516 4E75                       	    		rts
0000B518                            		
0000B518                            
0000B518                            ; ===========================================================================
0000B518                            
0000B518                            MozPinned:
0000B518 4E75                               rts
0000B51A                                    
0000B51A                            ; ===========================================================================
0000B51A                            
0000B51A                            MozChkDel:				; XREF: Obj55_DropFly
0000B51A 4A28 0001                  		tst.b	1(a0)
0000B51E 6A00 0000                  		bpl.w	DeleteObject
0000B522 4E75                       		rts	
0000B524                            ; ===========================================================================
0000B524                            
0000B524                            MozChkNrSonic:			; XREF: MozIndex2
0000B524                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B524 6B00                       		bmi.s	MozChgDir
0000B526 6100 0000                  		bsr.w	SpeedToPos
0000B52A 4A28 0034                  		tst.b	$34(a0)
0000B52E 6600                       		bne.s	locret_992A
0000B530 3038 D008                  		move.w	($FFFFD008).w,d0
0000B534 9068 0008                  		sub.w	8(a0),d0
0000B538 6A00                       		bpl.s	MozSetNrSonic
0000B53A 4440                       		neg.w	d0
0000B53C                            
0000B53C                            MozSetNrSonic:
0000B53C 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B540 6400                       		bcc.s	locret_992A	; if not, branch
0000B542 4A28 0001                  		tst.b	1(a0)
0000B546 6A00                       		bpl.s	locret_992A
0000B548 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B54E 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B554 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B55A 6000                       		bra.s	MozStop
0000B55C                            ; ===========================================================================
0000B55C                            
0000B55C                            MozChgDir:				; XREF: MozChkNrSonic
0000B55C 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B562 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B568 317C 003B 0032             		move.w	#59,$32(a0)
0000B56E                            
0000B56E                            MozStop:				; XREF: MozSetNrSonic
0000B56E 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B572 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B578 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B57E                            
0000B57E                            locret_992A:
0000B57E 4E75                       		rts	
0000B580                            ; ===========================================================================
0000B580                            
0000B580                            MozDelete:				; XREF: MozIndex
0000B580 6100 0000                  		bsr.w	DeleteObject
0000B584 4E75                       		rts	
0000B584 4E75                       		rts	
0000B586                            		include	"_incObj\22 Buzz Bomber.asm"
0000B586                            ; ===========================================================================
0000B586                            ; ---------------------------------------------------------------------------
0000B586                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B586                            ; ---------------------------------------------------------------------------
0000B586                            
0000B586                            BuzzBomber:
0000B586 7000                       		moveq	#0,d0
0000B588 1028 0024                  		move.b	obRoutine(a0),d0
0000B58C 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B590 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B594                            ; ===========================================================================
0000B594 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B596 0000                       		dc.w Buzz_Action-Buzz_Index
0000B598 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B59A                            
0000B59A =00000032                  buzz_timedelay:	equ $32
0000B59A =00000034                  buzz_buzzstatus:	equ $34
0000B59A =0000003C                  buzz_parent:	equ $3C
0000B59A                            ; ===========================================================================
0000B59A                            
0000B59A                            Buzz_Main:	; Routine 0
0000B59A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B59E 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B5A6 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B5AC 117C 0004 0001             		move.b	#4,obRender(a0)
0000B5B2 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B5B8 117C 0008 0020             		move.b	#8,obColType(a0)
0000B5BE 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B5C4                            
0000B5C4                            Buzz_Action:	; Routine 2
0000B5C4 7000                       		moveq	#0,d0
0000B5C6 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B5CA 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B5CE 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B5D2 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B5D8 6100 0000                  		bsr.w	AnimateSprite
0000B5DC 6000 0000                  		bra.w	RememberState
0000B5E0                            ; ===========================================================================
0000B5E0 0000                       @index:		dc.w @move-@index
0000B5E2 0000                       		dc.w @chknearsonic-@index
0000B5E4                            ; ===========================================================================
0000B5E4                            
0000B5E4                            @move:
0000B5E4 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B5E8 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B5EA 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B5F0 6600                       		bne.s	@fire		; if yes, branch
0000B5F2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B5F6 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B5FC 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B602 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B608 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B60E 6600                       		bne.s	@noflip		; if not, branch
0000B610 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B614                            
0000B614                            	@noflip:
0000B614 4E75                       		rts	
0000B616                            ; ===========================================================================
0000B616                            
0000B616                            	@fire:
0000B616 6100 0000                  		bsr.w	FindFreeObj
0000B61A 6600                       		bne.s	@fail
0000B61C 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B620 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B626 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B62C 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B632 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B638 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B63E 303C 0018                  		move.w	#$18,d0
0000B642 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B648 6600                       		bne.s	@noflip2	; if not, branch
0000B64A 4440                       		neg.w	d0
0000B64C 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B650                            
0000B650                            	@noflip2:
0000B650 D169 0008                  		add.w	d0,obX(a1)
0000B654 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B65A 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B660 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B664 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B66A 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B670 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B676                            
0000B676                            	@fail:
0000B676 4E75                       		rts	
0000B678                            ; ===========================================================================
0000B678                            
0000B678                            @chknearsonic:
0000B678 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B67C 6B00                       		bmi.s	@chgdirection
0000B67E 6100 0000                  		bsr.w	SpeedToPos
0000B682 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B686 6600                       		bne.s	@keepgoing
0000B688 3038 D008                  		move.w	(v_player+obX).w,d0
0000B68C 9068 0008                  		sub.w	obX(a0),d0
0000B690 6A00                       		bpl.s	@isleft
0000B692 4440                       		neg.w	d0
0000B694                            
0000B694                            	@isleft:
0000B694 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B698 6400                       		bcc.s	@keepgoing	; if not, branch
0000B69A 4A28 0001                  		tst.b	obRender(a0)
0000B69E 6A00                       		bpl.s	@keepgoing
0000B6A0 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B6A6 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B6AC 6000                       		bra.s	@stop
0000B6AE                            ; ===========================================================================
0000B6AE                            
0000B6AE                            	@chgdirection:
0000B6AE 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B6B4 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B6BA 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B6C0                            
0000B6C0                            	@stop:
0000B6C0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B6C4 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B6CA 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B6D0                            
0000B6D0                            @keepgoing:
0000B6D0 4E75                       		rts	
0000B6D2                            ; ===========================================================================
0000B6D2                            
0000B6D2                            Buzz_Delete:	; Routine 4
0000B6D2 6100 0000                  		bsr.w	DeleteObject
0000B6D6 4E75                       		rts	
0000B6D6 4E75                       		rts	
0000B6D8                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B6D8                            ; ---------------------------------------------------------------------------
0000B6D8                            ; Object 23 - missile that Buzz	Bomber throws
0000B6D8                            ; ---------------------------------------------------------------------------
0000B6D8                            
0000B6D8                            Missile:
0000B6D8 7000                       		moveq	#0,d0
0000B6DA 1028 0024                  		move.b	obRoutine(a0),d0
0000B6DE 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B6E2 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B6E6                            ; ===========================================================================
0000B6E6 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B6E8 0000                       		dc.w Msl_Animate-Msl_Index
0000B6EA 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B6EC 0000                       		dc.w Msl_Delete-Msl_Index
0000B6EE 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B6F0                            
0000B6F0 =0000003C                  msl_parent:	equ $3C
0000B6F0                            ; ===========================================================================
0000B6F0                            
0000B6F0                            Msl_Main:	; Routine 0
0000B6F0 5368 0032                  		subq.w	#1,$32(a0)
0000B6F4 6A00                       		bpl.s	Msl_ChkCancel
0000B6F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B6FA 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B702 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B708 117C 0004 0001             		move.b	#4,obRender(a0)
0000B70E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B714 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B71A 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B720 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B724 6700                       		beq.s	Msl_Animate	; if not, branch
0000B726                            
0000B726 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B72C 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B732 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B738 6000                       		bra.s	Msl_Animate2
0000B73A                            ; ===========================================================================
0000B73A                            
0000B73A                            Msl_Animate:	; Routine 2
0000B73A 6100                       		bsr.s	Msl_ChkCancel
0000B73C 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B742 6100 0000                  		bsr.w	AnimateSprite
0000B746 6000 0000                  		bra.w	DisplaySprite
0000B74A                            
0000B74A                            ; ---------------------------------------------------------------------------
0000B74A                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B74A                            ; destroyed, and if it has, then cancel	the missile
0000B74A                            ; ---------------------------------------------------------------------------
0000B74A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B74A                            
0000B74A                            
0000B74A                            Msl_ChkCancel:
0000B74A 2268 003C                  		movea.l	msl_parent(a0),a1
0000B74E 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B752 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B754 4E75                       		rts	
0000B756                            ; End of function Msl_ChkCancel
0000B756                            
0000B756                            ; ===========================================================================
0000B756                            
0000B756                            Msl_FromBuzz:	; Routine 4
0000B756 0828 0007 0022             		btst	#7,obStatus(a0)
0000B75C 6600                       		bne.s	@explode
0000B75E 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B764 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B76A 6100 0000                  		bsr.w	SpeedToPos
0000B76E 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B774 6100 0000                  		bsr.w	AnimateSprite
0000B778 6100 0000                  		bsr.w	DisplaySprite
0000B77C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B780 0640 00E0                  		addi.w	#$E0,d0
0000B784 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B788 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B78A 4E75                       		rts	
0000B78C                            ; ===========================================================================
0000B78C                            
0000B78C                            	@explode:
0000B78C 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B790 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B796 6000 F1D8                  		bra.w	MissileDissolve
0000B79A                            ; ===========================================================================
0000B79A                            
0000B79A                            Msl_Delete:	; Routine 6
0000B79A 6100 0000                  		bsr.w	DeleteObject
0000B79E 4E75                       		rts	
0000B7A0                            ; ===========================================================================
0000B7A0                            
0000B7A0                            Msl_FromNewt:	; Routine 8
0000B7A0 4A28 0001                  		tst.b	obRender(a0)
0000B7A4 6AF4                       		bpl.s	Msl_Delete
0000B7A6 6100 0000                  		bsr.w	SpeedToPos
0000B7AA                            
0000B7AA                            Msl_Animate2:
0000B7AA 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B7B0 6100 0000                  		bsr.w	AnimateSprite
0000B7B4 6100 0000                  		bsr.w	DisplaySprite
0000B7B8 4E75                       		rts	
0000B7B8 4E75                       		rts	
0000B7BA                            		include	"_anim\Mozzietron.asm"
0000B7BA                            ; ---------------------------------------------------------------------------
0000B7BA                            ; Animation script - Buzz Bomber enemy
0000B7BA                            ; ---------------------------------------------------------------------------
0000B7BA 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B7BC 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B7BE 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B7C0 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B7C4 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B7C8 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B7D0 00                         		even
0000B7D0 00                         		even
0000B7D0                            		include	"_anim\Buzz Bomber.asm"
0000B7D0                            ; ---------------------------------------------------------------------------
0000B7D0                            ; Animation script - Buzz Bomber enemy
0000B7D0                            ; ---------------------------------------------------------------------------
0000B7D0 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B7D2 0000                       		dc.w @fly2-Ani_Buzz
0000B7D4 0000                       		dc.w @fires-Ani_Buzz
0000B7D6 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B7DA 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B7DE 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B7E2                            		even
0000B7E2                            		even
0000B7E2                            		include	"_anim\Buzz Bomber Missile.asm"
0000B7E2                            ; ---------------------------------------------------------------------------
0000B7E2                            ; Animation script - missile that Buzz Bomber throws
0000B7E2                            ; ---------------------------------------------------------------------------
0000B7E2 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B7E4 0000                       		dc.w @missile-Ani_Missile
0000B7E6 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B7EA 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B7EE                            		even
0000B7EE                            		even
0000B7EE                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B7EE                            ; --------------------------------------------------------------------------------
0000B7EE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B7EE                            ; --------------------------------------------------------------------------------
0000B7EE                            
0000B7EE                            SME_qvHIs:	
0000B7EE 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B7F2 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B7F6 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B7FA 02                         SME_qvHIs_C:	dc.b 2	
0000B7FB FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B800 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B805 01                         SME_qvHIs_17:	dc.b 1	
0000B806 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B80B 02                         SME_qvHIs_1D:	dc.b 2	
0000B80C E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B811 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B816 03                         SME_qvHIs_28:	dc.b 3	
0000B817 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B81C E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B821 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B826 04                         SME_qvHIs_38:	dc.b 4	
0000B827 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B82C F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B831 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B836 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B83B 04                         SME_qvHIs_4D:	dc.b 4	
0000B83C E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B841 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B846 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B84B F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B850                            		even
0000B850                            		even
0000B850                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B850                            ; --------------------------------------------------------------------------------
0000B850                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B850                            ; --------------------------------------------------------------------------------
0000B850                            
0000B850                            SME_yccqJ:	
0000B850 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B854 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B858 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B85C 06                         SME_yccqJ_C:	dc.b 6	
0000B85D F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B862 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B867 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B86C 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B871 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B876 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B87B 06                         SME_yccqJ_2B:	dc.b 6	
0000B87C F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B881 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B886 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B88B 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B890 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B895 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B89A 06                         SME_yccqJ_4A:	dc.b 6	
0000B89B F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B8A0 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B8A5 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B8AA 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B8AF EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B8B4 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B8B9 06                         SME_yccqJ_69:	dc.b 6	
0000B8BA F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B8BF F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B8C4 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B8C9 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B8CE F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B8D3 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B8D8 07                         SME_yccqJ_88:	dc.b 7	
0000B8D9 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B8DE 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B8E3 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B8E8 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B8ED 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B8F2 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B8F7 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B8FC 04                         SME_yccqJ_AC:	dc.b 4	
0000B8FD F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B902 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B907 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B90C 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B912 00                         		even
0000B912 00                         		even
0000B912                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B912                            ; ---------------------------------------------------------------------------
0000B912                            ; Sprite mappings - missile that Buzz Bomber throws
0000B912                            ; ---------------------------------------------------------------------------
0000B912                            Map_Missile_internal:
0000B912 0000                       		dc.w @Flare1-Map_Missile_internal
0000B914 0000                       		dc.w @Flare2-Map_Missile_internal
0000B916 0000                       		dc.w @Ball1-Map_Missile_internal
0000B918 0000                       		dc.w @Ball2-Map_Missile_internal
0000B91A 01                         @Flare1:	dc.b 1
0000B91B F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B920 01                         @Flare2:	dc.b 1
0000B921 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B926 01                         @Ball1:		dc.b 1
0000B927 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B92C 01                         @Ball2:		dc.b 1
0000B92D F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B932                            		even
0000B932                            		even
0000B932                            
0000B932                            		include	"_incObj\25 & 37 Rings.asm"
0000B932                            ; ---------------------------------------------------------------------------
0000B932                            ; Object 25 - rings
0000B932                            ; ---------------------------------------------------------------------------
0000B932                            
0000B932                            Rings:
0000B932 7000                       		moveq	#0,d0
0000B934 1028 0024                  		move.b	obRoutine(a0),d0
0000B938 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B93C 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B940                            ; ===========================================================================
0000B940                            Ring_Index:
0000B940 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B942 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B944 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B946 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B948 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B94A 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B94C 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B94E 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B950 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B952                            
0000B952 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B952 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B952 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B952 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B952 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B952 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B952 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B952 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B952 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B952                            ; ---------------------------------------------------------------------------
0000B952                            ; Distances between rings (format: horizontal, vertical)
0000B952                            ; ---------------------------------------------------------------------------
0000B952 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B954 1800                       		dc.b $18, 0		; horizontal normal
0000B956 2000                       		dc.b $20, 0		; horizontal wide
0000B958 0010                       		dc.b 0,	$10		; vertical tight
0000B95A 0018                       		dc.b 0,	$18		; vertical normal
0000B95C 0020                       		dc.b 0,	$20		; vertical wide
0000B95E 1010                       		dc.b $10, $10		; diagonal
0000B960 1818                       		dc.b $18, $18
0000B962 2020                       		dc.b $20, $20
0000B964 F010                       		dc.b $F0, $10
0000B966 E818                       		dc.b $E8, $18
0000B968 E020                       		dc.b $E0, $20
0000B96A 1008                       		dc.b $10, 8
0000B96C 1810                       		dc.b $18, $10
0000B96E F008                       		dc.b $F0, 8
0000B970 E810                       		dc.b $E8, $10
0000B972                            ; ===========================================================================
0000B972                            
0000B972                            Ring_Main:	; Routine 0
0000B972 45F8 FC00                  		lea	(v_objstate).w,a2
0000B976 7000                       		moveq	#0,d0
0000B978 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B97C 45F2 0002                  		lea	2(a2,d0.w),a2
0000B980 1812                       		move.b	(a2),d4
0000B982 1228 0028                  		move.b	obSubtype(a0),d1
0000B986 1001                       		move.b	d1,d0
0000B988 0241 0007                  		andi.w	#7,d1
0000B98C 0C41 0007                  		cmpi.w	#7,d1
0000B990 6600                       		bne.s	loc_9B80
0000B992 7206                       		moveq	#6,d1
0000B994                            
0000B994                            	loc_9B80:
0000B994 4841                       		swap	d1
0000B996 323C 0000                  		move.w	#0,d1
0000B99A E808                       		lsr.b	#4,d0
0000B99C D040                       		add.w	d0,d0
0000B99E 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B9A2 4885                       		ext.w	d5
0000B9A4 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B9A8 4886                       		ext.w	d6
0000B9AA 2248                       		movea.l	a0,a1
0000B9AC 3428 0008                  		move.w	obX(a0),d2
0000B9B0 3628 000C                  		move.w	obY(a0),d3
0000B9B4 E20C                       		lsr.b	#1,d4
0000B9B6 6500                       		bcs.s	loc_9C02
0000B9B8 0892 0007                  		bclr	#7,(a2)
0000B9BC 6000                       		bra.s	loc_9BBA
0000B9BE                            ; ===========================================================================
0000B9BE                            
0000B9BE                            Ring_MakeRings:
0000B9BE 4841                       		swap	d1
0000B9C0 E20C                       		lsr.b	#1,d4
0000B9C2 6500                       		bcs.s	loc_9C02
0000B9C4 0892 0007                  		bclr	#7,(a2)
0000B9C8 6100 0000                  		bsr.w	FindFreeObj
0000B9CC 6600                       		bne.s	loc_9C0E
0000B9CE                            
0000B9CE                            loc_9BBA:
0000B9CE 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B9D2 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B9D6 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B9DA 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B9E0 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B9E4 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B9EC 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B9F2 137C 0004 0001             		move.b	#4,obRender(a1)
0000B9F8 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B9FE 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BA04 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BA0A 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000BA10 1341 0034                  		move.b	d1,$34(a1)
0000BA14                            
0000BA14                            loc_9C02:
0000BA14 5241                       		addq.w	#1,d1
0000BA16 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000BA18 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000BA1A 4841                       		swap	d1
0000BA1C 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000BA20                            
0000BA20                            loc_9C0E:
0000BA20 0812 0000                  		btst	#0,(a2)
0000BA24 6600 0000                  		bne.w	DeleteObject
0000BA28                            
0000BA28                            Ring_Animate:	; Routine 2
0000BA28 4A38 F5C9                  		tst.b	(v_gshield).w
0000BA2C 6700                       		beq.s	@skip
0000BA2E 4A28 0001                  		tst.b	obRender(a0)
0000BA32 6A00                       		bpl.s	@skip
0000BA34                            		
0000BA34 43F8 D000                  		lea (v_player).w,a1
0000BA38                            		
0000BA38 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BA3C 9068 0008                  		sub.w	obX(a0),d0
0000BA40 6A00                       		bpl.s	@a1
0000BA42 4440                       		neg.w	d0
0000BA44                            		
0000BA44                            	@a1:
0000BA44 0C40 0040                  		cmpi.w	#$40,d0
0000BA48 6200                       		bhi.s	@skip
0000BA4A                            		
0000BA4A 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BA4E 9068 000C                  		sub.w	obY(a0),d0
0000BA52 6A00                       		bpl.s	@a2
0000BA54 4440                       		neg.w	d0
0000BA56                            		
0000BA56                            	@a2:
0000BA56 0C40 0040                  		cmpi.w	#$40,d0
0000BA5A 6200                       		bhi.s	@skip
0000BA5C                            		
0000BA5C 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BA62 45F8 FC00                  		lea	(v_objstate).w,a2
0000BA66 7000                       		moveq	#0,d0
0000BA68 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BA6C 1228 0034                  		move.b	$34(a0),d1
0000BA70 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BA74                            		
0000BA74                            	@skip:
0000BA74 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000BA7A 6100 0000                  		bsr.w	DisplaySprite
0000BA9A 4E75                       		rts	
0000BA9C                            ; ===========================================================================
0000BA9C                            
0000BA9C                            Ring_Collect:	; Routine 4
0000BA9C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BAA0 117C 0000 0020             		move.b	#0,obColType(a0)
0000BAA6 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000BAAC 6100 0000                  		bsr.w	CollectRing
0000BAB0 45F8 FC00                  		lea	(v_objstate).w,a2
0000BAB4 7000                       		moveq	#0,d0
0000BAB6 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BABA 1228 0034                  		move.b	$34(a0),d1
0000BABE 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BAC2                            
0000BAC2                            Ring_Sparkle:	; Routine 6
0000BAC2 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BAC8 6100 0000                  		bsr.w	AnimateSprite
0000BACC 6000 0000                  		bra.w	DisplaySprite
0000BAD0                            ; ===========================================================================
0000BAD0                            
0000BAD0                            Ring_Delete:	; Routine 8
0000BAD0 6000 0000                  		bra.w	DeleteObject
0000BAD4                            
0000BAD4                            Ring_Attract:	; Routine $A
0000BAD4 4A38 F5C9                  		tst.b	(v_gshield).w
0000BAD8 6600                       		bne.s	@skip
0000BADA 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000BADE 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000BAE4 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000BAEA 6000                       		bra.s	@display
0000BAEC                            		
0000BAEC                            	@skip:
0000BAEC 323C 0030                  		move.w	#$30,d1	; horizontal
0000BAF0 3038 D008                  		move.w	(v_player+obX).w,d0
0000BAF4 B068 0008                  		cmp.w	obX(a0),d0
0000BAF8 6400                       		bcc.s	@a1
0000BAFA 4441                       		neg.w	d1
0000BAFC 4A68 0010                  		tst.w	obVelX(a0)
0000BB00 6B00                       		bmi.s	@a2
0000BB02 D241                       		add.w	d1,d1
0000BB04 D241                       		add.w	d1,d1
0000BB06 6000                       		bra.s	@a2
0000BB08                            
0000BB08                            	@a1:
0000BB08 4A68 0010                  		tst.w	obVelX(a0)
0000BB0C 6A00                       		bpl.s	@a2
0000BB0E D241                       		add.w	d1,d1
0000BB10 D241                       		add.w	d1,d1
0000BB12                            
0000BB12                            	@a2:
0000BB12 D368 0010                  		add.w	d1,obVelX(a0)
0000BB16 323C 0030                  		move.w	#$30,d1	; vertical
0000BB1A 3038 D00C                  		move.w	(v_player+obY).w,d0
0000BB1E B068 000C                  		cmp.w	obY(a0),d0
0000BB22 6400                       		bcc.s	@a3
0000BB24 4441                       		neg.w	d1
0000BB26 4A68 0012                  		tst.w	obVelY(a0)
0000BB2A 6B00                       		bmi.s	@a4
0000BB2C D241                       		add.w	d1,d1
0000BB2E D241                       		add.w	d1,d1
0000BB30 6000                       		bra.s	@a4
0000BB32                            
0000BB32                            	@a3:
0000BB32 4A68 0012                  		tst.w	obVelY(a0)
0000BB36 6A00                       		bpl.s	@a4
0000BB38 D241                       		add.w	d1,d1
0000BB3A D241                       		add.w	d1,d1
0000BB3C                            
0000BB3C                            	@a4:
0000BB3C D368 0012                  		add.w	d1,obVelY(a0)
0000BB40 6100 0000                  		bsr.w	SpeedToPos
0000BB44                            		
0000BB44                            	@display:
0000BB44 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000BB4A 6000 0000                  		bra.w	DisplaySprite
0000BB4E                            
0000BB4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB4E                            
0000BB4E                            
0000BB4E                            CollectRing:
0000BB4E 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000BB52 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000BB58 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000BB5C 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000BB62 6500                       		bcs.s	@playsnd	; if yes, branch
0000BB64 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000BB6A 6700                       		beq.s	@got100
0000BB6C 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000BB72 6500                       		bcs.s	@playsnd	; if yes, branch
0000BB74 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000BB7A 6600                       		bne.s	@playsnd
0000BB7C                            
0000BB7C                            	@got100:
0000BB7C 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BB80 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BB84 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000BB88                            		
0000BB88                            
0000BB88                            	@playsnd:
0000BB88 4EF9 0000 1254             		jmp	(PlaySound_Special).l
0000BB8E                            ; End of function CollectRing
0000BB8E                            
0000BB8E                            ; ===========================================================================
0000BB8E                            ; ---------------------------------------------------------------------------
0000BB8E                            ; Object 37 - rings flying out of Sonic	when he's hit
0000BB8E                            ; ---------------------------------------------------------------------------
0000BB8E                            
0000BB8E                            RingLoss:
0000BB8E 7000                       		moveq	#0,d0
0000BB90 1028 0024                  		move.b	obRoutine(a0),d0
0000BB94 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000BB98 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000BB9C                            ; ===========================================================================
0000BB9C 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000BB9E 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000BBA0 0000                       		dc.w RLoss_Collect-RLoss_Index
0000BBA2 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000BBA4 0000                       		dc.w RLoss_Delete-RLoss_Index
0000BBA6                            ; ===========================================================================
0000BBA6                            
0000BBA6                            RLoss_Count:	; Routine 0
0000BBA6 2248                       		movea.l	a0,a1
0000BBA8 7A00                       		moveq	#0,d5
0000BBAA 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000BBAE 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000BBB4 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000BBB6 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000BBBA 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000BBC0 6700                               beq.s   @cont                       ; if not, branch
0000BBC2 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000BBC8 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000BBCA                            @cont:
0000BBCA BA40                               cmp.w   d0,d5
0000BBCC 6500                               bcs.s   @belowmax
0000BBCE 3A00                               move.w  d0,d5
0000BBD0                            
0000BBD0                            @belowmax:
0000BBD0 5345                               subq.w  #1,d5
0000BBD2 383C 0288                          move.w  #$288,d4
0000BBD6 6000                       		bra.s	@makerings
0000BBD8                            ; ===========================================================================
0000BBD8                            
0000BBD8                            	@loop:
0000BBD8 6100 0000                  		bsr.w	FindFreeObj
0000BBDC 6600 0000                  		bne.w	@resetcounter
0000BBE0                            
0000BBE0                            @makerings:
0000BBE0 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000BBE4 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BBE8 137C 0008 0016             		move.b	#8,obHeight(a1)
0000BBEE 137C 0008 0017             		move.b	#8,obWidth(a1)
0000BBF4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BBFA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BC00 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BC08 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BC0E 137C 0004 0001             		move.b	#4,obRender(a1)
0000BC14 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BC1A 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BC20 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BC24 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000BC26 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BC2A BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BC2E 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000BC30 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BC32 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BC34                            @skiphalvingvel:
0000BC34 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BC38 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BC3C 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BC40                            
0000BC40                            @resetcounter:
0000BC40 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BC46 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BC4C 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BC52 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BC54 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BC58 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BC66                            
0000BC66                            RLoss_Bounce:	; Routine 2
0000BC66 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BC6C 6100 0000                  		bsr.w	SpeedToPos
0000BC70 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BC76 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BC7A 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BC7C 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BC80 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BC84 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BC86 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BC8C                            	@skipbounceslow:
0000BC8C 6B00                       		bmi.s	@chkdel
0000BC8E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BC92 D007                       		add.b	d7,d0
0000BC94 0200 0003                  		andi.b	#3,d0
0000BC98 6600                       		bne.s	@chkdel
0000BC9A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BCA0 4A41                       		tst.w	d1
0000BCA2 6A00                       		bpl.s	@chkdel
0000BCA4 D368 000C                  		add.w	d1,obY(a0)
0000BCA8 3028 0012                  		move.w	obVelY(a0),d0
0000BCAC E440                       		asr.w	#2,d0
0000BCAE 9168 0012                  		sub.w	d0,obVelY(a0)
0000BCB2 4468 0012                  		neg.w	obVelY(a0)
0000BCB6                            
0000BCB6                            	@chkdel:
0000BCB6 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BCBA 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BCBE 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BCC2 0640 00E0                  		addi.w	#$E0,d0
0000BCC6 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BCCA 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BCCE 4A38 F5C9                  		tst.b	(v_gshield).w
0000BCD2 6700                       		beq.s	@skip
0000BCD4 4A28 0001                  		tst.b	obRender(a0)
0000BCD8 6A00                       		bpl.s	@skip
0000BCDA                            		
0000BCDA 43F8 D000                  		lea (v_player).w,a1
0000BCDE                            		
0000BCDE 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BCE2 9068 0008                  		sub.w	obX(a0),d0
0000BCE6 6A00                       		bpl.s	@a1
0000BCE8 4440                       		neg.w	d0
0000BCEA                            		
0000BCEA                            	@a1:
0000BCEA 0C40 00A0                  		cmpi.w	#$A0,d0
0000BCEE 6200                       		bhi.s	@skip
0000BCF0                            		
0000BCF0 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BCF4 9068 000C                  		sub.w	obY(a0),d0
0000BCF8 6A00                       		bpl.s	@a2
0000BCFA 4440                       		neg.w	d0
0000BCFC                            		
0000BCFC                            	@a2:
0000BCFC 0C40 00A0                  		cmpi.w	#$A0,d0
0000BD00 6200                       		bhi.s	@skip
0000BD02                            		
0000BD02 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BD08 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BD0C                            		
0000BD0C                            	@skip:		
0000BD0C 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BD10 D2FC 0080                          adda.w  #$80,a1
0000BD14 0C51 007E                          cmpi.w  #$7E,(a1)
0000BD18 6400                               bcc.s   @cont
0000BD1A 5451                               addq.w  #2,(a1)
0000BD1C D2D1                               adda.w  (a1),a1
0000BD1E 3288                               move.w  a0,(a1)
0000BD20                            		
0000BD20                            	@cont:
0000BD20 4E75                               rts		
0000BD22                            ; ===========================================================================
0000BD22                            
0000BD22                            RLoss_Collect:	; Routine 4
0000BD22 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD26 117C 0000 0020             		move.b	#0,obColType(a0)
0000BD2C 6100 FE20                  		bsr.w	CollectRing
0000BD30                            
0000BD30                            RLoss_Sparkle:	; Routine 6
0000BD30 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BD36 6100 0000                  		bsr.w	AnimateSprite
0000BD3A 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BD3E 0C51 007E                          cmpi.w  #$7E,(a1)
0000BD42 6400                               bcc.s   @cont
0000BD44 5451                               addq.w  #2,(a1)
0000BD46 D2D1                               adda.w  (a1),a1
0000BD48 3288                               move.w  a0,(a1)
0000BD4A                            			
0000BD4A                            	@cont:
0000BD4A 4E75                               rts
0000BD4C                            ; ===========================================================================
0000BD4C                            
0000BD4C                            RLoss_Delete:	; Routine 8
0000BD4C 6000 0000                  		bra.w	DeleteObject
0000BD50                            
0000BD50                            ; ----------------------------------------------------------------------------------------------
0000BD50                            ; Ring Spawn Array 
0000BD50                            ; ----------------------------------------------------------------------------------------------
0000BD50                            
0000BD50 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BD60 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BD70 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BD80 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BD90 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BDA0 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BDB0 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BDC0 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BDD0                                            even
0000BDD0                            ; ===========================================================================
0000BDD0                            ; -------------------------------------------------------------------------------------
0000BDD0                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BDD0                            ; -------------------------------------------------------------------------------------
0000BDD0                            
0000BDD0                            SpillRingData_Water:
0000BDD0 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BDE0 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BDF0 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BE00 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BE10 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BE20 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BE30 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BE40 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BE50                                            even
0000BE50                            ; ===========================================================================				
0000BE50                            ; ===========================================================================				
0000BE50                            		include	"_incObj\4B Giant Ring.asm"
0000BE50                            ; ---------------------------------------------------------------------------
0000BE50                            ; Object 4B - giant ring for entry to special stage
0000BE50                            ; ---------------------------------------------------------------------------
0000BE50                            
0000BE50                            GiantRing:
0000BE50 7000                       		moveq	#0,d0
0000BE52 1028 0024                  		move.b	obRoutine(a0),d0
0000BE56 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BE5A 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BE5E                            ; ===========================================================================
0000BE5E 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BE60 0000                       		dc.w GRing_Animate-GRing_Index
0000BE62 0000                       		dc.w GRing_Collect-GRing_Index
0000BE64 0000                       		dc.w GRing_Delete-GRing_Index
0000BE66                            ; ===========================================================================
0000BE66                            
0000BE66                            GRing_Main:    ; Routine 0
0000BE66 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BE6E 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BE74 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BE7A 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BE80 4A28 0001                  		tst.b	obRender(a0)
0000BE84 6A00                       		bpl.s	GRing_Animate
0000BE86 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BE8C 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BE90 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BE96 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BE98                            
0000BE98 4E75                       		rts    
0000BE9A                            ; ===========================================================================
0000BE9A                            
0000BE9A                            GRing_Okay:
0000BE9A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE9E 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BEA4 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BEAA 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BEB0                            
0000BEB0                            GRing_Animate:	; Routine 2
0000BEB0 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BED4 6000 0000                  		bra.w	DisplaySprite
0000BED8                            ; ===========================================================================
0000BED8                            
0000BED8                            GRing_Collect:	; Routine 4
0000BED8 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BEDC 117C 0000 0020             		move.b	#0,obColType(a0)
0000BEE2 6100 0000                  		bsr.w	FindFreeObj
0000BEE6 6600 0000                  		bne.w	GRing_PlaySnd
0000BEEA 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BEEE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BEF4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BEFA 2348 003C                  		move.l	a0,$3C(a1)
0000BEFE 3038 D008                  		move.w	(v_player+obX).w,d0
0000BF02 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BF06 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BF08 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BF0E 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BF14 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BF1A                            		
0000BF1A                            GRing_PlaySnd:
0000BF24 608A                       		bra.s	GRing_Animate
0000BF26                            ; ===========================================================================
0000BF26                            
0000BF26                            GRing_Delete:	; Routine 6
0000BF26 6000 0000                  		bra.w	DeleteObject
0000BF26 6000 0000                  		bra.w	DeleteObject
0000BF2A                            		include	"_incObj\7C Ring Flash.asm"
0000BF2A                            ; ---------------------------------------------------------------------------
0000BF2A                            ; Object 7C - flash effect when	you collect the	giant ring
0000BF2A                            ; ---------------------------------------------------------------------------
0000BF2A                            
0000BF2A                            RingFlash:
0000BF2A 7000                       		moveq	#0,d0
0000BF2C 1028 0024                  		move.b	obRoutine(a0),d0
0000BF30 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BF34 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BF38                            ; ===========================================================================
0000BF38 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BF3A 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BF3C 0000                       		dc.w Flash_Delete-Flash_Index
0000BF3E                            ; ===========================================================================
0000BF3E                            
0000BF3E                            Flash_Main:	; Routine 0
0000BF3E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF42 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BF4A 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BF50 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BF56 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BF5C 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BF62 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BF68                            
0000BF68                            Flash_ChkDel:	; Routine 2
0000BF68 6100                       		bsr.s	Flash_Collect
0000BF88 6000 0000                  		bra.w	DisplaySprite
0000BF8C                            
0000BF8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BF8C                            
0000BF8C                            
0000BF8C                            Flash_Collect:
0000BF8C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BF90 6A00                       		bpl.s	locret_9F76
0000BF92 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BF98 5228 001A                  		addq.b	#1,obFrame(a0)
0000BF9C 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BFA2 6400                       		bcc.s	Flash_End	; if yes, branch
0000BFA4 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BFAA 6600                       		bne.s	locret_9F76	; if not, branch
0000BFAC 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BFB0 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BFB6 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BFBC 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BFC2 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BFC6 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BFCA                            
0000BFCA                            locret_9F76:
0000BFCA 4E75                       		rts	
0000BFCC                            ; ===========================================================================
0000BFCC                            
0000BFCC                            Flash_End:
0000BFCC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BFD0 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BFD6 588F                       		addq.l	#4,sp
0000BFD8 4E75                       		rts	
0000BFDA                            ; End of function Flash_Collect
0000BFDA                            
0000BFDA                            ; ===========================================================================
0000BFDA                            
0000BFDA                            Flash_Delete:	; Routine 4
0000BFDA 6000 0000                  		bra.w	DeleteObject
0000BFDA 6000 0000                  		bra.w	DeleteObject
0000BFDE                            
0000BFDE                            		include	"_anim\Rings.asm"
0000BFDE                            ; ---------------------------------------------------------------------------
0000BFDE                            ; Animation script - ring
0000BFDE                            ; ---------------------------------------------------------------------------
0000BFDE 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BFE0 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BFE6                            		even
0000BFE6                            		even
0000BFE6                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BFE6                            ; --------------------------------------------------------------------------------
0000BFE6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BFE6                            ; --------------------------------------------------------------------------------
0000BFE6                            
0000BFE6                            SME_aSMQh:	
0000BFE6 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BFEA 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BFEE 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BFF2 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BFF6 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BFFA 01                         SME_aSMQh_14:	dc.b 1	
0000BFFB F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000C000 01                         SME_aSMQh_1A:	dc.b 1	
0000C001 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000C006 01                         SME_aSMQh_20:	dc.b 1	
0000C007 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000C00C 01                         SME_aSMQh_26:	dc.b 1	
0000C00D F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000C012 01                         SME_aSMQh_2C:	dc.b 1	
0000C013 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000C018 01                         SME_aSMQh_32:	dc.b 1	
0000C019 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000C01E 01                         SME_aSMQh_38:	dc.b 1	
0000C01F F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000C024 01                         SME_aSMQh_3E:	dc.b 1	
0000C025 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000C02A 01                         SME_aSMQh_44:	dc.b 1	
0000C02B F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000C030 01                         SME_aSMQh_4A:	dc.b 1	
0000C031 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000C036                            		even
0000C036                            		even
0000C036                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000C036                            ; ---------------------------------------------------------------------------
0000C036                            ; Sprite mappings - giant ring
0000C036                            ; ---------------------------------------------------------------------------
0000C036                            Map_GRing_internal:
0000C036 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000C038 0000                       		dc.w byte_A00D-Map_GRing_internal
0000C03A 0000                       		dc.w byte_A036-Map_GRing_internal
0000C03C 0000                       		dc.w byte_A04B-Map_GRing_internal
0000C03E 0A                         byte_9FDA:	dc.b $A
0000C03F E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000C044 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000C049 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000C04E E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000C053 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000C058 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000C05D 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000C062 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000C067 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000C06C 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000C071 08                         byte_A00D:	dc.b 8
0000C072 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000C077 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000C07C E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000C081 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000C086 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000C08B 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000C090 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000C095 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000C09A 04                         byte_A036:	dc.b 4
0000C09B E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000C0A0 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000C0A5 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000C0AA 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000C0AF 08                         byte_A04B:	dc.b 8
0000C0B0 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000C0B5 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000C0BA E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000C0BF F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000C0C4 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000C0C9 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000C0CE 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000C0D3 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000C0D8                            		even
0000C0D8                            		even
0000C0D8                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000C0D8                            ; ---------------------------------------------------------------------------
0000C0D8                            ; Sprite mappings - flash effect when you collect the giant ring
0000C0D8                            ; ---------------------------------------------------------------------------
0000C0D8                            Map_Flash_internal:
0000C0D8 0000                       		dc.w byte_A084-Map_Flash_internal
0000C0DA 0000                       		dc.w byte_A08F-Map_Flash_internal
0000C0DC 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000C0DE 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000C0E0 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000C0E2 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000C0E4 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000C0E6 0000                       		dc.w byte_A103-Map_Flash_internal
0000C0E8 02                         byte_A084:	dc.b 2
0000C0E9 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000C0EE 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000C0F3 04                         byte_A08F:	dc.b 4
0000C0F4 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000C0F9 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000C0FE 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000C103 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000C108 04                         byte_A0A4:	dc.b 4
0000C109 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000C10E E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000C113 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000C118 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000C11D 04                         byte_A0B9:	dc.b 4
0000C11E E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000C123 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000C128 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000C12D 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000C132 04                         byte_A0CE:	dc.b 4
0000C133 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000C138 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000C13D 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000C142 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000C147 04                         byte_A0E3:	dc.b 4
0000C148 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000C14D E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000C152 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000C157 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000C15C 02                         byte_A0F8:	dc.b 2
0000C15D E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000C162 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000C167 04                         byte_A103:	dc.b 4
0000C168 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000C16D E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000C172 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000C177 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000C17C                            		even
0000C17C                            		even
0000C17C                            		include	"_incObj\26 Monitor.asm"
0000C17C                            ; ---------------------------------------------------------------------------
0000C17C                            ; Object 26 - monitors
0000C17C                            ; ---------------------------------------------------------------------------
0000C17C                            
0000C17C                            Monitor:
0000C17C 7000                       		moveq	#0,d0
0000C17E 1028 0024                  		move.b	obRoutine(a0),d0
0000C182 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000C186 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000C18A                            ; ===========================================================================
0000C18A 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000C18C 0000                       		dc.w Mon_Solid-Mon_Index
0000C18E 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000C190 0000                       		dc.w Mon_Animate-Mon_Index
0000C192 0000                       		dc.w Mon_Display-Mon_Index
0000C194                            ; ===========================================================================
0000C194                            
0000C194                            Mon_Main:	; Routine 0
0000C194 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C198 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000C19E 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000C1A4 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000C1AC 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C1B2 117C 0004 0001             		move.b	#4,obRender(a0)
0000C1B8 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C1BE 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000C1C4 45F8 FC00                  		lea	(v_objstate).w,a2
0000C1C8 7000                       		moveq	#0,d0
0000C1CA 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C1CE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C1D4 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000C1DA 6700                       		beq.s	@notbroken	; if not, branch
0000C1DC 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000C1E2 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000C1E8 4E75                       		rts	
0000C1EA                            ; ===========================================================================
0000C1EA                            
0000C1EA                            	@notbroken:
0000C1EA 117C 0046 0020             		move.b	#$46,obColType(a0)
0000C1F0 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000C1F6                            
0000C1F6                            Mon_Solid:	; Routine 2
0000C1F6 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000C1FA 6700                       		beq.s	@normal		; if not, branch
0000C1FC 5500                       		subq.b	#2,d0
0000C1FE 6600                       		bne.s	@fall
0000C200                            
0000C200                            		; 2nd Routine 2
0000C200 7200                       		moveq	#0,d1
0000C202 1228 0014                  		move.b	obActWid(a0),d1
0000C206 0641 000B                  		addi.w	#$B,d1
0000C20A 6100 D000                  		bsr.w	ExitPlatform
0000C20E 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000C214 6600 0000                  		bne.w	@ontop		; if yes, branch
0000C218 4228 0025                  		clr.b	ob2ndRout(a0)
0000C21C 6000 0000                  		bra.w	Mon_Animate
0000C220                            ; ===========================================================================
0000C220                            
0000C220                            	@ontop:
0000C220 363C 0010                  		move.w	#$10,d3
0000C224 3428 0008                  		move.w	obX(a0),d2
0000C228 6100 D540                  		bsr.w	MvSonicOnPtfm
0000C22C 6000 0000                  		bra.w	Mon_Animate
0000C230                            ; ===========================================================================
0000C230                            
0000C230                            @fall:		; 2nd Routine 4
0000C230 6100 0000                  		bsr.w	ObjectFall
0000C234 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C23A 4A41                       		tst.w	d1
0000C23C 6A00 0000                  		bpl.w	Mon_Animate
0000C240 D368 000C                  		add.w	d1,obY(a0)
0000C244 4268 0012                  		clr.w	obVelY(a0)
0000C248 4228 0025                  		clr.b	ob2ndRout(a0)
0000C24C 6000 0000                  		bra.w	Mon_Animate
0000C250                            ; ===========================================================================
0000C250                            
0000C250                            @normal:	; 2nd Routine 0
0000C250 323C 001A                  		move.w	#$1A,d1
0000C254 343C 000F                  		move.w	#$F,d2
0000C258 6100 0000                  		bsr.w	Mon_SolidSides
0000C25C 6700 0000                  		beq.w	loc_A25C
0000C260 4A69 0012                  		tst.w	obVelY(a1)
0000C264 6B00                       		bmi.s	loc_A20A
0000C266 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C26C 6700                       		beq.s	loc_A25C	; if yes, branch
0000C26E 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C274 6700                       		beq.s	loc_A25C	; if yes, branch
0000C276 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C27C 6700                       		beq.s	loc_A25C	; if yes, branch
0000C27E                            
0000C27E                            loc_A20A:
0000C27E 4A41                       		tst.w	d1
0000C280 6A00                       		bpl.s	loc_A220
0000C282 9769 000C                  		sub.w	d3,obY(a1)
0000C286 6100 CE72                  		bsr.w	loc_74AE
0000C28A 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C290 6000 0000                  		bra.w	Mon_Animate
0000C294                            ; ===========================================================================
0000C294                            
0000C294                            loc_A220:
0000C294 4A40                       		tst.w	d0
0000C296 6700 0000                  		beq.w	loc_A246
0000C29A 6B00                       		bmi.s	loc_A230
0000C29C 4A69 0010                  		tst.w	obVelX(a1)
0000C2A0 6B00                       		bmi.s	loc_A246
0000C2A2 6000                       		bra.s	loc_A236
0000C2A4                            ; ===========================================================================
0000C2A4                            
0000C2A4                            loc_A230:
0000C2A4 4A69 0010                  		tst.w	obVelX(a1)
0000C2A8 6A00                       		bpl.s	loc_A246
0000C2AA                            
0000C2AA                            loc_A236:
0000C2AA 9169 0008                  		sub.w	d0,obX(a1)
0000C2AE 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C2B4 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C2BA                            
0000C2BA                            loc_A246:
0000C2BA 0829 0001 0022             		btst	#1,obStatus(a1)
0000C2C0 6600                       		bne.s	loc_A26A
0000C2C2 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C2C8 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C2CE 6000                       		bra.s	Mon_Animate
0000C2D0                            ; ===========================================================================
0000C2D0                            
0000C2D0                            loc_A25C:
0000C2D0 0828 0005 0022             		btst	#5,obStatus(a0)
0000C2D6 6700                       		beq.s	Mon_Animate
0000C2D8 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C2DE 6700                       		beq.s	loc_A26A	; if so, branch
0000C2E0 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C2E6                            
0000C2E6                            loc_A26A:
0000C2E6 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C2EC 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C2F2                            
0000C2F2                            Mon_Animate:	; Routine 6
0000C2F2 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C2F8 6100 0000                  		bsr.w	AnimateSprite
0000C2FC                            
0000C2FC                            Mon_Display:	; Routine 8
0000C2FC 6100 0000                  		bsr.w	DisplaySprite
0000C31E 4E75                       		rts	
0000C320                            ; ===========================================================================
0000C320                            
0000C320                            Mon_BreakOpen:	; Routine 4
0000C320 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C324 117C 0000 0020             		move.b	#0,obColType(a0)
0000C32A 6100 0000                  		bsr.w	FindFreeObj
0000C32E 6600                       		bne.s	Mon_Explode
0000C330 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C334 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C33A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C340 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C346                            
0000C346                            Mon_Explode:
0000C346 6100 0000                  		bsr.w	FindFreeObj
0000C34A 6600                       		bne.s	@fail
0000C34C 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C350 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C354 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C35A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C360                            
0000C360                            	@fail:
0000C360 45F8 FC00                  		lea	(v_objstate).w,a2
0000C364 7000                       		moveq	#0,d0
0000C366 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C36A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C370 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C376 6000 0000                  		bra.w	DisplaySprite
0000C376 6000 0000                  		bra.w	DisplaySprite
0000C37A                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C37A                            ; ---------------------------------------------------------------------------
0000C37A                            ; Object 2E - contents of monitors
0000C37A                            ; ---------------------------------------------------------------------------
0000C37A                            
0000C37A                            PowerUp:
0000C37A 7000                       		moveq	#0,d0
0000C37C 1028 0024                  		move.b	obRoutine(a0),d0
0000C380 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C384 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C388 6000 0000                  		bra.w	DisplaySprite
0000C38C                            ; ===========================================================================
0000C38C 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C38E 0000                       		dc.w Pow_Move-Pow_Index
0000C390 0000                       		dc.w Pow_Delete-Pow_Index
0000C392                            ; ===========================================================================
0000C392                            
0000C392                            Pow_Main:	; Routine 0
0000C392 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C396 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C39C 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C3A2 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C3A8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C3AE 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C3B4 7000                       		moveq	#0,d0
0000C3B6 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C3BA 5400                       		addq.b	#2,d0
0000C3BC 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C3C0 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C3C6 D000                       		add.b	d0,d0
0000C3C8 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C3CC 5249                       		addq.w	#1,a1
0000C3CE 2149 0004                  		move.l	a1,obMap(a0)
0000C3D2                            
0000C3D2                            Pow_Move:	; Routine 2
0000C3D2 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C3D6 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C3DA 6100 0000                  		bsr.w	SpeedToPos
0000C3DE 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C3E4 4E75                       		rts	
0000C3E6                            ; ===========================================================================
0000C3E6                            
0000C3E6                            Pow_Checks:
0000C3E6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C3EA 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C3F0                            
0000C3F0                            Pow_ChkEggman:
0000C3F0 1028 001C                  		move.b	obAnim(a0),d0
0000C3F4 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C3F8 6600                       		bne.s	Pow_ChkSonic
0000C3FA                            		
0000C3FA 4EF9 0000 0000             		jmp	Spik_Hurt
0000C400                            		
0000C400 4E75                       		rts
0000C402                            ; ===========================================================================
0000C402                            
0000C402                            Pow_ChkSonic:
0000C402 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C406 6600                       		bne.s	Pow_ChkShoes
0000C408                            
0000C408                            	ExtraLife:
0000C408 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C40C 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C41A                            
0000C41A                            ; ===========================================================================
0000C41A                            
0000C41A                            Pow_ChkShoes:
0000C41A 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C41E 6600                       		bne.s	Pow_ChkShield
0000C420                            
0000C420 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C426 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C42C 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C432 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C438 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C43E 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C442 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C444 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C44A 6300                       			bls.s	Pow_NoMus
0000C456                            ; ===========================================================================
0000C456                            
0000C456                            Pow_NoMus:
0000C456 4E75                       		rts	
0000C458                            ; ===========================================================================
0000C458                            
0000C458                            Pow_ChkShield:
0000C458 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000C45C 6600                       		bne.s	Pow_ChkInvinc
0000C45E                            
0000C45E 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C464 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C46A 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C470 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000C476 11FC 0000 D180             		move.b	#id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C486                            ; ===========================================================================
0000C486                            
0000C486                            Pow_ChkInvinc:
0000C486 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C48A 6600                       		bne.s	Pow_ChkRings
0000C48C                            
0000C48C 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C492 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C498 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C49E 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C4A4 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C4AA 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C4B0 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C4B6 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C4BC 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C4C2 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C4C8 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C4CC 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C4CE 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C4D4 6300                       			bls.s	Pow_NoMusic
0000C4E0                            ; ===========================================================================
0000C4E0                            
0000C4E0                            Pow_NoMusic:
0000C4E0 4E75                       		rts	
0000C4E2                            ; ===========================================================================
0000C4E2                            
0000C4E2                            Pow_ChkRings:
0000C4E2 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C4E6 6600                       		bne.s	Pow_ChkS
0000C4E8                            
0000C4E8 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C4EE 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C4F4 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C4FA 6500                       		bcs.s	Pow_RingSound
0000C4FC 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C502 6700 FF04                  		beq.w	ExtraLife
0000C506 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C50C 6500                       		bcs.s	Pow_RingSound
0000C50E 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C514 6700 FEF2                  		beq.w	ExtraLife
0000C518                            
0000C518                            	Pow_RingSound:
0000C522                            ; ===========================================================================
0000C522                            
0000C522                            Pow_ChkS:
0000C522 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C526 6600                       		bne.s	Pow_ChkSRing
0000C528                            		
0000C528 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C52E 6700                       		beq.s	PowS2	; if yes, branch
0000C530 0404 003B                  		subi.b	#$3B,d4
0000C534 7000                       		moveq	#0,d0
0000C536 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C53C 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C542 6000                       		bra.s	PowSPlay
0000C544                            
0000C544                            PowS2:
0000C544 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C54A 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C550 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C556 6500                       		bcs.s	PowSPlay
0000C558 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C55E 6700 FEA8                  		beq.w	ExtraLife
0000C562 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C568 6500                       		bcs.s	PowSPlay
0000C56A 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C570 6700 FE96                  		beq.w	ExtraLife	
0000C574                            
0000C574                            PowSPlay:
0000C57E                            
0000C57E                            		
0000C57E                            
0000C57E                            
0000C57E                            Pow_ChkSRing:
0000C57E 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C582 6600                       		bne.s	Pow_ChkRShield
0000C584                            
0000C584                            		
0000C584 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C58A 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C590 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C596 6500                       		bcs.s	Pow_ChkSRingSound
0000C598 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C59E 6700 FE68                  		beq.w	ExtraLife
0000C5A2 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C5A8 6500                       		bcs.s	Pow_ChkSRingSound
0000C5AA 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C5B0 6700 FE56                  		beq.w	ExtraLife	
0000C5B4                            
0000C5B4                            Pow_ChkSRingSound:
0000C5BE                            
0000C5BE                            
0000C5BE                            Pow_ChkRShield:
0000C5BE 0C00 000A                  		cmpi.b	#10,d0		; does monitor contain a g shield?
0000C5C2 6600                       		bne.s	Pow_ChkGShield
0000C5C4                            
0000C5C4 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C5CA 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C5D0 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C5D6 11FC 0002 F5C8             		move.b	#2,(v_rshield).w ; give Sonic a red shield
0000C5DC 11FC 0000 D180             		move.b	#id_RShieldItem,(v_objspace+$180).w ; load red shield object ($38)
0000C5EC                            
0000C5EC                            Pow_ChkGShield:
0000C5EC 0C00 000B                  		cmpi.b	#11,d0		; does monitor contain a g shield?
0000C5F0 6600                       		bne.s	Pow_ChkSpShield
0000C5F2                            
0000C5F2                            
0000C5F2 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C5F8 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove r shield
0000C5FE 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C604 11FC 0001 F5C9             		move.b	#1,(v_gshield).w ; give Sonic a g shield
0000C60A 11FC 0000 D180             		move.b	#id_GShieldItem,(v_objspace+$180).w ; load g shield object ($38)
0000C610                            		
0000C610 0678 0023 FE20             		addi.w	#35,(v_rings).w	; add 35 rings to the number of rings you have
0000C616 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C61C 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C622 6500                       		bcs.s	Pow_ChkGSound
0000C624 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C62A 6700 FDDC                  		beq.w	ExtraLife
0000C62E 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C634 6500                       		bcs.s	Pow_ChkGSound
0000C636 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C63C 6700 FDCA                  		beq.w	ExtraLife	
0000C640                            
0000C640                            Pow_ChkGSound:		
0000C64A                            
0000C64A                            Pow_ChkSpShield:
0000C64A 0C00 000C                  		cmpi.b	#12,d0		; does monitor contain a g shield?
0000C64E 6600                       		bne.s	Pow_ChkEnd
0000C650                            
0000C650 11FC 0000 FE2C             		move.b	#0,(v_shield).w 		; remove shield
0000C656 11FC 0000 F5C8             		move.b	#0,(v_rshield).w 		; remove r shield
0000C65C 11FC 0000 F5C9             		move.b	#0,(v_gshield).w 		; remove g shield
0000C662 11FC 0001 F5CA             		move.b	#1,(v_spshield).w 		; give sonic a s shield
0000C668 11FC 0000 D180             		move.b	#id_SpShieldItem,(v_objspace+$180).w ; load s shield object ($38)	
0000C678 4E71                       		nop
0000C67A                            
0000C67A                            Pow_ChkEnd:
0000C67A 4E75                       		rts
0000C67C                            ; ===========================================================================
0000C67C                            
0000C67C                            Pow_Delete:	; Routine 4
0000C67C 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C680 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C684 4E75                       		rts	
0000C684 4E75                       		rts	
0000C686                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C686                            ; ---------------------------------------------------------------------------
0000C686                            ; Subroutine to	make the sides of a monitor solid
0000C686                            ; ---------------------------------------------------------------------------
0000C686                            
0000C686                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C686                            
0000C686                            
0000C686                            Mon_SolidSides:
0000C686 43F8 D000                  		lea	(v_player).w,a1
0000C68A 3029 0008                  		move.w	obX(a1),d0
0000C68E 9068 0008                  		sub.w	obX(a0),d0
0000C692 D041                       		add.w	d1,d0
0000C694 6B00                       		bmi.s	loc_A4E6
0000C696 3601                       		move.w	d1,d3
0000C698 D643                       		add.w	d3,d3
0000C69A B043                       		cmp.w	d3,d0
0000C69C 6200                       		bhi.s	loc_A4E6
0000C69E 1629 0016                  		move.b	obHeight(a1),d3
0000C6A2 4883                       		ext.w	d3
0000C6A4 D443                       		add.w	d3,d2
0000C6A6 3629 000C                  		move.w	obY(a1),d3
0000C6AA 9668 000C                  		sub.w	obY(a0),d3
0000C6AE D642                       		add.w	d2,d3
0000C6B0 6B00                       		bmi.s	loc_A4E6
0000C6B2 D442                       		add.w	d2,d2
0000C6B4 B642                       		cmp.w	d2,d3
0000C6B6 6400                       		bcc.s	loc_A4E6
0000C6B8 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C6BC 6B00                       		bmi.s	loc_A4E6
0000C6BE 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C6C4 6400                       		bcc.s	loc_A4E6
0000C6C6 4A78 FE08                  		tst.w	(v_debuguse).w
0000C6CA 6600                       		bne.s	loc_A4E6
0000C6CC B240                       		cmp.w	d0,d1
0000C6CE 6400                       		bcc.s	loc_A4DC
0000C6D0 D241                       		add.w	d1,d1
0000C6D2 9041                       		sub.w	d1,d0
0000C6D4                            
0000C6D4                            loc_A4DC:
0000C6D4 0C43 0010                  		cmpi.w	#$10,d3
0000C6D8 6500                       		bcs.s	loc_A4EA
0000C6DA                            
0000C6DA                            loc_A4E2:
0000C6DA 7201                       		moveq	#1,d1
0000C6DC 4E75                       		rts	
0000C6DE                            ; ===========================================================================
0000C6DE                            
0000C6DE                            loc_A4E6:
0000C6DE 7200                       		moveq	#0,d1
0000C6E0 4E75                       		rts	
0000C6E2                            ; ===========================================================================
0000C6E2                            
0000C6E2                            loc_A4EA:
0000C6E2 7200                       		moveq	#0,d1
0000C6E4 1228 0014                  		move.b	obActWid(a0),d1
0000C6E8 5841                       		addq.w	#4,d1
0000C6EA 3401                       		move.w	d1,d2
0000C6EC D442                       		add.w	d2,d2
0000C6EE D269 0008                  		add.w	obX(a1),d1
0000C6F2 9268 0008                  		sub.w	obX(a0),d1
0000C6F6 6BE2                       		bmi.s	loc_A4E2
0000C6F8 B242                       		cmp.w	d2,d1
0000C6FA 64DE                       		bcc.s	loc_A4E2
0000C6FC 72FF                       		moveq	#-1,d1
0000C6FE 4E75                       		rts	
0000C700                            ; End of function Obj26_SolidSides
0000C700                            ; End of function Obj26_SolidSides
0000C700                            		include	"_anim\Monitor.asm"
0000C700                            ; ---------------------------------------------------------------------------
0000C700                            ; Animation script - monitors
0000C700                            ; ---------------------------------------------------------------------------
0000C700 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C706 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C70C 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C712 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C718 0000                       		dc.w @spshield-Ani_Monitor
0000C71A                            		
0000C71A 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C720 00                         		even
0000C720 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C72C 00                         		even
0000C72C 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C738 00                         		even
0000C738 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C744 00                         		even
0000C744 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C750 00                         		even
0000C750 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C75C 00                         		even
0000C75C 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C768 00                         		even
0000C768 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C774 00                         		even
0000C774 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C780 00                         		even
0000C780 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C788 00                         		even
0000C788 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C794 00                         		even
0000C794 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C7A0 00                         		even
0000C7A0 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C7AC 00                         		even
0000C7AC 00                         		even
0000C7AC                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C7AC                            ; --------------------------------------------------------------------------------
0000C7AC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C7AC                            ; --------------------------------------------------------------------------------
0000C7AC                            
0000C7AC                            SME_YYb7z:	
0000C7AC 0000 0000                  		dc.w SME_YYb7z_1E-SME_YYb7z, SME_YYb7z_24-SME_YYb7z	
0000C7B0 0000 0000                  		dc.w SME_YYb7z_2F-SME_YYb7z, SME_YYb7z_3A-SME_YYb7z	
0000C7B4 0000 0000                  		dc.w SME_YYb7z_45-SME_YYb7z, SME_YYb7z_50-SME_YYb7z	
0000C7B8 0000 0000                  		dc.w SME_YYb7z_5B-SME_YYb7z, SME_YYb7z_66-SME_YYb7z	
0000C7BC 0000 0000                  		dc.w SME_YYb7z_71-SME_YYb7z, SME_YYb7z_7C-SME_YYb7z	
0000C7C0 0000 0000                  		dc.w SME_YYb7z_87-SME_YYb7z, SME_YYb7z_92-SME_YYb7z	
0000C7C4 0000 0000                  		dc.w SME_YYb7z_AC-SME_YYb7z, SME_YYb7z_B7-SME_YYb7z	
0000C7C8 0000                       		dc.w SME_YYb7z_C2-SME_YYb7z	
0000C7CA 01                         SME_YYb7z_1E:	dc.b 1	
0000C7CB F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7D0 02                         SME_YYb7z_24:	dc.b 2	
0000C7D1 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C7D6 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7DB 02                         SME_YYb7z_2F:	dc.b 2	
0000C7DC F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C7E1 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7E6 02                         SME_YYb7z_3A:	dc.b 2	
0000C7E7 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C7EC F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7F1 02                         SME_YYb7z_45:	dc.b 2	
0000C7F2 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C7F7 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7FC 02                         SME_YYb7z_50:	dc.b 2	
0000C7FD F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C802 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C807 02                         SME_YYb7z_5B:	dc.b 2	
0000C808 F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C80D F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C812 02                         SME_YYb7z_66:	dc.b 2	
0000C813 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C818 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C81D 02                         SME_YYb7z_71:	dc.b 2	
0000C81E F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C823 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C828 02                         SME_YYb7z_7C:	dc.b 2	
0000C829 F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C82E F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C833 02                         SME_YYb7z_87:	dc.b 2	
0000C834 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C839 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C83E 05                         SME_YYb7z_92:	dc.b 5	
0000C83F 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C844 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C849 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C84E 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C853 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C858 02                         SME_YYb7z_AC:	dc.b 2	
0000C859 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C85E F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C863 02                         SME_YYb7z_B7:	dc.b 2	
0000C864 F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C869 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C86E 02                         SME_YYb7z_C2:	dc.b 2	
0000C86F F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C874 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C87A 00                         		even
0000C87A 00                         		even
0000C87A                            
0000C87A                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C87A                            ; ---------------------------------------------------------------------------
0000C87A                            ; Object 0E - Sonic on the title screen
0000C87A                            ; ---------------------------------------------------------------------------
0000C87A                            
0000C87A                            TitleSonic:
0000C87A 7000                       		moveq	#0,d0
0000C87C 1028 0024                  		move.b	obRoutine(a0),d0
0000C880 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C884 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C888                            ; ===========================================================================
0000C888 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C88A 0000                       		dc.w TSon_Delay-TSon_Index
0000C88C 0000                       		dc.w TSon_Move-TSon_Index
0000C88E 0000                       		dc.w TSon_Animate-TSon_Index
0000C890                            ; ===========================================================================
0000C890                            
0000C890                            TSon_Main:	; Routine 0
0000C890 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C894 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C89A 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C8A0 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C8A8 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C8AE 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C8B4 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C8BA 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C8C0 6100 0000                  		bsr.w	AnimateSprite
0000C8C4                            
0000C8C4                            TSon_Delay:	;Routine 2
0000C8C4 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C8C8 6A00                       		bpl.s	@wait		; if time remains, branch
0000C8CA 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C8CE 6000 0000                  		bra.w	DisplaySprite
0000C8D2                            
0000C8D2                            	@wait:
0000C8D2 4E75                       		rts	
0000C8D4                            ; ===========================================================================
0000C8D4                            
0000C8D4                            TSon_Move:	; Routine 4
0000C8D4 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C8D8 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C8DE 6600                       		bne.s	@display	; if not, branch
0000C8E0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C8E4                            
0000C8E4                            	@display:
0000C8E4 6000 0000                  		bra.w	DisplaySprite
0000C8E8                            
0000C8E8 4E75                       		rts	
0000C8EA                            ; ===========================================================================
0000C8EA                            
0000C8EA                            TSon_Animate:	; Routine 6
0000C8EA 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C8F0 6100 0000                  		bsr.w	AnimateSprite
0000C8F4 6000 0000                  		bra.w	DisplaySprite
0000C8F8                            
0000C8F8 4E75                       		rts	
0000C8F8 4E75                       		rts	
0000C8FA                            		include	"_incObj\0F Press Start and TM.asm"
0000C8FA                            ; ---------------------------------------------------------------------------
0000C8FA                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C8FA                            ; ---------------------------------------------------------------------------
0000C8FA                            
0000C8FA                            PSBTM:
0000C8FA 7000                       		moveq	#0,d0
0000C8FC 1028 0024                  		move.b	obRoutine(a0),d0
0000C900 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000C904 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000C908 6000 0000                  		bra.w	DisplaySprite
0000C90C                            ; ===========================================================================
0000C90C 0000                       Obj0F_Index:	dc.w Obj0F_Init-Obj0F_Index	
0000C90E 0000                       		dc.w Obj0F_Main-Obj0F_Index
0000C910 0000                       		dc.w MENURTS-Obj0F_Index	
0000C912                            ; ===========================================================================
0000C912                            Obj0F_Init:
0000C912 5428 0024                  	addq.b	#2,obRoutine(a0) ; => Obj0F_Main
0000C916 217C 0000 0000 0004            move.l   #Map_TitleMenu,4(a0)
0000C91E 317C 0101 0008                 move.w   #$101,8(a0)
0000C924 317C 0151 000A                 move.w   #$151,$A(a0)
0000C92A 317C 056F 0002             	move.w	#$56F,2(a0)
0000C930 0238 0001 FFB0             	andi.b	#1,(Title_screen_option).w
0000C936 1178 FFB0 001A             	move.b	(Title_screen_option).w,mapping_frame(a0)
0000C93C                            
0000C93C                            
0000C93C                            Obj0F_Main:
0000C93C 7400                             moveq   #0,d2
0000C93E 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C942 1038 F605                        move.b   ($FFFFF605).w,d0
0000C946 0800 0000                        btst   #0,d0
0000C94A 6700                             beq.s   MAIN2
0000C94C 5302                             subq.b   #1,d2
0000C94E 6400                             bcc.s   MAIN2
0000C950 143C 0001                        move.b   #1,d2
0000C954                            
0000C954                            MAIN2:
0000C954 0800 0001                        btst   #1,d0
0000C958 6700                             beq.s   MAIN3
0000C95A 5202                             addq.b   #1,d2
0000C95C 0C02 0002                        cmpi.b   #2,d2
0000C960 6500                             blo.s   MAIN3
0000C962 7400                             moveq   #0,d2
0000C964                            
0000C964                            MAIN3:
0000C964 1142 001A                        move.b   d2,$1A(a0)
0000C968 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C96C 0200 0003                        andi.b   #3,d0
0000C970 6700                             beq.s   MENURTS   ; rts
0000C972 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C976 4EB8 1254                        jsr   PlaySound_Special
0000C97A                            
0000C97A                            MENURTS:
0000C97A 4E75                             rts															 
0000C97C                            ; ===========================================================================
0000C97C                            
0000C97C                            Map_TitleMenu:
0000C97C                            		include "_maps\Title Screen Menu.asm"		
0000C97C                            ; --------------------------------------------------------------------------------
0000C97C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C97C                            ; --------------------------------------------------------------------------------
0000C97C                            
0000C97C                            SME_g2Qfx:	
0000C97C 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C980 10                         SME_g2Qfx_6:	dc.b $10	
0000C981 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C986 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C98B E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C990 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C995 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C99A E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C99F E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C9A4 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C9A9 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C9AE F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C9B3 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C9B8 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C9BD F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C9C2 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C9C7 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C9CC E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C9D1 10                         SME_g2Qfx_6B:	dc.b $10	
0000C9D2 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C9D7 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C9DC E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C9E1 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C9E6 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C9EB E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C9F0 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C9F5 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C9FA F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C9FF F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000CA04 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000CA09 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000CA0E F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000CA13 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000CA18 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000CA1D F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000CA22                            		even
0000CA22                            		even
0000CA22                            		even
0000CA22                            
0000CA22                            		include	"_anim\Title Screen Sonic.asm"
0000CA22                            ; ---------------------------------------------------------------------------
0000CA22                            ; Animation script - Sonic on the title screen
0000CA22                            ; ---------------------------------------------------------------------------
0000CA22 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000CA24 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000CA30 00                         		even
0000CA30 00                         		even
0000CA30                            		include	"_anim\Press Start and TM.asm"
0000CA30                            ; ---------------------------------------------------------------------------
0000CA30                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000CA30                            ; ---------------------------------------------------------------------------
0000CA30 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000CA32 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000CA36                            		even
0000CA36                            		even
0000CA36                            
0000CA36                            		include	"_incObj\sub AnimateSprite.asm"
0000CA36                            ; ---------------------------------------------------------------------------
0000CA36                            ; Subroutine to	animate	a sprite using an animation script
0000CA36                            ; ---------------------------------------------------------------------------
0000CA36                            
0000CA36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CA36                            
0000CA36                            
0000CA36                            AnimateSprite:
0000CA36 7000                       		moveq	#0,d0
0000CA38 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000CA3C B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000CA40 6700                       		beq.s	Anim_Run	; if not, branch
0000CA42                            
0000CA42 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000CA46 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000CA4C 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000CA52                            
0000CA52                            Anim_Run:
0000CA52 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000CA56 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000CA58 D040                       		add.w	d0,d0
0000CA5A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000CA5E 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000CA62 7200                       		moveq	#0,d1
0000CA64 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000CA68 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000CA6C 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000CA6E                            
0000CA6E                            Anim_Next:
0000CA6E 1200                       		move.b	d0,d1
0000CA70 0200 001F                  		andi.b	#$1F,d0
0000CA74 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000CA78 1028 0022                  		move.b	obStatus(a0),d0
0000CA7C E719                       		rol.b	#3,d1
0000CA7E B101                       		eor.b	d0,d1
0000CA80 0201 0003                  		andi.b	#3,d1
0000CA84 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000CA8A 8328 0001                  		or.b	d1,obRender(a0)
0000CA8E 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000CA92                            
0000CA92                            Anim_Wait:
0000CA92 4E75                       		rts	
0000CA94                            ; ===========================================================================
0000CA94                            
0000CA94                            Anim_End_FF:
0000CA94 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000CA96 6600                       		bne.s	Anim_End_FE	; if not, branch
0000CA98 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000CA9E 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000CAA2 60CA                       		bra.s	Anim_Next
0000CAA4                            ; ===========================================================================
0000CAA4                            
0000CAA4                            Anim_End_FE:
0000CAA4 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000CAA6 6600                       		bne.s	Anim_End_FD	; if not, branch
0000CAA8 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000CAAC 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000CAB0 9200                       		sub.b	d0,d1
0000CAB2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000CAB6 60B6                       		bra.s	Anim_Next
0000CAB8                            ; ===========================================================================
0000CAB8                            
0000CAB8                            Anim_End_FD:
0000CAB8 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000CABA 6600                       		bne.s	Anim_End_FC	; if not, branch
0000CABC 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000CAC2                            
0000CAC2                            Anim_End_FC:
0000CAC2 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000CAC4 6600                       		bne.s	Anim_End_FB	; if not, branch
0000CAC6 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000CACA                            
0000CACA                            Anim_End_FB:
0000CACA 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000CACC 6600                       		bne.s	Anim_End_FA	; if not, branch
0000CACE 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000CAD4 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000CAD8                            
0000CAD8                            Anim_End_FA:
0000CAD8 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000CADA 6600                       		bne.s	Anim_End	; if not, branch
0000CADC 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000CAE0                            
0000CAE0                            Anim_End:
0000CAE0 4E75                       		rts	
0000CAE2                            ; End of function AnimateSprite
0000CAE2                            ; End of function AnimateSprite
0000CAE2                            
0000CAE2                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000CAE2                            ; ---------------------------------------------------------------------------
0000CAE2                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000CAE2                            ; ---------------------------------------------------------------------------
0000CAE2                            Map_PSB_internal:
0000CAE2 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000CAE4 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000CAE6 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000CAE8 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000CAEA 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000CAEB 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000CAF0 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000CAF5 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000CAFA 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000CAFF 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000CB04 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000CB09 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000CB0A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB0F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB14 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB19 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB1E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB23 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB28 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB2D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB32 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB37 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB3C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB41 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB46 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB4B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB50 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB55 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB5A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB5F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB64 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB69 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB6E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB73 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB78 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB7D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB82 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB87 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB8C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB91 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB96 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB9B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CBA0 01                         M_PSB_TM:	dc.b 1			; "TM"
0000CBA1 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000CBA6                            		even
0000CBA6                            		even
0000CBA6                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000CBA6                            ; ---------------------------------------------------------------------------
0000CBA6                            ; Sprite mappings - Sonic on the title screen
0000CBA6                            ; ---------------------------------------------------------------------------
0000CBA6                            Map_TSon_internal:
0000CBA6 0000                       		dc.w byte_A898-Map_TSon_internal
0000CBA8 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000CBAA 0000                       		dc.w byte_A917-Map_TSon_internal
0000CBAC 0000                       		dc.w byte_A96D-Map_TSon_internal
0000CBAE 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000CBB0 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000CBB2 0000                       		dc.w byte_AA47-Map_TSon_internal
0000CBB4 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000CBB6 0A                         byte_A898:	dc.b $A
0000CBB7 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000CBBC 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000CBC1 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000CBC6 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000CBCB 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000CBD0 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000CBD5 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000CBDA 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000CBDF 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000CBE4 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000CBE9 0F                         byte_A8CB:	dc.b $F
0000CBEA 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CBEF 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CBF4 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CBF9 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CBFE 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CC03 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CC08 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CC0D 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CC12 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CC17 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CC1C 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CC21 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CC26 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CC2B 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CC30 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CC35 11                         byte_A917:	dc.b $11
0000CC36 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CC3B 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CC40 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CC45 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CC4A 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CC4F 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CC54 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CC59 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CC5E 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CC63 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CC68 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CC6D 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CC72 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CC77 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CC7C 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CC81 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CC86 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CC8B 0D                         byte_A96D:	dc.b $D
0000CC8C 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CC91 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CC96 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CC9B 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CCA0 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CCA5 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CCAA 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CCAF 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CCB4 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CCB9 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CCBE 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CCC3 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CCC8 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CCCD 0B                         byte_A9AF:	dc.b $B
0000CCCE 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CCD3 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CCD8 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CCDD 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CCE2 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CCE7 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CCEC 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CCF1 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CCF6 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CCFB 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CD00 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CD05 13                         byte_A9E7:	dc.b $13
0000CD06 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CD0B 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CD10 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CD15 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CD1A 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CD1F 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CD24 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CD29 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CD2E 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CD33 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CD38 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CD3D 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CD42 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CD47 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CD4C 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CD51 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CD56 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CD5B 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CD60 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CD65 15                         byte_AA47:	dc.b $15
0000CD66 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CD6B 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CD70 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CD75 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CD7A 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CD7F 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CD84 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CD89 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CD8E 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CD93 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CD98 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CD9D 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CDA2 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CDA7 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CDAC 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CDB1 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CDB6 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CDBB 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CDC0 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CDC5 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CDCA 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CDCF 16                         byte_AAB1:	dc.b $16
0000CDD0 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CDD5 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CDDA 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CDDF 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CDE4 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CDE9 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CDEE 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CDF3 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CDF8 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CDFD 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CE02 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CE07 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CE0C 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CE11 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CE16 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CE1B 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CE20 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CE25 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CE2A 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CE2F 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CE34 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CE39 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CE3E                            		even
0000CE3E                            		even
0000CE3E                            
0000CE3E                            		include	"_incObj\2B Chopper.asm"
0000CE3E                            ; ---------------------------------------------------------------------------
0000CE3E                            ; Object 2B - Chopper enemy (GHZ)
0000CE3E                            ; ---------------------------------------------------------------------------
0000CE3E                            
0000CE3E                            Chopper:
0000CE3E 7000                       		moveq	#0,d0
0000CE40 1028 0024                  		move.b	obRoutine(a0),d0
0000CE44 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CE48 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CE4C 6000 0000                  		bra.w	RememberState
0000CE50                            ; ===========================================================================
0000CE50 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CE52 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CE54                            
0000CE54 =00000030                  chop_origY:	equ $30
0000CE54                            ; ===========================================================================
0000CE54                            
0000CE54                            Chop_Main:	; Routine 0
0000CE54 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CE58 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CE60 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CE66 117C 0004 0001             		move.b	#4,obRender(a0)
0000CE6C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CE72 117C 0009 0020             		move.b	#9,obColType(a0)
0000CE78 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CE7E 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CE84 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CE8A                            
0000CE8A                            Chop_ChgSpeed:	; Routine 2
0000CE8A 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CE90 6100 FBA4                  		bsr.w	AnimateSprite
0000CE94 6100 0000                  		bsr.w	SpeedToPos
0000CE98 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CE9E 3028 0030                  		move.w	chop_origY(a0),d0
0000CEA2 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CEA6 6400                       		bcc.s	@chganimation	; if not, branch
0000CEA8 3140 000C                  		move.w	d0,obY(a0)
0000CEAC 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CEB2                            
0000CEB2                            	@chganimation:
0000CEB2 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CEB8 0440 00C0                  		subi.w	#$C0,d0
0000CEBC B068 000C                  		cmp.w	obY(a0),d0
0000CEC0 6400                       		bcc.s	@nochg
0000CEC2 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CEC8 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CECC 6B00                       		bmi.s	@nochg		; if not, branch
0000CECE 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CED4                            
0000CED4                            	@nochg:
0000CED4 4E75                       		rts	
0000CED4 4E75                       		rts	
0000CED6                            		include	"_anim\Chopper.asm"
0000CED6                            ; ---------------------------------------------------------------------------
0000CED6                            ; Animation script - Chopper enemy
0000CED6                            ; ---------------------------------------------------------------------------
0000CED6 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CED8 0000                       		dc.w @fast-Ani_Chop
0000CEDA 0000                       		dc.w @still-Ani_Chop
0000CEDC 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CEE0 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CEE4 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CEE8 00                         		even
0000CEE8 00                         		even
0000CEE8                            Map_Chop:	include	"_maps\Chopper.asm"
0000CEE8                            ; ---------------------------------------------------------------------------
0000CEE8                            ; Sprite mappings - Chopper enemy (GHZ)
0000CEE8                            ; ---------------------------------------------------------------------------
0000CEE8                            Map_Chop_internal:
0000CEE8 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CEEA 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CEEC 01                         @mouthshut:	dc.b 1
0000CEED F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CEF2 01                         @mouthopen:	dc.b 1
0000CEF3 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CEF8                            		even
0000CEF8                            		even
0000CEF8                            		include	"_incObj\2C Jaws.asm"
0000CEF8                            ; ---------------------------------------------------------------------------
0000CEF8                            ; Object 2C - Jaws enemy (LZ)
0000CEF8                            ; ---------------------------------------------------------------------------
0000CEF8                            
0000CEF8                            Jaws:
0000CEF8 7000                       		moveq	#0,d0
0000CEFA 1028 0024                  		move.b	obRoutine(a0),d0
0000CEFE 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CF02 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CF06                            ; ===========================================================================
0000CF06 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CF08 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CF0A                            
0000CF0A =00000030                  jaws_timecount:	equ $30
0000CF0A =00000032                  jaws_timedelay:	equ $32
0000CF0A                            ; ===========================================================================
0000CF0A                            
0000CF0A                            Jaws_Main:	; Routine 0
0000CF0A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CF0E 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CF16 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CF1C 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CF22 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CF28 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CF2E 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CF34 7000                       		moveq	#0,d0
0000CF36 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CF3A ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CF3C 5340                       		subq.w	#1,d0
0000CF3E 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CF42 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CF46 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CF4C 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CF52 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CF54 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CF58                            
0000CF58                            Jaws_Turn:	; Routine 2
0000CF58 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CF5C 6A00                       		bpl.s	@animate	; if time remains, branch
0000CF5E 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CF64 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CF68 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CF6E 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CF74                            
0000CF74                            	@animate:
0000CF74 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CF7A 6100 FABA                  		bsr.w	AnimateSprite
0000CF7E 6100 0000                  		bsr.w	SpeedToPos
0000CF82 6000 0000                  		bra.w	RememberState
0000CF82 6000 0000                  		bra.w	RememberState
0000CF86                            		include	"_anim\Jaws.asm"
0000CF86                            ; ---------------------------------------------------------------------------
0000CF86                            ; Animation script - Jaws enemy
0000CF86                            ; ---------------------------------------------------------------------------
0000CF86 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CF88 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CF8E                            		even
0000CF8E                            		even
0000CF8E                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CF8E                            ; --------------------------------------------------------------------------------
0000CF8E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CF8E                            ; --------------------------------------------------------------------------------
0000CF8E                            
0000CF8E                            SME_O5C0c:	
0000CF8E 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CF92 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CF96 02                         SME_O5C0c_8:	dc.b 2	
0000CF97 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CF9C F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CFA1 02                         SME_O5C0c_13:	dc.b 2	
0000CFA2 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CFA7 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CFAC 02                         SME_O5C0c_1E:	dc.b 2	
0000CFAD F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CFB2 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CFB7 02                         SME_O5C0c_29:	dc.b 2	
0000CFB8 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CFBD F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CFC2                            		even
0000CFC2                            		even
0000CFC2                            		include	"_incObj\2D Burrobot.asm"
0000CFC2                            ; ---------------------------------------------------------------------------
0000CFC2                            ; Object 2D - Burrobot enemy (LZ)
0000CFC2                            ; ---------------------------------------------------------------------------
0000CFC2                            
0000CFC2                            Burrobot:
0000CFC2 7000                       		moveq	#0,d0
0000CFC4 1028 0024                  		move.b	obRoutine(a0),d0
0000CFC8 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CFCC 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CFD0                            ; ===========================================================================
0000CFD0 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CFD2 0000                       		dc.w Burro_Action-Burro_Index
0000CFD4                            
0000CFD4 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CFD4                            ; ===========================================================================
0000CFD4                            
0000CFD4                            Burro_Main:	; Routine 0
0000CFD4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CFD8 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CFDE 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CFE4 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CFEC 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CFF2 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CFF8 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CFFE 117C 0005 0020             		move.b	#5,obColType(a0)
0000D004 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000D00A 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000D00E 117C 0002 001C             		move.b	#2,obAnim(a0)
0000D014                            
0000D014                            Burro_Action:	; Routine 2
0000D014 7000                       		moveq	#0,d0
0000D016 1028 0025                  		move.b	ob2ndRout(a0),d0
0000D01A 323B 0000                  		move.w	@index(pc,d0.w),d1
0000D01E 4EBB 1000                  		jsr	@index(pc,d1.w)
0000D022 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000D028 6100 FA0C                  		bsr.w	AnimateSprite
0000D02C 6000 0000                  		bra.w	RememberState
0000D030                            ; ===========================================================================
0000D030 0000                       @index:		dc.w @changedir-@index
0000D032 0000                       		dc.w Burro_Move-@index
0000D034 0000                       		dc.w Burro_Jump-@index
0000D036 0000                       		dc.w Burro_ChkSonic-@index
0000D038                            ; ===========================================================================
0000D038                            
0000D038                            @changedir:
0000D038 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000D03C 6A00                       		bpl.s	@nochg
0000D03E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000D042 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000D048 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000D04E 117C 0001 001C             		move.b	#1,obAnim(a0)
0000D054 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000D05A 6700                       		beq.s	@nochg
0000D05C 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000D060                            
0000D060                            	@nochg:
0000D060 4E75                       		rts	
0000D062                            ; ===========================================================================
0000D062                            
0000D062                            Burro_Move:
0000D062 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000D066 6B00                       		bmi.s	loc_AD84
0000D068 6100 0000                  		bsr.w	SpeedToPos
0000D06C 0868 0000 0032             		bchg	#0,$32(a0)
0000D072 6600                       		bne.s	loc_AD78
0000D074 3628 0008                  		move.w	obX(a0),d3
0000D078 0643 000C                  		addi.w	#$C,d3
0000D07C 0828 0000 0022             		btst	#0,obStatus(a0)
0000D082 6600                       		bne.s	loc_AD6A
0000D084 0443 0018                  		subi.w	#$18,d3
0000D088                            
0000D088                            loc_AD6A:
0000D088 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000D08E 0C41 000C                  		cmpi.w	#$C,d1
0000D092 6C00                       		bge.s	loc_AD84
0000D094 4E75                       		rts	
0000D096                            ; ===========================================================================
0000D096                            
0000D096                            loc_AD78:
0000D096 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000D09C D368 000C                  		add.w	d1,obY(a0)
0000D0A0 4E75                       		rts	
0000D0A2                            ; ===========================================================================
0000D0A2                            
0000D0A2                            loc_AD84:
0000D0A2 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000D0A8 6700                       		beq.s	loc_ADA4
0000D0AA 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D0AE 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000D0B4 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D0BA 117C 0000 001C             		move.b	#0,obAnim(a0)
0000D0C0 4E75                       		rts	
0000D0C2                            ; ===========================================================================
0000D0C2                            
0000D0C2                            loc_ADA4:
0000D0C2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000D0C6 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D0CC 117C 0002 001C             		move.b	#2,obAnim(a0)
0000D0D2 4E75                       		rts	
0000D0D4                            ; ===========================================================================
0000D0D4                            
0000D0D4                            Burro_Jump:
0000D0D4 6100 0000                  		bsr.w	SpeedToPos
0000D0D8 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000D0DE 6B00                       		bmi.s	locret_ADF0
0000D0E0 117C 0003 001C             		move.b	#3,obAnim(a0)
0000D0E6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000D0EC 4A41                       		tst.w	d1
0000D0EE 6A00                       		bpl.s	locret_ADF0
0000D0F0 D368 000C                  		add.w	d1,obY(a0)
0000D0F4 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D0FA 117C 0001 001C             		move.b	#1,obAnim(a0)
0000D100 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000D106 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D10A 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D10E                            
0000D10E                            locret_ADF0:
0000D10E 4E75                       		rts	
0000D110                            ; ===========================================================================
0000D110                            
0000D110                            Burro_ChkSonic:
0000D110 343C 0060                  		move.w	#$60,d2
0000D114 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D118 6400                       		bcc.s	locret_AE20
0000D11A 3038 D00C                  		move.w	(v_player+obY).w,d0
0000D11E 9068 000C                  		sub.w	obY(a0),d0
0000D122 6400                       		bcc.s	locret_AE20
0000D124 0C40 FF80                  		cmpi.w	#-$80,d0
0000D128 6500                       		bcs.s	locret_AE20
0000D12A 4A78 FE08                  		tst.w	(v_debuguse).w
0000D12E 6600                       		bne.s	locret_AE20
0000D130 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D134 3141 0010                  		move.w	d1,obVelX(a0)
0000D138 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D13E                            
0000D13E                            locret_AE20:
0000D13E 4E75                       		rts	
0000D140                            
0000D140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D140                            
0000D140                            
0000D140                            Burro_ChkSonic2:
0000D140 323C 0080                  		move.w	#$80,d1
0000D144 08E8 0000 0022             		bset	#0,obStatus(a0)
0000D14A 3038 D008                  		move.w	(v_player+obX).w,d0
0000D14E 9068 0008                  		sub.w	obX(a0),d0
0000D152 6400                       		bcc.s	loc_AE40
0000D154 4440                       		neg.w	d0
0000D156 4441                       		neg.w	d1
0000D158 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000D15E                            
0000D15E                            loc_AE40:
0000D15E B042                       		cmp.w	d2,d0
0000D160 4E75                       		rts	
0000D162                            ; End of function Burro_ChkSonic2
0000D162                            ; End of function Burro_ChkSonic2
0000D162                            		include	"_anim\Burrobot.asm"
0000D162                            ; ---------------------------------------------------------------------------
0000D162                            ; Animation script - Burrobot enemy
0000D162                            ; ---------------------------------------------------------------------------
0000D162 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000D164 0000                       		dc.w @walk2-Ani_Burro
0000D166 0000                       		dc.w @digging-Ani_Burro
0000D168 0000                       		dc.w @fall-Ani_Burro
0000D16A 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000D16E 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000D172 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000D176 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000D17A 00                         		even
0000D17A 00                         		even
0000D17A                            Map_Burro:	include	"_maps\Burrobot.asm"
0000D17A                            ; --------------------------------------------------------------------------------
0000D17A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D17A                            ; --------------------------------------------------------------------------------
0000D17A                            
0000D17A                            SME_Ag_86:	
0000D17A 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000D17E 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000D182 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000D186 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000D188 02                         SME_Ag_86_E:	dc.b 2	
0000D189 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000D18E 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D193 02                         SME_Ag_86_19:	dc.b 2	
0000D194 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D199 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000D19E 02                         SME_Ag_86_24:	dc.b 2	
0000D19F E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000D1A4 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000D1A9 02                         SME_Ag_86_2F:	dc.b 2	
0000D1AA E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000D1AF 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000D1B4 02                         SME_Ag_86_3A:	dc.b 2	
0000D1B5 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000D1BA 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000D1BF 02                         SME_Ag_86_45:	dc.b 2	
0000D1C0 F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000D1C5 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000D1CA 02                         SME_Ag_86_50:	dc.b 2	
0000D1CB EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D1D0 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D1D6 00                         		even
0000D1D6 00                         		even
0000D1D6                            
0000D1D6                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000D1D6                            ; ---------------------------------------------------------------------------
0000D1D6                            ; Object 2F - large grass-covered platforms (MZ)
0000D1D6                            ; ---------------------------------------------------------------------------
0000D1D6                            
0000D1D6                            LargeGrass:
0000D1D6 7000                       		moveq	#0,d0
0000D1D8 1028 0024                  		move.b	obRoutine(a0),d0
0000D1DC 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000D1E0 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000D1E4                            ; ===========================================================================
0000D1E4 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000D1E6 0000                       		dc.w LGrass_Action-LGrass_Index
0000D1E8                            
0000D1E8 =0000002A                  lgrass_origX:	equ $2A
0000D1E8 =0000002C                  lgrass_origY:	equ $2C
0000D1E8                            
0000D1E8 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000D1EA 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000D1EC 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D1EE 0140                       		dc.b 1,	$40
0000D1F0 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D1F2 0220                       		dc.b 2,	$20
0000D1F4                            ; ===========================================================================
0000D1F4                            
0000D1F4                            LGrass_Main:	; Routine 0
0000D1F4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D1F8 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D200 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D206 117C 0004 0001             		move.b	#4,obRender(a0)
0000D20C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000D212 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D218 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D21E 7000                       		moveq	#0,d0
0000D220 1028 0028                  		move.b	obSubtype(a0),d0
0000D224 E448                       		lsr.w	#2,d0
0000D226 0240 001C                  		andi.w	#$1C,d0
0000D22A 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D22E 3019                       		move.w	(a1)+,d0
0000D230 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D234 214A 0030                  		move.l	a2,$30(a0)
0000D238 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D23C 1151 0014                  		move.b	(a1),obActWid(a0)
0000D240 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D246 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D24C 08E8 0004 0001             		bset	#4,1(a0)
0000D252                            
0000D252                            LGrass_Action:	; Routine 2
0000D252 6100 0000                  		bsr.w	LGrass_Types
0000D256 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D25A 6700                       		beq.s	LGrass_Solid
0000D25C 7200                       		moveq	#0,d1
0000D25E 1228 0014                  		move.b	obActWid(a0),d1
0000D262 0641 000B                  		addi.w	#$B,d1
0000D266 6100 BFA4                  		bsr.w	ExitPlatform
0000D26A 0829 0003 0022             		btst	#3,obStatus(a1)
0000D270 6600 0000                  		bne.w	LGrass_Slope
0000D274 4228 0025                  		clr.b	ob2ndRout(a0)
0000D278 6000                       		bra.s	LGrass_Display
0000D27A                            ; ===========================================================================
0000D27A                            
0000D27A                            LGrass_Slope:
0000D27A 7200                       		moveq	#0,d1
0000D27C 1228 0014                  		move.b	obActWid(a0),d1
0000D280 0641 000B                  		addi.w	#$B,d1
0000D284 2468 0030                  		movea.l	$30(a0),a2
0000D288 3428 0008                  		move.w	obX(a0),d2
0000D28C 6100 CF18                  		bsr.w	SlopeObject2
0000D290 6000                       		bra.s	LGrass_Display
0000D292                            ; ===========================================================================
0000D292                            
0000D292                            LGrass_Solid:
0000D292 7200                       		moveq	#0,d1
0000D294 1228 0014                  		move.b	obActWid(a0),d1
0000D298 0641 000B                  		addi.w	#$B,d1
0000D29C 343C 0020                  		move.w	#$20,d2
0000D2A0 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D2A6 6600                       		bne.s	loc_AF8E
0000D2A8 343C 0030                  		move.w	#$30,d2
0000D2AC                            
0000D2AC                            loc_AF8E:
0000D2AC 2468 0030                  		movea.l	$30(a0),a2
0000D2B0 6100 0000                  		bsr.w	SolidObject2F
0000D2B4                            
0000D2B4                            LGrass_Display:
0000D2B4 6100 0000                  		bsr.w	DisplaySprite
0000D2B8 6000 0000                  		bra.w	LGrass_ChkDel
0000D2BC                            
0000D2BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D2BC                            
0000D2BC                            
0000D2BC                            LGrass_Types:
0000D2BC 7000                       		moveq	#0,d0
0000D2BE 1028 0028                  		move.b	obSubtype(a0),d0
0000D2C2 0240 0007                  		andi.w	#7,d0
0000D2C6 D040                       		add.w	d0,d0
0000D2C8 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D2CC 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D2D0                            ; End of function LGrass_Types
0000D2D0                            
0000D2D0                            ; ===========================================================================
0000D2D0 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D2D2 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D2D4 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D2D6 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D2D8 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D2DA 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D2DC                            ; ===========================================================================
0000D2DC                            
0000D2DC                            LGrass_Type00:
0000D2DC 4E75                       		rts			; type 00 platform doesn't move
0000D2DE                            ; ===========================================================================
0000D2DE                            
0000D2DE                            LGrass_Type01:
0000D2DE 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D2E2 323C 0020                  		move.w	#$20,d1
0000D2E6 6000                       		bra.s	LGrass_Move
0000D2E8                            ; ===========================================================================
0000D2E8                            
0000D2E8                            LGrass_Type02:
0000D2E8 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D2EC 323C 0030                  		move.w	#$30,d1
0000D2F0 6000                       		bra.s	LGrass_Move
0000D2F2                            ; ===========================================================================
0000D2F2                            
0000D2F2                            LGrass_Type03:
0000D2F2 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D2F6 323C 0040                  		move.w	#$40,d1
0000D2FA 6000                       		bra.s	LGrass_Move
0000D2FC                            ; ===========================================================================
0000D2FC                            
0000D2FC                            LGrass_Type04:
0000D2FC 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D300 323C 0060                  		move.w	#$60,d1
0000D304                            
0000D304                            LGrass_Move:
0000D304 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D30A 6700                       		beq.s	loc_AFF2
0000D30C 4440                       		neg.w	d0
0000D30E D041                       		add.w	d1,d0
0000D310                            
0000D310                            loc_AFF2:
0000D310 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D314 9240                       		sub.w	d0,d1
0000D316 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D31A 4E75                       		rts	
0000D31C                            ; ===========================================================================
0000D31C                            
0000D31C                            LGrass_Type05:
0000D31C 1028 0034                  		move.b	$34(a0),d0
0000D320 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D324 6600                       		bne.s	loc_B010
0000D326 5500                       		subq.b	#2,d0
0000D328 6400                       		bcc.s	loc_B01C
0000D32A 7000                       		moveq	#0,d0
0000D32C 6000                       		bra.s	loc_B01C
0000D32E                            ; ===========================================================================
0000D32E                            
0000D32E                            loc_B010:
0000D32E 5800                       		addq.b	#4,d0
0000D330 0C00 0040                  		cmpi.b	#$40,d0
0000D334 6500                       		bcs.s	loc_B01C
0000D336 103C 0040                  		move.b	#$40,d0
0000D33A                            
0000D33A                            loc_B01C:
0000D33A 1140 0034                  		move.b	d0,$34(a0)
0000D33E 4EB9 0000 3A36             		jsr	(CalcSine).l
0000D344 E848                       		lsr.w	#4,d0
0000D346 3200                       		move.w	d0,d1
0000D348 D068 002C                  		add.w	lgrass_origY(a0),d0
0000D34C 3140 000C                  		move.w	d0,obY(a0)
0000D350 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D356 6600                       		bne.s	loc_B07A
0000D358 4A28 0035                  		tst.b	$35(a0)
0000D35C 6600                       		bne.s	loc_B07A
0000D35E 117C 0001 0035             		move.b	#1,$35(a0)
0000D364 6100 0000                  		bsr.w	FindNextFreeObj
0000D368 6600                       		bne.s	loc_B07A
0000D36A 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D36E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D374 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D37A 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D37E 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D382 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D388 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D38E 2348 0038                  		move.l	a0,$38(a1)
0000D392 2448                       		movea.l	a0,a2
0000D394 6100                       		bsr.s	sub_B09C
0000D396                            
0000D396                            loc_B07A:
0000D396 7400                       		moveq	#0,d2
0000D398 45E8 0036                  		lea	$36(a0),a2
0000D39C 141A                       		move.b	(a2)+,d2
0000D39E 5302                       		subq.b	#1,d2
0000D3A0 6500                       		bcs.s	locret_B09A
0000D3A2                            
0000D3A2                            loc_B086:
0000D3A2 7000                       		moveq	#0,d0
0000D3A4 101A                       		move.b	(a2)+,d0
0000D3A6 ED48                       		lsl.w	#6,d0
0000D3A8 0640 D000                  		addi.w	#$D000,d0
0000D3AC 3240                       		movea.w	d0,a1
0000D3AE 3341 003C                  		move.w	d1,$3C(a1)
0000D3B2 51CA FFEE                  		dbf	d2,loc_B086
0000D3B6                            
0000D3B6                            locret_B09A:
0000D3B6 4E75                       		rts	
0000D3B8                            
0000D3B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D3B8                            
0000D3B8                            
0000D3B8                            sub_B09C:
0000D3B8 45EA 0036                  		lea	$36(a2),a2
0000D3BC 7000                       		moveq	#0,d0
0000D3BE 1012                       		move.b	(a2),d0
0000D3C0 5212                       		addq.b	#1,(a2)
0000D3C2 45F2 0001                  		lea	1(a2,d0.w),a2
0000D3C6 3009                       		move.w	a1,d0
0000D3C8 0440 D000                  		subi.w	#$D000,d0
0000D3CC EC48                       		lsr.w	#6,d0
0000D3CE 0240 007F                  		andi.w	#$7F,d0
0000D3D2 1480                       		move.b	d0,(a2)
0000D3D4 4E75                       		rts	
0000D3D6                            ; End of function sub_B09C
0000D3D6                            
0000D3D6                            ; ===========================================================================
0000D3D6                            
0000D3D6                            LGrass_ChkDel:
0000D3D6 4A28 0035                  		tst.b	$35(a0)
0000D3DA 6700                       		beq.s	loc_B0C6
0000D3DC 4A28 0001                  		tst.b	obRender(a0)
0000D3E0 6A00                       		bpl.s	LGrass_DelFlames
0000D3E2                            
0000D3E2                            loc_B0C6:
0000D400 4E75                       		rts	
0000D402                            ; ===========================================================================
0000D402                            
0000D402                            LGrass_DelFlames:
0000D402 7400                       		moveq	#0,d2
0000D404                            
0000D404                            loc_B0E8:
0000D404 45E8 0036                  		lea	$36(a0),a2
0000D408 1412                       		move.b	(a2),d2
0000D40A 421A                       		clr.b	(a2)+
0000D40C 5302                       		subq.b	#1,d2
0000D40E 6500                       		bcs.s	locret_B116
0000D410                            
0000D410                            loc_B0F4:
0000D410 7000                       		moveq	#0,d0
0000D412 1012                       		move.b	(a2),d0
0000D414 421A                       		clr.b	(a2)+
0000D416 ED48                       		lsl.w	#6,d0
0000D418 0640 D000                  		addi.w	#$D000,d0
0000D41C 3240                       		movea.w	d0,a1
0000D41E 6100 0000                  		bsr.w	DeleteChild
0000D422 51CA FFEC                  		dbf	d2,loc_B0F4
0000D426 117C 0000 0035             		move.b	#0,$35(a0)
0000D42C 117C 0000 0034             		move.b	#0,$34(a0)
0000D432                            
0000D432                            locret_B116:
0000D432 4E75                       		rts	
0000D434                            ; ===========================================================================
0000D434                            ; ---------------------------------------------------------------------------
0000D434                            ; Collision data for large moving platforms (MZ)
0000D434                            ; ---------------------------------------------------------------------------
0000D434                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D480                            		even
0000D480                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D4AC                            		even
0000D4AC                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D4F8                            		even
0000D4F8                            		even
0000D4F8                            		include	"_incObj\35 Burning Grass.asm"
0000D4F8                            ; ---------------------------------------------------------------------------
0000D4F8                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D4F8                            ; (appears when	you walk on sinking platforms)
0000D4F8                            ; ---------------------------------------------------------------------------
0000D4F8                            
0000D4F8                            GrassFire:
0000D4F8 7000                       		moveq	#0,d0
0000D4FA 1028 0024                  		move.b	obRoutine(a0),d0
0000D4FE 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D502 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D506                            ; ===========================================================================
0000D506 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D508 0000                       		dc.w loc_B238-GFire_Index
0000D50A 0000                       		dc.w GFire_Move-GFire_Index
0000D50C                            
0000D50C =0000002A                  gfire_origX:	equ $2A
0000D50C                            ; ===========================================================================
0000D50C                            
0000D50C                            GFire_Main:	; Routine 0
0000D50C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D510 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D518 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D51E 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D524 117C 0004 0001             		move.b	#4,obRender(a0)
0000D52A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D530 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D536 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D546 4A28 0028                  		tst.b	obSubtype(a0)
0000D54A 6700                       		beq.s	loc_B238
0000D54C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D550 6000 0000                  		bra.w	GFire_Move
0000D554                            ; ===========================================================================
0000D554                            
0000D554                            loc_B238:	; Routine 2
0000D554 2268 0030                  		movea.l	$30(a0),a1
0000D558 3228 0008                  		move.w	obX(a0),d1
0000D55C 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D560 0641 000C                  		addi.w	#$C,d1
0000D564 3001                       		move.w	d1,d0
0000D566 E248                       		lsr.w	#1,d0
0000D568 1031 0000                  		move.b	(a1,d0.w),d0
0000D56C 4440                       		neg.w	d0
0000D56E D068 002C                  		add.w	$2C(a0),d0
0000D572 3400                       		move.w	d0,d2
0000D574 D068 003C                  		add.w	$3C(a0),d0
0000D578 3140 000C                  		move.w	d0,obY(a0)
0000D57C 0C41 0084                  		cmpi.w	#$84,d1
0000D580 6400                       		bcc.s	loc_B2B0
0000D582 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D58A 0C41 0080                  		cmpi.w	#$80,d1
0000D58E 6400                       		bcc.s	loc_B2B0
0000D590 2028 0008                  		move.l	obX(a0),d0
0000D594 0680 0008 0000             		addi.l	#$80000,d0
0000D59A 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D5A0 6600                       		bne.s	loc_B2B0
0000D5A2 6100 0000                  		bsr.w	FindNextFreeObj
0000D5A6 6600                       		bne.s	loc_B2B0
0000D5A8 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D5AC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D5B2 3342 002C                  		move.w	d2,$2C(a1)
0000D5B6 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D5BC 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D5C2 2468 0038                  		movea.l	$38(a0),a2
0000D5C6 6100 FDF0                  		bsr.w	sub_B09C
0000D5CA                            
0000D5CA                            loc_B2B0:
0000D5CA 6000                       		bra.s	GFire_Animate
0000D5CC                            ; ===========================================================================
0000D5CC                            
0000D5CC                            GFire_Move:	; Routine 4
0000D5CC 3028 002C                  		move.w	$2C(a0),d0
0000D5D0 D068 003C                  		add.w	$3C(a0),d0
0000D5D4 3140 000C                  		move.w	d0,obY(a0)
0000D5D8                            
0000D5D8                            GFire_Animate:
0000D5D8 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D5DE 6100 F456                  		bsr.w	AnimateSprite
0000D5E2 6000 0000                  		bra.w	DisplaySprite
0000D5E2 6000 0000                  		bra.w	DisplaySprite
0000D5E6                            		include	"_anim\Burning Grass.asm"
0000D5E6                            ; ---------------------------------------------------------------------------
0000D5E6                            ; Animation script - burning grass that sits on the floor (MZ)
0000D5E6                            ; ---------------------------------------------------------------------------
0000D5E6 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D5E8 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D5EE                            		even
0000D5EE                            		even
0000D5EE                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D5EE                            ; ---------------------------------------------------------------------------
0000D5EE                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D5EE                            ; ---------------------------------------------------------------------------
0000D5EE                            Map_LGrass_internal:
0000D5EE 0000                       		dc.w @wide-Map_LGrass_internal
0000D5F0 0000                       		dc.w @sloped-Map_LGrass_internal
0000D5F2 0000                       		dc.w @narrow-Map_LGrass_internal
0000D5F4 0D                         @wide:		dc.b $D
0000D5F5 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D5FA F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D5FF 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D604 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D609 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D60E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D613 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D618 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D61D F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D622 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D627 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D62C D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D631 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D636 0A                         @sloped:	dc.b $A
0000D637 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D63C F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D641 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D646 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D64B E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D650 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D655 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D65A E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D65F C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D664 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D669 06                         @narrow:	dc.b 6
0000D66A D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D66F F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D674 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D679 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D67E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D683 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D688                            		even
0000D688                            		even
0000D688                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D688                            ; --------------------------------------------------------------------------------
0000D688                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D688                            ; --------------------------------------------------------------------------------
0000D688                            
0000D688                            SME_gyvTV:	
0000D688 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D68C 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D690 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D694 01                         SME_gyvTV_C:	dc.b 1	
0000D695 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D69A 01                         SME_gyvTV_12:	dc.b 1	
0000D69B E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D6A0 01                         SME_gyvTV_18:	dc.b 1	
0000D6A1 F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D6A6 01                         SME_gyvTV_1E:	dc.b 1	
0000D6A7 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D6AC 01                         SME_gyvTV_24:	dc.b 1	
0000D6AD F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D6B2 01                         SME_gyvTV_2A:	dc.b 1	
0000D6B3 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D6B8                            		even
0000D6B8                            		even
0000D6B8                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D6B8                            ; ---------------------------------------------------------------------------
0000D6B8                            ; Object 30 - large green glass blocks (MZ)
0000D6B8                            ; ---------------------------------------------------------------------------
0000D6B8                            
0000D6B8                            GlassBlock:
0000D6B8 7000                       		moveq	#0,d0
0000D6BA 1028 0024                  		move.b	obRoutine(a0),d0
0000D6BE 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D6C2 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D6E4 6000 0000                  		bra.w	DisplaySprite
0000D6E8                            ; ===========================================================================
0000D6E8                            
0000D6E8                            Glass_Delete:
0000D6E8 6000 0000                  		bra.w	DeleteObject
0000D6EC                            ; ===========================================================================
0000D6EC 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D6EE 0000                       		dc.w Glass_Block012-Glass_Index
0000D6F0 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D6F2 0000                       		dc.w Glass_Block34-Glass_Index
0000D6F4 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D6F6                            
0000D6F6 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D6F6 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D6F6                            
0000D6F6 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D6F9 0400 01                    		dc.b 4,	0, 1
0000D6FC 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D6FF 0800 01                    		dc.b 8,	0, 1
0000D702                            ; ===========================================================================
0000D702                            
0000D702                            Glass_Main:	; Routine 0
0000D702 45F9 0000 D6F6             		lea	(Glass_Vars1).l,a2
0000D708 7201                       		moveq	#1,d1
0000D70A 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D710 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D716 6500                       		bcs.s	@IsType012	; if yes, branch
0000D718                            
0000D718 45F9 0000 D6FC             		lea	(Glass_Vars2).l,a2
0000D71E 7201                       		moveq	#1,d1
0000D720 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D726                            
0000D726                            	@IsType012:
0000D726 2248                       		movea.l	a0,a1
0000D728 6000                       		bra.s	@Load		; load main object
0000D72A                            ; ===========================================================================
0000D72A                            
0000D72A                            	@Repeat:
0000D72A 6100 0000                  		bsr.w	FindNextFreeObj
0000D72E 6600                       		bne.s	@Fail
0000D730                            
0000D730                            @Load:
0000D730 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D734 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D738 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D73E 101A                       		move.b	(a2)+,d0
0000D740 4880                       		ext.w	d0
0000D742 D068 000C                  		add.w	obY(a0),d0
0000D746 3340 000C                  		move.w	d0,obY(a1)
0000D74A 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D752 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D758 137C 0004 0001             		move.b	#4,obRender(a1)
0000D75E 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D764 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D76A 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D770 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D776 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D77A 2348 003C                  		move.l	a0,glass_parent(a1)
0000D77E 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D782                            
0000D782 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D788 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D78E 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D792 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D798                            
0000D798                            	@Fail:
0000D798 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D79E 08E8 0004 0001             		bset	#4,obRender(a0)
0000D7A4                            
0000D7A4                            Glass_Block012:	; Routine 2
0000D7A4 6100 0000                  		bsr.w	Glass_Types
0000D7A8 323C 002B                  		move.w	#$2B,d1
0000D7AC 343C 0048                  		move.w	#$48,d2
0000D7B0 363C 0049                  		move.w	#$49,d3
0000D7B4 3828 0008                  		move.w	obX(a0),d4
0000D7B8 6000 0000                  		bra.w	SolidObject
0000D7BC                            ; ===========================================================================
0000D7BC                            
0000D7BC                            Glass_Reflect012:
0000D7BC                            		; Routine 4
0000D7BC 2268 003C                  		movea.l	$3C(a0),a1
0000D7C0 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D7C6 6000 0000                  		bra.w	Glass_Types
0000D7CA                            ; ===========================================================================
0000D7CA                            
0000D7CA                            Glass_Block34:	; Routine 6
0000D7CA 6100 0000                  		bsr.w	Glass_Types
0000D7CE 323C 002B                  		move.w	#$2B,d1
0000D7D2 343C 0038                  		move.w	#$38,d2
0000D7D6 363C 0039                  		move.w	#$39,d3
0000D7DA 3828 0008                  		move.w	obX(a0),d4
0000D7DE 6000 0000                  		bra.w	SolidObject
0000D7E2                            ; ===========================================================================
0000D7E2                            
0000D7E2                            Glass_Reflect34:
0000D7E2                            		; Routine 8
0000D7E2 2268 003C                  		movea.l	$3C(a0),a1
0000D7E6 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D7EC 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D7F2 6000 0000                  		bra.w	Glass_Types
0000D7F6                            
0000D7F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7F6                            
0000D7F6                            
0000D7F6                            Glass_Types:
0000D7F6 7000                       		moveq	#0,d0
0000D7F8 1028 0028                  		move.b	obSubtype(a0),d0
0000D7FC 0240 0007                  		andi.w	#7,d0
0000D800 D040                       		add.w	d0,d0
0000D802 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D806 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D80A                            ; End of function Glass_Types
0000D80A                            
0000D80A                            ; ===========================================================================
0000D80A 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D80C 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D80E 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D810 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D812 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D814                            ; ===========================================================================
0000D814                            
0000D814                            Glass_Type00:
0000D814 4E75                       		rts	
0000D816                            ; ===========================================================================
0000D816                            
0000D816                            Glass_Type01:
0000D816 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D81A 323C 0040                  		move.w	#$40,d1
0000D81E 6000                       		bra.s	loc_B514
0000D820                            ; ===========================================================================
0000D820                            
0000D820                            Glass_Type02:
0000D820 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D824 323C 0040                  		move.w	#$40,d1
0000D828 4440                       		neg.w	d0
0000D82A D041                       		add.w	d1,d0
0000D82C                            
0000D82C                            loc_B514:
0000D82C 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D832 6700                       		beq.s	loc_B526
0000D834 4440                       		neg.w	d0
0000D836 D041                       		add.w	d1,d0
0000D838 E208                       		lsr.b	#1,d0
0000D83A 0640 0020                  		addi.w	#$20,d0
0000D83E                            
0000D83E                            loc_B526:
0000D83E 6000 0000                  		bra.w	loc_B5EE
0000D842                            ; ===========================================================================
0000D842                            
0000D842                            Glass_Type03:
0000D842 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D848 6700                       		beq.s	loc_B53E
0000D84A 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D84E 0440 0010                  		subi.w	#$10,d0
0000D852 6000 0000                  		bra.w	loc_B5EE
0000D856                            ; ===========================================================================
0000D856                            
0000D856                            loc_B53E:
0000D856 0828 0003 0022             		btst	#3,obStatus(a0)
0000D85C 6600                       		bne.s	loc_B54E
0000D85E 08A8 0000 0034             		bclr	#0,$34(a0)
0000D864 6000                       		bra.s	loc_B582
0000D866                            ; ===========================================================================
0000D866                            
0000D866                            loc_B54E:
0000D866 4A28 0034                  		tst.b	$34(a0)
0000D86A 6600                       		bne.s	loc_B582
0000D86C 117C 0001 0034             		move.b	#1,$34(a0)
0000D872 08E8 0000 0035             		bset	#0,$35(a0)
0000D878 6700                       		beq.s	loc_B582
0000D87A 08E8 0007 0034             		bset	#7,$34(a0)
0000D880 317C 0010 0036             		move.w	#$10,$36(a0)
0000D886 117C 000A 0038             		move.b	#$A,$38(a0)
0000D88C 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D892 6600                       		bne.s	loc_B582
0000D894 317C 0040 0036             		move.w	#$40,$36(a0)
0000D89A                            
0000D89A                            loc_B582:
0000D89A 4A28 0034                  		tst.b	$34(a0)
0000D89E 6A00                       		bpl.s	loc_B5AA
0000D8A0 4A28 0038                  		tst.b	$38(a0)
0000D8A4 6700                       		beq.s	loc_B594
0000D8A6 5328 0038                  		subq.b	#1,$38(a0)
0000D8AA 6600                       		bne.s	loc_B5AA
0000D8AC                            
0000D8AC                            loc_B594:
0000D8AC 4A68 0032                  		tst.w	glass_dist(a0)
0000D8B0 6700                       		beq.s	loc_B5A4
0000D8B2 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D8B6 5368 0036                  		subq.w	#1,$36(a0)
0000D8BA 6600                       		bne.s	loc_B5AA
0000D8BC                            
0000D8BC                            loc_B5A4:
0000D8BC 08A8 0007 0034             		bclr	#7,$34(a0)
0000D8C2                            
0000D8C2                            loc_B5AA:
0000D8C2 3028 0032                  		move.w	glass_dist(a0),d0
0000D8C6 6000                       		bra.s	loc_B5EE
0000D8C8                            ; ===========================================================================
0000D8C8                            
0000D8C8                            Glass_Type04:
0000D8C8 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D8CE 6700                       		beq.s	Glass_ChkSwitch
0000D8D0 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D8D4 0440 0010                  		subi.w	#$10,d0
0000D8D8 6000                       		bra.s	loc_B5EE
0000D8DA                            ; ===========================================================================
0000D8DA                            
0000D8DA                            Glass_ChkSwitch:
0000D8DA 4A28 0034                  		tst.b	$34(a0)
0000D8DE 6600                       		bne.s	loc_B5E0
0000D8E0 45F8 F7E0                  		lea	(f_switch).w,a2
0000D8E4 7000                       		moveq	#0,d0
0000D8E6 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D8EA E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D8EC 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D8F0 6700                       		beq.s	loc_B5EA	; if not, branch
0000D8F2 117C 0001 0034             		move.b	#1,$34(a0)
0000D8F8                            
0000D8F8                            loc_B5E0:
0000D8F8 4A68 0032                  		tst.w	glass_dist(a0)
0000D8FC 6700                       		beq.s	loc_B5EA
0000D8FE 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D902                            
0000D902                            loc_B5EA:
0000D902 3028 0032                  		move.w	glass_dist(a0),d0
0000D906                            
0000D906                            loc_B5EE:
0000D906 3228 0030                  		move.w	$30(a0),d1
0000D90A 9240                       		sub.w	d0,d1
0000D90C 3141 000C                  		move.w	d1,obY(a0)
0000D910 4E75                       		rts	
0000D910 4E75                       		rts	
0000D912                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D912                            ; --------------------------------------------------------------------------------
0000D912                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D912                            ; --------------------------------------------------------------------------------
0000D912                            
0000D912                            SME_NEyTf:	
0000D912 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D916 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D918 0C                         SME_NEyTf_6:	dc.b $C	
0000D919 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D91E B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D923 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D928 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D92D E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D932 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D937 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D93C 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D941 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D946 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D94B 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D950 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D955 02                         SME_NEyTf_43:	dc.b 2	
0000D956 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D95B 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D960 0A                         SME_NEyTf_4E:	dc.b $A	
0000D961 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D966 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D96B D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D970 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D975 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D97A F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D97F 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D984 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D989 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D98E 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D994 00                         		even
0000D994 00                         		even
0000D994                            		include	"_incObj\31 Chained Stompers.asm"
0000D994                            ; ---------------------------------------------------------------------------
0000D994                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D994                            ; ---------------------------------------------------------------------------
0000D994                            
0000D994                            ChainStomp:
0000D994 7000                       		moveq	#0,d0
0000D996 1028 0024                  		move.b	obRoutine(a0),d0
0000D99A 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D99E 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D9A2                            ; ===========================================================================
0000D9A2 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D9A4 0000                       		dc.w loc_B798-CStom_Index
0000D9A6 0000                       		dc.w loc_B7FE-CStom_Index
0000D9A8 0000                       		dc.w CStom_Display2-CStom_Index
0000D9AA 0000                       		dc.w loc_B7E2-CStom_Index
0000D9AC                            
0000D9AC =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D9AC                            
0000D9AC 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D9AE 0100                       		dc.b 1,	0
0000D9B0                            
0000D9B0 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D9B3 041C 01                    		dc.b 4,	$1C, 1
0000D9B6 08CC 03                    		dc.b 8,	$CC, 3
0000D9B9 06F0 02                    		dc.b 6,	$F0, 2
0000D9BC                            
0000D9BC 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D9C0 5000 7800                  		dc.w $5000, $7800
0000D9C4 3800 5800                  		dc.w $3800, $5800
0000D9C8 B800                       		dc.w $B800
0000D9CA                            ; ===========================================================================
0000D9CA                            
0000D9CA                            CStom_Main:	; Routine 0
0000D9CA 7000                       		moveq	#0,d0
0000D9CC 1028 0028                  		move.b	obSubtype(a0),d0
0000D9D0 6A00                       		bpl.s	loc_B6CE
0000D9D2 0240 007F                  		andi.w	#$7F,d0
0000D9D6 D040                       		add.w	d0,d0
0000D9D8 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D9DC 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D9E0 101A                       		move.b	(a2)+,d0
0000D9E2 1140 0028                  		move.b	d0,obSubtype(a0)
0000D9E6                            
0000D9E6                            loc_B6CE:
0000D9E6 0200 000F                  		andi.b	#$F,d0
0000D9EA D040                       		add.w	d0,d0
0000D9EC 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D9F0 4A40                       		tst.w	d0
0000D9F2 6600                       		bne.s	loc_B6E0
0000D9F4 3142 0032                  		move.w	d2,$32(a0)
0000D9F8                            
0000D9F8                            loc_B6E0:
0000D9F8 45F9 0000 D9B0             		lea	(CStom_Var).l,a2
0000D9FE 2248                       		movea.l	a0,a1
0000DA00 7203                       		moveq	#3,d1
0000DA02 6000                       		bra.s	CStom_MakeStomper
0000DA04                            ; ===========================================================================
0000DA04                            
0000DA04                            CStom_Loop:
0000DA04 6100 0000                  		bsr.w	FindNextFreeObj
0000DA08 6600 0000                  		bne.w	CStom_SetSize
0000DA0C                            
0000DA0C                            CStom_MakeStomper:
0000DA0C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DA10 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000DA14 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000DA1A 101A                       		move.b	(a2)+,d0
0000DA1C 4880                       		ext.w	d0
0000DA1E D068 000C                  		add.w	obY(a0),d0
0000DA22 3340 000C                  		move.w	d0,obY(a1)
0000DA26 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000DA2E 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DA34 137C 0004 0001             		move.b	#4,obRender(a1)
0000DA3A 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000DA40 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DA46 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000DA4C 3342 0034                  		move.w	d2,$34(a1)
0000DA50 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DA56 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DA5A 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000DA60 6600                       		bne.s	loc_B76A
0000DA62 5341                       		subq.w	#1,d1
0000DA64 1028 0028                  		move.b	obSubtype(a0),d0
0000DA68 0240 00F0                  		andi.w	#$F0,d0
0000DA6C 0C40 0020                  		cmpi.w	#$20,d0
0000DA70 679A                       		beq.s	CStom_MakeStomper
0000DA72 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000DA78 137C 0090 0020             		move.b	#$90,obColType(a1)
0000DA7E 5241                       		addq.w	#1,d1
0000DA80                            
0000DA80                            loc_B76A:
0000DA80 2348 003C                  		move.l	a0,$3C(a1)
0000DA84 51C9 FF7E                  		dbf	d1,CStom_Loop
0000DA88                            
0000DA88 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DA8E                            
0000DA8E                            CStom_SetSize:
0000DA8E 7000                       		moveq	#0,d0
0000DA90 1028 0028                  		move.b	obSubtype(a0),d0
0000DA94 E648                       		lsr.w	#3,d0
0000DA96 0200 000E                  		andi.b	#$E,d0
0000DA9A 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000DA9E 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000DAA2 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000DAA6 6000                       		bra.s	loc_B798
0000DAA8                            ; ===========================================================================
0000DAA8 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000DAAA 3009                       		dc.b $30, 9
0000DAAC 100A                       		dc.b $10, $A
0000DAAE                            ; ===========================================================================
0000DAAE                            
0000DAAE                            loc_B798:	; Routine 2
0000DAAE 6100 0000                  		bsr.w	CStom_Types
0000DAB2 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000DAB8 7200                       		moveq	#0,d1
0000DABA 1228 0014                  		move.b	obActWid(a0),d1
0000DABE 0641 000B                  		addi.w	#$B,d1
0000DAC2 343C 000C                  		move.w	#$C,d2
0000DAC6 363C 000D                  		move.w	#$D,d3
0000DACA 3828 0008                  		move.w	obX(a0),d4
0000DACE 6100 0000                  		bsr.w	SolidObject
0000DAD2 0828 0003 0022             		btst	#3,obStatus(a0)
0000DAD8 6700                       		beq.s	CStom_Display
0000DADA 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DAE0 6400                       		bcc.s	CStom_Display
0000DAE2 2448                       		movea.l	a0,a2
0000DAE4 41F8 D000                  		lea	(v_player).w,a0
0000DAE8 4EB9 0000 0000             		jsr	(KillSonic).l
0000DAEE 204A                       		movea.l	a2,a0
0000DAF0                            
0000DAF0                            CStom_Display:
0000DAF0 6100 0000                  		bsr.w	DisplaySprite
0000DAF4 6000 0000                  		bra.w	CStom_ChkDel
0000DAF8                            ; ===========================================================================
0000DAF8                            
0000DAF8                            loc_B7E2:	; Routine 8
0000DAF8 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000DAFE 08E8 0004 0001             		bset	#4,obRender(a0)
0000DB04 2268 003C                  		movea.l	$3C(a0),a1
0000DB08 1029 0032                  		move.b	$32(a1),d0
0000DB0C EA08                       		lsr.b	#5,d0
0000DB0E 5600                       		addq.b	#3,d0
0000DB10 1140 001A                  		move.b	d0,obFrame(a0)
0000DB14                            
0000DB14                            loc_B7FE:	; Routine 4
0000DB14 2268 003C                  		movea.l	$3C(a0),a1
0000DB18 7000                       		moveq	#0,d0
0000DB1A 1029 0032                  		move.b	$32(a1),d0
0000DB1E D068 0030                  		add.w	$30(a0),d0
0000DB22 3140 000C                  		move.w	d0,obY(a0)
0000DB26                            
0000DB26                            CStom_Display2:	; Routine 6
0000DB26 6100 0000                  		bsr.w	DisplaySprite
0000DB2A                            
0000DB2A                            CStom_ChkDel:
0000DB48 4E75                       		rts	
0000DB4A                            ; ===========================================================================
0000DB4A                            
0000DB4A                            CStom_Types:
0000DB4A 1028 0028                  		move.b	obSubtype(a0),d0
0000DB4E 0240 000F                  		andi.w	#$F,d0
0000DB52 D040                       		add.w	d0,d0
0000DB54 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000DB58 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000DB5C                            ; ===========================================================================
0000DB5C 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000DB5E 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB60 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB62 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DB64 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB66 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DB68 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB6A                            ; ===========================================================================
0000DB6A                            
0000DB6A                            CStom_Type00:
0000DB6A 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000DB6E 7000                       		moveq	#0,d0
0000DB70 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000DB74 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000DB78 6700                       		beq.s	loc_B8A8	; if not, branch
0000DB7A 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000DB7E 6A00                       		bpl.s	loc_B872
0000DB80 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DB86 6700                       		beq.s	loc_B8A0
0000DB88                            
0000DB88                            loc_B872:
0000DB88 4A68 0032                  		tst.w	$32(a0)
0000DB8C 6700                       		beq.s	loc_B8A0
0000DB8E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DB92 0200 000F                  		andi.b	#$F,d0
0000DB96 6600                       		bne.s	loc_B892
0000DB98 4A28 0001                  		tst.b	1(a0)
0000DB9C 6A00                       		bpl.s	loc_B892
0000DBA8                            
0000DBA8                            loc_B892:
0000DBA8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DBAE 6400                       		bcc.s	CStom_Restart
0000DBB0 317C 0000 0032             		move.w	#0,$32(a0)
0000DBB6                            
0000DBB6                            loc_B8A0:
0000DBB6 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DBBC 6000                       		bra.s	CStom_Restart
0000DBBE                            ; ===========================================================================
0000DBBE                            
0000DBBE                            loc_B8A8:
0000DBBE 3228 0034                  		move.w	$34(a0),d1
0000DBC2 B268 0032                  		cmp.w	$32(a0),d1
0000DBC6 6700                       		beq.s	CStom_Restart
0000DBC8 3028 0012                  		move.w	obVelY(a0),d0
0000DBCC 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DBD2 D168 0032                  		add.w	d0,$32(a0)
0000DBD6 B268 0032                  		cmp.w	$32(a0),d1
0000DBDA 6200                       		bhi.s	CStom_Restart
0000DBDC 3141 0032                  		move.w	d1,$32(a0)
0000DBE0 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DBE6 4A28 0001                  		tst.b	obRender(a0)
0000DBEA 6A00                       		bpl.s	CStom_Restart
0000DBF6                            
0000DBF6                            CStom_Restart:
0000DBF6 7000                       		moveq	#0,d0
0000DBF8 1028 0032                  		move.b	$32(a0),d0
0000DBFC D068 0030                  		add.w	$30(a0),d0
0000DC00 3140 000C                  		move.w	d0,obY(a0)
0000DC04 4E75                       		rts	
0000DC06                            ; ===========================================================================
0000DC06                            
0000DC06                            CStom_Type01:
0000DC06 4A68 0036                  		tst.w	$36(a0)
0000DC0A 6700                       		beq.s	loc_B938
0000DC0C 4A68 0038                  		tst.w	$38(a0)
0000DC10 6700                       		beq.s	loc_B902
0000DC12 5368 0038                  		subq.w	#1,$38(a0)
0000DC16 6000                       		bra.s	loc_B97C
0000DC18                            ; ===========================================================================
0000DC18                            
0000DC18                            loc_B902:
0000DC18 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DC1C 0200 000F                  		andi.b	#$F,d0
0000DC20 6600                       		bne.s	loc_B91C
0000DC22 4A28 0001                  		tst.b	obRender(a0)
0000DC26 6A00                       		bpl.s	loc_B91C
0000DC32                            
0000DC32                            loc_B91C:
0000DC32 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DC38 6400                       		bcc.s	loc_B97C
0000DC3A 317C 0000 0032             		move.w	#0,$32(a0)
0000DC40 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DC46 317C 0000 0036             		move.w	#0,$36(a0)
0000DC4C 6000                       		bra.s	loc_B97C
0000DC4E                            ; ===========================================================================
0000DC4E                            
0000DC4E                            loc_B938:
0000DC4E 3228 0034                  		move.w	$34(a0),d1
0000DC52 B268 0032                  		cmp.w	$32(a0),d1
0000DC56 6700                       		beq.s	loc_B97C
0000DC58 3028 0012                  		move.w	obVelY(a0),d0
0000DC5C 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DC62 D168 0032                  		add.w	d0,$32(a0)
0000DC66 B268 0032                  		cmp.w	$32(a0),d1
0000DC6A 6200                       		bhi.s	loc_B97C
0000DC6C 3141 0032                  		move.w	d1,$32(a0)
0000DC70 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DC76 317C 0001 0036             		move.w	#1,$36(a0)
0000DC7C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DC82 4A28 0001                  		tst.b	obRender(a0)
0000DC86 6A00                       		bpl.s	loc_B97C
0000DC92                            
0000DC92                            loc_B97C:
0000DC92 6000 FF62                  		bra.w	CStom_Restart
0000DC96                            ; ===========================================================================
0000DC96                            
0000DC96                            CStom_Type03:
0000DC96 3038 D008                  		move.w	(v_player+obX).w,d0
0000DC9A 9068 0008                  		sub.w	obX(a0),d0
0000DC9E 6400                       		bcc.s	loc_B98C
0000DCA0 4440                       		neg.w	d0
0000DCA2                            
0000DCA2                            loc_B98C:
0000DCA2 0C40 0090                  		cmpi.w	#$90,d0
0000DCA6 6400                       		bcc.s	loc_B996
0000DCA8 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DCAC                            
0000DCAC                            loc_B996:
0000DCAC 6000 FF48                  		bra.w	CStom_Restart
0000DCAC 6000 FF48                  		bra.w	CStom_Restart
0000DCB0                            		include	"_incObj\45 Sideways Stomper.asm"
0000DCB0                            ; ---------------------------------------------------------------------------
0000DCB0                            ; Object 45 - spiked metal block from beta version (MZ)
0000DCB0                            ; ---------------------------------------------------------------------------
0000DCB0                            
0000DCB0                            SideStomp:
0000DCB0 7000                       		moveq	#0,d0
0000DCB2 1028 0024                  		move.b	obRoutine(a0),d0
0000DCB6 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DCBA 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DCBE                            ; ===========================================================================
0000DCBE 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DCC0 0000                       		dc.w SStom_Solid-SStom_Index
0000DCC2 0000                       		dc.w loc_BA8E-SStom_Index
0000DCC4 0000                       		dc.w SStom_Display-SStom_Index
0000DCC6 0000                       		dc.w SStom_Pole-SStom_Index
0000DCC8                            
0000DCC8                            		;	routine		frame
0000DCC8                            		;		 xpos
0000DCC8 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DCCB 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DCCE 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DCD1 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DCD4                            
0000DCD4                            ;word_B9BE:	; Note that this indicates three subtypes
0000DCD4 3800                       SStom_Len:	dc.w $3800	; short
0000DCD6 A000                       		dc.w $A000	; long
0000DCD8 5000                       		dc.w $5000	; medium
0000DCDA                            ; ===========================================================================
0000DCDA                            
0000DCDA                            SStom_Main:	; Routine 0
0000DCDA 7000                       		moveq	#0,d0
0000DCDC 1028 0028                  		move.b	obSubtype(a0),d0
0000DCE0 D040                       		add.w	d0,d0
0000DCE2 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DCE6 45F9 0000 DCC8             		lea	(SStom_Var).l,a2
0000DCEC 2248                       		movea.l	a0,a1
0000DCEE 7203                       		moveq	#3,d1
0000DCF0 6000                       		bra.s	@load
0000DCF2                            
0000DCF2                            	@loop:
0000DCF2 6100 0000                  		bsr.w	FindNextFreeObj
0000DCF6 6600                       		bne.s	@fail
0000DCF8                            
0000DCF8                            	@load:
0000DCF8 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DCFC 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DD00 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DD06 101A                       		move.b	(a2)+,d0
0000DD08 4880                       		ext.w	d0
0000DD0A D068 0008                  		add.w	obX(a0),d0
0000DD0E 3340 0008                  		move.w	d0,obX(a1)
0000DD12 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DD1A 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DD20 137C 0004 0001             		move.b	#4,obRender(a1)
0000DD26 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DD2C 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DD32 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DD38 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DD3E 3342 0034                  		move.w	d2,$34(a1)
0000DD42 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DD48 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DD4C 6600                       		bne.s	@notspikes	; if not, branch
0000DD4E 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DD54                            
0000DD54                            	@notspikes:
0000DD54 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DD58 2348 003C                  		move.l	a0,$3C(a1)
0000DD5C 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DD60                            
0000DD60 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DD66                            
0000DD66                            	@fail:
0000DD66 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DD6C                            
0000DD6C                            SStom_Solid:	; Routine 2
0000DD6C 3F28 0008                  		move.w	obX(a0),-(sp)
0000DD70 6100 0000                  		bsr.w	SStom_Move
0000DD74 323C 0017                  		move.w	#$17,d1
0000DD78 343C 0020                  		move.w	#$20,d2
0000DD7C 363C 0020                  		move.w	#$20,d3
0000DD80 381F                       		move.w	(sp)+,d4
0000DD82 6100 0000                  		bsr.w	SolidObject
0000DD86 6100 0000                  		bsr.w	DisplaySprite
0000DD8A 6000 0000                  		bra.w	SStom_ChkDel
0000DD8E                            ; ===========================================================================
0000DD8E                            
0000DD8E                            SStom_Pole:	; Routine 8
0000DD8E 2268 003C                  		movea.l	$3C(a0),a1
0000DD92 1029 0032                  		move.b	$32(a1),d0
0000DD96 0600 0010                  		addi.b	#$10,d0
0000DD9A EA08                       		lsr.b	#5,d0
0000DD9C 5600                       		addq.b	#3,d0
0000DD9E 1140 001A                  		move.b	d0,obFrame(a0)
0000DDA2                            
0000DDA2                            loc_BA8E:	; Routine 4
0000DDA2 2268 003C                  		movea.l	$3C(a0),a1
0000DDA6 7000                       		moveq	#0,d0
0000DDA8 1029 0032                  		move.b	$32(a1),d0
0000DDAC 4440                       		neg.w	d0
0000DDAE D068 0030                  		add.w	$30(a0),d0
0000DDB2 3140 0008                  		move.w	d0,obX(a0)
0000DDB6                            
0000DDB6                            SStom_Display:	; Routine 6
0000DDB6 6100 0000                  		bsr.w	DisplaySprite
0000DDBA                            
0000DDBA                            SStom_ChkDel:
0000DDD8 4E75                       		rts	
0000DDDA                            
0000DDDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDDA                            
0000DDDA                            
0000DDDA                            SStom_Move:
0000DDDA 7000                       		moveq	#0,d0
0000DDDC 1028 0028                  		move.b	obSubtype(a0),d0
0000DDE0 D040                       		add.w	d0,d0
0000DDE2 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DDE6 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DDEA                            ; End of function SStom_Move
0000DDEA                            
0000DDEA                            ; ===========================================================================
0000DDEA                            		; This indicates only two subtypes... that do the same thing
0000DDEA                            		; Compare to SStom_Len. This breaks subtype 02
0000DDEA 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DDEC 0000                       		dc.w loc_BADA-off_BAD6
0000DDEE                            ; ===========================================================================
0000DDEE                            
0000DDEE                            loc_BADA:
0000DDEE 4A68 0036                  		tst.w	$36(a0)
0000DDF2 6700                       		beq.s	loc_BB08
0000DDF4 4A68 0038                  		tst.w	$38(a0)
0000DDF8 6700                       		beq.s	loc_BAEC
0000DDFA 5368 0038                  		subq.w	#1,$38(a0)
0000DDFE 6000                       		bra.s	loc_BB3C
0000DE00                            ; ===========================================================================
0000DE00                            
0000DE00                            loc_BAEC:
0000DE00 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DE06 6400                       		bcc.s	loc_BB3C
0000DE08 317C 0000 0032             		move.w	#0,$32(a0)
0000DE0E 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DE14 317C 0000 0036             		move.w	#0,$36(a0)
0000DE1A 6000                       		bra.s	loc_BB3C
0000DE1C                            ; ===========================================================================
0000DE1C                            
0000DE1C                            loc_BB08:
0000DE1C 3228 0034                  		move.w	$34(a0),d1
0000DE20 B268 0032                  		cmp.w	$32(a0),d1
0000DE24 6700                       		beq.s	loc_BB3C
0000DE26 3028 0010                  		move.w	obVelX(a0),d0
0000DE2A 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DE30 D168 0032                  		add.w	d0,$32(a0)
0000DE34 B268 0032                  		cmp.w	$32(a0),d1
0000DE38 6200                       		bhi.s	loc_BB3C
0000DE3A 3141 0032                  		move.w	d1,$32(a0)
0000DE3E 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DE44 317C 0001 0036             		move.w	#1,$36(a0)
0000DE4A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DE50                            
0000DE50                            loc_BB3C:
0000DE50 7000                       		moveq	#0,d0
0000DE52 1028 0032                  		move.b	$32(a0),d0
0000DE56 4440                       		neg.w	d0
0000DE58 D068 0030                  		add.w	$30(a0),d0
0000DE5C 3140 0008                  		move.w	d0,obX(a0)
0000DE60 4E75                       		rts	
0000DE60 4E75                       		rts	
0000DE62                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DE62                            ; ---------------------------------------------------------------------------
0000DE62                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DE62                            ; ---------------------------------------------------------------------------
0000DE62                            Map_CStom_internal:
0000DE62 0000                       		dc.w @wideblock-Map_CStom_internal
0000DE64 0000                       		dc.w @spikes-Map_CStom_internal
0000DE66 0000                       		dc.w @ceiling-Map_CStom_internal
0000DE68 0000                       		dc.w @chain1-Map_CStom_internal
0000DE6A 0000                       		dc.w @chain2-Map_CStom_internal
0000DE6C 0000                       		dc.w @chain3-Map_CStom_internal
0000DE6E 0000                       		dc.w @chain4-Map_CStom_internal
0000DE70 0000                       		dc.w @chain5-Map_CStom_internal
0000DE72 0000                       		dc.w @chain5-Map_CStom_internal
0000DE74 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DE76 0000                       		dc.w @smallblock-Map_CStom_internal
0000DE78 05                         @wideblock:	dc.b 5
0000DE79 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DE7E F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DE83 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DE88 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DE8D F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DE92 05                         @spikes:	dc.b 5
0000DE93 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DE98 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DE9D F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DEA2 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DEA7 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DEAC 01                         @ceiling:	dc.b 1
0000DEAD DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DEB2 02                         @chain1:	dc.b 2
0000DEB3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DEB8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DEBD 04                         @chain2:	dc.b 4
0000DEBE E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DEC3 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DEC8 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DECD 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DED2 06                         @chain3:	dc.b 6
0000DED3 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DED8 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DEDD E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DEE2 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DEE7 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DEEC 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DEF1 08                         @chain4:	dc.b 8
0000DEF2 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DEF7 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DEFC C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DF01 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DF06 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DF0B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DF10 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DF15 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DF1A 0A                         @chain5:	dc.b $A
0000DF1B 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DF20 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DF25 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DF2A B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DF2F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DF34 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DF39 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DF3E F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DF43 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DF48 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DF4D 05                         @mediumblock:	dc.b 5
0000DF4E F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DF53 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DF58 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DF5D F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DF62 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DF67 01                         @smallblock:	dc.b 1
0000DF68 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DF6E 00                         		even
0000DF6E 00                         		even
0000DF6E                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DF6E                            ; ---------------------------------------------------------------------------
0000DF6E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DF6E                            ; ---------------------------------------------------------------------------
0000DF6E                            Map_SStom_internal:
0000DF6E 0000                       		dc.w @block-Map_SStom_internal
0000DF70 0000                       		dc.w @spikes-Map_SStom_internal
0000DF72 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DF74 0000                       		dc.w @pole1-Map_SStom_internal
0000DF76 0000                       		dc.w @pole2-Map_SStom_internal
0000DF78 0000                       		dc.w @pole3-Map_SStom_internal
0000DF7A 0000                       		dc.w @pole4-Map_SStom_internal
0000DF7C 0000                       		dc.w @pole5-Map_SStom_internal
0000DF7E 0000                       		dc.w @pole5-Map_SStom_internal
0000DF80 03                         @block:		dc.b 3
0000DF81 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DF86 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DF8B F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DF90 03                         @spikes:	dc.b 3
0000DF91 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DF96 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DF9B 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DFA0 01                         @wallbracket:	dc.b 1
0000DFA1 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DFA6 02                         @pole1:		dc.b 2
0000DFA7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DFAC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFB1 04                         @pole2:		dc.b 4
0000DFB2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DFB7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFBC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DFC1 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DFC6 06                         @pole3:		dc.b 6
0000DFC7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DFCC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFD1 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DFD6 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DFDB F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DFE0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DFE5 08                         @pole4:		dc.b 8
0000DFE6 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DFEB F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFF0 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DFF5 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DFFA F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DFFF F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000E004 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000E009 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000E00E 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000E00F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000E014 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E019 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000E01E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000E023 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000E028 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000E02D F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000E032 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000E037 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000E03C F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000E041                            		; @pole6 should be here, but it isn't...
0000E042 00                         		even
0000E042 00                         		even
0000E042                            
0000E042                            		include	"_incObj\32 Button.asm"
0000E042                            ; ---------------------------------------------------------------------------
0000E042                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000E042                            ; ---------------------------------------------------------------------------
0000E042                            
0000E042                            Button:
0000E042 7000                       		moveq	#0,d0
0000E044 1028 0024                  		move.b	obRoutine(a0),d0
0000E048 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000E04C 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000E050                            ; ===========================================================================
0000E050 0000                       But_Index:	dc.w But_Main-But_Index
0000E052 0000                       		dc.w But_Pressed-But_Index
0000E054                            ; ===========================================================================
0000E054                            
0000E054                            But_Main:	; Routine 0
0000E054 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E058 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000E060 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000E066 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000E06C 6700                       		beq.s	But_IsMZ	; if yes, branch
0000E06E                            
0000E06E 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000E074                            
0000E074                            	But_IsMZ:
0000E074 117C 0004 0001             		move.b	#4,obRender(a0)
0000E07A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000E080 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000E086 5668 000C                  		addq.w	#3,obY(a0)
0000E08A                            
0000E08A                            But_Pressed:	; Routine 2
0000E08A 4A28 0001                  		tst.b	obRender(a0)
0000E08E 6A00                       		bpl.s	But_Display
0000E090 323C 001B                  		move.w	#$1B,d1
0000E094 343C 0005                  		move.w	#5,d2
0000E098 363C 0005                  		move.w	#5,d3
0000E09C 3828 0008                  		move.w	obX(a0),d4
0000E0A0 6100 0000                  		bsr.w	SolidObject
0000E0A4 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000E0AA 1028 0028                  		move.b	obSubtype(a0),d0
0000E0AE 0240 000F                  		andi.w	#$F,d0
0000E0B2 47F8 F7E0                  		lea	(f_switch).w,a3
0000E0B6 47F3 0000                  		lea	(a3,d0.w),a3
0000E0BA 7600                       		moveq	#0,d3
0000E0BC 0828 0006 0028             		btst	#6,obSubtype(a0)
0000E0C2 6700                       		beq.s	loc_BDB2
0000E0C4 7607                       		moveq	#7,d3
0000E0C6                            
0000E0C6                            loc_BDB2:
0000E0C6 4A28 0028                  		tst.b	obSubtype(a0)
0000E0CA 6A00                       		bpl.s	loc_BDBE
0000E0CC 6100 0000                  		bsr.w	But_MZBlock
0000E0D0 6600                       		bne.s	loc_BDC8
0000E0D2                            
0000E0D2                            loc_BDBE:
0000E0D2 4A28 0025                  		tst.b	ob2ndRout(a0)
0000E0D6 6600                       		bne.s	loc_BDC8
0000E0D8 0793                       		bclr	d3,(a3)
0000E0DA 6000                       		bra.s	loc_BDDE
0000E0DC                            ; ===========================================================================
0000E0DC                            
0000E0DC                            loc_BDC8:
0000E0DC 4A13                       		tst.b	(a3)
0000E0DE 6600                       		bne.s	loc_BDD6
0000E0EA                            
0000E0EA                            loc_BDD6:
0000E0EA 07D3                       		bset	d3,(a3)
0000E0EC 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000E0F2                            
0000E0F2                            loc_BDDE:
0000E0F2 0828 0005 0028             		btst	#5,obSubtype(a0)
0000E0F8 6700                       		beq.s	But_Display
0000E0FA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000E0FE 6A00                       		bpl.s	But_Display
0000E100 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000E106 0868 0001 001A             		bchg	#1,obFrame(a0)
0000E10C                            
0000E10C                            But_Display:
0000E10C 6100 0000                  		bsr.w	DisplaySprite
0000E12E 4E75                       		rts	
0000E130                            ; ===========================================================================
0000E130                            
0000E130                            But_Delete:
0000E130 6100 0000                  		bsr.w	DeleteObject
0000E134 4E75                       		rts	
0000E136                            
0000E136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E136                            
0000E136                            
0000E136                            But_MZBlock:
0000E136 3F03                       		move.w	d3,-(sp)
0000E138 3428 0008                  		move.w	obX(a0),d2
0000E13C 3628 000C                  		move.w	obY(a0),d3
0000E140 0442 0010                  		subi.w	#$10,d2
0000E144 5143                       		subq.w	#8,d3
0000E146 383C 0020                  		move.w	#$20,d4
0000E14A 3A3C 0010                  		move.w	#$10,d5
0000E14E 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000E152 3C3C 005F                  		move.w	#$5F,d6
0000E156                            
0000E156                            But_MZLoop:
0000E156 4A29 0001                  		tst.b	obRender(a1)
0000E15A 6A00                       		bpl.s	loc_BE4E
0000E15C 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000E160 6700                       		beq.s	loc_BE5E	; if yes, branch
0000E162                            
0000E162                            loc_BE4E:
0000E162 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000E166 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000E16A                            
0000E16A 361F                       		move.w	(sp)+,d3
0000E16C 7000                       		moveq	#0,d0
0000E16E                            
0000E16E                            locret_BE5A:
0000E16E 4E75                       		rts	
0000E170                            ; ===========================================================================
0000E170 1010                       But_MZData:	dc.b $10, $10
0000E172                            ; ===========================================================================
0000E172                            
0000E172                            loc_BE5E:
0000E172 7001                       		moveq	#1,d0
0000E174 0240 003F                  		andi.w	#$3F,d0
0000E178 D040                       		add.w	d0,d0
0000E17A 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000E17E 121A                       		move.b	(a2)+,d1
0000E180 4881                       		ext.w	d1
0000E182 3029 0008                  		move.w	obX(a1),d0
0000E186 9041                       		sub.w	d1,d0
0000E188 9042                       		sub.w	d2,d0
0000E18A 6400                       		bcc.s	loc_BE80
0000E18C D241                       		add.w	d1,d1
0000E18E D041                       		add.w	d1,d0
0000E190 6500                       		bcs.s	loc_BE84
0000E192 60CE                       		bra.s	loc_BE4E
0000E194                            ; ===========================================================================
0000E194                            
0000E194                            loc_BE80:
0000E194 B044                       		cmp.w	d4,d0
0000E196 62CA                       		bhi.s	loc_BE4E
0000E198                            
0000E198                            loc_BE84:
0000E198 121A                       		move.b	(a2)+,d1
0000E19A 4881                       		ext.w	d1
0000E19C 3029 000C                  		move.w	obY(a1),d0
0000E1A0 9041                       		sub.w	d1,d0
0000E1A2 9043                       		sub.w	d3,d0
0000E1A4 6400                       		bcc.s	loc_BE9A
0000E1A6 D241                       		add.w	d1,d1
0000E1A8 D041                       		add.w	d1,d0
0000E1AA 6500                       		bcs.s	loc_BE9E
0000E1AC 60B4                       		bra.s	loc_BE4E
0000E1AE                            ; ===========================================================================
0000E1AE                            
0000E1AE                            loc_BE9A:
0000E1AE B045                       		cmp.w	d5,d0
0000E1B0 62B0                       		bhi.s	loc_BE4E
0000E1B2                            
0000E1B2                            loc_BE9E:
0000E1B2 361F                       		move.w	(sp)+,d3
0000E1B4 7001                       		moveq	#1,d0
0000E1B6 4E75                       		rts	
0000E1B8                            ; End of function But_MZBlock
0000E1B8                            ; End of function But_MZBlock
0000E1B8                            Map_But:	include	"_maps\Button.asm"
0000E1B8                            ; ---------------------------------------------------------------------------
0000E1B8                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000E1B8                            ; ---------------------------------------------------------------------------
0000E1B8                            Map_But_internal:
0000E1B8 0000                       		dc.w byte_BEAC-Map_But_internal
0000E1BA 0000                       		dc.w byte_BEB7-Map_But_internal
0000E1BC 0000                       		dc.w byte_BEC2-Map_But_internal
0000E1BE 0000                       		dc.w byte_BEB7-Map_But_internal
0000E1C0 02                         byte_BEAC:	dc.b 2
0000E1C1 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000E1C6 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000E1CB 02                         byte_BEB7:	dc.b 2
0000E1CC F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000E1D1 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000E1D6 02                         byte_BEC2:	dc.b 2
0000E1D7 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000E1DC F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000E1E1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E1E6                            		even
0000E1E6                            		even
0000E1E6                            
0000E1E6                            		include	"_incObj\33 Pushable Blocks.asm"
0000E1E6                            ; ---------------------------------------------------------------------------
0000E1E6                            ; Object 33 - pushable blocks (MZ, LZ)
0000E1E6                            ; ---------------------------------------------------------------------------
0000E1E6                            
0000E1E6                            PushBlock:
0000E1E6 7000                       		moveq	#0,d0
0000E1E8 1028 0024                  		move.b	obRoutine(a0),d0
0000E1EC 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E1F0 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E1F4                            ; ===========================================================================
0000E1F4 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E1F6 0000                       		dc.w loc_BF6E-PushB_Index
0000E1F8 0000                       		dc.w loc_C02C-PushB_Index
0000E1FA                            
0000E1FA 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E1FC 4001                       		dc.b $40, 1
0000E1FE                            ; ===========================================================================
0000E1FE                            
0000E1FE                            PushB_Main:	; Routine 0
0000E1FE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E202 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E208 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E20E 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E216 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E21C 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E222 6600                       		bne.s	@notLZ
0000E224 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E22A                            
0000E22A                            	@notLZ:
0000E22A 117C 0004 0001             		move.b	#4,obRender(a0)
0000E230 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E236 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E23C 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E242 7000                       		moveq	#0,d0
0000E244 1028 0028                  		move.b	obSubtype(a0),d0
0000E248 D040                       		add.w	d0,d0
0000E24A 0240 000E                  		andi.w	#$E,d0
0000E24E 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E252 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E256 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E25A 4A28 0028                  		tst.b	obSubtype(a0)
0000E25E 6700                       		beq.s	@chkgone
0000E260 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E266                            
0000E266                            	@chkgone:
0000E266 45F8 FC00                  		lea	(v_objstate).w,a2
0000E26A 7000                       		moveq	#0,d0
0000E26C 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E270 6700                       		beq.s	loc_BF6E
0000E272 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E278 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E27E 6600 0000                  		bne.w	DeleteObject
0000E282                            
0000E282                            loc_BF6E:	; Routine 2
0000E282 4A28 0032                  		tst.b	$32(a0)
0000E286 6600 0000                  		bne.w	loc_C046
0000E28A 7200                       		moveq	#0,d1
0000E28C 1228 0014                  		move.b	obActWid(a0),d1
0000E290 0641 000B                  		addi.w	#$B,d1
0000E294 343C 0010                  		move.w	#$10,d2
0000E298 363C 0011                  		move.w	#$11,d3
0000E29C 3828 0008                  		move.w	obX(a0),d4
0000E2A0 6100 0000                  		bsr.w	loc_C186
0000E2A4 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E2AA 6600                       		bne.s	loc_BFC6	; if not, branch
0000E2AC 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E2B2 3028 0008                  		move.w	obX(a0),d0
0000E2B6 0C40 0A20                  		cmpi.w	#$A20,d0
0000E2BA 6500                       		bcs.s	loc_BFC6
0000E2BC 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E2C0 6400                       		bcc.s	loc_BFC6
0000E2C2 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E2C6 0440 001C                  		subi.w	#$1C,d0
0000E2CA 3140 000C                  		move.w	d0,obY(a0)
0000E2CE 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E2D4 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E2DA                            
0000E2DA                            	loc_BFC6:
0000E2F6 6000 0000                  		bra.w	DisplaySprite
0000E2FA                            ; ===========================================================================
0000E2FA                            
0000E2FA                            loc_ppppp:
0000E316 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E31C 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E322 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E328 6000                       		bra.s	loc_C02C
0000E32A                            ; ===========================================================================
0000E32A                            
0000E32A                            loc_C016:
0000E32A 45F8 FC00                  		lea	(v_objstate).w,a2
0000E32E 7000                       		moveq	#0,d0
0000E330 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E334 6700                       		beq.s	loc_C028
0000E336 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E33C                            
0000E33C                            loc_C028:
0000E33C 6000 0000                  		bra.w	DeleteObject
0000E340                            ; ===========================================================================
0000E340                            
0000E340                            loc_C02C:	; Routine 4
0000E340 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E344 6700                       		beq.s	locret_C044
0000E346 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E34C 4228 0032                  		clr.b	$32(a0)
0000E350 4268 0010                  		clr.w	obVelX(a0)
0000E354 4268 0012                  		clr.w	obVelY(a0)
0000E358                            
0000E358                            locret_C044:
0000E358 4E75                       		rts	
0000E35A                            ; ===========================================================================
0000E35A                            
0000E35A                            loc_C046:
0000E35A 3F28 0008                  		move.w	obX(a0),-(sp)
0000E35E 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E364 6400                       		bcc.s	loc_C056
0000E366 6100 0000                  		bsr.w	SpeedToPos
0000E36A                            
0000E36A                            loc_C056:
0000E36A 0828 0001 0022             		btst	#1,obStatus(a0)
0000E370 6700                       		beq.s	loc_C0A0
0000E372 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E378 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E37E 4A41                       		tst.w	d1
0000E380 6A00 0000                  		bpl.w	loc_C09E
0000E384 D368 000C                  		add.w	d1,obY(a0)
0000E388 4268 0012                  		clr.w	obVelY(a0)
0000E38C 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E392 3011                       		move.w	(a1),d0
0000E394 0240 03FF                  		andi.w	#$3FF,d0
0000E398 0C40 016A                  		cmpi.w	#$16A,d0
0000E39C 6500                       		bcs.s	loc_C09E
0000E39E 3028 0030                  		move.w	$30(a0),d0
0000E3A2 E640                       		asr.w	#3,d0
0000E3A4 3140 0010                  		move.w	d0,obVelX(a0)
0000E3A8 117C 0001 0032             		move.b	#1,$32(a0)
0000E3AE 4268 000E                  		clr.w	$E(a0)
0000E3B2                            
0000E3B2                            loc_C09E:
0000E3B2 6000                       		bra.s	loc_C0E6
0000E3B4                            ; ===========================================================================
0000E3B4                            
0000E3B4                            loc_C0A0:
0000E3B4 4A68 0010                  		tst.w	obVelX(a0)
0000E3B8 6700 0000                  		beq.w	loc_C0D6
0000E3BC 6B00                       		bmi.s	loc_C0BC
0000E3BE 7600                       		moveq	#0,d3
0000E3C0 1628 0014                  		move.b	obActWid(a0),d3
0000E3C4 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E3CA 4A41                       		tst.w	d1		; has block touched a wall?
0000E3CC 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E3CE 6000                       		bra.s	loc_C0E6
0000E3D0                            ; ===========================================================================
0000E3D0                            
0000E3D0                            loc_C0BC:
0000E3D0 7600                       		moveq	#0,d3
0000E3D2 1628 0014                  		move.b	obActWid(a0),d3
0000E3D6 4643                       		not.w	d3
0000E3D8 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E3DE 4A41                       		tst.w	d1		; has block touched a wall?
0000E3E0 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E3E2 6000                       		bra.s	loc_C0E6
0000E3E4                            ; ===========================================================================
0000E3E4                            
0000E3E4                            PushB_StopPush:
0000E3E4 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E3E8 6000                       		bra.s	loc_C0E6
0000E3EA                            ; ===========================================================================
0000E3EA                            
0000E3EA                            loc_C0D6:
0000E3EA 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E3F2 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E3F8 6400                       		bcc.s	loc_C104
0000E3FA                            
0000E3FA                            loc_C0E6:
0000E3FA 7200                       		moveq	#0,d1
0000E3FC 1228 0014                  		move.b	obActWid(a0),d1
0000E400 0641 000B                  		addi.w	#$B,d1
0000E404 343C 0010                  		move.w	#$10,d2
0000E408 363C 0011                  		move.w	#$11,d3
0000E40C 381F                       		move.w	(sp)+,d4
0000E40E 6100 0000                  		bsr.w	loc_C186
0000E412 6100                       		bsr.s	PushB_ChkLava
0000E414 6000 FEC4                  		bra.w	loc_BFC6
0000E418                            ; ===========================================================================
0000E418                            
0000E418                            loc_C104:
0000E418 381F                       		move.w	(sp)+,d4
0000E41A 43F8 D000                  		lea	(v_player).w,a1
0000E41E 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E424 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E42A 6000 FECE                  		bra.w	loc_ppppp
0000E42E                            ; ===========================================================================
0000E42E                            
0000E42E                            PushB_ChkLava:
0000E42E 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E434 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E436 343C FFE0                  		move.w	#-$20,d2
0000E43A 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E440 6700                       		beq.s	PushB_LoadLava
0000E442 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E448 6700                       		beq.s	PushB_LoadLava
0000E44A 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E450 6700                       		beq.s	PushB_LoadLava
0000E452 4E75                       		rts	
0000E454                            ; ===========================================================================
0000E454                            
0000E454                            PushB_ChkLava2:
0000E454 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E45A 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E45C 343C 0020                  		move.w	#$20,d2
0000E460 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E466 6700                       		beq.s	PushB_LoadLava
0000E468 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E46E 6700                       		beq.s	PushB_LoadLava
0000E470                            
0000E470                            PushB_NoLava:
0000E470 4E75                       		rts	
0000E472                            ; ===========================================================================
0000E472                            
0000E472                            PushB_LoadLava:
0000E472 6100 0000                  		bsr.w	FindFreeObj
0000E476 6600                       		bne.s	locret_C184
0000E478 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E47C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E482 D569 0008                  		add.w	d2,obX(a1)
0000E486 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E48C 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E492 2348 003C                  		move.l	a0,$3C(a1)
0000E496                            
0000E496                            locret_C184:
0000E496 4E75                       		rts	
0000E498                            ; ===========================================================================
0000E498                            
0000E498                            loc_C186:
0000E498 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E49C 6700 0000                  		beq.w	loc_C218
0000E4A0 5500                       		subq.b	#2,d0
0000E4A2 6600                       		bne.s	loc_C1AA
0000E4A4 6100 AD66                  		bsr.w	ExitPlatform
0000E4A8 0829 0003 0022             		btst	#3,obStatus(a1)
0000E4AE 6600                       		bne.s	loc_C1A4
0000E4B0 4228 0025                  		clr.b	ob2ndRout(a0)
0000E4B4 4E75                       		rts	
0000E4B6                            ; ===========================================================================
0000E4B6                            
0000E4B6                            loc_C1A4:
0000E4B6 3404                       		move.w	d4,d2
0000E4B8 6000 B2B0                  		bra.w	MvSonicOnPtfm
0000E4BC                            ; ===========================================================================
0000E4BC                            
0000E4BC                            loc_C1AA:
0000E4BC 5500                       		subq.b	#2,d0
0000E4BE 6600                       		bne.s	loc_C1F2
0000E4C0 6100 0000                  		bsr.w	SpeedToPos
0000E4C4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E4CA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E4D0 4A41                       		tst.w	d1
0000E4D2 6A00 0000                  		bpl.w	locret_C1F0
0000E4D6 D368 000C                  		add.w	d1,obY(a0)
0000E4DA 4268 0012                  		clr.w	obVelY(a0)
0000E4DE 4228 0025                  		clr.b	ob2ndRout(a0)
0000E4E2 3011                       		move.w	(a1),d0
0000E4E4 0240 03FF                  		andi.w	#$3FF,d0
0000E4E8 0C40 016A                  		cmpi.w	#$16A,d0
0000E4EC 6500                       		bcs.s	locret_C1F0
0000E4EE 3028 0030                  		move.w	$30(a0),d0
0000E4F2 E640                       		asr.w	#3,d0
0000E4F4 3140 0010                  		move.w	d0,obVelX(a0)
0000E4F8 117C 0001 0032             		move.b	#1,$32(a0)
0000E4FE 4268 000E                  		clr.w	obY+2(a0)
0000E502                            
0000E502                            locret_C1F0:
0000E502 4E75                       		rts	
0000E504                            ; ===========================================================================
0000E504                            
0000E504                            loc_C1F2:
0000E504 6100 0000                  		bsr.w	SpeedToPos
0000E508 3028 0008                  		move.w	obX(a0),d0
0000E50C 0240 000C                  		andi.w	#$C,d0
0000E510 6600 0000                  		bne.w	locret_C2E4
0000E514 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E51A 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E520 4268 0010                  		clr.w	obVelX(a0)
0000E524 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E528 4E75                       		rts	
0000E52A                            ; ===========================================================================
0000E52A                            
0000E52A                            loc_C218:
0000E52A 6100 0000                  		bsr.w	Solid_ChkEnter
0000E52E 4A44                       		tst.w	d4
0000E530 6700 0000                  		beq.w	locret_C2E4
0000E534 6B00 0000                  		bmi.w	locret_C2E4
0000E538 4A28 0032                  		tst.b	$32(a0)
0000E53C 6700                       		beq.s	loc_C230
0000E53E 6000 0000                  		bra.w	locret_C2E4
0000E542                            ; ===========================================================================
0000E542                            
0000E542                            loc_C230:
0000E542 4A40                       		tst.w	d0
0000E544 6700 0000                  		beq.w	locret_C2E4
0000E548 6B00                       		bmi.s	loc_C268
0000E54A 0829 0000 0022             		btst	#0,obStatus(a1)
0000E550 6600 0000                  		bne.w	locret_C2E4
0000E554 3F00                       		move.w	d0,-(sp)
0000E556 7600                       		moveq	#0,d3
0000E558 1628 0014                  		move.b	obActWid(a0),d3
0000E55C 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E562 301F                       		move.w	(sp)+,d0
0000E564 4A41                       		tst.w	d1
0000E566 6B00 0000                  		bmi.w	locret_C2E4
0000E56A 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E572 7001                       		moveq	#1,d0
0000E574 323C 0040                  		move.w	#$40,d1
0000E578 6000                       		bra.s	loc_C294
0000E57A                            ; ===========================================================================
0000E57A                            
0000E57A                            loc_C268:
0000E57A 0829 0000 0022             		btst	#0,obStatus(a1)
0000E580 6700                       		beq.s	locret_C2E4
0000E582 3F00                       		move.w	d0,-(sp)
0000E584 7600                       		moveq	#0,d3
0000E586 1628 0014                  		move.b	obActWid(a0),d3
0000E58A 4643                       		not.w	d3
0000E58C 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E592 301F                       		move.w	(sp)+,d0
0000E594 4A41                       		tst.w	d1
0000E596 6B00                       		bmi.s	locret_C2E4
0000E598 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E5A0 70FF                       		moveq	#-1,d0
0000E5A2 323C FFC0                  		move.w	#-$40,d1
0000E5A6                            
0000E5A6                            loc_C294:
0000E5A6 43F8 D000                  		lea	(v_player).w,a1
0000E5AA D169 0008                  		add.w	d0,obX(a1)
0000E5AE 3341 0020                  		move.w	d1,obInertia(a1)
0000E5B2 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E5B8 3F00                       		move.w	d0,-(sp)
0000E5C4 301F                       		move.w	(sp)+,d0
0000E5C6 4A28 0028                  		tst.b	obSubtype(a0)
0000E5CA 6B00                       		bmi.s	locret_C2E4
0000E5CC 3F00                       		move.w	d0,-(sp)
0000E5CE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E5D4 301F                       		move.w	(sp)+,d0
0000E5D6 0C41 0004                  		cmpi.w	#4,d1
0000E5DA 6F00                       		ble.s	loc_C2E0
0000E5DC 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E5E2 4A40                       		tst.w	d0
0000E5E4 6A00                       		bpl.s	loc_C2D8
0000E5E6 4468 0010                  		neg.w	obVelX(a0)
0000E5EA                            
0000E5EA                            loc_C2D8:
0000E5EA 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E5F0 6000                       		bra.s	locret_C2E4
0000E5F2                            ; ===========================================================================
0000E5F2                            
0000E5F2                            loc_C2E0:
0000E5F2 D368 000C                  		add.w	d1,obY(a0)
0000E5F6                            
0000E5F6                            locret_C2E4:
0000E5F6 4E75                       		rts	
0000E5F6 4E75                       		rts	
0000E5F8                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E5F8                            ; ---------------------------------------------------------------------------
0000E5F8                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E5F8                            ; ---------------------------------------------------------------------------
0000E5F8                            Map_Push_internal:
0000E5F8 0000                       		dc.w @single-Map_Push_internal
0000E5FA 0000                       		dc.w @four-Map_Push_internal
0000E5FC 01                         @single:	dc.b 1
0000E5FD F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E602 04                         @four:		dc.b 4
0000E603 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E608 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E60D F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E612 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E618 00                         		even
0000E618 00                         		even
0000E618                            
0000E618                            		include	"_incObj\34 Title Cards.asm"
0000E618                            ; ---------------------------------------------------------------------------
0000E618                            ; Object 34 - zone title cards
0000E618                            ; ---------------------------------------------------------------------------
0000E618                            
0000E618                            TitleCard:
0000E618 7000                       		moveq	#0,d0
0000E61A 1028 0024                  		move.b	obRoutine(a0),d0
0000E61E 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E622 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E626                            ; ===========================================================================
0000E626 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E628 0000                       		dc.w Card_ChkPos-Card_Index
0000E62A 0000                       		dc.w Card_Wait-Card_Index
0000E62C 0000                       		dc.w Card_Wait-Card_Index
0000E62E                            
0000E62E =00000030                  card_mainX:	equ $30		; position for card to display on
0000E62E =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E62E                            ; ===========================================================================
0000E62E                            
0000E62E                            Card_CheckSBZ3:	; Routine 0
0000E62E 2248                       		movea.l	a0,a1
0000E630 7000                       		moveq	#0,d0
0000E632 1038 FE10                  		move.b	(v_zone).w,d0
0000E636 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E63C 6600                       		bne.s	Card_CheckFZ
0000E63E 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E640                            
0000E640                            	Card_CheckFZ:
0000E640 3400                       		move.w	d0,d2
0000E642 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E648 6600                       		bne.s	Card_LoadConfig
0000E64A 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E64C 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E64E                            
0000E64E                            	Card_LoadConfig:
0000E64E 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E654 E948                       		lsl.w	#4,d0
0000E656 D6C0                       		adda.w	d0,a3
0000E658 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E65E 7203                       		moveq	#3,d1
0000E660                            
0000E660                            Card_Loop:
0000E660 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E664 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E668 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E66C 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E670 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E674 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E678 101A                       		move.b	(a2)+,d0
0000E67A 6600                       		bne.s	Card_ActNumber
0000E67C 1002                       		move.b	d2,d0
0000E67E                            
0000E67E                            	Card_ActNumber:
0000E67E 0C00 0007                  		cmpi.b	#7,d0
0000E682 6600                       		bne.s	Card_MakeSprite
0000E684 D038 FE11                  		add.b	(v_act).w,d0
0000E688 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E68E 6600                       		bne.s	Card_MakeSprite
0000E690 5300                       		subq.b	#1,d0
0000E692                            
0000E692                            	Card_MakeSprite:
0000E692 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E696 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E69E 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E6A4 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E6AA 137C 0000 0001             		move.b	#0,obRender(a1)
0000E6B0 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E6B6 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E6BC 43E9 0040                  		lea	$40(a1),a1	; next object
0000E6C0 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E6C4                            
0000E6C4                            Card_ChkPos:	; Routine 2
0000E6C4 7210                       		moveq	#$10,d1		; set horizontal speed
0000E6C6 3028 0030                  		move.w	card_mainX(a0),d0
0000E6CA B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E6CE 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E6D0 6C00                       		bge.s	Card_Move
0000E6D2 4441                       		neg.w	d1
0000E6D4                            
0000E6D4                            Card_Move:
0000E6D4 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E6D8                            
0000E6D8                            Card_NoMove:
0000E6D8 3028 0008                  		move.w	obX(a0),d0
0000E6DC 6B00                       		bmi.s	locret_C3D8
0000E6DE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E6E2 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E6E4 6000 0000                  		bra.w	DisplaySprite
0000E6E8                            ; ===========================================================================
0000E6E8                            
0000E6E8                            locret_C3D8:
0000E6E8 4E75                       		rts	
0000E6EA                            ; ===========================================================================
0000E6EA                            
0000E6EA                            Card_Wait:	; Routine 4/6
0000E6EA 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E6EE 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E6F0 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E6F4 6000 0000                  		bra.w	DisplaySprite
0000E6F8                            ; ===========================================================================
0000E6F8                            
0000E6F8                            Card_ChkPos2:
0000E6F8 4A28 0001                  		tst.b	obRender(a0)
0000E6FC 6A00                       		bpl.s	Card_ChangeArt
0000E6FE 7220                       		moveq	#$20,d1
0000E700 3028 0032                  		move.w	card_finalX(a0),d0
0000E704 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E708 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E70A 6C00                       		bge.s	Card_Move2
0000E70C 4441                       		neg.w	d1
0000E70E                            
0000E70E                            Card_Move2:
0000E70E D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E712 3028 0008                  		move.w	obX(a0),d0
0000E716 6B00                       		bmi.s	locret_C412
0000E718 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E71C 6400                       		bcc.s	locret_C412	; if yes, branch
0000E71E 6000 0000                  		bra.w	DisplaySprite
0000E722                            ; ===========================================================================
0000E722                            
0000E722                            locret_C412:
0000E722 4E75                       		rts	
0000E724                            ; ===========================================================================
0000E724                            
0000E724                            Card_ChangeArt:
0000E724 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E72A 6600                       		bne.s	Card_Delete
0000E72C 7000                       		moveq	#plcid_Explode,d0
0000E72E 4EB9 0000 16EE             		jsr	(AddPLC).l	; load explosion patterns
0000E734 7000                       		moveq	#0,d0
0000E736 1038 FE10                  		move.b	(v_zone).w,d0
0000E73A 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E73E 4EB9 0000 16EE             		jsr	(AddPLC).l	; load animal patterns
0000E744                            
0000E744                            Card_Delete:
0000E744 6000 0000                  		bra.w	DeleteObject
0000E748                            ; ===========================================================================
0000E748 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E74A 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E74C 00E4                       		dc.w $E4
0000E74E 0206                       		dc.b 2,	6
0000E750 00EA                       		dc.w $EA
0000E752 0207                       		dc.b 2,	7
0000E754 00E0                       		dc.w $E0
0000E756 020A                       		dc.b 2,	$A
0000E758                            ; ---------------------------------------------------------------------------
0000E758                            ; Title	card configuration data
0000E758                            ; Format:
0000E758                            ; 4 bytes per item (YYYY XXXX)
0000E758                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E758                            ; ---------------------------------------------------------------------------
0000E758 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E768 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E778 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E788 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E798 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E7A8 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E7B8 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E7C8                            ; ===========================================================================
0000E7C8                            ; ===========================================================================
0000E7C8                            		include	"_incObj\39 Game Over.asm"
0000E7C8                            ; ---------------------------------------------------------------------------
0000E7C8                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E7C8                            ; ---------------------------------------------------------------------------
0000E7C8                            
0000E7C8                            GameOverCard:
0000E7C8 7000                       		moveq	#0,d0
0000E7CA 1028 0024                  		move.b	obRoutine(a0),d0
0000E7CE 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E7D2 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E7D6                            ; ===========================================================================
0000E7D6 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E7D8 0000                       		dc.w Over_Move-Over_Index
0000E7DA 0000                       		dc.w Over_Wait-Over_Index
0000E7DC                            ; ===========================================================================
0000E7DC                            
0000E7DC                            Over_ChkPLC:	; Routine 0
0000E7DC 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E7E0 6700                       		beq.s	Over_Main	; if yes, branch
0000E7E2 4E75                       		rts	
0000E7E4                            ; ===========================================================================
0000E7E4                            
0000E7E4                            Over_Main:
0000E7E4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E7E8 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E7EE 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E7F4 6700                       		beq.s	Over_1stWord	; if not, branch
0000E7F6 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E7FC                            
0000E7FC                            	Over_1stWord:
0000E7FC 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E802 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E80A 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E810 117C 0000 0001             		move.b	#0,obRender(a0)
0000E816 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E81C                            
0000E81C                            Over_Move:	; Routine 2
0000E81C 7210                       		moveq	#$10,d1		; set horizontal speed
0000E81E 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E824 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E826 6500                       		bcs.s	Over_UpdatePos
0000E828 4441                       		neg.w	d1
0000E82A                            
0000E82A                            	Over_UpdatePos:
0000E82A D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E82E 6000 0000                  		bra.w	DisplaySprite
0000E832                            ; ===========================================================================
0000E832                            
0000E832                            Over_SetWait:
0000E832 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E838 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E83C 4E75                       		rts	
0000E83E                            ; ===========================================================================
0000E83E                            
0000E83E                            Over_Wait:	; Routine 4
0000E83E 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E842 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E846 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E848 0828 0000 001A             		btst	#0,obFrame(a0)
0000E84E 6600                       		bne.s	Over_Display
0000E850 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E854 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E856 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E85A 6000 0000                  		bra.w	DisplaySprite
0000E85E                            ; ===========================================================================
0000E85E                            
0000E85E                            Over_ChgMode:
0000E85E 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E862 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E864 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E86A 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E86E 6600                       		bne.s	Over_Display	; if yes, branch
0000E870 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E876 6000                       		bra.s	Over_Display
0000E878                            ; ===========================================================================
0000E878                            
0000E878                            Over_ResetLvl:
0000E878 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E87C 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E882                            
0000E882                            Over_Display:
0000E882 6000 0000                  		bra.w	DisplaySprite
0000E882 6000 0000                  		bra.w	DisplaySprite
0000E886                            		include	"_incObj\3A Got Through Card.asm"
0000E886                            ; ---------------------------------------------------------------------------
0000E886                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E886                            ; ---------------------------------------------------------------------------
0000E886                            
0000E886                            GotThroughCard:
0000E886 7000                       		moveq	#0,d0
0000E888 1028 0024                  		move.b	obRoutine(a0),d0
0000E88C 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E890 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E894                            ; ===========================================================================
0000E894 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E896 0000                       		dc.w Got_Move-Got_Index
0000E898 0000                       		dc.w Got_Wait-Got_Index
0000E89A 0000                       		dc.w Got_TimeBonus-Got_Index
0000E89C 0000                       		dc.w Got_Wait-Got_Index
0000E89E 0000                       		dc.w Got_NextLevel-Got_Index
0000E8A0 0000                       		dc.w Got_Wait-Got_Index
0000E8A2 0000                       		dc.w Got_Move2-Got_Index
0000E8A4 0000                       		dc.w loc_C766-Got_Index
0000E8A6                            
0000E8A6 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E8A6 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E8A6                            ; ===========================================================================
0000E8A6                            
0000E8A6                            Got_ChkPLC:	; Routine 0
0000E8A6 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E8AA 6700                       		beq.s	Got_Main	; if yes, branch
0000E8AC 4E75                       		rts	
0000E8AE                            ; ===========================================================================
0000E8AE                            
0000E8AE                            Got_Main:
0000E8AE 2248                       		movea.l	a0,a1
0000E8B0 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E8B6 7206                       		moveq	#6,d1
0000E8B8                            
0000E8B8                            Got_Loop:
0000E8B8 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E8BC 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E8C0 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E8C4 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E8C8 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E8CC 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E8D0 101A                       		move.b	(a2)+,d0
0000E8D2 0C00 0006                  		cmpi.b	#6,d0
0000E8D6 6600                       		bne.s	loc_C5CA
0000E8D8 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E8DC                            
0000E8DC                            	loc_C5CA:
0000E8DC 1340 001A                  		move.b	d0,obFrame(a1)
0000E8E0 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E8E8 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E8EE 137C 0000 0001             		move.b	#0,obRender(a1)
0000E8F4 43E9 0040                  		lea	$40(a1),a1
0000E8F8 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E8FC                            
0000E8FC                            Got_Move:	; Routine 2
0000E8FC 7210                       		moveq	#$10,d1		; set horizontal speed
0000E8FE 3028 0030                  		move.w	got_mainX(a0),d0
0000E902 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E906 6700                       		beq.s	loc_C61A	; if yes, branch
0000E908 6C00                       		bge.s	Got_ChgPos
0000E90A 4441                       		neg.w	d1
0000E90C                            
0000E90C                            	Got_ChgPos:
0000E90C D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E910                            
0000E910                            	loc_C5FE:
0000E910 3028 0008                  		move.w	obX(a0),d0
0000E914 6B00                       		bmi.s	locret_C60E
0000E916 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E91A 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E91C 6000 0000                  		bra.w	DisplaySprite
0000E920                            ; ===========================================================================
0000E920                            
0000E920                            locret_C60E:
0000E920 4E75                       		rts	
0000E922                            ; ===========================================================================
0000E922                            
0000E922                            loc_C610:
0000E922 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E928 6000 0000                  		bra.w	Got_Move2
0000E92C                            ; ===========================================================================
0000E92C                            
0000E92C                            loc_C61A:
0000E92C 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E932 67EE                       		beq.s	loc_C610
0000E934 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E93A 66D4                       		bne.s	loc_C5FE
0000E93C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E940 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E946                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E946                            
0000E946                            Got_Wait:	; Routine 4, 8, $C
0000E946 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E94A 6600                       		bne.s	Got_Display
0000E94C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E950                            
0000E950                            Got_Display:
0000E950 6000 0000                  		bra.w	DisplaySprite
0000E954                            ; ===========================================================================
0000E954                            
0000E954                            Got_TimeBonus:	; Routine 6
0000E954 6100 0000                  		bsr.w	DisplaySprite
0000E958 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E95E 7000                       		moveq	#0,d0
0000E960 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E964 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E966 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E96A 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E970                            
0000E970                            Got_RingBonus:
0000E970 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E974 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E976 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E97A 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E980                            
0000E980                            Got_ChkBonus:
0000E980 4A40                       		tst.w	d0		; is there any bonus?
0000E982 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E98E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E992 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w
0000E998 6600                       		bne.s	Got_SetDelay
0000E99A 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E99E                            
0000E99E                            Got_SetDelay:
0000E99E 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E9A4                            
0000E9A4                            locret_C692:
0000E9A4 4E75                       		rts	
0000E9A6                            ; ===========================================================================
0000E9A6                            
0000E9A6                            Got_AddBonus:
0000E9A6 4EB9 0000 0000             		jsr	(AddPoints).l
0000E9AC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E9B0 0200 0003                  		andi.b	#3,d0
0000E9B4 66EE                       		bne.s	locret_C692
0000E9C0                            ; ===========================================================================
0000E9C0                            
0000E9C0                            Got_NextLevel:	; Routine $A
0000E9C0 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E9C6 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E9CC 1038 FE10                  		move.b	(v_zone).w,d0
0000E9D0 0240 0007                  		andi.w	#7,d0
0000E9D4 E748                       		lsl.w	#3,d0
0000E9D6 1238 FE11                  		move.b	(v_act).w,d1
0000E9DA 0241 0003                  		andi.w	#3,d1
0000E9DE D241                       		add.w	d1,d1
0000E9E0 D041                       		add.w	d1,d0
0000E9E2 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E9E6 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E9EA 4A40                       		tst.w	d0
0000E9EC 6600                       		bne.s	Got_ChkSS
0000E9EE 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E9F4 6000                       		bra.s	Got_Display2
0000E9F6                            ; ===========================================================================
0000E9F6                            
0000E9F6                            Got_ChkSS:	
0000E9F6 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E9FA 4A38 F5C3                  		tst.b	(f_emeraldm).w
0000E9FE 6700                       		beq.s	VBla_08A
0000EA00 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000EA0E 6000                       		bra.s	Got_Display2
0000EA10 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000EA16                            		
0000EA16                            ; ===========================================================================
0000EA16                            
0000EA16                            VBla_08A:
0000EA16 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EA1C                            
0000EA1C                            Got_Display2:
0000EA1C 6000 0000                  		bra.w	DisplaySprite
0000EA20                            ; ===========================================================================
0000EA20                            ; ---------------------------------------------------------------------------
0000EA20                            ; Level	order array
0000EA20                            ; ---------------------------------------------------------------------------
0000EA20                            LevelOrder:
0000EA20                            		; Green Hill Zone
0000EA20 0001                       		dc.b id_GHZ, 1	; Act 2
0000EA22 0002                       		dc.b id_GHZ, 2	; Act 2
0000EA24 0200                       		dc.b id_MZ, 0	; Act 3
0000EA26 0000                       		dc.b 0, 0
0000EA28                            
0000EA28                            		; Labyrinth Zone
0000EA28 0101                       		dc.b id_LZ, 1	; Act 1
0000EA2A 0102                       		dc.b id_LZ, 2	; Act 2
0000EA2C 0000                       		dc.b id_GHZ, 0 	; Act 3
0000EA2E 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000EA30                            
0000EA30                            		; Marble Zone
0000EA30 0201                       		dc.b id_MZ, 1	; Act 1
0000EA32 0202                       		dc.b id_MZ, 2	; Act 2
0000EA34 0502                       		dc.b id_SBZ, 2	; Act 3
0000EA36 0000                       		dc.b 0, 0
0000EA38                            
0000EA38                            		; Star Light Zone
0000EA38 0301                       		dc.b id_SLZ, 1	; Act 1
0000EA3A 0302                       		dc.b id_SLZ, 2	; Act 2
0000EA3C 0500                       		dc.b id_SBZ, 0	; Act 3
0000EA3E 0000                       		dc.b 0, 0
0000EA40                            
0000EA40                            		; Spring Yard Zone
0000EA40 0502                       		dc.b id_SBZ, 2	; Act 1
0000EA42 0402                       		dc.b id_SYZ, 2	; Act 2
0000EA44 0200                       		dc.b id_MZ,	 0	; Act 3
0000EA46 0000                       		dc.b 0, 0
0000EA48                            
0000EA48                            		; Scrap Brain Zone
0000EA48 0501                       		dc.b id_SBZ, 1	; Act 1
0000EA4A 0103                       		dc.b id_LZ, 3	; Act 2
0000EA4C 0000                       		dc.b 0, 0	; Final Zone
0000EA4E 0000                       		dc.b 0, 0
0000EA50                            		even
0000EA50                            ; ===========================================================================
0000EA50                            
0000EA50                            Got_Move2:	; Routine $E
0000EA50 7220                       		moveq	#$20,d1		; set horizontal speed
0000EA52 3028 0032                  		move.w	got_finalX(a0),d0
0000EA56 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000EA5A 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000EA5C 6C00                       		bge.s	Got_ChgPos2
0000EA5E 4441                       		neg.w	d1
0000EA60                            
0000EA60                            	Got_ChgPos2:
0000EA60 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EA64 3028 0008                  		move.w	obX(a0),d0
0000EA68 6B00                       		bmi.s	locret_C748
0000EA6A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EA6E 6400                       		bcc.s	locret_C748	; if yes, branch
0000EA70 6000 0000                  		bra.w	DisplaySprite
0000EA74                            ; ===========================================================================
0000EA74                            
0000EA74                            locret_C748:
0000EA74 4E75                       		rts	
0000EA76                            ; ===========================================================================
0000EA76                            
0000EA76                            Got_SBZ2:
0000EA76 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000EA7C 6600 0000                  		bne.w	DeleteObject
0000EA80 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA84 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000EA88 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000EA98                            ; ===========================================================================
0000EA98                            
0000EA98                            loc_C766:	; Routine $10
0000EA98 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000EA9C 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000EAA2 6700 0000                  		beq.w	DeleteObject
0000EAA6 4E75                       		rts	
0000EAA8                            ; ===========================================================================
0000EAA8                            		;    x-start,	x-main,	y-main,
0000EAA8                            		;				routine, frame number
0000EAA8                            
0000EAA8 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000EAAE 0200                       		dc.b 				2,	0
0000EAB0                            
0000EAB0 FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000EAB6 0201                       		dc.b 				2,	1
0000EAB8                            
0000EAB8 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000EABE 0206                       		dc.b 				2,	6
0000EAC0                            
0000EAC0 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000EAC6 0202                       		dc.b 				2,	2
0000EAC8                            
0000EAC8 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000EACE 0203                       		dc.b 				2,	3
0000EAD0                            
0000EAD0 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000EAD6 0204                       		dc.b 				2,	4
0000EAD8                            
0000EAD8 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000EADE 0205                       		dc.b 				2,	5
0000EADE 0205                       		dc.b 				2,	5
0000EAE0                            		include	"_incObj\7E Special Stage Results.asm"
0000EAE0                            ; ---------------------------------------------------------------------------
0000EAE0                            ; Object 7E - special stage results screen
0000EAE0                            ; ---------------------------------------------------------------------------
0000EAE0                            
0000EAE0                            SSResult:
0000EAE0 7000                       		moveq	#0,d0
0000EAE2 1028 0024                  		move.b	obRoutine(a0),d0
0000EAE6 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000EAEA 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000EAEE                            ; ===========================================================================
0000EAEE 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000EAF0 0000                       		dc.w SSR_Move-SSR_Index
0000EAF2 0000                       		dc.w SSR_Wait-SSR_Index
0000EAF4 0000                       		dc.w SSR_RingBonus-SSR_Index
0000EAF6 0000                       		dc.w SSR_Wait-SSR_Index
0000EAF8 0000                       		dc.w SSR_Exit-SSR_Index
0000EAFA 0000                       		dc.w SSR_Wait-SSR_Index
0000EAFC 0000                       		dc.w SSR_Continue-SSR_Index
0000EAFE 0000                       		dc.w SSR_Wait-SSR_Index
0000EB00 0000                       		dc.w SSR_Exit-SSR_Index
0000EB02 0000                       		dc.w loc_C91A-SSR_Index
0000EB04                            
0000EB04 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000EB04                            ; ===========================================================================
0000EB04                            
0000EB04                            SSR_ChkPLC:	; Routine 0
0000EB04 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000EB08 6700                       		beq.s	SSR_Main	; if yes, branch
0000EB0A 4E75                       		rts	
0000EB0C                            ; ===========================================================================
0000EB0C                            
0000EB0C                            SSR_Main:
0000EB0C 2248                       		movea.l	a0,a1
0000EB0E 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000EB14 7203                       		moveq	#3,d1
0000EB16 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000EB1C 6500                       		bcs.s	SSR_Loop	; if no, branch
0000EB1E 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000EB20                            
0000EB20                            	SSR_Loop:
0000EB20 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000EB24 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000EB28 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000EB2C 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000EB30 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000EB34 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000EB38 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000EB40 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000EB46 137C 0000 0001             		move.b	#0,obRender(a1)
0000EB4C 43E9 0040                  		lea	$40(a1),a1
0000EB50 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000EB54                            
0000EB54 7007                       		moveq	#7,d0
0000EB56 1238 FE57                  		move.b	(v_emeralds).w,d1
0000EB5A 6700                       		beq.s	loc_C842
0000EB5C 7000                       		moveq	#0,d0
0000EB5E 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000EB62 6600                       		bne.s	loc_C842	; if not, branch
0000EB64 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000EB66 317C 0018 0008             		move.w	#$18,obX(a0)
0000EB6C 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000EB72                            
0000EB72                            loc_C842:
0000EB72 1140 001A                  		move.b	d0,obFrame(a0)
0000EB76                            
0000EB76                            SSR_Move:	; Routine 2
0000EB76 7210                       		moveq	#$10,d1		; set horizontal speed
0000EB78 3028 0030                  		move.w	ssr_mainX(a0),d0
0000EB7C B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000EB80 6700                       		beq.s	loc_C86C	; if yes, branch
0000EB82 6C00                       		bge.s	SSR_ChgPos
0000EB84 4441                       		neg.w	d1
0000EB86                            
0000EB86                            SSR_ChgPos:
0000EB86 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EB8A                            
0000EB8A                            loc_C85A:
0000EB8A 3028 0008                  		move.w	obX(a0),d0
0000EB8E 6B00                       		bmi.s	locret_C86A
0000EB90 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EB94 6400                       		bcc.s	locret_C86A	; if yes, branch
0000EB96 6000 0000                  		bra.w	DisplaySprite
0000EB9A                            ; ===========================================================================
0000EB9A                            
0000EB9A                            locret_C86A:
0000EB9A 4E75                       		rts	
0000EB9C                            ; ===========================================================================
0000EB9C                            
0000EB9C                            loc_C86C:
0000EB9C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000EBA2 66E6                       		bne.s	loc_C85A
0000EBA4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EBA8 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EBAE 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000EBB4                            
0000EBB4                            SSR_Wait:	; Routine 4, 8, $C, $10
0000EBB4 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000EBB8 6600                       		bne.s	SSR_Display
0000EBBA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EBBE                            
0000EBBE                            SSR_Display:
0000EBBE 6000 0000                  		bra.w	DisplaySprite
0000EBC2                            ; ===========================================================================
0000EBC2                            
0000EBC2                            SSR_RingBonus:	; Routine 6
0000EBC2 6100 0000                  		bsr.w	DisplaySprite
0000EBC6 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000EBCC 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000EBD0 6700                       		beq.s	loc_C8C4	; if yes, branch
0000EBD2 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000EBD8 700A                       		moveq	#10,d0		; add 10 to score
0000EBDA 4EB9 0000 0000             		jsr	(AddPoints).l
0000EBE0 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EBE4 0200 0003                  		andi.b	#3,d0
0000EBE8 6600                       		bne.s	locret_C8EA
0000EBF4                            ; ===========================================================================
0000EBF4                            
0000EBF4                            loc_C8C4:
0000EBFE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EC02 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EC08 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000EC0E 6500                       		bcs.s	locret_C8EA	; if not, branch
0000EC10 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000EC16 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000EC1A                            
0000EC1A                            locret_C8EA:
0000EC1A 4E75                       		rts	
0000EC1C                            ; ===========================================================================
0000EC1C                            
0000EC1C                            SSR_Exit:	; Routine $A, $12
0000EC1C 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EC22 6000 0000                  		bra.w	DisplaySprite
0000EC26                            ; ===========================================================================
0000EC26                            
0000EC26                            SSR_Continue:	; Routine $E
0000EC26 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000EC2C 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000EC3C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EC40 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000EC46 6000 0000                  		bra.w	DisplaySprite
0000EC4A                            ; ===========================================================================
0000EC4A                            
0000EC4A                            loc_C91A:	; Routine $14
0000EC4A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EC4E 0200 000F                  		andi.b	#$F,d0
0000EC52 6600                       		bne.s	SSR_Display2
0000EC54 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EC5A                            
0000EC5A                            SSR_Display2:
0000EC5A 6000 0000                  		bra.w	DisplaySprite
0000EC5E                            ; ===========================================================================
0000EC5E 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EC64 0200                       		dc.b 2,	0		; rountine number, frame number
0000EC66 0320 0120 0118             		dc.w $320, $120, $118
0000EC6C 0201                       		dc.b 2,	1
0000EC6E 0360 0120 0128             		dc.w $360, $120, $128
0000EC74 0202                       		dc.b 2,	2
0000EC76 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EC7C 0203                       		dc.b 2,	3
0000EC7E 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EC84 0206                       		dc.b 2,	6
0000EC84 0206                       		dc.b 2,	6
0000EC86                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EC86                            ; ---------------------------------------------------------------------------
0000EC86                            ; Object 7F - chaos emeralds from the special stage results screen
0000EC86                            ; ---------------------------------------------------------------------------
0000EC86                            
0000EC86                            SSRChaos:
0000EC86 7000                       		moveq	#0,d0
0000EC88 1028 0024                  		move.b	obRoutine(a0),d0
0000EC8C 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EC90 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EC94                            ; ===========================================================================
0000EC94 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EC96 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EC98                            
0000EC98                            ; ---------------------------------------------------------------------------
0000EC98                            ; X-axis positions for chaos emeralds
0000EC98                            ; ---------------------------------------------------------------------------
0000EC98 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000ECA4                            ; ===========================================================================
0000ECA4                            
0000ECA4                            SSRC_Main:	; Routine 0
0000ECA4 2248                       		movea.l	a0,a1
0000ECA6 45F9 0000 EC98             		lea	(SSRC_PosData).l,a2
0000ECAC 7400                       		moveq	#0,d2
0000ECAE 7200                       		moveq	#0,d1
0000ECB0 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000ECB4 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000ECB6 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000ECBA                            
0000ECBA                            	SSRC_Loop:
0000ECBA 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000ECBE 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000ECC2 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000ECC8 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000ECCC 1633 2000                  		move.b	(a3,d2.w),d3
0000ECD0 1343 001A                  		move.b	d3,obFrame(a1)
0000ECD4 1343 001C                  		move.b	d3,obAnim(a1)
0000ECD8 5202                       		addq.b	#1,d2
0000ECDA 5429 0024                  		addq.b	#2,obRoutine(a1)
0000ECDE 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000ECE6 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000ECEC 137C 0000 0001             		move.b	#0,obRender(a1)
0000ECF2 43E9 0040                  		lea	$40(a1),a1	; next object
0000ECF6 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000ECFA                            
0000ECFA                            SSRC_Flash:	; Routine 2
0000ECFA 1028 001A                  		move.b	obFrame(a0),d0
0000ECFE 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000ED04 0C00 0006                  		cmpi.b	#6,d0
0000ED08 6600                       		bne.s	SSRC_Display
0000ED0A 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000ED10                            
0000ED10                            	SSRC_Display:
0000ED10 6000 0000                  		bra.w	DisplaySprite
0000ED10 6000 0000                  		bra.w	DisplaySprite
0000ED14                            
0000ED14                            ; ---------------------------------------------------------------------------
0000ED14                            ; Sprite mappings - zone title cards
0000ED14                            ; ---------------------------------------------------------------------------
0000ED14 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000ED16 0000                       		dc.w M_Card_LZ-Map_Card
0000ED18 0000                       		dc.w M_Card_MZ-Map_Card
0000ED1A 0000                       		dc.w M_Card_SLZ-Map_Card
0000ED1C 0000                       		dc.w M_Card_SYZ-Map_Card
0000ED1E 0000                       		dc.w M_Card_SBZ-Map_Card
0000ED20 0000                       		dc.w M_Card_Zone-Map_Card
0000ED22 0000                       		dc.w M_Card_Act1-Map_Card
0000ED24 0000                       		dc.w M_Card_Act2-Map_Card
0000ED26 0000                       		dc.w M_Card_Act3-Map_Card
0000ED28 0000                       		dc.w M_Card_Oval-Map_Card
0000ED2A 0000                       		dc.w M_Card_FZ-Map_Card
0000ED2C 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000ED2D F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000ED32 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000ED37 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000ED3C F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000ED41 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000ED46 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000ED4B F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000ED50 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000ED55 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000ED5A                            		even
0000ED5A 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000ED5B F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000ED60 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000ED65 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000ED6A F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000ED6F F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000ED74 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000ED79 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000ED7E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000ED83 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000ED88                            		even
0000ED88 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000ED89 F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000ED8E F805 0008 90               		dc.b $F8, 5, 0, 8, $90		; C
0000ED93 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000ED98 F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0		; A
0000ED9D F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000EDA2 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000EDA7 F805 003A E0               		dc.b $F8, 5, 0, $3A, $E0	; R
0000EDAC F805 0046 F0               		dc.b $F8, 5, 0, $46, $F0	; U
0000EDB1 F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000EDB6 F805 002E 08               		dc.b $F8, 5, 0, $2E, $8	; N
0000EDBB F805 003E 18               		dc.b $F8, 5, 0, $3E, $18	; S
0000EDC0 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EDC1 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EDC6 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EDCB F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EDD0 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EDD5 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EDDA F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EDDF F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EDE4 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EDE9 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EDEE                            		even
0000EDEE 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000EDEF F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EDF4 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000EDF9 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EDFE F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EE03 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000EE08 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000EE0D F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000EE12 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000EE17 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000EE1C F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000EE22 00                         		even
0000EE22 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EE23 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EE28 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EE2D F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EE32 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EE37 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EE3C F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EE41 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EE46 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EE4B F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EE50 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EE56 00                         		even
0000EE56 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EE57 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EE5C F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EE61 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EE66 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EE6C 00                         		even
0000EE6C 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EE6D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EE72 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EE77 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EE78 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EE7D F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000EE82 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000EE83 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EE88 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000EE8D 0D                         M_Card_Oval:	dc.b $D			; Oval
0000EE8E E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000EE93 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000EE98 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000EE9D F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000EEA2 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000EEA7 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000EEAC 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000EEB1 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000EEB6 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000EEBB F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000EEC0 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000EEC5 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000EECA 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000EED0 00                         		even
0000EED0 05                         M_Card_FZ:	dc.b 5			; FINAL
0000EED1 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EED6 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EEDB F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EEE0 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EEE5 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000EEEA                            		even
0000EEEA                            
0000EEEA                            Map_Over:	include	"_maps\Game Over.asm"
0000EEEA                            ; ---------------------------------------------------------------------------
0000EEEA                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000EEEA                            ; ---------------------------------------------------------------------------
0000EEEA                            Map_Over_internal:
0000EEEA 0000                       		dc.w byte_CBAC-Map_Over_internal
0000EEEC 0000                       		dc.w byte_CBB7-Map_Over_internal
0000EEEE 0000                       		dc.w byte_CBC2-Map_Over_internal
0000EEF0 0000                       		dc.w byte_CBCD-Map_Over_internal
0000EEF2 02                         byte_CBAC:	dc.b 2			; GAME
0000EEF3 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000EEF8 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000EEFD 02                         byte_CBB7:	dc.b 2			; OVER
0000EEFE F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000EF03 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000EF08 02                         byte_CBC2:	dc.b 2			; TIME
0000EF09 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000EF0E F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000EF13 02                         byte_CBCD:	dc.b 2			; OVER
0000EF14 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000EF19 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000EF1E                            		even
0000EF1E                            		even
0000EF1E                            
0000EF1E                            ; ---------------------------------------------------------------------------
0000EF1E                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000EF1E                            ; ---------------------------------------------------------------------------
0000EF1E 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000EF20 0000                       		dc.w M_Got_Passed-Map_Got
0000EF22 0000                       		dc.w M_Got_Score-Map_Got
0000EF24 0000                       		dc.w M_Got_TBonus-Map_Got
0000EF26 0000                       		dc.w M_Got_RBonus-Map_Got
0000EF28 FF6F                       		dc.w M_Card_Oval-Map_Got
0000EF2A FF4E                       		dc.w M_Card_Act1-Map_Got
0000EF2C FF59                       		dc.w M_Card_Act2-Map_Got
0000EF2E FF64                       		dc.w M_Card_Act3-Map_Got
0000EF30 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000EF31 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000EF36 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000EF3B F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000EF40 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000EF45 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000EF4A F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000EF4F F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000EF54 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000EF59 06                         M_Got_Passed:	dc.b 6			; PASSED
0000EF5A F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000EF5F F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EF64 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EF69 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EF6E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EF73 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EF78 06                         M_Got_Score:	dc.b 6			; SCORE
0000EF79 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EF7E F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EF83 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EF88 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EF8D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EF92 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EF97 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EF98 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EF9D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EFA2 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EFA7 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EFAC FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EFB1 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EFB6 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EFBB 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EFBC F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EFC1 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EFC6 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EFCB F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EFD0 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EFD5 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EFDA F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EFE0 00                         		even
0000EFE0                            ; ---------------------------------------------------------------------------
0000EFE0                            ; Sprite mappings - special stage results screen
0000EFE0                            ; ---------------------------------------------------------------------------
0000EFE0 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EFE2 0000                       		dc.w M_SSR_Score-Map_SSR
0000EFE4 0000                       		dc.w byte_CD0D-Map_SSR
0000EFE6 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EFE8 0000                       		dc.w byte_CD31-Map_SSR
0000EFEA 0000                       		dc.w byte_CD46-Map_SSR
0000EFEC 0000                       		dc.w byte_CD5B-Map_SSR
0000EFEE 0000                       		dc.w byte_CD6B-Map_SSR
0000EFF0 0000                       		dc.w byte_CDA8-Map_SSR
0000EFF2 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EFF3 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EFF8 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EFFD F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000F002 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000F007 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000F00C F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000F011 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000F016 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000F01B F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000F020 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000F025 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000F02A F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000F02F F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000F034 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000F035 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000F03A F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000F03F F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000F044 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000F049 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000F04E FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000F053 07                         byte_CD0D:	dc.b 7
0000F054 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000F059 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000F05E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000F063 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000F068 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000F06D F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000F072 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000F077 04                         byte_CD31:	dc.b 4
0000F078 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F07D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F082 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F087 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000F08C 04                         byte_CD46:	dc.b 4
0000F08D F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F092 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F097 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F09C F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000F0A1 03                         byte_CD5B:	dc.b 3
0000F0A2 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F0A7 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F0AC F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F0B1 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000F0B2 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000F0B7 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000F0BC F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000F0C1 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000F0C6 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000F0CB F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000F0D0 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000F0D5 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000F0DA F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000F0DF F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000F0E4 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000F0E9 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000F0EE 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000F0EF F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000F0F4 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000F0F9 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000F0FE F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000F103 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000F108 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000F10D F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000F112 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000F117 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000F11C F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000F121 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000F126 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000F12B F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000F130 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000F135 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000F13A                            		even
0000F13A                            
0000F13A                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000F13A                            ; ---------------------------------------------------------------------------
0000F13A                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000F13A                            ; ---------------------------------------------------------------------------
0000F13A                            Map_SSRC_internal:
0000F13A 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000F13C 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000F13E 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000F140 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000F142 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000F144 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000F146 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000F148 01                         byte_CE02:	dc.b 1
0000F149 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000F14E 01                         byte_CE08:	dc.b 1
0000F14F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F154 01                         byte_CE0E:	dc.b 1
0000F155 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000F15A 01                         byte_CE14:	dc.b 1
0000F15B F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000F160 01                         byte_CE1A:	dc.b 1
0000F161 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000F166 01                         byte_CE20:	dc.b 1
0000F167 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000F16C 00                         byte_CE26:	dc.b 0			; Blank frame
0000F16E 00                         		even
0000F16E 00                         		even
0000F16E                            
0000F16E                            		include	"_incObj\36 Spikes.asm"
0000F16E                            ; ---------------------------------------------------------------------------
0000F16E                            ; Object 36 - spikes
0000F16E                            ; ---------------------------------------------------------------------------
0000F16E                            
0000F16E                            Spikes:
0000F16E 7000                       		moveq	#0,d0
0000F170 1028 0024                  		move.b	obRoutine(a0),d0
0000F174 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000F178 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000F17C                            ; ===========================================================================
0000F17C 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000F17E 0000                       		dc.w Spik_Solid-Spik_Index
0000F180                            
0000F180 =00000030                  spik_origX:	equ $30		; start X position
0000F180 =00000032                  spik_origY:	equ $32		; start Y position
0000F180                            
0000F180 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000F182 0110                       		dc.b 1,	$10
0000F184 0204                       		dc.b 2,	4
0000F186 031C                       		dc.b 3,	$1C
0000F188 0440                       		dc.b 4,	$40
0000F18A 0510                       		dc.b 5,	$10
0000F18C                            ; ===========================================================================
0000F18C                            
0000F18C                            Spik_Main:	; Routine 0
0000F18C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F190 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000F198 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000F19E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000F1A4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F1AA 1028 0028                  		move.b	obSubtype(a0),d0
0000F1AE 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000F1B4 0240 00F0                  		andi.w	#$F0,d0
0000F1B8 43F9 0000 F180             		lea	(Spik_Var).l,a1
0000F1BE E648                       		lsr.w	#3,d0
0000F1C0 D2C0                       		adda.w	d0,a1
0000F1C2 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000F1C6 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000F1CA 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000F1D0 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000F1D6                            
0000F1D6                            Spik_Solid:	; Routine 2
0000F1D6 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000F1DA 343C 0004                  		move.w	#4,d2
0000F1DE 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000F1E4 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000F1E6 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000F1EC 6600                       		bne.s	Spik_Upright	; if not, branch
0000F1EE 343C 0014                  		move.w	#$14,d2
0000F1F2                            
0000F1F2                            ; Spikes types $1x and $5x face	sideways
0000F1F2                            
0000F1F2                            Spik_SideWays:
0000F1F2 323C 001B                  		move.w	#$1B,d1
0000F1F6 3602                       		move.w	d2,d3
0000F1F8 5243                       		addq.w	#1,d3
0000F1FA 3828 0008                  		move.w	obX(a0),d4
0000F1FE 6100 0000                  		bsr.w	SolidObject
0000F202 0828 0003 0022             		btst	#3,obStatus(a0)
0000F208 6600                       		bne.s	Spik_Display
0000F20A 0C44 0001                  		cmpi.w	#1,d4
0000F20E 6700                       		beq.s	Spik_Hurt
0000F210 6000                       		bra.s	Spik_Display
0000F212                            ; ===========================================================================
0000F212                            
0000F212                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F212                            
0000F212                            Spik_Upright:
0000F212 7200                       		moveq	#0,d1
0000F214 1228 0014                  		move.b	obActWid(a0),d1
0000F218 0641 000B                  		addi.w	#$B,d1
0000F21C 343C 0010                  		move.w	#$10,d2
0000F220 363C 0011                  		move.w	#$11,d3
0000F224 3828 0008                  		move.w	obX(a0),d4
0000F228 6100 0000                  		bsr.w	SolidObject
0000F22C 0828 0003 0022             		btst	#3,obStatus(a0)
0000F232 6600                       		bne.s	Spik_Hurt
0000F234 4A44                       		tst.w	d4
0000F236 6A00                       		bpl.s	Spik_Display
0000F238                            
0000F238                            Spik_Hurt:
0000F238 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F23C 6600                       		bne.s	Spik_Display	; if yes, branch
0000F23E 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F242 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F244 2F08                       		move.l	a0,-(sp)
0000F246 2448                       		movea.l	a0,a2
0000F248 41F8 D000                  		lea	(v_player).w,a0
0000F24C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F252 6400                       		bcc.s	loc_CF20
0000F254                            		; This fixes the infamous "spike bug"
0000F254 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F258 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F25A 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F260                            loc_D5A2:
0000F260 9680                       		sub.l	d0,d3
0000F262 2143 000C                  		move.l	d3,obY(a0)
0000F266 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F26C                            
0000F26C                            loc_CF20:
0000F26C 205F                       		movea.l	(sp)+,a0
0000F26E                            
0000F26E                            Spik_Display:
0000F26E 6100 0000                  		bsr.w	DisplaySprite
0000F290 4E75                       		rts	
0000F292                            ; ===========================================================================
0000F292                            
0000F292                            Spik_Type0x:
0000F292 7000                       		moveq	#0,d0
0000F294 1028 0028                  		move.b	obSubtype(a0),d0
0000F298 D040                       		add.w	d0,d0
0000F29A 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F29E 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F2A2                            ; ===========================================================================
0000F2A2 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F2A4 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F2A6 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F2A8                            ; ===========================================================================
0000F2A8                            
0000F2A8                            Spik_Type00:
0000F2A8 4E75                       		rts			; don't move the object
0000F2AA                            ; ===========================================================================
0000F2AA                            
0000F2AA                            Spik_Type01:
0000F2AA 6100 0000                  		bsr.w	Spik_Wait
0000F2AE 7000                       		moveq	#0,d0
0000F2B0 1028 0034                  		move.b	$34(a0),d0
0000F2B4 D068 0032                  		add.w	spik_origY(a0),d0
0000F2B8 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F2BC 4E75                       		rts	
0000F2BE                            ; ===========================================================================
0000F2BE                            
0000F2BE                            Spik_Type02:
0000F2BE 6100 0000                  		bsr.w	Spik_Wait
0000F2C2 7000                       		moveq	#0,d0
0000F2C4 1028 0034                  		move.b	$34(a0),d0
0000F2C8 D068 0030                  		add.w	spik_origX(a0),d0
0000F2CC 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F2D0 4E75                       		rts	
0000F2D2                            ; ===========================================================================
0000F2D2                            
0000F2D2                            Spik_Wait:
0000F2D2 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F2D6 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F2D8 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F2DC 6600                       		bne.s	locret_CFE6
0000F2DE 4A28 0001                  		tst.b	obRender(a0)
0000F2E2 6A00                       		bpl.s	locret_CFE6
0000F2EE 6000                       		bra.s	locret_CFE6
0000F2F0                            ; ===========================================================================
0000F2F0                            
0000F2F0                            loc_CFA4:
0000F2F0 4A68 0036                  		tst.w	$36(a0)
0000F2F4 6700                       		beq.s	loc_CFC6
0000F2F6 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F2FC 6400                       		bcc.s	locret_CFE6
0000F2FE 317C 0000 0034             		move.w	#0,$34(a0)
0000F304 317C 0000 0036             		move.w	#0,$36(a0)
0000F30A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F310 6000                       		bra.s	locret_CFE6
0000F312                            ; ===========================================================================
0000F312                            
0000F312                            loc_CFC6:
0000F312 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F318 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F31E 6500                       		bcs.s	locret_CFE6
0000F320 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F326 317C 0001 0036             		move.w	#1,$36(a0)
0000F32C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F332                            
0000F332                            locret_CFE6:
0000F332 4E75                       		rts	
0000F332 4E75                       		rts	
0000F334                            Map_Spike:	include	"_maps\Spikes.asm"
0000F334                            ; --------------------------------------------------------------------------------
0000F334                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F334                            ; --------------------------------------------------------------------------------
0000F334                            
0000F334                            SME_XgeaQ:	
0000F334 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F338 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F33C 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F340 03                         SME_XgeaQ_C:	dc.b 3	
0000F341 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F346 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F34B F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F350 03                         SME_XgeaQ_1C:	dc.b 3	
0000F351 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F356 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F35B 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F360 01                         SME_XgeaQ_2C:	dc.b 1	
0000F361 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F366 03                         SME_XgeaQ_32:	dc.b 3	
0000F367 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F36C F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F371 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F376 06                         SME_XgeaQ_42:	dc.b 6	
0000F377 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F37C F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F381 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F386 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F38B F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F390 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F395 01                         SME_XgeaQ_61:	dc.b 1	
0000F396 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F39C 00                         		even
0000F39C 00                         		even
0000F39C                            		include	"_incObj\3B Purple Rock.asm"
0000F39C                            ; ---------------------------------------------------------------------------
0000F39C                            ; Object 3B - purple rock (GHZ)
0000F39C                            ; ---------------------------------------------------------------------------
0000F39C                            
0000F39C                            PurpleRock:
0000F39C 7000                       		moveq	#0,d0
0000F39E 1028 0024                  		move.b	obRoutine(a0),d0
0000F3A2 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F3A6 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F3AA                            ; ===========================================================================
0000F3AA 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F3AC 0000                       		dc.w Rock_Solid-Rock_Index
0000F3AE                            ; ===========================================================================
0000F3AE                            
0000F3AE                            Rock_Main:	; Routine 0
0000F3AE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F3B2 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F3BA 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F3C0 117C 0004 0001             		move.b	#4,obRender(a0)
0000F3C6 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F3CC 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F3D2                            
0000F3D2                            Rock_Solid:	; Routine 2
0000F3D2 323C 001B                  		move.w	#$1B,d1
0000F3D6 343C 0010                  		move.w	#$10,d2
0000F3DA 363C 0010                  		move.w	#$10,d3
0000F3DE 3828 0008                  		move.w	obX(a0),d4
0000F3E2 6100 0000                  		bsr.w	SolidObject
0000F3E6 6100 0000                  		bsr.w	DisplaySprite
0000F408 4E75                       		rts	
0000F408 4E75                       		rts	
0000F40A                            		include	"_incObj\49 Waterfall Sound.asm"
0000F40A                            ; ---------------------------------------------------------------------------
0000F40A                            ; Object 49 - waterfall	sound effect (GHZ)
0000F40A                            ; ---------------------------------------------------------------------------
0000F40A                            
0000F40A                            WaterSound:
0000F40A 7000                       		moveq	#0,d0
0000F40C 1028 0024                  		move.b	obRoutine(a0),d0
0000F410 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F414 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F418                            ; ===========================================================================
0000F418 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F41A 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F41C                            ; ===========================================================================
0000F41C                            
0000F41C                            WSnd_Main:	; Routine 0
0000F41C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F420 117C 0004 0001             		move.b	#4,obRender(a0)
0000F426                            
0000F426                            WSnd_PlaySnd:	; Routine 2
0000F426 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F42A 0200 003F                  		andi.b	#$3F,d0
0000F42E 6600                       		bne.s	WSnd_ChkDel
0000F43A                            
0000F43A                            	WSnd_ChkDel:
0000F458 4E75                       		rts	
0000F458 4E75                       		rts	
0000F45A                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F45A                            ; ---------------------------------------------------------------------------
0000F45A                            ; Sprite mappings - purple rock	(GHZ)
0000F45A                            ; ---------------------------------------------------------------------------
0000F45A                            Map_PRock_internal:
0000F45A 0000                       		dc.w byte_D110-Map_PRock_internal
0000F45C 02                         byte_D110:	dc.b 2
0000F45D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F462 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F468 00                         		even
0000F468 00                         		even
0000F468                            		include	"_incObj\3C Smashable Wall.asm"
0000F468                            ; ---------------------------------------------------------------------------
0000F468                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F468                            ; ---------------------------------------------------------------------------
0000F468                            
0000F468                            SmashWall:
0000F468 7000                       		moveq	#0,d0
0000F46A 1028 0024                  		move.b	obRoutine(a0),d0
0000F46E 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F472 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F476 6000 0000                  		bra.w	RememberState
0000F47A                            ; ===========================================================================
0000F47A 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F47C 0000                       		dc.w Smash_Solid-Smash_Index
0000F47E 0000                       		dc.w Smash_FragMove-Smash_Index
0000F480                            
0000F480 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F480                            ; ===========================================================================
0000F480                            
0000F480                            Smash_Main:	; Routine 0
0000F480 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F484 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F48C 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F492 117C 0004 0001             		move.b	#4,obRender(a0)
0000F498 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F49E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F4A4 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F4AA                            
0000F4AA                            Smash_Solid:	; Routine 2
0000F4AA 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F4B0 323C 001B                  		move.w	#$1B,d1
0000F4B4 343C 0020                  		move.w	#$20,d2
0000F4B8 363C 0020                  		move.w	#$20,d3
0000F4BC 3828 0008                  		move.w	obX(a0),d4
0000F4C0 6100 0000                  		bsr.w	SolidObject	
0000F4C4 4A04                       		tst.b	d4
0000F4C6 6E00 0000                  		bgt.w	@chkroll	
0000F4CA 6700 0000                  		beq.w	@donothing								
0000F4CE 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F4D4 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F4D8                            ; ===========================================================================
0000F4D8                            
0000F4D8                            @chkroll:
0000F4D8 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F4DE 6600                       		bne.s	@donothing	; if not, branch	
0000F4E0 3028 0030                  		move.w	smash_speed(a0),d0
0000F4E4 6A00                       		bpl.s	@chkspeed
0000F4E6 4440                       		neg.w	d0
0000F4E8                            
0000F4E8                            	@chkspeed:
0000F4E8 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F4EC 6500                       		bcs.s	@donothing	; if not, branch	
0000F4EE                            		
0000F4EE                            	@continue:	
0000F4EE 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F4F4 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F4FA 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F500 3028 0008                  		move.w	obX(a0),d0
0000F504 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F508 6500                       		bcs.s	@smash		; if yes, branch
0000F50A 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F510                            
0000F510                            	@smash:
0000F510 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F516 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F51C 7206                       		moveq	#6,d1		; load 7 fragments
0000F51E 343C 0070                  		move.w	#$70,d2
0000F522 6100                       		bsr.s	SmashObject
0000F524                            
0000F524                            @donothing:
0000F524 4E75                       		rts	
0000F526                            
0000F526                            Smash_FragMove:	; Routine 4
0000F526 588F                       		addq.l	#4,sp
0000F528 6100 0000                  		bsr.w	SpeedToPos
0000F52C 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F532 4A28 0001                  		tst.b	obRender(a0)
0000F536 6A00 0000                  		bpl.w	DeleteObject
0000F53A 6000 0000                  		bra.w	DisplaySprite
0000F53E                            
0000F53E                            
0000F53E                            
0000F53E                            		include	"_incObj\sub SmashObject.asm"
0000F53E                            ; ---------------------------------------------------------------------------
0000F53E                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F53E                            ; ---------------------------------------------------------------------------
0000F53E                            
0000F53E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F53E                            
0000F53E                            
0000F53E                            SmashObject:
0000F53E 7000                       		moveq	#0,d0
0000F540 1028 001A                  		move.b	obFrame(a0),d0
0000F544 D040                       		add.w	d0,d0
0000F546 2668 0004                  		movea.l	obMap(a0),a3
0000F54A D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F54E 524B                       		addq.w	#1,a3
0000F550 08E8 0005 0001             		bset	#5,obRender(a0)
0000F556 1810                       		move.b	0(a0),d4
0000F558 1A28 0001                  		move.b	obRender(a0),d5
0000F55C 2248                       		movea.l	a0,a1
0000F55E 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F564 1284                       		move.b	d4,0(a1)
0000F566 234B 0004                  		move.l	a3,obMap(a1)
0000F56A 1345 0001                  		move.b	d5,obRender(a1)
0000F56E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F574 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F57A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F580 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F586 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F58C 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F590 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F594 5341                       		subq.w #1,d1
0000F596 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F59A 303C 005F                  		move.w #$5F,d0
0000F59E                            ; ===========================================================================
0000F59E                            
0000F59E                            Smash_Loop:
0000F59E 4A11                       		tst.b	(a1)
0000F5A0 6700                       		beq.s	@cont
0000F5A2 43E9 0040                  		lea		$40(a1),a1
0000F5A6 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F5AA 6600                       		bne.s	Smash_PlaySnd
0000F5AC                            
0000F5AC                            	@cont:
0000F5AC 5A4B                       		addq.w #5,a3
0000F5AE                            
0000F5AE                            Smash_LoadFrag:				; XREF: SmashObject
0000F5AE 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F5B4 1284                       		move.b	d4,0(a1)
0000F5B6 234B 0004                  		move.l	a3,obMap(a1)
0000F5BA 1345 0001                  		move.b	d5,obRender(a1)
0000F5BE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F5C4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F5CA 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F5D0 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F5D6 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F5DC 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F5E0 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F5E4 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F5E8                            
0000F5E8                            Smash_PlaySnd:
0000F5E8 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F5EC 4EF9 0000 1254             		jmp	(PlaySound_Special).l ; play smashing sound
0000F5F2                            
0000F5F2                            ; End of function SmashObject
0000F5F2                            ; End of function SmashObject
0000F5F2                            
0000F5F2                            ; ===========================================================================
0000F5F2                            ; Smashed block	fragment speeds
0000F5F2                            ;
0000F5F2 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F5F6 0600 FF00                  		dc.w $600, -$100
0000F5FA 0600 0100                  		dc.w $600, $100
0000F5FE 0400 0500                  		dc.w $400, $500
0000F602 0600 FA00                  		dc.w $600, -$600
0000F606 0800 FE00                  		dc.w $800, -$200
0000F60A 0800 0200                  		dc.w $800, $200
0000F60E 0600 0600                  		dc.w $600, $600
0000F612                            
0000F612 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F616 F800 FE00                  		dc.w -$800, -$200
0000F61A F800 0200                  		dc.w -$800, $200
0000F61E FA00 0600                  		dc.w -$600, $600
0000F622 FC00 FB00                  		dc.w -$400, -$500
0000F626 FA00 FF00                  		dc.w -$600, -$100
0000F62A FA00 0100                  		dc.w -$600, $100
0000F62E FC00 0500                  		dc.w -$400, $500
0000F632                            
0000F632                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F632                            ; ---------------------------------------------------------------------------
0000F632                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F632                            ; ---------------------------------------------------------------------------
0000F632                            Map_Smash_internal:
0000F632 0000                       		dc.w @left-Map_Smash_internal
0000F634 0000                       		dc.w @middle-Map_Smash_internal
0000F636 0000                       		dc.w @right-Map_Smash_internal
0000F638 08                         @left:		dc.b 8
0000F639 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F63E F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F643 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F648 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F64D E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F652 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F657 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F65C 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F661 08                         @middle:	dc.b 8
0000F662 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F667 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F66C 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F671 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F676 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F67B F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F680 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F685 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F68A 08                         @right:		dc.b 8
0000F68B E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F690 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F695 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F69A 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F69F E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F6A4 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F6A9 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F6AE 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F6B4 00                         		even
0000F6B4 00                         		even
0000F6B4                            
0000F6B4                            ; ---------------------------------------------------------------------------
0000F6B4                            ; Object code execution subroutine
0000F6B4                            ; ---------------------------------------------------------------------------
0000F6B4                            
0000F6B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6B4                            
0000F6B4                            
0000F6B4                            
0000F6B4                            ExecuteObjects: ; XREF: GM_Title; et al
0000F6B4 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F6B8 7E7F                       		moveq #$7F,d7
0000F6BA 7000                       		moveq #0,d0
0000F6BC 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F6C2 6400                       		bcc.s loc_D362
0000F6C4                            
0000F6C4                            loc_D348:
0000F6C4 1010                       		move.b (a0),d0 ; load object number from RAM
0000F6C6 6700                       		beq.s loc_D358
0000F6C8 D040                       		add.w d0,d0
0000F6CA D040                       		add.w d0,d0
0000F6CC 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F6D0 4E91                       		jsr (a1) ; run the object's code
0000F6D2 7000                       		moveq #0,d0
0000F6D4                            
0000F6D4                            loc_D358:
0000F6D4 41E8 0040                  		lea $40(a0),a0 ; next object
0000F6D8 51CF FFEA                  		dbf d7,loc_D348
0000F6DC 4E75                       		rts
0000F6DE                            ; ===========================================================================
0000F6DE                            
0000F6DE                            loc_D362:
0000F6DE 7E1F                       		moveq #$1F,d7
0000F6E0 61E2                       		bsr.s loc_D348
0000F6E2 7E5F                       		moveq #$5F,d7
0000F6E4                            
0000F6E4                            loc_D368:
0000F6E4 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F6E6 1010                       		move.b (a0),d0 ; get the object's ID
0000F6E8 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F6EA 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F6EE 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F6F0 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F6F4 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F6FA 6700                       		beq.s loc_D378 ; if not, branch
0000F6FC 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F700                            
0000F700                            loc_D378:
0000F700 6100 0000                  		bsr.w DisplaySprite2
0000F704                            		
0000F704                            loc_D37C:
0000F704 41E8 0040                  		lea $40(a0),a0
0000F708 51CF FFDA                  		dbf d7,loc_D368
0000F70C 4E75                       		rts
0000F70E                            ; End of function ExecuteObjects
0000F70E                            
0000F70E                            ; ===========================================================================
0000F70E                            ; ---------------------------------------------------------------------------
0000F70E                            ; Object pointers
0000F70E                            ; ---------------------------------------------------------------------------
0000F70E                            Obj_Index:
0000F70E                            		include	"_inc\Object Pointers.asm"
0000F70E                            ; ---------------------------------------------------------------------------
0000F70E                            ; Object pointers
0000F70E                            ; ---------------------------------------------------------------------------
0000F70E 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F712 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F716 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F71A 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F71E 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F722 0000 B454                  ptr_Mozzietron:		dc.l Mozzietron
0000F726 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F72A 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F72E 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F732 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F736 0000 0000                  ptr_Pole:		dc.l Pole
0000F73A 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F73E 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F742 0000 C87A                  ptr_TitleSonic:		dc.l TitleSonic
0000F746 0000 C8FA                  ptr_PSBTM:		dc.l PSBTM
0000F74A 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F74E 0000 8F78                  ptr_Bridge:		dc.l Bridge
0000F752 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F756 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F75A 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F75E 0000 959E                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F762 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F766 0000 98EA                  ptr_Helix:		dc.l Helix
0000F76A 0000 9A76                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F76E 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F772 0000 9E52                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F776 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F77A 0000 A446                  ptr_Scenery:		dc.l Scenery
0000F77E 0000 A4E8                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F782 0000 A7D0                  ptr_BallHog:		dc.l BallHog
0000F786 0000 B16A                  ptr_Crabmeat:		dc.l Crabmeat
0000F78A 0000 A89E                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F78E 0000 0000                  ptr_HUD:		dc.l HUD
0000F792 0000 B586                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F796 0000 B6D8                  ptr_Missile:		dc.l Missile
0000F79A 0000 A970                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F79E 0000 B932                  ptr_Rings:		dc.l Rings
0000F7A2 0000 C17C                  ptr_Monitor:		dc.l Monitor
0000F7A6 0000 A9E0                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F7AA 0000 AB9E                  ptr_Animals:		dc.l Animals		; $28
0000F7AE 0000 B08C                  ptr_Points:		dc.l Points
0000F7B2 0000 A5BE                  ptr_AutoDoor:		dc.l AutoDoor
0000F7B6 0000 CE3E                  ptr_Chopper:		dc.l Chopper
0000F7BA 0000 CEF8                  ptr_Jaws:		dc.l Jaws
0000F7BE 0000 CFC2                  ptr_Burrobot:		dc.l Burrobot
0000F7C2 0000 C37A                  ptr_PowerUp:		dc.l PowerUp
0000F7C6 0000 D1D6                  ptr_LargeGrass:		dc.l LargeGrass
0000F7CA 0000 D6B8                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F7CE 0000 D994                  ptr_ChainStomp:		dc.l ChainStomp
0000F7D2 0000 E042                  ptr_Button:		dc.l Button
0000F7D6 0000 E1E6                  ptr_PushBlock:		dc.l PushBlock
0000F7DA 0000 E618                  ptr_TitleCard:		dc.l TitleCard
0000F7DE 0000 D4F8                  ptr_GrassFire:		dc.l GrassFire
0000F7E2 0000 F16E                  ptr_Spikes:		dc.l Spikes
0000F7E6 0000 BB8E                  ptr_RingLoss:		dc.l RingLoss
0000F7EA 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F7EE 0000 E7C8                  ptr_GameOverCard:	dc.l GameOverCard
0000F7F2 0000 E886                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F7F6 0000 F39C                  ptr_PurpleRock:		dc.l PurpleRock
0000F7FA 0000 F468                  ptr_SmashWall:		dc.l SmashWall
0000F7FE 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F802 0000 0000                  ptr_Prison:		dc.l Prison
0000F806 0000 AA72                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F80A 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F80E 0000 0000                  ptr_Springs:		dc.l Springs
0000F812 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F816 0000 0000                  ptr_Roller:		dc.l Roller
0000F81A 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F81E 0000 DCB0                  ptr_SideStomp:		dc.l SideStomp
0000F822 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F826 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F82A 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F82E 0000 F40A                  ptr_WaterSound:		dc.l WaterSound
0000F832 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F836 0000 BE50                  ptr_GiantRing:		dc.l GiantRing
0000F83A 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F83E 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F842 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F846 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F84A 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F84E 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F852 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F856 0000 9F62                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F85A 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F85E 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F862 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F866 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F86A 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F86E 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F872 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F876 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F87A 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F87E 0000 0000                  ptr_Fan:		dc.l Fan
0000F882 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F886 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F88A 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F88E 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F892 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F896 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F89A 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F89E 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F8A2 0000 0000                  ptr_Junction:		dc.l Junction
0000F8A6 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F8AA 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F8AE 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F8B2 0000 0000                  ptr_Saws:		dc.l Saws
0000F8B6 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F8BA 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F8BE 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F8C2 0000 0000                  ptr_Electro:		dc.l Electro
0000F8C6 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F8CA 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F8CE 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F8D2 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F8D6 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F8DA 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F8DE 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F8E2 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F8E6 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F8EA 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F8EE 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F8F2 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F8F6 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F8FA 0000 BF2A                  ptr_RingFlash:		dc.l RingFlash
0000F8FE 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F902 0000 EAE0                  ptr_SSResult:		dc.l SSResult
0000F906 0000 EC86                  ptr_SSRChaos:		dc.l SSRChaos
0000F90A 0000 5E64                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F90E 0000 5F7C                  ptr_ContSonic:		dc.l ContSonic
0000F912 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F916 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F91A 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F91E 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F922 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F926 0000 640A                  ptr_EndSonic:		dc.l EndSonic
0000F92A 0000 6564                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F92E 0000 663E                  ptr_EndSTH:		dc.l EndSTH
0000F932 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F936 0000 68A4                  ptr_EndEggman:		dc.l EndEggman
0000F93A 0000 6984                  ptr_TryChaos:		dc.l TryChaos
0000F93E                            
0000F93E                            NullObject:
0000F93E                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F93E                            
0000F93E =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F93E =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F93E =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F93E =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F93E =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F93E =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F93E =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F93E =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F93E =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F93E =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F93E =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F93E =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F93E =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F93E =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F93E =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F93E =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F93E =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F93E =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F93E =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F93E =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F93E =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F93E =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F93E =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F93E =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F93E =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F93E =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F93E =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F93E =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F93E =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F93E =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F93E =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F93E =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F93E =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F93E =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F93E =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F93E =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F93E =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F93E =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F93E =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F93E =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F93E =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F93E =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F93E =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F93E =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F93E =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F93E =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F93E =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F93E =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F93E =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F93E =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F93E =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F93E =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F93E =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F93E =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F93E =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F93E =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F93E =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F93E =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F93E =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F93E =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F93E =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F93E =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F93E =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F93E =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F93E =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F93E =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F93E =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F93E =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F93E =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F93E =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F93E =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F93E =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F93E =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F93E =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F93E =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F93E =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F93E =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F93E =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F93E =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F93E =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F93E =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F93E =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F93E =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F93E =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F93E =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F93E =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F93E =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F93E =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F93E =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F93E =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F93E =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F93E =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F93E =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F93E =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F93E =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F93E =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F93E =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F93E =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F93E =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F93E =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F93E =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F93E =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F93E =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F93E =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F93E =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F93E =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F93E =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F93E =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F93E =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F93E =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F93E =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F93E =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F93E =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F93E =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F93E =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F93E =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F93E =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F93E =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F93E =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F93E =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F93E =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F93E =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F93E =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F93E =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F93E =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F93E =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F93E =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F93E =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F93E =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F93E =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F93E =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F93E =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F93E =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F93E =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F93E =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F93E =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F93E =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F93E =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F93E =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F93E =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F93E =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F93E                            
0000F93E                            		include	"_incObj\sub ObjectFall.asm"
0000F93E                            ; ---------------------------------------------------------------------------
0000F93E                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F93E                            ; ---------------------------------------------------------------------------
0000F93E                            
0000F93E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F93E                            
0000F93E                            
0000F93E                            ObjectFall:
0000F93E 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F944 6700                       		beq.s	@donothing
0000F946 3028 0010                  		move.w	obVelX(a0),d0
0000F94A 48C0                       		ext.l	d0
0000F94C E188                       		lsl.l	#8,d0
0000F94E D1A8 0008                  		add.l	d0,obX(a0)
0000F952 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F958 6F00                               ble.s   @skipline       ; if yes, branch
0000F95A 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F960                                @skipline:		
0000F960 3028 0012                  		move.w	obVelY(a0),d0
0000F964 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F96A 48C0                       		ext.l	d0
0000F96C E188                       		lsl.l	#8,d0
0000F96E D1A8 000C                  		add.l	d0,obY(a0)
0000F972 4E75                       		rts	
0000F974                            	
0000F974                            	@donothing:
0000F974 4E75                       		rts
0000F976                            
0000F976                            ; End of function ObjectFall
0000F976                            ; End of function ObjectFall
0000F976                            		include	"_incObj\sub SpeedToPos.asm"
0000F976                            ; ---------------------------------------------------------------------------
0000F976                            ; Subroutine translating object	speed to update	object position
0000F976                            ; ---------------------------------------------------------------------------
0000F976                            
0000F976                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F976                            
0000F976                            
0000F976                            SpeedToPos:
0000F976 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F97C E188                       		lsl.l	#8,d0
0000F97E D1A8 0008                  		add.l	d0,obX(a0)
0000F982 E18A                       		lsl.l	#8,d2
0000F984 D5A8 000C                  		add.l	d2,obY(a0)
0000F988 4E75                       		rts
0000F98A                            ; End of function SpeedToPos
0000F98A                            ; End of function SpeedToPos
0000F98A                            		include	"_incObj\sub DisplaySprite.asm"
0000F98A                            ; ---------------------------------------------------------------------------
0000F98A                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F98A                            ; ---------------------------------------------------------------------------
0000F98A                            
0000F98A                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F98A                            
0000F98A                            
0000F98A                            DisplaySprite:
0000F98A 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F98E D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F992 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F996 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F998 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F99A D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F99C 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F99E                            
0000F99E                                DSpr_Full:
0000F99E 4E75                               rts    
0000F9A0                            
0000F9A0                            ; End of function DisplaySprite
0000F9A0                            
0000F9A0                            
0000F9A0                            ; ---------------------------------------------------------------------------
0000F9A0                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F9A0                            ; ---------------------------------------------------------------------------
0000F9A0                            
0000F9A0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F9A0                            
0000F9A0                            
0000F9A0                            DisplaySprite1:
0000F9A0 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F9A4 D4E9 0018                          adda.w  obpriority(a1),a2
0000F9A8 0C52 007E                          cmpi.w    #$7E,(a2)
0000F9AC 6400                               bcc.s    DSpr1_Full
0000F9AE 5452                               addq.w    #2,(a2)
0000F9B0 D4D2                               adda.w    (a2),a2
0000F9B2 3489                               move.w    a1,(a2)
0000F9B4                            
0000F9B4                                DSpr1_Full:
0000F9B4 4E75                               rts    
0000F9B6                            
0000F9B6                            ; End of function DisplaySprite1
0000F9B6                            
0000F9B6                            ; ---------------------------------------------------------------------------
0000F9B6                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F9B6                            ; and d0 is already (priority/2)&$380
0000F9B6                            ; ---------------------------------------------------------------------------
0000F9B6                            
0000F9B6                            ; loc_16530:
0000F9B6                            DisplaySprite2:
0000F9B6 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F9BA D2C0                           adda.w    d0,a1
0000F9BC 0C51 007E                      cmpi.w    #$7E,(a1)
0000F9C0 6400                           bhs.s    return_16542
0000F9C2 5451                           addq.w    #2,(a1)
0000F9C4 D2D1                           adda.w    (a1),a1
0000F9C6 3288                           move.w    a0,(a1)
0000F9C8                            
0000F9C8                            return_16542:
0000F9C8 4E75                           rts
0000F9C8 4E75                           rts
0000F9CA                            		include	"_incObj\sub DeleteObject.asm"
0000F9CA                            ; ---------------------------------------------------------------------------
0000F9CA                            ; Subroutine to	delete an object
0000F9CA                            ; ---------------------------------------------------------------------------
0000F9CA                            
0000F9CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9CA                            
0000F9CA                            
0000F9CA                            DeleteObject:
0000F9CA 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F9CC                            
0000F9CC                            DeleteChild:				; child objects are already in (a1)
0000F9CC 7200                       		moveq	#0,d1
0000F9CE 700F                       		moveq	#$F,d0
0000F9D0                            
0000F9D0                            	DelObj_Loop:
0000F9D0 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F9D2 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F9D6 4E75                       		rts	
0000F9D8                            
0000F9D8                            ; End of function DeleteObject
0000F9D8                            ; End of function DeleteObject
0000F9D8                            
0000F9D8                            ; ===========================================================================
0000F9D8 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F9DC 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F9E0 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F9E4 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F9E8                            ; ---------------------------------------------------------------------------
0000F9E8                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F9E8                            ; ---------------------------------------------------------------------------
0000F9E8                            
0000F9E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9E8                            
0000F9E8                            
0000F9E8                            BuildSprites:
0000F9E8 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F9EC 7A00                       		moveq	#0,d5
0000F9EE 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F9F2 7E07                       		moveq	#7,d7
0000F9F4                            
0000F9F4                            	@priorityLoop:
0000F9F4 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000F9F6 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000F9FA 7C02                       		moveq	#2,d6
0000F9FC                            
0000F9FC                            	@objectLoop:
0000F9FC 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000FA00 4A10                       		tst.b	(a0)		; if null, branch
0000FA02 6700 0000                  		beq.w	@skipObject
0000FA06 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000FA0C                            
0000FA0C 1028 0001                  		move.b	obRender(a0),d0
0000FA10 1800                       		move.b	d0,d4
0000FA12 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000FA16 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000FA18 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000FA1C                            	; check object bounds
0000FA1C 7000                       		moveq	#0,d0
0000FA1E 1028 0014                  		move.b	obActWid(a0),d0
0000FA22 3628 0008                  		move.w	obX(a0),d3
0000FA26 9651                       		sub.w	(a1),d3
0000FA28 3203                       		move.w	d3,d1
0000FA2A D240                       		add.w	d0,d1
0000FA2C 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000FA30 3203                       		move.w	d3,d1
0000FA32 9240                       		sub.w	d0,d1
0000FA34 0C41 0140                  		cmpi.w	#320,d1
0000FA38 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000FA3A 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000FA3E                            
0000FA3E 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000FA42 6700                       		beq.s	@assumeHeight	; if yes, branch
0000FA44 7000                       		moveq	#0,d0
0000FA46 1028 0016                  		move.b	obHeight(a0),d0
0000FA4A 3428 000C                  		move.w	obY(a0),d2
0000FA4E 9469 0004                  		sub.w	4(a1),d2
0000FA52 3202                       		move.w	d2,d1
0000FA54 D240                       		add.w	d0,d1
0000FA56 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000FA58 3202                       		move.w	d2,d1
0000FA5A 9240                       		sub.w	d0,d1
0000FA5C 0C41 00E0                  		cmpi.w	#224,d1
0000FA60 6C00                       		bge.s	@skipObject
0000FA62 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000FA66 6000                       		bra.s	@drawObject
0000FA68                            ; ===========================================================================
0000FA68                            
0000FA68                            	@screenCoords:
0000FA68 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000FA6C 3628 0008                  		move.w	obX(a0),d3
0000FA70 6000                       		bra.s	@drawObject
0000FA72                            ; ===========================================================================
0000FA72                            
0000FA72                            	@assumeHeight:
0000FA72 3428 000C                  		move.w	obY(a0),d2
0000FA76 9469 0004                  		sub.w	obMap(a1),d2
0000FA7A 0642 0080                  		addi.w	#$80,d2
0000FA7E 0C42 0060                  		cmpi.w	#$60,d2
0000FA82 6500                       		blo.s	@skipObject
0000FA84 0C42 0180                  		cmpi.w	#$180,d2
0000FA88 6400                       		bhs.s	@skipObject
0000FA8A                            
0000FA8A                            	@drawObject:
0000FA8A 2268 0004                  		movea.l	obMap(a0),a1
0000FA8E 7200                       		moveq	#0,d1
0000FA90 0804 0005                  		btst	#5,d4
0000FA94 6600                       		bne.s	@drawFrame
0000FA96 1228 001A                  		move.b	$1A(a0),d1
0000FA9A D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000FA9C D2F1 1000                  		adda.w	(a1,d1.w),a1
0000FAA0 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000FAA2 1219                       		move.b	(a1)+,d1
0000FAA4 5301                       		subq.b	#1,d1
0000FAA6 6B00                       		bmi.s	@setVisible
0000FAA8                            
0000FAA8                            	@drawFrame:
0000FAA8 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000FAAC                            
0000FAAC                            	@setVisible:
0000FAAC 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000FAB2                            
0000FAB2                            	@skipObject:
0000FAB2 5446                       		addq.w	#2,d6
0000FAB4 5554                       		subq.w	#2,(a4)			; number of objects left
0000FAB6 6600 FF44                  		bne.w	@objectLoop
0000FABA                            
0000FABA                            	@nextPriority:
0000FABA 49EC 0080                  		lea	$80(a4),a4
0000FABE 51CF FF34                  		dbf	d7,@priorityLoop
0000FAC2 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000FAC6 0C05 0050                  		cmpi.b	#$50,d5
0000FACA 6700                       		beq.s	@spriteLimit
0000FACC 24BC 0000 0000             		move.l	#0,(a2)
0000FAD2 4E75                       		rts	
0000FAD4                            ; ===========================================================================
0000FAD4                            
0000FAD4                            	@spriteLimit:
0000FAD4 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000FADA 4E75                       		rts	
0000FADC                            ; End of function BuildSprites
0000FADC                            
0000FADC                            
0000FADC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FADC                            
0000FADC                            
0000FADC                            BuildSpr_Draw:
0000FADC 3668 0002                  		movea.w	obGfx(a0),a3
0000FAE0 0804 0000                  		btst	#0,d4
0000FAE4 6600                       		bne.s	BuildSpr_FlipX
0000FAE6 0804 0001                  		btst	#1,d4
0000FAEA 6600 0000                  		bne.w	BuildSpr_FlipY
0000FAEE                            ; End of function BuildSpr_Draw
0000FAEE                            
0000FAEE                            
0000FAEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FAEE                            
0000FAEE                            
0000FAEE                            BuildSpr_Normal:
0000FAEE 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FAF2 6700                       		beq.s	@return
0000FAF4 1019                       		move.b	(a1)+,d0	; get y-offset
0000FAF6 4880                       		ext.w	d0
0000FAF8 D042                       		add.w	d2,d0		; add y-position
0000FAFA 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FAFC 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000FAFE 5205                       		addq.b	#1,d5		; increase sprite counter
0000FB00 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000FB02 1019                       		move.b	(a1)+,d0	; get art tile
0000FB04 E148                       		lsl.w	#8,d0
0000FB06 1019                       		move.b	(a1)+,d0
0000FB08 D04B                       		add.w	a3,d0		; add art tile offset
0000FB0A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB0C 1019                       		move.b	(a1)+,d0	; get x-offset
0000FB0E 4880                       		ext.w	d0
0000FB10 D043                       		add.w	d3,d0		; add x-position
0000FB12 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FB16 6600                       		bne.s	@writeX
0000FB18 5240                       		addq.w	#1,d0
0000FB1A                            
0000FB1A                            	@writeX:
0000FB1A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB1C 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000FB20                            
0000FB20                            	@return:
0000FB20 4E75                       		rts	
0000FB22                            ; End of function BuildSpr_Normal
0000FB22                            
0000FB22                            ; ===========================================================================
0000FB22                            
0000FB22                            BuildSpr_FlipX:
0000FB22 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000FB26 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000FB2A                            
0000FB2A                            	@loop:
0000FB2A 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FB2E 6700                       		beq.s	@return
0000FB30 1019                       		move.b	(a1)+,d0	; y position
0000FB32 4880                       		ext.w	d0
0000FB34 D042                       		add.w	d2,d0
0000FB36 34C0                       		move.w	d0,(a2)+
0000FB38 1819                       		move.b	(a1)+,d4	; size
0000FB3A 14C4                       		move.b	d4,(a2)+	
0000FB3C 5205                       		addq.b	#1,d5		; link
0000FB3E 14C5                       		move.b	d5,(a2)+
0000FB40 1019                       		move.b	(a1)+,d0	; art tile
0000FB42 E148                       		lsl.w	#8,d0
0000FB44 1019                       		move.b	(a1)+,d0	
0000FB46 D04B                       		add.w	a3,d0
0000FB48 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000FB4C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB4E 1019                       		move.b	(a1)+,d0	; get x-offset
0000FB50 4880                       		ext.w	d0
0000FB52 4440                       		neg.w	d0			; negate it
0000FB54 D804                       		add.b	d4,d4		; calculate flipped position by size
0000FB56 0244 0018                  		andi.w	#$18,d4
0000FB5A 5044                       		addq.w	#8,d4
0000FB5C 9044                       		sub.w	d4,d0
0000FB5E D043                       		add.w	d3,d0
0000FB60 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FB64 6600                       		bne.s	@writeX
0000FB66 5240                       		addq.w	#1,d0
0000FB68                            
0000FB68                            	@writeX:
0000FB68 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB6A 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000FB6E                            
0000FB6E                            	@return:
0000FB6E 4E75                       		rts	
0000FB70                            ; ===========================================================================
0000FB70                            
0000FB70                            BuildSpr_FlipY:
0000FB70 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FB74 6700                       		beq.s	@return
0000FB76 1019                       		move.b	(a1)+,d0	; get y-offset
0000FB78 1811                       		move.b	(a1),d4		; get size
0000FB7A 4880                       		ext.w	d0
0000FB7C 4440                       		neg.w	d0		; negate y-offset
0000FB7E E70C                       		lsl.b	#3,d4	; calculate flip offset
0000FB80 0244 0018                  		andi.w	#$18,d4
0000FB84 5044                       		addq.w	#8,d4
0000FB86 9044                       		sub.w	d4,d0
0000FB88 D042                       		add.w	d2,d0	; add y-position
0000FB8A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB8C 14D9                       		move.b	(a1)+,(a2)+	; size
0000FB8E 5205                       		addq.b	#1,d5
0000FB90 14C5                       		move.b	d5,(a2)+	; link
0000FB92 1019                       		move.b	(a1)+,d0	; art tile
0000FB94 E148                       		lsl.w	#8,d0
0000FB96 1019                       		move.b	(a1)+,d0
0000FB98 D04B                       		add.w	a3,d0
0000FB9A 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000FB9E 34C0                       		move.w	d0,(a2)+
0000FBA0 1019                       		move.b	(a1)+,d0	; x-position
0000FBA2 4880                       		ext.w	d0
0000FBA4 D043                       		add.w	d3,d0
0000FBA6 0240 01FF                  		andi.w	#$1FF,d0
0000FBAA 6600                       		bne.s	@writeX
0000FBAC 5240                       		addq.w	#1,d0
0000FBAE                            
0000FBAE                            	@writeX:
0000FBAE 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FBB0 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000FBB4                            
0000FBB4                            	@return:
0000FBB4 4E75                       		rts	
0000FBB6                            ; ===========================================================================
0000FBB6                            
0000FBB6                            BuildSpr_FlipXY:
0000FBB6 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FBBA 6700                       		beq.s	@return
0000FBBC 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000FBBE 1811                       		move.b	(a1),d4
0000FBC0 4880                       		ext.w	d0
0000FBC2 4440                       		neg.w	d0
0000FBC4 E70C                       		lsl.b	#3,d4
0000FBC6 0244 0018                  		andi.w	#$18,d4
0000FBCA 5044                       		addq.w	#8,d4
0000FBCC 9044                       		sub.w	d4,d0
0000FBCE D042                       		add.w	d2,d0
0000FBD0 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FBD2 1819                       		move.b	(a1)+,d4	; size
0000FBD4 14C4                       		move.b	d4,(a2)+	; link
0000FBD6 5205                       		addq.b	#1,d5
0000FBD8 14C5                       		move.b	d5,(a2)+	; art tile
0000FBDA 1019                       		move.b	(a1)+,d0
0000FBDC E148                       		lsl.w	#8,d0
0000FBDE 1019                       		move.b	(a1)+,d0
0000FBE0 D04B                       		add.w	a3,d0
0000FBE2 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000FBE6 34C0                       		move.w	d0,(a2)+
0000FBE8 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000FBEA 4880                       		ext.w	d0
0000FBEC 4440                       		neg.w	d0
0000FBEE D804                       		add.b	d4,d4
0000FBF0 0244 0018                  		andi.w	#$18,d4
0000FBF4 5044                       		addq.w	#8,d4
0000FBF6 9044                       		sub.w	d4,d0
0000FBF8 D043                       		add.w	d3,d0
0000FBFA 0240 01FF                  		andi.w	#$1FF,d0
0000FBFE 6600                       		bne.s	@writeX
0000FC00 5240                       		addq.w	#1,d0
0000FC02                            
0000FC02                            	@writeX:
0000FC02 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FC04 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000FC08                            
0000FC08                            	@return:
0000FC08 4E75                       		rts	
0000FC0A                            
0000FC0A                            		include	"_incObj\sub ChkObjectVisible.asm"
0000FC0A                            ; ---------------------------------------------------------------------------
0000FC0A                            ; Subroutine to	check if an object is off screen
0000FC0A                            
0000FC0A                            ; output:
0000FC0A                            ;	d0 = flag set if object is off screen
0000FC0A                            ; ---------------------------------------------------------------------------
0000FC0A                            
0000FC0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC0A                            
0000FC0A                            
0000FC0A                            ChkObjectVisible:
0000FC0A 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FC0E 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FC12 6B00                       		bmi.s	@offscreen
0000FC14 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000FC18 6C00                       		bge.s	@offscreen	; if not, branch
0000FC1A                            
0000FC1A 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000FC1E 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000FC22 6B00                       		bmi.s	@offscreen
0000FC24 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000FC28 6C00                       		bge.s	@offscreen	; if not, branch
0000FC2A                            
0000FC2A 7000                       		moveq	#0,d0		; set flag to 0
0000FC2C 4E75                       		rts	
0000FC2E                            
0000FC2E                            	@offscreen:
0000FC2E 7001                       		moveq	#1,d0		; set flag to 1
0000FC30 4E75                       		rts	
0000FC32                            ; End of function ChkObjectVisible
0000FC32                            
0000FC32                            ; ---------------------------------------------------------------------------
0000FC32                            ; Subroutine to	check if an object is off screen
0000FC32                            ; More precise than above subroutine, taking width into account
0000FC32                            
0000FC32                            ; output:
0000FC32                            ;	d0 = flag set if object is off screen
0000FC32                            ; ---------------------------------------------------------------------------
0000FC32                            
0000FC32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC32                            
0000FC32                            
0000FC32                            ChkPartiallyVisible:
0000FC32 7200                       		moveq	#0,d1
0000FC34 1228 0014                  		move.b	obActWid(a0),d1
0000FC38 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FC3C 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FC40 D041                       		add.w	d1,d0		; add object width
0000FC42 6B00                       		bmi.s	@offscreen2
0000FC44 D241                       		add.w	d1,d1
0000FC46 9041                       		sub.w	d1,d0
0000FC48 0C40 0140                  		cmpi.w	#320,d0
0000FC4C 6C00                       		bge.s	@offscreen2
0000FC4E                            
0000FC4E 3228 000C                  		move.w	obY(a0),d1
0000FC52 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FC56 6B00                       		bmi.s	@offscreen2
0000FC58 0C41 00E0                  		cmpi.w	#224,d1
0000FC5C 6C00                       		bge.s	@offscreen2
0000FC5E                            
0000FC5E 7000                       		moveq	#0,d0
0000FC60 4E75                       		rts	
0000FC62                            
0000FC62                            	@offscreen2:
0000FC62 7001                       		moveq	#1,d0
0000FC64 4E75                       		rts	
0000FC66                            ; End of function ChkPartiallyVisible
0000FC66                            ; End of function ChkPartiallyVisible
0000FC66                            
0000FC66                            ; ---------------------------------------------------------------------------
0000FC66                            ; Subroutine to	load a level's objects
0000FC66                            ; ---------------------------------------------------------------------------
0000FC66                            
0000FC66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC66                            
0000FC66                            
0000FC66                            ObjPosLoad:
0000FC66 7000                       		moveq	#0,d0
0000FC68 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FC6C 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FC70 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FC74                            ; End of function ObjPosLoad
0000FC74                            
0000FC74                            ; ===========================================================================
0000FC74 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FC76 0000                       		dc.w OPL_Next-OPL_Index
0000FC78                            ; ===========================================================================
0000FC78                            
0000FC78                            OPL_Main:
0000FC78 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FC7C 3038 FE10                  		move.w	(v_zone).w,d0
0000FC80 ED08                       		lsl.b	#6,d0
0000FC82 E848                       		lsr.w	#4,d0
0000FC84 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FC8A 2248                       		movea.l	a0,a1
0000FC8C D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FC90 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FC94 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC98 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FC9C 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FCA0 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FCA4 45F8 FC00                  		lea	(v_objstate).w,a2
0000FCA8 34FC 0101                  		move.w	#$101,(a2)+
0000FCAC 303C 005E                  		move.w	#$5E,d0
0000FCB0                            
0000FCB0                            OPL_ClrList:
0000FCB0 429A                       		clr.l	(a2)+
0000FCB2 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FCB6                            
0000FCB6 45F8 FC00                  		lea	(v_objstate).w,a2
0000FCBA 7400                       		moveq	#0,d2
0000FCBC 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FCC0 0446 0080                  		subi.w	#$80,d6
0000FCC4 6400                       		bhs.s	loc_D93C
0000FCC6 7C00                       		moveq	#0,d6
0000FCC8                            
0000FCC8                            loc_D93C:
0000FCC8 0246 FF80                  		andi.w	#$FF80,d6
0000FCCC 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FCD0                            
0000FCD0                            loc_D944:
0000FCD0 BC50                       		cmp.w	(a0),d6
0000FCD2 6300                       		bls.s	loc_D956
0000FCD4 4A28 0004                  		tst.b	4(a0)
0000FCD8 6A00                       		bpl.s	loc_D952
0000FCDA 1412                       		move.b	(a2),d2
0000FCDC 5212                       		addq.b	#1,(a2)
0000FCDE                            
0000FCDE                            loc_D952:
0000FCDE 5C48                       		addq.w	#6,a0
0000FCE0 60EE                       		bra.s	loc_D944
0000FCE2                            ; ===========================================================================
0000FCE2                            
0000FCE2                            loc_D956:
0000FCE2 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FCE6 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FCEA 0446 0080                  		subi.w	#$80,d6
0000FCEE 6500                       		blo.s	loc_D976
0000FCF0                            
0000FCF0                            loc_D964:
0000FCF0 BC50                       		cmp.w	(a0),d6
0000FCF2 6300                       		bls.s	loc_D976
0000FCF4 4A28 0004                  		tst.b	4(a0)
0000FCF8 6A00                       		bpl.s	loc_D972
0000FCFA 522A 0001                  		addq.b	#1,1(a2)
0000FCFE                            
0000FCFE                            loc_D972:
0000FCFE 5C48                       		addq.w	#6,a0
0000FD00 60EE                       		bra.s	loc_D964
0000FD02                            ; ===========================================================================
0000FD02                            
0000FD02                            loc_D976:
0000FD02 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FD06 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FD0C                            
0000FD0C                            OPL_Next:
0000FD0C 45F8 FC00                  		lea	(v_objstate).w,a2
0000FD10 7400                       		moveq	#0,d2
0000FD12 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FD16 0246 FF80                  		andi.w	#$FF80,d6
0000FD1A BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FD1E 6700 0000                  		beq.w	locret_DA3A
0000FD22 6C00                       		bge.s	loc_D9F6
0000FD24 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FD28 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FD2C 0446 0080                  		subi.w	#$80,d6
0000FD30 6500                       		blo.s	loc_D9D2
0000FD32                            
0000FD32                            loc_D9A6:
0000FD32 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FD36 6C00                       		bge.s	loc_D9D2
0000FD38 5D48                       		subq.w	#6,a0
0000FD3A 4A28 0004                  		tst.b	4(a0)
0000FD3E 6A00                       		bpl.s	loc_D9BC
0000FD40 532A 0001                  		subq.b	#1,1(a2)
0000FD44 142A 0001                  		move.b	1(a2),d2
0000FD48                            
0000FD48                            loc_D9BC:
0000FD48 6100 0000                  		bsr.w	loc_DA3C
0000FD4C 6600                       		bne.s	loc_D9C6
0000FD4E 5D48                       		subq.w	#6,a0
0000FD50 60E0                       		bra.s	loc_D9A6
0000FD52                            ; ===========================================================================
0000FD52                            
0000FD52                            loc_D9C6:
0000FD52 4A28 0004                  		tst.b	4(a0)
0000FD56 6A00                       		bpl.s	loc_D9D0
0000FD58 522A 0001                  		addq.b	#1,1(a2)
0000FD5C                            
0000FD5C                            loc_D9D0:
0000FD5C 5C48                       		addq.w	#6,a0
0000FD5E                            
0000FD5E                            loc_D9D2:
0000FD5E 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FD62 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FD66 0646 0300                  		addi.w	#$300,d6
0000FD6A                            
0000FD6A                            loc_D9DE:
0000FD6A BC68 FFFA                  		cmp.w	-6(a0),d6
0000FD6E 6E00                       		bgt.s	loc_D9F0
0000FD70 4A28 FFFE                  		tst.b	-2(a0)
0000FD74 6A00                       		bpl.s	loc_D9EC
0000FD76 5312                       		subq.b	#1,(a2)
0000FD78                            
0000FD78                            loc_D9EC:
0000FD78 5D48                       		subq.w	#6,a0
0000FD7A 60EE                       		bra.s	loc_D9DE
0000FD7C                            ; ===========================================================================
0000FD7C                            
0000FD7C                            loc_D9F0:
0000FD7C 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FD80 4E75                       		rts	
0000FD82                            ; ===========================================================================
0000FD82                            
0000FD82                            loc_D9F6:
0000FD82 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FD86 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FD8A 0646 0280                  		addi.w	#$280,d6
0000FD8E                            
0000FD8E                            loc_DA02:
0000FD8E BC50                       		cmp.w	(a0),d6
0000FD90 6300                       		bls.s	loc_DA16
0000FD92 4A28 0004                  		tst.b	4(a0)
0000FD96 6A00                       		bpl.s	loc_DA10
0000FD98 1412                       		move.b	(a2),d2
0000FD9A 5212                       		addq.b	#1,(a2)
0000FD9C                            
0000FD9C                            loc_DA10:
0000FD9C 6100 0000                  		bsr.w	loc_DA3C
0000FDA0 67EC                       		beq.s	loc_DA02
0000FDA2                            
0000FDA2                            loc_DA16:
0000FDA2 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FDA6 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FDAA 0446 0300                  		subi.w	#$300,d6
0000FDAE 6500                       		blo.s	loc_DA36
0000FDB0                            
0000FDB0                            loc_DA24:
0000FDB0 BC50                       		cmp.w	(a0),d6
0000FDB2 6300                       		bls.s	loc_DA36
0000FDB4 4A28 0004                  		tst.b	4(a0)
0000FDB8 6A00                       		bpl.s	loc_DA32
0000FDBA 522A 0001                  		addq.b	#1,1(a2)
0000FDBE                            
0000FDBE                            loc_DA32:
0000FDBE 5C48                       		addq.w	#6,a0
0000FDC0 60EE                       		bra.s	loc_DA24
0000FDC2                            ; ===========================================================================
0000FDC2                            
0000FDC2                            loc_DA36:
0000FDC2 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FDC6                            
0000FDC6                            locret_DA3A:
0000FDC6 4E75                       		rts	
0000FDC8                            ; ===========================================================================
0000FDC8                            
0000FDC8                            loc_DA3C:
0000FDC8 4A28 0004                  		tst.b	4(a0)
0000FDCC 6A00                       		bpl.s	OPL_MakeItem
0000FDCE 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FDD4 6700                       		beq.s	OPL_MakeItem
0000FDD6 5C48                       		addq.w	#6,a0
0000FDD8 7000                       		moveq	#0,d0
0000FDDA 4E75                       		rts	
0000FDDC                            ; ===========================================================================
0000FDDC                            
0000FDDC                            OPL_MakeItem:
0000FDDC 6100 0000                  		bsr.w	FindFreeObj
0000FDE0 6600                       		bne.s	locret_DA8A
0000FDE2 3358 0008                  		move.w	(a0)+,obX(a1)
0000FDE6 3018                       		move.w	(a0)+,d0
0000FDE8 3200                       		move.w	d0,d1
0000FDEA 0240 0FFF                  		andi.w	#$FFF,d0
0000FDEE 3340 000C                  		move.w	d0,obY(a1)
0000FDF2 E559                       		rol.w	#2,d1
0000FDF4 0201 0003                  		andi.b	#3,d1
0000FDF8 1341 0001                  		move.b	d1,obRender(a1)
0000FDFC 1341 0022                  		move.b	d1,obStatus(a1)
0000FE00 1018                       		move.b	(a0)+,d0
0000FE02 6A00                       		bpl.s	loc_DA80
0000FE04 0200 007F                  		andi.b	#$7F,d0
0000FE08 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FE0C                            
0000FE0C                            loc_DA80:
0000FE0C 1280                       		move.b	d0,0(a1)
0000FE0E 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FE12 7000                       		moveq	#0,d0
0000FE14                            
0000FE14                            locret_DA8A:
0000FE14 4E75                       		rts	
0000FE16                            
0000FE16                            		include	"_incObj\sub FindFreeObj.asm"
0000FE16                            ; ---------------------------------------------------------------------------
0000FE16                            ; Subroutine to find a free object space
0000FE16                            
0000FE16                            ; output:
0000FE16                            ;	a1 = free position in object RAM
0000FE16                            ; ---------------------------------------------------------------------------
0000FE16                            
0000FE16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE16                            
0000FE16                            
0000FE16                            FindFreeObj:
0000FE16 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FE1A 303C 005F                  		move.w	#$5F,d0
0000FE1E                            
0000FE1E                            	FFree_Loop:
0000FE1E 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FE20 6700                       		beq.s	FFree_Found	; if yes, branch
0000FE22 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FE26 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FE2A                            
0000FE2A                            	FFree_Found:
0000FE2A 4E75                       		rts	
0000FE2C                            
0000FE2C                            ; End of function FindFreeObj
0000FE2C                            
0000FE2C                            
0000FE2C                            ; ---------------------------------------------------------------------------
0000FE2C                            ; Subroutine to find a free object space AFTER the current one
0000FE2C                            
0000FE2C                            ; output:
0000FE2C                            ;	a1 = free position in object RAM
0000FE2C                            ; ---------------------------------------------------------------------------
0000FE2C                            
0000FE2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE2C                            
0000FE2C                            
0000FE2C                            FindNextFreeObj:
0000FE2C 2248                       		movea.l	a0,a1
0000FE2E 303C F000                  		move.w	#$F000,d0
0000FE32 9048                       		sub.w	a0,d0
0000FE34 EC48                       		lsr.w	#6,d0
0000FE36 5340                       		subq.w	#1,d0
0000FE38 6500                       		bcs.s	NFree_Found
0000FE3A                            
0000FE3A                            	NFree_Loop:
0000FE3A 4A11                       		tst.b	(a1)
0000FE3C 6700                       		beq.s	NFree_Found
0000FE3E 43E9 0040                  		lea	$40(a1),a1
0000FE42 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FE46                            
0000FE46                            	NFree_Found:
0000FE46 4E75                       		rts	
0000FE48                            
0000FE48                            ; End of function FindNextFreeObj
0000FE48                            ; End of function FindNextFreeObj
0000FE48                            		include	"_incObj\41 Springs.asm"
0000FE48                            ; ---------------------------------------------------------------------------
0000FE48                            ; Object 41 - springs
0000FE48                            ; ---------------------------------------------------------------------------
0000FE48                            
0000FE48                            Springs:
0000FE48 7000                       		moveq	#0,d0
0000FE4A 1028 0024                  		move.b	obRoutine(a0),d0
0000FE4E 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FE52 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FE56 6100 FB32                  		bsr.w	DisplaySprite
0000FE78 4E75                       		rts	
0000FE7A                            ; ===========================================================================
0000FE7A 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FE7C 0000                       		dc.w Spring_Up-Spring_Index
0000FE7E 0000                       		dc.w Spring_AniUp-Spring_Index
0000FE80 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FE82 0000                       		dc.w Spring_LR-Spring_Index
0000FE84 0000                       		dc.w Spring_AniLR-Spring_Index
0000FE86 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FE88 0000                       		dc.w Spring_Dwn-Spring_Index
0000FE8A 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FE8C 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FE8E                            
0000FE8E =00000030                  spring_pow:	equ $30			; power of current spring
0000FE8E                            
0000FE8E F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FE90 F600                       		dc.w -$A00		; power	of yellow spring
0000FE92                            ; ===========================================================================
0000FE92                            
0000FE92                            Spring_Main:	; Routine 0
0000FE92 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE96 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FE9E 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FEA4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FEAA 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FEB0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FEB6 1028 0028                  		move.b	obSubtype(a0),d0
0000FEBA 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FEBE 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FEC0                            
0000FEC0 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FEC6 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FECC 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FED2 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FED8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FEDE                            
0000FEDE                            	Spring_NotLR:
0000FEDE 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FEE2 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FEE4                            
0000FEE4 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FEEA 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FEF0                            
0000FEF0                            	Spring_NotDwn:
0000FEF0 0800 0001                  		btst	#1,d0
0000FEF4 6700                       		beq.s	loc_DB72
0000FEF6 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FEFC                            
0000FEFC                            loc_DB72:
0000FEFC 0240 000F                  		andi.w	#$F,d0
0000FF00 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FF06 4E75                       		rts	
0000FF08                            ; ===========================================================================
0000FF08                            
0000FF08                            Spring_Up:	; Routine 2
0000FF08 323C 001B                  		move.w	#$1B,d1
0000FF0C 343C 0008                  		move.w	#8,d2
0000FF10 363C 0010                  		move.w	#$10,d3
0000FF14 3828 0008                  		move.w	obX(a0),d4
0000FF18 6100 0000                  		bsr.w	SolidObject
0000FF1C 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FF20 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FF22 4E75                       		rts	
0000FF24                            ; ===========================================================================
0000FF24                            
0000FF24                            Spring_BounceUp:
0000FF24 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF28 5069 000C                  		addq.w	#8,obY(a1)
0000FF2C 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FF32 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FF38 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FF3E 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FF44 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FF4A 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FF50 4228 0025                  		clr.b	obSolid(a0)
0000FF5E                            
0000FF5E                            Spring_AniUp:	; Routine 4
0000FF5E 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FF64 6000 CAD0                  		bra.w	AnimateSprite
0000FF68                            ; ===========================================================================
0000FF68                            
0000FF68                            Spring_ResetUp:	; Routine 6
0000FF68 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FF6E 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FF72 4E75                       		rts	
0000FF74                            ; ===========================================================================
0000FF74                            
0000FF74                            Spring_LR:	; Routine 8
0000FF74 323C 0013                  		move.w	#$13,d1
0000FF78 343C 000E                  		move.w	#$E,d2
0000FF7C 363C 000F                  		move.w	#$F,d3
0000FF80 3828 0008                  		move.w	obX(a0),d4
0000FF84 6100 0000                  		bsr.w	SolidObject
0000FF88 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FF8E 6600                       		bne.s	loc_DC0C
0000FF90 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FF96                            
0000FF96                            loc_DC0C:
0000FF96 0828 0005 0022             		btst	#5,obStatus(a0)
0000FF9C 6600                       		bne.s	Spring_BounceLR
0000FF9E 4E75                       		rts	
0000FFA0                            ; ===========================================================================
0000FFA0                            
0000FFA0                            Spring_BounceLR:
0000FFA0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FFA4 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FFAA 5069 0008                  		addq.w	#8,obX(a1)
0000FFAE 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FFB4 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FFB6 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FFBC 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FFC0                            
0000FFC0                            	Spring_Flipped:
0000FFC0 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FFC6 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FFCC 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FFD2 0829 0002 0022             		btst	#2,obStatus(a1)
0000FFD8 6600                       		bne.s	loc_DC56
0000FFDA 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FFE0                            
0000FFE0                            loc_DC56:
0000FFE0 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FFE6 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FFF6                            
0000FFF6                            Spring_AniLR:	; Routine $A
0000FFF6 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FFFA 43F9 0000 0000             		lea	(Ani_Spring).l,a1
00010000 6000 CA34                  		bra.w	AnimateSprite
00010004                            ; ===========================================================================
00010004                            
00010004                            Spring_ResetLR:	; Routine $C
00010004 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0001000A 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0001000E 4E75                       		rts	
00010010                            ; ===========================================================================
00010010                            
00010010                            Spring_Dwn:	; Routine $E
00010010 323C 001B                  		move.w	#$1B,d1
00010014 343C 0008                  		move.w	#8,d2
00010018 363C 0010                  		move.w	#$10,d3
0001001C 3828 0008                  		move.w	obX(a0),d4
00010020 6100 0000                  		bsr.w	SolidObject
00010024 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0001002A 6600                       		bne.s	loc_DCA4
0001002C 117C 000E 0024             		move.b	#$E,obRoutine(a0)
00010032                            
00010032                            loc_DCA4:
00010032 4A28 0025                  		tst.b	obSolid(a0)
00010036 6600                       		bne.s	locret_DCAE
00010038 4A44                       		tst.w	d4
0001003A 6B00                       		bmi.s	Spring_BounceDwn
0001003C                            
0001003C                            locret_DCAE:
0001003C 4E75                       		rts	
0001003E                            ; ===========================================================================
0001003E                            
0001003E                            Spring_BounceDwn:
0001003E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010042 5169 000C                  		subq.w	#8,obY(a1)
00010046 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0001004C 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
00010050 08E9 0001 0022             		bset	#1,obStatus(a1)
00010056 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001005C 137C 0002 0024             		move.b	#2,obRoutine(a1)
00010062 08A8 0003 0022             		bclr	#3,obStatus(a0)
00010068 4228 0025                  		clr.b	obSolid(a0)
00010076                            
00010076                            Spring_AniDwn:	; Routine $10
00010076 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0001007C 6000 C9B8                  		bra.w	AnimateSprite
00010080                            ; ===========================================================================
00010080                            
00010080                            Spring_ResetDwn:
00010080                            		; Routine $12
00010080 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
00010086 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0001008A 4E75                       		rts	
0001008A 4E75                       		rts	
0001008C                            		include	"_anim\Springs.asm"
0001008C                            ; ---------------------------------------------------------------------------
0001008C                            ; Animation script - springs
0001008C                            ; ---------------------------------------------------------------------------
0001008C 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0001008E 0000                       		dc.w byte_DD0E-Ani_Spring
00010090 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0001009C 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
000100A8                            		even
000100A8                            		even
000100A8                            Map_Spring:	include	"_maps\Springs.asm"
000100A8                            ; ---------------------------------------------------------------------------
000100A8                            ; Sprite mappings - springs
000100A8                            ; ---------------------------------------------------------------------------
000100A8                            Map_Spring_internal:
000100A8 0000                       		dc.w M_Spg_Up-Map_Spring_internal
000100AA 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
000100AC 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
000100AE 0000                       		dc.w M_Spg_Left-Map_Spring_internal
000100B0 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
000100B2 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
000100B4 02                         M_Spg_Up:	dc.b 2			; facing up
000100B5 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
000100BA 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
000100BF 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
000100C0 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
000100C5 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
000100C6 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
000100CB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000100D0 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
000100D5 01                         M_Spg_Left:	dc.b 1			; facing left
000100D6 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000100DB 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
000100DC F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
000100E1 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
000100E2 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
000100E7 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
000100EC F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
000100F1 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
000100F6                            		even
000100F6                            		even
000100F6                            
000100F6                            		include	"_incObj\42 Newtron.asm"
000100F6                            ; ---------------------------------------------------------------------------
000100F6                            ; Object 42 - Newtron enemy (GHZ)
000100F6                            ; ---------------------------------------------------------------------------
000100F6                            
000100F6                            Newtron:
000100F6 7000                       		moveq	#0,d0
000100F8 1028 0024                  		move.b	obRoutine(a0),d0
000100FC 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
00010100 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
00010104                            ; ===========================================================================
00010104 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
00010106 0000                       		dc.w Newt_Action-Newt_Index
00010108 0000                       		dc.w Newt_Delete-Newt_Index
0001010A                            ; ===========================================================================
0001010A                            
0001010A                            Newt_Main:	; Routine 0
0001010A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001010E 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
00010116 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0001011C 117C 0004 0001             		move.b	#4,obRender(a0)
00010122 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010128 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001012E 117C 0010 0016             		move.b	#$10,obHeight(a0)
00010134 117C 0008 0017             		move.b	#8,obWidth(a0)
0001013A                            
0001013A                            Newt_Action:	; Routine 2
0001013A 7000                       		moveq	#0,d0
0001013C 1028 0025                  		move.b	ob2ndRout(a0),d0
00010140 323B 0000                  		move.w	@index(pc,d0.w),d1
00010144 4EBB 1000                  		jsr	@index(pc,d1.w)
00010148 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0001014E 6100 C8E6                  		bsr.w	AnimateSprite
00010152 6000 0000                  		bra.w	RememberState
00010156                            ; ===========================================================================
00010156 0000                       @index:		dc.w @chkdistance-@index
00010158 0000                       		dc.w @type00-@index
0001015A 0000                       		dc.w @matchfloor-@index
0001015C 0000                       		dc.w @speed-@index
0001015E 0000                       		dc.w @type01-@index
00010160                            ; ===========================================================================
00010160                            
00010160                            @chkdistance:
00010160 08E8 0000 0022             		bset	#0,obStatus(a0)
00010166 3038 D008                  		move.w	(v_player+obX).w,d0
0001016A 9068 0008                  		sub.w	obX(a0),d0
0001016E 6400                       		bcc.s	@sonicisright
00010170 4440                       		neg.w	d0
00010172 08A8 0000 0022             		bclr	#0,obStatus(a0)
00010178                            
00010178                            	@sonicisright:
00010178 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0001017C 6400                       		bcc.s	@outofrange	; if not, branch
0001017E 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
00010182 117C 0001 001C             		move.b	#1,obAnim(a0)
00010188 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0001018C 6700                       		beq.s	@istype00	; if type is 00, branch
0001018E                            
0001018E 317C 249B 0002             		move.w	#$249B,obGfx(a0)
00010194 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0001019A 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
000101A0                            
000101A0                            	@outofrange:
000101A0                            	@istype00:
000101A0 4E75                       		rts	
000101A2                            ; ===========================================================================
000101A2                            
000101A2                            @type00:
000101A2 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
000101A8 6400                       		bcc.s	@fall		; is yes, branch
000101AA 08E8 0000 0022             		bset	#0,obStatus(a0)
000101B0 3038 D008                  		move.w	(v_player+obX).w,d0
000101B4 9068 0008                  		sub.w	obX(a0),d0
000101B8 6400                       		bcc.s	@sonicisright2
000101BA 08A8 0000 0022             		bclr	#0,obStatus(a0)
000101C0                            
000101C0                            	@sonicisright2:
000101C0 4E75                       		rts	
000101C2                            ; ===========================================================================
000101C2                            
000101C2                            	@fall:
000101C2 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
000101C8 6600                       		bne.s	@loc_DE42
000101CA 117C 000C 0020             		move.b	#$C,obColType(a0)
000101D0                            
000101D0                            	@loc_DE42:
000101D0 6100 F76C                  		bsr.w	ObjectFall
000101D4 6100 0000                  		bsr.w	ObjFloorDist
000101D8 4A41                       		tst.w	d1		; has newtron hit the floor?
000101DA 6A00                       		bpl.s	@keepfalling	; if not, branch
000101DC                            
000101DC D368 000C                  		add.w	d1,obY(a0)
000101E0 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
000101E6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000101EA 117C 0002 001C             		move.b	#2,obAnim(a0)
000101F0 0828 0005 0002             		btst	#5,obGfx(a0)
000101F6 6700                       		beq.s	@pppppppp
000101F8 5228 001C                  		addq.b	#1,obAnim(a0)
000101FC                            
000101FC                            	@pppppppp:
000101FC 117C 000D 0020             		move.b	#$D,obColType(a0)
00010202 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
00010208 0828 0000 0022             		btst	#0,obStatus(a0)
0001020E 6600                       		bne.s	@keepfalling
00010210 4468 0010                  		neg.w	obVelX(a0)
00010214                            
00010214                            	@keepfalling:
00010214 4E75                       		rts	
00010216                            ; ===========================================================================
00010216                            
00010216                            @matchfloor:
00010216 6100 F75E                  		bsr.w	SpeedToPos
0001021A 6100 0000                  		bsr.w	ObjFloorDist
0001021E 0C41 FFF8                  		cmpi.w	#-8,d1
00010222 6D00                       		blt.s	@nextroutine
00010224 0C41 000C                  		cmpi.w	#$C,d1
00010228 6C00                       		bge.s	@nextroutine
0001022A D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0001022E 4E75                       		rts	
00010230                            ; ===========================================================================
00010230                            
00010230                            	@nextroutine:
00010230 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
00010234 4E75                       		rts	
00010236                            ; ===========================================================================
00010236                            
00010236                            @speed:
00010236 6100 F73E                  		bsr.w	SpeedToPos
0001023A 4E75                       		rts	
0001023C                            ; ===========================================================================
0001023C                            
0001023C                            @type01:
0001023C 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
00010242 6600                       		bne.s	@firemissile
00010244 117C 000C 0020             		move.b	#$C,obColType(a0)
0001024A                            
0001024A                            	@firemissile:
0001024A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00010250 6600                       		bne.s	@fail
00010252 4A28 0032                  		tst.b	$32(a0)
00010256 6600                       		bne.s	@fail
00010258 117C 0001 0032             		move.b	#1,$32(a0)
0001025E 6100 FBB6                  		bsr.w	FindFreeObj
00010262 6600                       		bne.s	@fail
00010264 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
00010268 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001026E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010274 5169 000C                  		subq.w	#8,obY(a1)
00010278 337C 0200 0010             		move.w	#$200,obVelX(a1)
0001027E 303C 0014                  		move.w	#$14,d0
00010282 0828 0000 0022             		btst	#0,obStatus(a0)
00010288 6600                       		bne.s	@noflip
0001028A 4440                       		neg.w	d0
0001028C 4469 0010                  		neg.w	obVelX(a1)
00010290                            
00010290                            	@noflip:
00010290 D169 0008                  		add.w	d0,obX(a1)
00010294 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001029A 137C 0001 0028             		move.b	#1,obSubtype(a1)
000102A0                            
000102A0                            	@fail:
000102A0 4E75                       		rts	
000102A2                            ; ===========================================================================
000102A2                            
000102A2                            Newt_Delete:	; Routine 4
000102A2 6000 F726                  		bra.w	DeleteObject
000102A2 6000 F726                  		bra.w	DeleteObject
000102A6                            		include	"_anim\Newtron.asm"
000102A6                            ; ---------------------------------------------------------------------------
000102A6                            ; Animation script - Newtron enemy
000102A6                            ; ---------------------------------------------------------------------------
000102A6 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
000102A8 0000                       		dc.w A_Newt_Drop-Ani_Newt
000102AA 0000                       		dc.w A_Newt_Fly1-Ani_Newt
000102AC 0000                       		dc.w A_Newt_Fly2-Ani_Newt
000102AE 0000                       		dc.w A_Newt_Fires-Ani_Newt
000102B0 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
000102B4 00                         		even
000102B4 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
000102BC 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
000102C0 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
000102C4 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
000102CE 00                         		even
000102CE 00                         		even
000102CE                            Map_Newt:	include	"_maps\Newtron.asm"
000102CE                            ; ---------------------------------------------------------------------------
000102CE                            ; Sprite mappings - Newtron enemy (GHZ)
000102CE                            ; ---------------------------------------------------------------------------
000102CE                            Map_Newt_internal:
000102CE 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
000102D0 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
000102D2 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
000102D4 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
000102D6 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
000102D8 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
000102DA 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
000102DC 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
000102DE 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
000102E0 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
000102E2 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
000102E4 03                         M_Newt_Trans:	dc.b 3
000102E5 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
000102EA F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
000102EF FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
000102F4 03                         M_Newt_Norm:	dc.b 3
000102F5 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
000102FA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000102FF FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010304 03                         M_Newt_Fires:	dc.b 3
00010305 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
0001030A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001030F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010314 04                         M_Newt_Drop1:	dc.b 4
00010315 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0001031A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001031F FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010324 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
00010329 03                         M_Newt_Drop2:	dc.b 3
0001032A F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0001032F FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00010334 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
00010339 02                         M_Newt_Drop3:	dc.b 2
0001033A F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001033F F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010344 03                         M_Newt_Fly1a:	dc.b 3
00010345 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0001034A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001034F FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00010354 03                         M_Newt_Fly1b:	dc.b 3
00010355 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001035A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001035F FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00010364 03                         M_Newt_Fly2a:	dc.b 3
00010365 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001036A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001036F FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
00010374 03                         M_Newt_Fly2b:	dc.b 3
00010375 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001037A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001037F FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
00010384 00                         M_Newt_Blank:	dc.b 0
00010386 00                         		even
00010386 00                         		even
00010386                            		include	"_incObj\43 Roller.asm"
00010386                            ; ---------------------------------------------------------------------------
00010386                            ; Object 43 - Roller enemy (SYZ)
00010386                            ; ---------------------------------------------------------------------------
00010386                            
00010386                            Roller:
00010386 7000                       		moveq	#0,d0
00010388 1028 0024                  		move.b	obRoutine(a0),d0
0001038C 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
00010390 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
00010394                            ; ===========================================================================
00010394 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
00010396 0000                       		dc.w Roll_Action-Roll_Index
00010398                            ; ===========================================================================
00010398                            
00010398                            Roll_Main:	; Routine 0
00010398 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001039E 117C 0008 0017             		move.b	#8,obWidth(a0)
000103A4 6100 F598                  		bsr.w	ObjectFall
000103A8 6100 0000                  		bsr.w	ObjFloorDist
000103AC 4A41                       		tst.w	d1
000103AE 6A00                       		bpl.s	locret_E052
000103B0 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
000103B4 317C 0000 0012             		move.w	#0,obVelY(a0)
000103BA 5428 0024                  		addq.b	#2,obRoutine(a0)
000103BE 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
000103C6 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
000103CC 117C 0004 0001             		move.b	#4,obRender(a0)
000103D2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000103D8 117C 0010 0014             		move.b	#$10,obActWid(a0)
000103DE                            
000103DE                            	locret_E052:
000103DE 4E75                       		rts	
000103E0                            ; ===========================================================================
000103E0                            
000103E0                            Roll_Action:	; Routine 2
000103E0 7000                       		moveq	#0,d0
000103E2 1028 0025                  		move.b	ob2ndRout(a0),d0
000103E6 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
000103EA 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
000103EE 43F9 0000 0000             		lea	(Ani_Roll).l,a1
000103F4 6100 C640                  		bsr.w	AnimateSprite
000103F8 3028 0008                  		move.w	obX(a0),d0
000103FC 0240 FF80                  		andi.w	#$FF80,d0
00010400 3238 F700                  		move.w	(v_screenposx).w,d1
00010404 0441 0080                  		subi.w	#$80,d1
00010408 0241 FF80                  		andi.w	#$FF80,d1
0001040C 9041                       		sub.w	d1,d0
0001040E 0C40 0280                  		cmpi.w	#$280,d0
00010412 6E00 0000                  		bgt.w	Roll_ChkGone
00010416 6000 F572                  		bra.w	DisplaySprite
0001041A                            ; ===========================================================================
0001041A                            
0001041A                            Roll_ChkGone:
0001041A 45F8 FC00                  		lea	(v_objstate).w,a2
0001041E 7000                       		moveq	#0,d0
00010420 1028 0023                  		move.b	obRespawnNo(a0),d0
00010424 6700                       		beq.s	Roll_Delete
00010426 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001042C                            
0001042C                            Roll_Delete:
0001042C 6000 F59C                  		bra.w	DeleteObject
00010430                            ; ===========================================================================
00010430 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
00010432 0000                       		dc.w Roll_RollNoChk-Roll_Index2
00010434 0000                       		dc.w Roll_ChkJump-Roll_Index2
00010436 0000                       		dc.w Roll_MatchFloor-Roll_Index2
00010438                            ; ===========================================================================
00010438                            
00010438                            Roll_RollChk:
00010438 3038 D008                  		move.w	(v_player+obX).w,d0
0001043C 0440 0100                  		subi.w	#$100,d0
00010440 6500                       		bcs.s	loc_E0D2
00010442 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
00010446 6500                       		bcs.s	loc_E0D2
00010448 5828 0025                  		addq.b	#4,ob2ndRout(a0)
0001044C 117C 0002 001C             		move.b	#2,obAnim(a0)
00010452 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
00010458 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
0001045E                            
0001045E                            loc_E0D2:
0001045E 588F                       		addq.l	#4,sp
00010460 4E75                       		rts	
00010462                            ; ===========================================================================
00010462                            
00010462                            Roll_RollNoChk:
00010462 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
00010468 6700                       		beq.s	loc_E0F8
0001046A 5368 0030                  		subq.w	#1,$30(a0)
0001046E 6A00                       		bpl.s	locret_E0F6
00010470 117C 0001 001C             		move.b	#1,obAnim(a0)
00010476 317C 0700 0010             		move.w	#$700,obVelX(a0)
0001047C 117C 008E 0020             		move.b	#$8E,obColType(a0)
00010482                            
00010482                            locret_E0F6:
00010482 4E75                       		rts	
00010484                            ; ===========================================================================
00010484                            
00010484                            loc_E0F8:
00010484 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010488 4E75                       		rts	
0001048A                            ; ===========================================================================
0001048A                            
0001048A                            Roll_ChkJump:
0001048A 6100 0000                  		bsr.w	Roll_Stop
0001048E 6100 F4E6                  		bsr.w	SpeedToPos
00010492 6100 0000                  		bsr.w	ObjFloorDist
00010496 0C41 FFF8                  		cmpi.w	#-8,d1
0001049A 6D00                       		blt.s	Roll_Jump
0001049C 0C41 000C                  		cmpi.w	#$C,d1
000104A0 6C00                       		bge.s	Roll_Jump
000104A2 D368 000C                  		add.w	d1,obY(a0)
000104A6 4E75                       		rts	
000104A8                            ; ===========================================================================
000104A8                            
000104A8                            Roll_Jump:
000104A8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000104AC 08E8 0000 0032             		bset	#0,$32(a0)
000104B2 6700                       		beq.s	locret_E12E
000104B4 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
000104BA                            
000104BA                            locret_E12E:
000104BA 4E75                       		rts	
000104BC                            ; ===========================================================================
000104BC                            
000104BC                            Roll_MatchFloor:
000104BC 6100 F480                  		bsr.w	ObjectFall
000104C0 4A68 0012                  		tst.w	obVelY(a0)
000104C4 6B00                       		bmi.s	locret_E150
000104C6 6100 0000                  		bsr.w	ObjFloorDist
000104CA 4A41                       		tst.w	d1
000104CC 6A00                       		bpl.s	locret_E150
000104CE D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
000104D2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000104D6 317C 0000 0012             		move.w	#0,obVelY(a0)
000104DC                            
000104DC                            locret_E150:
000104DC 4E75                       		rts	
000104DE                            
000104DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104DE                            
000104DE                            
000104DE                            Roll_Stop:
000104DE 4A28 0032                  		tst.b	$32(a0)
000104E2 6B00                       		bmi.s	locret_E188
000104E4 3038 D008                  		move.w	(v_player+obX).w,d0
000104E8 0440 0030                  		subi.w	#$30,d0
000104EC 9068 0008                  		sub.w	obX(a0),d0
000104F0 6400                       		bcc.s	locret_E188
000104F2 117C 0000 001C             		move.b	#0,obAnim(a0)
000104F8 117C 000E 0020             		move.b	#$E,obColType(a0)
000104FE 4268 0010                  		clr.w	obVelX(a0)
00010502 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
00010508 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0001050E 08E8 0007 0032             		bset	#7,$32(a0)
00010514                            
00010514                            locret_E188:
00010514 4E75                       		rts	
00010516                            ; End of function Roll_Stop
00010516                            ; End of function Roll_Stop
00010516                            		include	"_anim\Roller.asm"
00010516                            ; ---------------------------------------------------------------------------
00010516                            ; Animation script - Roller enemy
00010516                            ; ---------------------------------------------------------------------------
00010516 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
00010518 0000                       		dc.w A_Roll_Fold-Ani_Roll
0001051A 0000                       		dc.w A_Roll_Roll-Ani_Roll
0001051C 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
00010522 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
00010528 00                         		even
00010528 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
0001052E 00                         		even
0001052E 00                         		even
0001052E                            Map_Roll:	include	"_maps\Roller.asm"
0001052E                            ; --------------------------------------------------------------------------------
0001052E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001052E                            ; --------------------------------------------------------------------------------
0001052E                            
0001052E                            SME_q3BmU:	
0001052E 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
00010532 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
00010536 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
00010538 02                         SME_q3BmU_A:	dc.b 2	
00010539 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
0001053E F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
00010543 02                         SME_q3BmU_15:	dc.b 2	
00010544 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
00010549 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
0001054E 01                         SME_q3BmU_20:	dc.b 1	
0001054F F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
00010554 01                         SME_q3BmU_26:	dc.b 1	
00010555 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
0001055A 01                         SME_q3BmU_2C:	dc.b 1	
0001055B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
00010560                            		even
00010560                            		even
00010560                            
00010560                            		include	"_incObj\44 GHZ Edge Walls.asm"
00010560                            ; ---------------------------------------------------------------------------
00010560                            ; Object 44 - edge walls (GHZ)
00010560                            ; ---------------------------------------------------------------------------
00010560                            
00010560                            EdgeWalls:
00010560 7000                       		moveq	#0,d0
00010562 1028 0024                  		move.b	obRoutine(a0),d0
00010566 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
0001056A 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
0001056E                            ; ===========================================================================
0001056E 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
00010570 0000                       		dc.w Edge_Solid-Edge_Index
00010572 0000                       		dc.w Edge_Display-Edge_Index
00010574                            ; ===========================================================================
00010574                            
00010574                            Edge_Main:	; Routine 0
00010574 5428 0024                  		addq.b	#2,obRoutine(a0)
00010578 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
00010580 317C 434C 0002             		move.w	#$434C,obGfx(a0)
00010586 0028 0004 0001             		ori.b	#4,obRender(a0)
0001058C 117C 0008 0014             		move.b	#8,obActWid(a0)
00010592 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010598 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
0001059E 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
000105A4 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
000105A6 5428 0024                  		addq.b	#2,obRoutine(a0)
000105AA 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
000105AC                            ; ===========================================================================
000105AC                            
000105AC                            Edge_Solid:	; Routine 2
000105AC 323C 0013                  		move.w	#$13,d1
000105B0 343C 0028                  		move.w	#$28,d2
000105B4 6100 A130                  		bsr.w	Obj44_SolidWall
000105B8                            
000105B8                            Edge_Display:	; Routine 4
000105B8 6100 F3D0                  		bsr.w	DisplaySprite
000105DA 4E75                       		rts	
000105DA 4E75                       		rts	
000105DC                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
000105DC                            ; ---------------------------------------------------------------------------
000105DC                            ; Sprite mappings - walls (GHZ)
000105DC                            ; ---------------------------------------------------------------------------
000105DC                            Map_Edge_internal:
000105DC 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
000105DE 0000                       		dc.w M_Edge_Light-Map_Edge_internal
000105E0 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
000105E2 04                         M_Edge_Shadow:	dc.b 4
000105E3 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000105E8 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000105ED 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000105F2 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000105F7 04                         M_Edge_Light:	dc.b 4
000105F8 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000105FD F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010602 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010607 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0001060C 04                         M_Edge_Dark:	dc.b 4
0001060D E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
00010612 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
00010617 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0001061C 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00010622 00                         		even
00010622 00                         		even
00010622                            
00010622                            		include	"_incObj\13 Lava Ball Maker.asm"
00010622                            ; ---------------------------------------------------------------------------
00010622                            ; Object 13 - lava ball	maker (MZ, SLZ)
00010622                            ; ---------------------------------------------------------------------------
00010622                            
00010622                            LavaMaker:
00010622 7000                       		moveq	#0,d0
00010624 1028 0024                  		move.b	obRoutine(a0),d0
00010628 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
0001062C 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
00010630 6000 0000                  		bra.w	LBall_ChkDel
00010634                            ; ===========================================================================
00010634 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
00010636 0000                       		dc.w LavaM_MakeLava-LavaM_Index
00010638                            ; ---------------------------------------------------------------------------
00010638                            ;
00010638                            ; Lava ball production rates
00010638                            ;
00010638 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
0001063E                            ; ===========================================================================
0001063E                            
0001063E                            LavaM_Main:	; Routine 0
0001063E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010642 1028 0028                  		move.b	obSubtype(a0),d0
00010646 E848                       		lsr.w	#4,d0
00010648 0240 000F                  		andi.w	#$F,d0
0001064C 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
00010652 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
00010658 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001065E                            
0001065E                            LavaM_MakeLava:	; Routine 2
0001065E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
00010662 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
00010664 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
0001066A 6100 F59E                  		bsr.w	ChkObjectVisible
0001066E 6600                       		bne.s	LavaM_Wait
00010670 6100 F7A4                  		bsr.w	FindFreeObj
00010674 6600                       		bne.s	LavaM_Wait
00010676 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001067A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010680 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010686 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001068C                            
0001068C                            	LavaM_Wait:
0001068C 4E75                       		rts	
0001068C 4E75                       		rts	
0001068E                            		include	"_incObj\14 Lava Ball.asm"
0001068E                            ; ---------------------------------------------------------------------------
0001068E                            ; Object 14 - lava balls (MZ, SLZ)
0001068E                            ; ---------------------------------------------------------------------------
0001068E                            
0001068E                            LavaBall:
0001068E 7000                       		moveq	#0,d0
00010690 1028 0024                  		move.b	obRoutine(a0),d0
00010694 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
00010698 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
0001069C 6000 F2EC                  		bra.w	DisplaySprite
000106A0                            ; ===========================================================================
000106A0 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
000106A2 0000                       		dc.w LBall_Action-LBall_Index
000106A4 0000                       		dc.w LBall_Delete-LBall_Index
000106A6                            
000106A6 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
000106B0 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
000106B8                            ; ===========================================================================
000106B8                            
000106B8                            LBall_Main:	; Routine 0
000106B8 5428 0024                  		addq.b	#2,obRoutine(a0)
000106BC 117C 0008 0016             		move.b	#8,obHeight(a0)
000106C2 117C 0008 0017             		move.b	#8,obWidth(a0)
000106C8 217C 0000 D688 0004        		move.l	#Map_Fire,obMap(a0)
000106D0 317C 0345 0002             		move.w	#$345,obGfx(a0)
000106D6 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
000106DC 6600                       		bne.s	@notSLZ
000106DE 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
000106E4                            
000106E4                            	@notSLZ:
000106E4 117C 0004 0001             		move.b	#4,obRender(a0)
000106EA 317C 0180 0018             		move.w	#$180,obPriority(a0)
000106F0 117C 008B 0020             		move.b	#$8B,obColType(a0)
000106F6 3168 000C 0030             		move.w	obY(a0),$30(a0)
000106FC 4A28 0029                  		tst.b	$29(a0)
00010700 6700                       		beq.s	@speed
00010702 5428 0018                  		addq.b	#2,obPriority(a0)
00010706                            
00010706                            	@speed:
00010706 7000                       		moveq	#0,d0
00010708 1028 0028                  		move.b	obSubtype(a0),d0
0001070C D040                       		add.w	d0,d0
0001070E 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
00010714 117C 0008 0014             		move.b	#8,obActWid(a0)
0001071A 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
00010720 6500                       		bcs.s	@sound		; if yes, branch
00010722                            
00010722 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010728 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
0001072E 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
00010734 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
0001073A                            
0001073A                            	@sound:
00010744                            
00010744                            LBall_Action:	; Routine 2
00010744 7000                       		moveq	#0,d0
00010746 1028 0028                  		move.b	obSubtype(a0),d0
0001074A D040                       		add.w	d0,d0
0001074C 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
00010750 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
00010754 6100 F220                  		bsr.w	SpeedToPos
00010758 43F9 0000 0000             		lea	(Ani_Fire).l,a1
0001075E 6100 C2D6                  		bsr.w	AnimateSprite
00010762                            
00010762                            LBall_ChkDel:
00010780 4E75                       		rts	
00010782                            ; ===========================================================================
00010782 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010786 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
0001078A 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
0001078E 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
00010792 0000                       		dc.w LBall_Type08-LBall_TypeIndex
00010794                            ; ===========================================================================
00010794                            ; lavaball types 00-03 fly up and fall back down
00010794                            
00010794                            LBall_Type00:
00010794 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
0001079A 3028 0030                  		move.w	$30(a0),d0
0001079E B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
000107A2 6400                       		bcc.s	loc_E41E	; if not, branch
000107A4 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
000107A8                            
000107A8                            loc_E41E:
000107A8 08A8 0001 0022             		bclr	#1,obStatus(a0)
000107AE 4A68 0012                  		tst.w	obVelY(a0)
000107B2 6A00                       		bpl.s	locret_E430
000107B4 08E8 0001 0022             		bset	#1,obStatus(a0)
000107BA                            
000107BA                            locret_E430:
000107BA 4E75                       		rts	
000107BC                            ; ===========================================================================
000107BC                            ; lavaball type	04 flies up until it hits the ceiling
000107BC                            
000107BC                            LBall_Type04:
000107BC 08E8 0001 0022             		bset	#1,obStatus(a0)
000107C2 6100 0000                  		bsr.w	ObjHitCeiling
000107C6 4A41                       		tst.w	d1
000107C8 6A00                       		bpl.s	locret_E452
000107CA 117C 0008 0028             		move.b	#8,obSubtype(a0)
000107D0 117C 0001 001C             		move.b	#1,obAnim(a0)
000107D6 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
000107DC                            
000107DC                            locret_E452:
000107DC 4E75                       		rts	
000107DE                            ; ===========================================================================
000107DE                            ; lavaball type	05 falls down until it hits the	floor
000107DE                            
000107DE                            LBall_Type05:
000107DE 08A8 0001 0022             		bclr	#1,obStatus(a0)
000107E4 6100 0000                  		bsr.w	ObjFloorDist
000107E8 4A41                       		tst.w	d1
000107EA 6A00                       		bpl.s	locret_E474
000107EC 117C 0008 0028             		move.b	#8,obSubtype(a0)
000107F2 117C 0001 001C             		move.b	#1,obAnim(a0)
000107F8 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
000107FE                            
000107FE                            locret_E474:
000107FE 4E75                       		rts	
00010800                            ; ===========================================================================
00010800                            ; lavaball types 06-07 move sideways
00010800                            
00010800                            LBall_Type06:
00010800 08E8 0000 0022             		bset	#0,obStatus(a0)
00010806 76F8                       		moveq	#-8,d3
00010808 6100 0000                  		bsr.w	ObjHitWallLeft
0001080C 4A41                       		tst.w	d1
0001080E 6A00                       		bpl.s	locret_E498
00010810 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010816 117C 0003 001C             		move.b	#3,obAnim(a0)
0001081C 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010822                            
00010822                            locret_E498:
00010822 4E75                       		rts	
00010824                            ; ===========================================================================
00010824                            
00010824                            LBall_Type07:
00010824 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001082A 7608                       		moveq	#8,d3
0001082C 6100 0000                  		bsr.w	ObjHitWallRight
00010830 4A41                       		tst.w	d1
00010832 6A00                       		bpl.s	locret_E4BC
00010834 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001083A 117C 0003 001C             		move.b	#3,obAnim(a0)
00010840 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010846                            
00010846                            locret_E4BC:
00010846 4E75                       		rts	
00010848                            ; ===========================================================================
00010848                            
00010848                            LBall_Type08:
00010848 4E75                       		rts	
0001084A                            ; ===========================================================================
0001084A                            
0001084A                            LBall_Delete:
0001084A 6000 F17E                  		bra.w	DeleteObject
0001084A 6000 F17E                  		bra.w	DeleteObject
0001084E                            		include	"_anim\Fireballs.asm"
0001084E                            ; ---------------------------------------------------------------------------
0001084E                            ; Animation script - lava balls
0001084E                            ; ---------------------------------------------------------------------------
0001084E 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
00010850 0000                       		dc.w @vertcollide-Ani_Fire
00010852 0000                       		dc.w @horizontal-Ani_Fire
00010854 0000                       		dc.w @horicollide-Ani_Fire
00010856 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
0001085C 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
00010860 00                         		even
00010860 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
00010866 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
0001086A 00                         		even
0001086A 00                         		even
0001086A                            
0001086A                            		include	"_incObj\6D Flamethrower.asm"
0001086A                            ; ---------------------------------------------------------------------------
0001086A                            ; Object 6D - flame thrower (SBZ)
0001086A                            ; ---------------------------------------------------------------------------
0001086A                            
0001086A                            Flamethrower:
0001086A 7000                       		moveq	#0,d0
0001086C 1028 0024                  		move.b	obRoutine(a0),d0
00010870 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
00010874 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
00010878                            ; ===========================================================================
00010878 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
0001087A 0000                       		dc.w Flame_Action-Flame_Index
0001087C                            ; ===========================================================================
0001087C                            
0001087C                            Flame_Main:	; Routine 0
0001087C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010880 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
00010888 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
0001088E 0028 0004 0001             		ori.b	#4,obRender(a0)
00010894 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001089A 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
000108A0 117C 000C 0014             		move.b	#$C,obActWid(a0)
000108A6 1028 0028                  		move.b	obSubtype(a0),d0
000108AA 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
000108AE D040                       		add.w	d0,d0		; multiply by 2
000108B0 3140 0030                  		move.w	d0,$30(a0)
000108B4 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000108B8 1028 0028                  		move.b	obSubtype(a0),d0
000108BC 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
000108C0 EB48                       		lsl.w	#5,d0		; multiply by $20
000108C2 3140 0034                  		move.w	d0,$34(a0)	; set pause time
000108C6 117C 000A 0036             		move.b	#$A,$36(a0)
000108CC 0828 0001 0022             		btst	#1,obStatus(a0)
000108D2 6700                       		beq.s	Flame_Action
000108D4 117C 0002 001C             		move.b	#2,obAnim(a0)
000108DA 117C 0015 0036             		move.b	#$15,$36(a0)
000108E0                            
000108E0                            Flame_Action:	; Routine 2
000108E0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000108E4 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000108E6 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000108EC 0868 0000 001C             		bchg	#0,obAnim(a0)
000108F2 6700                       		beq.s	loc_E57A
000108F4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010904                            
00010904                            loc_E57A:
00010904 43F9 0000 0000             		lea	(Ani_Flame).l,a1
0001090A 6100 C12A                  		bsr.w	AnimateSprite
0001090E 117C 0000 0020             		move.b	#0,obColType(a0)
00010914 1028 0036                  		move.b	$36(a0),d0
00010918 B028 001A                  		cmp.b	obFrame(a0),d0
0001091C 6600                       		bne.s	Flame_ChkDel
0001091E 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010924                            
00010924                            Flame_ChkDel:
00010942 6000 F046                  		bra.w	DisplaySprite
00010942 6000 F046                  		bra.w	DisplaySprite
00010946                            		include	"_anim\Flamethrower.asm"
00010946                            ; ---------------------------------------------------------------------------
00010946                            ; Animation script - flamethrower (SBZ)
00010946                            ; ---------------------------------------------------------------------------
00010946 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
00010948 0000                       		dc.w @pipe2-Ani_Flame
0001094A 0000                       		dc.w @valve1-Ani_Flame
0001094C 0000                       		dc.w @valve2-Ani_Flame
0001094E 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
0001095C 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
00010966 00                         		even
00010966 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
00010974 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
0001097E 00                         		even
0001097E 00                         		even
0001097E                            Map_Flame:	include	"_maps\Flamethrower.asm"
0001097E                            ; ---------------------------------------------------------------------------
0001097E                            ; Sprite mappings - flame thrower (SBZ)
0001097E                            ; ---------------------------------------------------------------------------
0001097E                            Map_Flame_internal:
0001097E 0000                       		dc.w @pipe1-Map_Flame_internal
00010980 0000                       		dc.w @pipe2-Map_Flame_internal
00010982 0000                       		dc.w @pipe3-Map_Flame_internal
00010984 0000                       		dc.w @pipe4-Map_Flame_internal
00010986 0000                       		dc.w @pipe5-Map_Flame_internal
00010988 0000                       		dc.w @pipe6-Map_Flame_internal
0001098A 0000                       		dc.w @pipe7-Map_Flame_internal
0001098C 0000                       		dc.w @pipe8-Map_Flame_internal
0001098E 0000                       		dc.w @pipe9-Map_Flame_internal
00010990 0000                       		dc.w @pipe10-Map_Flame_internal
00010992 0000                       		dc.w @pipe11-Map_Flame_internal
00010994 0000                       		dc.w @valve1-Map_Flame_internal
00010996 0000                       		dc.w @valve2-Map_Flame_internal
00010998 0000                       		dc.w @valve3-Map_Flame_internal
0001099A 0000                       		dc.w @valve4-Map_Flame_internal
0001099C 0000                       		dc.w @valve5-Map_Flame_internal
0001099E 0000                       		dc.w @valve6-Map_Flame_internal
000109A0 0000                       		dc.w @valve7-Map_Flame_internal
000109A2 0000                       		dc.w @valve8-Map_Flame_internal
000109A4 0000                       		dc.w @valve9-Map_Flame_internal
000109A6 0000                       		dc.w @valve10-Map_Flame_internal
000109A8 0000                       		dc.w @valve11-Map_Flame_internal
000109AA 01                         @pipe1:		dc.b 1
000109AB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
000109B0 02                         @pipe2:		dc.b 2
000109B1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109B6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109BB 02                         @pipe3:		dc.b 2
000109BC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109C1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109C6 03                         @pipe4:		dc.b 3
000109C7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109CC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109D1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109D6 03                         @pipe5:		dc.b 3
000109D7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109DC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109E1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109E6 04                         @pipe6:		dc.b 4
000109E7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000109EC 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109F1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109F6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109FB 04                         @pipe7:		dc.b 4
000109FC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A01 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A06 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A0B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A10 05                         @pipe8:		dc.b 5
00010A11 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010A16 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A1B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A20 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A25 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A2A 05                         @pipe9:		dc.b 5
00010A2B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A30 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A35 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A3A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A3F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A44 06                         @pipe10:	dc.b 6
00010A45 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010A4A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010A4F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A54 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010A59 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A5E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A63 06                         @pipe11:	dc.b 6
00010A64 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010A69 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A6E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010A73 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A78 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A7D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A82 01                         @valve1:	dc.b 1
00010A83 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
00010A88 02                         @valve2:	dc.b 2
00010A89 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A8E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A93 02                         @valve3:	dc.b 2
00010A94 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A99 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A9E 03                         @valve4:	dc.b 3
00010A9F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010AA4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AA9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AAE 03                         @valve5:	dc.b 3
00010AAF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010AB4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AB9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010ABE 04                         @valve6:	dc.b 4
00010ABF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AC4 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010AC9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010ACE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AD3 04                         @valve7:	dc.b 4
00010AD4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010AD9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010ADE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AE3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010AE8 05                         @valve8:	dc.b 5
00010AE9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010AEE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AF3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010AF8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AFD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010B02 05                         @valve9:	dc.b 5
00010B03 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010B08 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010B0D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B12 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B17 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B1C 06                         @valve10:	dc.b 6
00010B1D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010B22 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010B27 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010B2C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010B31 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B36 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010B3B 06                         @valve11:	dc.b 6
00010B3C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010B41 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010B46 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010B4B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B50 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B55 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B5A                            		even
00010B5A                            		even
00010B5A                            
00010B5A                            		include	"_incObj\46 MZ Bricks.asm"
00010B5A                            ; ---------------------------------------------------------------------------
00010B5A                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010B5A                            ; ---------------------------------------------------------------------------
00010B5A                            
00010B5A                            MarbleBrick:
00010B5A 7000                       		moveq	#0,d0
00010B5C 1028 0024                  		move.b	obRoutine(a0),d0
00010B60 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010B64 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010B68                            ; ===========================================================================
00010B68 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010B6A 0000                       		dc.w Brick_Action-Brick_Index
00010B6C                            
00010B6C =00000030                  brick_origY:	equ $30
00010B6C                            ; ===========================================================================
00010B6C                            
00010B6C                            Brick_Main:	; Routine 0
00010B6C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B70 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010B76 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010B7C 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010B84 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010B8A 117C 0004 0001             		move.b	#4,obRender(a0)
00010B90 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010B96 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010B9C 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010BA2 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010BA8                            
00010BA8                            Brick_Action:	; Routine 2
00010BA8 4A28 0001                  		tst.b	obRender(a0)
00010BAC 6A00                       		bpl.s	@chkdel
00010BAE 7000                       		moveq	#0,d0
00010BB0 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010BB4 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010BB8 D040                       		add.w	d0,d0
00010BBA 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010BBE 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010BC2 323C 001B                  		move.w	#$1B,d1
00010BC6 343C 0010                  		move.w	#$10,d2
00010BCA 363C 0011                  		move.w	#$11,d3
00010BCE 3828 0008                  		move.w	obX(a0),d4
00010BD2 6100 0000                  		bsr.w	SolidObject
00010BD6                            
00010BD6                            	@chkdel:
00010BF4 6000 ED94                  			bra.w	DisplaySprite
00010BF8                            ; ===========================================================================
00010BF8 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010BFA 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010BFC 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010BFE 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010C00 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010C02                            ; ===========================================================================
00010C02                            
00010C02                            Brick_Type00:
00010C02 4E75                       		rts	
00010C04                            ; ===========================================================================
00010C04                            
00010C04                            Brick_Type02:
00010C04 3038 D008                  		move.w	(v_player+obX).w,d0
00010C08 9068 0008                  		sub.w	obX(a0),d0
00010C0C 6400                       		bcc.s	loc_E888
00010C0E 4440                       		neg.w	d0
00010C10                            
00010C10                            loc_E888:
00010C10 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010C14 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010C16 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010C1C                            
00010C1C                            Brick_Type01:
00010C1C 7000                       		moveq	#0,d0
00010C1E 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010C22 0828 0003 0028             		btst	#3,obSubtype(a0)
00010C28 6700                       		beq.s	loc_E8A8
00010C2A 4440                       		neg.w	d0
00010C2C 0640 0010                  		addi.w	#$10,d0
00010C30                            
00010C30                            loc_E8A8:
00010C30 3228 0030                  		move.w	brick_origY(a0),d1
00010C34 9240                       		sub.w	d0,d1
00010C36 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010C3A 4E75                       		rts	
00010C3C                            ; ===========================================================================
00010C3C                            
00010C3C                            Brick_Type03:
00010C3C 6100 ED38                  		bsr.w	SpeedToPos
00010C40 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010C46 6100 0000                  		bsr.w	ObjFloorDist
00010C4A 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010C4C 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010C50 D368 000C                  		add.w	d1,obY(a0)
00010C54 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010C58 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010C5E 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010C64 3011                       		move.w	(a1),d0
00010C66 0240 03FF                  		andi.w	#$3FF,d0
00010C6A 0C40 016A                  			cmpi.w	#$16A,d0
00010C6E 6400                       		bcc.s	locret_E8EE
00010C70 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010C76                            
00010C76                            locret_E8EE:
00010C76 4E75                       		rts	
00010C78                            ; ===========================================================================
00010C78                            
00010C78                            Brick_Type04:
00010C78 7000                       		moveq	#0,d0
00010C7A 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010C7E E648                       		lsr.w	#3,d0
00010C80 3228 0030                  		move.w	brick_origY(a0),d1
00010C84 9240                       		sub.w	d0,d1
00010C86 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010C8A 4E75                       		rts	
00010C8A 4E75                       		rts	
00010C8C                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010C8C                            ; ---------------------------------------------------------------------------
00010C8C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010C8C                            ; ---------------------------------------------------------------------------
00010C8C                            Map_Brick_internal:
00010C8C 0000                       		dc.w @brick-Map_Brick_internal
00010C8E 01                         @brick:		dc.b 1
00010C8F F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010C94                            		even
00010C94                            		even
00010C94                            
00010C94                            		include	"_incObj\12 Light.asm"
00010C94                            ; ---------------------------------------------------------------------------
00010C94                            ; Object 12 - lamp (SYZ)
00010C94                            ; ---------------------------------------------------------------------------
00010C94                            
00010C94                            SpinningLight:
00010C94 7000                       		moveq	#0,d0
00010C96 1028 0024                  		move.b	obRoutine(a0),d0
00010C9A 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010C9E 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010CA2                            ; ===========================================================================
00010CA2 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010CA4 0000                       		dc.w Light_Animate-Light_Index
00010CA6                            ; ===========================================================================
00010CA6                            
00010CA6                            Light_Main:	; Routine 0
00010CA6 5428 0024                  		addq.b	#2,obRoutine(a0)
00010CAA 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010CB2 317C 0000 0002             		move.w	#0,obGfx(a0)
00010CB8 117C 0004 0001             		move.b	#4,obRender(a0)
00010CBE 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010CC4 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010CCA                            
00010CCA                            Light_Animate:	; Routine 2
00010CCA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010CCE 6A00                       		bpl.s	@chkdel
00010CD0 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010CD6 5228 001A                  		addq.b	#1,obFrame(a0)
00010CDA 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010CE0 6500                       		bcs.s	@chkdel
00010CE2 117C 0000 001A             		move.b	#0,obFrame(a0)
00010CE8                            
00010CE8                            	@chkdel:
00010D06 6000 EC82                  		bra.w	DisplaySprite
00010D06 6000 EC82                  		bra.w	DisplaySprite
00010D0A                            Map_Light	include	"_maps\Light.asm"
00010D0A                            ; --------------------------------------------------------------------------------
00010D0A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010D0A                            ; --------------------------------------------------------------------------------
00010D0A                            
00010D0A                            SME_FBl1X:	
00010D0A 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010D0E 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010D12 05                         SME_FBl1X_8:	dc.b 5	
00010D13 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010D18 E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010D1D F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010D22 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010D27 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010D2C 05                         SME_FBl1X_22:	dc.b 5	
00010D2D E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010D32 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010D37 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010D3C F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010D41 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010D46 06                         SME_FBl1X_3C:	dc.b 6	
00010D47 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010D4C E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010D51 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010D56 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010D5B F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010D60 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010D65 05                         SME_FBl1X_5B:	dc.b 5	
00010D66 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010D6B E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010D70 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010D75 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010D7A F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010D80 00                         		even
00010D80 00                         		even
00010D80                            		include	"_incObj\47 Bumper.asm"
00010D80                            ; ---------------------------------------------------------------------------
00010D80                            ; Object 47 - pinball bumper (SYZ)
00010D80                            ; ---------------------------------------------------------------------------
00010D80                            
00010D80                            Bumper:
00010D80 7000                       		moveq	#0,d0
00010D82 1028 0024                  		move.b	obRoutine(a0),d0
00010D86 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010D8A 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010D8E                            ; ===========================================================================
00010D8E 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010D90 0000                       		dc.w Bump_Hit-Bump_Index
00010D92                            ; ===========================================================================
00010D92                            
00010D92                            Bump_Main:	; Routine 0
00010D92 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D96 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010D9E 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010DA4 117C 0004 0001             		move.b	#4,obRender(a0)
00010DAA 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010DB0 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010DB6 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010DBC                            
00010DBC                            Bump_Hit:	; Routine 2
00010DBC 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010DC0 6700 0000                  		beq.w	@display	; if not, branch
00010DC4 4228 0021                  		clr.b	obColProp(a0)
00010DC8 43F8 D000                  		lea	(v_player).w,a1
00010DCC 3228 0008                  		move.w	obX(a0),d1
00010DD0 3428 000C                  		move.w	obY(a0),d2
00010DD4 9269 0008                  		sub.w	obX(a1),d1
00010DD8 9469 000C                  		sub.w	obY(a1),d2
00010DDC 4EB9 0000 3CC8             		jsr	(CalcAngle).l
00010DE2 4EB9 0000 3A36             		jsr	(CalcSine).l
00010DE8 C3FC F900                  		muls.w	#-$700,d1
00010DEC E081                       		asr.l	#8,d1
00010DEE 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010DF2 C1FC F900                  		muls.w	#-$700,d0
00010DF6 E080                       		asr.l	#8,d0
00010DF8 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010DFC 08E9 0001 0022             		bset	#1,obStatus(a1)
00010E02 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010E08 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010E0E 4229 003C                  		clr.b	$3C(a1)
00010E12 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010E22 45F8 FC00                  		lea	(v_objstate).w,a2
00010E26 7000                       		moveq	#0,d0
00010E28 1028 0023                  		move.b	obRespawnNo(a0),d0
00010E2C 6700                       		beq.s	@addscore
00010E2E 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010E34 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010E36 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010E3A                            
00010E3A                            	@addscore:
00010E3A 7001                       		moveq	#1,d0
00010E3C 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010E42 6100 EFD2                  		bsr.w	FindFreeObj
00010E46 6600                       		bne.s	@display
00010E48 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010E4C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010E52 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010E58 137C 0004 001A             		move.b	#4,obFrame(a1)
00010E5E                            
00010E5E                            	@display:
00010E5E 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010E64 6100 BBD0                  		bsr.w	AnimateSprite
00010E84 6000 EB04                  		bra.w	DisplaySprite
00010E88                            ; ===========================================================================
00010E88                            
00010E88                            @resetcount:
00010E88 45F8 FC00                  		lea	(v_objstate).w,a2
00010E8C 7000                       		moveq	#0,d0
00010E8E 1028 0023                  		move.b	obRespawnNo(a0),d0
00010E92 6700                       		beq.s	@delete
00010E94 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010E9A                            
00010E9A                            	@delete:
00010E9A 6000 EB2E                  		bra.w	DeleteObject
00010E9A 6000 EB2E                  		bra.w	DeleteObject
00010E9E                            		include	"_anim\Bumper.asm"
00010E9E                            ; ---------------------------------------------------------------------------
00010E9E                            ; Animation script - flamethrower (SBZ)
00010E9E                            ; ---------------------------------------------------------------------------
00010E9E 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010EA0 0000                       		dc.w byte_EAF8-Ani_Bump
00010EA2 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010EA6 00                         		even
00010EA6 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010EAE 00                         		even
00010EAE 00                         		even
00010EAE                            Map_Bump:	include	"_maps\Bumper.asm"
00010EAE                            ; ---------------------------------------------------------------------------
00010EAE                            ; Sprite mappings - pinball bumper (SYZ)
00010EAE                            ; ---------------------------------------------------------------------------
00010EAE                            Map_Bump_internal:
00010EAE 0000                       		dc.w @normal-Map_Bump_internal
00010EB0 0000                       		dc.w @bumped1-Map_Bump_internal
00010EB2 0000                       		dc.w @bumped2-Map_Bump_internal
00010EB4 02                         @normal:	dc.b 2
00010EB5 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010EBA F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010EBF 02                         @bumped1:	dc.b 2
00010EC0 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010EC5 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010ECA 02                         @bumped2:	dc.b 2
00010ECB F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010ED0 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010ED6 00                         		even
00010ED6 00                         		even
00010ED6                            
00010ED6                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010ED6                            ; ---------------------------------------------------------------------------
00010ED6                            ; Object 0D - signpost at the end of a level
00010ED6                            ; ---------------------------------------------------------------------------
00010ED6                            
00010ED6                            Signpost:
00010ED6 7000                       		moveq	#0,d0
00010ED8 1028 0024                  		move.b	obRoutine(a0),d0
00010EDC 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010EE0 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010EE4 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010EEA 6100 BB4A                  		bsr.w	AnimateSprite
00010EEE 6100 EA9A                  		bsr.w	DisplaySprite
00010F10 4E75                       		rts	
00010F12                            ; ===========================================================================
00010F12 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010F14 0000                       		dc.w Sign_Touch-Sign_Index
00010F16 0000                       		dc.w Sign_Spin-Sign_Index
00010F18 0000                       		dc.w Sign_SonicRun-Sign_Index
00010F1A 0000                       		dc.w Sign_Exit-Sign_Index
00010F1C                            
00010F1C =00000030                  spintime:	equ $30		; time for signpost to spin
00010F1C =00000032                  sparkletime:	equ $32		; time between sparkles
00010F1C =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010F1C                            ; ===========================================================================
00010F1C                            
00010F1C                            Sign_Main:	; Routine 0
00010F1C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F20 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010F28 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010F2E 117C 0004 0001             		move.b	#4,obRender(a0)
00010F34 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010F3A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010F40                            
00010F40                            Sign_Touch:	; Routine 2
00010F40 3038 D008                  		move.w	(v_player+obX).w,d0
00010F44 9068 0008                  		sub.w	obX(a0),d0
00010F48 6500                       		bcs.s	@notouch
00010F4A 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010F4E 6400                       		bcc.s	@notouch	; if not, branch
00010F50 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010F60 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010F64 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010F6A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F6E 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010F74                            
00010F74                            	@notouch:
00010F74 4E75                       		rts	
00010F76                            	
00010F76                            ; ===========================================================================
00010F76                            
00010F76                            Sign_Spin:	; Routine 4
00010F76 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010F7A 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010F7C 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010F82 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010F86 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010F8C 6600                       		bne.s	@chksparkle	; if not, branch
00010F8E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F92                            
00010F92                            	@chksparkle:
00010F92 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010F96 6A00                       		bpl.s	@fail		; if time remains, branch
00010F98 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010F9E 7000                       		moveq	#0,d0
00010FA0 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010FA4 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010FA8 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010FAE 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010FB2 6100 EE62                  		bsr.w	FindFreeObj
00010FB6 6600                       		bne.s	@fail
00010FB8 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010FBC 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010FC2 101A                       		move.b	(a2)+,d0
00010FC4 4880                       		ext.w	d0
00010FC6 D068 0008                  		add.w	obX(a0),d0
00010FCA 3340 0008                  		move.w	d0,obX(a1)
00010FCE 101A                       		move.b	(a2)+,d0
00010FD0 4880                       		ext.w	d0
00010FD2 D068 000C                  		add.w	obY(a0),d0
00010FD6 3340 000C                  		move.w	d0,obY(a1)
00010FDA 237C 0000 BFE6 0004        		move.l	#Map_Ring,obMap(a1)
00010FE2 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010FE8 137C 0004 0001             		move.b	#4,obRender(a1)
00010FEE 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010FF4 137C 0008 0014             		move.b	#8,obActWid(a1)
00010FFA                            
00010FFA                            	@fail:
00010FFA 4E75                       		rts	
00010FFC                            ; ===========================================================================
00010FFC E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010FFE 0808                       		dc.b	8,   8
00011000 F000                       		dc.b -$10,   0
00011002 18F8                       		dc.b  $18,  -8
00011004 00F8                       		dc.b	0,  -8
00011006 1000                       		dc.b  $10,   0
00011008 E808                       		dc.b -$18,   8
0001100A 1810                       		dc.b  $18, $10
0001100C                            ; ===========================================================================
0001100C                            
0001100C                            Sign_SonicRun:	; Routine 6
0001100C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00011010 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00011014 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
0001101A                            		
0001101A                            
0001101A                            	loc_EC86:
0001101A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001101E                            
0001101E                            ; ---------------------------------------------------------------------------
0001101E                            ; Subroutine to	set up bonuses at the end of an	act
0001101E                            ; ---------------------------------------------------------------------------
0001101E                            
0001101E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001101E                            
0001101E                            
0001101E                            GotThroughAct:
0001101E 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00011022 6600                       		bne.s	locret_ECEE
00011024 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
0001102A 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
0001102E 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00011032 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00011036 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
0001103C 7000                       		moveq	#plcid_TitleCard,d0
0001103E 4EB9 0000 1720             		jsr	(NewPLC).l	; load title card patterns
00011044 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
0001104A 7000                       		moveq	#0,d0
0001104C 1038 FE23                  		move.b	(v_timemin).w,d0
00011050 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00011054 7200                       		moveq	#0,d1
00011056 1238 FE24                  		move.b	(v_timesec).w,d1
0001105A D041                       		add.w	d1,d0		; add up your time
0001105C 80FC 000F                  		divu.w	#15,d0		; divide by 15
00011060 7214                       		moveq	#$14,d1
00011062 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011064 6500                       		bcs.s	hastimebonus	; if not, branch
00011066 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011068                            
00011068                            	hastimebonus:
00011068 D040                       		add.w	d0,d0
0001106A 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00011070 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011074 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011078 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011086 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
0001108C                            
0001108C                            locret_ECEE:
0001108C 4E75                       		rts	
0001108E                            
0001108E                            ; End of function GotThroughAct
0001108E                            
0001108E                            ; ===========================================================================
0001108E 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000110A2 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000110B8                            ; ===========================================================================
000110B8                            
000110B8                            Sign_Exit:	; Routine 8
000110B8 4E75                       		rts	
000110BA                            
000110BA                            ; ---------------------------------------------------------------------------
000110BA                            ; Subroutine to	set up bonuses at the end of an	zone
000110BA                            ; ---------------------------------------------------------------------------
000110BA                            
000110BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000110BA                            
000110BA                            
000110BA                            GotThroughAct1:
000110BA 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
000110BE 6600                       		bne.s	locret_ECEE1
000110C0 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
000110C6 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
000110CA 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
000110CE 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000110D2 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
000110D8 7000                       		moveq	#plcid_TitleCard,d0
000110DA 4EB9 0000 1720             		jsr	(NewPLC).l	; load title card patterns
000110E0 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
000110E6 7000                       		moveq	#0,d0
000110E8 1038 FE23                  		move.b	(v_timemin).w,d0
000110EC C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
000110F0 7200                       		moveq	#0,d1
000110F2 1238 FE24                  		move.b	(v_timesec).w,d1
000110F6 D041                       		add.w	d1,d0		; add up your time
000110F8 80FC 000F                  		divu.w	#15,d0		; divide by 15
000110FC 7214                       		moveq	#$14,d1
000110FE B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011100 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00011104 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011106                            
00011106                            	hastimebonus2:
00011106 D040                       		add.w	d0,d0
00011108 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
0001110E 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011112 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011116 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011124 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
0001112A                            
0001112A                            locret_ECEE1:
0001112A 4E75                       		rts	
0001112C                            
0001112C                            ; End of function GotThroughAct		
0001112C                            
0001112C 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00011140 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011140 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011156                            		include	"_anim\Signpost.asm"
00011156                            ; ---------------------------------------------------------------------------
00011156                            ; Animation script - signpost
00011156                            ; ---------------------------------------------------------------------------
00011156 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00011158 0000                       		dc.w @spin1-Ani_Sign
0001115A 0000                       		dc.w @spin2-Ani_Sign
0001115C 0000                       		dc.w @sonic-Ani_Sign
0001115E 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00011162 00                         		even
00011162 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00011168 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
0001116E 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00011172 00                         		even
00011172 00                         		even
00011172                            Map_Sign:	include	"_maps\Signpost.asm"
00011172                            ; --------------------------------------------------------------------------------
00011172                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011172                            ; --------------------------------------------------------------------------------
00011172                            
00011172                            SME_KvSue:	
00011172 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00011176 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
0001117A 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
0001117C 04                         SME_KvSue_A:	dc.b 4	
0001117D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00011182 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00011187 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001118C 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011191 03                         SME_KvSue_1F:	dc.b 3	
00011192 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00011197 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001119C 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111A1 03                         SME_KvSue_2F:	dc.b 3	
000111A2 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
000111A7 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
000111AC 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111B1 03                         SME_KvSue_3F:	dc.b 3	
000111B2 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
000111B7 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
000111BC 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111C1 04                         SME_KvSue_4F:	dc.b 4	
000111C2 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
000111C7 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
000111CC 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000111D1 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111D6                            		even
000111D6                            		even
000111D6                            
000111D6                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
000111D6                            ; ---------------------------------------------------------------------------
000111D6                            ; Object 4C - lava geyser / lavafall producer (MZ)
000111D6                            ; ---------------------------------------------------------------------------
000111D6                            
000111D6                            GeyserMaker:
000111D6 7000                       		moveq	#0,d0
000111D8 1028 0024                  		move.b	obRoutine(a0),d0
000111DC 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
000111E0 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
000111E4 6000 0000                  		bra.w	Geyser_ChkDel
000111E8                            ; ===========================================================================
000111E8 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
000111EA 0000                       		dc.w GMake_Wait-GMake_Index
000111EC 0000                       		dc.w GMake_ChkType-GMake_Index
000111EE 0000                       		dc.w GMake_MakeLava-GMake_Index
000111F0 0000                       		dc.w GMake_Display-GMake_Index
000111F2 0000                       		dc.w GMake_Delete-GMake_Index
000111F4                            
000111F4 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
000111F4 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
000111F4 =0000003C                  gmake_parent:	equ $3C		; address of parent object
000111F4                            ; ===========================================================================
000111F4                            
000111F4                            GMake_Main:	; Routine 0
000111F4 5428 0024                  		addq.b	#2,obRoutine(a0)
000111F8 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00011200 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00011206 117C 0004 0001             		move.b	#4,obRender(a0)
0001120C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00011212 117C 0038 0014             		move.b	#$38,obActWid(a0)
00011218 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
0001121E                            
0001121E                            GMake_Wait:	; Routine 2
0001121E 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00011222 6A00                       		bpl.s	@cancel		; if time remains, branch
00011224                            
00011224 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
0001122A 3038 D00C                  		move.w	(v_player+obY).w,d0
0001122E 3228 000C                  		move.w	obY(a0),d1
00011232 B041                       		cmp.w	d1,d0
00011234 6400                       		bcc.s	@cancel
00011236 0441 0170                  		subi.w	#$170,d1
0001123A B041                       		cmp.w	d1,d0
0001123C 6500                       		bcs.s	@cancel
0001123E 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00011242                            
00011242                            	@cancel:
00011242 4E75                       		rts	
00011244                            ; ===========================================================================
00011244                            
00011244                            GMake_MakeLava:	; Routine 6
00011244 5428 0024                  		addq.b	#2,obRoutine(a0)
00011248 6100 EBE2                  		bsr.w	FindNextFreeObj
0001124C 6600                       		bne.s	@fail
0001124E 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00011252 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011258 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001125E 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011264 2348 003C                  		move.l	a0,gmake_parent(a1)
00011268                            
00011268                            	@fail:
00011268 117C 0001 001C             		move.b	#1,obAnim(a0)
0001126E 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00011272 6700                       		beq.s	@isgeyser	; if yes, branch
00011274 117C 0004 001C             		move.b	#4,obAnim(a0)
0001127A 6000                       		bra.s	GMake_Display
0001127C                            ; ===========================================================================
0001127C                            
0001127C                            	@isgeyser:
0001127C 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00011280 08E9 0001 0022             		bset	#1,obStatus(a1)
00011286 337C FA80 0012             		move.w	#-$580,obVelY(a1)
0001128C 6000                       		bra.s	GMake_Display
0001128E                            ; ===========================================================================
0001128E                            
0001128E                            GMake_ChkType:	; Routine 4
0001128E 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00011292 6700                       		beq.s	GMake_Display	; if yes, branch
00011294 5428 0024                  		addq.b	#2,obRoutine(a0)
00011298 4E75                       		rts	
0001129A                            ; ===========================================================================
0001129A                            
0001129A                            GMake_Display:	; Routine 8
0001129A 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000112A0 6100 B794                  		bsr.w	AnimateSprite
000112A4 6100 E6E4                  		bsr.w	DisplaySprite
000112A8 4E75                       		rts	
000112AA                            ; ===========================================================================
000112AA                            
000112AA                            GMake_Delete:	; Routine $A
000112AA 117C 0000 001C             		move.b	#0,obAnim(a0)
000112B0 117C 0002 0024             		move.b	#2,obRoutine(a0)
000112B6 4A28 0028                  		tst.b	obSubtype(a0)
000112BA 6700 E70E                  		beq.w	DeleteObject
000112BE 4E75                       		rts	
000112C0                            
000112C0                            
000112C0                            ; ---------------------------------------------------------------------------
000112C0                            ; Object 4D - lava geyser / lavafall (MZ)
000112C0                            ; ---------------------------------------------------------------------------
000112C0                            
000112C0                            LavaGeyser:
000112C0 7000                       		moveq	#0,d0
000112C2 1028 0024                  		move.b	obRoutine(a0),d0
000112C6 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
000112CA 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
000112CE 6000 E6BA                  		bra.w	DisplaySprite
000112D2                            ; ===========================================================================
000112D2 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
000112D4 0000                       		dc.w Geyser_Action-Geyser_Index
000112D6 0000                       		dc.w loc_EFFC-Geyser_Index
000112D8 0000                       		dc.w Geyser_Delete-Geyser_Index
000112DA                            
000112DA FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
000112DE                            ; ===========================================================================
000112DE                            
000112DE                            Geyser_Main:	; Routine 0
000112DE 5428 0024                  		addq.b	#2,obRoutine(a0)
000112E2 3168 000C 0030             		move.w	obY(a0),$30(a0)
000112E8 4A28 0028                  		tst.b	obSubtype(a0)
000112EC 6700                       		beq.s	@isgeyser
000112EE 0468 0250 000C             		subi.w	#$250,obY(a0)
000112F4                            
000112F4                            	@isgeyser:
000112F4 7000                       		moveq	#0,d0
000112F6 1028 0028                  		move.b	obSubtype(a0),d0
000112FA D040                       		add.w	d0,d0
000112FC 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00011302 2248                       		movea.l	a0,a1
00011304 7201                       		moveq	#1,d1
00011306 6100                       		bsr.s	@makelava
00011308 6000                       		bra.s	@activate
0001130A                            ; ===========================================================================
0001130A                            
0001130A                            	@loop:
0001130A 6100 EB20                  		bsr.w	FindNextFreeObj
0001130E 6600                       		bne.s	@fail
00011310                            
00011310                            @makelava:
00011310 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00011314 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
0001131C 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00011322 137C 0004 0001             		move.b	#4,obRender(a1)
00011328 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001132E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011334 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001133A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011340 337C 0080 0018             		move.w	#$80,obPriority(a1)
00011346 137C 0005 001C             		move.b	#5,obAnim(a1)
0001134C 4A28 0028                  		tst.b	obSubtype(a0)
00011350 6700                       		beq.s	@fail
00011352 137C 0002 001C             		move.b	#2,obAnim(a1)
00011358                            
00011358                            	@fail:
00011358 51C9 FFB0                  		dbf	d1,@loop
0001135C 4E75                       		rts	
0001135E                            ; ===========================================================================
0001135E                            
0001135E                            @activate:
0001135E 0669 0060 000C             		addi.w	#$60,obY(a1)
00011364 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001136A 0669 0060 0030             		addi.w	#$60,$30(a1)
00011370 137C 0093 0020             		move.b	#$93,obColType(a1)
00011376 137C 0080 0016             		move.b	#$80,obHeight(a1)
0001137C 08E9 0004 0001             		bset	#4,obRender(a1)
00011382 5829 0024                  		addq.b	#4,obRoutine(a1)
00011386 2348 003C                  		move.l	a0,$3C(a1)
0001138A 4A28 0028                  		tst.b	obSubtype(a0)
0001138E 6700                       		beq.s	@sound
00011390 7200                       		moveq	#0,d1
00011392 6100 FF76                  		bsr.w	@loop
00011396 5429 0024                  		addq.b	#2,obRoutine(a1)
0001139A 08E9 0004 0002             		bset	#4,obGfx(a1)
000113A0 0669 0100 000C             		addi.w	#$100,obY(a1)
000113A6 337C 0000 0018             		move.w	#0,obPriority(a1)
000113AC 3368 0030 0030             		move.w	$30(a0),$30(a1)
000113B2 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
000113B8 117C 0000 0028             		move.b	#0,obSubtype(a0)
000113BE                            
000113BE                            	@sound:
000113C8                            
000113C8                            Geyser_Action:	; Routine 2
000113C8 7000                       		moveq	#0,d0
000113CA 1028 0028                  		move.b	obSubtype(a0),d0
000113CE D040                       		add.w	d0,d0
000113D0 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
000113D4 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
000113D8 6100 E59C                  		bsr.w	SpeedToPos
000113DC 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000113E2 6100 B652                  		bsr.w	AnimateSprite
000113E6                            
000113E6                            Geyser_ChkDel:
00011404 4E75                       		rts	
00011406                            ; ===========================================================================
00011406 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
00011408 0000                       		dc.w Geyser_Type01-Geyser_Types
0001140A                            ; ===========================================================================
0001140A                            
0001140A                            Geyser_Type00:
0001140A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011410 3028 0030                  		move.w	$30(a0),d0
00011414 B068 000C                  		cmp.w	obY(a0),d0
00011418 6400                       		bcc.s	locret_EFDA
0001141A 5828 0024                  		addq.b	#4,obRoutine(a0)
0001141E 2268 003C                  		movea.l	$3C(a0),a1
00011422 137C 0003 001C             		move.b	#3,obAnim(a1)
00011428                            
00011428                            locret_EFDA:
00011428 4E75                       		rts	
0001142A                            ; ===========================================================================
0001142A                            
0001142A                            Geyser_Type01:
0001142A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011430 3028 0030                  		move.w	$30(a0),d0
00011434 B068 000C                  		cmp.w	obY(a0),d0
00011438 6400                       		bcc.s	locret_EFFA
0001143A 5828 0024                  		addq.b	#4,obRoutine(a0)
0001143E 2268 003C                  		movea.l	$3C(a0),a1
00011442 137C 0001 001C             		move.b	#1,obAnim(a1)
00011448                            
00011448                            locret_EFFA:
00011448 4E75                       		rts	
0001144A                            ; ===========================================================================
0001144A                            
0001144A                            loc_EFFC:	; Routine 4
0001144A 2268 003C                  		movea.l	$3C(a0),a1
0001144E 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00011454 6700 0000                  		beq.w	Geyser_Delete
00011458 3029 000C                  		move.w	obY(a1),d0
0001145C 0640 0060                  		addi.w	#$60,d0
00011460 3140 000C                  		move.w	d0,obY(a0)
00011464 9068 0030                  		sub.w	$30(a0),d0
00011468 4440                       		neg.w	d0
0001146A 7208                       		moveq	#8,d1
0001146C 0C40 0040                  		cmpi.w	#$40,d0
00011470 6C00                       		bge.s	loc_F026
00011472 720B                       		moveq	#$B,d1
00011474                            
00011474                            loc_F026:
00011474 0C40 0080                  		cmpi.w	#$80,d0
00011478 6F00                       		ble.s	loc_F02E
0001147A 720E                       		moveq	#$E,d1
0001147C                            
0001147C                            loc_F02E:
0001147C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00011480 6A00                       		bpl.s	loc_F04C
00011482 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00011488 5228 001B                  		addq.b	#1,obAniFrame(a0)
0001148C 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
00011492 6500                       		bcs.s	loc_F04C
00011494 117C 0000 001B             		move.b	#0,obAniFrame(a0)
0001149A                            
0001149A                            loc_F04C:
0001149A 1028 001B                  		move.b	obAniFrame(a0),d0
0001149E D001                       		add.b	d1,d0
000114A0 1140 001A                  		move.b	d0,obFrame(a0)
000114A4 6000 FF40                  		bra.w	Geyser_ChkDel
000114A8                            ; ===========================================================================
000114A8                            
000114A8                            Geyser_Delete:	; Routine 6
000114A8 6000 E520                  		bra.w	DeleteObject
000114A8 6000 E520                  		bra.w	DeleteObject
000114AC                            		include	"_incObj\54 Lava Tag.asm"
000114AC                            ; ---------------------------------------------------------------------------
000114AC                            ; Object 54 - invisible	lava tag (MZ)
000114AC                            ; ---------------------------------------------------------------------------
000114AC                            
000114AC                            LavaTag:
000114AC 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
000114B2 6E00 0000                  		bgt	WaterTag	;TIS
000114B6 7000                       		moveq	#0,d0
000114B8 1028 0024                  		move.b	obRoutine(a0),d0
000114BC 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
000114C0 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
000114C4                            ; ===========================================================================
000114C4 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
000114C6 0000                       		dc.w LTag_ChkDel-LTag_Index
000114C8                            
000114C8 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
000114CC 00                         		even
000114CC                            ; ===========================================================================
000114CC                            
000114CC                            LTag_Main:	; Routine 0
000114CC 5428 0024                  		addq.b	#2,obRoutine(a0)
000114D0 7000                       		moveq	#0,d0
000114D2 1028 0028                  		move.b	obSubtype(a0),d0
000114D6 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000114DC 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000114E4 117C 0084 0001             		move.b	#$84,obRender(a0)
000114EA                            
000114EA                            LTag_ChkDel:	; Routine 2
000114EA 3028 0008                  		move.w	obX(a0),d0
000114EE 0240 FF80                  		andi.w	#$FF80,d0
000114F2 3238 F700                  		move.w	(v_screenposx).w,d1
000114F6 0441 0080                  		subi.w	#$80,d1
000114FA 0241 FF80                  		andi.w	#$FF80,d1
000114FE 9041                       		sub.w	d1,d0
00011500 6B00 E4C8                  		bmi.w	DeleteObject
00011504 0C40 0280                  		cmpi.w	#$280,d0
00011508 6200 E4C0                  		bhi.w	DeleteObject
0001150C 4E75                       		rts
0001150E                            
0001150E                            
0001150E                            ; ---------------------------------------------------------------------------
0001150E                            ; Object 54a - invisible	water tag (MZ) - TIS
0001150E                            ; ---------------------------------------------------------------------------
0001150E                            
0001150E                            WaterTag:	
0001150E 7000                       		moveq	#0,d0
00011510 1028 0024                  		move.b	obRoutine(a0),d0
00011514 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
00011518 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
0001151C                            ; ===========================================================================
0001151C 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
0001151E 0000                       		dc.w WTag_ChkDel-WTag_Index
00011520                            
00011520 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
00011524 00                         		even
00011524                            ; ===========================================================================
00011524                            
00011524                            
00011524                            WTag_Main:	; Routine 0
00011524 5428 0024                  		addq.b	#2,obRoutine(a0)
00011528 7000                       		moveq	#0,d0
0001152A                            		;move.b	obSubtype(a0),d0
0001152A                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
0001152A 0400 00F0                  		sub.b	#$F0,d0
0001152E 1178 0096 0020             		move.b	$96,obColType(a0)							
00011534                            		;move.l	#Map_LTag,obMap(a0)
00011534                            		;move.b	#$84,obRender(a0)
00011534                            
00011534                            WTag_ChkDel:	; Routine 2
00011534 3028 0008                  		move.w	obX(a0),d0
00011538 0240 FF80                  		andi.w	#$FF80,d0
0001153C 3238 F700                  		move.w	(v_screenposx).w,d1
00011540 0441 0080                  		subi.w	#$80,d1
00011544 0241 FF80                  		andi.w	#$FF80,d1
00011548 9041                       		sub.w	d1,d0
0001154A 6B00 E47E                  		bmi.w	DeleteObject
0001154E 0C40 0280                  		cmpi.w	#$280,d0
00011552 6200 E476                  		bhi.w	DeleteObject
00011556 4E75                       		rts
00011558                            
00011558                            
00011558                            Map_LTag:	include	"_maps\Lava Tag.asm"
00011558                            ; ---------------------------------------------------------------------------
00011558                            ; Sprite mappings - invisible lava tag (MZ)
00011558                            ; ---------------------------------------------------------------------------
00011558                            Map_LTag_internal:
00011558 0000                       		dc.w @0-Map_LTag_internal
0001155A 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
0001155C 00                         		even
0001155C 00                         		even
0001155C                            		include	"_anim\Lava Geyser.asm"
0001155C                            ; ---------------------------------------------------------------------------
0001155C                            ; Animation script - geyser of lava (MZ)
0001155C                            ; ---------------------------------------------------------------------------
0001155C 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
0001155E 0000                       		dc.w @bubble2-Ani_Geyser
00011560 0000                       		dc.w @end-Ani_Geyser
00011562 0000                       		dc.w @bubble3-Ani_Geyser
00011564 0000                       		dc.w @blank-Ani_Geyser
00011566 0000                       		dc.w @bubble4-Ani_Geyser
00011568 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
00011572 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
00011576 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
0001157A 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
00011582 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011586 00                         		even
00011586 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
0001158A                            		even
0001158A                            		even
0001158A                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
0001158A                            ; ---------------------------------------------------------------------------
0001158A                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0001158A                            ; ---------------------------------------------------------------------------
0001158A                            Map_Geyser_internal:
0001158A 0000                       		dc.w @bubble1-Map_Geyser_internal
0001158C 0000                       		dc.w @bubble2-Map_Geyser_internal
0001158E 0000                       		dc.w @bubble3-Map_Geyser_internal
00011590 0000                       		dc.w @bubble4-Map_Geyser_internal
00011592 0000                       		dc.w @bubble5-Map_Geyser_internal
00011594 0000                       		dc.w @bubble6-Map_Geyser_internal
00011596 0000                       		dc.w @end1-Map_Geyser_internal
00011598 0000                       		dc.w @end2-Map_Geyser_internal
0001159A 0000                       		dc.w @medcolumn1-Map_Geyser_internal
0001159C 0000                       		dc.w @medcolumn2-Map_Geyser_internal
0001159E 0000                       		dc.w @medcolumn3-Map_Geyser_internal
000115A0 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
000115A2 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
000115A4 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
000115A6 0000                       		dc.w @longcolumn1-Map_Geyser_internal
000115A8 0000                       		dc.w @longcolumn2-Map_Geyser_internal
000115AA 0000                       		dc.w @longcolumn3-Map_Geyser_internal
000115AC 0000                       		dc.w @bubble7-Map_Geyser_internal
000115AE 0000                       		dc.w @bubble8-Map_Geyser_internal
000115B0 0000                       		dc.w @blank-Map_Geyser_internal
000115B2 02                         @bubble1:	dc.b 2
000115B3 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000115B8 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
000115BD 02                         @bubble2:	dc.b 2
000115BE EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000115C3 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000115C8 04                         @bubble3:	dc.b 4
000115C9 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000115CE F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000115D3 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000115D8 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000115DD 04                         @bubble4:	dc.b 4
000115DE EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000115E3 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000115E8 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000115ED EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000115F2 06                         @bubble5:	dc.b 6
000115F3 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000115F8 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000115FD F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011602 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00011607 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0001160C E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00011611 06                         @bubble6:	dc.b 6
00011612 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011617 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001161C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011621 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011626 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0001162B E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00011630 02                         @end1:		dc.b 2
00011631 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011636 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0001163B 02                         @end2:		dc.b 2
0001163C E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00011641 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00011646 0A                         @medcolumn1:	dc.b $A
00011647 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001164C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011651 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011656 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001165B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011660 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011665 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001166A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001166F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011674 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011679 0A                         @medcolumn2:	dc.b $A
0001167A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001167F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011684 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011689 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001168E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011693 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011698 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001169D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000116A2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000116A7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000116AC 0A                         @medcolumn3:	dc.b $A
000116AD 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000116B2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000116B7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000116BC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000116C1 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000116C6 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000116CB F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000116D0 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000116D5 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000116DA 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000116DF 06                         @shortcolumn1:	dc.b 6
000116E0 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000116E5 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000116EA B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000116EF B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000116F4 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000116F9 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000116FE 06                         @shortcolumn2:	dc.b 6
000116FF 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011704 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011709 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001170E B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011713 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011718 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001171D 06                         @shortcolumn3:	dc.b 6
0001171E 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011723 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011728 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001172D B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011732 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011737 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001173C 10                         @longcolumn1:	dc.b $10
0001173D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011742 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011747 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001174C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011751 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011756 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001175B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011760 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011765 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0001176A 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001176F 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00011774 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00011779 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0001177E 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00011783 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00011788 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0001178D 10                         @longcolumn2:	dc.b $10
0001178E 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011793 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011798 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001179D B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000117A2 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000117A7 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000117AC F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000117B1 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000117B6 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000117BB 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000117C0 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000117C5 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000117CA 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000117CF 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000117D4 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000117D9 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000117DE 10                         @longcolumn3:	dc.b $10
000117DF 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000117E4 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000117E9 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000117EE B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000117F3 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000117F8 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000117FD F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011802 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011807 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001180C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00011811 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00011816 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0001181B 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00011820 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011825 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001182A 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001182F 06                         @bubble7:	dc.b 6
00011830 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011835 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0001183A E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001183F E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011844 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00011849 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001184E 06                         @bubble8:	dc.b 6
0001184F E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011854 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00011859 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001185E E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00011863 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00011868 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001186D 00                         @blank:	dc.b 0
0001186E                            		even
0001186E                            		even
0001186E                            
0001186E                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
0001186E                            ; ---------------------------------------------------------------------------
0001186E                            ; Object 40 - Moto Bug enemy (GHZ)
0001186E                            ; ---------------------------------------------------------------------------
0001186E                            
0001186E                            MotoBug:
0001186E 7000                       		moveq	#0,d0
00011870 1028 0024                  		move.b	obRoutine(a0),d0
00011874 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
00011878 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
0001187C                            ; ===========================================================================
0001187C 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
0001187E 0000                       		dc.w Moto_Action-Moto_Index
00011880 0000                       		dc.w Moto_Animate-Moto_Index
00011882 0000                       		dc.w Moto_Delete-Moto_Index
00011884                            ; ===========================================================================
00011884                            
00011884                            Moto_Main:	; Routine 0
00011884 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
0001188C 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00011892 117C 0004 0001             		move.b	#4,obRender(a0)
00011898 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001189E 117C 0014 0014             		move.b	#$14,obActWid(a0)
000118A4 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
000118A8 6600                       		bne.s	@smoke		; if yes, branch
000118AA 117C 000E 0016             		move.b	#$E,obHeight(a0)
000118B0 117C 0008 0017             		move.b	#8,obWidth(a0)
000118B6 117C 000C 0020             		move.b	#$C,obColType(a0)
000118BC 6100 E080                  		bsr.w	ObjectFall
000118C0 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000118C6 4A41                       		tst.w	d1
000118C8 6A00                       		bpl.s	@notonfloor
000118CA D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000118CE 317C 0000 0012             		move.w	#0,obVelY(a0)
000118D4 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
000118D8 0868 0000 0022             		bchg	#0,obStatus(a0)
000118DE                            
000118DE                            	@notonfloor:
000118DE 4E75                       		rts	
000118E0                            ; ===========================================================================
000118E0                            
000118E0                            @smoke:
000118E0 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000118E4 6000 0000                  		bra.w	Moto_Animate
000118E8                            ; ===========================================================================
000118E8                            
000118E8                            Moto_Action:	; Routine 2
000118E8 7000                       		moveq	#0,d0
000118EA 1028 0025                  		move.b	ob2ndRout(a0),d0
000118EE 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000118F2 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000118F6 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000118FC 6100 B138                  		bsr.w	AnimateSprite
00011900                            
00011900                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
00011900                            ; ---------------------------------------------------------------------------
00011900                            ; Subroutine to remember whether an object is destroyed/collected
00011900                            ; ---------------------------------------------------------------------------
00011900                            
00011900                            RememberState:
0001191E 6000 E06A                  		bra.w	DisplaySprite
00011922                            
00011922                            	@offscreen:
00011922 45F8 FC00                  		lea	(v_objstate).w,a2
00011926 7000                       		moveq	#0,d0
00011928 1028 0023                  		move.b	obRespawnNo(a0),d0
0001192C 6700                       		beq.s	@delete
0001192E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011934                            
00011934                            	@delete:
00011934 6000 E094                  		bra.w	DeleteObject
00011934 6000 E094                  		bra.w	DeleteObject
00011938                            
00011938                            ; ===========================================================================
00011938 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
0001193A 0000                       		dc.w @findfloor-Moto_ActIndex
0001193C                            
0001193C =00000030                  @time:		equ $30
0001193C =00000033                  @smokedelay:	equ $33
0001193C                            ; ===========================================================================
0001193C                            
0001193C                            @move:
0001193C 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
00011940 6A00                       		bpl.s	@wait		; if time remains, branch
00011942 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011946 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
0001194C 117C 0001 001C             		move.b	#1,obAnim(a0)
00011952 0868 0000 0022             		bchg	#0,obStatus(a0)
00011958 6600                       		bne.s	@wait
0001195A 4468 0010                  		neg.w	obVelX(a0)	; change direction
0001195E                            
0001195E                            	@wait:
0001195E 4E75                       		rts	
00011960                            ; ===========================================================================
00011960                            
00011960                            @findfloor:
00011960 6100 E014                  		bsr.w	SpeedToPos
00011964 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001196A 0C41 FFF8                  		cmpi.w	#-8,d1
0001196E 6D00                       		blt.s	@pause
00011970 0C41 000C                  		cmpi.w	#$C,d1
00011974 6C00                       		bge.s	@pause
00011976 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001197A 5328 0033                  		subq.b	#1,@smokedelay(a0)
0001197E 6A00                       		bpl.s	@nosmoke
00011980 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011986 6100 E48E                  		bsr.w	FindFreeObj
0001198A 6600                       		bne.s	@nosmoke
0001198C 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
00011990 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011996 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001199C 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000119A2 137C 0002 001C             		move.b	#2,obAnim(a1)
000119A8                            
000119A8                            	@nosmoke:
000119A8 4E75                       		rts	
000119AA                            
000119AA                            @pause:
000119AA 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000119AE 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
000119B4 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
000119BA 117C 0000 001C             		move.b	#0,obAnim(a0)
000119C0 4E75                       		rts	
000119C2                            ; ===========================================================================
000119C2                            
000119C2                            Moto_Animate:	; Routine 4
000119C2 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000119C8 6100 B06C                  		bsr.w	AnimateSprite
000119CC 6000 DFBC                  		bra.w	DisplaySprite
000119D0                            ; ===========================================================================
000119D0                            
000119D0                            Moto_Delete:	; Routine 6
000119D0 6000 DFF8                  		bra.w	DeleteObject
000119D0 6000 DFF8                  		bra.w	DeleteObject
000119D4                            		include	"_anim\Moto Bug.asm"
000119D4                            ; ---------------------------------------------------------------------------
000119D4                            ; Animation script - Motobug enemy
000119D4                            ; ---------------------------------------------------------------------------
000119D4 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
000119D6 0000                       		dc.w @walk-Ani_Moto
000119D8 0000                       		dc.w @smoke-Ani_Moto
000119DA                            
000119DA 0F02 FF                    @stand:		dc.b $F, 2, afEnd
000119DE 00                         		even
000119DE 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000119E4 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000119F2 00                         		even
000119F2 00                         		even
000119F2                            Map_Moto:	include	"_maps\Moto Bug.asm"
000119F2                            ; --------------------------------------------------------------------------------
000119F2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000119F2                            ; --------------------------------------------------------------------------------
000119F2                            
000119F2                            SME_TTY9T:	
000119F2 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
000119F6 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
000119FA 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
000119FE 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
00011A00 04                         SME_TTY9T_E:	dc.b 4	
00011A01 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011A06 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
00011A0B F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011A10 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011A15 04                         SME_TTY9T_23:	dc.b 4	
00011A16 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
00011A1B 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011A20 F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011A25 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
00011A2A 05                         SME_TTY9T_38:	dc.b 5	
00011A2B F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011A30 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011A35 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011A3A 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011A3F 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011A44 01                         SME_TTY9T_52:	dc.b 1	
00011A45 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011A4A 01                         SME_TTY9T_58:	dc.b 1	
00011A4B FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011A50 01                         SME_TTY9T_5E:	dc.b 1	
00011A51 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011A56 00                         SME_TTY9T_64:	dc.b 0	
00011A58 00                         		even
00011A58 00                         		even
00011A58                            		include	"_incObj\4F.asm"
00011A58                            ; ---------------------------------------------------------------------------
00011A58                            ; Object 4F - Splats
00011A58                            ; ---------------------------------------------------------------------------
00011A58                            
00011A58                            Obj4F:
00011A58 7000                                       moveq   #0,d0
00011A5A 1028 0024                                  move.b  $24(a0),d0
00011A5E 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
00011A62 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011A66                            ; ---------------------------------------------------------------------------
00011A66 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
00011A68 0000                                       dc.w loc_D246-ObjSplats_Index
00011A6A 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
00011A6C 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011A6E                            ; ---------------------------------------------------------------------------
00011A6E                            
00011A6E                            ObjSplats_Init:
00011A6E 5428 0024                                  addq.b  #2,$24(a0)
00011A72 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
00011A7A 317C 24E4 0002                             move.w  #$24E4,2(a0)
00011A80 117C 0004 0001                             move.b  #4,1(a0)
00011A86 117C 0004 0014                             move.b  #4,obActWid(a0)
00011A8C 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011A92 117C 0014 0016                             move.b  #$14,$16(a0)
00011A98 117C 0002 0020                             move.b  #2,$20(a0)
00011A9E 4A28 0028                                  tst.b   $28(a0)
00011AA2 6700                                       beq.s   loc_D246
00011AA4 343C 0300                                  move.w  #$300,d2
00011AA8 6000                                       bra.s   ObjSplats_FaceRight
00011AAA                            ; ---------------------------------------------------------------------------
00011AAA                            
00011AAA                            loc_D246:
00011AAA 343C 00E0                                  move.w  #$E0,d2
00011AAE                            
00011AAE                            ObjSplats_FaceRight:
00011AAE 323C 0100                                  move.w  #$100,d1
00011AB2 08E8 0000 0001                             bset    #0,1(a0)
00011AB8 3038 D008                                  move.w  ($FFFFD008).w,d0
00011ABC 9068 0008                                  sub.w   8(a0),d0
00011AC0 6400                                       bcc.s   ObjSplats_Move
00011AC2 4440                                       neg.w   d0
00011AC4 4441                                       neg.w   d1
00011AC6 08A8 0000 0001                             bclr    #0,1(a0)
00011ACC                            
00011ACC                            ObjSplats_Move:
00011ACC B042                                       cmp.w   d2,d0
00011ACE 6400                                       bcc.s   ObjSplats_Bounce
00011AD0 3141 0010                                  move.w  d1,$10(a0)
00011AD4 5428 0024                                  addq.b  #2,$24(a0)
00011AD8                            
00011AD8                            ObjSplats_Bounce:
00011AD8 6100 DE64                                  bsr.w   ObjectFall
00011ADC 117C 0001 001A                             move.b  #1,$1A(a0)
00011AE2 4A68 0012                                  tst.w   $12(a0)
00011AE6 6B00                                       bmi.s   ObjSplats_Turn
00011AE8 117C 0000 001A                             move.b  #0,$1A(a0)
00011AEE 6100 0000                                  bsr.w   ObjFloorDist
00011AF2 4A41                                       tst.w   d1
00011AF4 6A00                                       bpl.s   ObjSplats_Turn
00011AF6 3011                                       move.w  (a1),d0
00011AF8 0240 03FF                                  andi.w  #$3FF,d0
00011AFC 0C40 02D2                                  cmpi.w  #$2D2,d0
00011B00 6500                                       bcs.s   ObjSplats_Fall
00011B02 5428 0024                                  addq.b  #2,$24(a0)
00011B06 6000                                       bra.s   ObjSplats_Turn
00011B08                            ; ---------------------------------------------------------------------------
00011B08                            
00011B08                            ObjSplats_Fall:
00011B08 D368 000C                                  add.w   d1,$C(a0)
00011B0C 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011B12                            
00011B12                            ObjSplats_Turn:
00011B12 6100 0000                                  bsr.w   Yad_ChkWall
00011B16 6700                                       beq.s   loc_D2C4
00011B18 4468 0010                                  neg.w   $10(a0)
00011B1C 0868 0000 0001                             bchg    #0,1(a0)
00011B22 0868 0000 0022                             bchg    #0,$22(a0)
00011B28                            
00011B28                            loc_D2C4:
00011B28 6000 FDD6                                  bra.w   RememberState
00011B2C                            ; ---------------------------------------------------------------------------
00011B2C                            
00011B2C                            loc_D2C8:
00011B2C 6100 DE10                                  bsr.w   ObjectFall
00011B30 6100 DE58                                  bsr.w   DisplaySprite
00011B34 4A28 0001                                  tst.b   1(a0)
00011B38 6A00 DE90                                  bpl.w   DeleteObject
00011B3C 4E75                                       rts
00011B3C 4E75                                       rts
00011B3E                            Map_Splats:	include	"_maps\Splats.asm"
00011B3E 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011B40 0000                                       dc.w unk_D31B-Map_Splats_internal
00011B42 02                         unk_D310:       dc.b   2
00011B43 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011B4D 02                         unk_D31B:       dc.b   2
00011B4E EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B4E EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B58                            
00011B58                            		include	"_incObj\50 Yadrin.asm"
00011B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011B58                            
00011B58                            
00011B58                            Yad_ChkWall:
00011B58 3038 FE04                  		move.w	(v_framecount).w,d0
00011B5C D047                       		add.w	d7,d0
00011B5E 0240 0003                  		andi.w	#3,d0
00011B62 6600                       		bne.s	loc_F836
00011B64 7600                       		moveq	#0,d3
00011B66 1628 0014                  		move.b	obActWid(a0),d3
00011B6A 4A68 0010                  		tst.w	obVelX(a0)
00011B6E 6B00                       		bmi.s	loc_F82C
00011B70 6100 0000                  		bsr.w	ObjHitWallRight
00011B74 4A41                       		tst.w	d1
00011B76 6A00                       		bpl.s	loc_F836
00011B78                            
00011B78                            loc_F828:
00011B78 7001                       		moveq	#1,d0
00011B7A 4E75                       		rts	
00011B7C                            ; ===========================================================================
00011B7C                            
00011B7C                            loc_F82C:
00011B7C 4643                       		not.w	d3
00011B7E 6100 0000                  		bsr.w	ObjHitWallLeft
00011B82 4A41                       		tst.w	d1
00011B84 6BF2                       		bmi.s	loc_F828
00011B86                            
00011B86                            loc_F836:
00011B86 7000                       		moveq	#0,d0
00011B88 4E75                       		rts	
00011B8A                            ; End of function Yad_ChkWall
00011B8A                            
00011B8A                            ; ===========================================================================
00011B8A                            ; ---------------------------------------------------------------------------
00011B8A                            ; Object 50 - Yadrin enemy (SYZ)
00011B8A                            ; ---------------------------------------------------------------------------
00011B8A                            
00011B8A                            Yadrin:
00011B8A 7000                       		moveq	#0,d0
00011B8C 1028 0024                  		move.b	obRoutine(a0),d0
00011B90 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011B94 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011B98                            ; ===========================================================================
00011B98 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011B9A 0000                       		dc.w Yad_Action-Yad_Index
00011B9C                            
00011B9C =00000030                  yad_timedelay:	equ $30
00011B9C                            ; ===========================================================================
00011B9C                            
00011B9C                            Yad_Main:	; Routine 0
00011B9C 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011BA4 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011BAA 117C 0004 0001             		move.b	#4,obRender(a0)
00011BB0 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011BB6 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011BBC 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011BC2 117C 0008 0017             		move.b	#8,obWidth(a0)
00011BC8 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011BCE 6100 DD6E                  		bsr.w	ObjectFall
00011BD2 6100 0000                  		bsr.w	ObjFloorDist
00011BD6 4A41                       		tst.w	d1
00011BD8 6A00                       		bpl.s	locret_F89E
00011BDA D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011BDE 317C 0000 0012             		move.w	#0,obVelY(a0)
00011BE4 5428 0024                  		addq.b	#2,obRoutine(a0)
00011BE8 0868 0000 0022             		bchg	#0,obStatus(a0)
00011BEE                            
00011BEE                            	locret_F89E:
00011BEE 4E75                       		rts	
00011BF0                            ; ===========================================================================
00011BF0                            
00011BF0                            Yad_Action:	; Routine 2
00011BF0 7000                       		moveq	#0,d0
00011BF2 1028 0025                  		move.b	ob2ndRout(a0),d0
00011BF6 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011BFA 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011BFE 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011C04 6100 AE30                  		bsr.w	AnimateSprite
00011C08 6000 FCF6                  		bra.w	RememberState
00011C0C                            ; ===========================================================================
00011C0C 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011C0E 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011C10                            ; ===========================================================================
00011C10                            
00011C10                            Yad_Move:
00011C10 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011C14 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011C16 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011C1A 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011C20 117C 0001 001C             		move.b	#1,obAnim(a0)
00011C26 0868 0000 0022             		bchg	#0,obStatus(a0)
00011C2C 6600                       		bne.s	locret_F8E2
00011C2E 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011C32                            
00011C32                            	locret_F8E2:
00011C32 4E75                       		rts	
00011C34                            ; ===========================================================================
00011C34                            
00011C34                            Yad_FixToFloor:
00011C34 6100 DD40                  		bsr.w	SpeedToPos
00011C38 6100 0000                  		bsr.w	ObjFloorDist
00011C3C 0C41 FFF8                  		cmpi.w	#-8,d1
00011C40 6D00                       		blt.s	Yad_Pause
00011C42 0C41 000C                  		cmpi.w	#$C,d1
00011C46 6C00                       		bge.s	Yad_Pause
00011C48 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011C4C 6100 FF0A                  		bsr.w	Yad_ChkWall
00011C50 6600                       		bne.s	Yad_Pause
00011C52 4E75                       		rts	
00011C54                            ; ===========================================================================
00011C54                            
00011C54                            Yad_Pause:
00011C54 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011C58 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011C5E 317C 0000 0010             		move.w	#0,obVelX(a0)
00011C64 117C 0000 001C             		move.b	#0,obAnim(a0)
00011C6A 4E75                       		rts	
00011C6A 4E75                       		rts	
00011C6C                            		include	"_anim\Yadrin.asm"
00011C6C                            ; ---------------------------------------------------------------------------
00011C6C                            ; Animation script - Yadrin enemy
00011C6C                            ; ---------------------------------------------------------------------------
00011C6C 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011C6E 0000                       		dc.w @walk-Ani_Yad
00011C70                            
00011C70 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011C74 00                         		even
00011C74 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011C82                            		even
00011C82                            		even
00011C82                            Map_Yad:	include	"_maps\Yadrin.asm"
00011C82                            ; --------------------------------------------------------------------------------
00011C82                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011C82                            ; --------------------------------------------------------------------------------
00011C82                            
00011C82                            SME_4WhIu:	
00011C82 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011C86 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011C8A 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011C8E 09                         SME_4WhIu_C:	dc.b 9	
00011C8F F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011C94 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011C99 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C9E FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011CA3 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011CA8 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011CAD FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CB2 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011CB7 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011CBC 09                         SME_4WhIu_3A:	dc.b 9	
00011CBD F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011CC2 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CC7 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011CCC FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011CD1 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011CD6 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CDB F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011CE0 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011CE5 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011CEA 0C                         SME_4WhIu_68:	dc.b $C	
00011CEB EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011CF0 FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011CF5 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011CFA 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CFF FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011D04 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011D09 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011D0E FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011D13 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011D18 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011D1D 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011D22 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011D27 0C                         SME_4WhIu_A5:	dc.b $C	
00011D28 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011D2D FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011D32 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011D37 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011D3C 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011D41 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011D46 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011D4B EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011D50 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011D55 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011D5A 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011D5F 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011D64 05                         SME_4WhIu_E2:	dc.b 5	
00011D65 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D6A 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D6F EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D74 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D79 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011D7E 05                         SME_4WhIu_FC:	dc.b 5	
00011D7F F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D84 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D89 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D8E F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D93 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011D98                            		even
00011D98                            		even
00011D98                            
00011D98                            		include	"_incObj\sub SolidObject.asm"
00011D98                            ; ---------------------------------------------------------------------------
00011D98                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011D98                            ;
00011D98                            ; input:
00011D98                            ;	d1 = width
00011D98                            ;	d2 = height / 2 (when jumping)
00011D98                            ;	d3 = height / 2 (when walking)
00011D98                            ;	d4 = x-axis position
00011D98                            ; ---------------------------------------------------------------------------
00011D98                            
00011D98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011D98                            
00011D98                            
00011D98                            SolidObject:
00011D98 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011D9C 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011DA0 3401                       		move.w	d1,d2
00011DA2 D442                       		add.w	d2,d2
00011DA4 43F8 D000                  		lea	(v_player).w,a1
00011DA8 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011DAE 6600                       		bne.s	@leave		; if yes, branch
00011DB0 3029 0008                  		move.w	obX(a1),d0
00011DB4 9068 0008                  		sub.w	obX(a0),d0
00011DB8 D041                       		add.w	d1,d0
00011DBA 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011DBC B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011DBE 6500                       		bcs.s	@stand		; if not, branch
00011DC0                            
00011DC0                            	@leave:
00011DC0 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011DC6 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011DCC 4228 0025                  		clr.b	obSolid(a0)
00011DD0 7800                       		moveq	#0,d4
00011DD2 4E75                       		rts	
00011DD4                            
00011DD4                            	@stand:
00011DD4 3404                       		move.w	d4,d2
00011DD6 4EB9 0000 976A             		jsr	MvSonicOnPtfm
00011DDC 7800                       		moveq	#0,d4
00011DDE 4E75                       		rts	
00011DE0                            ; ===========================================================================
00011DE0                            
00011DE0                            SolidObject71:
00011DE0 4A28 0025                  		tst.b	obSolid(a0)
00011DE4 6700 0000                  		beq.w	loc_FAD0
00011DE8 3401                       		move.w	d1,d2
00011DEA D442                       		add.w	d2,d2
00011DEC 43F8 D000                  		lea	(v_player).w,a1
00011DF0 0829 0001 0022             		btst	#1,obStatus(a1)
00011DF6 6600                       		bne.s	@leave
00011DF8 3029 0008                  		move.w	obX(a1),d0
00011DFC 9068 0008                  		sub.w	obX(a0),d0
00011E00 D041                       		add.w	d1,d0
00011E02 6B00                       		bmi.s	@leave
00011E04 B042                       		cmp.w	d2,d0
00011E06 6500                       		bcs.s	@stand
00011E08                            
00011E08                            	@leave:
00011E08 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011E0E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011E14 4228 0025                  		clr.b	obSolid(a0)
00011E18 7800                       		moveq	#0,d4
00011E1A 4E75                       		rts	
00011E1C                            
00011E1C                            	@stand:
00011E1C 3404                       		move.w	d4,d2
00011E1E 4EB9 0000 976A             		jsr	MvSonicOnPtfm
00011E24 7800                       		moveq	#0,d4
00011E26 4E75                       		rts	
00011E28                            ; ===========================================================================
00011E28                            
00011E28                            SolidObject2F:
00011E28 43F8 D000                  		lea	(v_player).w,a1
00011E2C 4A28 0001                  		tst.b	obRender(a0)
00011E30 6A00 0000                  		bpl.w	Solid_Ignore
00011E34 3029 0008                  		move.w	obX(a1),d0
00011E38 9068 0008                  		sub.w	obX(a0),d0
00011E3C D041                       		add.w	d1,d0
00011E3E 6B00 0000                  		bmi.w	Solid_Ignore
00011E42 3601                       		move.w	d1,d3
00011E44 D643                       		add.w	d3,d3
00011E46 B043                       		cmp.w	d3,d0
00011E48 6200 0000                  		bhi.w	Solid_Ignore
00011E4C 3A00                       		move.w	d0,d5
00011E4E 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011E54 6700                       		beq.s	@notflipped	; if not, branch
00011E56 4645                       		not.w	d5
00011E58 DA43                       		add.w	d3,d5
00011E5A                            
00011E5A                            	@notflipped:
00011E5A E24D                       		lsr.w	#1,d5
00011E5C 7600                       		moveq	#0,d3
00011E5E 1632 5000                  		move.b	(a2,d5.w),d3
00011E62 9612                       		sub.b	(a2),d3
00011E64 3A28 000C                  		move.w	obY(a0),d5
00011E68 9A43                       		sub.w	d3,d5
00011E6A 1629 0016                  		move.b	obHeight(a1),d3
00011E6E 4883                       		ext.w	d3
00011E70 D443                       		add.w	d3,d2
00011E72 3629 000C                  		move.w	obY(a1),d3
00011E76 9645                       		sub.w	d5,d3
00011E78 5843                       		addq.w	#4,d3
00011E7A D642                       		add.w	d2,d3
00011E7C 6B00 0000                  		bmi.w	Solid_Ignore
00011E80 3802                       		move.w	d2,d4
00011E82 D844                       		add.w	d4,d4
00011E84 B644                       		cmp.w	d4,d3
00011E86 6400 0000                  		bcc.w	Solid_Ignore
00011E8A 6000 0000                  		bra.w	loc_FB0E
00011E8E                            ; ===========================================================================
00011E8E                            
00011E8E                            Solid_ChkEnter:
00011E8E 4A28 0001                  		tst.b	obRender(a0)
00011E92 6A00 0000                  		bpl.w	Solid_Ignore
00011E96                            
00011E96                            loc_FAD0:
00011E96 43F8 D000                  		lea	(v_player).w,a1
00011E9A 3029 0008                  		move.w	obX(a1),d0
00011E9E 9068 0008                  		sub.w	obX(a0),d0
00011EA2 D041                       		add.w	d1,d0
00011EA4 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011EA8 3601                       		move.w	d1,d3
00011EAA D643                       		add.w	d3,d3
00011EAC B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011EAE 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011EB2 1629 0016                  		move.b	obHeight(a1),d3
00011EB6 4883                       		ext.w	d3
00011EB8 D443                       		add.w	d3,d2
00011EBA 3629 000C                  		move.w	obY(a1),d3
00011EBE 9668 000C                  		sub.w	obY(a0),d3
00011EC2 5843                       		addq.w	#4,d3
00011EC4 D642                       		add.w	d2,d3
00011EC6 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011ECA 3802                       		move.w	d2,d4
00011ECC D844                       		add.w	d4,d4
00011ECE B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011ED0 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011ED4                            
00011ED4                            loc_FB0E:
00011ED4 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011ED8 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011EDC 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011EE2 6400 0000                  			bcc.w	Solid_Debug
00011EE6 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011EEA 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011EEE 3A00                       		move.w	d0,d5
00011EF0 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011EF2 6400                       		bcc.s	@isright	; if yes, branch
00011EF4 D241                       		add.w	d1,d1
00011EF6 9041                       		sub.w	d1,d0
00011EF8 3A00                       		move.w	d0,d5
00011EFA 4445                       		neg.w	d5
00011EFC                            
00011EFC                            	@isright:
00011EFC 3203                       		move.w	d3,d1
00011EFE B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011F00 6400                       		bcc.s	@isbelow	; if yes, branch
00011F02                            
00011F02 5943                       		subq.w	#4,d3
00011F04 9644                       		sub.w	d4,d3
00011F06 3203                       		move.w	d3,d1
00011F08 4441                       		neg.w	d1
00011F0A                            
00011F0A                            	@isbelow:
00011F0A BA41                       		cmp.w	d1,d5
00011F0C 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011F10 0C41 0004                  		cmpi.w	#4,d1
00011F14 6300                       		bls.s	Solid_SideAir
00011F16 4A40                       		tst.w	d0		; where is Sonic?
00011F18 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011F1A 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011F1C 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011F20 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011F22 6000                       		bra.s	Solid_Left
00011F24                            ; ===========================================================================
00011F24                            
00011F24                            Solid_Right:
00011F24 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011F28 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011F2A                            
00011F2A                            Solid_Left:
00011F2A 337C 0000 0020             		move.w	#0,obInertia(a1)
00011F30 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011F36                            
00011F36                            Solid_Centre:
00011F36 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011F3A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F40 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011F42 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011F48 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011F4E 7801                       		moveq	#1,d4		; return side collision
00011F50 4E75                       		rts	
00011F52                            ; ===========================================================================
00011F52                            
00011F52                            Solid_SideAir:
00011F52 6100                       		bsr.s	Solid_NotPushing
00011F54 7801                       		moveq	#1,d4		; return side collision
00011F56 4E75                       		rts	
00011F58                            ; ===========================================================================
00011F58                            
00011F58                            Solid_Ignore:
00011F58 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011F5E 6700                       		beq.s	Solid_Debug	; if not, branch
00011F60 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011F66 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F68 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011F6E 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F70 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011F76 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F78 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011F7E                            
00011F7E                            
00011F7E                            Solid_NotPushing:
00011F7E 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011F84 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011F8A                            
00011F8A                            Solid_Debug:
00011F8A 7800                       		moveq	#0,d4		; return no collision
00011F8C 4E75                       		rts	
00011F8E                            ; ===========================================================================
00011F8E                            
00011F8E                            Solid_TopBottom:
00011F8E 4A43                       		tst.w	d3		; is Sonic below the object?
00011F90 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011F92 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011F96 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011F98 60BE                       		bra.s	Solid_Ignore
00011F9A                            ; ===========================================================================
00011F9A                            
00011F9A                            Solid_Below:
00011F9A 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011F9E 6700                       		beq.s	Solid_Squash	; if not, branch
00011FA0 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011FA2 4A43                       		tst.w	d3		; is Sonic above the object?
00011FA4 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011FA6 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011FAA 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011FB0                            
00011FB0                            Solid_TopBtmAir:
00011FB0 78FF                       		moveq	#-1,d4
00011FB2 4E75                       		rts	
00011FB4                            ; ===========================================================================
00011FB4                            
00011FB4                            Solid_Squash:
00011FB4 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011FBA 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011FBC 2F08                       		move.l	a0,-(sp)
00011FBE 2049                       		movea.l	a1,a0
00011FC0 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011FC6 205F                       		movea.l	(sp)+,a0
00011FC8 78FF                       		moveq	#-1,d4
00011FCA 4E75                       		rts	
00011FCC                            ; ===========================================================================
00011FCC                            
00011FCC                            Solid_Landed:
00011FCC 5943                       		subq.w	#4,d3
00011FCE 7200                       		moveq	#0,d1
00011FD0 1228 0014                  		move.b	obActWid(a0),d1
00011FD4 3401                       		move.w	d1,d2
00011FD6 D442                       		add.w	d2,d2
00011FD8 D269 0008                  		add.w	obX(a1),d1
00011FDC 9268 0008                  		sub.w	obX(a0),d1
00011FE0 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011FE2 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011FE4 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011FE6 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011FEA 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011FEC 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011FF0 5369 000C                  		subq.w	#1,obY(a1)
00011FF4 6100                       		bsr.s	Solid_ResetFloor
00011FF6 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011FFC 08E8 0003 0022             		bset	#3,obStatus(a0)
00012002 78FF                       		moveq	#-1,d4		; return top/bottom collision
00012004 4E75                       		rts	
00012006                            ; ===========================================================================
00012006                            
00012006                            Solid_Miss:
00012006 7800                       		moveq	#0,d4
00012008 4E75                       		rts	
0001200A                            ; End of function SolidObject
0001200A                            
0001200A                            
0001200A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001200A                            
0001200A                            
0001200A                            Solid_ResetFloor:
0001200A 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00012010 6700                       		beq.s	@notonobj	; if not, branch
00012012                            
00012012 7000                       		moveq	#0,d0
00012014 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00012018 ED48                       		lsl.w	#6,d0
0001201A 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00012020 2440                       		movea.l	d0,a2
00012022 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00012028 422A 0025                  		clr.b	obSolid(a2)
0001202C                            
0001202C                            	@notonobj:
0001202C 3008                       		move.w	a0,d0
0001202E 0440 D000                  		subi.w	#$D000,d0
00012032 EC48                       		lsr.w	#6,d0
00012034 0240 007F                  		andi.w	#$7F,d0
00012038 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
0001203C 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00012042 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00012048 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0001204E 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00012054 6700                       		beq.s	@notinair	; if not, branch
00012056 2F08                       		move.l	a0,-(sp)
00012058 2049                       		movea.l	a1,a0
0001205A 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00012060 205F                       		movea.l	(sp)+,a0
00012062                            
00012062                            	@notinair:
00012062 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00012068 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
0001206E 4E75                       		rts	
00012070                            ; End of function Solid_ResetFloor
00012070                            ; End of function Solid_ResetFloor
00012070                            
00012070                            		include	"_incObj\51 Smashable Green Block.asm"
00012070                            ; ---------------------------------------------------------------------------
00012070                            ; Object 51 - smashable	green block (MZ)
00012070                            ; ---------------------------------------------------------------------------
00012070                            
00012070                            SmashBlock:
00012070 7000                       		moveq	#0,d0
00012072 1028 0024                  		move.b	obRoutine(a0),d0
00012076 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
0001207A 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
0001207E 6000 F880                  		bra.w	RememberState
00012082                            ; ===========================================================================
00012082 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00012084 0000                       		dc.w Smab_Solid-Smab_Index
00012086 0000                       		dc.w Smab_Points-Smab_Index
00012088                            ; ===========================================================================
00012088                            
00012088                            Smab_Main:	; Routine 0
00012088 5428 0024                  		addq.b	#2,obRoutine(a0)
0001208C 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00012094 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
0001209A 117C 0004 0001             		move.b	#4,obRender(a0)
000120A0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000120A6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000120AC 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
000120B2                            
000120B2                            Smab_Solid:	; Routine 2
000120B2                            
000120B2 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
000120B2 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
000120B2                            
000120B2 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
000120B8 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
000120BE 323C 001B                  		move.w	#$1B,d1
000120C2 343C 0010                  		move.w	#$10,d2
000120C6 363C 0011                  		move.w	#$11,d3
000120CA 3828 0008                  		move.w	obX(a0),d4
000120CE 6100 FCC8                  		bsr.w	SolidObject
000120D2 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
000120D8 6600                       		bne.s	@smash		; if yes, branch
000120DA                            
000120DA                            	@notspinning:
000120DA 4E75                       		rts	
000120DC                            ; ===========================================================================
000120DC                            
000120DC                            @smash:
000120DC 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
000120E2 66F6                       		bne.s	@notspinning	; if not, branch
000120E4 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
000120EA 08E9 0002 0022             		bset	#2,obStatus(a1)
000120F0 137C 000E 0016             		move.b	#$E,obHeight(a1)
000120F6 137C 0007 0017             		move.b	#7,obWidth(a1)
000120FC 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00012102 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00012108 08E9 0001 0022             		bset	#1,obStatus(a1)
0001210E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012114 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001211A 08A8 0003 0022             		bclr	#3,obStatus(a0)
00012120 4228 0025                  		clr.b	obSolid(a0)
00012124 117C 0001 001A             		move.b	#1,obFrame(a0)
0001212A 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00012130 7203                       		moveq	#3,d1		; set number of	fragments to 4
00012132 343C 0038                  		move.w	#$38,d2
00012136 6100 D406                  		bsr.w	SmashObject
0001213A 6100 DCDA                  		bsr.w	FindFreeObj
0001213E 6600                       		bne.s	Smab_Points
00012140 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00012144 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001214A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012150 3438 F7D0                  		move.w	(v_itembonus).w,d2
00012154 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00012158 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
0001215C 6500                       		bcs.s	@bonus		; if yes, branch
0001215E 7406                       		moveq	#6,d2		; set cap for points
00012160                            
00012160                            	@bonus:
00012160 7000                       		moveq	#0,d0
00012162 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00012166 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
0001216C 6500                       		bcs.s	@givepoints	; if not, branch
0001216E 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00012172 740A                       		moveq	#10,d2
00012174                            
00012174                            	@givepoints:
00012174 4EB9 0000 0000             		jsr	(AddPoints).l
0001217A E24A                       		lsr.w	#1,d2
0001217C 1342 001A                  		move.b	d2,obFrame(a1)
00012180                            
00012180                            Smab_Points:	; Routine 4
00012180 6100 D7F4                  		bsr.w	SpeedToPos
00012184 0668 0038 0012             		addi.w	#$38,obVelY(a0)
0001218A 6100 D7FE                  		bsr.w	DisplaySprite
0001218E 4A28 0001                  		tst.b	obRender(a0)
00012192 6A00 D836                  		bpl.w	DeleteObject
00012196 4E75                       		rts	
00012198                            ; ===========================================================================
00012198 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
0001219C FF00 FF00                  		dc.w -$100, -$100
000121A0 0200 FE00                  		dc.w $200, -$200
000121A4 0100 FF00                  		dc.w $100, -$100
000121A8                            
000121A8 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
000121A8 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
000121B0                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
000121B0                            ; ---------------------------------------------------------------------------
000121B0                            ; Sprite mappings - smashable green block (MZ)
000121B0                            ; ---------------------------------------------------------------------------
000121B0                            Map_Smab_internal:
000121B0 0000                       		dc.w @two-Map_Smab_internal
000121B2 0000                       		dc.w @four-Map_Smab_internal
000121B4 02                         @two:		dc.b 2
000121B5 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	; two fragments, arranged vertically
000121BA 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000121BF 04                         @four:		dc.b 4
000121C0 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0 ; four fragments
000121C5 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000121CA F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000121CF 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000121D4                            		even
000121D4                            		even
000121D4                            
000121D4                            		include	"_incObj\52 Moving Blocks.asm"
000121D4                            ; ---------------------------------------------------------------------------
000121D4                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000121D4                            ; ---------------------------------------------------------------------------
000121D4                            
000121D4                            MovingBlock:
000121D4 7000                       		moveq	#0,d0
000121D6 1028 0024                  		move.b	obRoutine(a0),d0
000121DA 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
000121DE 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
000121E2                            ; ===========================================================================
000121E2 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
000121E4 0000                       		dc.w MBlock_Platform-MBlock_Index
000121E6 0000                       		dc.w MBlock_StandOn-MBlock_Index
000121E8                            
000121E8 =00000030                  mblock_origX:	equ $30
000121E8 =00000032                  mblock_origY:	equ $32
000121E8                            
000121E8 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
000121EA 2001                       		dc.b $20, 1
000121EC 2002                       		dc.b $20, 2
000121EE 4003                       		dc.b $40, 3
000121F0 3004                       		dc.b $30, 4
000121F2                            ; ===========================================================================
000121F2                            
000121F2                            MBlock_Main:	; Routine 0
000121F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000121F6 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
000121FE 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00012204 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001220A 6600                       		bne.s	loc_FE44
0001220C 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00012214 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
0001221A 117C 0007 0016             		move.b	#7,obHeight(a0)
00012220                            
00012220                            loc_FE44:
00012220 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00012226 6600                       		bne.s	loc_FE60
00012228 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
0001222E 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00012234 6700                       		beq.s	loc_FE60	; if yes, branch
00012236 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
0001223C                            
0001223C                            loc_FE60:
0001223C 117C 0004 0001             		move.b	#4,obRender(a0)
00012242 7000                       		moveq	#0,d0
00012244 1028 0028                  		move.b	obSubtype(a0),d0
00012248 E648                       		lsr.w	#3,d0
0001224A 0240 001E                  		andi.w	#$1E,d0
0001224E 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00012252 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012256 115A 001A                  		move.b	(a2)+,obFrame(a0)
0001225A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012260 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012266 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
0001226C 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00012272                            
00012272                            MBlock_Platform: ; Routine 2
00012272 6100 0000                  		bsr.w	MBlock_Move
00012276 7200                       		moveq	#0,d1
00012278 1228 0014                  		move.b	obActWid(a0),d1
0001227C 4EB9 0000 9098             		jsr	(PlatformObject).l
00012282 6000                       		bra.s	MBlock_ChkDel
00012284                            ; ===========================================================================
00012284                            
00012284                            MBlock_StandOn:	; Routine 4
00012284 7200                       		moveq	#0,d1
00012286 1228 0014                  		move.b	obActWid(a0),d1
0001228A 4EB9 0000 920C             		jsr	(ExitPlatform).l
00012290 3F28 0008                  		move.w	obX(a0),-(sp)
00012294 6100 0000                  		bsr.w	MBlock_Move
00012298 341F                       		move.w	(sp)+,d2
0001229A 4EB9 0000 9776             		jsr	(MvSonicOnPtfm2).l
000122A0                            
000122A0                            MBlock_ChkDel:
000122BE 6000 D6CA                  		bra.w	DisplaySprite
000122C2                            ; ===========================================================================
000122C2                            
000122C2                            MBlock_Move:
000122C2 7000                       		moveq	#0,d0
000122C4 1028 0028                  		move.b	obSubtype(a0),d0
000122C8 0240 000F                  		andi.w	#$F,d0
000122CC D040                       		add.w	d0,d0
000122CE 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
000122D2 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
000122D6                            ; ===========================================================================
000122D6 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
000122DA 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
000122DE 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
000122E2 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
000122E6 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
000122EA 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
000122EC                            ; ===========================================================================
000122EC                            
000122EC                            MBlock_Type00:
000122EC 4E75                       		rts	
000122EE                            ; ===========================================================================
000122EE                            
000122EE                            MBlock_Type01:
000122EE 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000122F2 323C 0060                  		move.w	#$60,d1
000122F6 0828 0000 0022             		btst	#0,obStatus(a0)
000122FC 6700                       		beq.s	loc_FF26
000122FE 4440                       		neg.w	d0
00012300 D041                       		add.w	d1,d0
00012302                            
00012302                            loc_FF26:
00012302 3228 0030                  		move.w	mblock_origX(a0),d1
00012306 9240                       		sub.w	d0,d1
00012308 3141 0008                  		move.w	d1,obX(a0)
0001230C 4E75                       		rts	
0001230E                            ; ===========================================================================
0001230E                            
0001230E                            MBlock_Type02:
0001230E 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00012314 6600                       		bne.s	MBlock_02_Wait
00012316 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
0001231A                            
0001231A                            MBlock_02_Wait:
0001231A 4E75                       		rts	
0001231C                            ; ===========================================================================
0001231C                            
0001231C                            MBlock_Type03:
0001231C 7600                       		moveq	#0,d3
0001231E 1628 0014                  		move.b	obActWid(a0),d3
00012322 6100 0000                  		bsr.w	ObjHitWallRight
00012326 4A41                       		tst.w	d1		; has the platform hit a wall?
00012328 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
0001232A 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
0001232E 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012334 4E75                       		rts	
00012336                            ; ===========================================================================
00012336                            
00012336                            MBlock_03_End:
00012336 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
0001233A 4E75                       		rts	
0001233C                            ; ===========================================================================
0001233C                            
0001233C                            MBlock_Type05:
0001233C 7600                       		moveq	#0,d3
0001233E 1628 0014                  		move.b	obActWid(a0),d3
00012342 6100 0000                  		bsr.w	ObjHitWallRight
00012346 4A41                       		tst.w	d1		; has the platform hit a wall?
00012348 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
0001234A 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
0001234E 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012354 4E75                       		rts	
00012356                            ; ===========================================================================
00012356                            
00012356                            MBlock_05_End:
00012356 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
0001235A 4E75                       		rts	
0001235C                            ; ===========================================================================
0001235C                            
0001235C                            MBlock_Type06:
0001235C 6100 D618                  		bsr.w	SpeedToPos
00012360 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00012366 6100 0000                  		bsr.w	ObjFloorDist
0001236A 4A41                       		tst.w	d1		; has platform hit the floor?
0001236C 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00012370 D368 000C                  		add.w	d1,obY(a0)
00012374 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00012378 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
0001237C                            
0001237C                            locret_FFA0:
0001237C 4E75                       		rts	
0001237E                            ; ===========================================================================
0001237E                            
0001237E                            MBlock_Type07:
0001237E 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
00012382 6700                       		beq.s	MBlock_07_ChkDel
00012384 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00012388                            
00012388                            MBlock_07_ChkDel:
00012388 588F                       		addq.l	#4,sp
000123A8 4E75                       		rts	
000123AA                            ; ===========================================================================
000123AA                            
000123AA                            MBlock_Type08:
000123AA 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000123AE 323C 0080                  		move.w	#$80,d1
000123B2 0828 0000 0022             		btst	#0,obStatus(a0)
000123B8 6700                       		beq.s	loc_FFE2
000123BA 4440                       		neg.w	d0
000123BC D041                       		add.w	d1,d0
000123BE                            
000123BE                            loc_FFE2:
000123BE 3228 0032                  		move.w	mblock_origY(a0),d1
000123C2 9240                       		sub.w	d0,d1
000123C4 3141 000C                  		move.w	d1,obY(a0)
000123C8 4E75                       		rts	
000123CA                            ; ===========================================================================
000123CA                            
000123CA                            MBlock_Type0A:
000123CA 7600                       		moveq	#0,d3
000123CC 1628 0014                  		move.b	obActWid(a0),d3
000123D0 D643                       		add.w	d3,d3
000123D2 7208                       		moveq	#8,d1
000123D4 0828 0000 0022             		btst	#0,obStatus(a0)
000123DA 6700                       		beq.s	loc_10004
000123DC 4441                       		neg.w	d1
000123DE 4443                       		neg.w	d3
000123E0                            
000123E0                            loc_10004:
000123E0 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000123E4 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
000123E6 3028 0008                  		move.w	obX(a0),d0
000123EA 9068 0030                  		sub.w	mblock_origX(a0),d0
000123EE B043                       		cmp.w	d3,d0
000123F0 6700                       		beq.s	MBlock_0A_Wait
000123F2 D368 0008                  		add.w	d1,obX(a0)	; move platform
000123F6 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000123FC 4E75                       		rts	
000123FE                            ; ===========================================================================
000123FE                            
000123FE                            MBlock_0A_Wait:
000123FE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00012402 6600                       		bne.s	locret_1002E	; if time remains, branch
00012404 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001240A                            
0001240A                            locret_1002E:
0001240A 4E75                       		rts	
0001240C                            ; ===========================================================================
0001240C                            
0001240C                            MBlock_0A_Back:
0001240C 3028 0008                  		move.w	obX(a0),d0
00012410 9068 0030                  		sub.w	mblock_origX(a0),d0
00012414 6700                       		beq.s	MBlock_0A_Reset
00012416 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
0001241A 4E75                       		rts	
0001241C                            ; ===========================================================================
0001241C                            
0001241C                            MBlock_0A_Reset:
0001241C 4268 0036                  		clr.w	$36(a0)
00012420 5328 0028                  		subq.b	#1,obSubtype(a0)
00012424 4E75                       		rts	
00012424 4E75                       		rts	
00012426                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
00012426                            ; ---------------------------------------------------------------------------
00012426                            ; Sprite mappings - moving blocks (MZ, SBZ)
00012426                            ; ---------------------------------------------------------------------------
00012426                            Map_MBlock_internal:
00012426 0000                       		dc.w @mz1-Map_MBlock_internal
00012428 0000                       		dc.w @mz2-Map_MBlock_internal
0001242A 0000                       		dc.w @sbz-Map_MBlock_internal
0001242C 0000                       		dc.w @sbzwide-Map_MBlock_internal
0001242E 0000                       		dc.w @mz3-Map_MBlock_internal
00012430 01                         @mz1:		dc.b 1
00012431 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012436 02                         @mz2:		dc.b 2
00012437 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001243C F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00012441 04                         @sbz:		dc.b 4
00012442 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00012447 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001244C F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00012451 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00012456 04                         @sbzwide:	dc.b 4
00012457 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001245C F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00012461 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00012466 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001246B 03                         @mz3:		dc.b 3
0001246C F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00012471 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012476 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001247C 00                         		even
0001247C 00                         		even
0001247C                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
0001247C                            ; ---------------------------------------------------------------------------
0001247C                            ; Sprite mappings - moving block (LZ)
0001247C                            ; ---------------------------------------------------------------------------
0001247C                            Map_MBlockLZ_internal:
0001247C 0000                       		dc.w @0-Map_MBlockLZ_internal
0001247E 01                         @0:		dc.b 1
0001247F F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00012484                            		even
00012484                            		even
00012484                            
00012484                            		include	"_incObj\55 Basaran.asm"
00012484                            ; ---------------------------------------------------------------------------
00012484                            ; Object 55 - Basaran enemy (MZ)
00012484                            ; ---------------------------------------------------------------------------
00012484                            
00012484                            Basaran:
00012484 7000                       		moveq	#0,d0
00012486 1028 0024                  		move.b	obRoutine(a0),d0
0001248A 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
0001248E 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
00012492                            ; ===========================================================================
00012492 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012494 0000                       		dc.w Bas_Action-Bas_Index
00012496                            ; ===========================================================================
00012496                            
00012496                            Bas_Main:	; Routine 0
00012496 5428 0024                  		addq.b	#2,obRoutine(a0)
0001249A 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
000124A2 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
000124A8 117C 0004 0001             		move.b	#4,obRender(a0)
000124AE 117C 000C 0016             		move.b	#$C,obHeight(a0)
000124B4 317C 0100 0018             		move.w	#$100,obPriority(a0)
000124BA 117C 000B 0020             		move.b	#$B,obColType(a0)
000124C0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000124C6                            
000124C6                            Bas_Action:	; Routine 2
000124C6 7000                       		moveq	#0,d0
000124C8 1028 0025                  		move.b	ob2ndRout(a0),d0
000124CC 323B 0000                  		move.w	@index(pc,d0.w),d1
000124D0 4EBB 1000                  		jsr	@index(pc,d1.w)
000124D4 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000124DA 6100 A55A                  		bsr.w	AnimateSprite
000124DE 6000 F420                  		bra.w	RememberState
000124E2                            ; ===========================================================================
000124E2 0000                       @index:		dc.w @dropcheck-@index
000124E4 0000                       		dc.w @dropfly-@index
000124E6 0000                       		dc.w @flapsound-@index
000124E8 0000                       		dc.w @flyup-@index
000124EA                            ; ===========================================================================
000124EA                            
000124EA                            @dropcheck:
000124EA 343C 0080                  		move.w	#$80,d2
000124EE 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000124F2 6400                       		bcc.s	@nodrop		; if not, branch
000124F4 3038 D00C                  		move.w	(v_player+obY).w,d0
000124F8 3140 0036                  		move.w	d0,$36(a0)
000124FC 9068 000C                  		sub.w	obY(a0),d0
00012500 6500                       		bcs.s	@nodrop
00012502 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
00012506 6400                       		bcc.s	@nodrop		; if not, branch
00012508 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
0001250C 6600                       		bne.s	@nodrop		; if yes, branch
0001250E                            
0001250E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012512 D007                       		add.b	d7,d0
00012514 0200 0007                  		andi.b	#7,d0
00012518 6600                       		bne.s	@nodrop
0001251A 117C 0001 001C             		move.b	#1,obAnim(a0)
00012520 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012524                            
00012524                            	@nodrop:
00012524 4E75                       		rts	
00012526                            ; ===========================================================================
00012526                            
00012526                            @dropfly:
00012526 6100 D44E                  		bsr.w	SpeedToPos
0001252A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
00012530 343C 0080                  		move.w	#$80,d2
00012534 6100 0000                  		bsr.w	@chkdistance
00012538 3028 0036                  		move.w	$36(a0),d0
0001253C 9068 000C                  		sub.w	obY(a0),d0
00012540 6500                       		bcs.s	@chkdel
00012542 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00012546 6400                       		bcc.s	@dropmore	; if not, branch
00012548 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
0001254C 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
00012552 117C 0002 001C             		move.b	#2,obAnim(a0)
00012558 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001255C                            
0001255C                            	@dropmore:
0001255C 4E75                       		rts	
0001255E                            
0001255E                            	@chkdel:
0001255E 4A28 0001                  		tst.b	obRender(a0)
00012562 6A00 D466                  		bpl.w	DeleteObject
00012566 4E75                       		rts	
00012568                            ; ===========================================================================
00012568                            
00012568                            @flapsound:
00012568 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001256C 0200 000F                  		andi.b	#$F,d0
00012570 6600                       		bne.s	@nosound
0001257C                            
0001257C                            	@nosound:
0001257C 6100 D3F8                  		bsr.w	SpeedToPos
00012580 3038 D008                  		move.w	(v_player+obX).w,d0
00012584 9068 0008                  		sub.w	obX(a0),d0
00012588 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
0001258A 4440                       		neg.w	d0
0001258C                            
0001258C                            	@isright:
0001258C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
00012590 6500                       		bcs.s	@dontflyup	; if yes, branch
00012592 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012596 D007                       		add.b	d7,d0
00012598 0200 0007                  		andi.b	#7,d0
0001259C 6600                       		bne.s	@dontflyup
0001259E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000125A2                            
000125A2                            @dontflyup:
000125A2 4E75                       		rts	
000125A4                            ; ===========================================================================
000125A4                            
000125A4                            @flyup:
000125A4 6100 D3D0                  		bsr.w	SpeedToPos
000125A8 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
000125AE 6100 0000                  		bsr.w	ObjHitCeiling
000125B2 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000125B4 6A00                       		bpl.s	@noceiling	; if not, branch
000125B6 9368 000C                  		sub.w	d1,obY(a0)
000125BA 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
000125C0 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
000125C4 4268 0012                  		clr.w	obVelY(a0)
000125C8 4228 001C                  		clr.b	obAnim(a0)
000125CC 4228 0025                  		clr.b	ob2ndRout(a0)
000125D0                            
000125D0                            	@noceiling:
000125D0 4E75                       		rts	
000125D2                            ; ===========================================================================
000125D2                            
000125D2                            ; Subroutine to check Sonic's distance from the basaran
000125D2                            
000125D2                            ; input:
000125D2                            ;	d2 = distance to compare
000125D2                            
000125D2                            ; output:
000125D2                            ;	d0 = distance between Sonic and basaran
000125D2                            ;	d1 = speed/direction for basaran to fly
000125D2                            
000125D2                            @chkdistance:
000125D2 323C 0100                  		move.w	#$100,d1
000125D6 08E8 0000 0022             		bset	#0,obStatus(a0)
000125DC 3038 D008                  		move.w	(v_player+obX).w,d0
000125E0 9068 0008                  		sub.w	obX(a0),d0
000125E4 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000125E6 4440                       		neg.w	d0
000125E8 4441                       		neg.w	d1
000125EA 08A8 0000 0022             		bclr	#0,obStatus(a0)
000125F0                            
000125F0                            	@right:
000125F0 B042                       		cmp.w	d2,d0
000125F2 4E75                       		rts	
000125F4                            ; ===========================================================================
000125F4                            ; unused crap
000125F4 6100 D380                  		bsr.w	SpeedToPos
000125F8 6100 D390                  		bsr.w	DisplaySprite
000125FC 4A28 0001                  		tst.b	obRender(a0)
00012600 6A00 D3C8                  		bpl.w	DeleteObject
00012604 4E75                       		rts	
00012604 4E75                       		rts	
00012606                            		include	"_anim\Basaran.asm"
00012606                            ; ---------------------------------------------------------------------------
00012606                            ; Animation script - Basaran enemy
00012606                            ; ---------------------------------------------------------------------------
00012606 0000                       Ani_Bas:	dc.w @still-Ani_Bas
00012608 0000                       		dc.w @fall-Ani_Bas
0001260A 0000                       		dc.w @fly-Ani_Bas
0001260C 0F00 FF                    @still:		dc.b $F, 0, afEnd
00012610 00                         		even
00012610 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012614 00                         		even
00012614 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
0001261A                            		even
0001261A                            		even
0001261A                            Map_Bas:	include	"_maps\Basaran.asm"
0001261A                            ; --------------------------------------------------------------------------------
0001261A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001261A                            ; --------------------------------------------------------------------------------
0001261A                            
0001261A                            SME_RhYYA:	
0001261A 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
0001261E 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
00012622 01                         SME_RhYYA_8:	dc.b 1	
00012623 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
00012628 03                         SME_RhYYA_E:	dc.b 3	
00012629 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
0001262E 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
00012633 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
00012638 04                         SME_RhYYA_1E:	dc.b 4	
00012639 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
0001263E 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
00012643 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
00012648 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
0001264D 04                         SME_RhYYA_33:	dc.b 4	
0001264E F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
00012653 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
00012658 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
0001265D FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
00012662                            		even
00012662                            		even
00012662                            
00012662                            		include	"_incObj\56 Floating Blocks and Doors.asm"
00012662                            ; ---------------------------------------------------------------------------
00012662                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
00012662                            ; ---------------------------------------------------------------------------
00012662                            
00012662                            FloatingBlock:
00012662 7000                       		moveq	#0,d0
00012664 1028 0024                  		move.b	obRoutine(a0),d0
00012668 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
0001266C 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
00012670                            ; ===========================================================================
00012670 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
00012672 0000                       		dc.w FBlock_Action-FBlock_Index
00012674                            
00012674 =00000034                  fb_origX:	equ $34		; original x-axis position
00012674 =00000030                  fb_origY:	equ $30		; original y-axis position
00012674 =0000003A                  fb_height:	equ $3A		; total object height
00012674 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
00012674                            
00012674                            FBlock_Var:	; width/2, height/2
00012674 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012676 2020                       		dc.b  $20, $20	; subtype 1x/9x
00012678 1020                       		dc.b  $10, $20	; subtype 2x/Ax
0001267A 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
0001267C 1027                       		dc.b  $10, $27	; subtype 4x/Cx
0001267E 1010                       		dc.b  $10, $10	; subtype 5x/Dx
00012680 0820                       		dc.b	8, $20	; subtype 6x/Ex
00012682 4010                       		dc.b  $40, $10	; subtype 7x/Fx
00012684                            ; ===========================================================================
00012684                            
00012684                            FBlock_Main:	; Routine 0
00012684 5428 0024                  		addq.b	#2,obRoutine(a0)
00012688 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
00012690 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012696 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001269C 6600                       		bne.s	@notLZ
0001269E 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
000126A4                            
000126A4                            	@notLZ:
000126A4 117C 0004 0001             		move.b	#4,obRender(a0)
000126AA 317C 0180 0018             		move.w	#$180,obPriority(a0)
000126B0 7000                       		moveq	#0,d0
000126B2 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
000126B6 E648                       		lsr.w	#3,d0
000126B8 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
000126BC 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
000126C0 115A 0014                  		move.b	(a2)+,obActWid(a0)
000126C4 1152 0016                  		move.b	(a2),obHeight(a0)
000126C8 E248                       		lsr.w	#1,d0
000126CA 1140 001A                  		move.b	d0,obFrame(a0)
000126CE 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000126D4 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000126DA 7000                       		moveq	#0,d0
000126DC 1012                       		move.b	(a2),d0
000126DE D040                       		add.w	d0,d0
000126E0 3140 003A                  		move.w	d0,fb_height(a0)
000126E4 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000126EA 6600                       			bne.s	@dontdelete
000126EC 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000126F2 6600                       			bne.s	@notatpos
000126F4 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000126F8 6700                       			beq.s	@dontdelete
000126FA 4EF9 0000 F9CA             			jmp	(DeleteObject).l
00012700                            	@notatpos:
00012700 4228 0028                  			clr.b	obSubtype(a0)
00012704 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012708 6600                       			bne.s	@dontdelete
0001270A 4EF9 0000 F9CA             			jmp	(DeleteObject).l
00012710                            	@dontdelete:
00012710 7000                       		moveq	#0,d0
00012712 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012718 6700                       		beq.s	@stillnotLZ
0001271A 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
0001271E 0240 000F                  		andi.w	#$F,d0
00012722 5140                       		subq.w	#8,d0
00012724 6500                       		bcs.s	@stillnotLZ
00012726 E548                       		lsl.w	#2,d0
00012728 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
0001272C 45F2 0000                  		lea	(a2,d0.w),a2
00012730 4A52                       		tst.w	(a2)
00012732 6A00                       		bpl.s	@stillnotLZ
00012734 0868 0000 0022             		bchg	#0,obStatus(a0)
0001273A                            
0001273A                            	@stillnotLZ:
0001273A 1028 0028                  		move.b	obSubtype(a0),d0
0001273E 6A00                       		bpl.s	FBlock_Action
00012740 0200 000F                  		andi.b	#$F,d0
00012744 1140 003C                  		move.b	d0,fb_type(a0)
00012748 117C 0005 0028             		move.b	#5,obSubtype(a0)
0001274E 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
00012754 6600                       		bne.s	@chkstate
00012756 117C 000C 0028             		move.b	#$C,obSubtype(a0)
0001275C 317C 0080 003A             		move.w	#$80,fb_height(a0)
00012762                            
00012762                            @chkstate:
00012762 45F8 FC00                  		lea	(v_objstate).w,a2
00012766 7000                       		moveq	#0,d0
00012768 1028 0023                  		move.b	obRespawnNo(a0),d0
0001276C 6700                       		beq.s	FBlock_Action
0001276E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012774 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001277A 6700                       		beq.s	FBlock_Action
0001277C 5228 0028                  		addq.b	#1,obSubtype(a0)
00012780 4268 003A                  		clr.w	fb_height(a0)
00012784                            
00012784                            FBlock_Action:	; Routine 2
00012784 3F28 0008                  		move.w	obX(a0),-(sp)
00012788 7000                       		moveq	#0,d0
0001278A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
0001278E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012792 D040                       		add.w	d0,d0
00012794 323B 0000                  		move.w	@index(pc,d0.w),d1
00012798 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
0001279C 381F                       		move.w	(sp)+,d4
0001279E 4A28 0001                  		tst.b	obRender(a0)
000127A2 6A00                       		bpl.s	@chkdel
000127A4 7200                       		moveq	#0,d1
000127A6 1228 0014                  		move.b	obActWid(a0),d1
000127AA 0641 000B                  		addi.w	#$B,d1
000127AE 7400                       		moveq	#0,d2
000127B0 1428 0016                  		move.b	obHeight(a0),d2
000127B4 3602                       		move.w	d2,d3
000127B6 5243                       		addq.w	#1,d3
000127B8 6100 F5DE                  		bsr.w	SolidObject
000127BC                            
000127BC                            	@chkdel:
000127D8                            		@display:
000127D8 6000 D1B0                  			bra.w	DisplaySprite
000127DC                            		@chkdel2:
000127DC 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000127E2 6600                       			bne.s	@delete
000127E4 4A28 0038                  			tst.b	$38(a0)
000127E8 66EE                       			bne.s	@display
000127EA                            		@delete:
000127EA 4EF9 0000 F9CA             			jmp	(DeleteObject).l
000127F0                            ; ===========================================================================
000127F0 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000127F4 0000 0000                  		dc.w @type02-@index, @type03-@index
000127F8 0000 0000                  		dc.w @type04-@index, @type05-@index
000127FC 0000 0000                  		dc.w @type06-@index, @type07-@index
00012800 0000 0000                  		dc.w @type08-@index, @type09-@index
00012804 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00012808 0000 0000                  		dc.w @type0C-@index, @type0D-@index
0001280C                            ; ===========================================================================
0001280C                            
0001280C                            @type00:
0001280C                            ; doesn't move
0001280C 4E75                       		rts	
0001280E                            ; ===========================================================================
0001280E                            
0001280E                            @type01:
0001280E                            ; moves side-to-side
0001280E 323C 0040                  		move.w	#$40,d1		; set move distance
00012812 7000                       		moveq	#0,d0
00012814 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012818 6000                       		bra.s	@moveLR
0001281A                            ; ===========================================================================
0001281A                            
0001281A                            @type02:
0001281A                            ; moves side-to-side
0001281A 323C 0080                  		move.w	#$80,d1		; set move distance
0001281E 7000                       		moveq	#0,d0
00012820 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012824                            
00012824                            	@moveLR:
00012824 0828 0000 0022             		btst	#0,obStatus(a0)
0001282A 6700                       		beq.s	@noflip
0001282C 4440                       		neg.w	d0
0001282E D041                       		add.w	d1,d0
00012830                            
00012830                            	@noflip:
00012830 3228 0034                  		move.w	fb_origX(a0),d1
00012834 9240                       		sub.w	d0,d1
00012836 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
0001283A 4E75                       		rts	
0001283C                            ; ===========================================================================
0001283C                            
0001283C                            @type03:
0001283C                            ; moves up/down
0001283C 323C 0040                  		move.w	#$40,d1		; set move distance
00012840 7000                       		moveq	#0,d0
00012842 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012846 6000                       		bra.s	@moveUD
00012848                            ; ===========================================================================
00012848                            
00012848                            @type04:
00012848                            ; moves up/down
00012848 323C 0080                  		move.w	#$80,d1		; set move distance
0001284C 7000                       		moveq	#0,d0
0001284E 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012852                            
00012852                            	@moveUD:
00012852 0828 0000 0022             		btst	#0,obStatus(a0)
00012858 6700                       		beq.s	@noflip04
0001285A 4440                       		neg.w	d0
0001285C D041                       		add.w	d1,d0
0001285E                            
0001285E                            	@noflip04:
0001285E 3228 0030                  		move.w	fb_origY(a0),d1
00012862 9240                       		sub.w	d0,d1
00012864 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012868 4E75                       		rts	
0001286A                            ; ===========================================================================
0001286A                            
0001286A                            @type05:
0001286A                            ; moves up when a switch is pressed
0001286A 4A28 0038                  		tst.b	$38(a0)
0001286E 6600                       		bne.s	@loc_104A4
00012870 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012876 6600                       		bne.s	@aaa		; if not, branch
00012878 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
0001287E 6600                       		bne.s	@aaa
00012880 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012884 3038 D008                  		move.w	(v_player+obX).w,d0
00012888 B068 0008                  		cmp.w	obX(a0),d0
0001288C 6400                       		bcc.s	@aaa
0001288E 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012894                            
00012894                            	@aaa:
00012894 45F8 F7E0                  		lea	(f_switch).w,a2
00012898 7000                       		moveq	#0,d0
0001289A 1028 003C                  		move.b	fb_type(a0),d0
0001289E 0832 0000 0000             		btst	#0,(a2,d0.w)
000128A4 6700                       		beq.s	@loc_104AE
000128A6 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
000128AC 6600                       		bne.s	@loc_1049E	; if not, branch
000128AE 0C00 0003                  		cmpi.b	#3,d0
000128B2 6600                       		bne.s	@loc_1049E
000128B4 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000128B8                            
000128B8                            @loc_1049E:
000128B8 117C 0001 0038             		move.b	#1,$38(a0)
000128BE                            
000128BE                            @loc_104A4:
000128BE 4A68 003A                  		tst.w	fb_height(a0)
000128C2 6700                       		beq.s	@loc_104C8
000128C4 5568 003A                  		subq.w	#2,fb_height(a0)
000128C8                            
000128C8                            @loc_104AE:
000128C8 3028 003A                  		move.w	fb_height(a0),d0
000128CC 0828 0000 0022             		btst	#0,$22(a0)
000128D2 6700                       		beq.s	@loc_104BC
000128D4 4440                       		neg.w	d0
000128D6                            
000128D6                            @loc_104BC:
000128D6 3228 0030                  		move.w	fb_origY(a0),d1
000128DA D240                       		add.w	d0,d1
000128DC 3141 000C                  		move.w	d1,obY(a0)
000128E0 4E75                       		rts	
000128E2                            ; ===========================================================================
000128E2                            
000128E2                            @loc_104C8:
000128E2 5228 0028                  		addq.b	#1,$28(a0)
000128E6 4228 0038                  		clr.b	$38(a0)
000128EA 45F8 FC00                  		lea	(v_objstate).w,a2
000128EE 7000                       		moveq	#0,d0
000128F0 1028 0023                  		move.b	obRespawnNo(a0),d0
000128F4 67D2                       		beq.s	@loc_104AE
000128F6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000128FC 60CA                       		bra.s	@loc_104AE
000128FE                            ; ===========================================================================
000128FE                            
000128FE                            @type06:
000128FE 4A28 0038                  		tst.b	$38(a0)
00012902 6600                       		bne.s	@loc_10500
00012904 45F8 F7E0                  		lea	(f_switch).w,a2
00012908 7000                       		moveq	#0,d0
0001290A 1028 003C                  		move.b	fb_type(a0),d0
0001290E 4A32 0000                  		tst.b	(a2,d0.w)
00012912 6A00                       		bpl.s	@loc_10512
00012914 117C 0001 0038             		move.b	#1,$38(a0)
0001291A                            
0001291A                            @loc_10500:
0001291A 7000                       		moveq	#0,d0
0001291C 1028 0016                  		move.b	obHeight(a0),d0
00012920 D040                       		add.w	d0,d0
00012922 B068 003A                  		cmp.w	fb_height(a0),d0
00012926 6700                       		beq.s	@loc_1052C
00012928 5468 003A                  		addq.w	#2,fb_height(a0)
0001292C                            
0001292C                            @loc_10512:
0001292C 3028 003A                  		move.w	fb_height(a0),d0
00012930 0828 0000 0022             		btst	#0,obStatus(a0)
00012936 6700                       		beq.s	@loc_10520
00012938 4440                       		neg.w	d0
0001293A                            
0001293A                            @loc_10520:
0001293A 3228 0030                  		move.w	fb_origY(a0),d1
0001293E D240                       		add.w	d0,d1
00012940 3141 000C                  		move.w	d1,obY(a0)
00012944 4E75                       		rts	
00012946                            ; ===========================================================================
00012946                            
00012946                            @loc_1052C:
00012946 5328 0028                  		subq.b	#1,obSubtype(a0)
0001294A 4228 0038                  		clr.b	$38(a0)
0001294E 45F8 FC00                  		lea	(v_objstate).w,a2
00012952 7000                       		moveq	#0,d0
00012954 1028 0023                  		move.b	obRespawnNo(a0),d0
00012958 67D2                       		beq.s	@loc_10512
0001295A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012960 60CA                       		bra.s	@loc_10512
00012962                            ; ===========================================================================
00012962                            
00012962                            @type07:
00012962 4A28 0038                  		tst.b	$38(a0)
00012966 6600                       		bne.s	@loc_1055E
00012968 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
0001296C 6700                       		beq.s	@locret_10578
0001296E 117C 0001 0038             		move.b	#1,$38(a0)
00012974 4268 003A                  		clr.w	fb_height(a0)
00012978                            
00012978                            @loc_1055E:
00012978 5268 0008                  		addq.w	#1,obX(a0)
0001297C 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012982 5268 003A                  		addq.w	#1,fb_height(a0)
00012986 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
0001298C 6600                       		bne.s	@locret_10578
0001298E 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012994 4228 0038                  			clr.b	$38(a0)
00012998 4228 0028                  		clr.b	obSubtype(a0)
0001299C                            
0001299C                            @locret_10578:
0001299C 4E75                       		rts	
0001299E                            ; ===========================================================================
0001299E                            
0001299E                            @type0C:
0001299E 4A28 0038                  		tst.b	$38(a0)
000129A2 6600                       		bne.s	@loc_10598
000129A4 45F8 F7E0                  		lea	(f_switch).w,a2
000129A8 7000                       		moveq	#0,d0
000129AA 1028 003C                  		move.b	fb_type(a0),d0
000129AE 0832 0000 0000             		btst	#0,(a2,d0.w)
000129B4 6700                       		beq.s	@loc_105A2
000129B6 117C 0001 0038             		move.b	#1,$38(a0)
000129BC                            
000129BC                            @loc_10598:
000129BC 4A68 003A                  		tst.w	fb_height(a0)
000129C0 6700                       		beq.s	@loc_105C0
000129C2 5568 003A                  		subq.w	#2,fb_height(a0)
000129C6                            
000129C6                            @loc_105A2:
000129C6 3028 003A                  		move.w	fb_height(a0),d0
000129CA 0828 0000 0022             		btst	#0,obStatus(a0)
000129D0 6700                       		beq.s	@loc_105B4
000129D2 4440                       		neg.w	d0
000129D4 0640 0080                  		addi.w	#$80,d0
000129D8                            
000129D8                            @loc_105B4:
000129D8 3228 0034                  		move.w	fb_origX(a0),d1
000129DC D240                       		add.w	d0,d1
000129DE 3141 0008                  		move.w	d1,obX(a0)
000129E2 4E75                       		rts	
000129E4                            ; ===========================================================================
000129E4                            
000129E4                            @loc_105C0:
000129E4 5228 0028                  		addq.b	#1,obSubtype(a0)
000129E8 4228 0038                  		clr.b	$38(a0)
000129EC 45F8 FC00                  		lea	(v_objstate).w,a2
000129F0 7000                       		moveq	#0,d0
000129F2 1028 0023                  		move.b	obRespawnNo(a0),d0
000129F6 67CE                       		beq.s	@loc_105A2
000129F8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000129FE 60C6                       		bra.s	@loc_105A2
00012A00                            ; ===========================================================================
00012A00                            
00012A00                            @type0D:
00012A00 4A28 0038                  		tst.b	$38(a0)
00012A04 6600                       		bne.s	@loc_105F8
00012A06 45F8 F7E0                  		lea	(f_switch).w,a2
00012A0A 7000                       		moveq	#0,d0
00012A0C 1028 003C                  		move.b	fb_type(a0),d0
00012A10 4A32 0000                  		tst.b	(a2,d0.w)
00012A14 6A00                       		bpl.s	@wtf
00012A16 117C 0001 0038             		move.b	#1,$38(a0)
00012A1C                            
00012A1C                            @loc_105F8:
00012A1C 303C 0080                  		move.w	#$80,d0
00012A20 B068 003A                  		cmp.w	fb_height(a0),d0
00012A24 6700                       		beq.s	@loc_10624
00012A26 5468 003A                  		addq.w	#2,fb_height(a0)
00012A2A                            
00012A2A                            @wtf:
00012A2A 3028 003A                  		move.w	fb_height(a0),d0
00012A2E 0828 0000 0022             		btst	#0,obStatus(a0)
00012A34 6700                       		beq.s	@loc_10618
00012A36 4440                       		neg.w	d0
00012A38 0640 0080                  		addi.w	#$80,d0
00012A3C                            
00012A3C                            @loc_10618:
00012A3C 3228 0034                  		move.w	fb_origX(a0),d1
00012A40 D240                       		add.w	d0,d1
00012A42 3141 0008                  		move.w	d1,obX(a0)
00012A46 4E75                       		rts	
00012A48                            ; ===========================================================================
00012A48                            
00012A48                            @loc_10624:
00012A48 5328 0028                  		subq.b	#1,obSubtype(a0)
00012A4C 4228 0038                  		clr.b	$38(a0)
00012A50 45F8 FC00                  		lea	(v_objstate).w,a2
00012A54 7000                       		moveq	#0,d0
00012A56 1028 0023                  		move.b	obRespawnNo(a0),d0
00012A5A 67CE                       		beq.s	@wtf
00012A5C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012A62 60C6                       		bra.s	@wtf
00012A64                            ; ===========================================================================
00012A64                            
00012A64                            @type08:
00012A64 323C 0010                  		move.w	#$10,d1
00012A68 7000                       		moveq	#0,d0
00012A6A 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012A6E E248                       		lsr.w	#1,d0
00012A70 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012A74 6000                       		bra.s	@square
00012A76                            ; ===========================================================================
00012A76                            
00012A76                            @type09:
00012A76 323C 0030                  		move.w	#$30,d1
00012A7A 7000                       		moveq	#0,d0
00012A7C 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012A80 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012A84 6000                       		bra.s	@square
00012A86                            ; ===========================================================================
00012A86                            
00012A86                            @type0A:
00012A86 323C 0050                  		move.w	#$50,d1
00012A8A 7000                       		moveq	#0,d0
00012A8C 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012A90 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012A94 6000                       		bra.s	@square
00012A96                            ; ===========================================================================
00012A96                            
00012A96                            @type0B:
00012A96 323C 0070                  		move.w	#$70,d1
00012A9A 7000                       		moveq	#0,d0
00012A9C 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012AA0 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012AA4                            
00012AA4                            @square:
00012AA4 4A43                       		tst.w	d3
00012AA6 6600                       		bne.s	@loc_1068E
00012AA8 5228 0022                  		addq.b	#1,obStatus(a0)
00012AAC 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012AB2                            
00012AB2                            @loc_1068E:
00012AB2 1428 0022                  		move.b	obStatus(a0),d2
00012AB6 0202 0003                  		andi.b	#3,d2
00012ABA 6600                       		bne.s	@loc_106AE
00012ABC 9041                       		sub.w	d1,d0
00012ABE D068 0034                  		add.w	fb_origX(a0),d0
00012AC2 3140 0008                  		move.w	d0,obX(a0)
00012AC6 4441                       		neg.w	d1
00012AC8 D268 0030                  		add.w	fb_origY(a0),d1
00012ACC 3141 000C                  		move.w	d1,obY(a0)
00012AD0 4E75                       		rts	
00012AD2                            ; ===========================================================================
00012AD2                            
00012AD2                            @loc_106AE:
00012AD2 5302                       		subq.b	#1,d2
00012AD4 6600                       		bne.s	@loc_106CC
00012AD6 5341                       		subq.w	#1,d1
00012AD8 9041                       		sub.w	d1,d0
00012ADA 4440                       		neg.w	d0
00012ADC D068 0030                  		add.w	fb_origY(a0),d0
00012AE0 3140 000C                  		move.w	d0,obY(a0)
00012AE4 5241                       		addq.w	#1,d1
00012AE6 D268 0034                  		add.w	fb_origX(a0),d1
00012AEA 3141 0008                  		move.w	d1,obX(a0)
00012AEE 4E75                       		rts	
00012AF0                            ; ===========================================================================
00012AF0                            
00012AF0                            @loc_106CC:
00012AF0 5302                       		subq.b	#1,d2
00012AF2 6600                       		bne.s	@loc_106EA
00012AF4 5341                       		subq.w	#1,d1
00012AF6 9041                       		sub.w	d1,d0
00012AF8 4440                       		neg.w	d0
00012AFA D068 0034                  		add.w	fb_origX(a0),d0
00012AFE 3140 0008                  		move.w	d0,obX(a0)
00012B02 5241                       		addq.w	#1,d1
00012B04 D268 0030                  		add.w	fb_origY(a0),d1
00012B08 3141 000C                  		move.w	d1,obY(a0)
00012B0C 4E75                       		rts	
00012B0E                            ; ===========================================================================
00012B0E                            
00012B0E                            @loc_106EA:
00012B0E 9041                       		sub.w	d1,d0
00012B10 D068 0030                  		add.w	fb_origY(a0),d0
00012B14 3140 000C                  		move.w	d0,obY(a0)
00012B18 4441                       		neg.w	d1
00012B1A D268 0034                  		add.w	fb_origX(a0),d1
00012B1E 3141 0008                  		move.w	d1,obX(a0)
00012B22 4E75                       		rts	
00012B22 4E75                       		rts	
00012B24                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012B24                            ; ---------------------------------------------------------------------------
00012B24                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012B24                            ; ---------------------------------------------------------------------------
00012B24                            Map_FBlock_internal:
00012B24 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012B26 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012B28 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012B2A 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012B2C 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012B2E 0000                       		dc.w @slz-Map_FBlock_internal
00012B30 0000                       		dc.w @lzvert-Map_FBlock_internal
00012B32 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012B34 01                         @syz1x1:	dc.b 1
00012B35 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012B3A 04                         @syz2x2:	dc.b 4
00012B3B E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012B40 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012B45 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012B4A 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012B4F 02                         @syz1x2:	dc.b 2
00012B50 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012B55 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012B5A 04                         @syzrect2x2:	dc.b 4
00012B5B E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012B60 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012B65 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012B6A 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012B6F 03                         @syzrect1x3:	dc.b 3
00012B70 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012B75 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012B7A 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012B7F 01                         @slz:		dc.b 1
00012B80 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012B85 02                         @lzvert:	dc.b 2
00012B86 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012B8B 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012B90 04                         @lzhoriz:	dc.b 4
00012B91 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012B96 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012B9B F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012BA0 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012BA6 00                         		even
00012BA6 00                         		even
00012BA6                            
00012BA6                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012BA6                            ; ---------------------------------------------------------------------------
00012BA6                            ; Object 57 - spiked balls (SYZ, LZ)
00012BA6                            ; ---------------------------------------------------------------------------
00012BA6                            
00012BA6                            SpikeBall:
00012BA6 7000                       		moveq	#0,d0
00012BA8 1028 0024                  		move.b	obRoutine(a0),d0
00012BAC 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012BB0 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012BB4                            ; ===========================================================================
00012BB4 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012BB6 0000                       		dc.w SBall_Move-SBall_Index
00012BB8 0000                       		dc.w SBall_Display-SBall_Index
00012BBA                            
00012BBA =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012BBA                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012BBA =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012BBA =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012BBA =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012BBA =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012BBA                            ; ===========================================================================
00012BBA                            
00012BBA                            SBall_Main:	; Routine 0
00012BBA 5428 0024                  		addq.b	#2,obRoutine(a0)
00012BBE 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012BC6 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012BCC 117C 0004 0001             		move.b	#4,obRender(a0)
00012BD2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012BD8 117C 0008 0014             		move.b	#8,obActWid(a0)
00012BDE 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012BE4 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012BEA 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012BF0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012BF6 6600                       		bne.s	@notlz
00012BF8                            
00012BF8 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012BFE 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012C04 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012C0C                            
00012C0C                            	@notlz:
00012C0C 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012C10 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012C14 4881                       		ext.w	d1
00012C16 E741                       		asl.w	#3,d1		; multiply by 8
00012C18 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012C1C 1028 0022                  		move.b	obStatus(a0),d0
00012C20 E418                       		ror.b	#2,d0
00012C22 0200 00C0                  		andi.b	#$C0,d0
00012C26 1140 0026                  		move.b	d0,obAngle(a0)
00012C2A 45E8 0029                  		lea	sball_childs(a0),a2
00012C2E 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012C32 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012C36 14FC 0000                  		move.b	#0,(a2)+
00012C3A 3601                       		move.w	d1,d3
00012C3C E94B                       		lsl.w	#4,d3
00012C3E 1143 003C                  		move.b	d3,sball_radius(a0)
00012C42 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012C44 6500                       		bcs.s	@fail
00012C46 0828 0003 0028             		btst	#3,obSubtype(a0)
00012C4C 6700                       		beq.s	@makechain
00012C4E 5341                       		subq.w	#1,d1
00012C50 6500                       		bcs.s	@fail
00012C52                            
00012C52                            @makechain:
00012C52 6100 D1C2                  		bsr.w	FindFreeObj
00012C56 6600                       		bne.s	@fail
00012C58 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012C5C 3A09                       		move.w	a1,d5		; get child object RAM address
00012C5E 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012C62 EC4D                       		lsr.w	#6,d5		; divide by $40
00012C64 0245 007F                  		andi.w	#$7F,d5
00012C68 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012C6A 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012C70 1290                       		move.b	0(a0),0(a1)
00012C72 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012C78 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012C7E 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012C84 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012C8A 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012C90 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012C96 0403 0010                  		subi.b	#$10,d3
00012C9A 1343 003C                  		move.b	d3,sball_radius(a1)
00012C9E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012CA4 6600                       		bne.s	@notlzagain
00012CA6                            
00012CA6 4A03                       		tst.b	d3
00012CA8 6600                       		bne.s	@notlzagain
00012CAA 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012CB0                            
00012CB0                            	@notlzagain:
00012CB0 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012CB4                            
00012CB4                            	@fail:
00012CB4 3A08                       		move.w	a0,d5
00012CB6 0445 D000                  		subi.w	#$D000,d5
00012CBA EC4D                       		lsr.w	#6,d5
00012CBC 0245 007F                  		andi.w	#$7F,d5
00012CC0 14C5                       		move.b	d5,(a2)+
00012CC2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012CC8 6600                       		bne.s	SBall_Move
00012CCA                            
00012CCA 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012CD0 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012CD6                            
00012CD6                            SBall_Move:	; Routine 2
00012CD6 6100 0000                  		bsr.w	@movesub
00012CDA 6000 0000                  		bra.w	@chkdel
00012CDE                            ; ===========================================================================
00012CDE                            
00012CDE                            @movesub:
00012CDE 3028 003E                  		move.w	sball_speed(a0),d0
00012CE2 D168 0026                  		add.w	d0,obAngle(a0)
00012CE6 1028 0026                  		move.b	obAngle(a0),d0
00012CEA 4EB9 0000 3A36             		jsr	(CalcSine).l
00012CF0 3428 0038                  		move.w	sball_origY(a0),d2
00012CF4 3628 003A                  		move.w	sball_origX(a0),d3
00012CF8 45E8 0029                  		lea	sball_childs(a0),a2
00012CFC 7C00                       		moveq	#0,d6
00012CFE 1C1A                       		move.b	(a2)+,d6
00012D00                            
00012D00                            	@loop:
00012D00 7800                       		moveq	#0,d4
00012D02 181A                       		move.b	(a2)+,d4
00012D04 ED4C                       		lsl.w	#6,d4
00012D06 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012D0C 2244                       		movea.l	d4,a1
00012D0E 7800                       		moveq	#0,d4
00012D10 1829 003C                  		move.b	sball_radius(a1),d4
00012D14 2A04                       		move.l	d4,d5
00012D16 C9C0                       		muls.w	d0,d4
00012D18 E084                       		asr.l	#8,d4
00012D1A CBC1                       		muls.w	d1,d5
00012D1C E085                       		asr.l	#8,d5
00012D1E D842                       		add.w	d2,d4
00012D20 DA43                       		add.w	d3,d5
00012D22 3344 000C                  		move.w	d4,obY(a1)
00012D26 3345 0008                  		move.w	d5,obX(a1)
00012D2A 51CE FFD4                  		dbf	d6,@loop
00012D2E 4E75                       		rts	
00012D30                            ; ===========================================================================
00012D30                            
00012D30                            @chkdel:
00012D4E 6000 CC3A                  		bra.w	DisplaySprite
00012D52                            ; ===========================================================================
00012D52                            
00012D52                            @delete:
00012D52 7400                       		moveq	#0,d2
00012D54 45E8 0029                  		lea	sball_childs(a0),a2
00012D58 141A                       		move.b	(a2)+,d2
00012D5A                            
00012D5A                            	@deleteloop:
00012D5A 7000                       		moveq	#0,d0
00012D5C 101A                       		move.b	(a2)+,d0
00012D5E ED48                       		lsl.w	#6,d0
00012D60 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012D66 2240                       		movea.l	d0,a1
00012D68 6100 CC62                  		bsr.w	DeleteChild
00012D6C 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012D70                            
00012D70 4E75                       		rts	
00012D72                            ; ===========================================================================
00012D72                            
00012D72                            SBall_Display:	; Routine 4
00012D72 6000 CC16                  		bra.w	DisplaySprite
00012D72 6000 CC16                  		bra.w	DisplaySprite
00012D76                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012D76                            ; ---------------------------------------------------------------------------
00012D76                            ; Sprite mappings - chain of spiked balls (SYZ)
00012D76                            ; ---------------------------------------------------------------------------
00012D76                            Map_SBall_internal:
00012D76 0000                       		dc.w @0-Map_SBall_internal
00012D78 01                         @0:		dc.b 1
00012D79 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012D7E                            		even
00012D7E                            		even
00012D7E                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012D7E                            ; ---------------------------------------------------------------------------
00012D7E                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012D7E                            ; ---------------------------------------------------------------------------
00012D7E                            Map_SBall2_internal:
00012D7E 0000                       		dc.w @chain-Map_SBall2_internal
00012D80 0000                       		dc.w @spikeball-Map_SBall2_internal
00012D82 0000                       		dc.w @base-Map_SBall2_internal
00012D84 01                         @chain:		dc.b 1
00012D85 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012D8A 01                         @spikeball:	dc.b 1
00012D8B F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012D90 01                         @base:		dc.b 1
00012D91 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012D96                            		even
00012D96                            		even
00012D96                            		include	"_incObj\58 Big Spiked Ball.asm"
00012D96                            ; ---------------------------------------------------------------------------
00012D96                            ; Object 58 - giant spiked balls (SYZ)
00012D96                            ; ---------------------------------------------------------------------------
00012D96                            
00012D96                            BigSpikeBall:
00012D96 7000                       		moveq	#0,d0
00012D98 1028 0024                  		move.b	obRoutine(a0),d0
00012D9C 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012DA0 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012DA4                            ; ===========================================================================
00012DA4 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012DA6 0000                       		dc.w BBall_Move-BBall_Index
00012DA8                            
00012DA8 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012DA8 =00000038                  bball_origY:	equ $38		; original y-axis position
00012DA8 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012DA8 =0000003E                  bball_speed:	equ $3E		; speed
00012DA8                            ; ===========================================================================
00012DA8                            
00012DA8                            BBall_Main:	; Routine 0
00012DA8 5428 0024                  		addq.b	#2,obRoutine(a0)
00012DAC 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012DB4 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012DBA 117C 0004 0001             		move.b	#4,obRender(a0)
00012DC0 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012DC6 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012DCC 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012DD2 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012DD8 117C 0086 0020             		move.b	#$86,obColType(a0)
00012DDE 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012DE2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012DE6 4881                       		ext.w	d1
00012DE8 E741                       		asl.w	#3,d1		; multiply by 8
00012DEA 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012DEE 1028 0022                  		move.b	obStatus(a0),d0
00012DF2 E418                       		ror.b	#2,d0
00012DF4 0200 00C0                  		andi.b	#$C0,d0
00012DF8 1140 0026                  		move.b	d0,obAngle(a0)
00012DFC 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012E02                            
00012E02                            BBall_Move:	; Routine 2
00012E02 7000                       		moveq	#0,d0
00012E04 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012E08 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012E0C D040                       		add.w	d0,d0
00012E0E 323B 0000                  		move.w	@index(pc,d0.w),d1
00012E12 4EBB 1000                  		jsr	@index(pc,d1.w)
00012E34 6000 CB54                  		bra.w	DisplaySprite
00012E38                            ; ===========================================================================
00012E38 0000                       @index:		dc.w @type00-@index
00012E3A 0000                       		dc.w @type01-@index
00012E3C 0000                       		dc.w @type02-@index
00012E3E 0000                       		dc.w @type03-@index
00012E40                            ; ===========================================================================
00012E40                            
00012E40                            @type00:
00012E40 4E75                       		rts	
00012E42                            ; ===========================================================================
00012E42                            
00012E42                            @type01:
00012E42 323C 0060                  		move.w	#$60,d1
00012E46 7000                       		moveq	#0,d0
00012E48 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E4C 0828 0000 0022             		btst	#0,obStatus(a0)
00012E52 6700                       		beq.s	@noflip1
00012E54 4440                       		neg.w	d0
00012E56 D041                       		add.w	d1,d0
00012E58                            
00012E58                            	@noflip1:
00012E58 3228 003A                  		move.w	bball_origX(a0),d1
00012E5C 9240                       		sub.w	d0,d1
00012E5E 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012E62 4E75                       		rts	
00012E64                            ; ===========================================================================
00012E64                            
00012E64                            @type02:
00012E64 323C 0060                  		move.w	#$60,d1
00012E68 7000                       		moveq	#0,d0
00012E6A 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E6E 0828 0000 0022             		btst	#0,obStatus(a0)
00012E74 6700                       		beq.s	@noflip2
00012E76 4440                       		neg.w	d0
00012E78 0640 0080                  		addi.w	#$80,d0
00012E7C                            
00012E7C                            	@noflip2:
00012E7C 3228 0038                  		move.w	bball_origY(a0),d1
00012E80 9240                       		sub.w	d0,d1
00012E82 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012E86 4E75                       		rts	
00012E88                            ; ===========================================================================
00012E88                            
00012E88                            @type03:
00012E88 3028 003E                  		move.w	bball_speed(a0),d0
00012E8C D168 0026                  		add.w	d0,obAngle(a0)
00012E90 1028 0026                  		move.b	obAngle(a0),d0
00012E94 4EB9 0000 3A36             		jsr	(CalcSine).l
00012E9A 3428 0038                  		move.w	bball_origY(a0),d2
00012E9E 3628 003A                  		move.w	bball_origX(a0),d3
00012EA2 7800                       		moveq	#0,d4
00012EA4 1828 003C                  		move.b	bball_radius(a0),d4
00012EA8 2A04                       		move.l	d4,d5
00012EAA C9C0                       		muls.w	d0,d4
00012EAC E084                       		asr.l	#8,d4
00012EAE CBC1                       		muls.w	d1,d5
00012EB0 E085                       		asr.l	#8,d5
00012EB2 D842                       		add.w	d2,d4
00012EB4 DA43                       		add.w	d3,d5
00012EB6 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012EBA 3145 0008                  		move.w	d5,obX(a0)
00012EBE 4E75                       		rts	
00012EBE 4E75                       		rts	
00012EC0                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012EC0                            ; --------------------------------------------------------------------------------
00012EC0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012EC0                            ; --------------------------------------------------------------------------------
00012EC0                            
00012EC0                            SME_u_DKx:	
00012EC0 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012EC4 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012EC6 05                         SME_u_DKx_6:	dc.b 5	
00012EC7 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012ECC F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012ED1 F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012ED6 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012EDB 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012EE0 01                         SME_u_DKx_20:	dc.b 1	
00012EE1 F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012EE6 02                         SME_u_DKx_26:	dc.b 2	
00012EE7 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012EEC E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012EF2 00                         		even
00012EF2 00                         		even
00012EF2                            		include	"_incObj\59 SLZ Elevators.asm"
00012EF2                            ; ---------------------------------------------------------------------------
00012EF2                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012EF2                            ; ---------------------------------------------------------------------------
00012EF2                            
00012EF2                            Elevator:
00012EF2 7000                       		moveq	#0,d0
00012EF4 1028 0024                  		move.b	obRoutine(a0),d0
00012EF8 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012EFC 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012F1E 6000 CA6A                  		bra.w	DisplaySprite
00012F22                            ; ===========================================================================
00012F22 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012F24 0000                       		dc.w Elev_Platform-Elev_Index
00012F26 0000                       		dc.w Elev_Action-Elev_Index
00012F28 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012F2A                            
00012F2A =00000032                  elev_origX:	equ $32		; original x-axis position
00012F2A =00000030                  elev_origY:	equ $30		; original y-axis position
00012F2A =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012F2A                            
00012F2A 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012F2C                            
00012F2C 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012F2E 2001                       		dc.b $20, 1
00012F30 3401                       		dc.b $34, 1
00012F32 1003                       		dc.b $10, 3
00012F34 2003                       		dc.b $20, 3
00012F36 3403                       		dc.b $34, 3
00012F38 1401                       		dc.b $14, 1
00012F3A 2401                       		dc.b $24, 1
00012F3C 2C01                       		dc.b $2C, 1
00012F3E 1403                       		dc.b $14, 3
00012F40 2403                       		dc.b $24, 3
00012F42 2C03                       		dc.b $2C, 3
00012F44 2005                       		dc.b $20, 5
00012F46 2007                       		dc.b $20, 7
00012F48 3009                       		dc.b $30, 9
00012F4A                            ; ===========================================================================
00012F4A                            
00012F4A                            Elev_Main:	; Routine 0
00012F4A 5428 0024                  		addq.b	#2,obRoutine(a0)
00012F4E 7000                       		moveq	#0,d0
00012F50 1028 0028                  		move.b	obSubtype(a0),d0
00012F54 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012F56 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012F5A 0240 007F                  		andi.w	#$7F,d0
00012F5E C0FC 0006                  		mulu.w	#6,d0
00012F62 3140 003C                  		move.w	d0,elev_dist(a0)
00012F66 3140 003E                  		move.w	d0,$3E(a0)
00012F6A 588F                       		addq.l	#4,sp
00012F6C 4E75                       		rts	
00012F6E                            ; ===========================================================================
00012F6E                            
00012F6E                            	@normal:
00012F6E E648                       		lsr.w	#3,d0
00012F70 0240 001E                  		andi.w	#$1E,d0
00012F74 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012F78 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012F7C 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012F80 7000                       		moveq	#0,d0
00012F82 1028 0028                  		move.b	obSubtype(a0),d0
00012F86 D040                       		add.w	d0,d0
00012F88 0240 001E                  		andi.w	#$1E,d0
00012F8C 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012F90 101A                       		move.b	(a2)+,d0
00012F92 E548                       		lsl.w	#2,d0
00012F94 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012F98 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012F9C 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012FA4 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012FAA 117C 0004 0001             		move.b	#4,obRender(a0)
00012FB0 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012FB6 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012FBC 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012FC2                            
00012FC2                            Elev_Platform:	; Routine 2
00012FC2 7200                       		moveq	#0,d1
00012FC4 1228 0014                  		move.b	obActWid(a0),d1
00012FC8 4EB9 0000 9098             		jsr	(PlatformObject).l
00012FCE 6000 0000                  		bra.w	Elev_Types
00012FD2                            ; ===========================================================================
00012FD2                            
00012FD2                            Elev_Action:	; Routine 4
00012FD2 7200                       		moveq	#0,d1
00012FD4 1228 0014                  		move.b	obActWid(a0),d1
00012FD8 4EB9 0000 920C             		jsr	(ExitPlatform).l
00012FDE 3F28 0008                  		move.w	obX(a0),-(sp)
00012FE2 6100 0000                  		bsr.w	Elev_Types
00012FE6 341F                       		move.w	(sp)+,d2
00012FE8 4A10                       		tst.b	0(a0)
00012FEA 6700                       		beq.s	@deleted
00012FEC 4EF9 0000 9776             		jmp	(MvSonicOnPtfm2).l
00012FF2                            
00012FF2                            	@deleted:
00012FF2 4E75                       		rts	
00012FF4                            ; ===========================================================================
00012FF4                            
00012FF4                            Elev_Types:
00012FF4 7000                       		moveq	#0,d0
00012FF6 1028 0028                  		move.b	obSubtype(a0),d0
00012FFA 0240 000F                  		andi.w	#$F,d0
00012FFE D040                       		add.w	d0,d0
00013000 323B 0000                  		move.w	@index(pc,d0.w),d1
00013004 4EFB 1000                  		jmp	@index(pc,d1.w)
00013008                            ; ===========================================================================
00013008 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0001300C 0000 0000                  		dc.w @type02-@index, @type01-@index
00013010 0000 0000                  		dc.w @type04-@index, @type01-@index
00013014 0000 0000                  		dc.w @type06-@index, @type01-@index
00013018 0000 0000                  		dc.w @type08-@index, @type09-@index
0001301C                            ; ===========================================================================
0001301C                            
0001301C                            @type00:
0001301C 4E75                       		rts	
0001301E                            ; ===========================================================================
0001301E                            
0001301E                            @type01:
0001301E 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00013024 6600                       		bne.s	@notstanding
00013026 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
0001302A                            
0001302A                            	@notstanding:
0001302A 4E75                       		rts	
0001302C                            ; ===========================================================================
0001302C                            
0001302C                            @type02:
0001302C 6100 0000                  		bsr.w	Elev_Move
00013030 3028 0034                  		move.w	$34(a0),d0
00013034 4440                       		neg.w	d0
00013036 D068 0030                  		add.w	elev_origY(a0),d0
0001303A 3140 000C                  		move.w	d0,obY(a0)
0001303E 4E75                       		rts	
00013040                            ; ===========================================================================
00013040                            
00013040                            @type04:
00013040 6100 0000                  		bsr.w	Elev_Move
00013044 3028 0034                  		move.w	$34(a0),d0
00013048 D068 0030                  		add.w	elev_origY(a0),d0
0001304C 3140 000C                  		move.w	d0,obY(a0)
00013050 4E75                       		rts	
00013052                            ; ===========================================================================
00013052                            
00013052                            @type06:
00013052 6100 0000                  		bsr.w	Elev_Move
00013056 3028 0034                  		move.w	$34(a0),d0
0001305A E240                       		asr.w	#1,d0
0001305C 4440                       		neg.w	d0
0001305E D068 0030                  		add.w	elev_origY(a0),d0
00013062 3140 000C                  		move.w	d0,obY(a0)
00013066 3028 0034                  		move.w	$34(a0),d0
0001306A D068 0032                  		add.w	elev_origX(a0),d0
0001306E 3140 0008                  		move.w	d0,obX(a0)
00013072 4E75                       		rts	
00013074                            ; ===========================================================================
00013074                            
00013074                            @type08:
00013074 6100 0000                  		bsr.w	Elev_Move
00013078 3028 0034                  		move.w	$34(a0),d0
0001307C E240                       		asr.w	#1,d0
0001307E D068 0030                  		add.w	elev_origY(a0),d0
00013082 3140 000C                  		move.w	d0,obY(a0)
00013086 3028 0034                  		move.w	$34(a0),d0
0001308A 4440                       		neg.w	d0
0001308C D068 0032                  		add.w	elev_origX(a0),d0
00013090 3140 0008                  		move.w	d0,obX(a0)
00013094 4E75                       		rts	
00013096                            ; ===========================================================================
00013096                            
00013096                            @type09:
00013096 6100 0000                  		bsr.w	Elev_Move
0001309A 3028 0034                  		move.w	$34(a0),d0
0001309E 4440                       		neg.w	d0
000130A0 D068 0030                  		add.w	elev_origY(a0),d0
000130A4 3140 000C                  		move.w	d0,obY(a0)
000130A8 4A28 0028                  		tst.b	obSubtype(a0)
000130AC 6700 0000                  		beq.w	@typereset
000130B0 4E75                       		rts	
000130B2                            ; ===========================================================================
000130B2                            
000130B2                            	@typereset:
000130B2 0828 0003 0022             		btst	#3,obStatus(a0)
000130B8 6700                       		beq.s	@delete
000130BA 08E9 0001 0022             		bset	#1,obStatus(a1)
000130C0 08A9 0003 0022             		bclr	#3,obStatus(a1)
000130C6 137C 0002 0024             		move.b	#2,obRoutine(a1)
000130CC                            
000130CC                            	@delete:
000130CC 6000 C8FC                  		bra.w	DeleteObject
000130D0                            
000130D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000130D0                            
000130D0                            
000130D0                            Elev_Move:
000130D0 3028 0038                  		move.w	$38(a0),d0
000130D4 4A28 003A                  		tst.b	$3A(a0)
000130D8 6600                       		bne.s	loc_10CC8
000130DA 0C40 0800                  		cmpi.w	#$800,d0
000130DE 6400                       		bcc.s	loc_10CD0
000130E0 0640 0010                  		addi.w	#$10,d0
000130E4 6000                       		bra.s	loc_10CD0
000130E6                            ; ===========================================================================
000130E6                            
000130E6                            loc_10CC8:
000130E6 4A40                       		tst.w	d0
000130E8 6700                       		beq.s	loc_10CD0
000130EA 0440 0010                  		subi.w	#$10,d0
000130EE                            
000130EE                            loc_10CD0:
000130EE 3140 0038                  		move.w	d0,$38(a0)
000130F2 48C0                       		ext.l	d0
000130F4 E180                       		asl.l	#8,d0
000130F6 D0A8 0034                  		add.l	$34(a0),d0
000130FA 2140 0034                  		move.l	d0,$34(a0)
000130FE 4840                       		swap	d0
00013100 3428 003C                  		move.w	elev_dist(a0),d2
00013104 B042                       		cmp.w	d2,d0
00013106 6300                       		bls.s	loc_10CF0
00013108 117C 0001 003A             		move.b	#1,$3A(a0)
0001310E                            
0001310E                            loc_10CF0:
0001310E D442                       		add.w	d2,d2
00013110 B042                       		cmp.w	d2,d0
00013112 6600                       		bne.s	locret_10CFA
00013114 4228 0028                  		clr.b	obSubtype(a0)
00013118                            
00013118                            locret_10CFA:
00013118 4E75                       		rts	
0001311A                            ; End of function Elev_Move
0001311A                            
0001311A                            ; ===========================================================================
0001311A                            
0001311A                            Elev_MakeMulti:	; Routine 6
0001311A 5368 003C                  		subq.w	#1,elev_dist(a0)
0001311E 6600                       		bne.s	@chkdel
00013120 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00013126 6100 CCEE                  		bsr.w	FindFreeObj
0001312A 6600                       		bne.s	@chkdel
0001312C 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00013130 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013136 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001313C 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00013142                            
00013142                            @chkdel:
00013142 588F                       		addq.l	#4,sp
00013162 4E75                       		rts	
00013162 4E75                       		rts	
00013164                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00013164                            ; ---------------------------------------------------------------------------
00013164                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00013164                            ; ---------------------------------------------------------------------------
00013164                            Map_Elev_internal:
00013164 0000                       		dc.w @elevator-Map_Elev_internal
00013166 03                         @elevator:	dc.b 3
00013167 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001316C F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00013171 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00013176                            		even
00013176                            		even
00013176                            		include	"_incObj\5A SLZ Circling Platform.asm"
00013176                            ; ---------------------------------------------------------------------------
00013176                            ; Object 5A - platforms	moving in circles (SLZ)
00013176                            ; ---------------------------------------------------------------------------
00013176                            
00013176                            CirclingPlatform:
00013176 7000                       		moveq	#0,d0
00013178 1028 0024                  		move.b	obRoutine(a0),d0
0001317C 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00013180 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
000131A2 6000 C7E6                  		bra.w	DisplaySprite
000131A6                            ; ===========================================================================
000131A6 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
000131A8 0000                       		dc.w Circ_Platform-Circ_Index
000131AA 0000                       		dc.w Circ_Action-Circ_Index
000131AC                            
000131AC =00000032                  circ_origX:	equ $32		; original x-axis position
000131AC =00000030                  circ_origY:	equ $30		; original y-axis position
000131AC                            ; ===========================================================================
000131AC                            
000131AC                            Circ_Main:	; Routine 0
000131AC 5428 0024                  		addq.b	#2,obRoutine(a0)
000131B0 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
000131B8 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000131BE 117C 0004 0001             		move.b	#4,obRender(a0)
000131C4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000131CA 117C 0018 0014             		move.b	#$18,obActWid(a0)
000131D0 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
000131D6 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
000131DC                            
000131DC                            Circ_Platform:	; Routine 2
000131DC 7200                       		moveq	#0,d1
000131DE 1228 0014                  		move.b	obActWid(a0),d1
000131E2 4EB9 0000 9098             		jsr	(PlatformObject).l
000131E8 6000 0000                  		bra.w	Circ_Types
000131EC                            ; ===========================================================================
000131EC                            
000131EC                            Circ_Action:	; Routine 4
000131EC 7200                       		moveq	#0,d1
000131EE 1228 0014                  		move.b	obActWid(a0),d1
000131F2 4EB9 0000 920C             		jsr	(ExitPlatform).l
000131F8 3F28 0008                  		move.w	obX(a0),-(sp)
000131FC 6100 0000                  		bsr.w	Circ_Types
00013200 341F                       		move.w	(sp)+,d2
00013202 4EF9 0000 9776             		jmp	(MvSonicOnPtfm2).l
00013208                            ; ===========================================================================
00013208                            
00013208                            Circ_Types:
00013208 7000                       		moveq	#0,d0
0001320A 1028 0028                  		move.b	obSubtype(a0),d0
0001320E 0240 000C                  		andi.w	#$C,d0
00013212 E248                       		lsr.w	#1,d0
00013214 323B 0000                  		move.w	@index(pc,d0.w),d1
00013218 4EFB 1000                  		jmp	@index(pc,d1.w)
0001321C                            ; ===========================================================================
0001321C 0000                       @index:		dc.w @type00-@index
0001321E 0000                       		dc.w @type04-@index
00013220                            ; ===========================================================================
00013220                            
00013220                            @type00:
00013220 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00013224 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00013228 4881                       		ext.w	d1
0001322A 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
0001322E 0402 0050                  		subi.b	#$50,d2
00013232 4882                       		ext.w	d2
00013234 0828 0000 0028             		btst	#0,obSubtype(a0)
0001323A 6700                       		beq.s	@noshift00a
0001323C 4441                       		neg.w	d1
0001323E 4442                       		neg.w	d2
00013240                            
00013240                            	@noshift00a:
00013240 0828 0001 0028             		btst	#1,obSubtype(a0)
00013246 6700                       		beq.s	@noshift00b
00013248 4441                       		neg.w	d1
0001324A C342                       		exg	d1,d2
0001324C                            
0001324C                            	@noshift00b:
0001324C D268 0032                  		add.w	circ_origX(a0),d1
00013250 3141 0008                  		move.w	d1,obX(a0)
00013254 D468 0030                  		add.w	circ_origY(a0),d2
00013258 3142 000C                  		move.w	d2,obY(a0)
0001325C 4E75                       		rts	
0001325E                            ; ===========================================================================
0001325E                            
0001325E                            @type04:
0001325E 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00013262 0401 0050                  		subi.b	#$50,d1
00013266 4881                       		ext.w	d1
00013268 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
0001326C 0402 0050                  		subi.b	#$50,d2
00013270 4882                       		ext.w	d2
00013272 0828 0000 0028             		btst	#0,obSubtype(a0)
00013278 6700                       		beq.s	@noshift04a
0001327A 4441                       		neg.w	d1
0001327C 4442                       		neg.w	d2
0001327E                            
0001327E                            	@noshift04a:
0001327E 0828 0001 0028             		btst	#1,obSubtype(a0)
00013284 6700                       		beq.s	@noshift04b
00013286 4441                       		neg.w	d1
00013288 C342                       		exg	d1,d2
0001328A                            
0001328A                            	@noshift04b:
0001328A 4441                       		neg.w	d1
0001328C D268 0032                  		add.w	circ_origX(a0),d1
00013290 3141 0008                  		move.w	d1,obX(a0)
00013294 D468 0030                  		add.w	circ_origY(a0),d2
00013298 3142 000C                  		move.w	d2,obY(a0)
0001329C 4E75                       		rts	
0001329C 4E75                       		rts	
0001329E                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
0001329E                            ; ---------------------------------------------------------------------------
0001329E                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001329E                            ; ---------------------------------------------------------------------------
0001329E                            Map_Circ_internal:
0001329E 0000                       		dc.w @platform-Map_Circ_internal
000132A0 02                         @platform:	dc.b 2
000132A1 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000132A6 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000132AC 00                         		even
000132AC 00                         		even
000132AC                            		include	"_incObj\5B Staircase.asm"
000132AC                            ; ---------------------------------------------------------------------------
000132AC                            ; Object 5B - blocks that form a staircase (SLZ)
000132AC                            ; ---------------------------------------------------------------------------
000132AC                            
000132AC                            Staircase:
000132AC 7000                       		moveq	#0,d0
000132AE 1028 0024                  		move.b	obRoutine(a0),d0
000132B2 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
000132B6 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
000132D8 6000 C6B0                  		bra.w	DisplaySprite
000132DC                            ; ===========================================================================
000132DC 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
000132DE 0000                       		dc.w Stair_Move-Stair_Index
000132E0 0000                       		dc.w Stair_Solid-Stair_Index
000132E2                            
000132E2 =00000030                  stair_origX:	equ $30		; original x-axis position
000132E2 =00000032                  stair_origY:	equ $32		; original y-axis position
000132E2                            
000132E2 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
000132E2                            ; ===========================================================================
000132E2                            
000132E2                            Stair_Main:	; Routine 0
000132E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000132E6 7638                       		moveq	#$38,d3
000132E8 7801                       		moveq	#1,d4
000132EA 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
000132F0 6700                       		beq.s	@notflipped	; if not, branch
000132F2 763B                       		moveq	#$3B,d3
000132F4 78FF                       		moveq	#-1,d4
000132F6                            
000132F6                            	@notflipped:
000132F6 3428 0008                  		move.w	obX(a0),d2
000132FA 2248                       		movea.l	a0,a1
000132FC 7203                       		moveq	#3,d1
000132FE 6000                       		bra.s	@makeblocks
00013300                            ; ===========================================================================
00013300                            
00013300                            @loop:
00013300 6100 CB2A                  		bsr.w	FindNextFreeObj
00013304 6600 0000                  		bne.w	@fail
00013308 137C 0004 0024             		move.b	#4,obRoutine(a1)
0001330E                            
0001330E                            @makeblocks:
0001330E 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00013312 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
0001331A 337C 4000 0002             		move.w	#$4000,obGfx(a1)
00013320 137C 0004 0001             		move.b	#4,obRender(a1)
00013326 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001332C 137C 0010 0014             		move.b	#$10,obActWid(a1)
00013332 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00013338 3342 0008                  		move.w	d2,obX(a1)
0001333C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013342 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00013348 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
0001334E 0642 0020                  		addi.w	#$20,d2
00013352 1343 0037                  		move.b	d3,$37(a1)
00013356 2348 003C                  		move.l	a0,stair_parent(a1)
0001335A D604                       		add.b	d4,d3
0001335C 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
00013360                            
00013360                            	@fail:
00013360                            
00013360                            Stair_Move:	; Routine 2
00013360 7000                       		moveq	#0,d0
00013362 1028 0028                  		move.b	obSubtype(a0),d0
00013366 0240 0007                  		andi.w	#7,d0
0001336A D040                       		add.w	d0,d0
0001336C 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
00013370 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00013374                            
00013374                            Stair_Solid:	; Routine 4
00013374 2468 003C                  		movea.l	stair_parent(a0),a2
00013378 7000                       		moveq	#0,d0
0001337A 1028 0037                  		move.b	$37(a0),d0
0001337E 1032 0000                  		move.b	(a2,d0.w),d0
00013382 D068 0032                  		add.w	stair_origY(a0),d0
00013386 3140 000C                  		move.w	d0,obY(a0)
0001338A 7200                       		moveq	#0,d1
0001338C 1228 0014                  		move.b	obActWid(a0),d1
00013390 0641 000B                  		addi.w	#$B,d1
00013394 343C 0010                  		move.w	#$10,d2
00013398 363C 0011                  		move.w	#$11,d3
0001339C 3828 0008                  		move.w	obX(a0),d4
000133A0 6100 E9F6                  		bsr.w	SolidObject
000133A4 4A04                       		tst.b	d4
000133A6 6A00                       		bpl.s	loc_10F92
000133A8 1544 0036                  		move.b	d4,$36(a2)
000133AC                            
000133AC                            loc_10F92:
000133AC 0828 0003 0022             		btst	#3,obStatus(a0)
000133B2 6700                       		beq.s	locret_10FA0
000133B4 157C 0001 0036             		move.b	#1,$36(a2)
000133BA                            
000133BA                            locret_10FA0:
000133BA 4E75                       		rts	
000133BC                            ; ===========================================================================
000133BC 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
000133BE 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000133C0 0000                       		dc.w Stair_Type02-Stair_TypeIndex
000133C2 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000133C4                            ; ===========================================================================
000133C4                            
000133C4                            Stair_Type00:
000133C4 4A68 0034                  		tst.w	$34(a0)
000133C8 6600                       		bne.s	loc_10FC0
000133CA 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000133D0 6600                       		bne.s	locret_10FBE
000133D2 317C 001E 0034             		move.w	#$1E,$34(a0)
000133D8                            
000133D8                            locret_10FBE:
000133D8 4E75                       		rts	
000133DA                            ; ===========================================================================
000133DA                            
000133DA                            loc_10FC0:
000133DA 5368 0034                  		subq.w	#1,$34(a0)
000133DE 66F8                       		bne.s	locret_10FBE
000133E0 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000133E4 4E75                       		rts	
000133E6                            ; ===========================================================================
000133E6                            
000133E6                            Stair_Type02:
000133E6 4A68 0034                  		tst.w	$34(a0)
000133EA 6600                       		bne.s	loc_10FE0
000133EC 4A28 0036                  		tst.b	$36(a0)
000133F0 6A00                       		bpl.s	locret_10FDE
000133F2 317C 003C 0034             		move.w	#$3C,$34(a0)
000133F8                            
000133F8                            locret_10FDE:
000133F8 4E75                       		rts	
000133FA                            ; ===========================================================================
000133FA                            
000133FA                            loc_10FE0:
000133FA 5368 0034                  		subq.w	#1,$34(a0)
000133FE 6600                       		bne.s	loc_10FEC
00013400 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013404 4E75                       		rts	
00013406                            ; ===========================================================================
00013406                            
00013406                            loc_10FEC:
00013406 43E8 0038                  		lea	$38(a0),a1
0001340A 3028 0034                  		move.w	$34(a0),d0
0001340E E408                       		lsr.b	#2,d0
00013410 0200 0001                  		andi.b	#1,d0
00013414 12C0                       		move.b	d0,(a1)+
00013416 0A00 0001                  		eori.b	#1,d0
0001341A 12C0                       		move.b	d0,(a1)+
0001341C 0A00 0001                  		eori.b	#1,d0
00013420 12C0                       		move.b	d0,(a1)+
00013422 0A00 0001                  		eori.b	#1,d0
00013426 12C0                       		move.b	d0,(a1)+
00013428 4E75                       		rts	
0001342A                            ; ===========================================================================
0001342A                            
0001342A                            Stair_Type01:
0001342A 43E8 0038                  		lea	$38(a0),a1
0001342E 0C11 0080                  		cmpi.b	#$80,(a1)
00013432 6700                       		beq.s	locret_11038
00013434 5211                       		addq.b	#1,(a1)
00013436 7200                       		moveq	#0,d1
00013438 1219                       		move.b	(a1)+,d1
0001343A 4841                       		swap	d1
0001343C E289                       		lsr.l	#1,d1
0001343E 2401                       		move.l	d1,d2
00013440 E289                       		lsr.l	#1,d1
00013442 2601                       		move.l	d1,d3
00013444 D682                       		add.l	d2,d3
00013446 4841                       		swap	d1
00013448 4842                       		swap	d2
0001344A 4843                       		swap	d3
0001344C 12C3                       		move.b	d3,(a1)+
0001344E 12C2                       		move.b	d2,(a1)+
00013450 12C1                       		move.b	d1,(a1)+
00013452                            
00013452                            locret_11038:
00013452 4E75                       		rts	
00013454 4E75                       		rts	
00013454 4E75                       		rts	
00013456                            Map_Stair:	include	"_maps\Staircase.asm"
00013456                            ; ---------------------------------------------------------------------------
00013456                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00013456                            ; ---------------------------------------------------------------------------
00013456                            Map_Stair_internal:
00013456 0000                       		dc.w @block-Map_Stair_internal
00013458 01                         @block:		dc.b 1
00013459 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001345E                            		even
0001345E                            		even
0001345E                            		include	"_incObj\5C Pylon.asm"
0001345E                            ; ---------------------------------------------------------------------------
0001345E                            ; Object 5C - metal pylons in foreground (SLZ)
0001345E                            ; ---------------------------------------------------------------------------
0001345E                            
0001345E                            Pylon:
0001345E 7000                       		moveq	#0,d0
00013460 1028 0024                  		move.b	obRoutine(a0),d0
00013464 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
00013468 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
0001346C                            ; ===========================================================================
0001346C 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
0001346E 0000                       		dc.w Pyl_Display-Pyl_Index
00013470                            ; ===========================================================================
00013470                            
00013470                            Pyl_Main:	; Routine 0
00013470 5428 0024                  		addq.b	#2,obRoutine(a0)
00013474 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
0001347C 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
00013482 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013488                            
00013488                            Pyl_Display:	; Routine 2
00013488 2238 F700                  		move.l	(v_screenposx).w,d1
0001348C D281                       		add.l	d1,d1
0001348E 4841                       		swap	d1
00013490 4441                       		neg.w	d1
00013492 3141 0008                  		move.w	d1,obX(a0)
00013496 2238 F704                  		move.l	(v_screenposy).w,d1
0001349A D281                       		add.l	d1,d1
0001349C 4841                       		swap	d1
0001349E 0241 003F                  		andi.w	#$3F,d1
000134A2 4441                       		neg.w	d1
000134A4 0641 0100                  		addi.w	#$100,d1
000134A8 3141 000A                  		move.w	d1,obScreenY(a0)
000134AC 6000 C4DC                  		bra.w	DisplaySprite
000134AC 6000 C4DC                  		bra.w	DisplaySprite
000134B0                            Map_Pylon:	include	"_maps\Pylon.asm"
000134B0                            ; ---------------------------------------------------------------------------
000134B0                            ; Sprite mappings - metal pylons in foreground (SLZ)
000134B0                            ; ---------------------------------------------------------------------------
000134B0                            Map_Pylon_internal:
000134B0 0000                       		dc.w @pylon-Map_Pylon_internal
000134B2 09                         @pylon:		dc.b 9
000134B3 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000134B8 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000134BD C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000134C2 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000134C7 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000134CC 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000134D1 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000134D6 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000134DB 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000134E0                            		even
000134E0                            		even
000134E0                            
000134E0                            		include	"_incObj\1B Water Surface.asm"
000134E0                            ; ---------------------------------------------------------------------------
000134E0                            ; Object 1B - water surface (LZ)
000134E0                            ; ---------------------------------------------------------------------------
000134E0                            
000134E0                            WaterSurface:
000134E0 7000                       		moveq	#0,d0
000134E2 1028 0024                  		move.b	obRoutine(a0),d0
000134E6 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000134EA 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000134EE                            ; ===========================================================================
000134EE 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000134F0 0000                       		dc.w Surf_Action-Surf_Index
000134F2                            
000134F2 =00000030                  surf_origX:	equ $30		; original x-axis position
000134F2 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000134F2                            ; ===========================================================================
000134F2                            
000134F2                            Surf_Main:	; Routine 0
000134F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000134F6 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000134FE 317C C300 0002             		move.w	#$C300,obGfx(a0)
00013504 117C 0004 0001             		move.b	#4,obRender(a0)
0001350A 117C 0080 0014             		move.b	#$80,obActWid(a0)
00013510 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
00013516                            
00013516                            Surf_Action:	; Routine 2
00013516 3238 F700                  		move.w	(v_screenposx).w,d1
0001351A 0241 FFE0                  		andi.w	#$FFE0,d1
0001351E D268 0030                  		add.w	surf_origX(a0),d1
00013522 0838 0000 FE05             		btst	#0,(v_framebyte).w
00013528 6700                       		beq.s	@even		; branch on even frames
0001352A 0641 0020                  		addi.w	#$20,d1
0001352E                            
0001352E                            	@even:
0001352E 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
00013532 3238 F646                  		move.w	(v_waterpos1).w,d1
00013536 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
0001353A 4A28 0032                  		tst.b	surf_freeze(a0)
0001353E 6600                       		bne.s	@stopped
00013540 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00013546 6700                       		beq.s	@animate	; if not, branch
00013548 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
0001354C 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
00013552 6000                       		bra.s	@display
00013554                            ; ===========================================================================
00013554                            
00013554                            @stopped:
00013554 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00013558 6600                       		bne.s	@display	; if yes, branch
0001355A 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
00013560 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
00013564                            
00013564                            @animate:
00013564 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013568 6A00                       		bpl.s	@display
0001356A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00013570 5228 001A                  		addq.b	#1,obFrame(a0)
00013574 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
0001357A 6500                       		bcs.s	@display
0001357C 117C 0000 001A             		move.b	#0,obFrame(a0)
00013582                            
00013582                            @display:
00013582 6000 C406                  		bra.w	DisplaySprite
00013582 6000 C406                  		bra.w	DisplaySprite
00013586                            Map_Surf:	include	"_maps\Water Surface.asm"
00013586                            ; --------------------------------------------------------------------------------
00013586                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013586                            ; --------------------------------------------------------------------------------
00013586                            
00013586                            SME_LGSi8:	
00013586 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
0001358A 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
0001358E 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
00013592 03                         SME_LGSi8_C:	dc.b 3	
00013593 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013598 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001359D F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000135A2 03                         SME_LGSi8_1C:	dc.b 3	
000135A3 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000135A8 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000135AD F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000135B2 03                         SME_LGSi8_2C:	dc.b 3	
000135B3 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000135B8 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000135BD F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000135C2 06                         SME_LGSi8_3C:	dc.b 6	
000135C3 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000135C8 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
000135CD F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000135D2 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000135D7 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000135DC F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
000135E1 06                         SME_LGSi8_5B:	dc.b 6	
000135E2 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000135E7 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000135EC F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000135F1 F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000135F6 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000135FB F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
00013600 06                         SME_LGSi8_7A:	dc.b 6	
00013601 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013606 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
0001360B F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013610 F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013615 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001361A F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
00013620 00                         		even
00013620 00                         		even
00013620                            		include	"_incObj\0B Pole that Breaks.asm"
00013620                            ; ---------------------------------------------------------------------------
00013620                            ; Object 0B - pole that	breaks (LZ)
00013620                            ; ---------------------------------------------------------------------------
00013620                            
00013620                            Pole:
00013620 7000                       		moveq	#0,d0
00013622 1028 0024                  		move.b	obRoutine(a0),d0
00013626 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
0001362A 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
0001362E                            ; ===========================================================================
0001362E 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
00013630 0000                       		dc.w Pole_Action-Pole_Index
00013632 0000                       		dc.w Pole_Display-Pole_Index
00013634                            
00013634 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
00013634 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
00013634                            ; ===========================================================================
00013634                            
00013634                            Pole_Main:	; Routine 0
00013634 5428 0024                  		addq.b	#2,obRoutine(a0)
00013638 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
00013640 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
00013646 117C 0004 0001             		move.b	#4,obRender(a0)
0001364C 117C 0008 0014             		move.b	#8,obActWid(a0)
00013652 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013658 117C 00E1 0020             		move.b	#$E1,obColType(a0)
0001365E 7000                       		moveq	#0,d0
00013660 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013664 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013668 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
0001366C                            
0001366C                            Pole_Action:	; Routine 2
0001366C 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
00013670 6700                       		beq.s	@grab		; if not, branch
00013672 4A68 0030                  		tst.w	pole_time(a0)
00013676 6700                       		beq.s	@moveup
00013678 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
0001367C 6600                       		bne.s	@moveup
0001367E 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
00013684 6000                       		bra.s	@release
00013686                            ; ===========================================================================
00013686                            
00013686                            @moveup:
00013686 43F8 D000                  		lea	(v_player).w,a1
0001368A 3028 000C                  		move.w	obY(a0),d0
0001368E 0440 0018                  		subi.w	#$18,d0
00013692 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013698 6700                       		beq.s	@movedown	; if not, branch
0001369A 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
0001369E B069 000C                  		cmp.w	obY(a1),d0
000136A2 6500                       		bcs.s	@movedown
000136A4 3340 000C                  		move.w	d0,obY(a1)
000136A8                            
000136A8                            @movedown:
000136A8 0640 0024                  		addi.w	#$24,d0
000136AC 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
000136B2 6700                       		beq.s	@letgo		; if not, branch
000136B4 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
000136B8 B069 000C                  		cmp.w	obY(a1),d0
000136BC 6400                       		bcc.s	@letgo
000136BE 3340 000C                  		move.w	d0,obY(a1)
000136C2                            
000136C2                            @letgo:
000136C2 1038 F603                  		move.b	(v_jpadpress2).w,d0
000136C6 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
000136CA 6700                       		beq.s	Pole_Display	; if not, branch
000136CC                            
000136CC                            @release:
000136CC 4228 0020                  		clr.b	obColType(a0)
000136D0 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
000136D4 4238 F7C8                  		clr.b	(f_lockmulti).w
000136D8 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000136DC 4228 0032                  		clr.b	pole_grabbed(a0)
000136E0 6000                       		bra.s	Pole_Display
000136E2                            ; ===========================================================================
000136E2                            
000136E2                            @grab:
000136E2 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000136E6 6700                       		beq.s	Pole_Display	; if not, branch
000136E8 43F8 D000                  		lea	(v_player).w,a1
000136EC 3028 0008                  		move.w	obX(a0),d0
000136F0 0640 0014                  		addi.w	#$14,d0
000136F4 B069 0008                  		cmp.w	obX(a1),d0
000136F8 6400                       		bcc.s	Pole_Display
000136FA 4228 0021                  		clr.b	obColProp(a0)
000136FE 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
00013704 6400                       		bcc.s	Pole_Display
00013706 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
0001370A 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
0001370E 3028 0008                  		move.w	obX(a0),d0
00013712 0640 0014                  		addi.w	#$14,d0
00013716 3340 0008                  		move.w	d0,obX(a1)
0001371A 08A9 0000 0022             		bclr	#0,obStatus(a1)
00013720 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
00013726 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001372C 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013732 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
00013738                            
00013738                            Pole_Display:	; Routine 4
00013738 6000 E1C6                  		bra.w	RememberState
00013738 6000 E1C6                  		bra.w	RememberState
0001373C                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
0001373C                            ; ---------------------------------------------------------------------------
0001373C                            ; Sprite mappings - pole that breaks (LZ)
0001373C                            ; ---------------------------------------------------------------------------
0001373C                            Map_Pole_internal:
0001373C 0000                       		dc.w @normal-Map_Pole_internal
0001373E 0000                       		dc.w @broken-Map_Pole_internal
00013740 02                         @normal:	dc.b 2			; normal pole
00013741 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00013746 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001374B 04                         @broken:	dc.b 4			; broken pole
0001374C E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00013751 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00013756 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001375B 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00013760                            		even
00013760                            		even
00013760                            		include	"_incObj\0C Flapping Door.asm"
00013760                            ; ---------------------------------------------------------------------------
00013760                            ; Object 0C - flapping door (LZ)
00013760                            ; ---------------------------------------------------------------------------
00013760                            
00013760                            FlapDoor:
00013760 7000                       		moveq	#0,d0
00013762 1028 0024                  		move.b	obRoutine(a0),d0
00013766 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
0001376A 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
0001376E                            ; ===========================================================================
0001376E 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
00013770 0000                       		dc.w Flap_OpenClose-Flap_Index
00013772                            
00013772 =00000032                  flap_time:	equ $32		; time between opening/closing
00013772 =00000030                  flap_wait:	equ $30		; time until change
00013772                            ; ===========================================================================
00013772                            
00013772                            Flap_Main:	; Routine 0
00013772 5428 0024                  		addq.b	#2,obRoutine(a0)
00013776 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
0001377E 317C 4328 0002             		move.w	#$4328,obGfx(a0)
00013784 0028 0004 0001             		ori.b	#4,obRender(a0)
0001378A 117C 0028 0014             		move.b	#$28,obActWid(a0)
00013790 7000                       		moveq	#0,d0
00013792 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013796 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001379A 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
0001379E                            
0001379E                            Flap_OpenClose:	; Routine 2
0001379E 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
000137A2 6A00                       		bpl.s	@wait		; if time remains, branch
000137A4 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
000137AA 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
000137B0 4A28 0001                  		tst.b	obRender(a0)
000137B4 6A00                       		bpl.s	@nosound
000137C0                            
000137C0                            	@wait:
000137C0                            	@nosound:
000137C0 43F9 0000 0000             		lea	(Ani_Flap).l,a1
000137C6 6100 926E                  		bsr.w	AnimateSprite
000137CA 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
000137CE 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
000137D2 6600                       		bne.s	@display	; if yes, branch
000137D4 3038 D008                  		move.w	(v_player+obX).w,d0
000137D8 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
000137DC 6400                       		bcc.s	@display	; if yes, branch
000137DE 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000137E4 323C 0013                  		move.w	#$13,d1
000137E8 343C 0020                  		move.w	#$20,d2
000137EC 3602                       		move.w	d2,d3
000137EE 5243                       		addq.w	#1,d3
000137F0 3828 0008                  		move.w	obX(a0),d4
000137F4 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
000137F8                            
000137F8                            	@display:
000137F8 6000 E106                  		bra.w	RememberState
000137F8 6000 E106                  		bra.w	RememberState
000137FC                            		include	"_anim\Flapping Door.asm"
000137FC                            ; ---------------------------------------------------------------------------
000137FC                            ; Animation script - flapping door (LZ)
000137FC                            ; ---------------------------------------------------------------------------
000137FC 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
000137FE 0000                       		dc.w @closing-Ani_Flap
00013800 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
00013806 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
0001380C                            		even
0001380C                            		even
0001380C                            Map_Flap:	include	"_maps\Flapping Door.asm"
0001380C                            ; ---------------------------------------------------------------------------
0001380C                            ; Sprite mappings - flapping door (LZ)
0001380C                            ; ---------------------------------------------------------------------------
0001380C                            Map_Flap_internal:
0001380C 0000                       		dc.w @closed-Map_Flap_internal
0001380E 0000                       		dc.w @halfway-Map_Flap_internal
00013810 0000                       		dc.w @open-Map_Flap_internal
00013812 02                         @closed:	dc.b 2
00013813 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00013818 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001381D 02                         @halfway:	dc.b 2
0001381E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00013823 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00013828 02                         @open:		dc.b 2
00013829 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001382E 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00013834 00                         		even
00013834 00                         		even
00013834                            
00013834                            		include	"_incObj\71 Invisible Barriers.asm"
00013834                            ; ---------------------------------------------------------------------------
00013834                            ; Object 71 - invisible	solid barriers
00013834                            ; ---------------------------------------------------------------------------
00013834                            
00013834                            Invisibarrier:
00013834 7000                       		moveq	#0,d0
00013836 1028 0024                  		move.b	obRoutine(a0),d0
0001383A 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
0001383E 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
00013842                            ; ===========================================================================
00013842 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
00013844 0000                       		dc.w Invis_Solid-Invis_Index
00013846                            
00013846 =00000016                  invis_height:	equ $16		; height in pixels
00013846                            ; ===========================================================================
00013846                            
00013846                            Invis_Main:	; Routine 0
00013846 5428 0024                  		addq.b	#2,obRoutine(a0)
0001384A 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
00013852 317C 8680 0002             		move.w	#$8680,obGfx(a0)
00013858 0028 0004 0001             		ori.b	#4,obRender(a0)
0001385E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013862 1200                       		move.b	d0,d1
00013864 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00013868 0640 0010                  		addi.w	#$10,d0
0001386C E248                       		lsr.w	#1,d0
0001386E 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
00013872 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013876 5241                       		addq.w	#1,d1
00013878 E749                       		lsl.w	#3,d1
0001387A 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
0001387E                            
0001387E                            Invis_Solid:	; Routine 2
0001387E 6100 C38A                  		bsr.w	ChkObjectVisible
00013882 6600                       		bne.s	@chkdel
00013884 7200                       		moveq	#0,d1
00013886 1228 0014                  		move.b	obActWid(a0),d1
0001388A 0641 000B                  		addi.w	#$B,d1
0001388E 7400                       		moveq	#0,d2
00013890 1428 0016                  		move.b	invis_height(a0),d2
00013894 3602                       		move.w	d2,d3
00013896 5243                       		addq.w	#1,d3
00013898 3828 0008                  		move.w	obX(a0),d4
0001389C 6100 E542                  		bsr.w	SolidObject71
000138A0                            
000138A0                            @chkdel:
000138BC 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
000138C0 6700                       		beq.s	@nodisplay	; if not, branch
000138C2 4EF9 0000 F98A             		jmp	(DisplaySprite).l	; if yes, display the object
000138C8                            
000138C8                            	@nodisplay:
000138C8 4E75                       		rts	
000138CA                            
000138CA                            	@delete:
000138CA 4EF9 0000 F9CA             		jmp	(DeleteObject).l
000138CA 4EF9 0000 F9CA             		jmp	(DeleteObject).l
000138D0                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
000138D0                            ; --------------------------------------------------------------------------------
000138D0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000138D0                            ; --------------------------------------------------------------------------------
000138D0                            
000138D0                            SME_t60cE:	
000138D0 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
000138D4 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000138D6 04                         SME_t60cE_6:	dc.b 4	
000138D7 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
000138DC 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
000138E1 F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000138E6 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000138EB 04                         SME_t60cE_1B:	dc.b 4	
000138EC E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000138F1 E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000138F6 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000138FB 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
00013900 04                         SME_t60cE_30:	dc.b 4	
00013901 E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
00013906 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
0001390B 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
00013910 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
00013916 00                         		even
00013916 00                         		even
00013916                            
00013916                            		include	"_incObj\5D Fan.asm"
00013916                            ; ---------------------------------------------------------------------------
00013916                            ; Object 5D - fans (SLZ)
00013916                            ; ---------------------------------------------------------------------------
00013916                            
00013916                            Fan:
00013916 7000                       		moveq	#0,d0
00013918 1028 0024                  		move.b	obRoutine(a0),d0
0001391C 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
00013920 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00013924                            ; ===========================================================================
00013924 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00013926 0000                       		dc.w Fan_Delay-Fan_Index
00013928                            
00013928 =00000030                  fan_time:	equ $30		; time between switching on/off
00013928 =00000032                  fan_switch:	equ $32		; on/off switch
00013928                            ; ===========================================================================
00013928                            
00013928                            Fan_Main:	; Routine 0
00013928 5428 0024                  		addq.b	#2,obRoutine(a0)
0001392C 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
00013934 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
0001393A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013940 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013946 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001394C                            
0001394C                            Fan_Delay:	; Routine 2
0001394C 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
00013952 6600                       		bne.s	@blow		; if yes, branch
00013954 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
00013958 6A00                       		bpl.s	@blow		; if time remains, branch
0001395A 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
00013960 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013966 6700                       		beq.s	@blow		; if fan is off, branch
00013968 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
0001396E                            
0001396E                            @blow:
0001396E 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
00013972 6600 0000                  		bne.w	@chkdel		; if not, branch
00013976 43F8 D000                  		lea	(v_player).w,a1
0001397A 3029 0008                  		move.w	obX(a1),d0
0001397E 9068 0008                  		sub.w	obX(a0),d0
00013982 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013988 6600                       		bne.s	@chksonic	; if yes, branch
0001398A 4440                       		neg.w	d0
0001398C                            
0001398C                            @chksonic:
0001398C 0640 0050                  		addi.w	#$50,d0
00013990 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013994 6400                       		bcc.s	@animate	; if yes, branch
00013996 3229 000C                  		move.w	obY(a1),d1
0001399A 0641 0060                  		addi.w	#$60,d1
0001399E 9268 000C                  		sub.w	obY(a0),d1
000139A2 6500                       		bcs.s	@animate	; branch if Sonic is too low
000139A4 0C41 0070                  		cmpi.w	#$70,d1
000139A8 6400                       		bcc.s	@animate	; branch if Sonic is too high
000139AA 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
000139AE 6400                       		bcc.s	@faraway	; if yes, branch
000139B0 4640                       		not.w	d0
000139B2 D040                       		add.w	d0,d0
000139B4                            
000139B4                            	@faraway:
000139B4 0640 0060                  		addi.w	#$60,d0
000139B8 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000139BE 6600                       		bne.s	@right		; if yes, branch
000139C0 4440                       		neg.w	d0
000139C2                            
000139C2                            	@right:
000139C2 4400                       		neg.b	d0
000139C4 E840                       		asr.w	#4,d0
000139C6 0828 0000 0028             		btst	#0,obSubtype(a0)
000139CC 6700                       		beq.s	@movesonic
000139CE 4440                       		neg.w	d0
000139D0                            
000139D0                            	@movesonic:
000139D0 D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
000139D4                            
000139D4                            @animate:
000139D4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000139D8 6A00                       		bpl.s	@chkdel
000139DA 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
000139E0 5228 001B                  		addq.b	#1,obAniFrame(a0)
000139E4 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
000139EA 6500                       		bcs.s	@noreset
000139EC 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
000139F2                            
000139F2                            	@noreset:
000139F2 7000                       		moveq	#0,d0
000139F4 0828 0000 0028             		btst	#0,obSubtype(a0)
000139FA 6700                       		beq.s	@noflip
000139FC 7002                       		moveq	#2,d0
000139FE                            
000139FE                            	@noflip:
000139FE D028 001B                  		add.b	obAniFrame(a0),d0
00013A02 1140 001A                  		move.b	d0,obFrame(a0)
00013A06                            
00013A06                            @chkdel:
00013A06 6100 BF82                  		bsr.w	DisplaySprite
00013A28 4E75                       		rts	
00013A28 4E75                       		rts	
00013A2A                            Map_Fan:	include	"_maps\Fan.asm"
00013A2A                            ; ---------------------------------------------------------------------------
00013A2A                            ; Sprite mappings - fans (SLZ)
00013A2A                            ; ---------------------------------------------------------------------------
00013A2A                            Map_Fan_internal:
00013A2A 0000                       		dc.w @fan1-Map_Fan_internal
00013A2C 0000                       		dc.w @fan2-Map_Fan_internal
00013A2E 0000                       		dc.w @fan3-Map_Fan_internal
00013A30 0000                       		dc.w @fan2-Map_Fan_internal
00013A32 0000                       		dc.w @fan1-Map_Fan_internal
00013A34 02                         @fan1:		dc.b 2
00013A35 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00013A3A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013A3F 02                         @fan2:		dc.b 2
00013A40 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013A45 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013A4A 02                         @fan3:		dc.b 2
00013A4B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013A50 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013A56 00                         		even
00013A56 00                         		even
00013A56                            		include	"_incObj\5E Seesaw.asm"
00013A56                            ; ---------------------------------------------------------------------------
00013A56                            ; Object 5E - seesaws (SLZ)
00013A56                            ; ---------------------------------------------------------------------------
00013A56                            
00013A56                            Seesaw:
00013A56 7000                       		moveq	#0,d0
00013A58 1028 0024                  		move.b	obRoutine(a0),d0
00013A5C 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013A60 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013A64 3028 0000                  		move.w	see_origX(a0),d0
00013A68 0240 FF80                  		andi.w	#$FF80,d0
00013A6C 3238 F700                  		move.w	(v_screenposx).w,d1
00013A70 0441 0080                  		subi.w	#$80,d1
00013A74 0241 FF80                  		andi.w	#$FF80,d1
00013A78 9041                       		sub.w	d1,d0
00013A7A 6B00 BF4E                  		bmi.w	DeleteObject
00013A7E 0C40 0280                  		cmpi.w	#$280,d0
00013A82 6200 BF46                  		bhi.w	DeleteObject
00013A86 6000 BF02                  		bra.w	DisplaySprite
00013A8A                            ; ===========================================================================
00013A8A 0000                       See_Index:	dc.w See_Main-See_Index
00013A8C 0000                       		dc.w See_Slope-See_Index
00013A8E 0000                       		dc.w See_Slope2-See_Index
00013A90 0000                       		dc.w See_Spikeball-See_Index
00013A92 0000                       		dc.w See_MoveSpike-See_Index
00013A94 0000                       		dc.w See_SpikeFall-See_Index
00013A96                            
00013A96 =00000030                  see_origX:	equ $30		; original x-axis position
00013A96 =00000034                  see_origY:	equ $34		; original y-axis position
00013A96 =00000038                  see_speed:	equ $38		; speed of collision
00013A96 =0000003A                  see_frame:	equ $3A		; 
00013A96 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013A96                            ; ===========================================================================
00013A96                            
00013A96                            See_Main:	; Routine 0
00013A96 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A9A 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013AA2 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013AA8 0028 0004 0001             		ori.b	#4,obRender(a0)
00013AAE 117C 0004 0018             		move.b	#4,obPriority(a0)
00013AB4 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013ABA 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013AC0 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013AC4 6600                       		bne.s	@noball		; if not, branch
00013AC6                            
00013AC6 6100 C364                  		bsr.w	FindNextFreeObj
00013ACA 6600                       		bne.s	@noball
00013ACC 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013AD0 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013AD4 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013ADA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013AE0 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013AE6 2348 003C                  		move.l	a0,see_parent(a1)
00013AEA                            
00013AEA                            	@noball:
00013AEA 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013AF0 6700                       		beq.s	@noflip		; if not, branch
00013AF2 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013AF8                            
00013AF8                            	@noflip:
00013AF8 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013AFE                            
00013AFE                            See_Slope:	; Routine 2
00013AFE 1228 003A                  		move.b	see_frame(a0),d1
00013B02 6100 0000                  		bsr.w	See_ChgFrame
00013B06 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013B0C 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013B12 6700                       		beq.s	@notflat	; if not, branch
00013B14 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013B1A                            
00013B1A                            	@notflat:
00013B1A 43F8 D000                  		lea	(v_player).w,a1
00013B1E 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013B24 323C 0030                  		move.w	#$30,d1
00013B28 4EB9 0000 916C             		jsr	(SlopeObject).l
00013B2E 4E75                       		rts	
00013B30                            ; ===========================================================================
00013B30                            
00013B30                            See_Slope2:	; Routine 4
00013B30 6100 0000                  		bsr.w	See_ChkSide
00013B34 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013B3A 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013B40 6700                       		beq.s	@notflat	; if not, branch
00013B42 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013B48                            
00013B48                            	@notflat:
00013B48 323C 0030                  		move.w	#$30,d1
00013B4C 4EB9 0000 920C             		jsr	(ExitPlatform).l
00013B52 323C 0030                  		move.w	#$30,d1
00013B56 3428 0008                  		move.w	obX(a0),d2
00013B5A 4EB9 0000 A1A6             		jsr	(SlopeObject2).l
00013B60 4E75                       		rts	
00013B62                            ; ===========================================================================
00013B62                            
00013B62                            See_ChkSide:
00013B62 7202                       		moveq	#2,d1
00013B64 43F8 D000                  		lea	(v_player).w,a1
00013B68 3028 0008                  		move.w	obX(a0),d0
00013B6C 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013B70 6400                       		bcc.s	@leftside	; if yes, branch
00013B72 4440                       		neg.w	d0
00013B74 7200                       		moveq	#0,d1
00013B76                            
00013B76                            	@leftside:
00013B76 0C40 0008                  		cmpi.w	#8,d0
00013B7A 6400                       		bcc.s	See_ChgFrame
00013B7C 7201                       		moveq	#1,d1
00013B7E                            
00013B7E                            See_ChgFrame:
00013B7E 1028 001A                  		move.b	obFrame(a0),d0
00013B82 B001                       		cmp.b	d1,d0		; does frame need to change?
00013B84 6700                       		beq.s	@noflip		; if not, branch
00013B86 6400                       		bcc.s	@loc_11772
00013B88 5400                       		addq.b	#2,d0
00013B8A                            
00013B8A                            	@loc_11772:
00013B8A 5300                       		subq.b	#1,d0
00013B8C 1140 001A                  		move.b	d0,obFrame(a0)
00013B90 1141 003A                  		move.b	d1,see_frame(a0)
00013B94 08A8 0000 0001             		bclr	#0,obRender(a0)
00013B9A 0828 0001 001A             		btst	#1,obFrame(a0)
00013BA0 6700                       		beq.s	@noflip
00013BA2 08E8 0000 0001             		bset	#0,obRender(a0)
00013BA8                            
00013BA8                            	@noflip:
00013BA8 4E75                       		rts	
00013BAA                            ; ===========================================================================
00013BAA                            
00013BAA                            See_Spikeball:	; Routine 6
00013BAA 5428 0024                  		addq.b	#2,obRoutine(a0)
00013BAE 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013BB6 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013BBC 0028 0004 0001             		ori.b	#4,obRender(a0)
00013BC2 117C 0004 0018             		move.b	#4,obPriority(a0)
00013BC8 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013BCE 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013BD4 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013BDA 0668 0028 0008             		addi.w	#$28,obX(a0)
00013BE0 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013BE6 117C 0001 001A             		move.b	#1,obFrame(a0)
00013BEC 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013BF2 6700                       		beq.s	See_MoveSpike	; if not, branch
00013BF4 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013BFA 117C 0002 003A             		move.b	#2,see_frame(a0)
00013C00                            
00013C00                            See_MoveSpike:	; Routine 8
00013C00 2268 003C                  		movea.l	see_parent(a0),a1
00013C04 7000                       		moveq	#0,d0
00013C06 1028 003A                  		move.b	see_frame(a0),d0
00013C0A 9029 003A                  		sub.b	see_frame(a1),d0
00013C0E 6700                       		beq.s	loc_1183E
00013C10 6400                       		bcc.s	loc_117FC
00013C12 4400                       		neg.b	d0
00013C14                            
00013C14                            loc_117FC:
00013C14 323C F7E8                  		move.w	#-$818,d1
00013C18 343C FEEC                  		move.w	#-$114,d2
00013C1C 0C00 0001                  		cmpi.b	#1,d0
00013C20 6700                       		beq.s	loc_11822
00013C22 323C F510                  		move.w	#-$AF0,d1
00013C26 343C FF34                  		move.w	#-$CC,d2
00013C2A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013C30 6D00                       		blt.s	loc_11822
00013C32 323C F200                  		move.w	#-$E00,d1
00013C36 343C FF60                  		move.w	#-$A0,d2
00013C3A                            
00013C3A                            loc_11822:
00013C3A 3141 0012                  		move.w	d1,obVelY(a0)
00013C3E 3142 0010                  		move.w	d2,obVelX(a0)
00013C42 3028 0008                  		move.w	obX(a0),d0
00013C46 9068 0030                  		sub.w	see_origX(a0),d0
00013C4A 6400                       		bcc.s	loc_11838
00013C4C 4468 0010                  		neg.w	obVelX(a0)
00013C50                            
00013C50                            loc_11838:
00013C50 5428 0024                  		addq.b	#2,obRoutine(a0)
00013C54 6000                       		bra.s	See_SpikeFall
00013C56                            ; ===========================================================================
00013C56                            
00013C56                            loc_1183E:
00013C56 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013C5C 7000                       		moveq	#0,d0
00013C5E 1029 001A                  		move.b	obFrame(a1),d0
00013C62 343C 0028                  		move.w	#$28,d2
00013C66 3228 0008                  		move.w	obX(a0),d1
00013C6A 9268 0030                  		sub.w	see_origX(a0),d1
00013C6E 6400                       		bcc.s	loc_1185C
00013C70 4442                       		neg.w	d2
00013C72 5440                       		addq.w	#2,d0
00013C74                            
00013C74                            loc_1185C:
00013C74 D040                       		add.w	d0,d0
00013C76 3228 0034                  		move.w	see_origY(a0),d1
00013C7A D272 0000                  		add.w	(a2,d0.w),d1
00013C7E 3141 000C                  		move.w	d1,obY(a0)
00013C82 D468 0030                  		add.w	see_origX(a0),d2
00013C86 3142 0008                  		move.w	d2,obX(a0)
00013C8A 4268 000E                  		clr.w	obY+2(a0)
00013C8E 4268 000A                  		clr.w	obX+2(a0)
00013C92 4E75                       		rts	
00013C94                            ; ===========================================================================
00013C94                            
00013C94                            See_SpikeFall:	; Routine $A
00013C94 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013C98 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013C9A 6100 BCA2                  		bsr.w	ObjectFall
00013C9E 3028 0034                  		move.w	see_origY(a0),d0
00013CA2 0440 002F                  		subi.w	#$2F,d0
00013CA6 B068 000C                  		cmp.w	obY(a0),d0
00013CAA 6E00                       		bgt.s	locret_11898
00013CAC 6100 BC90                  		bsr.w	ObjectFall
00013CB0                            
00013CB0                            locret_11898:
00013CB0 4E75                       		rts	
00013CB2                            ; ===========================================================================
00013CB2                            
00013CB2                            loc_1189A:
00013CB2 6100 BC8A                  		bsr.w	ObjectFall
00013CB6 2268 003C                  		movea.l	see_parent(a0),a1
00013CBA 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013CC0 7000                       		moveq	#0,d0
00013CC2 1029 001A                  		move.b	obFrame(a1),d0
00013CC6 3228 0008                  		move.w	obX(a0),d1
00013CCA 9268 0030                  		sub.w	see_origX(a0),d1
00013CCE 6400                       		bcc.s	loc_118BA
00013CD0 5440                       		addq.w	#2,d0
00013CD2                            
00013CD2                            loc_118BA:
00013CD2 D040                       		add.w	d0,d0
00013CD4 3228 0034                  		move.w	see_origY(a0),d1
00013CD8 D272 0000                  		add.w	(a2,d0.w),d1
00013CDC B268 000C                  		cmp.w	obY(a0),d1
00013CE0 6E00                       		bgt.s	locret_11938
00013CE2 2268 003C                  		movea.l	see_parent(a0),a1
00013CE6 7202                       		moveq	#2,d1
00013CE8 4A68 0010                  		tst.w	obVelX(a0)
00013CEC 6B00                       		bmi.s	See_Spring
00013CEE 7200                       		moveq	#0,d1
00013CF0                            
00013CF0                            See_Spring:
00013CF0 1341 003A                  		move.b	d1,$3A(a1)
00013CF4 1141 003A                  		move.b	d1,see_frame(a0)
00013CF8 B229 001A                  		cmp.b	obFrame(a1),d1
00013CFC 6700                       		beq.s	loc_1192C
00013CFE 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013D04 6700                       		beq.s	loc_1192C
00013D06 4229 0025                  		clr.b	ob2ndRout(a1)
00013D0A 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013D10 45F8 D000                  		lea	(v_player).w,a2
00013D14 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013D1A 446A 0012                  		neg.w	obVelY(a2)
00013D1E 08EA 0001 0022             		bset	#1,obStatus(a2)
00013D24 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013D2A 422A 003C                  		clr.b	$3C(a2)
00013D2E 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013D34 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013D44                            
00013D44                            loc_1192C:
00013D44 4268 0010                  		clr.w	obVelX(a0)
00013D48 4268 0012                  		clr.w	obVelY(a0)
00013D4C 5528 0024                  		subq.b	#2,obRoutine(a0)
00013D50                            
00013D50                            locret_11938:
00013D50 4E75                       		rts	
00013D52                            ; ===========================================================================
00013D52 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013D5C                            
00013D5C                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013D8C                            		even
00013D8C                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013DBC                            		even
00013DBC                            		even
00013DBC                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013DBC                            ; ---------------------------------------------------------------------------
00013DBC                            ; Sprite mappings - seesaws (SLZ)
00013DBC                            ; ---------------------------------------------------------------------------
00013DBC                            Map_Seesaw_internal:
00013DBC 0000                       		dc.w @sloping-Map_Seesaw_internal
00013DBE 0000                       		dc.w @flat-Map_Seesaw_internal
00013DC0 0000                       		dc.w @sloping-Map_Seesaw_internal
00013DC2 0000                       		dc.w @flat-Map_Seesaw_internal
00013DC4 07                         @sloping:	dc.b 7
00013DC5 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013DCA DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013DCF E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013DD4 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013DD9 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013DDE F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013DE3 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013DE8 04                         @flat:		dc.b 4
00013DE9 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013DEE E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013DF3 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013DF8 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013DFE 00                         		even
00013DFE 00                         		even
00013DFE                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013DFE                            ; ---------------------------------------------------------------------------
00013DFE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013DFE                            ; ---------------------------------------------------------------------------
00013DFE                            Map_SSawBall_internal:
00013DFE 0000                       		dc.w @red-Map_SSawBall_internal
00013E00 0000                       		dc.w @silver-Map_SSawBall_internal
00013E02 01                         @red:		dc.b 1
00013E03 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013E08 01                         @silver:	dc.b 1
00013E09 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013E0E                            		even
00013E0E                            		even
00013E0E                            		include	"_incObj\5F Bomb Enemy.asm"
00013E0E                            ; ---------------------------------------------------------------------------
00013E0E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013E0E                            ; ---------------------------------------------------------------------------
00013E0E                            
00013E0E                            Bomb:
00013E0E 7000                       		moveq	#0,d0
00013E10 1028 0024                  		move.b	obRoutine(a0),d0
00013E14 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013E18 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013E1C                            ; ===========================================================================
00013E1C 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013E1E 0000                       		dc.w Bom_Action-Bom_Index
00013E20 0000                       		dc.w Bom_Display-Bom_Index
00013E22 0000                       		dc.w Bom_End-Bom_Index
00013E24                            
00013E24 =00000030                  bom_time:	equ $30		; time of fuse
00013E24 =00000034                  bom_origY:	equ $34		; original y-axis position
00013E24 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013E24                            ; ===========================================================================
00013E24                            
00013E24                            Bom_Main:	; Routine 0
00013E24 5428 0024                  		addq.b	#2,obRoutine(a0)
00013E28 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013E30 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013E36 0028 0004 0001             		ori.b	#4,obRender(a0)
00013E3C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013E42 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013E48 1028 0028                  		move.b	obSubtype(a0),d0
00013E4C 6700                       		beq.s	loc_11A3C
00013E4E 1140 0024                  		move.b	d0,obRoutine(a0)
00013E52 4E75                       		rts	
00013E54                            ; ===========================================================================
00013E54                            
00013E54                            loc_11A3C:
00013E54 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013E5A 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E60                            
00013E60                            Bom_Action:	; Routine 2
00013E60 7000                       		moveq	#0,d0
00013E62 1028 0025                  		move.b	ob2ndRout(a0),d0
00013E66 323B 0000                  		move.w	@index(pc,d0.w),d1
00013E6A 4EBB 1000                  		jsr	@index(pc,d1.w)
00013E6E 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013E74 6100 8BC0                  		bsr.w	AnimateSprite
00013E78 6000 DA86                  		bra.w	RememberState
00013E7C                            ; ===========================================================================
00013E7C 0000                       @index:		dc.w @walk-@index
00013E7E 0000                       		dc.w @wait-@index
00013E80 0000                       		dc.w @explode-@index
00013E82                            ; ===========================================================================
00013E82                            
00013E82                            @walk:
00013E82 6100 0000                  		bsr.w	@chksonic
00013E86 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E8A 6A00                       		bpl.s	@noflip		; if time remains, branch
00013E8C 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013E90 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013E96 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013E9C 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013EA2 0868 0000 0022             		bchg	#0,obStatus(a0)
00013EA8 6700                       		beq.s	@noflip
00013EAA 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013EAE                            
00013EAE                            	@noflip:
00013EAE 4E75                       		rts	
00013EB0                            ; ===========================================================================
00013EB0                            
00013EB0                            @wait:
00013EB0 6100 0000                  		bsr.w	@chksonic
00013EB4 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013EB8 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013EBA 6100 BABA                  		bsr.w	SpeedToPos
00013EBE 4E75                       		rts	
00013EC0                            ; ===========================================================================
00013EC0                            
00013EC0                            	@stopwalking:
00013EC0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013EC4 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013ECA 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013ECE 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013ED4 4E75                       		rts	
00013ED6                            ; ===========================================================================
00013ED6                            
00013ED6                            @explode:
00013ED6 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013EDA 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013EDC 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013EE0 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013EE6                            
00013EE6                            	@noexplode:
00013EE6 4E75                       		rts	
00013EE8                            ; ===========================================================================
00013EE8                            
00013EE8                            @chksonic:
00013EE8 3038 D008                  		move.w	(v_player+obX).w,d0
00013EEC 9068 0008                  		sub.w	obX(a0),d0
00013EF0 6400                       		bcc.s	@isleft
00013EF2 4440                       		neg.w	d0
00013EF4                            
00013EF4                            	@isleft:
00013EF4 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013EF8 6400                       		bcc.s	@outofrange	; if not, branch
00013EFA 3038 D00C                  		move.w	(v_player+obY).w,d0
00013EFE 9068 000C                  		sub.w	obY(a0),d0
00013F02 6400                       		bcc.s	@isabove
00013F04 4440                       		neg.w	d0
00013F06                            
00013F06                            	@isabove:
00013F06 0C40 0060                  		cmpi.w	#$60,d0
00013F0A 6400                       		bcc.s	@outofrange
00013F0C 4A78 FE08                  		tst.w	(v_debuguse).w
00013F10 6600                       		bne.s	@outofrange
00013F12                            
00013F12 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013F18 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013F1E 4268 0010                  		clr.w	obVelX(a0)
00013F22 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013F28 6100 BF02                  		bsr.w	FindNextFreeObj
00013F2C 6600                       		bne.s	@outofrange
00013F2E 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013F32 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013F38 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013F3E 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013F44 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013F4A 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013F50 137C 0003 001C             		move.b	#3,obAnim(a1)
00013F56 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013F5C 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013F62 6700                       		beq.s	@normal		; if not, branch
00013F64 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013F68                            
00013F68                            	@normal:
00013F68 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013F6E 2348 003C                  		move.l	a0,bom_parent(a1)
00013F72                            
00013F72                            @outofrange:
00013F72 4E75                       		rts	
00013F74                            ; ===========================================================================
00013F74                            
00013F74                            Bom_Display:	; Routine 4
00013F74 6100                       		bsr.s	loc_11B70
00013F76 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013F7C 6100 8AB8                  		bsr.w	AnimateSprite
00013F80 6000 D97E                  		bra.w	RememberState
00013F84                            ; ===========================================================================
00013F84                            
00013F84                            loc_11B70:
00013F84 5368 0030                  		subq.w	#1,bom_time(a0)
00013F88 6B00                       		bmi.s	loc_11B7C
00013F8A 6100 B9EA                  		bsr.w	SpeedToPos
00013F8E 4E75                       		rts	
00013F90                            ; ===========================================================================
00013F90                            
00013F90                            loc_11B7C:
00013F90 4268 0030                  		clr.w	bom_time(a0)
00013F94 4228 0024                  		clr.b	obRoutine(a0)
00013F98 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013F9E 7203                       		moveq	#3,d1
00013FA0 2248                       		movea.l	a0,a1
00013FA2 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013FA8 6000                       		bra.s	@makeshrapnel
00013FAA                            ; ===========================================================================
00013FAA                            
00013FAA                            	@loop:
00013FAA 6100 BE80                  		bsr.w	FindNextFreeObj
00013FAE 6600                       		bne.s	@fail
00013FB0                            
00013FB0                            @makeshrapnel:
00013FB0 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013FB4 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013FBA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013FC0 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013FC6 137C 0004 001C             		move.b	#4,obAnim(a1)
00013FCC 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013FD0 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013FD4 137C 0098 0020             		move.b	#$98,obColType(a1)
00013FDA 08E9 0007 0001             		bset	#7,obRender(a1)
00013FE0                            
00013FE0                            	@fail:
00013FE0 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013FE4                            
00013FE4 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013FEA                            
00013FEA                            Bom_End:	; Routine 6
00013FEA 6100 B98A                  		bsr.w	SpeedToPos
00013FEE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013FF4 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013FFA 6100 8A3A                  		bsr.w	AnimateSprite
00013FFE 4A28 0001                  		tst.b	obRender(a0)
00014002 6A00 B9C6                  		bpl.w	DeleteObject
00014006 6000 B982                  		bra.w	DisplaySprite
0001400A                            ; ===========================================================================
0001400A FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
0001400A FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
0001401A                            		include	"_anim\Bomb Enemy.asm"
0001401A                            ; ---------------------------------------------------------------------------
0001401A                            ; Animation script - Bomb enemy
0001401A                            ; ---------------------------------------------------------------------------
0001401A 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
0001401C 0000                       		dc.w @walk-Ani_Bomb
0001401E 0000                       		dc.w @activated-Ani_Bomb
00014020 0000                       		dc.w @fuse-Ani_Bomb
00014022 0000                       		dc.w @shrapnel-Ani_Bomb
00014024 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00014028 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
0001402E 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00014032 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00014036 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
0001403A                            		even
0001403A                            		even
0001403A                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
0001403A                            ; ---------------------------------------------------------------------------
0001403A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001403A                            ; ---------------------------------------------------------------------------
0001403A                            Map_Bomb_internal:
0001403A 0000                       		dc.w @stand1-Map_Bomb_internal
0001403C 0000                       		dc.w @stand2-Map_Bomb_internal
0001403E 0000                       		dc.w @walk1-Map_Bomb_internal
00014040 0000                       		dc.w @walk2-Map_Bomb_internal
00014042 0000                       		dc.w @walk3-Map_Bomb_internal
00014044 0000                       		dc.w @walk4-Map_Bomb_internal
00014046 0000                       		dc.w @activate1-Map_Bomb_internal
00014048 0000                       		dc.w @activate2-Map_Bomb_internal
0001404A 0000                       		dc.w @fuse1-Map_Bomb_internal
0001404C 0000                       		dc.w @fuse2-Map_Bomb_internal
0001404E 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00014050 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00014052 03                         @stand1:	dc.b 3
00014053 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00014058 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001405D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014062 03                         @stand2:	dc.b 3
00014063 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014068 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001406D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014072 03                         @walk1:		dc.b 3
00014073 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00014078 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001407D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014082 03                         @walk2:		dc.b 3
00014083 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014088 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001408D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014092 03                         @walk3:		dc.b 3
00014093 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00014098 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001409D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000140A2 03                         @walk4:		dc.b 3
000140A3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000140A8 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000140AD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000140B2 02                         @activate1:	dc.b 2
000140B3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
000140B8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000140BD 02                         @activate2:	dc.b 2
000140BE F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000140C3 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000140C8 01                         @fuse1:		dc.b 1
000140C9 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
000140CE 01                         @fuse2:		dc.b 1
000140CF E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000140D4 01                         @shrapnel1:	dc.b 1
000140D5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
000140DA 01                         @shrapnel2:	dc.b 1
000140DB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000140E0                            		even
000140E0                            		even
000140E0                            
000140E0                            		include	"_incObj\60 Orbinaut.asm"
000140E0                            ; ---------------------------------------------------------------------------
000140E0                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000140E0                            ; ---------------------------------------------------------------------------
000140E0                            
000140E0                            Orbinaut:
000140E0 7000                       		moveq	#0,d0
000140E2 1028 0024                  		move.b	obRoutine(a0),d0
000140E6 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
000140EA 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
000140EE                            ; ===========================================================================
000140EE 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
000140F0 0000                       		dc.w Orb_ChkSonic-Orb_Index
000140F2 0000                       		dc.w Orb_Display-Orb_Index
000140F4 0000                       		dc.w Orb_MoveOrb-Orb_Index
000140F6 0000                       		dc.w Orb_ChkDel2-Orb_Index
000140F8                            
000140F8 =0000003C                  orb_parent:	equ $3C		; address of parent object
000140F8                            ; ===========================================================================
000140F8                            
000140F8                            Orb_Main:	; Routine 0
000140F8 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
00014100 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00014106 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0001410C 6700                       		beq.s	@isscrap
0001410E 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00014114                            
00014114                            	@isscrap:
00014114 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001411A 6600                       		bne.s	@notlabyrinth
0001411C 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00014122                            
00014122                            	@notlabyrinth:
00014122 0028 0004 0001             		ori.b	#4,obRender(a0)
00014128 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001412E 117C 000B 0020             		move.b	#$B,obColType(a0)
00014134 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001413A 7400                       		moveq	#0,d2
0001413C 45E8 0037                  		lea	$37(a0),a2
00014140 264A                       		movea.l	a2,a3
00014142 524A                       		addq.w	#1,a2
00014144 7203                       		moveq	#3,d1
00014146                            
00014146                            @makesatellites:
00014146 6100 BCE4                  		bsr.w	FindNextFreeObj
0001414A 6600                       		bne.s	@fail
0001414C 5213                       		addq.b	#1,(a3)
0001414E 3A09                       		move.w	a1,d5
00014150 0445 D000                  		subi.w	#$D000,d5
00014154 EC4D                       		lsr.w	#6,d5
00014156 0245 007F                  		andi.w	#$7F,d5
0001415A 14C5                       		move.b	d5,(a2)+
0001415C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001415E 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00014164 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001416A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00014170 0029 0004 0001             		ori.b	#4,obRender(a1)
00014176 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001417C 137C 0008 0014             		move.b	#8,obActWid(a1)
00014182 137C 0003 001A             		move.b	#3,obFrame(a1)
00014188 137C 0098 0020             		move.b	#$98,obColType(a1)
0001418E 1342 0026                  		move.b	d2,obAngle(a1)
00014192 0602 0040                  		addi.b	#$40,d2
00014196 2348 003C                  		move.l	a0,orb_parent(a1)
0001419A 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
0001419E                            
0001419E                            	@fail:
0001419E 7001                       		moveq	#1,d0
000141A0 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
000141A6 6700                       		beq.s	@noflip		; if not, branch
000141A8 4440                       		neg.w	d0
000141AA                            
000141AA                            	@noflip:
000141AA 1140 0036                  		move.b	d0,$36(a0)
000141AE 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
000141B4 5428 0024                  		addq.b	#2,obRoutine(a0)
000141B8 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
000141BE 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
000141C4 6700                       		beq.s	@noflip2	; if not, branch
000141C6 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
000141CA                            
000141CA                            	@noflip2:
000141CA 4E75                       		rts	
000141CC                            ; ===========================================================================
000141CC                            
000141CC                            Orb_ChkSonic:	; Routine 2
000141CC 3038 D008                  		move.w	(v_player+obX).w,d0
000141D0 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
000141D4 6400                       		bcc.s	@isright	; if yes, branch
000141D6 4440                       		neg.w	d0
000141D8                            
000141D8                            	@isright:
000141D8 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000141DC 6400                       		bcc.s	@animate	; if not, branch
000141DE 3038 D00C                  		move.w	(v_player+obY).w,d0
000141E2 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
000141E6 6400                       		bcc.s	@isabove	; if yes, branch
000141E8 4440                       		neg.w	d0
000141EA                            
000141EA                            	@isabove:
000141EA 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000141EE 6400                       		bcc.s	@animate	; if not, branch
000141F0 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000141F4 6600                       		bne.s	@animate	; if yes, branch
000141F6 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
000141FC                            
000141FC                            @animate:
000141FC 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00014202 6100 8832                  		bsr.w	AnimateSprite
00014206 6000 0000                  		bra.w	Orb_ChkDel
0001420A                            ; ===========================================================================
0001420A                            
0001420A                            Orb_Display:	; Routine 4
0001420A 6100 B76A                  		bsr.w	SpeedToPos
0001420E                            
0001420E                            Orb_ChkDel:
0001422C 6000 B75C                  		bra.w	DisplaySprite
00014230                            
00014230                            @chkgone:
00014230 45F8 FC00                  		lea	(v_objstate).w,a2
00014234 7000                       		moveq	#0,d0
00014236 1028 0023                  		move.b	obRespawnNo(a0),d0
0001423A 6700                       		beq.s	loc_11E34
0001423C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00014242                            
00014242                            loc_11E34:
00014242 45E8 0037                  		lea	$37(a0),a2
00014246 7400                       		moveq	#0,d2
00014248 141A                       		move.b	(a2)+,d2
0001424A 5342                       		subq.w	#1,d2
0001424C 6500                       		bcs.s	Orb_Delete
0001424E                            
0001424E                            loc_11E40:
0001424E 7000                       		moveq	#0,d0
00014250 101A                       		move.b	(a2)+,d0
00014252 ED48                       		lsl.w	#6,d0
00014254 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0001425A 2240                       		movea.l	d0,a1
0001425C 6100 B76E                  		bsr.w	DeleteChild
00014260 51CA FFEC                  		dbf	d2,loc_11E40
00014264                            
00014264                            Orb_Delete:
00014264 6000 B764                  		bra.w	DeleteObject
00014268                            ; ===========================================================================
00014268                            
00014268                            Orb_MoveOrb:	; Routine 6
00014268 2268 003C                  		movea.l	orb_parent(a0),a1
0001426C 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00014270 6600 B758                  		bne.w	DeleteObject	; if not, delete
00014274 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
0001427A 6600                       		bne.s	@circle		; if not, branch
0001427C 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00014282 6600                       		bne.s	@circle		; if not, branch
00014284 5428 0024                  		addq.b	#2,obRoutine(a0)
00014288 5329 0037                  		subq.b	#1,$37(a1)
0001428C 6600                       		bne.s	@fire
0001428E 5429 0024                  		addq.b	#2,obRoutine(a1)
00014292                            
00014292                            	@fire:
00014292 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00014298 0829 0000 0022             		btst	#0,obStatus(a1)
0001429E 6700                       		beq.s	@noflip
000142A0 4468 0010                  		neg.w	obVelX(a0)
000142A4                            
000142A4                            	@noflip:
000142A4 6000 B6E4                  		bra.w	DisplaySprite
000142A8                            ; ===========================================================================
000142A8                            
000142A8                            @circle:
000142A8 1028 0026                  		move.b	obAngle(a0),d0
000142AC 4EB9 0000 3A36             		jsr	(CalcSine).l
000142B2 E841                       		asr.w	#4,d1
000142B4 D269 0008                  		add.w	obX(a1),d1
000142B8 3141 0008                  		move.w	d1,obX(a0)
000142BC E840                       		asr.w	#4,d0
000142BE D069 000C                  		add.w	obY(a1),d0
000142C2 3140 000C                  		move.w	d0,obY(a0)
000142C6 1029 0036                  		move.b	$36(a1),d0
000142CA D128 0026                  		add.b	d0,obAngle(a0)
000142CE 6000 B6BA                  		bra.w	DisplaySprite
000142D2                            ; ===========================================================================
000142D2                            
000142D2                            Orb_ChkDel2:	; Routine 8
000142D2 6100 B6A2                  		bsr.w	SpeedToPos
000142D6 4A28 0001                  		tst.b	obRender(a0)
000142DA 6A00 B6EE                  		bpl.w	DeleteObject
000142DE 6000 B6AA                  		bra.w	DisplaySprite
000142DE 6000 B6AA                  		bra.w	DisplaySprite
000142E2                            		include	"_anim\Orbinaut.asm"
000142E2                            ; ---------------------------------------------------------------------------
000142E2                            ; Animation script - Orbinaut enemy
000142E2                            ; ---------------------------------------------------------------------------
000142E2 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
000142E4 0000                       		dc.w @angers-Ani_Orb
000142E6 0F00 FF                    @normal:	dc.b $F, 0, afEnd
000142EA 00                         		even
000142EA 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
000142F0 00                         		even
000142F0 00                         		even
000142F0                            Map_Orb:	include	"_maps\Orbinaut.asm"
000142F0                            ; ---------------------------------------------------------------------------
000142F0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000142F0                            ; ---------------------------------------------------------------------------
000142F0                            Map_Orb_internal:
000142F0 0000                       		dc.w @normal-Map_Orb_internal
000142F2 0000                       		dc.w @medium-Map_Orb_internal
000142F4 0000                       		dc.w @angry-Map_Orb_internal
000142F6 0000                       		dc.w @spikeball-Map_Orb_internal
000142F8 01                         @normal:	dc.b 1
000142F9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000142FE 01                         @medium:	dc.b 1
000142FF F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00014304 01                         @angry:		dc.b 1
00014305 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001430A 01                         @spikeball:	dc.b 1
0001430B F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00014310                            		even
00014310                            		even
00014310                            
00014310                            		include	"_incObj\16 Harpoon.asm"
00014310                            ; ---------------------------------------------------------------------------
00014310                            ; Object 16 - harpoon (LZ)
00014310                            ; ---------------------------------------------------------------------------
00014310                            
00014310                            Harpoon:
00014310 7000                       		moveq	#0,d0
00014312 1028 0024                  		move.b	obRoutine(a0),d0
00014316 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
0001431A 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
0001431E                            ; ===========================================================================
0001431E 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
00014320 0000                       		dc.w Harp_Move-Harp_Index
00014322 0000                       		dc.w Harp_Wait-Harp_Index
00014324                            
00014324 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00014324                            ; ===========================================================================
00014324                            
00014324                            Harp_Main:	; Routine 0
00014324 5428 0024                  		addq.b	#2,obRoutine(a0)
00014328 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
00014330 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00014336 0028 0004 0001             		ori.b	#4,obRender(a0)
0001433C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014342 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
00014348 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001434E 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
00014354                            
00014354                            Harp_Move:	; Routine 2
00014354 43F9 0000 0000             		lea	(Ani_Harp).l,a1
0001435A 6100 86DA                  		bsr.w	AnimateSprite
0001435E 7000                       		moveq	#0,d0
00014360 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
00014364 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
0001436A 6000 D594                  		bra.w	RememberState
0001436E                            
0001436E                            	@types:
0001436E 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00014374                            		even
00014374                            
00014374                            Harp_Wait:	; Routine 4
00014374 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00014378 6A00                       		bpl.s	@chkdel		; branch if time remains
0001437A 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
00014380 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00014384 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
0001438A                            
0001438A                            	@chkdel:
0001438A 6000 D574                  		bra.w	RememberState
0001438A 6000 D574                  		bra.w	RememberState
0001438E                            		include	"_anim\Harpoon.asm"
0001438E                            ; ---------------------------------------------------------------------------
0001438E                            ; Animation script - harpoon (LZ)
0001438E                            ; ---------------------------------------------------------------------------
0001438E 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
00014390 0000                       		dc.w @h_retracting-Ani_Harp
00014392 0000                       		dc.w @v_extending-Ani_Harp
00014394 0000                       		dc.w @v_retracting-Ani_Harp
00014396 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
0001439A 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
0001439E 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
000143A2 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
000143A6                            		even
000143A6                            		even
000143A6                            Map_Harp:	include	"_maps\Harpoon.asm"
000143A6                            ; ---------------------------------------------------------------------------
000143A6                            ; Sprite mappings - harpoon (LZ)
000143A6                            ; ---------------------------------------------------------------------------
000143A6                            Map_Harp_internal:
000143A6 0000                       		dc.w @h_retracted-Map_Harp_internal
000143A8 0000                       		dc.w @h_middle-Map_Harp_internal
000143AA 0000                       		dc.w @h_extended-Map_Harp_internal
000143AC 0000                       		dc.w @v_retracted-Map_Harp_internal
000143AE 0000                       		dc.w @v_middle-Map_Harp_internal
000143B0 0000                       		dc.w @v_extended-Map_Harp_internal
000143B2 01                         @h_retracted:	dc.b 1
000143B3 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000143B8 01                         @h_middle:	dc.b 1
000143B9 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000143BE 02                         @h_extended:	dc.b 2
000143BF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000143C4 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000143C9 01                         @v_retracted:	dc.b 1
000143CA F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000143CF 01                         @v_middle:	dc.b 1
000143D0 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000143D5 02                         @v_extended:	dc.b 2
000143D6 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000143DB F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000143E0                            		even
000143E0                            		even
000143E0                            		include	"_incObj\61 LZ Blocks.asm"
000143E0                            ; ---------------------------------------------------------------------------
000143E0                            ; Object 61 - blocks (LZ)
000143E0                            ; ---------------------------------------------------------------------------
000143E0                            
000143E0                            LabyrinthBlock:
000143E0 7000                       		moveq	#0,d0
000143E2 1028 0024                  		move.b	obRoutine(a0),d0
000143E6 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
000143EA 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
000143EE                            ; ===========================================================================
000143EE 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
000143F0 0000                       		dc.w LBlk_Action-LBlk_Index
000143F2                            
000143F2 1010                       LBlk_Var:	dc.b $10, $10		; width, height
000143F4 200C                       		dc.b $20, $C
000143F6 1010                       		dc.b $10, $10
000143F8 1010                       		dc.b $10, $10
000143FA                            
000143FA =00000016                  lblk_height:	equ $16		; block height
000143FA =00000034                  lblk_origX:	equ $34		; original x-axis position
000143FA =00000030                  lblk_origY:	equ $30		; original y-axis position
000143FA =00000036                  lblk_time:	equ $36		; time delay for block movement
000143FA =00000038                  lblk_untouched:	equ $38		; flag block as untouched
000143FA                            ; ===========================================================================
000143FA                            
000143FA                            LBlk_Main:	; Routine 0
000143FA 5428 0024                  		addq.b	#2,obRoutine(a0)
000143FE 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
00014406 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
0001440C 117C 0004 0001             		move.b	#4,obRender(a0)
00014412 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014418 7000                       		moveq	#0,d0
0001441A 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001441E E648                       		lsr.w	#3,d0		; read only the 1st digit
00014420 0240 000E                  		andi.w	#$E,d0
00014424 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
00014428 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
0001442C 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
00014430 E248                       		lsr.w	#1,d0
00014432 1140 001A                  		move.b	d0,obFrame(a0)
00014436 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
0001443C 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
00014442 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014446 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
0001444A 6700                       		beq.s	LBlk_Action	; branch if 0
0001444C 0C00 0007                  		cmpi.b	#7,d0
00014450 6700                       		beq.s	LBlk_Action	; branch if 7
00014452 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
00014458                            
00014458                            LBlk_Action:	; Routine 2
00014458 3F28 0008                  		move.w	obX(a0),-(sp)
0001445C 7000                       		moveq	#0,d0
0001445E 1028 0028                  		move.b	obSubtype(a0),d0
00014462 0240 000F                  		andi.w	#$F,d0
00014466 D040                       		add.w	d0,d0
00014468 323B 0000                  		move.w	@index(pc,d0.w),d1
0001446C 4EBB 1000                  		jsr	@index(pc,d1.w)
00014470 381F                       		move.w	(sp)+,d4
00014472 4A28 0001                  		tst.b	obRender(a0)
00014476 6A00                       		bpl.s	@chkdel
00014478 7200                       		moveq	#0,d1
0001447A 1228 0014                  		move.b	obActWid(a0),d1
0001447E 0641 000B                  		addi.w	#$B,d1
00014482 7400                       		moveq	#0,d2
00014484 1428 0016                  		move.b	lblk_height(a0),d2
00014488 3602                       		move.w	d2,d3
0001448A 5243                       		addq.w	#1,d3
0001448C 6100 D90A                  		bsr.w	SolidObject
00014490 1144 003F                  		move.b	d4,$3F(a0)
00014494 6100 0000                  		bsr.w	loc_12180
00014498                            
00014498                            @chkdel:
000144B6 6000 B4D2                  		bra.w	DisplaySprite
000144BA                            ; ===========================================================================
000144BA 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000144BE 0000 0000                  		dc.w @type02-@index, @type03-@index
000144C2 0000 0000                  		dc.w @type04-@index, @type05-@index
000144C6 0000 0000                  		dc.w @type06-@index, @type07-@index
000144CA                            ; ===========================================================================
000144CA                            
000144CA                            @type00:
000144CA 4E75                       		rts	
000144CC                            ; ===========================================================================
000144CC                            
000144CC                            @type01:
000144CC                            @type03:
000144CC 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000144D0 6600                       		bne.s	@wait01		; if yes, branch
000144D2 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000144D8 6700                       		beq.s	@donothing01	; if not, branch
000144DA 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000144E0                            
000144E0                            	@donothing01:
000144E0 4E75                       		rts	
000144E2                            ; ===========================================================================
000144E2                            
000144E2                            	@wait01:
000144E2 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000144E6 66F8                       		bne.s	@donothing01	; if time remains, branch
000144E8 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000144EC 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000144F0 4E75                       		rts	
000144F2                            ; ===========================================================================
000144F2                            
000144F2                            @type02:
000144F2                            @type06:
000144F2 6100 B482                  		bsr.w	SpeedToPos
000144F6 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000144FA 6100 0000                  		bsr.w	ObjFloorDist
000144FE 4A41                       		tst.w	d1		; has block hit the floor?
00014500 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
00014504 5241                       		addq.w	#1,d1
00014506 D368 000C                  		add.w	d1,obY(a0)
0001450A 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
0001450E 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014512                            
00014512                            	@nofloor02:
00014512 4E75                       		rts	
00014514                            ; ===========================================================================
00014514                            
00014514                            @type04:
00014514 6100 B460                  		bsr.w	SpeedToPos
00014518 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
0001451C 6100 0000                  		bsr.w	ObjHitCeiling
00014520 4A41                       		tst.w	d1		; has block hit the ceiling?
00014522 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
00014526 9368 000C                  		sub.w	d1,obY(a0)
0001452A 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
0001452E 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014532                            
00014532                            	@noceiling04:
00014532 4E75                       		rts	
00014534                            ; ===========================================================================
00014534                            
00014534                            @type05:
00014534 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
0001453A 6600                       		bne.s	@notouch05	; if not, branch
0001453C 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
00014540 4228 0038                  		clr.b	lblk_untouched(a0)
00014544                            
00014544                            	@notouch05:
00014544 4E75                       		rts	
00014546                            ; ===========================================================================
00014546                            
00014546                            @type07:
00014546 3038 F646                  		move.w	(v_waterpos1).w,d0
0001454A 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
0001454E 6700                       		beq.s	@stop07		; if yes, branch
00014550 6400                       		bcc.s	@fall07		; branch if block is above water
00014552 0C40 FFFE                  		cmpi.w	#-2,d0
00014556 6C00                       		bge.s	@loc_1214E
00014558 70FE                       		moveq	#-2,d0
0001455A                            
0001455A                            	@loc_1214E:
0001455A D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
0001455E 6100 0000                  		bsr.w	ObjHitCeiling
00014562 4A41                       		tst.w	d1		; has block hit the ceiling?
00014564 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
00014568 9368 000C                  		sub.w	d1,obY(a0)	; stop block
0001456C                            
0001456C                            	@noceiling07:
0001456C 4E75                       		rts	
0001456E                            ; ===========================================================================
0001456E                            
0001456E                            @fall07:
0001456E 0C40 0002                  		cmpi.w	#2,d0
00014572 6F00                       		ble.s	@loc_1216A
00014574 7002                       		moveq	#2,d0
00014576                            
00014576                            	@loc_1216A:
00014576 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
0001457A 6100 0000                  		bsr.w	ObjFloorDist
0001457E 4A41                       		tst.w	d1
00014580 6A00 0000                  		bpl.w	@stop07
00014584 5241                       		addq.w	#1,d1
00014586 D368 000C                  		add.w	d1,obY(a0)
0001458A                            
0001458A                            	@stop07:
0001458A 4E75                       		rts	
0001458C                            ; ===========================================================================
0001458C                            
0001458C                            loc_12180:
0001458C 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
00014590 6700                       		beq.s	locret_121C0	; if yes, branch
00014592 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014598 6600                       		bne.s	loc_1219A	; if yes, branch
0001459A 4A28 003E                  		tst.b	$3E(a0)
0001459E 6700                       		beq.s	locret_121C0
000145A0 5928 003E                  		subq.b	#4,$3E(a0)
000145A4 6000                       		bra.s	loc_121A6
000145A6                            ; ===========================================================================
000145A6                            
000145A6                            loc_1219A:
000145A6 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000145AC 6700                       		beq.s	locret_121C0
000145AE 5828 003E                  		addq.b	#4,$3E(a0)
000145B2                            
000145B2                            loc_121A6:
000145B2 1028 003E                  		move.b	$3E(a0),d0
000145B6 4EB9 0000 3A36             		jsr	(CalcSine).l
000145BC 323C 0400                  		move.w	#$400,d1
000145C0 C1C1                       		muls.w	d1,d0
000145C2 4840                       		swap	d0
000145C4 D068 0030                  		add.w	lblk_origY(a0),d0
000145C8 3140 000C                  		move.w	d0,obY(a0)
000145CC                            
000145CC                            locret_121C0:
000145CC 4E75                       		rts	
000145CC 4E75                       		rts	
000145CE                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000145CE                            Map_6865:
000145CE 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
000145D0 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
000145D2 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
000145D4 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000145D6 01                         Map_6865_8: 	dc.b $1
000145D7 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
000145DC 02                         Map_6865_E: 	dc.b $2
000145DD F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
000145E2 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000145E7 01                         Map_6865_19: 	dc.b $1
000145E8 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000145ED 01                         Map_6865_1F: 	dc.b $1
000145EE F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000145F4 00                         	even
000145F4 00                         	even
000145F4                            		include	"_incObj\62 Gargoyle.asm"
000145F4                            ; ---------------------------------------------------------------------------
000145F4                            ; Object 62 - gargoyle head (LZ)
000145F4                            ; ---------------------------------------------------------------------------
000145F4                            
000145F4                            Gargoyle:
000145F4 7000                       		moveq	#0,d0
000145F6 1028 0024                  		move.b	obRoutine(a0),d0
000145FA 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000145FE 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
00014602 6000 D2FC                  		bra.w	RememberState
00014606                            ; ===========================================================================
00014606 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
00014608 0000                       		dc.w Gar_MakeFire-Gar_Index
0001460A 0000                       		dc.w Gar_FireBall-Gar_Index
0001460C 0000                       		dc.w Gar_AniFire-Gar_Index
0001460E                            
0001460E 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00014616                            ; ===========================================================================
00014616                            
00014616                            Gar_Main:	; Routine 0
00014616 5428 0024                  		addq.b	#2,obRoutine(a0)
0001461A 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014622 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
00014628 0028 0004 0001             		ori.b	#4,obRender(a0)
0001462E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014634 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001463A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001463E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00014642 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
00014648 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001464E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00014654                            
00014654                            Gar_MakeFire:	; Routine 2
00014654 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
00014658 6600                       		bne.s	@nofire		; if time remains, branch
0001465A                            
0001465A 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
00014660 6100 B5A8                  		bsr.w	ChkObjectVisible
00014664 6600                       		bne.s	@nofire
00014666 6100 B7AE                  		bsr.w	FindFreeObj
0001466A 6600                       		bne.s	@nofire
0001466C 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
00014670 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
00014674 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001467A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014680 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014686 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001468C                            
0001468C                            	@nofire:
0001468C 4E75                       		rts	
0001468E                            ; ===========================================================================
0001468E                            
0001468E                            Gar_FireBall:	; Routine 4
0001468E 5428 0024                  		addq.b	#2,obRoutine(a0)
00014692 117C 0008 0016             		move.b	#8,obHeight(a0)
00014698 117C 0008 0017             		move.b	#8,obWidth(a0)
0001469E 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000146A6 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
000146AC 0028 0004 0001             		ori.b	#4,obRender(a0)
000146B2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000146B8 117C 0098 0020             		move.b	#$98,obColType(a0)
000146BE 117C 0008 0014             		move.b	#8,obActWid(a0)
000146C4 117C 0002 001A             		move.b	#2,obFrame(a0)
000146CA 5068 000C                  		addq.w	#8,obY(a0)
000146CE 317C 0200 0010             		move.w	#$200,obVelX(a0)
000146D4 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000146DA 6600                       		bne.s	@noflip		; if not, branch
000146DC 4468 0010                  		neg.w	obVelX(a0)
000146E0                            
000146E0                            	@noflip:
000146EA                            
000146EA                            Gar_AniFire:	; Routine 6
000146EA 1038 FE05                  		move.b	(v_framebyte).w,d0
000146EE 0200 0007                  		andi.b	#7,d0
000146F2 6600                       		bne.s	@nochg
000146F4 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000146FA                            
000146FA                            	@nochg:
000146FA 6100 B27A                  		bsr.w	SpeedToPos
000146FE 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
00014704 6600                       		bne.s	@isright	; if not, branch
00014706 76F8                       		moveq	#-8,d3
00014708 6100 0000                  		bsr.w	ObjHitWallLeft
0001470C 4A41                       		tst.w	d1
0001470E 6B00 B2BA                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00014712 4E75                       		rts	
00014714                            
00014714                            	@isright:
00014714 7608                       		moveq	#8,d3
00014716 6100 0000                  		bsr.w	ObjHitWallRight
0001471A 4A41                       		tst.w	d1
0001471C 6B00 B2AC                  		bmi.w	DeleteObject
00014720 4E75                       		rts	
00014720 4E75                       		rts	
00014722                            Map_Gar:	include	"_maps\Gargoyle.asm"
00014722                            ; ---------------------------------------------------------------------------
00014722                            ; Sprite mappings - gargoyle head (LZ)
00014722                            ; ---------------------------------------------------------------------------
00014722                            Map_Gar_internal:
00014722 0000                       		dc.w @head-Map_Gar_internal
00014724 0000                       		dc.w @head-Map_Gar_internal
00014726 0000                       		dc.w @fireball1-Map_Gar_internal
00014728 0000                       		dc.w @fireball2-Map_Gar_internal
0001472A 03                         @head:		dc.b 3
0001472B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00014730 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00014735 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001473A 01                         @fireball1:	dc.b 1
0001473B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00014740 01                         @fireball2:	dc.b 1
00014741 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00014746                            		even
00014746                            		even
00014746                            		include	"_incObj\63 LZ Conveyor.asm"
00014746                            ; ---------------------------------------------------------------------------
00014746                            ; Object 63 - platforms	on a conveyor belt (LZ)
00014746                            ; ---------------------------------------------------------------------------
00014746                            
00014746                            LabyrinthConvey:
00014746 7000                       		moveq	#0,d0
00014748 1028 0024                  		move.b	obRoutine(a0),d0
0001474C 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
00014750 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
00014770                            
00014770                            LCon_Display:
00014770 6000 B218                  		bra.w	DisplaySprite
00014774                            ; ===========================================================================
00014774                            
00014774                            loc_1236A:
00014774 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
0001477A 6600                       		bne.s	loc_12378
0001477C 0C40 FF80                  		cmpi.w	#-$80,d0
00014780 64EE                       		bcc.s	LCon_Display
00014782                            
00014782                            loc_12378:
00014782 1028 002F                  		move.b	$2F(a0),d0
00014786 6A00 B242                  		bpl.w	DeleteObject
0001478A 0240 007F                  		andi.w	#$7F,d0
0001478E 45F8 F7C1                  		lea	(v_obj63).w,a2
00014792 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014798 6000 B230                  		bra.w	DeleteObject
0001479C                            ; ===========================================================================
0001479C 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
0001479E 0000                       		dc.w loc_124B2-LCon_Index
000147A0 0000                       		dc.w loc_124C2-LCon_Index
000147A2 0000                       		dc.w loc_124DE-LCon_Index
000147A4                            ; ===========================================================================
000147A4                            
000147A4                            LCon_Main:	; Routine 0
000147A4 1028 0028                  		move.b	obSubtype(a0),d0
000147A8 6B00 0000                  		bmi.w	loc_12460
000147AC 5428 0024                  		addq.b	#2,obRoutine(a0)
000147B0 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
000147B8 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
000147BE 0028 0004 0001             		ori.b	#4,obRender(a0)
000147C4 117C 0010 0014             		move.b	#$10,obActWid(a0)
000147CA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000147D0 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000147D6 6600                       		bne.s	loc_123E2
000147D8 5828 0024                  		addq.b	#4,obRoutine(a0)
000147DC 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
000147E2 317C 0080 0018             		move.w	#$80,obPriority(a0)
000147E8 6000 0000                  		bra.w	loc_124DE
000147EC                            ; ===========================================================================
000147EC                            
000147EC                            loc_123E2:
000147EC 117C 0004 001A             		move.b	#4,obFrame(a0)
000147F2 7000                       		moveq	#0,d0
000147F4 1028 0028                  		move.b	obSubtype(a0),d0
000147F8 3200                       		move.w	d0,d1
000147FA E648                       		lsr.w	#3,d0
000147FC 0240 001E                  		andi.w	#$1E,d0
00014800 45FA 0000                  		lea	LCon_Data(pc),a2
00014804 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014808 315A 0038                  		move.w	(a2)+,$38(a0)
0001480C 315A 0030                  		move.w	(a2)+,$30(a0)
00014810 214A 003C                  		move.l	a2,$3C(a0)
00014814 0241 000F                  		andi.w	#$F,d1
00014818 E549                       		lsl.w	#2,d1
0001481A 1141 0038                  		move.b	d1,$38(a0)
0001481E 117C 0004 003A             		move.b	#4,$3A(a0)
00014824 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014828 6700                       		beq.s	loc_1244C
0001482A 117C 0001 003B             		move.b	#1,$3B(a0)
00014830 4428 003A                  		neg.b	$3A(a0)
00014834 7200                       		moveq	#0,d1
00014836 1228 0038                  		move.b	$38(a0),d1
0001483A D228 003A                  		add.b	$3A(a0),d1
0001483E B228 0039                  		cmp.b	$39(a0),d1
00014842 6500                       		bcs.s	loc_12448
00014844 1001                       		move.b	d1,d0
00014846 7200                       		moveq	#0,d1
00014848 4A00                       		tst.b	d0
0001484A 6A00                       		bpl.s	loc_12448
0001484C 1228 0039                  		move.b	$39(a0),d1
00014850 5901                       		subq.b	#4,d1
00014852                            
00014852                            loc_12448:
00014852 1141 0038                  		move.b	d1,$38(a0)
00014856                            
00014856                            loc_1244C:
00014856 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001485C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00014862 6100 0000                  		bsr.w	LCon_ChangeDir
00014866 6000 0000                  		bra.w	loc_124B2
0001486A                            ; ===========================================================================
0001486A                            
0001486A                            loc_12460:
0001486A 1140 002F                  		move.b	d0,$2F(a0)
0001486E 0240 007F                  		andi.w	#$7F,d0
00014872 45F8 F7C1                  		lea	(v_obj63).w,a2
00014876 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001487C 6600 B14C                  		bne.w	DeleteObject
00014880 D040                       		add.w	d0,d0
00014882 0240 001E                  		andi.w	#$1E,d0
00014886 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
0001488A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00014890 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014894 321A                       		move.w	(a2)+,d1
00014896 2248                       		movea.l	a0,a1
00014898 6000                       		bra.s	LCon_MakePtfms
0001489A                            ; ===========================================================================
0001489A                            
0001489A                            LCon_Loop:
0001489A 6100 B57A                  		bsr.w	FindFreeObj
0001489E 6600                       		bne.s	loc_124AA
000148A0                            
000148A0                            LCon_MakePtfms:
000148A0 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
000148A4 335A 0008                  		move.w	(a2)+,obX(a1)
000148A8 335A 000C                  		move.w	(a2)+,obY(a1)
000148AC 301A                       		move.w	(a2)+,d0
000148AE 1340 0028                  		move.b	d0,obSubtype(a1)
000148B2                            
000148B2                            loc_124AA:
000148B2 51C9 FFE6                  		dbf	d1,LCon_Loop
000148B6                            
000148B6 588F                       		addq.l	#4,sp
000148B8 4E75                       		rts	
000148BA                            ; ===========================================================================
000148BA                            
000148BA                            loc_124B2:	; Routine 2
000148BA 7200                       		moveq	#0,d1
000148BC 1228 0014                  		move.b	obActWid(a0),d1
000148C0 4EB9 0000 9098             		jsr	(PlatformObject).l
000148C6 6000 0000                  		bra.w	sub_12502
000148CA                            ; ===========================================================================
000148CA                            
000148CA                            loc_124C2:	; Routine 4
000148CA 7200                       		moveq	#0,d1
000148CC 1228 0014                  		move.b	obActWid(a0),d1
000148D0 4EB9 0000 920C             		jsr	(ExitPlatform).l
000148D6 3F28 0008                  		move.w	obX(a0),-(sp)
000148DA 6100 0000                  		bsr.w	sub_12502
000148DE 341F                       		move.w	(sp)+,d2
000148E0 4EF9 0000 9776             		jmp	(MvSonicOnPtfm2).l
000148E6                            ; ===========================================================================
000148E6                            
000148E6                            loc_124DE:	; Routine 6
000148E6 3038 FE04                  		move.w	(v_framecount).w,d0
000148EA 0240 0003                  		andi.w	#3,d0
000148EE 6600                       		bne.s	loc_124FC
000148F0 7201                       		moveq	#1,d1
000148F2 4A38 F7C0                  		tst.b	(f_conveyrev).w
000148F6 6700                       		beq.s	loc_124F2
000148F8 4401                       		neg.b	d1
000148FA                            
000148FA                            loc_124F2:
000148FA D328 001A                  		add.b	d1,obFrame(a0)
000148FE 0228 0003 001A             		andi.b	#3,obFrame(a0)
00014904                            
00014904                            loc_124FC:
00014904 588F                       		addq.l	#4,sp
00014906 6000 CFF8                  		bra.w	RememberState
0001490A                            
0001490A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001490A                            
0001490A                            
0001490A                            sub_12502:
0001490A 4A38 F7EE                  		tst.b	(f_switch+$E).w
0001490E 6700                       		beq.s	loc_12520
00014910 4A28 003B                  		tst.b	$3B(a0)
00014914 6600                       		bne.s	loc_12520
00014916 117C 0001 003B             		move.b	#1,$3B(a0)
0001491C 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
00014922 4428 003A                  		neg.b	$3A(a0)
00014926 6000                       		bra.s	loc_12534
00014928                            ; ===========================================================================
00014928                            
00014928                            loc_12520:
00014928 3028 0008                  		move.w	obX(a0),d0
0001492C B068 0034                  		cmp.w	$34(a0),d0
00014930 6600                       		bne.s	loc_1256A
00014932 3028 000C                  		move.w	obY(a0),d0
00014936 B068 0036                  		cmp.w	$36(a0),d0
0001493A 6600                       		bne.s	loc_1256A
0001493C                            
0001493C                            loc_12534:
0001493C 7200                       		moveq	#0,d1
0001493E 1228 0038                  		move.b	$38(a0),d1
00014942 D228 003A                  		add.b	$3A(a0),d1
00014946 B228 0039                  		cmp.b	$39(a0),d1
0001494A 6500                       		bcs.s	loc_12552
0001494C 1001                       		move.b	d1,d0
0001494E 7200                       		moveq	#0,d1
00014950 4A00                       		tst.b	d0
00014952 6A00                       		bpl.s	loc_12552
00014954 1228 0039                  		move.b	$39(a0),d1
00014958 5901                       		subq.b	#4,d1
0001495A                            
0001495A                            loc_12552:
0001495A 1141 0038                  		move.b	d1,$38(a0)
0001495E 2268 003C                  		movea.l	$3C(a0),a1
00014962 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014968 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001496E 6100 0000                  		bsr.w	LCon_ChangeDir
00014972                            
00014972                            loc_1256A:
00014972 6100 B002                  		bsr.w	SpeedToPos
00014976 4E75                       		rts	
00014978                            ; End of function sub_12502
00014978                            
00014978                            
00014978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014978                            
00014978                            
00014978                            LCon_ChangeDir:
00014978 7000                       		moveq	#0,d0
0001497A 343C FF00                  		move.w	#-$100,d2
0001497E 3028 0008                  		move.w	obX(a0),d0
00014982 9068 0034                  		sub.w	$34(a0),d0
00014986 6400                       		bcc.s	loc_12584
00014988 4440                       		neg.w	d0
0001498A 4442                       		neg.w	d2
0001498C                            
0001498C                            loc_12584:
0001498C 7200                       		moveq	#0,d1
0001498E 363C FF00                  		move.w	#-$100,d3
00014992 3228 000C                  		move.w	obY(a0),d1
00014996 9268 0036                  		sub.w	$36(a0),d1
0001499A 6400                       		bcc.s	loc_12598
0001499C 4441                       		neg.w	d1
0001499E 4443                       		neg.w	d3
000149A0                            
000149A0                            loc_12598:
000149A0 B240                       		cmp.w	d0,d1
000149A2 6500                       		bcs.s	loc_125C2
000149A4 3028 0008                  		move.w	obX(a0),d0
000149A8 9068 0034                  		sub.w	$34(a0),d0
000149AC 6700                       		beq.s	loc_125AE
000149AE 48C0                       		ext.l	d0
000149B0 E180                       		asl.l	#8,d0
000149B2 81C1                       		divs.w	d1,d0
000149B4 4440                       		neg.w	d0
000149B6                            
000149B6                            loc_125AE:
000149B6 3140 0010                  		move.w	d0,obVelX(a0)
000149BA 3143 0012                  		move.w	d3,obVelY(a0)
000149BE 4840                       		swap	d0
000149C0 3140 000A                  		move.w	d0,obX+2(a0)
000149C4 4268 000E                  		clr.w	obY+2(a0)
000149C8 4E75                       		rts	
000149CA                            ; ===========================================================================
000149CA                            
000149CA                            loc_125C2:
000149CA 3228 000C                  		move.w	obY(a0),d1
000149CE 9268 0036                  		sub.w	$36(a0),d1
000149D2 6700                       		beq.s	loc_125D4
000149D4 48C1                       		ext.l	d1
000149D6 E181                       		asl.l	#8,d1
000149D8 83C0                       		divs.w	d0,d1
000149DA 4441                       		neg.w	d1
000149DC                            
000149DC                            loc_125D4:
000149DC 3141 0012                  		move.w	d1,obVelY(a0)
000149E0 3142 0010                  		move.w	d2,obVelX(a0)
000149E4 4841                       		swap	d1
000149E6 3141 000E                  		move.w	d1,obY+2(a0)
000149EA 4268 000A                  		clr.w	obX+2(a0)
000149EE 4E75                       		rts	
000149F0                            ; End of function LCon_ChangeDir
000149F0                            
000149F0                            ; ===========================================================================
000149F0 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
000149F2 0000                       		dc.w word_12610-LCon_Data
000149F4 0000                       		dc.w word_12628-LCon_Data
000149F6 0000                       		dc.w word_1263C-LCon_Data
000149F8 0000                       		dc.w word_12650-LCon_Data
000149FA 0000                       		dc.w word_12668-LCon_Data
000149FC 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00014A0C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014A18 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014A28 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014A30 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014A44 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014A58 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014A70 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A70 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A84                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014A84                            ; ---------------------------------------------------------------------------
00014A84                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014A84                            ; ---------------------------------------------------------------------------
00014A84                            Map_LConv_internal:
00014A84 0000                       		dc.w @wheel1-Map_LConv_internal
00014A86 0000                       		dc.w @wheel2-Map_LConv_internal
00014A88 0000                       		dc.w @wheel3-Map_LConv_internal
00014A8A 0000                       		dc.w @wheel4-Map_LConv_internal
00014A8C 0000                       		dc.w @platform-Map_LConv_internal
00014A8E 01                         @wheel1:	dc.b 1
00014A8F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014A94 01                         @wheel2:	dc.b 1
00014A95 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014A9A 01                         @wheel3:	dc.b 1
00014A9B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014AA0 01                         @wheel4:	dc.b 1
00014AA1 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014AA6 01                         @platform:	dc.b 1
00014AA7 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014AAC                            		even
00014AAC                            		even
00014AAC                            		include	"_incObj\64 Bubbles.asm"
00014AAC                            ; ---------------------------------------------------------------------------
00014AAC                            ; Object 64 - bubbles (LZ)
00014AAC                            ; ---------------------------------------------------------------------------
00014AAC                            
00014AAC                            Bubble:
00014AAC 7000                       		moveq	#0,d0
00014AAE 1028 0024                  		move.b	obRoutine(a0),d0
00014AB2 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014AB6 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014ABA                            ; ===========================================================================
00014ABA 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014ABC 0000                       		dc.w Bub_Animate-Bub_Index
00014ABE 0000                       		dc.w Bub_ChkWater-Bub_Index
00014AC0 0000                       		dc.w Bub_Display-Bub_Index
00014AC2 0000                       		dc.w Bub_Delete-Bub_Index
00014AC4 0000                       		dc.w Bub_BblMaker-Bub_Index
00014AC6                            
00014AC6 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014AC6 =00000030                  bub_origX:	equ $30		; original x-axis position
00014AC6 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014AC6 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014AC6                            ; ===========================================================================
00014AC6                            
00014AC6                            Bub_Main:	; Routine 0
00014AC6 5428 0024                  		addq.b	#2,obRoutine(a0)
00014ACA 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014AD2 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014AD8 117C 0084 0001             		move.b	#$84,obRender(a0)
00014ADE 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014AE4 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014AEA 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014AEE 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014AF0                            
00014AF0 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014AF4 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014AF8 1140 0032                  		move.b	d0,bub_time(a0)
00014AFC 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014B00 117C 0006 001C             		move.b	#6,obAnim(a0)
00014B06 6000 0000                  		bra.w	Bub_BblMaker
00014B0A                            ; ===========================================================================
00014B0A                            
00014B0A                            @bubble:
00014B0A 1140 001C                  		move.b	d0,obAnim(a0)
00014B0E 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014B14 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014B1A 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014B20 1140 0026                  		move.b	d0,obAngle(a0)
00014B24                            
00014B24                            Bub_Animate:	; Routine 2
00014B24 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014B2A 4EB9 0000 CA36             		jsr	(AnimateSprite).l
00014B30 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014B36 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014B38                            
00014B38 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014B3E                            
00014B3E                            Bub_ChkWater:	; Routine 4
00014B3E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B42 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014B46 6500                       		bcs.s	@wobble		; if yes, branch
00014B48                            
00014B48                            @burst:
00014B48 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014B4E 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014B52 6000 0000                  		bra.w	Bub_Display
00014B56                            ; ===========================================================================
00014B56                            
00014B56                            @wobble:
00014B56 1028 0026                  		move.b	obAngle(a0),d0
00014B5A 5228 0026                  		addq.b	#1,obAngle(a0)
00014B5E 0240 007F                  		andi.w	#$7F,d0
00014B62 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014B68 1031 0000                  		move.b	(a1,d0.w),d0
00014B6C 4880                       		ext.w	d0
00014B6E D068 0030                  		add.w	bub_origX(a0),d0
00014B72 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014B76 4A28 002E                  		tst.b	bub_inhalable(a0)
00014B7A 6700                       		beq.s	@display
00014B7C 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014B80 6700                       		beq.s	@display	; if not, branch
00014B82                            
00014B82 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014B90 43F8 D000                  		lea	(v_player).w,a1
00014B94 4269 0010                  		clr.w	obVelX(a1)
00014B98 4269 0012                  		clr.w	obVelY(a1)
00014B9C 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014BA0 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014BA6 337C 0023 003E             		move.w	#$23,$3E(a1)
00014BAC 137C 0000 003C             		move.b	#0,$3C(a1)
00014BB2 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014BB8 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014BBE 0829 0002 0022             		btst	#2,obStatus(a1)
00014BC4 6700 FF82                  		beq.w	@burst
00014BC8 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014BCE 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014BD4 137C 0009 0017             		move.b	#9,obWidth(a1)
00014BDA 5B69 000C                  		subq.w	#5,obY(a1)
00014BDE 6000 FF68                  		bra.w	@burst
00014BE2                            ; ===========================================================================
00014BE2                            
00014BE2                            @display:
00014BE2 6100 AD92                  		bsr.w	SpeedToPos
00014BE6 4A28 0001                  		tst.b	obRender(a0)
00014BEA 6A00                       		bpl.s	@delete
00014BEC 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00014BF2                            
00014BF2                            	@delete:
00014BF2 4EF9 0000 F9CA             		jmp	(DeleteObject).l
00014BF8                            ; ===========================================================================
00014BF8                            
00014BF8                            Bub_Display:	; Routine 6
00014BF8 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014BFE 4EB9 0000 CA36             		jsr	(AnimateSprite).l
00014C04 4A28 0001                  		tst.b	obRender(a0)
00014C08 6A00                       		bpl.s	@delete
00014C0A 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00014C10                            
00014C10                            	@delete:
00014C10 4EF9 0000 F9CA             		jmp	(DeleteObject).l
00014C16                            ; ===========================================================================
00014C16                            
00014C16                            Bub_Delete:	; Routine 8
00014C16 6000 ADB2                  		bra.w	DeleteObject
00014C1A                            ; ===========================================================================
00014C1A                            
00014C1A                            Bub_BblMaker:	; Routine $A
00014C1A 4A68 0036                  		tst.w	$36(a0)
00014C1E 6600                       		bne.s	@loc_12874
00014C20 3038 F646                  		move.w	(v_waterpos1).w,d0
00014C24 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014C28 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014C2C 4A28 0001                  		tst.b	obRender(a0)
00014C30 6A00 0000                  		bpl.w	@chkdel
00014C34 5368 0038                  		subq.w	#1,$38(a0)
00014C38 6A00 0000                  		bpl.w	@loc_12914
00014C3C 317C 0001 0036             		move.w	#1,$36(a0)
00014C42                            
00014C42                            	@tryagain:
00014C42 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014C48 3200                       		move.w	d0,d1
00014C4A 0240 0007                  		andi.w	#7,d0
00014C4E 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014C52 64EE                       		bcc.s	@tryagain	; if yes, branch
00014C54                            
00014C54 1140 0034                  		move.b	d0,$34(a0)
00014C58 0241 000C                  		andi.w	#$C,d1
00014C5C 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014C62 D2C1                       		adda.w	d1,a1
00014C64 2149 003C                  		move.l	a1,$3C(a0)
00014C68 5328 0032                  		subq.b	#1,bub_time(a0)
00014C6C 6A00                       		bpl.s	@loc_12872
00014C6E 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014C74 08E8 0007 0036             		bset	#7,$36(a0)
00014C7A                            
00014C7A                            @loc_12872:
00014C7A 6000                       		bra.s	@loc_1287C
00014C7C                            ; ===========================================================================
00014C7C                            
00014C7C                            @loc_12874:
00014C7C 5368 0038                  		subq.w	#1,$38(a0)
00014C80 6A00 0000                  		bpl.w	@loc_12914
00014C84                            
00014C84                            @loc_1287C:
00014C84 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014C8A 0240 001F                  		andi.w	#$1F,d0
00014C8E 3140 0038                  		move.w	d0,$38(a0)
00014C92 6100 B182                  		bsr.w	FindFreeObj
00014C96 6600                       		bne.s	@fail
00014C98 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014C9C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014CA2 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014CA8 0240 000F                  		andi.w	#$F,d0
00014CAC 5140                       		subq.w	#8,d0
00014CAE D169 0008                  		add.w	d0,obX(a1)
00014CB2 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014CB8 7000                       		moveq	#0,d0
00014CBA 1028 0034                  		move.b	$34(a0),d0
00014CBE 2468 003C                  		movea.l	$3C(a0),a2
00014CC2 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014CC8 0828 0007 0036             		btst	#7,$36(a0)
00014CCE 6700                       		beq.s	@fail
00014CD0 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014CD6 0240 0003                  		andi.w	#3,d0
00014CDA 6600                       		bne.s	@loc_buh
00014CDC 08E8 0006 0036             		bset	#6,$36(a0)
00014CE2 6600                       		bne.s	@fail
00014CE4 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014CEA                            
00014CEA                            @loc_buh:
00014CEA 4A28 0034                  		tst.b	$34(a0)
00014CEE 6600                       		bne.s	@fail
00014CF0 08E8 0006 0036             		bset	#6,$36(a0)
00014CF6 6600                       		bne.s	@fail
00014CF8 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014CFE                            
00014CFE                            	@fail:
00014CFE 5328 0034                  		subq.b	#1,$34(a0)
00014D02 6A00                       		bpl.s	@loc_12914
00014D04 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014D0A 0240 007F                  		andi.w	#$7F,d0
00014D0E 0640 0080                  		addi.w	#$80,d0
00014D12 D168 0038                  		add.w	d0,$38(a0)
00014D16 4268 0036                  		clr.w	$36(a0)
00014D1A                            
00014D1A                            @loc_12914:
00014D1A 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014D20 4EB9 0000 CA36             		jsr	(AnimateSprite).l
00014D26                            
00014D26                            @chkdel:
00014D44 3038 F646                  		move.w	(v_waterpos1).w,d0
00014D48 B068 000C                  		cmp.w	obY(a0),d0
00014D4C 6500 AC3C                  		bcs.w	DisplaySprite
00014D50 4E75                       		rts	
00014D52                            ; ===========================================================================
00014D52                            ; bubble production sequence
00014D52                            
00014D52                            ; 0 = small bubble, 1 =	large bubble
00014D52                            
00014D52 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014D64                            
00014D64                            ; ===========================================================================
00014D64                            
00014D64                            Bub_ChkSonic:
00014D64 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014D68 6B00                       		bmi.s	@loc_12998
00014D6A 43F8 D000                  		lea	(v_player).w,a1
00014D6E 3029 0008                  		move.w	obX(a1),d0
00014D72 3228 0008                  		move.w	obX(a0),d1
00014D76 0441 0010                  		subi.w	#$10,d1
00014D7A B240                       		cmp.w	d0,d1
00014D7C 6400                       		bcc.s	@loc_12998
00014D7E 0641 0020                  		addi.w	#$20,d1
00014D82 B240                       		cmp.w	d0,d1
00014D84 6500                       		bcs.s	@loc_12998
00014D86 3029 000C                  		move.w	obY(a1),d0
00014D8A 3228 000C                  		move.w	obY(a0),d1
00014D8E B240                       		cmp.w	d0,d1
00014D90 6400                       		bcc.s	@loc_12998
00014D92 0641 0010                  		addi.w	#$10,d1
00014D96 B240                       		cmp.w	d0,d1
00014D98 6500                       		bcs.s	@loc_12998
00014D9A 7001                       		moveq	#1,d0
00014D9C 4E75                       		rts	
00014D9E                            ; ===========================================================================
00014D9E                            
00014D9E                            @loc_12998:
00014D9E 7000                       		moveq	#0,d0
00014DA0 4E75                       		rts	
00014DA0 4E75                       		rts	
00014DA2                            		include	"_anim\Bubbles.asm"
00014DA2                            ; ---------------------------------------------------------------------------
00014DA2                            ; Animation script - bubbles (LZ)
00014DA2                            ; ---------------------------------------------------------------------------
00014DA2 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014DA4 0000                       		dc.w @medium-Ani_Bub
00014DA6 0000                       		dc.w @large-Ani_Bub
00014DA8 0000                       		dc.w @incroutine-Ani_Bub
00014DAA 0000                       		dc.w @incroutine-Ani_Bub
00014DAC 0000                       		dc.w @burst-Ani_Bub
00014DAE 0000                       		dc.w @bubmaker-Ani_Bub
00014DB0 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014DB6 00                         		even
00014DB6 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014DBC 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014DC4 00                         		even
00014DC4 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014DC6 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014DCC 00                         		even
00014DCC 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014DD2 00                         		even
00014DD2 00                         		even
00014DD2                            Map_Bub:	include	"_maps\Bubbles.asm"
00014DD2                            ; ---------------------------------------------------------------------------
00014DD2                            ; Sprite mappings - bubbles (LZ)
00014DD2                            ; ---------------------------------------------------------------------------
00014DD2                            Map_Bub_internal:
00014DD2 0000                       		dc.w @bubble1-Map_Bub_internal
00014DD4 0000                       		dc.w @bubble2-Map_Bub_internal
00014DD6 0000                       		dc.w @bubble3-Map_Bub_internal
00014DD8 0000                       		dc.w @bubble4-Map_Bub_internal
00014DDA 0000                       		dc.w @bubble5-Map_Bub_internal
00014DDC 0000                       		dc.w @bubble6-Map_Bub_internal
00014DDE 0000                       		dc.w @bubblefull-Map_Bub_internal
00014DE0 0000                       		dc.w @burst1-Map_Bub_internal
00014DE2 0000                       		dc.w @burst2-Map_Bub_internal
00014DE4 0000                       		dc.w @zero_sm-Map_Bub_internal
00014DE6 0000                       		dc.w @five_sm-Map_Bub_internal
00014DE8 0000                       		dc.w @three_sm-Map_Bub_internal
00014DEA 0000                       		dc.w @one_sm-Map_Bub_internal
00014DEC 0000                       		dc.w @zero-Map_Bub_internal
00014DEE 0000                       		dc.w @five-Map_Bub_internal
00014DF0 0000                       		dc.w @four-Map_Bub_internal
00014DF2 0000                       		dc.w @three-Map_Bub_internal
00014DF4 0000                       		dc.w @two-Map_Bub_internal
00014DF6 0000                       		dc.w @one-Map_Bub_internal
00014DF8 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014DFA 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014DFC 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014DFE 0000                       		dc.w @blank-Map_Bub_internal
00014E00 01                         @bubble1:	dc.b 1
00014E01 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014E06 01                         @bubble2:	dc.b 1
00014E07 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014E0C 01                         @bubble3:	dc.b 1
00014E0D FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014E12 01                         @bubble4:	dc.b 1
00014E13 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014E18 01                         @bubble5:	dc.b 1
00014E19 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014E1E 01                         @bubble6:	dc.b 1
00014E1F F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014E24 01                         @bubblefull:	dc.b 1
00014E25 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014E2A 04                         @burst1:	dc.b 4
00014E2B F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014E30 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014E35 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014E3A 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014E3F 04                         @burst2:	dc.b 4
00014E40 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014E45 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014E4A 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014E4F 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014E54 01                         @zero_sm:	dc.b 1
00014E55 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014E5A 01                         @five_sm:	dc.b 1
00014E5B F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014E60 01                         @three_sm:	dc.b 1
00014E61 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014E66 01                         @one_sm:	dc.b 1
00014E67 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014E6C 01                         @zero:		dc.b 1
00014E6D F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014E72 01                         @five:		dc.b 1
00014E73 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014E78 01                         @four:		dc.b 1
00014E79 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014E7E 01                         @three:		dc.b 1
00014E7F F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014E84 01                         @two:		dc.b 1
00014E85 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014E8A 01                         @one:		dc.b 1
00014E8B F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014E90 01                         @bubmaker1:	dc.b 1
00014E91 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014E96 01                         @bubmaker2:	dc.b 1
00014E97 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014E9C 01                         @bubmaker3:	dc.b 1
00014E9D F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014EA2 00                         @blank:		dc.b 0
00014EA4 00                         		even
00014EA4 00                         		even
00014EA4                            		include	"_incObj\65 Waterfalls.asm"
00014EA4                            ; ---------------------------------------------------------------------------
00014EA4                            ; Object 65 - waterfalls (LZ)
00014EA4                            ; ---------------------------------------------------------------------------
00014EA4                            
00014EA4                            Waterfall:
00014EA4 7000                       		moveq	#0,d0
00014EA6 1028 0024                  		move.b	obRoutine(a0),d0
00014EAA 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014EAE 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014EB2                            ; ===========================================================================
00014EB2 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014EB4 0000                       		dc.w WFall_Animate-WFall_Index
00014EB6 0000                       		dc.w WFall_ChkDel-WFall_Index
00014EB8 0000                       		dc.w WFall_OnWater-WFall_Index
00014EBA 0000                       		dc.w loc_12B36-WFall_Index
00014EBC                            ; ===========================================================================
00014EBC                            
00014EBC                            WFall_Main:	; Routine 0
00014EBC 5828 0024                  		addq.b	#4,obRoutine(a0)
00014EC0 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014EC8 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014ECE 0028 0004 0001             		ori.b	#4,obRender(a0)
00014ED4 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014EDA 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014EE0 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014EE4 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014EE6 08E8 0007 0002             		bset	#7,obGfx(a0)
00014EEC                            
00014EEC                            	@under80:
00014EEC 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014EF0 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014EF4 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014EF8 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014EFA                            
00014EFA 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014EFE 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014F02 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014F08 6700                       		beq.s	@not49		; if not, branch
00014F0A                            
00014F0A 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014F10                            
00014F10                            	@not49:
00014F10 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014F16 6700                       		beq.s	WFall_Animate	; if not, branch
00014F18 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014F1E                            
00014F1E                            WFall_Animate:	; Routine 2
00014F1E 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014F24 4EB9 0000 CA36             		jsr	(AnimateSprite).l
00014F2A                            
00014F2A                            WFall_ChkDel:	; Routine 4
00014F2A 6000 C9D4                  		bra.w	RememberState
00014F2E                            ; ===========================================================================
00014F2E                            
00014F2E                            WFall_OnWater:	; Routine 6
00014F2E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014F32 0440 0010                  		subi.w	#$10,d0
00014F36 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014F3A 60E2                       		bra.s	WFall_Animate
00014F3C                            ; ===========================================================================
00014F3C                            
00014F3C                            loc_12B36:	; Routine 8
00014F3C 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014F42 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014F48 6600                       		bne.s	@animate
00014F4A 08E8 0007 0002             		bset	#7,obGfx(a0)
00014F50                            
00014F50                            	@animate:
00014F50 60CC                       		bra.s	WFall_Animate
00014F50 60CC                       		bra.s	WFall_Animate
00014F52                            		include	"_anim\Waterfalls.asm"
00014F52                            ; ---------------------------------------------------------------------------
00014F52                            ; Animation script - waterfall (LZ)
00014F52                            ; ---------------------------------------------------------------------------
00014F52 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014F54 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014F5A 00                         		even
00014F5A 00                         		even
00014F5A                            Map_WFall	include	"_maps\Waterfalls.asm"
00014F5A                            ; ---------------------------------------------------------------------------
00014F5A                            ; Sprite mappings - waterfalls (LZ)
00014F5A                            ; ---------------------------------------------------------------------------
00014F5A                            Map_WFall_internal:
00014F5A 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014F5C 0000                       		dc.w @cornerwide-Map_WFall_internal
00014F5E 0000                       		dc.w @cornermedium-Map_WFall_internal
00014F60 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014F62 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014F64 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014F66 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014F68 0000                       		dc.w @vertwide-Map_WFall_internal
00014F6A 0000                       		dc.w @diagonal-Map_WFall_internal
00014F6C 0000                       		dc.w @splash1-Map_WFall_internal
00014F6E 0000                       		dc.w @splash2-Map_WFall_internal
00014F70 0000                       		dc.w @splash3-Map_WFall_internal
00014F72 01                         @vertnarrow:	dc.b 1
00014F73 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014F78 02                         @cornerwide:	dc.b 2
00014F79 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014F7E 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014F83 02                         @cornermedium:	dc.b 2
00014F84 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F89 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F8E 01                         @cornernarrow:	dc.b 1
00014F8F F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014F94 02                         @cornermedium2:	dc.b 2
00014F95 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F9A 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F9F 01                         @cornernarrow2:	dc.b 1
00014FA0 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014FA5 01                         @cornernarrow3:	dc.b 1
00014FA6 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014FAB 01                         @vertwide:	dc.b 1
00014FAC F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014FB1 02                         @diagonal:	dc.b 2
00014FB2 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014FB7 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014FBC 02                         @splash1:	dc.b 2
00014FBD F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014FC2 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014FC7 02                         @splash2:	dc.b 2
00014FC8 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014FCD F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014FD2 02                         @splash3:	dc.b 2
00014FD3 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014FD8 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014FDE 00                         		even
00014FDE 00                         		even
00014FDE                            
00014FDE                            
00014FDE                            SpinDash_dust:
00014FDE                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014FDE 7000                       		moveq	#0,d0
00014FE0 1028 0024                  		move.b	$24(a0),d0
00014FE4 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014FE8 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014FEC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FEC 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014FEE 0000                       		dc loc_1DD90-off_1DD2E; 1
00014FF0 0000                       		dc loc_1DE46-off_1DD2E; 2
00014FF2 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014FF4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FF4                            
00014FF4                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014FF4 5428 0024                  		addq.b	#2,$24(a0)
00014FF8 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00015000 0028 0004 0001             		or.b	#4,1(a0)
00015006 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001500C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00015012 317C 07AC 0002             		move	#$7AC,2(a0)
00015018 317C D000 003E             		move	#-$3000,$3E(a0)
0001501E 317C F580 003C             		move	#$F580,$3C(a0)
00015024 B0FC D1C0                  		cmp	#-$2E40,a0
00015028 6700                       		beq.s	loc_1DD8C
0001502A 117C 0001 0034             		move.b	#1,$34(a0)
00015030                            ;		cmp	#2,($FFFFFF70).w
00015030                            ;		beq.s	loc_1DD8C
00015030                            ;		move	#$48C,2(a0)
00015030                            ;		move	#-$4FC0,$3E(a0)
00015030                            ;		move	#-$6E80,$3C(a0)
00015030                            
00015030                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00015030                            ;		bsr.w	sub_16D6E
00015030                            
00015030                            loc_1DD90:				; DATA XREF: h+6DBA?o
00015030 3468 003E                  		movea.w	$3E(a0),a2
00015034 7000                       		moveq	#0,d0
00015036 1028 001C                  		move.b	$1C(a0),d0
0001503A D040                       		add	d0,d0
0001503C 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00015040 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00015044                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015044 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00015046 0000                       		dc loc_1DDAC-off_1DDA4; 1
00015048 0000                       		dc loc_1DDCC-off_1DDA4; 2
0001504A 0000                       		dc loc_1DE20-off_1DDA4; 3
0001504C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001504C                            
0001504C                            loc_1DDAC:				; DATA XREF: h+6E30?o
0001504C 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00015052 4A28 001D                  		tst.b	$1D(a0)
00015056 6600                       		bne.s	loc_1DE28
00015058 316A 0008 0008             		move	8(a2),8(a0)
0001505E 117C 0000 0022             		move.b	#0,$22(a0)
00015064 0268 7FFF 0002             		and	#$7FFF,2(a0)
0001506A 6000                       		bra.s	loc_1DE28
0001506C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001506C                            
0001506C                            loc_1DDCC:				; DATA XREF: h+6E30?o
0001506C                            ;		cmp.b	#$C,$28(a2)
0001506C                            ;		bcs.s	loc_1DE3E
0001506C 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00015072 6400                       		bcc.s	loc_1DE3E
00015074 4A2A 0039                  		tst.b	$39(a2)
00015078 6700                       		beq.s	loc_1DE3E
0001507A 316A 0008 0008             		move	8(a2),8(a0)
00015080 316A 000C 000C             		move	$C(a2),$C(a0)
00015086 116A 0022 0022             		move.b	$22(a2),$22(a0)
0001508C 0228 0001 0022             		and.b	#1,$22(a0)
00015092 4A28 0034                  		tst.b	$34(a0)
00015096 6700                       		beq.s	loc_1DE06
00015098 5968 000C                  		sub	#4,$C(a0)
0001509C                            
0001509C                            loc_1DE06:				; CODE XREF: h+6E8A?j
0001509C 4A28 001D                  		tst.b	$1D(a0)
000150A0 6600                       		bne.s	loc_1DE28
000150A2 0268 7FFF 0002             		and	#$7FFF,2(a0)
000150A8 4A6A 0002                  		tst	2(a2)
000150AC 6A00                       		bpl.s	loc_1DE28
000150AE 0068 8000 0002             		or	#-$8000,2(a0)
000150B4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150B4                            
000150B4                            loc_1DE20:				; DATA XREF: h+6E30?o
000150B4                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
000150B4 43F9 0000 0000             		lea	(off_1DF38).l,a1
000150BA 4EB9 0000 CA36             		jsr	AnimateSprite
000150C0 6100 0000                  		bsr.w	loc_1DEE4
000150C4 4EFA A8C4                  		jmp	DisplaySprite
000150C8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150C8                            
000150C8                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
000150C8 117C 0000 001C             		move.b	#0,$1C(a0)
000150CE 4E75                       		rts	
000150D0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150D0                            
000150D0                            loc_1DE46:				; DATA XREF: h+6DBA?o
000150D0 6000 A8F8                  		bra.w	DeleteObject
000150D4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150D4                            
000150D4                            
000150D4                            
000150D4                            loc_1DE4A:
000150D4 3468 003E                  	movea.w	$3E(a0),a2
000150D8 7210                       	moveq	#$10,d1
000150DA 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
000150E0 6700                       	beq.s	loc_1DE64
000150E2 7206                       	moveq	#$6,d1
000150E4 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
000150EA 6700                       	beq.s	loc_1DE64
000150EC 117C 0002 0024             	move.b	#2,$24(a0)
000150F2 117C 0000 0032             	move.b	#0,$32(a0)
000150F8 4E75                       	rts
000150FA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150FA                            
000150FA                            loc_1DE64:				; CODE XREF: h+6EE0?j
000150FA 5328 0032                  		subq.b	#1,$32(a0)
000150FE 6A00                       		bpl.s	loc_1DEE0
00015100 117C 0003 0032             		move.b	#3,$32(a0)
00015106 4EBA AD0E                  		jsr	FindFreeObj
0001510A 6600                       		bne.s	loc_1DEE0
0001510C 1290                       		move.b	0(a0),0(a1)
0001510E 336A 0008 0008             		move	8(a2),8(a1)
00015114 336A 000C 000C             		move	$C(a2),$C(a1)
0001511A 4A28 0034                  		tst.b	$34(a0)
0001511E 6700                       		beq.s	loc_1DE9A
00015120 5941                       		sub	#4,d1
00015122                            
00015122                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00015122 D369 000C                  		add	d1,$C(a1)
00015126 137C 0000 0022             		move.b	#0,$22(a1)
0001512C 137C 0003 001C             		move.b	#3,$1C(a1)
00015132 5429 0024                  		addq.b	#2,$24(a1)
00015136 2368 0004 0004             		move.l	4(a0),4(a1)
0001513C 1368 0001 0001             		move.b	1(a0),1(a1)
00015142 337C 0080 0018             		move.w	#$80,obPriority(a1)
00015148 137C 0004 0014             		move.b	#4,obActWid(a1)
0001514E 3368 0002 0002             		move	2(a0),2(a1)
00015154 3368 003E 003E             		move	$3E(a0),$3E(a1)
0001515A 0269 7FFF 0002             		and	#$7FFF,2(a1)
00015160 4A6A 0002                  		tst	2(a2)
00015164 6A00                       		bpl.s	loc_1DEE0
00015166 0069 8000 0002             		or	#-$8000,2(a1)
0001516C                            
0001516C                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
0001516C 6100                       		bsr.s	loc_1DEE4
0001516E 4E75                       		rts	
00015170                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015170                            
00015170                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00015170 7000                       		moveq	#0,d0
00015172 1028 001A                  		move.b	$1A(a0),d0
00015176 B028 0030                  		cmp.b	$30(a0),d0
0001517A 6700 0000                  		beq.w	locret_1DF36
0001517E 1140 0030                  		move.b	d0,$30(a0)
00015182 45F9 0000 0000             		lea	(off_1E074).l,a2
00015188 D040                       		add	d0,d0
0001518A D4F2 0000                  		add	(a2,d0.w),a2
0001518E 3A1A                       		move	(a2)+,d5
00015190 5345                       		subq	#1,d5
00015192 6B00 0000                  		bmi.w	locret_1DF36
00015196 3828 003C                  		move $3C(a0),d4
0001519A                            
0001519A                            loc_1DF0A:				; CODE XREF: h+6FBE?j
0001519A 7200                       		moveq	#0,d1
0001519C 321A                       		move	(a2)+,d1
0001519E 3601                       		move	d1,d3
000151A0 E04B                       		lsr.w	#8,d3
000151A2 0243 00F0                  		and	#$F0,d3	; 'ð'
000151A6 0643 0010                  		add	#$10,d3
000151AA 0241 0FFF                  		and	#$FFF,d1
000151AE EB89                       		lsl.l	#5,d1
000151B0 0681 0000 0000             		add.l	#Art_Dust,d1
000151B6 3404                       		move	d4,d2
000151B8 D843                       		add	d3,d4
000151BA D843                       		add	d3,d4
000151BC 4EB9 0000 142A             		jsr	(QueueDMATransfer).l
000151C2 51CD FFD6                  		dbf	d5,loc_1DF0A
000151C6 4E75                           rts
000151C8                            
000151C8                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
000151C8 4E75                       		rts	
000151CA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000151CA 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
000151CC 0000                       		dc byte_1DF43-off_1DF38; 1
000151CE 0000                       		dc byte_1DF4F-off_1DF38; 2
000151D0 0000                       		dc byte_1DF58-off_1DF38; 3
000151D2 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
000151D5 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
000151E1 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
000151EA 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
000151F0                            ; -------------------------------------------------------------------------------
000151F0                            ; Unknown Sprite Mappings
000151F0                            ; -------------------------------------------------------------------------------
000151F0                            MapUnc_1DF5E:
000151F0 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
000151F2 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
000151F4 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
000151F6 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
000151F8 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
000151FA 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
000151FC 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
000151FE 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00015200 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00015202 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00015204 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00015206 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00015208 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
0001520A 0000                       	dc word_1E004-MapUnc_1DF5E; 13
0001520C 0000                       	dc word_1E016-MapUnc_1DF5E; 14
0001520E 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00015210 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00015212 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00015214 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00015216 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00015218 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
0001521A 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
0001521C 00                         word_1DF8A:	dc.b 0
0001521D 01                         word_1DF8C:	dc.b 1
0001521E F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015223 01                         word_1DF96:	dc.b 1
00015224 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015229 01                         word_1DFA0:	dc.b 1
0001522A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001522F 01                         word_1DFAA:	dc.b 1
00015230 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015235 01                         word_1DFB4:	dc.b 1
00015236 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001523B 01                         word_1DFBE:	dc.b 1
0001523C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015241 01                         word_1DFC8:	dc.b 1
00015242 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015247 01                         word_1DFD2:	dc.b 1
00015248 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001524D 01                         word_1DFDC:	dc.b 1
0001524E F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015253 01                         word_1DFE6:	dc.b 1
00015254 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015259 01                         word_1DFF0:	dc.b 1
0001525A 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001525F 01                         word_1DFFA:	dc.b 1
00015260 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015265 02                         word_1E004:	dc.b 2
00015266 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
0001526B 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00015270 02                         word_1E016:	dc.b 2
00015271 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00015276 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
0001527B 02                         word_1E028:	dc.b 2
0001527C F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015281 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015286 02                         word_1E03A:	dc.b 2
00015287 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001528C 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015291 01                         word_1E04C:	dc.b 1
00015292 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015297 01                         word_1E056:	dc.b 1
00015298 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
0001529D 01                         word_1E060:	dc.b 1
0001529E F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
000152A3 01                         word_1E06A:	dc.b 1
000152A4 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
000152A9 00                         	dc.b 0
000152AA 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
000152AC 0000                       	dc word_1E0A2-off_1E074; 1
000152AE 0000                       	dc word_1E0A6-off_1E074; 2
000152B0 0000                       	dc word_1E0AA-off_1E074; 3
000152B2 0000                       	dc word_1E0AE-off_1E074; 4
000152B4 0000                       	dc word_1E0B2-off_1E074; 5
000152B6 0000                       	dc word_1E0B6-off_1E074; 6
000152B8 0000                       	dc word_1E0BA-off_1E074; 7
000152BA 0000                       	dc word_1E0BE-off_1E074; 8
000152BC 0000                       	dc word_1E0C2-off_1E074; 9
000152BE 0000                       	dc word_1E0C6-off_1E074; 10
000152C0 0000                       	dc word_1E0CA-off_1E074; 11
000152C2 0000                       	dc word_1E0CE-off_1E074; 12
000152C4 0000                       	dc word_1E0D2-off_1E074; 13
000152C6 0000                       	dc word_1E0D8-off_1E074; 14
000152C8 0000                       	dc word_1E0DE-off_1E074; 15
000152CA 0000                       	dc word_1E0E4-off_1E074; 16
000152CC 0000                       	dc word_1E0EA-off_1E074; 17
000152CE 0000                       	dc word_1E0EA-off_1E074; 18
000152D0 0000                       	dc word_1E0EA-off_1E074; 19
000152D2 0000                       	dc word_1E0EA-off_1E074; 20
000152D4 0000                       	dc word_1E0EC-off_1E074; 21
000152D6 0000                       word_1E0A0:	dc 0
000152D8 0001                       word_1E0A2:	dc 1
000152DA 7000                       	dc $7000
000152DC 0001                       word_1E0A6:	dc 1
000152DE F008                       	dc $F008
000152E0 0001                       word_1E0AA:	dc 1
000152E2 F018                       	dc $F018
000152E4 0001                       word_1E0AE:	dc 1
000152E6 F028                       	dc $F028
000152E8 0001                       word_1E0B2:	dc 1
000152EA F038                       	dc $F038
000152EC 0001                       word_1E0B6:	dc 1
000152EE F048                       	dc $F048
000152F0 0001                       word_1E0BA:	dc 1
000152F2 7058                       	dc $7058
000152F4 0001                       word_1E0BE:	dc 1
000152F6 7060                       	dc $7060
000152F8 0001                       word_1E0C2:	dc 1
000152FA 7068                       	dc $7068
000152FC 0001                       word_1E0C6:	dc 1
000152FE 7070                       	dc $7070
00015300 0001                       word_1E0CA:	dc 1
00015302 7078                       	dc $7078
00015304 0001                       word_1E0CE:	dc 1
00015306 7080                       	dc $7080
00015308 0002                       word_1E0D2:	dc 2
0001530A 1088                       	dc $1088
0001530C 708A                       	dc $708A
0001530E 0002                       word_1E0D8:	dc 2
00015310 3092                       	dc $3092
00015312 7096                       	dc $7096
00015314 0002                       word_1E0DE:	dc 2
00015316 509E                       	dc $509E
00015318 70A4                       	dc $70A4
0001531A 0002                       word_1E0E4:	dc 2
0001531C 50AC                       	dc $50AC
0001531E 70B2                       	dc $70B2
00015320 0000                       word_1E0EA:	dc 0
00015322 0001                       word_1E0EC:	dc 1
00015324 F0BA                       	dc $F0BA
00015326                            	even
00015326                            
00015326                            ; ===========================================================================
00015326                            
00015326                            LoadPlayerPal:
00015326 7000                       		moveq	#0,d0
00015328 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
0001532C 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015330 4E75                       		rts
00015332                            
00015332                            	@palLUT:
00015332 0315 1617 18               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
00015337 191A 1B1C 1D               		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10
0001533C                            
0001533C                            LoadPlayerWaterPal:
0001533C 7000                       		moveq	#0,d0
0001533E 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015342 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015346 4E75                       		rts
00015348                            
00015348                            	@palLUT:
00015348 101E 1F20 21               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
0001534D 2223 2425 26               		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10
00015352                            
00015352                            ; ---------------------------------------------------------------------------
00015352                            ; Object 01 - Sonic
00015352                            ; ---------------------------------------------------------------------------
00015352                            
00015352                            SonicPlayer:
00015352 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015356 6700                       		beq.s	Sonic_Normal	; if not, branch
00015358 4EF9 0000 0000             		jmp	(DebugMode).l
0001535E                            ; ===========================================================================
0001535E                            
0001535E                            Sonic_Normal:
0001535E 7000                       		moveq	#0,d0
00015360 1028 0024                  		move.b	obRoutine(a0),d0
00015364 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00015368 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
0001536C                            ; ===========================================================================
0001536C 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
0001536E 0000                       		dc.w Sonic_Control-Sonic_Index
00015370 0000                       		dc.w Sonic_Hurt-Sonic_Index
00015372 0000                       		dc.w Sonic_Death-Sonic_Index
00015374 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015376                            ; ===========================================================================
00015376                            
00015376                            Sonic_Main:	; Routine 0
00015376 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001537C 5428 0024                  		addq.b	#2,obRoutine(a0)
00015380 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015386 117C 0009 0017             		move.b	#9,obWidth(a0)
0001538C 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015394 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001539A 317C 0100 0018             		move.w	#$100,obPriority(a0)
000153A0 117C 0018 0014             		move.b	#$18,obActWid(a0)
000153A6 117C 0004 0001             		move.b	#4,obRender(a0)
000153AC 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
000153B2 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
000153B8 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
000153BE 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
000153C4                            
000153C4                            Sonic_Control:    ; Routine 2
000153C4 4A38 FF8B                   		tst.b	($FFFFFF8B).w
000153C8 6700 0000                  		beq.w	@cont    
000153CC 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
000153CE                             
000153CE                            	@cont: 
000153CE 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
000153D2 6700                       		beq.s    loc_12C58    ; if not, branch
000153D4 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
000153DA 6700                       		beq.s    loc_12C58    ; if not, branch
000153DC 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
000153E2 4238 F7CC                  		clr.b    (f_lockctrl).w
000153E6 4E75                       		rts
000153E8                            		
000153E8                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
000153E8                            ; ---------------------------------------------------------------------------
000153E8                            ; Subroutine to    horizontally pan the camera view ahead of the player
000153E8                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
000153E8                            ; ---------------------------------------------------------------------------
000153E8                            
000153E8                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000153E8                            
000153E8                            
000153E8                            Sonic_PanCamera:
000153E8 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
000153EC 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000153F0 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000153F2 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000153F4                            
000153F4                                @abs_inertia:
000153F4                            
000153F4                            ; These lines were intended to prevent the Camera from panning while
000153F4                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000153F4                            ; However, given that no such object exists in Sonic 1, I just went
000153F4                            ; ahead and commented these out.
000153F4                            ;        btst    #1,$2C(a0)                ; is sonic going up a giant ramp in PPZ?
000153F4                            ;        beq.s    @skip                    ; if not, branch
000153F4                            ;        cmpi.w    #$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000153F4                            ;        bcs.s    @reset_pan                ; if so, branch
000153F4                            
000153F4                            ; These lines aren't part of the original routine; I added them myself.
000153F4                            ; If you've ported the Spin Dash, uncomment the following lines of code
000153F4                            ; to allow the camera to pan ahead while charging the Spin Dash:
000153F4 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000153F8 6700                               beq.s    @skip                    ; if not, branch
000153FA 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
00015400 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
00015402 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
00015404                            
00015404                                @skip:
00015404 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
00015408 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
0001540A 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
0001540E 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
00015410                            
00015410                                @pan_right:
00015410 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015412 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
00015416 6500                               bcs.s    @update_pan                ; if not, branch
00015418 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
0001541C 6000                               bra.s    @update_pan                ; branch
0001541E                            ; ---------------------------------------------------------------------------
0001541E                            
0001541E                                @pan_left:
0001541E 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015420 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
00015424 6400                               bcc.s    @update_pan                ; if not, branch
00015426 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
0001542A 6000                               bra.s    @update_pan                ; branch
0001542C                            ; ---------------------------------------------------------------------------
0001542C                            
0001542C                                @reset_pan:
0001542C 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
00015430 6700                               beq.s    @update_pan                ; if so, branch
00015432 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
00015434                                 
00015434                                @reset_right:
00015434 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015436 6000                               bra.s    @update_pan                ; branch
00015438                            ; ---------------------------------------------------------------------------
00015438                            
00015438                                @reset_left:
00015438 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
0001543A                            
0001543A                                @update_pan:
0001543A 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
0001543E 4E75                               rts                                ; return
00015440                                 
00015440                            ; End of function Sonic_PanCamera
00015440                            
00015440                            
00015440                            ; ===========================================================================
00015440                            
00015440                            loc_12C58:
00015440 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
00015444 6600                       		bne.s	loc_12C64	; if yes, branch
00015446 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
0001544C                            
0001544C                            loc_12C64:
0001544C 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
00015452 6600                       		bne.s	loc_12C7E	; if yes, branch
00015454 7000                       		moveq	#0,d0
00015456 1028 0022                  		move.b	obStatus(a0),d0
0001545A 0240 0006                  		andi.w	#6,d0
0001545E 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
00015462 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015466                            
00015466                            loc_12C7E:
00015466 6100                       		bsr.s	Sonic_Display
00015468 6100 0000                  		bsr.w	Sonic_RecordPosition
0001546C 6100 0000                  		bsr.w	Sonic_Water
00015470 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015476 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001547C 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
00015480 6700                       		beq.s	loc_12CA6
00015482 4A28 001C                  		tst.b	obAnim(a0)
00015486 6600                       		bne.s	loc_12CA6
00015488 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
0001548E                            
0001548E                            loc_12CA6:
0001548E 6100 0000                  		bsr.w	Sonic_Animate
00015492 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015496 6B00                       		bmi.s	loc_12CB6
00015498 4EB9 0000 0000             		jsr	(ReactToItem).l
0001549E                            
0001549E                            loc_12CB6:
0001549E 6100 0000                  		bsr.w	Sonic_Loops
000154A2 6100 0000                  		bsr.w	Sonic_LoadGfx
000154A6 4E75                       		rts	
000154A8                            ; ===========================================================================
000154A8 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
000154AA 0000                       		dc.w Sonic_MdJump-Sonic_Modes
000154AC 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
000154AE 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
000154B0                            ; ---------------------------------------------------------------------------
000154B0                            ; Music	to play	after invincibility wears off
000154B0                            ; ---------------------------------------------------------------------------
000154B0                            MusicList2:
000154B0 00                         		dc.b bgm_GHZ
000154B1 00                         		dc.b bgm_LZ
000154B2 00                         		dc.b bgm_MZ
000154B3 00                         		dc.b bgm_SLZ
000154B4 00                         		dc.b bgm_SYZ
000154B5 00                         		dc.b bgm_SBZ
000154B6                            		; The ending doesn't get an entry
000154B6                            		even
000154B6                            
000154B6                            		include	"_incObj\Sonic Display.asm"
000154B6                            ; ---------------------------------------------------------------------------
000154B6                            ; Subroutine to display Sonic and set music
000154B6                            ; ---------------------------------------------------------------------------
000154B6                            
000154B6                            Sonic_Display:
000154B6 3028 0030                  		move.w    flashtime(a0),d0
000154BA 6700                       		beq.s    @showAfterImage
000154BC 5368 0030                  		subq.w    #1,flashtime(a0)
000154C0 E648                               	lsr.w    #3,d0
000154C2 6400                               	bcc.s    @chkinvincible
000154C4                            
000154C4                            	@showAfterImage:
000154C4 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
000154C8 4A40                       		tst.w    d0                    ; is inertia greater than 0?
000154CA 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
000154CC 4440                       		neg        d0                    ; if not, negate it
000154CE                            
000154CE                            	@AfterImage_Start:        
000154CE 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000154D2 6700                       		beq.s	@display	; if not, don't show the After Image
000154D4                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
000154D4                            		;blt.s    @display	; if not, don't show the After Image
000154D4                            	
000154D4                            	@AfterImage_Start2:    
000154D4 6100 A940                          	bsr.w    FindFreeObj    ; search a free space in object RAM
000154D8 6600                               	bne.s    @display    ; if not have, don't load the After Image
000154DA 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
000154DE 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
000154E4 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000154EA 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000154F0                            
000154F0                                	@display:
000154F0 4EB9 0000 F98A                     	jsr    (DisplaySprite).l
000154F6                            
000154F6                            	@chkinvincible:
000154F6 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000154FA 6700                       		beq.s	@chkshoes	; if not, branch
000154FC 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
00015500 6700                       		beq.s	@chkshoes	; if no	time remains, branch
00015502 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
00015506 6600                       		bne.s	@chkshoes
00015508 4A38 F7AA                  		tst.b	(f_lockscreen).w
0001550C 6600                       		bne.s	@removeinvincible
0001550E 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
00015514 6500                       		bcs.s	@removeinvincible
00015516 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001551A 4EB9 0000 124E                     	jsr	(PlaySound).l    ; play normal music
00015520                            
00015520                            	@removeinvincible:
00015520 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
00015526                            
00015526                            	@chkshoes:
00015526 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001552A 6700                       		beq.s	@exit		; if not, branch
0001552C 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
00015530 6700                       		beq.s	@exit
00015532 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
00015536 6600                       		bne.s	@exit
00015538 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001553E 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015544 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001554A 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
00015550 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015554 4EB9 0000 124E                     	jsr	(PlaySound).l    ; play normal music
0001555A                            		
0001555A                            	@exit:
0001555A 4E75                       		rts	
0001555A 4E75                       		rts	
0001555C                            		include	"_incObj\Sonic RecordPosition.asm"
0001555C                            ; ---------------------------------------------------------------------------
0001555C                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001555C                            ; ---------------------------------------------------------------------------
0001555C                            
0001555C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001555C                            
0001555C                            
0001555C                            Sonic_RecordPosition:
0001555C 3038 F7A8                  		move.w	(v_trackpos).w,d0
00015560 43F8 CB00                  		lea	(v_tracksonic).w,a1
00015564 43F1 0000                  		lea	(a1,d0.w),a1
00015568 32E8 0008                  		move.w	obX(a0),(a1)+
0001556C 32E8 000C                  		move.w	obY(a0),(a1)+
00015570 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00015574 4E75                       		rts	
00015576                            ; End of function Sonic_RecordPosition
00015576                            ; End of function Sonic_RecordPosition
00015576                            		include	"_incObj\Sonic Water.asm"
00015576                            ; ---------------------------------------------------------------------------
00015576                            ; Subroutine for Sonic when he's underwater
00015576                            ; ---------------------------------------------------------------------------
00015576                            
00015576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015576                            
00015576                            
00015576                            Sonic_Water:
00015576 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
0001557C 6700                       		beq.s	WaterTagforMZ	; if yes, branch
0001557E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
00015584 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
00015586                            
00015586                            	Sonic_Water_Exit:
00015586 4E75                       		rts	
00015588                            ; ===========================================================================
00015588                            
00015588                            	Sonic_Water_LZ:
00015588 3038 F646                  		move.w	(v_waterpos1).w,d0
0001558C B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
00015590 6C00 0000                  		bge.w	Abovewater	; if yes, branch
00015594 6000 0000                  		bra	WaterStatus
00015598                            	WaterTagforMZ:
00015598 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
0001559E 6700 0000                  		beq.w	Abovewater	; if yes, branch
000155A2                            		;move.w #$F,d0             ;TIS Length ($F = full line)
000155A2                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
000155A2                                ;    lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
000155A2                            	;	jsr	Palload_Loop
000155A2                            	WaterStatus:
000155A2 08E8 0006 0022             		bset	#6,obStatus(a0)
000155A8 6600 FFDC                  		bne.w	Sonic_Water_Exit
000155AC 6100 0000                  		bsr.w	ResumeMusic
000155B0 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155B6                            
000155B6 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
000155BC 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
000155C2 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000155C8 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000155CE 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000155D4 E0E8 0010                  		asr	obVelX(a0)
000155D8 E0E8 0012                  		asr	obVelY(a0)
000155DC E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000155E0 6700 FFA4                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000155E4                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155E4 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000155F4 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000155FA 6600 0000                  		bne.w	@return
000155FE                            		
000155FE                            		
000155FE                            	@return:
000155FE 4E75                       		rts
00015600                            ; ===========================================================================
00015600                            
00015600                            Abovewater:
00015600 08A8 0006 0022             		bclr	#6,obStatus(a0)
00015606 6700 FF7E                  		beq.w	Sonic_Water_Exit
0001560A 6100 0000                  		bsr.w	ResumeMusic
0001560E 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015614                            
00015614 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001561A 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015620 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015626 E1E8 0012                  		asl	obVelY(a0)
0001562A 6700 FF5A                  		beq.w	Sonic_Water_Exit
0001562E 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015634 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
0001563A 6E00                       		bgt.s	@belowmaxspeed
0001563C 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
00015642                            
00015642                            	@belowmaxspeed:
0001564C                            ; End of function Sonic_Water
0001564C                            ; End of function Sonic_Water
0001564C                            		include "_incObj\03 Hangable Sprite.asm"
0001564C                            ; ===========================================================================
0001564C                            ; ----------------------------------------------------------------------------
0001564C                            ; Object 03 - Invisible sprite that you can hang on to
0001564C                            ; ----------------------------------------------------------------------------
0001564C                            ; Sprite_2C92C:
0001564C                            Obj03:
0001564C 7000                       	moveq    #0,d0
0001564E 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
00015652 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
00015656 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
0001565A                            ; ===========================================================================
0001565A                            ; off_2C93A:
0001565A                            Obj03_Index:
0001565A 0000                           dc.w Obj03_Main-Obj03_Index
0001565C 0000                               dc.w Obj03_Init-Obj03_Index
0001565E                            ; ===========================================================================
0001565E                            ; loc_2C93E:
0001565E                            Obj03_Init:
0001565E 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
00015662 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
00015668 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
0001566E 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
00015674                            ; loc_2C954:
00015674                            Obj03_Main:
00015674 45E8 0030                      lea    $30(a0),a2
00015678 43F8 D000                      lea    (v_player).w,a1 ; a1=character
0001567C 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
00015680 6100                           bsr.s    Obj03_Check
00015682                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
00015682                            ;    addq.w    #1,a2                          ;disabled
00015682                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
00015682                            ;    bsr.s    Obj03_Check         	;disabled
00015682 4EF9 0000 0000             	jmp		bonu_chkdel
00015688                            ; ===========================================================================
00015688                            ; loc_2C972:
00015688                            Obj03_Check:
00015688 4A12                       		tst.b	(a2)
0001568A 6700                       		beq.s	loc_2C9A0
0001568C 0200 0070                  		andi.b	#btnABC,d0
00015690 6700 0000                  		beq.w	Obj03_Check_End
00015694 4238 F7C8                  		clr.b	f_lockmulti.w
00015698 4212                       		clr.b	(a2)
0001569A 157C 0012 0002             		move.b	#$12,2(a2)
000156A0 0240 0F00                  		andi.w	#$F00,d0
000156A4 6700                       		beq.s	loc_2C954
000156A6 157C 003C 0002             		move.b	#$3C,2(a2)
000156AC                            	
000156AC                            loc_2C954:
000156AC 337C FD00 0012             		move.w	#-$300,y_vel(a1)
000156B2 6000 0000                  		bra.w	Obj03_Check_End
000156B6                            ; ===========================================================================
000156B6                            
000156B6                            loc_2C9A0:
000156B6 4A2A 0002                  		tst.b	2(a2)
000156BA 6700                       		beq.s	loc_2C972
000156BC 532A 0002                  		subq.b	#1,2(a2)
000156C0 6600 0000                  		bne.w	Obj03_Check_End
000156C4                            
000156C4                            loc_2C972:
000156C4 3029 0008                  		move.w	obX(a1),d0
000156C8 9068 0008                  		sub.w	obX(a0),d0
000156CC 0640 0018                  		addi.w	#$18,d0
000156D0 0C40 0030                  		cmpi.w	#$30,d0
000156D4 6400 0000                  		bhs.w	Obj03_Check_End
000156D8 3229 000C                  		move.w	obY(a1),d1
000156DC 9268 000C                  		sub.w	obY(a0),d1
000156E0 0C41 0010                  		cmpi.w	#$10,d1
000156E4 6400 0000                  		bhs.w	Obj03_Check_End
000156E8 4A38 F7C8                  		tst.b	f_lockmulti.w
000156EC 6B00                       		bmi.s	Obj03_Check_End
000156EE 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000156F4 6400                       		bhs.s	Obj03_Check_End
000156F6 4A78 FFFA                  		tst.w	(f_debugmode).w
000156FA 6600                       		bne.s	Obj03_Check_End
000156FC 4269 0010                  		clr.w	x_vel(a1)
00015700 4269 0012                  		clr.w	y_vel(a1)
00015704 4269 0020                  		clr.w	obInertia(a1)
00015708 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001570E 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
00015714 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
0001571A 14BC 0001                  		move.b	#1,(a2)
0001571E                            
0001571E                            ; return_2CA08:
0001571E                            Obj03_Check_End:
0001571E 4E75                       		rts
0001571E 4E75                       		rts
00015720                            
00015720                            ; ===========================================================================
00015720                            ; ---------------------------------------------------------------------------
00015720                            ; Modes	for controlling	Sonic
00015720                            ; ---------------------------------------------------------------------------
00015720                            
00015720                            Sonic_MdNormal:
00015720 6100 0000                  		bsr.w	Sonic_Peelout
00015724 6100 0000                  		bsr.w	Sonic_SpinDash
00015728 6100 0000                  		bsr.w	Sonic_Jump
0001572C 6100 0000                  		bsr.w	Sonic_SlopeResist
00015730 6100 0000                  		bsr.w	Sonic_Move
00015734 6100 0000                  		bsr.w	Sonic_Roll
00015738 6100 0000                  		bsr.w	Sonic_LevelBound
0001573C 4EB9 0000 F976             		jsr	(SpeedToPos).l
00015742 6100 0000                  		bsr.w	Sonic_AnglePos
00015746 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001574A 4E75                       		rts	
0001574C                            
0001574C                            ; ===========================================================================
0001574C                            
0001574C                            Sonic_MdJump:
0001574C 6100 0000                  		bsr.w   Sonic_AirRoll
00015750 6100 0000                  		bsr.w	Sonic_JumpHeight
00015754 6100 0000                  		bsr.w	Sonic_JumpDirection
00015758 6100 0000                  		bsr.w	Sonic_LevelBound
0001575C 4EB9 0000 F93E             		jsr	(ObjectFall).l
00015762 0828 0006 0022             		btst	#6,obStatus(a0)
00015768 6700                       		beq.s	loc_12E5C
0001576A 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015770                            
00015770                            loc_12E5C:
00015770 6100 0000                  		bsr.w	Sonic_JumpAngle
00015774 6100 0000                  		bsr.w	Sonic_Floor
00015778 4E75                       		rts	
0001577A                            ; ===========================================================================
0001577A                            
0001577A                            Sonic_MdRoll:
0001577A 6100 0000                  		bsr.w	Sonic_Jump
0001577E 6100 0000                  		bsr.w	Sonic_RollRepel
00015782 6100 0000                  		bsr.w	Sonic_RollSpeed
00015786 6100 0000                  		bsr.w	Sonic_LevelBound
0001578A 4EB9 0000 F976             		jsr	(SpeedToPos).l
00015790 6100 0000                  		bsr.w	Sonic_AnglePos
00015794 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015798 4E75                       		rts	
0001579A                            ; ===========================================================================
0001579A                            
0001579A                            Sonic_MdJump2:
0001579A 6100 0000                  		bsr.w	Sonic_JumpHeight
0001579E 6100 0000                  		bsr.w	Sonic_JumpDirection
000157A2 6100 0000                  		bsr.w	Sonic_LevelBound
000157A6 4EB9 0000 F93E             		jsr	(ObjectFall).l
000157AC 0828 0006 0022             		btst	#6,obStatus(a0)
000157B2 6700                       		beq.s	loc_12EA6
000157B4 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000157BA                            
000157BA                            loc_12EA6:
000157BA 6100 0000                  		bsr.w	Sonic_JumpAngle
000157BE 6100 0000                  		bsr.w	Sonic_Floor
000157C2 4E75                       		rts	
000157C4                            
000157C4                            		include	"_incObj\Sonic Move.asm"
000157C4                            ; ---------------------------------------------------------------------------
000157C4                            ; Subroutine to	make Sonic walk/run
000157C4                            ; ---------------------------------------------------------------------------
000157C4                            
000157C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157C4                            
000157C4                            
000157C4                            Sonic_Move:
000157C4 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000157C8 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000157CC 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000157D0 4A38 F7CA                  		tst.b	(f_jumponly).w
000157D4 6600 0000                  		bne.w	loc_12FEE
000157D8 4A68 003E                  		tst.w	$3E(a0)
000157DC 6600 0000                  		bne.w	Sonic_ResetScr
000157E0 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000157E6 6700                       		beq.s	@notleft	; if not, branch
000157E8 6100 0000                  		bsr.w	Sonic_MoveLeft
000157EC                            
000157EC                            	@notleft:
000157EC 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000157F2 6700                       		beq.s	@notright	; if not, branch
000157F4 6100 0000                  		bsr.w	Sonic_MoveRight
000157F8                            
000157F8                            	@notright:
000157F8 1028 0026                  		move.b	obAngle(a0),d0
000157FC 0600 0020                  		addi.b	#$20,d0
00015800 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00015804 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015808 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
0001580C 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015810 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015816 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
0001581C 0828 0003 0022             		btst	#3,obStatus(a0)
00015822 6700                       		beq.s	Sonic_Balance
00015824 7000                       		moveq	#0,d0
00015826 1028 003D                  		move.b	$3D(a0),d0
0001582A ED48                       		lsl.w	#6,d0
0001582C 43F8 D000                  		lea	(v_objspace).w,a1
00015830 43F1 0000                  		lea	(a1,d0.w),a1
00015834 4A29 0022                  		tst.b	obStatus(a1)
00015838 6B00                       		bmi.s	Sonic_LookUp
0001583A 7200                       		moveq	#0,d1
0001583C 1229 0014                  		move.b	obActWid(a1),d1
00015840 3401                       		move.w	d1,d2
00015842 D442                       		add.w	d2,d2
00015844 5942                       		subq.w	#4,d2
00015846 D268 0008                  		add.w	obX(a0),d1
0001584A 9269 0008                  		sub.w	obX(a1),d1
0001584E 0C41 0004                  		cmpi.w	#4,d1
00015852 6D00                       		blt.s	loc_12F6A
00015854 B242                       		cmp.w	d2,d1
00015856 6C00                       		bge.s	loc_12F5A
00015858 6000                       		bra.s	Sonic_LookUp
0001585A                            ; ===========================================================================
0001585A                            
0001585A                            Sonic_Balance:
0001585A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00015860 0C41 000C                  		cmpi.w	#$C,d1
00015864 6D00                       		blt.s	Sonic_LookUp
00015866 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001586C 6600                       		bne.s	loc_12F62
0001586E                            
0001586E                            loc_12F5A:
0001586E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015874 6000                       		bra.s	loc_12F70
00015876                            ; ===========================================================================
00015876                            
00015876                            loc_12F62:
00015876 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001587C 6600                       		bne.s	Sonic_LookUp
0001587E                            
0001587E                            loc_12F6A:
0001587E 08E8 0000 0022             		bset	#0,obStatus(a0)
00015884                            
00015884                            loc_12F70:
00015884 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
0001588A 6000 0000                  		bra.w	Sonic_ResetScr
0001588E                            ; ===========================================================================
0001588E                            
0001588E                            Sonic_LookUp:
0001588E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00015894 6700                       		beq.s	Sonic_Duck	; if not, branch
00015896 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001589C 5238 C903                  		addq.b	#1,($FFFFC903).w
000158A0 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
000158A6 6500                       		bcs.s	Sonic_ResetScr_Part2
000158A8 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
000158AE 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000158B4 6700                       		beq.s	loc_12FC2
000158B6 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000158BA 6000                       		bra.s	loc_12FC2
000158BC                            ; ===========================================================================
000158BC                            
000158BC                            Sonic_Duck:
000158BC 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000158C2 6700                       		beq.s	Sonic_ResetScr	; if not, branch
000158C4 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000158CA 5238 C903                  		addq.b	#1,($FFFFC903).w
000158CE 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
000158D4 6500                       		bcs.s	Sonic_ResetScr_Part2
000158D6 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
000158DC 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000158E2 6700                       		beq.s	loc_12FC2
000158E4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000158E8 6000                       		bra.s	loc_12FC2
000158EA                            ; ===========================================================================
000158EA                            
000158EA                            Sonic_ResetScr:
000158EA 11FC 0000 C903             		move.b	#0,($FFFFC903).w
000158F0                            		
000158F0                            Sonic_ResetScr_Part2:
000158F0 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000158F6 6700                       		beq.s	loc_12FC2	; if yes, branch
000158F8 6400                       		bcc.s	loc_12FBE
000158FA 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000158FE                            
000158FE                            loc_12FBE:
000158FE 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00015902                            
00015902                            loc_12FC2:
00015902 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015906 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
0001590A 6600                       		bne.s	loc_12FEE	; if yes, branch
0001590C 3028 0020                  		move.w	obInertia(a0),d0
00015910 6700                       		beq.s	loc_12FEE
00015912 6B00                       		bmi.s	loc_12FE2
00015914 9045                       		sub.w	d5,d0
00015916 6400                       		bcc.s	loc_12FDC
00015918 303C 0000                  		move.w	#0,d0
0001591C                            
0001591C                            loc_12FDC:
0001591C 3140 0020                  		move.w	d0,obInertia(a0)
00015920 6000                       		bra.s	loc_12FEE
00015922                            ; ===========================================================================
00015922                            
00015922                            loc_12FE2:
00015922 D045                       		add.w	d5,d0
00015924 6400                       		bcc.s	loc_12FEA
00015926 303C 0000                  		move.w	#0,d0
0001592A                            
0001592A                            loc_12FEA:
0001592A 3140 0020                  		move.w	d0,obInertia(a0)
0001592E                            
0001592E                            loc_12FEE:
0001592E 4A28 0039                  		tst.b	$39(a0) 	;Peelout
00015932 6600                       		bne.s	loc_1300C 	;Peelout
00015934 1028 0026                  		move.b	obAngle(a0),d0
00015938 4EB9 0000 3A36             		jsr	(CalcSine).l
0001593E C3E8 0020                  		muls.w	obInertia(a0),d1
00015942 E081                       		asr.l	#8,d1
00015944 3141 0010                  		move.w	d1,obVelX(a0)
00015948 C1E8 0020                  		muls.w	obInertia(a0),d0
0001594C E080                       		asr.l	#8,d0
0001594E 3140 0012                  		move.w	d0,obVelY(a0)
00015952                            
00015952                            loc_1300C:
00015952 1028 0026                  		move.b	obAngle(a0),d0
00015956 0600 0040                  		addi.b	#$40,d0
0001595A 6B00                       		bmi.s	locret_1307C
0001595C 123C 0040                  		move.b	#$40,d1
00015960 4A68 0020                  		tst.w	obInertia(a0)
00015964 6700                       		beq.s	locret_1307C
00015966 6B00                       		bmi.s	loc_13024
00015968 4441                       		neg.w	d1
0001596A                            
0001596A                            loc_13024:
0001596A 1028 0026                  		move.b	obAngle(a0),d0
0001596E D001                       		add.b	d1,d0
00015970 3F00                       		move.w	d0,-(sp)
00015972 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015976 301F                       		move.w	(sp)+,d0
00015978 4A41                       		tst.w	d1
0001597A 6A00                       		bpl.s	locret_1307C
0001597C E141                       		asl.w	#8,d1
0001597E 0600 0020                  		addi.b	#$20,d0
00015982 0200 00C0                  		andi.b	#$C0,d0
00015986 6700                       		beq.s	loc_13078
00015988 0C00 0040                  		cmpi.b	#$40,d0
0001598C 6700                       		beq.s	loc_13066
0001598E 0C00 0080                  		cmpi.b	#$80,d0
00015992 6700                       		beq.s	loc_13060
00015994 D368 0010                  		add.w	d1,obVelX(a0)
00015998 08E8 0005 0022             		bset	#5,obStatus(a0)
0001599E 317C 0000 0020             		move.w	#0,obInertia(a0)
000159A4 4E75                       		rts	
000159A6                            ; ===========================================================================
000159A6                            
000159A6                            loc_13060:
000159A6 9368 0012                  		sub.w	d1,obVelY(a0)
000159AA 4E75                       		rts	
000159AC                            ; ===========================================================================
000159AC                            
000159AC                            loc_13066:
000159AC 9368 0010                  		sub.w	d1,obVelX(a0)
000159B0 08E8 0005 0022             		bset	#5,obStatus(a0)
000159B6 317C 0000 0020             		move.w	#0,obInertia(a0)
000159BC 4E75                       		rts	
000159BE                            ; ===========================================================================
000159BE                            
000159BE                            loc_13078:
000159BE D368 0012                  		add.w	d1,obVelY(a0)
000159C2                            
000159C2                            locret_1307C:
000159C2 4E75                       		rts	
000159C4                            ; End of function Sonic_Move
000159C4                            
000159C4                            
000159C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159C4                            
000159C4                            
000159C4                            Sonic_MoveLeft:
000159C4 3028 0020                  		move.w	obInertia(a0),d0
000159C8 6700                       		beq.s	loc_13086
000159CA 6A00                       		bpl.s	loc_130B2
000159CC                            
000159CC                            loc_13086:
000159CC 08E8 0000 0022             		bset	#0,$22(a0)
000159D2 6600                       		bne.s	loc_1309A
000159D4 08A8 0005 0022             		bclr	#5,$22(a0)
000159DA 117C 0001 001D             		move.b	#1,$1D(a0)
000159E0                            
000159E0                            loc_1309A:
000159E0 9045                       		sub.w	d5,d0
000159E2 3206                       		move.w	d6,d1
000159E4 4441                       		neg.w	d1
000159E6 B041                       		cmp.w	d1,d0
000159E8 6E00                       		bgt.s	loc_130A6
000159EA D045                       		add.w	d5,d0
000159EC B041                       		cmp.w	d1,d0
000159EE 6F00                       		ble.s	loc_130A6
000159F0 3001                       		move.w	d1,d0
000159F2                            
000159F2                            loc_130A6:
000159F2 3140 0020                  		move.w	d0,obInertia(a0)
000159F6 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000159FC 4E75                       		rts
000159FE                            ; ===========================================================================
000159FE                            
000159FE                            loc_130B2:
000159FE 9044                       		sub.w	d4,d0
00015A00 6400                       		bcc.s	loc_130BA
00015A02 303C FF80                  		move.w	#-$80,d0
00015A06                            
00015A06                            loc_130BA:
00015A06 3140 0020                  		move.w	d0,obInertia(a0)
00015A0A 1228 0026                  		move.b	obAngle(a0),d1
00015A0E 0601 0020                  		addi.b	#$20,d1
00015A12 0201 00C0                  		andi.b	#$C0,d1
00015A16 6600                       		bne.s	locret_130E8
00015A18 0C40 0400                  		cmpi.w	#$400,d0
00015A1C 6D00                       		blt.s	locret_130E8
00015A1E 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015A24 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015A34 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015A3A 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015A40                            		
00015A40                            locret_130E8:
00015A40 4E75                       		rts	
00015A42                            ; End of function Sonic_MoveLeft
00015A42                            
00015A42                            
00015A42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A42                            
00015A42                            
00015A42                            Sonic_MoveRight:
00015A42 3028 0020                  		move.w	obInertia(a0),d0
00015A46 6B00                       		bmi.s	loc_13118
00015A48 08A8 0000 0022             		bclr	#0,$22(a0)
00015A4E 6700                       		beq.s	loc_13104
00015A50 08A8 0005 0022             		bclr	#5,$22(a0)
00015A56 117C 0001 001D             		move.b	#1,$1D(a0)
00015A5C                            
00015A5C                            loc_13104:
00015A5C D045                       		add.w	d5,d0
00015A5E B046                       		cmp.w	d6,d0
00015A60 6D00                       		blt.s	loc_1310C
00015A62 9045                       		sub.w	d5,d0
00015A64 B046                       		cmp.w	d6,d0
00015A66 6C00                       		bge.s	loc_1310C
00015A68 3006                       		move.w	d6,d0
00015A6A                            
00015A6A                            loc_1310C:
00015A6A 3140 0020                  		move.w	d0,obInertia(a0)
00015A6E 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015A74 4E75                       		rts
00015A76                            ; ===========================================================================
00015A76                            
00015A76                            loc_13118:
00015A76 D044                       		add.w	d4,d0
00015A78 6400                       		bcc.s	loc_13120
00015A7A 303C 0080                  		move.w	#$80,d0
00015A7E                            
00015A7E                            loc_13120:
00015A7E 3140 0020                  		move.w	d0,obInertia(a0)
00015A82 1228 0026                  		move.b	obAngle(a0),d1
00015A86 0601 0020                  		addi.b	#$20,d1
00015A8A 0201 00C0                  		andi.b	#$C0,d1
00015A8E 6600                       		bne.s	locret_1314E
00015A90 0C40 FC00                  		cmpi.w	#-$400,d0
00015A94 6E00                       		bgt.s	locret_1314E
00015A96 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015A9C 08E8 0000 0022             		bset	#0,obStatus(a0)
00015AAC 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015AB2 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015AB8                            		
00015AB8                            locret_1314E:
00015AB8 4E75                       		rts	
00015ABA                            ; End of function Sonic_MoveRight
00015ABA                            ; End of function Sonic_MoveRight
00015ABA                            		include	"_incObj\Sonic RollSpeed.asm"
00015ABA                            ; ---------------------------------------------------------------------------
00015ABA                            ; Subroutine to	change Sonic's speed as he rolls
00015ABA                            ; ---------------------------------------------------------------------------
00015ABA                            
00015ABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015ABA                            
00015ABA                            
00015ABA                            Sonic_RollSpeed:
00015ABA 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015ABE E346                       		asl.w	#1,d6
00015AC0 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015AC2 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015AC6 E444                       		asr.w	#2,d4
00015AC8 4A38 F7CA                  		tst.b	(f_jumponly).w
00015ACC 6600 0000                  		bne.w	loc_131CC
00015AD0 4A68 003E                  		tst.w	$3E(a0)
00015AD4 6600                       		bne.s	@notright
00015AD6 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015ADC 6700                       		beq.s	@notleft	; if not, branch
00015ADE 6100 0000                  		bsr.w	Sonic_RollLeft
00015AE2                            
00015AE2                            	@notleft:
00015AE2 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015AE8 6700                       		beq.s	@notright	; if not, branch
00015AEA 6100 0000                  		bsr.w	Sonic_RollRight
00015AEE                            
00015AEE                            	@notright:
00015AEE 3028 0020                  		move.w	obInertia(a0),d0
00015AF2 6700                       		beq.s	loc_131AA
00015AF4 6B00                       		bmi.s	loc_1319E
00015AF6 9045                       		sub.w	d5,d0
00015AF8 6400                       		bcc.s	loc_13198
00015AFA 303C 0000                  		move.w	#0,d0
00015AFE                            
00015AFE                            loc_13198:
00015AFE 3140 0020                  		move.w	d0,obInertia(a0)
00015B02 6000                       		bra.s	loc_131AA
00015B04                            ; ===========================================================================
00015B04                            
00015B04                            loc_1319E:
00015B04 D045                       		add.w	d5,d0
00015B06 6400                       		bcc.s	loc_131A6
00015B08 303C 0000                  		move.w	#0,d0
00015B0C                            
00015B0C                            loc_131A6:
00015B0C 3140 0020                  		move.w	d0,obInertia(a0)
00015B10                            
00015B10                            loc_131AA:
00015B10 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015B14 6600                       		bne.s	loc_131CC	; if yes, branch
00015B16 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015B1C 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015B22 117C 0009 0017             		move.b	#9,obWidth(a0)
00015B28 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015B2E 5B68 000C                  		subq.w	#5,obY(a0)
00015B32                            
00015B32                            loc_131CC:
00015B32 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015B38 6700                       		beq.s	@cont2
00015B3A 6400                       		bcc.s	@cont1
00015B3C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015B40                            		
00015B40                            @cont1:
00015B40 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015B44                            		
00015B44                            @cont2:
00015B44 1028 0026                  		move.b	obAngle(a0),d0
00015B48 4EB9 0000 3A36             		jsr	(CalcSine).l
00015B4E C1E8 0020                  		muls.w	obInertia(a0),d0
00015B52 E080                       		asr.l	#8,d0
00015B54 3140 0012                  		move.w	d0,obVelY(a0)
00015B58 C3E8 0020                  		muls.w	obInertia(a0),d1
00015B5C E081                       		asr.l	#8,d1
00015B5E 0C41 1000                  		cmpi.w	#$1000,d1
00015B62 6F00                       		ble.s	loc_131F0
00015B64 323C 1000                  		move.w	#$1000,d1
00015B68                            
00015B68                            loc_131F0:
00015B68 0C41 F000                  		cmpi.w	#-$1000,d1
00015B6C 6C00                       		bge.s	loc_131FA
00015B6E 323C F000                  		move.w	#-$1000,d1
00015B72                            
00015B72                            loc_131FA:
00015B72 3141 0010                  		move.w	d1,obVelX(a0)
00015B76 6000 FDDA                  		bra.w	loc_1300C
00015B7A                            ; End of function Sonic_RollSpeed
00015B7A                            
00015B7A                            
00015B7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B7A                            
00015B7A                            
00015B7A                            Sonic_RollLeft:
00015B7A 3028 0020                  		move.w	obInertia(a0),d0
00015B7E 6700                       		beq.s	loc_1320A
00015B80 6A00                       		bpl.s	loc_13218
00015B82                            
00015B82                            loc_1320A:
00015B82 08E8 0000 0022             		bset	#0,obStatus(a0)
00015B88 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015B8E 4E75                       		rts	
00015B90                            ; ===========================================================================
00015B90                            
00015B90                            loc_13218:
00015B90 9044                       		sub.w	d4,d0
00015B92 6400                       		bcc.s	loc_13220
00015B94 303C FF80                  		move.w	#-$80,d0
00015B98                            
00015B98                            loc_13220:
00015B98 3140 0020                  		move.w	d0,obInertia(a0)
00015B9C 4E75                       		rts	
00015B9E                            ; End of function Sonic_RollLeft
00015B9E                            
00015B9E                            
00015B9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B9E                            
00015B9E                            
00015B9E                            Sonic_RollRight:
00015B9E 3028 0020                  		move.w	obInertia(a0),d0
00015BA2 6B00                       		bmi.s	loc_1323A
00015BA4 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015BAA 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015BB0 4E75                       		rts	
00015BB2                            ; ===========================================================================
00015BB2                            
00015BB2                            loc_1323A:
00015BB2 D044                       		add.w	d4,d0
00015BB4 6400                       		bcc.s	loc_13242
00015BB6 303C 0080                  		move.w	#$80,d0
00015BBA                            
00015BBA                            loc_13242:
00015BBA 3140 0020                  		move.w	d0,obInertia(a0)
00015BBE 4E75                       		rts	
00015BC0                            ; End of function Sonic_RollRight
00015BC0                            ; End of function Sonic_RollRight
00015BC0                            		include	"_incObj\Sonic JumpDirection.asm"
00015BC0                            ; ---------------------------------------------------------------------------
00015BC0                            ; Subroutine to	change Sonic's direction while jumping
00015BC0                            ; ---------------------------------------------------------------------------
00015BC0                            
00015BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BC0                            
00015BC0                            
00015BC0                            Sonic_JumpDirection:
00015BC0 3C38 F760                  		move.w	($FFFFF760).w,d6
00015BC4 3A38 F762                  		move.w	($FFFFF762).w,d5
00015BC8 E345                       		asl.w	#1,d5
00015BCA 3028 0010                  		move.w	$10(a0),d0	
00015BCE 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015BD4 6700                       		beq.s	loc_13278; if not, branch	
00015BD6 08E8 0000 0022             		bset	#0,$22(a0)	
00015BDC 9045                       		sub.w	d5,d0	
00015BDE 3206                       		move.w	d6,d1	
00015BE0 4441                       		neg.w	d1	
00015BE2 B041                       		cmp.w	d1,d0	
00015BE4 6E00                       		bgt.s	loc_13278	
00015BE6 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015BE8 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015BEA 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015BEC 3001                       		move.w	d1,d0
00015BEE                            
00015BEE                            loc_13278:
00015BEE 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015BF4 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015BF6 08A8 0000 0022             		bclr	#0,$22(a0)	
00015BFC D045                       		add.w	d5,d0	
00015BFE B046                       		cmp.w	d6,d0	
00015C00 6D00                       		blt.s	Obj01_JumpMove
00015C02 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015C04 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015C06 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015C08 3006                       		move.w	d6,d0
00015C0A                            
00015C0A                            Obj01_JumpMove:
00015C0A 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015C0E                            
00015C0E                            Obj01_ResetScr2:
00015C0E 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015C14 6700                       		beq.s	loc_132A4	; if yes, branch
00015C16 6400                       		bcc.s	loc_132A0
00015C18 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015C1C                            
00015C1C                            loc_132A0:
00015C1C 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015C20                            
00015C20                            loc_132A4:
00015C20 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015C26 6500                       		bcs.s	locret_132D2	; if yes, branch
00015C28 3028 0010                  		move.w	obVelX(a0),d0
00015C2C 3200                       		move.w	d0,d1
00015C2E EA41                       		asr.w	#5,d1
00015C30 6700                       		beq.s	locret_132D2
00015C32 6B00                       		bmi.s	loc_132C6
00015C34 9041                       		sub.w	d1,d0
00015C36 6400                       		bcc.s	loc_132C0
00015C38 303C 0000                  		move.w	#0,d0
00015C3C                            
00015C3C                            loc_132C0:
00015C3C 3140 0010                  		move.w	d0,obVelX(a0)
00015C40 4E75                       		rts	
00015C42                            ; ===========================================================================
00015C42                            
00015C42                            loc_132C6:
00015C42 9041                       		sub.w	d1,d0
00015C44 6500                       		bcs.s	loc_132CE
00015C46 303C 0000                  		move.w	#0,d0
00015C4A                            
00015C4A                            loc_132CE:
00015C4A 3140 0010                  		move.w	d0,obVelX(a0)
00015C4E                            
00015C4E                            locret_132D2:
00015C4E 4E75                       		rts	
00015C50                            ; End of function Sonic_JumpDirection
00015C50                            ; End of function Sonic_JumpDirection
00015C50                            		include "_incObj\Sonic Peelout.asm"
00015C50                            ; ---------------------------------------------------------------------------
00015C50                            ; Subroutine to make Sonic perform a peelout
00015C50                            ; ---------------------------------------------------------------------------
00015C50                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015C50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C50                            
00015C50                            Sonic_Peelout:
00015C50 0828 0001 0039             		btst	#1,$39(a0)
00015C56 6600                       		bne.s	SCDPeelout_Launch
00015C58 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015C5E 6600                       		bne.s	@return
00015C60 1038 F603                  		move.b	($FFFFF603).w,d0
00015C64 0200 0070                  		andi.b	#%01110000,d0
00015C68 6700 0000                  		beq.w	@return
00015C6C 117C 0001 001C             		move.b	#1,$1C(a0)
00015C72 317C 0000 003A             		move.w	#0,$3A(a0)
00015C78 303C 00D2                  		move.w	#$D2,d0
00015C7C 4EB9 0000 1254             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015C82                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015C82 588F                       		addq.l	#4,sp
00015C84 08E8 0001 0039             		bset	#1,$39(a0)
00015C8A                            		
00015C8A 4268 0020                  		clr.w	obInertia(a0)
00015C8E                             
00015C8E 6100 0000                  		bsr.w	Sonic_LevelBound
00015C92 6100 0000                  		bsr.w	Sonic_AnglePos
00015C96                             
00015C96                            	@return:
00015C96 4E75                       		rts	
00015C98                            ; ---------------------------------------------------------------------------
00015C98                             
00015C98                            SCDPeelout_Launch:
00015C98 0828 0001 0039             		btst	#1,$39(a0)
00015C9E 1038 F602                  		move.b	($FFFFF602).w,d0
00015CA2 0800 0000                  		btst	#0,d0
00015CA6 6600 0000                  		bne.w	SCDPeelout_Charge
00015CAA 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015CB0 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015CB6 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015CBA 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015CC0 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015CC6 3028 0020                  		move.w	obInertia(a0),d0
00015CCA 0440 0800                  		subi.w	#$800,d0
00015CCE D040                       		add.w	d0,d0
00015CD0 0240 1F00                  		andi.w	#$1F00,d0
00015CD4 4440                       		neg.w	d0
00015CD6 0640 2000                  		addi.w	#$2000,d0
00015CDA 31C0 C904                  		move.w	d0,($FFFFC904).w
00015CDE 0828 0000 0022             		btst	#0,$22(a0)
00015CE4 6700                       		beq.s	@dontflip
00015CE6 4468 0020                  		neg.w	obInertia(a0)
00015CEA                             
00015CEA                            @dontflip:
00015CEA 08A8 0007 0022             		bclr	#7,$22(a0)
00015CF0 303C 00D3                  		move.w	#$D3,d0
00015CF4 4EB9 0000 1254             		jsr	(PlaySound_Special).l
00015CFA                            	;	sfx 	sfx_PeeloutRelease
00015CFA 1028 0026                  		move.b	obAngle(a0),d0
00015CFE 4EB9 0000 3A36             		jsr	(CalcSine).l
00015D04 C3E8 0020                  		muls.w	obInertia(a0),d1
00015D08 E081                       		asr.l	#8,d1
00015D0A 3141 0010                  		move.w	d1,obVelX(a0)
00015D0E C1E8 0020                  		muls.w	obInertia(a0),d0
00015D12 E080                       		asr.l	#8,d0
00015D14 3140 0012                  		move.w	d0,obVelY(a0)	
00015D18 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015D1C                            ; ---------------------------------------------------------------------------
00015D1C                             
00015D1C                            SCDPeelout_Charge:				; If still charging the dash...
00015D1C 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015D20 3401                       		move.w	d1,d2
00015D22 D241                       		add.w	d1,d1
00015D24 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015D28 6700                       		beq.s	@noshoes
00015D2A E242                       		asr.w	#1,d2
00015D2C 9242                       		sub.w	d2,d1
00015D2E                            
00015D2E                            @noshoes:
00015D2E 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015D34 B268 0020                  		cmp.w	obInertia(a0),d1
00015D38 6E00                       		bgt.s	@inctimer
00015D3A 3141 0020                  		move.w	d1,obInertia(a0)
00015D3E                            
00015D3E                            @inctimer:
00015D3E 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015D42 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015D48 6500                       		bcs.s	SCDPeelout_ResetScr
00015D4A 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015D50 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015D56                            		
00015D56                            SCDPeelout_Stop_Sound:
00015D56 303C 00D4                  		move.w	#$D4,d0
00015D5A 4EB9 0000 1254             		jsr		(PlaySound_Special).l
00015D60                            	;	sfx 	sfx_PeeloutStop
00015D60 4268 0020                  		clr.w	obInertia(a0)
00015D64                            
00015D64                            SCDPeelout_ResetScr:
00015D64 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015D66 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015D6C 6700                       		beq.s	@finish
00015D6E 6400                       		bcc.s	@skip
00015D70 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015D74                             
00015D74                            	@skip:
00015D74 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015D78                             
00015D78                            	@finish:
00015D78 6100 0000                  		bsr.w	Sonic_LevelBound
00015D7C 6100 0000                  		bsr.w	Sonic_AnglePos
00015D80 4E75                       		rts
00015D82                            		
00015D82                            		
00015D82                            		include "_incObj\Sonic Spindash.asm"
00015D82                            ; ---------------------------------------------------------------------------
00015D82                            ; Subroutine to make Sonic perform a spindash
00015D82                            ; ---------------------------------------------------------------------------
00015D82                             
00015D82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D82                             
00015D82                             
00015D82                            Sonic_SpinDash:
00015D82 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015D86 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015D88 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015D8E 6600                       		bne.s	locret2_1AC8C		; if not, return
00015D90 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015D94 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015D98 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015D9C 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015DA2 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015DA6 4EB9 0000 1254             		jsr	(PlaySound_Special).l	; play spin sound
00015DAC 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015DAE 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015DB4 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015DBA                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015DBA                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015DBA 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015DC0                            						; the smoke/dust object
00015DC0                            loc2_1AC84:
00015DC0 6100 0000                  		bsr.w	Sonic_LevelBound
00015DC4 6100 0000                  		bsr.w	Sonic_AnglePos
00015DC8                            
00015DC8                            locret2_1AC8C:
00015DC8 4E75                       		rts	
00015DCA                            ; ---------------------------------------------------------------------------
00015DCA                            
00015DCA                            loc2_1AC8E:	
00015DCA 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015DD0 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015DD4 0800 0001                  		btst	#1,d0			; check down button
00015DD8 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015DDC 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015DE2 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015DE8 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015DEE 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015DF2 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015DF8 7000                       		moveq	#0,d0
00015DFA 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015DFE D040                       		add.w	d0,d0			; double it
00015E00 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015E06 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015E0A 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015E0E D040                       		add.w	d0,d0			; double it
00015E10 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015E14 4440                       		neg.w	d0			; negate it
00015E16 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015E1A 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015E1E 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015E24 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015E26 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015E2A                            
00015E2A                            loc2_1ACF4:
00015E2A 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015E30 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015E36 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015E3A 4EB9 0000 1254             		jsr	(PlaySound_Special).l	; play it!
00015E40 1028 0026                  		move.b	obAngle(a0),d0
00015E44 4EB9 0000 3A36             		jsr	(CalcSine).l
00015E4A C3E8 0020                  		muls.w	obInertia(a0),d1
00015E4E E081                       		asr.l	#8,d1
00015E50 3141 0010                  		move.w	d1,obVelX(a0)
00015E54 C1E8 0020                  		muls.w	obInertia(a0),d0
00015E58 E080                       		asr.l	#8,d0
00015E5A 3140 0012                  		move.w	d0,obVelY(a0)
00015E5E                            	
00015E5E 6000                       		bra.s	loc2_1AD78
00015E60                            ; ===========================================================================
00015E60                            Dash_Speeds:
00015E60 0600                       		dc.w  $600		; 0
00015E62 0680                       		dc.w  $680		; 1
00015E64 0700                       		dc.w  $700		; 2
00015E66 0780                       		dc.w  $780		; 3
00015E68 0800                       		dc.w  $800		; 4
00015E6A 0880                       		dc.w  $880		; 5
00015E6C 0900                       		dc.w  $900		; 6
00015E6E 0980                       		dc.w  $980		; 7
00015E70 0A00                       		dc.w  $A00		; 8
00015E72                            ; ===========================================================================
00015E72                            
00015E72                            loc2_1AD30:				; If still charging the dash...
00015E72 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015E76 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015E78 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015E7C EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015E7E 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015E82 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015E84 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015E8A                            
00015E8A                            loc2_1AD48:
00015E8A 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015E8E 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015E92 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015E96 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015E9C 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015EA0 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015EA6 4EB9 0000 1254             		jsr	(PlaySound_Special).l	; play charge sound
00015EAC 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015EB2 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015EB8 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015EBA 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015EC0                            
00015EC0                            loc2_1AD78:
00015EC0 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015EC2 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015EC8 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015ECA 6400                       		bcc.s	loc2_1AD88
00015ECC 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015ED0                            
00015ED0                            loc2_1AD88:
00015ED0 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015ED4                            
00015ED4                            loc2_1AD8C:
00015ED4 6100 0000                  		bsr.w	Sonic_LevelBound
00015ED8 6100 0000                  		bsr.w	Sonic_AnglePos
00015EDC                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015EDC 4E75                       		rts
00015EDE                            ; End of subroutine Sonic_SpinDash
00015EDE                            ; End of subroutine Sonic_SpinDash
00015EDE                            
00015EDE                            Sonic_AirRoll:
00015EDE 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015EE4 6600                               bne.s   AirRoll_Return   ; if not, return
00015EE6                            
00015EE6                            AirRoll_CheckBtn:
00015EE6 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015EEA 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015EEE 6700                               beq.s	AirRoll_Return
00015EF0 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015EF6                                   ; move.w	#$BC,d0
00015EF6                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015EF6                            
00015EF6                            AirRoll_Return:
00015EF6 4E75                               rts
00015EF8                            ; ===========================================================================
00015EF8                            ; ---------------------------------------------------------------------------
00015EF8                            ; Unused subroutine to squash Sonic
00015EF8                            ; ---------------------------------------------------------------------------
00015EF8 1028 0026                  		move.b	obAngle(a0),d0
00015EFC 0600 0020                  		addi.b	#$20,d0
00015F00 0200 00C0                  		andi.b	#$C0,d0
00015F04 6600                       		bne.s	locret_13302
00015F06 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015F0A 4A41                       		tst.w	d1
00015F0C 6A00                       		bpl.s	locret_13302
00015F0E 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015F14 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F1A 317C 0000 0012             		move.w	#0,obVelY(a0)
00015F20 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015F26                            
00015F26                            locret_13302:
00015F26 4E75                       		rts		
00015F28                            		include	"_incObj\Sonic LevelBound.asm"
00015F28                            ; ---------------------------------------------------------------------------
00015F28                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015F28                            ; ---------------------------------------------------------------------------
00015F28                            
00015F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F28                            
00015F28                            
00015F28                            Sonic_LevelBound:
00015F28 2228 0008                  		move.l	obX(a0),d1
00015F2C 3028 0010                  		move.w	obVelX(a0),d0
00015F30 48C0                       		ext.l	d0
00015F32 E180                       		asl.l	#8,d0
00015F34 D280                       		add.l	d0,d1
00015F36 4841                       		swap	d1
00015F38 3038 F728                  		move.w	(v_limitleft2).w,d0
00015F3C 0640 0010                  		addi.w	#$10,d0
00015F40 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015F42 6200                       		bhi.s	@sides		; if yes, branch
00015F44 3038 F72A                  		move.w	(v_limitright2).w,d0
00015F48 0640 0128                  		addi.w	#$128,d0
00015F4C 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015F50 6600                       		bne.s	@screenlocked
00015F52 0640 0040                  		addi.w	#$40,d0
00015F56                            
00015F56                            	@screenlocked:
00015F56 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015F58 6300                       		bls.s	@sides		; if yes, branch
00015F5A                            
00015F5A                            	@chkbottom:
00015F5A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015F5E 0640 00E0                  		addi.w	#$E0,d0
00015F62 B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015F66 6D00                       		blt.s	@bottom		; if yes, branch
00015F68 4E75                       		rts	
00015F6A                            ; ===========================================================================
00015F6A                            
00015F6A                            @bottom:
00015F6A 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015F6E 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015F72 B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015F74 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015F76 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2 ?
00015F7C 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015F80 0C78 2000 D008             		cmpi.w	#$2000,(v_player+obX).w
00015F86 6500 0000                  		bcs.w	Kill_transport
00015F8A 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015F8E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015F94 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015F9A 4E75                       		rts	
00015F9C                            @dontkill: 
00015F9C 4E75                       		rts
00015F9E                            ; ===========================================================================
00015F9E                            
00015F9E                            @sides:
00015F9E 3140 0008                  		move.w	d0,obX(a0)
00015FA2 317C 0000 000A             		move.w	#0,obX+2(a0)
00015FA8 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015FAE 317C 0000 0020             		move.w	#0,obInertia(a0)
00015FB4 60A4                       		bra.s	@chkbottom
00015FB6                            
00015FB6                            Kill_transport: 
00015FB6 4EF9 0000 0000                     	jmp        (KillSonic).l
00015FBC                            
00015FBC                            ; End of function Sonic_LevelBound
00015FBC                            ; End of function Sonic_LevelBound
00015FBC                            		include	"_incObj\Sonic Roll.asm"
00015FBC                            ; ---------------------------------------------------------------------------
00015FBC                            ; Subroutine allowing Sonic to roll when he's moving
00015FBC                            ; ---------------------------------------------------------------------------
00015FBC                            
00015FBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FBC                            
00015FBC                            
00015FBC                            Sonic_Roll:
00015FBC 4A38 F7CA                  		tst.b	(f_jumponly).w
00015FC0 6600                       		bne.s	@noroll
00015FC2 3028 0020                  		move.w	obInertia(a0),d0
00015FC6 6A00                       		bpl.s	@ispositive
00015FC8 4440                       		neg.w	d0
00015FCA                            
00015FCA                            	@ispositive:
00015FCA 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015FCE 6500                       		bcs.s	@noroll		; if not, branch
00015FD0 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015FD4 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015FD8 6600                       		bne.s	@noroll		; if yes, branch
00015FDA 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015FE0 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015FE2                            
00015FE2                            	@noroll:
00015FE2 4E75                       		rts	
00015FE4                            ; ===========================================================================
00015FE4                            
00015FE4                            Sonic_ChkRoll:
00015FE4 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015FEA 6700                       		beq.s	@roll		; if not, branch
00015FEC 4E75                       		rts	
00015FEE                            ; ===========================================================================
00015FEE                            
00015FEE                            @roll:
00015FEE 08E8 0002 0022             		bset	#2,obStatus(a0)
00015FF4 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015FFA 117C 0007 0017             		move.b	#7,obWidth(a0)
00016000 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00016006 5A68 000C                  		addq.w	#5,obY(a0)
00016014 4A68 0020                  		tst.w	obInertia(a0)
00016018 6600                       		bne.s	@ismoving
0001601A 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00016020                            
00016020                            	@ismoving:
00016020 4E75                       		rts	
00016022                            ; End of function Sonic_Roll
00016022                            ; End of function Sonic_Roll
00016022                            		include	"_incObj\Sonic Jump.asm"
00016022                            ; ---------------------------------------------------------------------------
00016022                            ; Subroutine allowing Sonic to jump
00016022                            ; ---------------------------------------------------------------------------
00016022                            
00016022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016022                            
00016022                            
00016022                            Sonic_Jump:
00016022 1038 F603                  		move.b	(v_jpadpress2).w,d0
00016026 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
0001602A 6700 0000                  		beq.w	locret_1348E	; if not, branch
0001602E 7000                       		moveq	#0,d0
00016030 1028 0026                  		move.b	obAngle(a0),d0
00016034 0600 0080                  		addi.b	#$80,d0
00016038 6100 0000                  		bsr.w	sub_14D48
0001603C 0C41 0006                  		cmpi.w	#6,d1
00016040 6D00 0000                  		blt.w	locret_1348E
00016044 343C 0680                  		move.w	#$680,d2
00016048 0828 0006 0022             		btst	#6,obStatus(a0)
0001604E 6700                       		beq.s	loc_1341C
00016050 343C 0380                  		move.w	#$380,d2
00016054                            
00016054                            loc_1341C:
00016054 7000                       		moveq	#0,d0
00016056 1028 0026                  		move.b	obAngle(a0),d0
0001605A 0400 0040                  		subi.b	#$40,d0
0001605E 4EB9 0000 3A36             		jsr	(CalcSine).l
00016064 C3C2                       		muls.w	d2,d1
00016066 E081                       		asr.l	#8,d1
00016068 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
0001606C C1C2                       		muls.w	d2,d0
0001606E E080                       		asr.l	#8,d0
00016070 D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00016074 08E8 0001 0022             		bset	#1,obStatus(a0)
0001607A 08A8 0005 0022             		bclr	#5,obStatus(a0)
00016080 588F                       		addq.l	#4,sp
00016082 117C 0001 003C             		move.b	#1,$3C(a0)
00016088 4228 0038                  		clr.b	$38(a0)
00016096 117C 0013 0016             		move.b	#$13,obHeight(a0)
0001609C 117C 0009 0017             		move.b	#9,obWidth(a0)
000160A2 117C 000E 0016             		move.b	#$E,obHeight(a0)
000160A8 117C 0007 0017             		move.b	#7,obWidth(a0)
000160AE                            Result_Check:
000160AE 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
000160B2 6700                       		beq.s   NormalJump ; If not, branch
000160B4 117C 0013 001C             		move.b  #$13,$1C(a0) ; Play the victory animation
000160BA 6000                       		bra.s   cont ; Continue
000160BC                            NormalJump:
000160BC 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
000160C2                            cont:
000160C2 08E8 0002 0022             		bset	#2,obStatus(a0)
000160C8 5A68 000C                  		addq.w	#5,obY(a0)
000160CC                            
000160CC                            locret_1348E:
000160CC 4E75                       		rts	
000160CE                            ; ===========================================================================
000160CE                            
000160CE                            ; End of function Sonic_Jump
000160CE                            ; End of function Sonic_Jump
000160CE                            		include	"_incObj\Sonic JumpHeight.asm"
000160CE                            ; ---------------------------------------------------------------------------
000160CE                            ; Subroutine controlling Sonic's jump height/duration
000160CE                            ; ---------------------------------------------------------------------------
000160CE                            
000160CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160CE                            
000160CE                            
000160CE                            Sonic_JumpHeight:
000160CE 4A28 003C                  		tst.b	$3C(a0)
000160D2 6700                       		beq.s	loc_134C4
000160D4 323C FC00                  		move.w	#-$400,d1
000160D8 0828 0006 0022             		btst	#6,obStatus(a0)
000160DE 6700                       		beq.s	loc_134AE
000160E0 323C FE00                  		move.w	#-$200,d1
000160E4                            
000160E4                            loc_134AE:
000160E4 B268 0012                  		cmp.w	obVelY(a0),d1
000160E8 6F00                       		ble.s	locret_134C2
000160EA 1038 F602                  		move.b	(v_jpadhold2).w,d0
000160EE 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
000160F2 6600                       		bne.s	locret_134C2	; if yes, branch
000160F4 3141 0012                  		move.w	d1,obVelY(a0)
000160F8                            
000160F8                            locret_134C2:
000160F8 4E75                       		rts	
000160FA                            ; ===========================================================================
000160FA                            
000160FA                            loc_134C4:
000160FA 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00016100 6C00                       		bge.s	locret_134D2
00016102 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00016108                            
00016108                            locret_134D2:
00016108 4E75                       		rts	
0001610A                            ; End of function Sonic_JumpHeight
0001610A                            ; End of function Sonic_JumpHeight
0001610A                            		include	"_incObj\Sonic SlopeResist.asm"
0001610A                            ; ---------------------------------------------------------------------------
0001610A                            ; Subroutine to	slow Sonic walking up a	slope
0001610A                            ; ---------------------------------------------------------------------------
0001610A                            
0001610A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001610A                            
0001610A                            
0001610A                            Sonic_SlopeResist:
0001610A 1028 0026                  		move.b	obAngle(a0),d0
0001610E 0600 0060                  		addi.b	#$60,d0
00016112 0C00 00C0                  		cmpi.b	#$C0,d0
00016116 6400                       		bcc.s	locret_13508
00016118 1028 0026                  		move.b	obAngle(a0),d0
0001611C 4EB9 0000 3A36             		jsr	(CalcSine).l
00016122 C1FC 0020                  		muls.w	#$20,d0
00016126 E080                       		asr.l	#8,d0
00016128 4A68 0020                  		tst.w	obInertia(a0)
0001612C 6700                       		beq.s	locret_13508
0001612E 6B00                       		bmi.s	loc_13504
00016130 4A40                       		tst.w	d0
00016132 6700                       		beq.s	locret_13502
00016134 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00016138                            
00016138                            locret_13502:
00016138 4E75                       		rts	
0001613A                            ; ===========================================================================
0001613A                            
0001613A                            loc_13504:
0001613A D168 0020                  		add.w	d0,obInertia(a0)
0001613E                            
0001613E                            locret_13508:
0001613E 4E75                       		rts	
00016140                            ; End of function Sonic_SlopeResist
00016140                            ; End of function Sonic_SlopeResist
00016140                            		include	"_incObj\Sonic RollRepel.asm"
00016140                            ; ---------------------------------------------------------------------------
00016140                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00016140                            ; ---------------------------------------------------------------------------
00016140                            
00016140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016140                            
00016140                            
00016140                            Sonic_RollRepel:
00016140 1028 0026                  		move.b	obAngle(a0),d0
00016144 0600 0060                  		addi.b	#$60,d0
00016148 0C00 00C0                  		cmpi.b	#-$40,d0
0001614C 6400                       		bcc.s	locret_13544
0001614E 1028 0026                  		move.b	obAngle(a0),d0
00016152 4EB9 0000 3A36             		jsr	(CalcSine).l
00016158 C1FC 0050                  		muls.w	#$50,d0
0001615C E080                       		asr.l	#8,d0
0001615E 4A68 0020                  		tst.w	obInertia(a0)
00016162 6B00                       		bmi.s	loc_1353A
00016164 4A40                       		tst.w	d0
00016166 6A00                       		bpl.s	loc_13534
00016168 E480                       		asr.l	#2,d0
0001616A                            
0001616A                            loc_13534:
0001616A D168 0020                  		add.w	d0,obInertia(a0)
0001616E 4E75                       		rts	
00016170                            ; ===========================================================================
00016170                            
00016170                            loc_1353A:
00016170 4A40                       		tst.w	d0
00016172 6B00                       		bmi.s	loc_13540
00016174 E480                       		asr.l	#2,d0
00016176                            
00016176                            loc_13540:
00016176 D168 0020                  		add.w	d0,obInertia(a0)
0001617A                            
0001617A                            locret_13544:
0001617A 4E75                       		rts	
0001617C                            ; End of function Sonic_RollRepel
0001617C                            ; End of function Sonic_RollRepel
0001617C                            		include	"_incObj\Sonic SlopeRepel.asm"
0001617C                            ; ---------------------------------------------------------------------------
0001617C                            ; Subroutine to	push Sonic down	a slope
0001617C                            ; ---------------------------------------------------------------------------
0001617C                            
0001617C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001617C                            
0001617C                            
0001617C                            Sonic_SlopeRepel:
0001617C 4E71                       		nop	
0001617E 4A28 0038                  		tst.b	$38(a0)
00016182 6600                       		bne.s	locret_13580
00016184 4A68 003E                  		tst.w	$3E(a0)
00016188 6600                       		bne.s	loc_13582
0001618A 1028 0026                  		move.b	obAngle(a0),d0
0001618E 0600 0020                  		addi.b	#$20,d0
00016192 0200 00C0                  		andi.b	#$C0,d0
00016196 6700                       		beq.s	locret_13580
00016198 3028 0020                  		move.w	obInertia(a0),d0
0001619C 6A00                       		bpl.s	loc_1356A
0001619E 4440                       		neg.w	d0
000161A0                            
000161A0                            loc_1356A:
000161A0 0C40 0280                  		cmpi.w	#$280,d0
000161A4 6400                       		bcc.s	locret_13580
000161A6 4268 0020                  		clr.w	obInertia(a0)
000161AA 08E8 0001 0022             		bset	#1,obStatus(a0)
000161B0 317C 001E 003E             		move.w	#$1E,$3E(a0)
000161B6                            
000161B6                            locret_13580:
000161B6 4E75                       		rts	
000161B8                            ; ===========================================================================
000161B8                            
000161B8                            loc_13582:
000161B8 5368 003E                  		subq.w	#1,$3E(a0)
000161BC 4E75                       		rts	
000161BE                            ; End of function Sonic_SlopeRepel
000161BE                            ; End of function Sonic_SlopeRepel
000161BE                            		include	"_incObj\Sonic JumpAngle.asm"
000161BE                            ; ---------------------------------------------------------------------------
000161BE                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000161BE                            ; ---------------------------------------------------------------------------
000161BE                            
000161BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161BE                            
000161BE                            
000161BE                            Sonic_JumpAngle:
000161BE 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000161C2 6700                       		beq.s	locret_135A2	; if already 0,	branch
000161C4 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000161C6                            
000161C6 5400                       		addq.b	#2,d0		; increase angle
000161C8 6400                       		bcc.s	loc_13596
000161CA 7000                       		moveq	#0,d0
000161CC                            
000161CC                            loc_13596:
000161CC 6000                       		bra.s	loc_1359E
000161CE                            ; ===========================================================================
000161CE                            
000161CE                            loc_13598:
000161CE 5500                       		subq.b	#2,d0		; decrease angle
000161D0 6400                       		bcc.s	loc_1359E
000161D2 7000                       		moveq	#0,d0
000161D4                            
000161D4                            loc_1359E:
000161D4 1140 0026                  		move.b	d0,obAngle(a0)
000161D8                            
000161D8                            locret_135A2:
000161D8 4E75                       		rts	
000161DA                            ; End of function Sonic_JumpAngle
000161DA                            ; End of function Sonic_JumpAngle
000161DA                            		include	"_incObj\Sonic Floor.asm"
000161DA                            ; ---------------------------------------------------------------------------
000161DA                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000161DA                            ; ---------------------------------------------------------------------------
000161DA                            
000161DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161DA                            
000161DA                            
000161DA                            Sonic_Floor:
000161DA 3228 0010                  		move.w	obVelX(a0),d1
000161DE 3428 0012                  		move.w	obVelY(a0),d2
000161E2 4EB9 0000 3CC8             		jsr	(CalcAngle).l
000161E8 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000161EC 0400 0020                  		subi.b	#$20,d0
000161F0 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000161F4 0200 00C0                  		andi.b	#$C0,d0
000161F8 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000161FC 0C00 0040                  		cmpi.b	#$40,d0
00016200 6700 0000                  		beq.w	loc_13680
00016204 0C00 0080                  		cmpi.b	#$80,d0
00016208 6700 0000                  		beq.w	loc_136E2
0001620C 0C00 00C0                  		cmpi.b	#$C0,d0
00016210 6700 0000                  		beq.w	loc_1373E
00016214 6100 0000                  		bsr.w	Sonic_HitWall
00016218 4A41                       		tst.w	d1
0001621A 6A00                       		bpl.s	loc_135F0
0001621C 9368 0008                  		sub.w	d1,obX(a0)
00016220 317C 0000 0010             		move.w	#0,obVelX(a0)
00016226                            
00016226                            loc_135F0:
00016226 6100 0000                  		bsr.w	sub_14EB4
0001622A 4A41                       		tst.w	d1
0001622C 6A00                       		bpl.s	loc_13602
0001622E D368 0008                  		add.w	d1,obX(a0)
00016232 317C 0000 0010             		move.w	#0,obVelX(a0)
00016238                            
00016238                            loc_13602:
00016238 6100 0000                  		bsr.w	Sonic_HitFloor
0001623C 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00016240 4A41                       		tst.w	d1
00016242 6A00                       		bpl.s	locret_1367E
00016244 1428 0012                  		move.b	obVelY(a0),d2
00016248 5002                       		addq.b	#8,d2
0001624A 4402                       		neg.b	d2
0001624C B202                       		cmp.b	d2,d1
0001624E 6C00                       		bge.s	loc_1361E
00016250 B002                       		cmp.b	d2,d0
00016252 6D00                       		blt.s	locret_1367E
00016254                            
00016254                            loc_1361E:
00016254 D368 000C                  		add.w	d1,obY(a0)
00016258 1143 0026                  		move.b	d3,obAngle(a0)
0001625C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016260 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016266 1003                       		move.b	d3,d0
00016268 0600 0020                  		addi.b	#$20,d0
0001626C 0200 0040                  		andi.b	#$40,d0
00016270 6600                       		bne.s	loc_1365C
00016272 1003                       		move.b	d3,d0
00016274 0600 0010                  		addi.b	#$10,d0
00016278 0200 0020                  		andi.b	#$20,d0
0001627C 6700                       		beq.s	loc_1364E
0001627E E0E8 0012                  		asr	obVelY(a0)
00016282 6000                       		bra.s	loc_13670
00016284                            ; ===========================================================================
00016284                            
00016284                            loc_1364E:
00016284 317C 0000 0012             		move.w	#0,obVelY(a0)
0001628A 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016290 4E75                       		rts	
00016292                            ; ===========================================================================
00016292                            
00016292                            loc_1365C:
00016292 317C 0000 0010             		move.w	#0,obVelX(a0)
00016298 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
0001629E 6F00                       		ble.s	loc_13670
000162A0 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
000162A6                            
000162A6                            loc_13670:
000162A6 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000162AC 4A03                       		tst.b	d3
000162AE 6A00                       		bpl.s	locret_1367E
000162B0 4468 0020                  		neg.w	obInertia(a0)
000162B4                            
000162B4                            locret_1367E:
000162B4 4E75                       		rts	
000162B6                            ; ===========================================================================
000162B6                            
000162B6                            loc_13680:
000162B6 6100 0000                  		bsr.w	Sonic_HitWall
000162BA 4A41                       		tst.w	d1
000162BC 6A00                       		bpl.s	loc_1369A
000162BE 9368 0008                  		sub.w	d1,obX(a0)
000162C2 317C 0000 0010             		move.w	#0,obVelX(a0)
000162C8 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000162CE 4E75                       		rts	
000162D0                            ; ===========================================================================
000162D0                            
000162D0                            loc_1369A:
000162D0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000162D4 4A41                       		tst.w	d1
000162D6 6A00                       		bpl.s	loc_136B4
000162D8 9368 000C                  		sub.w	d1,obY(a0)
000162DC 4A68 0012                  		tst.w	obVelY(a0)
000162E0 6A00                       		bpl.s	locret_136B2
000162E2 317C 0000 0012             		move.w	#0,obVelY(a0)
000162E8                            
000162E8                            locret_136B2:
000162E8 4E75                       		rts	
000162EA                            ; ===========================================================================
000162EA                            
000162EA                            loc_136B4:
000162EA 4A68 0012                  		tst.w	obVelY(a0)
000162EE 6B00                       		bmi.s	locret_136E0
000162F0 6100 0000                  		bsr.w	Sonic_HitFloor
000162F4 4A41                       		tst.w	d1
000162F6 6A00                       		bpl.s	locret_136E0
000162F8 D368 000C                  		add.w	d1,obY(a0)
000162FC 1143 0026                  		move.b	d3,obAngle(a0)
00016300 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016304 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001630A 317C 0000 0012             		move.w	#0,obVelY(a0)
00016310 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016316                            
00016316                            locret_136E0:
00016316 4E75                       		rts	
00016318                            ; ===========================================================================
00016318                            
00016318                            loc_136E2:
00016318 6100 0000                  		bsr.w	Sonic_HitWall
0001631C 4A41                       		tst.w	d1
0001631E 6A00                       		bpl.s	loc_136F4
00016320 9368 0008                  		sub.w	d1,obX(a0)
00016324 317C 0000 0010             		move.w	#0,obVelX(a0)
0001632A                            
0001632A                            loc_136F4:
0001632A 6100 0000                  		bsr.w	sub_14EB4
0001632E 4A41                       		tst.w	d1
00016330 6A00                       		bpl.s	loc_13706
00016332 D368 0008                  		add.w	d1,obX(a0)
00016336 317C 0000 0010             		move.w	#0,obVelX(a0)
0001633C                            
0001633C                            loc_13706:
0001633C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016340 4A41                       		tst.w	d1
00016342 6A00                       		bpl.s	locret_1373C
00016344 9368 000C                  		sub.w	d1,obY(a0)
00016348 1003                       		move.b	d3,d0
0001634A 0600 0020                  		addi.b	#$20,d0
0001634E 0200 0040                  		andi.b	#$40,d0
00016352 6600                       		bne.s	loc_13726
00016354 317C 0000 0012             		move.w	#0,obVelY(a0)
0001635A 4E75                       		rts	
0001635C                            ; ===========================================================================
0001635C                            
0001635C                            loc_13726:
0001635C 1143 0026                  		move.b	d3,obAngle(a0)
00016360 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016364 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001636A 4A03                       		tst.b	d3
0001636C 6A00                       		bpl.s	locret_1373C
0001636E 4468 0020                  		neg.w	obInertia(a0)
00016372                            
00016372                            locret_1373C:
00016372 4E75                       		rts	
00016374                            ; ===========================================================================
00016374                            
00016374                            loc_1373E:
00016374 6100 0000                  		bsr.w	sub_14EB4
00016378 4A41                       		tst.w	d1
0001637A 6A00                       		bpl.s	loc_13758
0001637C D368 0008                  		add.w	d1,obX(a0)
00016380 317C 0000 0010             		move.w	#0,obVelX(a0)
00016386 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001638C 4E75                       		rts	
0001638E                            ; ===========================================================================
0001638E                            
0001638E                            loc_13758:
0001638E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016392 4A41                       		tst.w	d1
00016394 6A00                       		bpl.s	loc_13772
00016396 9368 000C                  		sub.w	d1,obY(a0)
0001639A 4A68 0012                  		tst.w	obVelY(a0)
0001639E 6A00                       		bpl.s	locret_13770
000163A0 317C 0000 0012             		move.w	#0,obVelY(a0)
000163A6                            
000163A6                            locret_13770:
000163A6 4E75                       		rts	
000163A8                            ; ===========================================================================
000163A8                            
000163A8                            loc_13772:
000163A8 4A68 0012                  		tst.w	obVelY(a0)
000163AC 6B00                       		bmi.s	locret_1379E
000163AE 6100 0000                  		bsr.w	Sonic_HitFloor
000163B2 4A41                       		tst.w	d1
000163B4 6A00                       		bpl.s	locret_1379E
000163B6 D368 000C                  		add.w	d1,obY(a0)
000163BA 1143 0026                  		move.b	d3,obAngle(a0)
000163BE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000163C2 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000163C8 317C 0000 0012             		move.w	#0,obVelY(a0)
000163CE 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000163D4                            
000163D4                            locret_1379E:
000163D4 4E75                       		rts	
000163D6                            ; End of function Sonic_Floor
000163D6                            ; End of function Sonic_Floor
000163D6                            		include	"_incObj\Sonic ResetOnFloor.asm"
000163D6                            ; ---------------------------------------------------------------------------
000163D6                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000163D6                            ; ---------------------------------------------------------------------------
000163D6                            
000163D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163D6                            
000163D6                            
000163D6                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
000163D6 08A8 0005 0022                     	bclr    #5,$22(a0)
000163DC 08A8 0001 0022                     	bclr    #1,$22(a0)
000163E2 0828 0002 0022                     	btst    #2,$22(a0)
000163E8 6700                               	beq.s    loc_137E4
000163EA 08A8 0002 0022             		bclr	#2,obStatus(a0)
000163F0 117C 0013 0016             		move.b	#$13,obHeight(a0)
000163F6 117C 0009 0017             		move.b	#9,obWidth(a0)
000163FC 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00016402 5B68 000C                  		subq.w	#5,obY(a0)
00016406                            
00016406                            loc_137E4:
00016406 117C 0000 003C             		move.b	#0,$3C(a0)
0001640C 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00016412 4E75                       		rts	
00016414                            ; End of function Sonic_ResetOnFloor
00016414                            ; End of function Sonic_ResetOnFloor
00016414                            		include	"_incObj\Sonic (part 2).asm"
00016414                            ; ---------------------------------------------------------------------------
00016414                            ; Sonic	when he	gets hurt
00016414                            ; ---------------------------------------------------------------------------
00016414                            
00016414                            Sonic_Hurt:	; Routine 4
00016414 4EB9 0000 F976             		jsr	(SpeedToPos).l
0001641A 0668 0030 0012             		addi.w	#$30,obVelY(a0)
00016420 0828 0006 0022             		btst	#6,obStatus(a0)
00016426 6700                       		beq.s	loc_1380C
00016428 0468 0020 0012             		subi.w	#$20,obVelY(a0)
0001642E                            
0001642E                            loc_1380C:
0001642E 6100 0000                  		bsr.w	Sonic_HurtStop
00016432 6100 FAF4                  		bsr.w	Sonic_LevelBound
00016436 6100 F124                  		bsr.w	Sonic_RecordPosition
0001643A 6100 0000                  		bsr.w	Sonic_Animate
0001643E 6100 0000                  		bsr.w	Sonic_LoadGfx
00016442 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00016448                            
00016448                            ; ---------------------------------------------------------------------------
00016448                            ; Subroutine to	stop Sonic falling after he's been hurt
00016448                            ; ---------------------------------------------------------------------------
00016448                            
00016448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016448                            
00016448                            
00016448                            Sonic_HurtStop:
00016448 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001644C 0640 00E0                  		addi.w	#$E0,d0
00016450                            		;cmp.w	obY(a0),d0
00016450                            		;bcs.w	KillSonic
00016450 6100 FD88                  		bsr.w	Sonic_Floor
00016454 0828 0001 0022             		btst	#1,obStatus(a0)
0001645A 6600                       		bne.s	locret_13860
0001645C 7000                       		moveq	#0,d0
0001645E 3140 0012                  		move.w	d0,obVelY(a0)
00016462 3140 0010                  		move.w	d0,obVelX(a0)
00016466 3140 0020                  		move.w	d0,obInertia(a0)
0001646A 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016470 5528 0024                  		subq.b	#2,obRoutine(a0)
00016474 317C 0078 0030             		move.w	#$78,$30(a0)
0001647A                            
0001647A                            locret_13860:
0001647A 4E75                       		rts	
0001647C                            ; End of function Sonic_HurtStop
0001647C                            
0001647C                            ; ---------------------------------------------------------------------------
0001647C                            ; Sonic	when he	dies
0001647C                            ; ---------------------------------------------------------------------------
0001647C                            
0001647C                            Sonic_Death:	; Routine 6
0001647C 6100 0000                  		bsr.w	GameOver
00016480 4EB9 0000 F93E             		jsr	(ObjectFall).l
00016486 6100 F0D4                  		bsr.w	Sonic_RecordPosition
0001648A 6100 0000                  		bsr.w	Sonic_Animate
0001648E 6100 0000                  		bsr.w	Sonic_LoadGfx
00016492 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00016498                            
00016498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016498                            
00016498                            GameOver:
00016498 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001649C 0640 0100                  		addi.w	#$100,d0
000164A0 B068 000C                  		cmp.w	obY(a0),d0
000164A4 6400 0000                  		bcc.w	locret_13900
000164A8 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
000164AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000164B2 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000164B6 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
000164BA 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
000164BE 6600                       		bne.s	loc_138D4
000164C0 317C 0000 003A             		move.w	#0,$3A(a0)
000164C6 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
000164CC 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000164D2 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
000164D8 4238 FE1A                  		clr.b	(f_timeover).w
000164DC                            
000164DC                            loc_138C2:
000164E6 7003                       		moveq	#3,d0
000164E8 4EF9 0000 16EE             		jmp	(AddPLC).l	; load game over patterns
000164EE                            		
000164EE                            loc_138C3:
000164F8 7003                       		moveq	#3,d0
000164FA 4EF9 0000 16EE             		jmp	(AddPLC).l	; load game over patterns
00016500                            ; ===========================================================================
00016500                            
00016500                            loc_138D4:
00016500 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00016506 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
0001650A 6700                       		beq.s	locret_13900	; if not, branch
0001650C 317C 0000 003A             		move.w	#0,$3A(a0)
00016512 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
00016518 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
0001651E 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016524 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0001652A 60B0                       		bra.s	loc_138C2
0001652C                            		
0001652C                            
0001652C                            ; ===========================================================================
0001652C                            
0001652C                            locret_13900:
0001652C 4E75                       		rts	
0001652E                            ; End of function GameOver
0001652E                            
0001652E                            ; ---------------------------------------------------------------------------
0001652E                            ; Sonic	when the level is restarted
0001652E                            ; ---------------------------------------------------------------------------
0001652E                            
0001652E                            Sonic_ResetLevel:; Routine 8
0001652E 4A68 003A                  		tst.w	$3A(a0)
00016532 6700                       		beq.s	locret_13914
00016534 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00016538 6600                       		bne.s	locret_13914
0001653A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00016540                            
00016540                            	locret_13914:
00016540 4E75                       		rts	
00016540 4E75                       		rts	
00016542                            		include	"_incObj\Sonic Loops.asm"
00016542                            ; ---------------------------------------------------------------------------
00016542                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00016542                            ; ---------------------------------------------------------------------------
00016542                            
00016542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016542                            
00016542                            
00016542                            Sonic_Loops:
00016542 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
00016548 6700                       		beq.s	@isstarlight	; if yes, branch
0001654A 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
0001654E 6600 0000                  		bne.w	@noloops	; if not, branch
00016552                            
00016552                            	@isstarlight:
00016552 3028 000C                  		move.w	obY(a0),d0
00016556 E248                       		lsr.w	#1,d0
00016558 0240 0380                  		andi.w	#$380,d0
0001655C 1228 0008                  		move.b	obX(a0),d1
00016560 0241 007F                  		andi.w	#$7F,d1
00016564 D041                       		add.w	d1,d0
00016566 43F8 A400                  		lea	(v_lvllayout).w,a1
0001656A 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001656E                            
0001656E B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
00016572 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016576 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
0001657A 6700 FA68                  		beq.w	Sonic_ChkRoll
0001657E                            
0001657E B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
00016582 6700                       		beq.s	@chkifleft	; if yes, branch
00016584 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
00016588 6700                       		beq.s	@chkifinair
0001658A 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
00016590 4E75                       		rts	
00016592                            ; ===========================================================================
00016592                            
00016592                            @chkifinair:
00016592 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016598 6700                       		beq.s	@chkifleft	; if not, branch
0001659A                            
0001659A 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000165A0 4E75                       		rts	
000165A2                            ; ===========================================================================
000165A2                            
000165A2                            @chkifleft:
000165A2 3428 0008                  		move.w	obX(a0),d2
000165A6 0C02 002C                  		cmpi.b	#$2C,d2
000165AA 6400                       		bcc.s	@chkifright
000165AC                            
000165AC 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000165B2 4E75                       		rts	
000165B4                            ; ===========================================================================
000165B4                            
000165B4                            @chkifright:
000165B4 0C02 00E0                  		cmpi.b	#$E0,d2
000165B8 6500                       		bcs.s	@chkangle1
000165BA                            
000165BA 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000165C0 4E75                       		rts	
000165C2                            ; ===========================================================================
000165C2                            
000165C2                            @chkangle1:
000165C2 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
000165C8 6600                       		bne.s	@chkangle2	; if yes, branch
000165CA                            
000165CA 1228 0026                  		move.b	obAngle(a0),d1
000165CE 6700                       		beq.s	@done
000165D0 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000165D4 6200                       		bhi.s	@done		; if yes, branch
000165D6 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000165DC 4E75                       		rts	
000165DE                            ; ===========================================================================
000165DE                            
000165DE                            @chkangle2:
000165DE 1228 0026                  		move.b	obAngle(a0),d1
000165E2 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000165E6 6300                       		bls.s	@done		; if yes, branch
000165E8 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000165EE                            
000165EE                            @noloops:
000165EE                            @done:
000165EE 4E75                       		rts	
000165F0                            ; End of function Sonic_Loops
000165F0                            ; End of function Sonic_Loops
000165F0                            		include	"_incObj\Sonic Animate.asm"
000165F0                            ; ---------------------------------------------------------------------------
000165F0                            ; Subroutine to	animate	Sonic's sprites
000165F0                            ; ---------------------------------------------------------------------------
000165F0                            
000165F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165F0                            
000165F0                            
000165F0                            Sonic_Animate:				; XREF: Obj01_Control; et al
000165F0 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000165F6 7000                       		moveq	#0,d0
000165F8 1028 001C                  		move.b	obAnim(a0),d0
000165FC B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
00016600 6700                       		beq.s	@do		; if not, branch
00016602 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
00016606 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
0001660A 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
0001660E                            		
0001660E 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016614                            
00016614                            	@do:
00016614 D040                       		add.w	d0,d0
00016616 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001661A 1011                       		move.b	(a1),d0
0001661C 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
0001661E 1228 0022                  		move.b	obStatus(a0),d1
00016622 0201 0001                  		andi.b	#1,d1
00016626 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001662C 8328 0001                  		or.b	d1,obRender(a0)
00016630 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016634 6A00                       		bpl.s	@delay		; if time remains, branch
00016636 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
0001663A                            
0001663A                            @loadframe:
0001663A 7200                       		moveq	#0,d1
0001663C 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
00016640 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016644 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016648 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
0001664C                            
0001664C                            	@next:
0001664C 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
00016650 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016654                            
00016654                            	@delay:
00016654 4E75                       		rts	
00016656                            ; ===========================================================================
00016656                            
00016656                            @end_FF:
00016656 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016658 6600                       		bne.s	@end_FE		; if not, branch
0001665A 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
0001665E 1029 0001                  		move.b	1(a1),d0	; read sprite number
00016662 60E8                       		bra.s	@next
00016664                            ; ===========================================================================
00016664                            
00016664                            @end_FE:
00016664 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016666 6600                       		bne.s	@end_FD		; if not, branch
00016668 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001666C 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
00016670 9200                       		sub.b	d0,d1
00016672 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016676 60D4                       		bra.s	@next
00016678                            ; ===========================================================================
00016678                            
00016678                            @end_FD:
00016678 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001667A 6600                       		bne.s	@end		; if not, branch
0001667C 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
00016682                            
00016682                            	@end:
00016682 4E75                       		rts	
00016684                            ; ===========================================================================
00016684                            
00016684                            @walkrunroll:
00016684 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016688 6ACA                       		bpl.s	@delay		; if time remains, branch
0001668A 5200                       		addq.b	#1,d0		; is animation walking/running?
0001668C 6600 0000                  		bne.w	@rolljump	; if not, branch
00016690 7200                       		moveq	#0,d1
00016692 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016696 6B00                       		bmi.s	@ble 			; better handling of angles
00016698 6700                       		beq.s	@ble
0001669A 5300                       		subq.b	#1,d0
0001669C                            
0001669C                            	@ble:																
0001669C 1428 0022                  		move.b	obStatus(a0),d2
000166A0 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000166A4 6600                       		bne.s	@flip		; if yes, branch
000166A6 4600                       		not.b	d0		; reverse angle
000166A8                            
000166A8                            	@flip:
000166A8 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000166AC 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
000166AE 7203                       		moveq	#3,d1
000166B0                            
000166B0                            	@noinvert:
000166B0 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000166B6 B302                       		eor.b	d1,d2
000166B8 8528 0001                  		or.b	d2,obRender(a0)
000166BC 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
000166C2 6600 0000                  		bne.w	@push		; if yes, branch
000166C6                            
000166C6 E808                       		lsr.b	#4,d0		; divide angle by $10
000166C8 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000166CC 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000166D0 6A00                       		bpl.s	@nomodspeed
000166D2 4442                       		neg.w	d2		; modulus speed
000166D4                            
000166D4                            	@nomodspeed:
000166D4 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
000166DA 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
000166DE 6400                       		bcc.s	@maxrunning	; if yes, branch
000166E0                            
000166E0 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000166E6 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000166EA 6400                       		bcc.s	@running	; if yes, branch
000166EC                            
000166EC 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000166F2                            
000166F2                            	@running:
000166F2 D000                       		add.b	d0,d0
000166F4 D000                       		add.b	d0,d0
000166F6 1600                       		move.b	d0,d3
000166F8 4442                       		neg.w	d2
000166FA 0642 0780                  		addi.w	#$780,d2
000166FE 6A00                       		bpl.s	@belowmax
00016700 7400                       		moveq	#0,d2		; max animation speed
00016702 6000                       		bra.s	@belowmax
00016704                            
00016704                            	@maxrunning:
00016704 D000                       		add.b d0,d0
00016706 1600                       		move.b d0,d3
00016708 4442                       		neg.w d2
0001670A 0642 0800                  		addi.w #$800, d2
0001670E 6A00                       		bpl.s @belowmax
00016710 7400                       		moveq #0, d2 
00016712                            
00016712                            	@belowmax:
00016712 E04A                       		lsr.w	#8,d2
00016714 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016718 6100 FF20                  		bsr.w	@loadframe
0001671C D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
00016720 4E75                       		rts	
00016722                            ; ===========================================================================
00016722                            
00016722                            @rolljump:
00016722 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016724 6600                       		bne.s	@push		; if not, branch
00016726 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001672A 6A00                       		bpl.s	@nomodspeed2
0001672C 4442                       		neg.w	d2
0001672E                            
0001672E                            	@nomodspeed2:
0001672E 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016734 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016738 6400                       		bcc.s	@rollfast	; if yes, branch
0001673A 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00016740                            
00016740                            	@rollfast:
00016740 4442                       		neg.w	d2
00016742 0642 0400                  		addi.w	#$400,d2
00016746 6A00                       		bpl.s	@belowmax2
00016748 7400                       		moveq	#0,d2
0001674A                            
0001674A                            	@belowmax2:
0001674A E04A                       		lsr.w	#8,d2
0001674C 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016750 1228 0022                  		move.b	obStatus(a0),d1
00016754 0201 0001                  		andi.b	#1,d1
00016758 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001675E 8328 0001                  		or.b	d1,obRender(a0)
00016762 6000 FED6                  		bra.w	@loadframe
00016766                            ; ===========================================================================
00016766                            
00016766                            @push:
00016766 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001676A 6B00                       		bmi.s	@negspeed
0001676C 4442                       		neg.w	d2
0001676E                            
0001676E                            	@negspeed:
0001676E 0642 0800                  		addi.w	#$800,d2
00016772 6A00                       		bpl.s	@belowmax3	
00016774 7400                       		moveq	#0,d2
00016776                            
00016776                            	@belowmax3:
00016776 EC4A                       		lsr.w	#6,d2
00016778 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001677C 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00016782 1228 0022                  		move.b	obStatus(a0),d1
00016786 0201 0001                  		andi.b	#1,d1
0001678A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016790 8328 0001                  		or.b	d1,obRender(a0)
00016794 6000 FEA4                  		bra.w	@loadframe
00016798                            
00016798                            ; End of function Sonic_Animate
00016798                            ; End of function Sonic_Animate
00016798                            		include	"_anim\Sonic.asm"
00016798                            ; ---------------------------------------------------------------------------
00016798                            ; Animation script - Sonic
00016798                            ; ---------------------------------------------------------------------------
00016798                            Ani_Sonic:
00016798                            
00016798 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
0001679A 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
0001679C 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
0001679E 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
000167A0 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
000167A2 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
000167A4 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
000167A6 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
000167A8 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
000167AA 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
000167AC 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
000167AE 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
000167B0 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
000167B2 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
000167B4 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
000167B6 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
000167B8 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
000167BA 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
000167BC 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
000167BE 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
000167C0 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
000167C2 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
000167C4 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
000167C6 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
000167C8 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
000167CA 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
000167CC 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
000167CE 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
000167D0 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
000167D2 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
000167D4 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
000167D6 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
000167D8 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
000167DA 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
000167DC 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
000167DE 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
000167E0 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
000167E2 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
000167E4                            
000167E4 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
000167F2 00                         		even
000167F2 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016800 00                         		even
00016800 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016807 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001680E 00                         		even
0001680E FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016815 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001681C 00                         		even
0001681C FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
0001682A 00                         		even
0001682A                            SonAni_Wait:	
0001682A 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016839 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016848 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016857 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016866 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016875 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016884 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016893 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000168A2 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
000168AA                            		even
000168AA 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
000168B0                            		even
000168B0 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
000168B6 00                         		even
000168B6 026F 7071 FE01             SonAni_Duck:	dc.b $2, fr_duck3, fr_duck2, fr_duck, afBack, 1
000168BC                            		even
000168BC 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
000168C0 00                         		even
000168C0 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
000168C4 00                         		even
000168C4 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
000168C8 00                         		even
000168C8 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
000168CC 00                         		even
000168CC 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
000168D6                            		even
000168D6 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
000168DC 00                         		even
000168DC 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
000168E6 00                         		even
000168E6 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
000168F0 00                         		even
000168F0 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
000168F4                            		even
000168F4 0F87 8787 FE01             SonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
000168FA                            		even
000168FA 0F87 88FE 01               SonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
00016900 00                         		even
00016900 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016904 00                         		even
00016904 0B95 9512 13FD 00          SonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
0001690C 00                         		even
0001690C 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016910 00                         		even
00016910 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016914 00                         		even
00016914 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016918 00                         		even
00016918 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
0001691C 00                         		even
0001691C                            SonAni_WaterSlide:
0001691C 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016920                            		even
00016920 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016924                            		even
00016924 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
0001692C 00                         		even
0001692C 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016930                            		even
00016930 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
0001693E 00                         		even
0001693E 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
0001694A                            		even
0001694A 0298 99FF                  SonAni_Hurt2:	dc.b 2, fr_skele1, fr_skele2, afEnd	
0001694E                            		even
0001694E 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016952                            		even
00016952 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016956                            		even
00016956 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016960 00                         		even
00016960 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016969 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016971 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016978 3334 35                    		dc.b	$33, $34, $35
0001697B 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016982                            		even
00016982 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
00016988                            		even
00016988                            
00016988                            
00016988 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016988 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016988 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016988 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016988 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016988 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016988 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016988 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016988 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016988 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016988 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016988 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016988 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016988 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016988 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016988 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016988 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016988 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016988 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016988 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016988 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016988 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016988 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016988 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016988 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016988 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016988 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016988 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016988 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016988 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016988 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016988 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016988 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016988 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016988 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016988 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016988 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016988 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016988 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016988                            		include	"_incObj\Sonic LoadGfx.asm"
00016988                            ; ---------------------------------------------------------------------------
00016988                            ; Sonic	graphics loading subroutine
00016988                            ; ---------------------------------------------------------------------------
00016988                            
00016988                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016988                            
00016988                            
00016988                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016988 7000                       		moveq	#0,d0
0001698A 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001698E B038 F766                  		cmp.b	($FFFFF766).w,d0
00016992 6700                       		beq.s	locret_13C96
00016994 11C0 F766                  		move.b	d0,($FFFFF766).w
00016998 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001699E D040                       		add.w	d0,d0
000169A0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000169A4 7A00                       		moveq	#0,d5
000169A6 1A1A                       		move.b	(a2)+,d5
000169A8 5345                       		subq.w	#1,d5
000169AA 6B00                       		bmi.s	locret_13C96
000169AC 383C F000                  		move.w	#$F000,d4
000169B0 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000169B6                            
000169B6                            SPLC_ReadEntry:
000169B6 7200                       		moveq	#0,d1
000169B8 121A                       		move.b	(a2)+,d1
000169BA E149                       		lsl.w	#8,d1
000169BC 121A                       		move.b	(a2)+,d1
000169BE 3601                       		move.w	d1,d3
000169C0 E04B                       		lsr.w	#8,d3
000169C2 0243 00F0                  		andi.w	#$F0,d3
000169C6 0643 0010                  		addi.w	#$10,d3
000169CA 0241 0FFF                  		andi.w	#$FFF,d1
000169CE EB89                       		lsl.l	#5,d1
000169D0 D286                       		add.l	d6,d1
000169D2 3404                       		move.w	d4,d2
000169D4 D843                       		add.w	d3,d4
000169D6 D843                       		add.w	d3,d4
000169D8 4EB9 0000 142A             		jsr	(QueueDMATransfer).l
000169DE 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000169E2                            
000169E2                            locret_13C96:
000169E2 4E75                       		rts	
000169E4                            ; End of function Sonic_LoadGfx
000169E4                            ; End of function Sonic_LoadGfx
000169E4                            
000169E4                            		include	"_incObj\0A Drowning Countdown.asm"
000169E4                            ; ---------------------------------------------------------------------------
000169E4                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
000169E4                            ; Sonic's mouth (LZ)
000169E4                            ; ---------------------------------------------------------------------------
000169E4                            
000169E4                            DrownCount:
000169E4 7000                       		moveq	#0,d0
000169E6 1028 0024                  		move.b	obRoutine(a0),d0
000169EA 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
000169EE 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
000169F2                            ; ===========================================================================
000169F2                            Drown_Index:
000169F2 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
000169F4 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
000169F6 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
000169F8 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
000169FA 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
000169FC 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
000169FE 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00016A00 0000                       			dc.w Drown_Display-Drown_Index
00016A02 0000                       			dc.w Drown_Delete-Drown_Index
00016A04                            
00016A04 =00000030                  drown_origX:		equ $30		; original x-axis position
00016A04 =00000038                  drown_time:		equ $38		; time between each number changes
00016A04                            
00016A04 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016A04 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016A04 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016A04 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016A04 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016A04 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016A04 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016A04                            ; ===========================================================================
00016A04                            
00016A04                            Drown_Main:	; Routine 0
00016A04 5428 0024                  		addq.b	#2,obRoutine(a0)
00016A08 217C 0001 4DD2 0004        		move.l	#Map_Bub,obMap(a0)
00016A10 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00016A16 117C 0084 0001             		move.b	#$84,obRender(a0)
00016A1C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016A22 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016A28 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016A2C 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016A2E                            
00016A2E 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00016A32 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016A3A 317C 0440 0002             		move.w	#$440,obGfx(a0)
00016A40 0240 007F                  		andi.w	#$7F,d0
00016A44 1140 0033                  		move.b	d0,$33(a0)
00016A48 6000 0000                  		bra.w	Drown_Countdown
00016A4C                            ; ===========================================================================
00016A4C                            
00016A4C                            @smallbubble:
00016A4C 1140 001C                  		move.b	d0,obAnim(a0)
00016A50 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016A56 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016A5C                            
00016A5C                            Drown_Animate:	; Routine 2
00016A5C 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016A62 4EB9 0000 CA36             		jsr	(AnimateSprite).l
00016A68                            
00016A68                            Drown_ChkWater:	; Routine 4
00016A68 3038 F646                  		move.w	(v_waterpos1).w,d0
00016A6C B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00016A70 6500                       		bcs.s	@wobble		; if not, branch
00016A72                            
00016A72 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
00016A78 5E28 001C                  		addq.b	#7,obAnim(a0)
00016A7C 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00016A82 6700                       		beq.s	Drown_Display
00016A84 6000                       		bra.s	Drown_Display
00016A86                            ; ===========================================================================
00016A86                            
00016A86                            @wobble:
00016A86 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
00016A8A 6700                       		beq.s	@notunnel	; if not, branch
00016A8C 5868 0030                  		addq.w	#4,drown_origX(a0)
00016A90                            
00016A90                            	@notunnel:
00016A90 1028 0026                  		move.b	obAngle(a0),d0
00016A94 5228 0026                  		addq.b	#1,obAngle(a0)
00016A98 0240 007F                  		andi.w	#$7F,d0
00016A9C 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00016AA2 1031 0000                  		move.b	(a1,d0.w),d0
00016AA6 4880                       		ext.w	d0
00016AA8 D068 0030                  		add.w	drown_origX(a0),d0
00016AAC 3140 0008                  		move.w	d0,obX(a0)
00016AB0 6100                       		bsr.s	Drown_ShowNumber
00016AB2 4EB9 0000 F976             		jsr	(SpeedToPos).l
00016AB8 4A28 0001                  		tst.b	obRender(a0)
00016ABC 6A00                       		bpl.s	@delete
00016ABE 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00016AC4                            
00016AC4                            	@delete:
00016AC4 4EF9 0000 F9CA             		jmp	(DeleteObject).l
00016ACA                            ; ===========================================================================
00016ACA                            
00016ACA                            Drown_Display:	; Routine 6, Routine $E
00016ACA 6100                       		bsr.s	Drown_ShowNumber
00016ACC 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016AD2 4EB9 0000 CA36             		jsr	(AnimateSprite).l
00016AD8 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00016ADE                            ; ===========================================================================
00016ADE                            
00016ADE                            Drown_Delete:	; Routine 8, Routine $10
00016ADE 4EF9 0000 F9CA             		jmp	(DeleteObject).l
00016AE4                            ; ===========================================================================
00016AE4                            
00016AE4                            Drown_AirLeft:	; Routine $C
00016AE4 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
00016AEA 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00016AEC 5368 0038                  		subq.w	#1,drown_time(a0)
00016AF0 6600                       		bne.s	@display
00016AF2 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00016AF8 5E28 001C                  		addq.b	#7,obAnim(a0)
00016AFC 60CC                       		bra.s	Drown_Display
00016AFE                            ; ===========================================================================
00016AFE                            
00016AFE                            	@display:
00016AFE 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016B04 4EB9 0000 CA36             		jsr	(AnimateSprite).l
00016B0A 4A28 0001                  		tst.b	obRender(a0)
00016B0E 6A00                       		bpl.s	Drown_AirLeft_Delete
00016B10 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00016B16                            
00016B16                            Drown_AirLeft_Delete:	
00016B16 4EF9 0000 F9CA             		jmp	(DeleteObject).l
00016B1C                            ; ===========================================================================
00016B1C                            
00016B1C                            Drown_ShowNumber:
00016B1C 4A68 0038                  		tst.w	drown_time(a0)
00016B20 6700                       		beq.s	@nonumber
00016B22 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016B26 6600                       		bne.s	@nonumber	; if time remains, branch
00016B28 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00016B2E 6400                       		bcc.s	@nonumber
00016B30                            
00016B30 317C 000F 0038             		move.w	#15,drown_time(a0)
00016B36 4268 0012                  		clr.w	obVelY(a0)
00016B3A 117C 0080 0001             		move.b	#$80,obRender(a0)
00016B40 3028 0008                  		move.w	obX(a0),d0
00016B44 9078 F700                  		sub.w	(v_screenposx).w,d0
00016B48 0640 0080                  		addi.w	#$80,d0
00016B4C 3140 0008                  		move.w	d0,obX(a0)
00016B50 3028 000C                  		move.w	obY(a0),d0
00016B54 9078 F704                  		sub.w	(v_screenposy).w,d0
00016B58 0640 0080                  		addi.w	#$80,d0
00016B5C 3140 000A                  		move.w	d0,obScreenY(a0)
00016B60 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
00016B66                            
00016B66                            	@nonumber:
00016B66 4E75                       		rts	
00016B68                            ; ===========================================================================
00016B68                            Drown_WobbleData:
00016B68 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016B78 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016B88 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016B98 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016BA8 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016BB8 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016BC8 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016BD8 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016BE8 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016BF8 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016C08 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016C18 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016C28 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016C38 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016C48 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016C58 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016C68                            ; ===========================================================================
00016C68                            
00016C68                            Drown_Countdown:; Routine $A
00016C68 4A68 002C                  		tst.w	$2C(a0)
00016C6C 6600 0000                  		bne.w	@loc_13F86
00016C70 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016C76 6400 0000                  		bcc.w	@nocountdown
00016C7A 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00016C80 6700 0000                  		beq.w	@nocountdown	; if not, branch
00016C84                            
00016C84 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016C88 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016C8C 317C 003B 0038             		move.w	#59,drown_time(a0)
00016C92 317C 0001 0036             		move.w	#1,$36(a0)
00016C98 4EB9 0000 3A10             		jsr	(RandomNumber).l
00016C9E 0240 0001                  		andi.w	#1,d0
00016CA2 1140 0034                  		move.b	d0,$34(a0)
00016CA6 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016CAA 0C40 0019                  		cmpi.w	#25,d0
00016CAE 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016CB0 0C40 0014                  		cmpi.w	#20,d0
00016CB4 6700                       		beq.s	@warnsound
00016CB6 0C40 000F                  		cmpi.w	#15,d0
00016CBA 6700                       		beq.s	@warnsound
00016CBC 0C40 000C                  		cmpi.w	#12,d0
00016CC0 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016CC2                            
00016CC2                            	@skipmusic:
00016CCC 5328 0032                  		subq.b	#1,$32(a0)
00016CD0 6A00                       		bpl.s	@reduceair
00016CD2 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016CD8 08E8 0007 0036             		bset	#7,$36(a0)
00016CDE 6000                       		bra.s	@reduceair
00016CE0                            ; ===========================================================================
00016CE0                            
00016CE0                            @warnsound:
00016CEA                            
00016CEA                            @reduceair:
00016CEA 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016CEE 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016CF2                            
00016CF2                            		; Sonic drowns here
00016CF2 6100 0000                  		bsr.w	ResumeMusic
00016CF6 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016D06 117C 000A 0034             		move.b	#$A,$34(a0)
00016D0C 317C 0001 0036             		move.w	#1,$36(a0)
00016D12 317C 0078 002C             		move.w	#$78,$2C(a0)
00016D18 2F08                       		move.l	a0,-(sp)
00016D1A 41F8 D000                  		lea	(v_player).w,a0
00016D1E 6100 F6B6                  		bsr.w	Sonic_ResetOnFloor
00016D22 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016D28 08E8 0001 0022             		bset	#1,obStatus(a0)
00016D2E 08E8 0007 0002             		bset	#7,obGfx(a0)
00016D34 317C 0000 0012             		move.w	#0,obVelY(a0)
00016D3A 317C 0000 0010             		move.w	#0,obVelX(a0)
00016D40 317C 0000 0020             		move.w	#0,obInertia(a0)
00016D46 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016D4C 205F                       		movea.l	(sp)+,a0
00016D4E 4E75                       		rts	
00016D50                            ; ===========================================================================
00016D50                            
00016D50                            @loc_13F86:
00016D50 5368 002C                  		subq.w	#1,$2C(a0)
00016D54 6600                       		bne.s	@loc_13F94
00016D56 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016D5C 4E75                       		rts	
00016D5E                            ; ===========================================================================
00016D5E                            
00016D5E                            	@loc_13F94:
00016D5E 2F08                       		move.l	a0,-(sp)
00016D60 41F8 D000                  		lea	(v_player).w,a0
00016D64 4EB9 0000 F976             		jsr	(SpeedToPos).l
00016D6A 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016D70 205F                       		movea.l	(sp)+,a0
00016D72 6000                       		bra.s	@nochange
00016D74                            ; ===========================================================================
00016D74                            
00016D74                            @gotomakenum:
00016D74 6000                       		bra.s	@makenum
00016D76                            ; ===========================================================================
00016D76                            
00016D76                            @nochange:
00016D76 4A68 0036                  		tst.w	$36(a0)
00016D7A 6700 0000                  		beq.w	@nocountdown
00016D7E 5368 003A                  		subq.w	#1,$3A(a0)
00016D82 6A00 0000                  		bpl.w	@nocountdown
00016D86                            
00016D86                            @makenum:
00016D86 4EB9 0000 3A10             		jsr	(RandomNumber).l
00016D8C 0240 000F                  		andi.w	#$F,d0
00016D90 3140 003A                  		move.w	d0,$3A(a0)
00016D94 4EB9 0000 FE16             		jsr	(FindFreeObj).l
00016D9A 6600 0000                  		bne.w	@nocountdown
00016D9E 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016DA2 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016DA8 7006                       		moveq	#6,d0
00016DAA 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016DB0 6700                       		beq.s	@noflip
00016DB2 4440                       		neg.w	d0
00016DB4 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016DBA                            
00016DBA                            	@noflip:
00016DBA D169 0008                  		add.w	d0,obX(a1)
00016DBE 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016DC4 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016DCA 4A68 002C                  		tst.w	$2C(a0)
00016DCE 6700 0000                  		beq.w	@loc_1403E
00016DD2 0268 0007 003A             		andi.w	#7,$3A(a0)
00016DD8 0668 0000 003A             		addi.w	#0,$3A(a0)
00016DDE 3038 D00C                  		move.w	(v_player+obY).w,d0
00016DE2 0440 000C                  		subi.w	#$C,d0
00016DE6 3340 000C                  		move.w	d0,obY(a1)
00016DEA 4EB9 0000 3A10             		jsr	(RandomNumber).l
00016DF0 1340 0026                  		move.b	d0,obAngle(a1)
00016DF4 3038 FE04                  		move.w	(v_framecount).w,d0
00016DF8 0200 0003                  		andi.b	#3,d0
00016DFC 6600                       		bne.s	@loc_14082
00016DFE 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016E04 6000                       		bra.s	@loc_14082
00016E06                            ; ===========================================================================
00016E06                            
00016E06                            @loc_1403E:
00016E06 0828 0007 0036             		btst	#7,$36(a0)
00016E0C 6700                       		beq.s	@loc_14082
00016E0E 3438 FE14                  		move.w	(v_air).w,d2
00016E12 E24A                       		lsr.w	#1,d2
00016E14 4EB9 0000 3A10             		jsr	(RandomNumber).l
00016E1A 0240 0003                  		andi.w	#3,d0
00016E1E 6600                       		bne.s	@loc_1406A
00016E20 08E8 0006 0036             		bset	#6,$36(a0)
00016E26 6600                       		bne.s	@loc_14082
00016E28 1342 0028                  		move.b	d2,obSubtype(a1)
00016E2C 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016E32                            
00016E32                            	@loc_1406A:
00016E32 4A28 0034                  		tst.b	$34(a0)
00016E36 6600                       		bne.s	@loc_14082
00016E38 08E8 0006 0036             		bset	#6,$36(a0)
00016E3E 6600                       		bne.s	@loc_14082
00016E40 1342 0028                  		move.b	d2,obSubtype(a1)
00016E44 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016E4A                            
00016E4A                            @loc_14082:
00016E4A 5328 0034                  		subq.b	#1,$34(a0)
00016E4E 6A00                       		bpl.s	@nocountdown
00016E50 4268 0036                  		clr.w	$36(a0)
00016E54                            
00016E54                            @nocountdown:
00016E54 4E75                       		rts	
00016E54 4E75                       		rts	
00016E56                            
00016E56                            
00016E56                            ; ---------------------------------------------------------------------------
00016E56                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016E56                            ; ---------------------------------------------------------------------------
00016E56                            
00016E56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E56                            
00016E56                            
00016E56                            ResumeMusic:
00016E56                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016E56                            		;bhi.s	@over12		; if yes, branch
00016E56                            		;move.b	(v_Saved_music),d0
00016E56                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016E56                            		;beq.s	@notinvinc ; if not, branch
00016E56                            		;move.w	#bgm_Invincible,d0
00016E56                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016E56                            		;beq.s	@notinvinc	; if not, branch
00016E56                            		;move.w	#bgm_Ending,d0
00016E56                            
00016E56                            	;@notinvinc:
00016E56                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016E56                            		;beq.s	@playselected ; if not, branch
00016E56                            		;move.w	#bgm_Boss,d0
00016E56                            
00016E56                            	;@playselected:
00016E56                            		;jsr	(PlaySound).l
00016E56                            
00016E56                            	;@over12:
00016E56 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016E5C 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016E60 4E75                       		rts	
00016E62                            
00016E62                            ;End of function ResumeMusic
00016E62                            
00016E62                            ; ===========================================================================
00016E62                            
00016E62                            		include	"_anim\Drowning Countdown.asm"
00016E62                            ; ---------------------------------------------------------------------------
00016E62                            ; Animation script - countdown numbers and bubbles (LZ)
00016E62                            ; ---------------------------------------------------------------------------
00016E62 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016E64 0000                       		dc.w @oneappear-Ani_Drown
00016E66 0000                       		dc.w @twoappear-Ani_Drown
00016E68 0000                       		dc.w @threeappear-Ani_Drown
00016E6A 0000                       		dc.w @fourappear-Ani_Drown
00016E6C 0000                       		dc.w @fiveappear-Ani_Drown
00016E6E 0000                       		dc.w @smallbubble-Ani_Drown
00016E70 0000                       		dc.w @zeroflash-Ani_Drown
00016E72 0000                       		dc.w @oneflash-Ani_Drown
00016E74 0000                       		dc.w @twoflash-Ani_Drown
00016E76 0000                       		dc.w @threeflash-Ani_Drown
00016E78 0000                       		dc.w @fourflash-Ani_Drown
00016E7A 0000                       		dc.w @fiveflash-Ani_Drown
00016E7C 0000                       		dc.w @blank-Ani_Drown
00016E7E 0000                       		dc.w @mediumbubble-Ani_Drown
00016E80 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016E8A 00                         		even
00016E8A 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016E94 00                         		even
00016E94 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016E9E 00                         		even
00016E9E 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016EA8 00                         		even
00016EA8 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016EB2 00                         		even
00016EB2 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016EBC 00                         		even
00016EBC 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016EC2 00                         		even
00016EC2 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016ECA 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016ED2 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016EDA 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016EE2 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016EEA 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016EF2 0EFC                       @blank:		dc.b $E, afRoutine
00016EF4 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016EFA                            		even
00016EFA                            		even
00016EFA                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016EFA                            ; ---------------------------------------------------------------------------
00016EFA                            ; Sprite mappings - drowning countdown numbers (LZ)
00016EFA                            ; ---------------------------------------------------------------------------
00016EFA                            Map_Drown_internal:
00016EFA 0000                       		dc.w @num-Map_Drown_internal
00016EFC 01                         @num:		dc.b 1
00016EFD E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016F02                            		even
00016F02                            		even
00016F02                            
00016F02                            		include	"_incObj\4E Silver Shield.asm"
00016F02                            ; ---------------------------------------------------------------------------
00016F02                            ; Object 4E - Silver Shield
00016F02                            ; ---------------------------------------------------------------------------
00016F02                            
00016F02                            SpShieldItem:
00016F02 223C 0000 0000             		move.l #Unc_SpShield,d1 ; Call for Silver Shield Art
00016F08 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016F0C                            		; In this case, VRAM = $541*20
00016F0C 363C 0200                  		move.w #$200,d3
00016F10 4EB9 0000 142A             		jsr (QueueDMATransfer).l
00016F16                            ; ---------------------------------------------------------------------------
00016F16                            SpShieldObj_Main:
00016F16 7000                       		moveq #0,d0
00016F18 1028 0024                  		move.b $24(a0),d0
00016F1C 323B 0000                  		move.w SpShield_Index(pc,d0.w),d1
00016F20 4EFB 1000                  		jmp SpShield_Index(pc,d1.w)
00016F24                            ; ===========================================================================
00016F24                            SpShield_Index:
00016F24 0000                       		dc.w SpShield_Init-SpShield_Index
00016F26 0000                       		dc.w SpShieldChecks-SpShield_Index
00016F28                            ; ===========================================================================
00016F28                            SpShield_Init:
00016F28 5428 0024                  		addq.b #2,$24(a0)
00016F2C 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016F34 117C 0004 0001             		move.b #4,1(a0)
00016F3A 317C 0080 0018             		move.w #$80,$18(a0)
00016F40 117C 0018 0014             		move.b #$18,obActWid(a0)
00016F46 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016F4C 0838 0007 D002             		btst #7,($FFFFD002).w
00016F52 6700                       		beq.s SpShieldChecks
00016F54 08E8 0007 0002             		bset #7,2(a0)
00016F5A                            ; ---------------------------------------------------------------------------
00016F5A                            SpShieldChecks:
00016F5A 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016F5E 6600                       		bne.s SpSonicHasShield ; If so, branch to do nothing
00016F60 4A38 F5CA                  		tst.b (v_SpShield).w ; Test if Sonic got invisibility
00016F64 6700                       		beq.s Spjmp_DeleteObj38 ; If so, delete object temporarily
00016F66                            SpShieldProperties:
00016F66 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016F6C 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016F72 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016F78 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016F7E 4EB9 0000 CA36             		jsr AnimateSprite
00016F84 4EFA 8A04                  		jmp DisplaySprite
00016F88                            SpSonicHasShield:
00016F88 4E75                       		rts
00016F8A                            Spjmp_DeleteObj38: ; loc_12648:
00016F8A 4EFA 8A3E                  		jmp DeleteObject
00016F8A 4EFA 8A3E                  		jmp DeleteObject
00016F8E                            		include	"_incObj\04 Gold Shield.asm"
00016F8E                            ; ---------------------------------------------------------------------------
00016F8E                            ; Object 04 - Gold shield
00016F8E                            ; ---------------------------------------------------------------------------
00016F8E                            
00016F8E                            GShieldItem:
00016F8E 223C 0000 0000             		move.l #Unc_GShield,d1 ; Call for Gold Shield Art
00016F94 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016F98                            		; In this case, VRAM = $541*20
00016F98 363C 0200                  		move.w #$200,d3
00016F9C 4EB9 0000 142A             		jsr (QueueDMATransfer).l
00016FA2                            ; ---------------------------------------------------------------------------
00016FA2                            GShieldObj_Main:
00016FA2 7000                       		moveq #0,d0
00016FA4 1028 0024                  		move.b $24(a0),d0
00016FA8 323B 0000                  		move.w GShield_Index(pc,d0.w),d1
00016FAC 4EFB 1000                  		jmp GShield_Index(pc,d1.w)
00016FB0                            ; ===========================================================================
00016FB0                            GShield_Index:
00016FB0 0000                       		dc.w GShield_Init-GShield_Index
00016FB2 0000                       		dc.w GShieldChecks-GShield_Index
00016FB4                            ; ===========================================================================
00016FB4                            GShield_Init:
00016FB4 5428 0024                  		addq.b #2,$24(a0)
00016FB8 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016FC0 117C 0004 0001             		move.b #4,1(a0)
00016FC6 317C 0080 0018             		move.w #$80,$18(a0)
00016FCC 117C 0018 0014             		move.b #$18,obActWid(a0)
00016FD2 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016FD8 0838 0007 D002             		btst #7,($FFFFD002).w
00016FDE 6700                       		beq.s GShieldChecks
00016FE0 08E8 0007 0002             		bset #7,2(a0)
00016FE6                            ; ---------------------------------------------------------------------------
00016FE6                            GShieldChecks:
00016FE6 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016FEA 6600                       		bne.s GSonicHasShield ; If so, branch to do nothing
00016FEC 4A38 F5C9                  		tst.b (v_GShield).w ; Test if Sonic got invisibility
00016FF0 6700                       		beq.s Gjmp_DeleteObj38 ; If so, delete object temporarily
00016FF2                            GShieldProperties:
00016FF2 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016FF8 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016FFE 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00017004 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
0001700A 4EB9 0000 CA36             		jsr AnimateSprite
00017010 4EFA 8978                  		jmp DisplaySprite
00017014                            GSonicHasShield:
00017014 4E75                       		rts
00017016                            Gjmp_DeleteObj38: ; loc_12648:
00017016 4EFA 89B2                  		jmp DeleteObject
00017016 4EFA 89B2                  		jmp DeleteObject
0001701A                            		include	"_incObj\07 Red Shield.asm"
0001701A                            ; ---------------------------------------------------------------------------
0001701A                            ; Object 07 - red shield
0001701A                            ; ---------------------------------------------------------------------------
0001701A                            
0001701A                            RShieldItem:
0001701A 223C 0000 0000             		move.l #Unc_RedShield,d1 ; Call for Red Shield Art
00017020 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00017024                            		; In this case, VRAM = $541*20
00017024 363C 0200                  		move.w #$200,d3
00017028 4EB9 0000 142A             		jsr (QueueDMATransfer).l
0001702E                            ; ---------------------------------------------------------------------------
0001702E                            RShieldObj_Main:
0001702E 7000                       		moveq #0,d0
00017030 1028 0024                  		move.b $24(a0),d0
00017034 323B 0000                  		move.w RShield_Index(pc,d0.w),d1
00017038 4EFB 1000                  		jmp RShield_Index(pc,d1.w)
0001703C                            ; ===========================================================================
0001703C                            RShield_Index:
0001703C 0000                       		dc.w RShield_Init-RShield_Index
0001703E 0000                       		dc.w RShieldChecks-RShield_Index
00017040                            ; ===========================================================================
00017040                            RShield_Init:
00017040 5428 0024                  		addq.b #2,$24(a0)
00017044 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
0001704C 117C 0004 0001             		move.b #4,1(a0)
00017052 317C 0080 0018             		move.w #$80,$18(a0)
00017058 117C 0018 0014             		move.b #$18,obActWid(a0)
0001705E 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00017064 0838 0007 D002             		btst #7,($FFFFD002).w
0001706A 6700                       		beq.s RShieldChecks
0001706C 08E8 0007 0002             		bset #7,2(a0)
00017072                            ; ---------------------------------------------------------------------------
00017072                            RShieldChecks:
00017072 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00017076 6600                       		bne.s RSonicHasShield ; If so, branch to do nothing
00017078 4A38 F5C8                  		tst.b (v_rshield).w ; Test if Sonic got invisibility
0001707C 6700                       		beq.s Rjmp_DeleteObj38 ; If so, delete object temporarily
0001707E                            RShieldProperties:
0001707E 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00017084 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
0001708A 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00017090 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00017096 4EB9 0000 CA36             		jsr AnimateSprite
0001709C 4EFA 88EC                  		jmp DisplaySprite
000170A0                            RSonicHasShield:
000170A0 4E75                       		rts
000170A2                            Rjmp_DeleteObj38: ; loc_12648:
000170A2 4EFA 8926                  		jmp DeleteObject
000170A2 4EFA 8926                  		jmp DeleteObject
000170A6                            		include	"_incObj\38 Shield.asm"
000170A6                            ; ---------------------------------------------------------------------------
000170A6                            ; Object 38 - shield
000170A6                            ; ---------------------------------------------------------------------------
000170A6                            
000170A6                            ShieldItem:
000170A6 223C 0000 0000             		move.l #Unc_Shield,d1 ; Call for Regular Shield Art
000170AC 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
000170B0                            		; In this case, VRAM = $541*20
000170B0 363C 0200                  		move.w #$200,d3
000170B4 4EB9 0000 142A             		jsr (QueueDMATransfer).l
000170BA                            ; ---------------------------------------------------------------------------
000170BA                            ShieldObj_Main:
000170BA 7000                       		moveq #0,d0
000170BC 1028 0024                  		move.b $24(a0),d0
000170C0 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
000170C4 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
000170C8                            ; ===========================================================================
000170C8                            Shield_Index:
000170C8 0000                       		dc.w Shield_Init-Shield_Index
000170CA 0000                       		dc.w ShieldChecks-Shield_Index
000170CC                            ; ===========================================================================
000170CC                            Shield_Init:
000170CC 5428 0024                  		addq.b #2,$24(a0)
000170D0 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
000170D8 117C 0004 0001             		move.b #4,1(a0)
000170DE 317C 0080 0018             		move.w #$80,$18(a0)
000170E4 117C 0018 0014             		move.b #$18,obActWid(a0)
000170EA 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
000170F0 0838 0007 D002             		btst #7,($FFFFD002).w
000170F6 6700                       		beq.s ShieldChecks
000170F8 08E8 0007 0002             		bset #7,2(a0)
000170FE                            ; ---------------------------------------------------------------------------
000170FE                            ShieldChecks:
000170FE 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00017102 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00017104 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
00017108 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
0001710A                            ShieldProperties:
0001710A 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00017110 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00017116 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
0001711C 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00017122 4EB9 0000 CA36             		jsr AnimateSprite
00017128 4EFA 8860                  		jmp DisplaySprite
0001712C                            SonicHasShield:
0001712C 4E75                       		rts
0001712E                            jmp_DeleteObj38: ; loc_12648:
0001712E 4EFA 889A                  		jmp DeleteObject
0001712E 4EFA 889A                  		jmp DeleteObject
00017132                            		include	"_incObj\19 Invincibility Stars.asm"		
00017132                            ; ---------------------------------------------------------------------------
00017132                            ; Object 19 - Invincibility Stars
00017132                            ; ---------------------------------------------------------------------------
00017132                            
00017132                            InvStarsObj:
00017132 223C 0000 0000             		move.l #Unc_Stars,d1
00017138 343C A820                  		move.w #$A820,d2
0001713C 363C 0200                  		move.w #$200,d3
00017140 4EB9 0000 142A             		jsr (QueueDMATransfer).l
00017146                            Invincibility_Main:
00017146 7000                       		moveq #0,d0
00017148 1028 0024                  		move.b $24(a0),d0
0001714C                            Invincibility_Init:
0001714C 5428 0024                  		addq.b #2,$24(a0)
00017150 217C 0000 0000 0004        		move.l #Map_Shield,4(a0) ; loads mapping
00017158 117C 0004 0001             		move.b #4,1(a0)
0001715E 317C 0080 0018             		move.w #$80,$18(a0)
00017164 117C 0010 0014             		move.b #$10,obActWid(a0)
0001716A 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
00017170                            ; ===========================================================================
00017170                            
00017170                            Obj19_Stars: ; XREF: Obj38_Index
00017170 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00017174 6700                       		beq.s Obj19_Delete2 ; if not, branch
00017176 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
0001717A 1228 001C                  		move.b $1C(a0),d1
0001717E 5301                       		subq.b #1,d1
00017180 6000                       		bra.s Obj19_StarTrail
00017182                            ; ===========================================================================
00017182 E909                       		lsl.b #4,d1
00017184 5801                       		addq.b #4,d1
00017186 9001                       		sub.b d1,d0
00017188 1228 0030                  		move.b $30(a0),d1
0001718C 9001                       		sub.b d1,d0
0001718E 5801                       		addq.b #4,d1
00017190 0201 000F                  		andi.b #$F,d1
00017194 1141 0030                  		move.b d1,$30(a0)
00017198 6000                       		bra.s Obj19_StarTrail2a
0001719A                            ; ===========================================================================
0001719A                            
0001719A                            Obj19_StarTrail: ; XREF: Obj19_Stars
0001719A E709                       		lsl.b #3,d1
0001719C 1401                       		move.b d1,d2
0001719E D201                       		add.b d1,d1
000171A0 D202                       		add.b d2,d1
000171A2 5801                       		addq.b #4,d1
000171A4 9001                       		sub.b d1,d0
000171A6 1228 0030                  		move.b $30(a0),d1
000171AA 9001                       		sub.b d1,d0
000171AC 5801                       		addq.b #4,d1
000171AE 0C01 0018                  		cmpi.b #$18,d1
000171B2 6500                       		bcs.s Obj19_StarTrail2
000171B4 7200                       		moveq #0,d1
000171B6                            
000171B6                            Obj19_StarTrail2:
000171B6 1141 0030                  		move.b d1,$30(a0)
000171BA                            
000171BA                            Obj19_StarTrail2a:
000171BA 43F8 CB00                  		lea ($FFFFCB00).w,a1
000171BE 43F1 0000                  		lea (a1,d0.w),a1
000171C2 3159 0008                  		move.w (a1)+,8(a0)
000171C6 3159 000C                  		move.w (a1)+,$C(a0)
000171CA 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
000171D0 43F9 0000 0000             		lea (Ani_Shield).l,a1
000171D6 4EB9 0000 CA36             		jsr (AnimateSprite).l
000171DC 4EF9 0000 F98A             		jmp (DisplaySprite).l
000171E2                            ; ===========================================================================
000171E2                            
000171E2                            Obj19_Delete2: ; XREF: Obj19_Stars
000171E2 4EF9 0000 F9CA             		jmp (DeleteObject).l
000171E2 4EF9 0000 F9CA             		jmp (DeleteObject).l
000171E8                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
000171E8                            ; ---------------------------------------------------------------------------
000171E8                            ; Object 4A - special stage entry from beta
000171E8                            ; ---------------------------------------------------------------------------
000171E8                            
000171E8                            VanishSonic:
000171E8 7000                       		moveq	#0,d0
000171EA 1028 0024                  		move.b	obRoutine(a0),d0
000171EE 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
000171F2 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
000171F6                            ; ===========================================================================
000171F6 0000                       Van_Index:	dc.w Van_Main-Van_Index
000171F8 0000                       		dc.w Van_RmvSonic-Van_Index
000171FA 0000                       		dc.w Van_LoadSonic-Van_Index
000171FC                            
000171FC =00000030                  van_time:	equ $30		; time for Sonic to disappear
000171FC                            ; ===========================================================================
000171FC                            
000171FC                            Van_Main:	; Routine 0
000171FC 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00017200 6700                       		beq.s	@isempty	; if yes, branch
00017202 4E75                       		rts	
00017204                            
00017204                            	@isempty:
00017204 5428 0024                  		addq.b	#2,obRoutine(a0)
00017208 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00017210 117C 0004 0001             		move.b	#4,obRender(a0)
00017216 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001721C 117C 0038 0014             		move.b	#$38,obActWid(a0)
00017222 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017228 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
0001722E                            
0001722E                            Van_RmvSonic:	; Routine 2
0001722E 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017234 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
0001723A 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00017240 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017246 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001724C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017252 6600                       		bne.s	@display
00017254 4A38 D000                  		tst.b	(v_player).w
00017258 6700                       		beq.s	@display
0001725A 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
0001726A                            
0001726A                            	@display:
0001726A 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00017270                            ; ===========================================================================
00017270                            
00017270                            Van_LoadSonic:	; Routine 4
00017270 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017274 6600                       		bne.s	@wait		; if time remains, branch
00017276 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0001727C 4EF9 0000 F9CA             		jmp	(DeleteObject).l
00017282                            
00017282                            	@wait:
00017282 4E75                       		rts	
00017282 4E75                       		rts	
00017284                            		include	"_incObj\08 Water Splash.asm"
00017284                            ; ---------------------------------------------------------------------------
00017284                            ; Object 08 - water splash (LZ)
00017284                            ; ---------------------------------------------------------------------------
00017284                            
00017284                            Splash:
00017284 7000                       		moveq	#0,d0
00017286 1028 0024                  		move.b	obRoutine(a0),d0
0001728A 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
0001728E 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017292                            ; ===========================================================================
00017292 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017294 0000                       		dc.w Spla_Display-Spla_Index
00017296 0000                       		dc.w Spla_Delete-Spla_Index
00017298                            ; ===========================================================================
00017298                            
00017298                            Spla_Main:    ; Routine 0
00017298 5428 0024                          addq.b    #2,obRoutine(a0)
0001729C 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
000172A4 0028 0004 0001                     ori.b    #4,obRender(a0)
000172AA 117C 0001 0018                     move.b    #1,obPriority(a0)
000172B0 117C 0010 0014                     move.b    #$10,obActWid(a0)
000172B6 317C 4259 0002                     move.w    #$4259,obGfx(a0)
000172BC 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
000172C2                            
000172C2                            Spla_Display:    ; Routine 2
000172C2                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
000172C2 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
000172C8 43F9 0000 0000                     lea    (Ani_Splash).l,a1
000172CE 4EB9 0000 CA36                     jsr    (AnimateSprite).l
000172D4 4EF9 0000 F98A                     jmp    (DisplaySprite).l
000172DA                            ; ===========================================================================
000172DA                            
000172DA                            Spla_Delete:	; Routine 4
000172DA 4EF9 0000 F9CA             		jmp	(DeleteObject).l	; delete when animation	is complete
000172DA 4EF9 0000 F9CA             		jmp	(DeleteObject).l	; delete when animation	is complete
000172E0                            		include	"_anim\Shield and Invincibility.asm"
000172E0                            ; ---------------------------------------------------------------------------
000172E0                            ; Animation script - shield and invincibility stars
000172E0                            ; ---------------------------------------------------------------------------
000172E0 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
000172E2 0000                       		dc.w @stars1-Ani_Shield
000172E4 0000                       		dc.w @stars2-Ani_Shield
000172E6 0000                       		dc.w @stars3-Ani_Shield
000172E8 0000                       		dc.w @stars4-Ani_Shield
000172EA 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
000172F2 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
000172F8 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00017309 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
00017312 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00017323 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
0001732C 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
0001733D 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
00017346                            		even
00017346                            		even
00017346                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
00017346                            ; --------------------------------------------------------------------------------
00017346                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017346                            ; --------------------------------------------------------------------------------
00017346                            
00017346                            SME_7M_8q:	
00017346 0000 0000                  		dc.w SME_7M_8q_10-SME_7M_8q, SME_7M_8q_11-SME_7M_8q	
0001734A 0000 0000                  		dc.w SME_7M_8q_26-SME_7M_8q, SME_7M_8q_3B-SME_7M_8q	
0001734E 0000 0000                  		dc.w SME_7M_8q_50-SME_7M_8q, SME_7M_8q_65-SME_7M_8q	
00017352 0000 0000                  		dc.w SME_7M_8q_7A-SME_7M_8q, SME_7M_8q_8F-SME_7M_8q	
00017356 00                         SME_7M_8q_10:	dc.b 0	
00017357 04                         SME_7M_8q_11:	dc.b 4	
00017358 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
0001735D E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00017362 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
00017367 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
0001736C 04                         SME_7M_8q_26:	dc.b 4	
0001736D E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9	
00017372 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0	
00017377 000A 1812 E9               		dc.b 0, $A, $18, $12, $E9	
0001737C 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
00017381 04                         SME_7M_8q_3B:	dc.b 4	
00017382 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017387 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
0001738C 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
00017391 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
00017396 04                         SME_7M_8q_50:	dc.b 4	
00017397 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
0001739C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000173A1 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
000173A6 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
000173AB 04                         SME_7M_8q_65:	dc.b 4	
000173AC E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000173B1 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000173B6 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
000173BB 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
000173C0 04                         SME_7M_8q_7A:	dc.b 4	
000173C1 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8	
000173C6 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0	
000173CB 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000173D0 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000173D5 04                         SME_7M_8q_8F:	dc.b 4	
000173D6 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8	
000173DB E80A 0812 00               		dc.b $E8, $A, 8, $12, 0	
000173E0 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
000173E5 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
000173EA                            		even
000173EA                            		even
000173EA                            Map_Shield2:	include	"_maps\Shield 2.asm"
000173EA                            ; --------------------------------------------------------------------------------
000173EA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000173EA                            ; --------------------------------------------------------------------------------
000173EA                            
000173EA                            SME_X5P7B:	
000173EA 0000 0000                  		dc.w SME_X5P7B_10-SME_X5P7B, SME_X5P7B_11-SME_X5P7B	
000173EE 0000 0000                  		dc.w SME_X5P7B_26-SME_X5P7B, SME_X5P7B_3B-SME_X5P7B	
000173F2 0000 0000                  		dc.w SME_X5P7B_50-SME_X5P7B, SME_X5P7B_65-SME_X5P7B	
000173F6 0000 0000                  		dc.w SME_X5P7B_7A-SME_X5P7B, SME_X5P7B_8F-SME_X5P7B	
000173FA 00                         SME_X5P7B_10:	dc.b 0	
000173FB 04                         SME_X5P7B_11:	dc.b 4	
000173FC E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017401 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017406 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001740B 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017410 04                         SME_X5P7B_26:	dc.b 4	
00017411 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
00017416 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
0001741B 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
00017420 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
00017425 04                         SME_X5P7B_3B:	dc.b 4	
00017426 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001742B E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017430 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017435 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
0001743A 04                         SME_X5P7B_50:	dc.b 4	
0001743B E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017440 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017445 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
0001744A 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
0001744F 04                         SME_X5P7B_65:	dc.b 4	
00017450 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017455 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
0001745A 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001745F 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017464 04                         SME_X5P7B_7A:	dc.b 4	
00017465 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
0001746A E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
0001746F 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
00017474 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
00017479 04                         SME_X5P7B_8F:	dc.b 4	
0001747A E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
0001747F E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
00017484 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
00017489 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
0001748E                            		even
0001748E                            		even
0001748E                            
0001748E                            Map_Shield3:	include	"_maps\Shield 3.asm"
0001748E                            ; --------------------------------------------------------------------------------
0001748E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001748E                            ; --------------------------------------------------------------------------------
0001748E                            
0001748E                            SME__wWzO:	
0001748E 0000 0000                  		dc.w SME__wWzO_10-SME__wWzO, SME__wWzO_11-SME__wWzO	
00017492 0000 0000                  		dc.w SME__wWzO_26-SME__wWzO, SME__wWzO_3B-SME__wWzO	
00017496 0000 0000                  		dc.w SME__wWzO_50-SME__wWzO, SME__wWzO_65-SME__wWzO	
0001749A 0000 0000                  		dc.w SME__wWzO_7A-SME__wWzO, SME__wWzO_8F-SME__wWzO	
0001749E 00                         SME__wWzO_10:	dc.b 0	
0001749F 04                         SME__wWzO_11:	dc.b 4	
000174A0 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000174A5 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000174AA 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000174AF 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000174B4 04                         SME__wWzO_26:	dc.b 4	
000174B5 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
000174BA E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
000174BF 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
000174C4 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
000174C9 04                         SME__wWzO_3B:	dc.b 4	
000174CA E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000174CF E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000174D4 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000174D9 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000174DE 04                         SME__wWzO_50:	dc.b 4	
000174DF E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000174E4 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000174E9 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000174EE 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000174F3 04                         SME__wWzO_65:	dc.b 4	
000174F4 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000174F9 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000174FE 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017503 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017508 04                         SME__wWzO_7A:	dc.b 4	
00017509 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
0001750E E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
00017513 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
00017518 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
0001751D 04                         SME__wWzO_8F:	dc.b 4	
0001751E E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
00017523 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
00017528 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
0001752D 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
00017532                            		even
00017532                            		even
00017532                            		include	"_anim\Special Stage Entry (Unused).asm"
00017532                            ; ---------------------------------------------------------------------------
00017532                            ; Animation script - special stage entry effect from beta
00017532                            ; ---------------------------------------------------------------------------
00017532 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017534 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00017548                            		even
00017548                            		even
00017548                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00017548                            ; ---------------------------------------------------------------------------
00017548                            ; Sprite mappings - special stage entry	from beta
00017548                            ; ---------------------------------------------------------------------------
00017548                            Map_Vanish_internal:
00017548 0000                       		dc.w @flash1-Map_Vanish_internal
0001754A 0000                       		dc.w @flash2-Map_Vanish_internal
0001754C 0000                       		dc.w @flash3-Map_Vanish_internal
0001754E 0000                       		dc.w @sparkle1-Map_Vanish_internal
00017550 0000                       		dc.w @sparkle2-Map_Vanish_internal
00017552 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017554 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017556 0000                       		dc.w @blank-Map_Vanish_internal
00017558 03                         @flash1:	dc.b 3
00017559 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001755E 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00017563 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017568 03                         @flash2:	dc.b 3
00017569 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001756E 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00017573 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00017578 05                         @flash3:	dc.b 5
00017579 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001757E EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00017583 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00017588 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001758D 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00017592 09                         @sparkle1:	dc.b 9
00017593 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00017598 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001759D 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000175A2 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000175A7 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000175AC F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000175B1 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000175B6 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000175BB F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000175C0 12                         @sparkle2:	dc.b $12
000175C1 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000175C6 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000175CB F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000175D0 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000175D5 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000175DA 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000175DF 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000175E4 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000175E9 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000175EE 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000175F3 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000175F8 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000175FD F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017602 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00017607 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001760C F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00017611 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00017616 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001761B 11                         @sparkle3:	dc.b $11
0001761C F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00017621 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00017626 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001762B 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00017630 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017635 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001763A 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001763F F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00017644 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00017649 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001764E 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00017653 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00017658 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001765D 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00017662 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017667 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001766C 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00017671 09                         @sparkle4:	dc.b 9
00017672 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00017677 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001767C 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00017681 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00017686 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001768B FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00017690 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00017695 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001769A 04                         		dc.b 4
0001769B 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
000176A0                            		even
000176A0                            		even
000176A0                            		include	"_anim\Water Splash.asm"
000176A0                            ; ---------------------------------------------------------------------------
000176A0                            ; Animation script - water splash (LZ)
000176A0                            ; ---------------------------------------------------------------------------
000176A0 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
000176A2 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
000176A8 00                         		even
000176A8 00                         		even
000176A8                            Map_Splash:	include	"_maps\Water Splash.asm"
000176A8                            ; ---------------------------------------------------------------------------
000176A8                            ; Sprite mappings - water splash (LZ)
000176A8                            ; ---------------------------------------------------------------------------
000176A8                            Map_Splash_internal:
000176A8 0000                       		dc.w @splash1-Map_Splash_internal
000176AA 0000                       		dc.w @splash2-Map_Splash_internal
000176AC 0000                       		dc.w @splash3-Map_Splash_internal
000176AE 02                         @splash1:	dc.b 2
000176AF F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000176B4 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000176B9 02                         @splash2:	dc.b 2
000176BA E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000176BF EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000176C4 01                         @splash3:	dc.b 1
000176C5 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000176CA                            		even
000176CA                            		even
000176CA                            
000176CA                            		include	"_incObj\Sonic AnglePos.asm"
000176CA                            ; ---------------------------------------------------------------------------
000176CA                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000176CA                            ; ---------------------------------------------------------------------------
000176CA                            
000176CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000176CA                            
000176CA                            
000176CA                            Sonic_AnglePos:
000176CA 0828 0003 0022             		btst	#3,obStatus(a0)
000176D0 6700                       		beq.s	loc_14602
000176D2 7000                       		moveq	#0,d0
000176D4 11C0 F768                  		move.b	d0,($FFFFF768).w
000176D8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000176DC 4E75                       		rts	
000176DE                            ; ===========================================================================
000176DE                            
000176DE                            loc_14602:
000176DE 7003                       		moveq	#3,d0
000176E0 11C0 F768                  		move.b	d0,($FFFFF768).w
000176E4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000176E8 1028 0026                  		move.b	obAngle(a0),d0
000176EC 0600 0020                  		addi.b	#$20,d0
000176F0 6A00                       		bpl.s	loc_14624
000176F2 1028 0026                  		move.b	obAngle(a0),d0
000176F6 6A00                       		bpl.s	loc_1461E
000176F8 5300                       		subq.b	#1,d0
000176FA                            
000176FA                            loc_1461E:
000176FA 0600 0020                  		addi.b	#$20,d0
000176FE 6000                       		bra.s	loc_14630
00017700                            ; ===========================================================================
00017700                            
00017700                            loc_14624:
00017700 1028 0026                  		move.b	obAngle(a0),d0
00017704 6A00                       		bpl.s	loc_1462C
00017706 5200                       		addq.b	#1,d0
00017708                            
00017708                            loc_1462C:
00017708 0600 001F                  		addi.b	#$1F,d0
0001770C                            
0001770C                            loc_14630:
0001770C 0200 00C0                  		andi.b	#$C0,d0
00017710 0C00 0040                  		cmpi.b	#$40,d0
00017714 6700 0000                  		beq.w	Sonic_WalkVertL
00017718 0C00 0080                  		cmpi.b	#$80,d0
0001771C 6700 0000                  		beq.w	Sonic_WalkCeiling
00017720 0C00 00C0                  		cmpi.b	#$C0,d0
00017724 6700 0000                  		beq.w	Sonic_WalkVertR
00017728 3428 000C                  		move.w	obY(a0),d2
0001772C 3628 0008                  		move.w	obX(a0),d3
00017730 7000                       		moveq	#0,d0
00017732 1028 0016                  		move.b	obHeight(a0),d0
00017736 4880                       		ext.w	d0
00017738 D440                       		add.w	d0,d2
0001773A 1028 0017                  		move.b	obWidth(a0),d0
0001773E 4880                       		ext.w	d0
00017740 D640                       		add.w	d0,d3
00017742 49F8 F768                  		lea	($FFFFF768).w,a4
00017746 367C 0010                  		movea.w	#$10,a3
0001774A 3C3C 0000                  		move.w	#0,d6
0001774E 7A0D                       		moveq	#$D,d5
00017750 6100 0000                  		bsr.w	FindFloor
00017754 3F01                       		move.w	d1,-(sp)
00017756 3428 000C                  		move.w	obY(a0),d2
0001775A 3628 0008                  		move.w	obX(a0),d3
0001775E 7000                       		moveq	#0,d0
00017760 1028 0016                  		move.b	obHeight(a0),d0
00017764 4880                       		ext.w	d0
00017766 D440                       		add.w	d0,d2
00017768 1028 0017                  		move.b	obWidth(a0),d0
0001776C 4880                       		ext.w	d0
0001776E 4440                       		neg.w	d0
00017770 D640                       		add.w	d0,d3
00017772 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017776 367C 0010                  		movea.w	#$10,a3
0001777A 3C3C 0000                  		move.w	#0,d6
0001777E 7A0D                       		moveq	#$D,d5
00017780 6100 0000                  		bsr.w	FindFloor
00017784 301F                       		move.w	(sp)+,d0
00017786 6100 0000                  		bsr.w	Sonic_Angle
0001778A 4A41                       		tst.w	d1
0001778C 6700                       		beq.s	locret_146BE
0001778E 6A00                       		bpl.s	loc_146C0
00017790 0C41 FFF2                  		cmpi.w	#-$E,d1
00017794 6D00                       		blt.s	locret_146E6
00017796 D368 000C                  		add.w	d1,obY(a0)
0001779A                            
0001779A                            locret_146BE:
0001779A 4E75                       		rts	
0001779C                            ; ===========================================================================
0001779C                            
0001779C                            loc_146C0:
0001779C 0C41 000E                  		cmpi.w	#$E,d1
000177A0 6E00                       		bgt.s	loc_146CC
000177A2                            
000177A2                            loc_146C6:
000177A2 D368 000C                  		add.w	d1,obY(a0)
000177A6 4E75                       		rts	
000177A8                            ; ===========================================================================
000177A8                            
000177A8                            loc_146CC:
000177A8 4A28 0038                  		tst.b	$38(a0)
000177AC 66F4                       		bne.s	loc_146C6
000177AE 08E8 0001 0022             		bset	#1,obStatus(a0)
000177B4 08A8 0005 0022             		bclr	#5,obStatus(a0)
000177BA 117C 0001 001D             		move.b	#1,obNextAni(a0)
000177C0 4E75                       		rts	
000177C2                            ; ===========================================================================
000177C2                            
000177C2                            locret_146E6:
000177C2 4E75                       		rts	
000177C4                            ; End of function Sonic_AnglePos
000177C4                            
000177C4                            ; ===========================================================================
000177C4 2428 0008                  		move.l	obX(a0),d2
000177C8 3028 0010                  		move.w	obVelX(a0),d0
000177CC 48C0                       		ext.l	d0
000177CE E180                       		asl.l	#8,d0
000177D0 9480                       		sub.l	d0,d2
000177D2 2142 0008                  		move.l	d2,obX(a0)
000177D6 303C 0038                  		move.w	#$38,d0
000177DA 48C0                       		ext.l	d0
000177DC E180                       		asl.l	#8,d0
000177DE 9680                       		sub.l	d0,d3
000177E0 2143 000C                  		move.l	d3,obY(a0)
000177E4 4E75                       		rts	
000177E6                            ; ===========================================================================
000177E6                            
000177E6                            locret_1470A:
000177E6 4E75                       		rts	
000177E8                            ; ===========================================================================
000177E8 2628 000C                  		move.l	obY(a0),d3
000177EC 3028 0012                  		move.w	obVelY(a0),d0
000177F0 0440 0038                  		subi.w	#$38,d0
000177F4 3140 0012                  		move.w	d0,obVelY(a0)
000177F8 48C0                       		ext.l	d0
000177FA E180                       		asl.l	#8,d0
000177FC 9680                       		sub.l	d0,d3
000177FE 2143 000C                  		move.l	d3,obY(a0)
00017802 4E75                       		rts	
00017804 4E75                       		rts	
00017806                            ; ===========================================================================
00017806 2428 0008                  		move.l	obX(a0),d2
0001780A 2628 000C                  		move.l	obY(a0),d3
0001780E 3028 0010                  		move.w	obVelX(a0),d0
00017812 48C0                       		ext.l	d0
00017814 E180                       		asl.l	#8,d0
00017816 9480                       		sub.l	d0,d2
00017818 3028 0012                  		move.w	obVelY(a0),d0
0001781C 48C0                       		ext.l	d0
0001781E E180                       		asl.l	#8,d0
00017820 9680                       		sub.l	d0,d3
00017822 2142 0008                  		move.l	d2,obX(a0)
00017826 2143 000C                  		move.l	d3,obY(a0)
0001782A 4E75                       		rts	
0001782C                            
0001782C                            ; ---------------------------------------------------------------------------
0001782C                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001782C                            ; ---------------------------------------------------------------------------
0001782C                            
0001782C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001782C                            
0001782C                            
0001782C                            Sonic_Angle:
0001782C 1438 F76A                  		move.b	($FFFFF76A).w,d2
00017830 B240                       		cmp.w	d0,d1
00017832 6F00                       		ble.s	loc_1475E
00017834 1438 F768                  		move.b	($FFFFF768).w,d2
00017838 3200                       		move.w	d0,d1
0001783A                            
0001783A                            loc_1475E:
0001783A 0802 0000                  		btst	#0,d2
0001783E 6600                       		bne.s	loc_1476A
00017840 1142 0026                  		move.b	d2,obAngle(a0)
00017844 4E75                       		rts	
00017846                            ; ===========================================================================
00017846                            
00017846                            loc_1476A:
00017846 1428 0026                  		move.b	obAngle(a0),d2
0001784A 0602 0020                  		addi.b	#$20,d2
0001784E 0202 00C0                  		andi.b	#$C0,d2
00017852 1142 0026                  		move.b	d2,obAngle(a0)
00017856 4E75                       		rts	
00017858                            ; End of function Sonic_Angle
00017858                            
00017858                            ; ---------------------------------------------------------------------------
00017858                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00017858                            ; ---------------------------------------------------------------------------
00017858                            
00017858                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017858                            
00017858                            
00017858                            Sonic_WalkVertR:
00017858 3428 000C                  		move.w	obY(a0),d2
0001785C 3628 0008                  		move.w	obX(a0),d3
00017860 7000                       		moveq	#0,d0
00017862 1028 0017                  		move.b	obWidth(a0),d0
00017866 4880                       		ext.w	d0
00017868 4440                       		neg.w	d0
0001786A D440                       		add.w	d0,d2
0001786C 1028 0016                  		move.b	obHeight(a0),d0
00017870 4880                       		ext.w	d0
00017872 D640                       		add.w	d0,d3
00017874 49F8 F768                  		lea	($FFFFF768).w,a4
00017878 367C 0010                  		movea.w	#$10,a3
0001787C 3C3C 0000                  		move.w	#0,d6
00017880 7A0D                       		moveq	#$D,d5
00017882 6100 0000                  		bsr.w	FindWall
00017886 3F01                       		move.w	d1,-(sp)
00017888 3428 000C                  		move.w	obY(a0),d2
0001788C 3628 0008                  		move.w	obX(a0),d3
00017890 7000                       		moveq	#0,d0
00017892 1028 0017                  		move.b	obWidth(a0),d0
00017896 4880                       		ext.w	d0
00017898 D440                       		add.w	d0,d2
0001789A 1028 0016                  		move.b	obHeight(a0),d0
0001789E 4880                       		ext.w	d0
000178A0 D640                       		add.w	d0,d3
000178A2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000178A6 367C 0010                  		movea.w	#$10,a3
000178AA 3C3C 0000                  		move.w	#0,d6
000178AE 7A0D                       		moveq	#$D,d5
000178B0 6100 0000                  		bsr.w	FindWall
000178B4 301F                       		move.w	(sp)+,d0
000178B6 6100 FF74                  		bsr.w	Sonic_Angle
000178BA 4A41                       		tst.w	d1
000178BC 6700                       		beq.s	locret_147F0
000178BE 6A00                       		bpl.s	loc_147F2
000178C0 0C41 FFF2                  		cmpi.w	#-$E,d1
000178C4 6D00 FF20                  		blt.w	locret_1470A
000178C8 D368 0008                  		add.w	d1,obX(a0)
000178CC                            
000178CC                            locret_147F0:
000178CC 4E75                       		rts	
000178CE                            ; ===========================================================================
000178CE                            
000178CE                            loc_147F2:
000178CE 0C41 000E                  		cmpi.w	#$E,d1
000178D2 6E00                       		bgt.s	loc_147FE
000178D4                            
000178D4                            loc_147F8:
000178D4 D368 0008                  		add.w	d1,obX(a0)
000178D8 4E75                       		rts	
000178DA                            ; ===========================================================================
000178DA                            
000178DA                            loc_147FE:
000178DA 4A28 0038                  		tst.b	$38(a0)
000178DE 66F4                       		bne.s	loc_147F8
000178E0 08E8 0001 0022             		bset	#1,obStatus(a0)
000178E6 08A8 0005 0022             		bclr	#5,obStatus(a0)
000178EC 117C 0001 001D             		move.b	#1,obNextAni(a0)
000178F2 4E75                       		rts	
000178F4                            ; End of function Sonic_WalkVertR
000178F4                            
000178F4                            ; ---------------------------------------------------------------------------
000178F4                            ; Subroutine allowing Sonic to walk upside-down
000178F4                            ; ---------------------------------------------------------------------------
000178F4                            
000178F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178F4                            
000178F4                            
000178F4                            Sonic_WalkCeiling:
000178F4 3428 000C                  		move.w	obY(a0),d2
000178F8 3628 0008                  		move.w	obX(a0),d3
000178FC 7000                       		moveq	#0,d0
000178FE 1028 0016                  		move.b	obHeight(a0),d0
00017902 4880                       		ext.w	d0
00017904 9440                       		sub.w	d0,d2
00017906 0A42 000F                  		eori.w	#$F,d2
0001790A 1028 0017                  		move.b	obWidth(a0),d0
0001790E 4880                       		ext.w	d0
00017910 D640                       		add.w	d0,d3
00017912 49F8 F768                  		lea	($FFFFF768).w,a4
00017916 367C FFF0                  		movea.w	#-$10,a3
0001791A 3C3C 1000                  		move.w	#$1000,d6
0001791E 7A0D                       		moveq	#$D,d5
00017920 6100 0000                  		bsr.w	FindFloor
00017924 3F01                       		move.w	d1,-(sp)
00017926 3428 000C                  		move.w	obY(a0),d2
0001792A 3628 0008                  		move.w	obX(a0),d3
0001792E 7000                       		moveq	#0,d0
00017930 1028 0016                  		move.b	obHeight(a0),d0
00017934 4880                       		ext.w	d0
00017936 9440                       		sub.w	d0,d2
00017938 0A42 000F                  		eori.w	#$F,d2
0001793C 1028 0017                  		move.b	obWidth(a0),d0
00017940 4880                       		ext.w	d0
00017942 9640                       		sub.w	d0,d3
00017944 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017948 367C FFF0                  		movea.w	#-$10,a3
0001794C 3C3C 1000                  		move.w	#$1000,d6
00017950 7A0D                       		moveq	#$D,d5
00017952 6100 0000                  		bsr.w	FindFloor
00017956 301F                       		move.w	(sp)+,d0
00017958 6100 FED2                  		bsr.w	Sonic_Angle
0001795C 4A41                       		tst.w	d1
0001795E 6700                       		beq.s	locret_14892
00017960 6A00                       		bpl.s	loc_14894
00017962 0C41 FFF2                  		cmpi.w	#-$E,d1
00017966 6D00 FE5A                  		blt.w	locret_146E6
0001796A 9368 000C                  		sub.w	d1,obY(a0)
0001796E                            
0001796E                            locret_14892:
0001796E 4E75                       		rts	
00017970                            ; ===========================================================================
00017970                            
00017970                            loc_14894:
00017970 0C41 000E                  		cmpi.w	#$E,d1
00017974 6E00                       		bgt.s	loc_148A0
00017976                            
00017976                            loc_1489A:
00017976 9368 000C                  		sub.w	d1,obY(a0)
0001797A 4E75                       		rts	
0001797C                            ; ===========================================================================
0001797C                            
0001797C                            loc_148A0:
0001797C 4A28 0038                  		tst.b	$38(a0)
00017980 66F4                       		bne.s	loc_1489A
00017982 08E8 0001 0022             		bset	#1,obStatus(a0)
00017988 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001798E 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017994 4E75                       		rts	
00017996                            ; End of function Sonic_WalkCeiling
00017996                            
00017996                            ; ---------------------------------------------------------------------------
00017996                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00017996                            ; ---------------------------------------------------------------------------
00017996                            
00017996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017996                            
00017996                            
00017996                            Sonic_WalkVertL:
00017996 3428 000C                  		move.w	obY(a0),d2
0001799A 3628 0008                  		move.w	obX(a0),d3
0001799E 7000                       		moveq	#0,d0
000179A0 1028 0017                  		move.b	obWidth(a0),d0
000179A4 4880                       		ext.w	d0
000179A6 9440                       		sub.w	d0,d2
000179A8 1028 0016                  		move.b	obHeight(a0),d0
000179AC 4880                       		ext.w	d0
000179AE 9640                       		sub.w	d0,d3
000179B0 0A43 000F                  		eori.w	#$F,d3
000179B4 49F8 F768                  		lea	($FFFFF768).w,a4
000179B8 367C FFF0                  		movea.w	#-$10,a3
000179BC 3C3C 0800                  		move.w	#$800,d6
000179C0 7A0D                       		moveq	#$D,d5
000179C2 6100 0000                  		bsr.w	FindWall
000179C6 3F01                       		move.w	d1,-(sp)
000179C8 3428 000C                  		move.w	obY(a0),d2
000179CC 3628 0008                  		move.w	obX(a0),d3
000179D0 7000                       		moveq	#0,d0
000179D2 1028 0017                  		move.b	obWidth(a0),d0
000179D6 4880                       		ext.w	d0
000179D8 D440                       		add.w	d0,d2
000179DA 1028 0016                  		move.b	obHeight(a0),d0
000179DE 4880                       		ext.w	d0
000179E0 9640                       		sub.w	d0,d3
000179E2 0A43 000F                  		eori.w	#$F,d3
000179E6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000179EA 367C FFF0                  		movea.w	#-$10,a3
000179EE 3C3C 0800                  		move.w	#$800,d6
000179F2 7A0D                       		moveq	#$D,d5
000179F4 6100 0000                  		bsr.w	FindWall
000179F8 301F                       		move.w	(sp)+,d0
000179FA 6100 FE30                  		bsr.w	Sonic_Angle
000179FE 4A41                       		tst.w	d1
00017A00 6700                       		beq.s	locret_14934
00017A02 6A00                       		bpl.s	loc_14936
00017A04 0C41 FFF2                  		cmpi.w	#-$E,d1
00017A08 6D00 FDDC                  		blt.w	locret_1470A
00017A0C 9368 0008                  		sub.w	d1,obX(a0)
00017A10                            
00017A10                            locret_14934:
00017A10 4E75                       		rts	
00017A12                            ; ===========================================================================
00017A12                            
00017A12                            loc_14936:
00017A12 0C41 000E                  		cmpi.w	#$E,d1
00017A16 6E00                       		bgt.s	loc_14942
00017A18                            
00017A18                            loc_1493C:
00017A18 9368 0008                  		sub.w	d1,obX(a0)
00017A1C 4E75                       		rts	
00017A1E                            ; ===========================================================================
00017A1E                            
00017A1E                            loc_14942:
00017A1E 4A28 0038                  		tst.b	$38(a0)
00017A22 66F4                       		bne.s	loc_1493C
00017A24 08E8 0001 0022             		bset	#1,obStatus(a0)
00017A2A 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017A30 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017A36 4E75                       		rts	
00017A38                            ; End of function Sonic_WalkVertL
00017A38                            ; End of function Sonic_WalkVertL
00017A38                            
00017A38                            		include	"_incObj\sub FindNearestTile.asm"
00017A38                            ; ---------------------------------------------------------------------------
00017A38                            ; Subroutine to	find which tile	the object is standing on
00017A38                            
00017A38                            ; input:
00017A38                            ;	d2 = y-position of object's bottom edge
00017A38                            ;	d3 = x-position of object
00017A38                            
00017A38                            ; output:
00017A38                            ;	a1 = address within 256x256 mappings where object is standing
00017A38                            ;	     (refers to a 16x16 tile number)
00017A38                            ; ---------------------------------------------------------------------------
00017A38                            
00017A38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A38                            
00017A38                            
00017A38                            FindNearestTile:
00017A38 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
00017A3A E248                       		lsr.w	#1,d0
00017A3C 0240 0380                  		andi.w	#$380,d0
00017A40 3203                       		move.w	d3,d1		; get x-pos. of object
00017A42 E049                       		lsr.w	#8,d1
00017A44 0241 007F                  		andi.w	#$7F,d1
00017A48 D041                       		add.w	d1,d0		; combine
00017A4A 72FF                       		moveq	#-1,d1
00017A4C 43F8 A400                  		lea	(v_lvllayout).w,a1
00017A50 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
00017A54 6700                       		beq.s	@blanktile	; branch if 0
00017A56 6B00                       		bmi.s	@specialtile	; branch if >$7F
00017A58 5301                       		subq.b	#1,d1
00017A5A 4881                       		ext.w	d1
00017A5C EE59                       		ror.w	#7,d1
00017A5E 3002                       		move.w	d2,d0
00017A60 D040                       		add.w	d0,d0
00017A62 0240 01E0                  		andi.w	#$1E0,d0
00017A66 D240                       		add.w	d0,d1
00017A68 3003                       		move.w	d3,d0
00017A6A E648                       		lsr.w	#3,d0
00017A6C 0240 001E                  		andi.w	#$1E,d0
00017A70 D240                       		add.w	d0,d1
00017A72                            
00017A72                            @blanktile:
00017A72 2241                       		movea.l	d1,a1
00017A74 4E75                       		rts	
00017A76                            ; ===========================================================================
00017A76                            
00017A76                            @specialtile:
00017A76 0241 007F                  		andi.w	#$7F,d1
00017A7A 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
00017A80 6700                       		beq.s	@treatasnormal	; if not, branch
00017A82 5241                       		addq.w	#1,d1
00017A84 0C41 0029                  		cmpi.w	#$29,d1
00017A88 6600                       		bne.s	@treatasnormal
00017A8A 323C 0051                  		move.w	#$51,d1
00017A8E                            
00017A8E                            	@treatasnormal:
00017A8E 5301                       		subq.b	#1,d1
00017A90 EE59                       		ror.w	#7,d1
00017A92 3002                       		move.w	d2,d0
00017A94 D040                       		add.w	d0,d0
00017A96 0240 01E0                  		andi.w	#$1E0,d0
00017A9A D240                       		add.w	d0,d1
00017A9C 3003                       		move.w	d3,d0
00017A9E E648                       		lsr.w	#3,d0
00017AA0 0240 001E                  		andi.w	#$1E,d0
00017AA4 D240                       		add.w	d0,d1
00017AA6 2241                       		movea.l	d1,a1
00017AA8 4E75                       		rts	
00017AAA                            ; End of function FindNearestTile
00017AAA                            ; End of function FindNearestTile
00017AAA                            		include	"_incObj\sub FindFloor.asm"
00017AAA                            ; ---------------------------------------------------------------------------
00017AAA                            ; Subroutine to	find the floor
00017AAA                            
00017AAA                            ; input:
00017AAA                            ;	d2 = y-position of object's bottom edge
00017AAA                            ;	d3 = x-position of object
00017AAA                            ;	d5 = bit to test for solidness
00017AAA                            
00017AAA                            ; output:
00017AAA                            ;	d1 = distance to the floor
00017AAA                            ;	a1 = address within 256x256 mappings where object is standing
00017AAA                            ;	     (refers to a 16x16 tile number)
00017AAA                            ;	(a4) = floor angle
00017AAA                            ; ---------------------------------------------------------------------------
00017AAA                            
00017AAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AAA                            
00017AAA                            
00017AAA                            FindFloor:
00017AAA 618C                       		bsr.s	FindNearestTile
00017AAC 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00017AAE 3800                       		move.w	d0,d4
00017AB0 0240 07FF                  		andi.w	#$7FF,d0
00017AB4 6700                       		beq.s	@isblank	; branch if tile is blank
00017AB6 0B04                       		btst	d5,d4		; is the tile solid?
00017AB8 6600                       		bne.s	@issolid	; if yes, branch
00017ABA                            
00017ABA                            @isblank:
00017ABA D44B                       		add.w	a3,d2
00017ABC 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00017AC0 944B                       		sub.w	a3,d2
00017AC2 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00017AC6 4E75                       		rts	
00017AC8                            ; ===========================================================================
00017AC8                            
00017AC8                            @issolid:
00017AC8 2478 F796                  		movea.l	(v_collindex).w,a2
00017ACC 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00017AD0 0240 00FF                  		andi.w	#$FF,d0
00017AD4 67E4                       		beq.s	@isblank	; branch if 0
00017AD6 45F9 0000 0000             		lea	(AngleMap).l,a2
00017ADC 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00017AE0 E948                       		lsl.w	#4,d0
00017AE2 3203                       		move.w	d3,d1		; get x-pos. of object
00017AE4 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00017AE8 6700                       		beq.s	@noflip		; if not, branch
00017AEA 4641                       		not.w	d1
00017AEC 4414                       		neg.b	(a4)
00017AEE                            
00017AEE                            	@noflip:
00017AEE 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017AF2 6700                       		beq.s	@noflip2	; if not, branch
00017AF4 0614 0040                  		addi.b	#$40,(a4)
00017AF8 4414                       		neg.b	(a4)
00017AFA 0414 0040                  		subi.b	#$40,(a4)
00017AFE                            
00017AFE                            	@noflip2:
00017AFE 0241 000F                  		andi.w	#$F,d1
00017B02 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017B04 45F9 0000 0000             		lea	(CollArray1).l,a2
00017B0A 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00017B0E 4880                       		ext.w	d0
00017B10 BD44                       		eor.w	d6,d4
00017B12 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017B16 6700                       		beq.s	@noflip3	; if not, branch
00017B18 4440                       		neg.w	d0
00017B1A                            
00017B1A                            	@noflip3:
00017B1A 4A40                       		tst.w	d0
00017B1C 679C                       		beq.s	@isblank	; branch if height is 0
00017B1E 6B00                       		bmi.s	@negfloor	; branch if height is negative
00017B20 0C00 0010                  		cmpi.b	#$10,d0
00017B24 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017B26 3202                       		move.w	d2,d1		; get y-pos. of object
00017B28 0241 000F                  		andi.w	#$F,d1
00017B2C D041                       		add.w	d1,d0
00017B2E 323C 000F                  		move.w	#$F,d1
00017B32 9240                       		sub.w	d0,d1		; return distance to floor
00017B34 4E75                       		rts	
00017B36                            ; ===========================================================================
00017B36                            
00017B36                            @negfloor:
00017B36 3202                       		move.w	d2,d1
00017B38 0241 000F                  		andi.w	#$F,d1
00017B3C D041                       		add.w	d1,d0
00017B3E 6A00 FF7A                  		bpl.w	@isblank
00017B42                            
00017B42                            @maxfloor:
00017B42 944B                       		sub.w	a3,d2
00017B44 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017B48 D44B                       		add.w	a3,d2
00017B4A 0441 0010                  		subi.w	#$10,d1		; return distance to floor
00017B4E 4E75                       		rts	
00017B50                            ; End of function FindFloor
00017B50                            
00017B50                            
00017B50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B50                            
00017B50                            
00017B50                            FindFloor2:
00017B50 6100 FEE6                  		bsr.w	FindNearestTile
00017B54 3011                       		move.w	(a1),d0
00017B56 3800                       		move.w	d0,d4
00017B58 0240 07FF                  		andi.w	#$7FF,d0
00017B5C 6700                       		beq.s	@isblank2
00017B5E 0B04                       		btst	d5,d4
00017B60 6600                       		bne.s	@issolid
00017B62                            
00017B62                            @isblank2:
00017B62 323C 000F                  		move.w	#$F,d1
00017B66 3002                       		move.w	d2,d0
00017B68 0240 000F                  		andi.w	#$F,d0
00017B6C 9240                       		sub.w	d0,d1
00017B6E 4E75                       		rts	
00017B70                            ; ===========================================================================
00017B70                            
00017B70                            @issolid:
00017B70 2478 F796                  		movea.l	(v_collindex).w,a2
00017B74 1032 0000                  		move.b	(a2,d0.w),d0
00017B78 0240 00FF                  		andi.w	#$FF,d0
00017B7C 67E4                       		beq.s	@isblank2
00017B7E 45F9 0000 0000             		lea	(AngleMap).l,a2
00017B84 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017B88 E948                       		lsl.w	#4,d0
00017B8A 3203                       		move.w	d3,d1
00017B8C 0804 000B                  		btst	#$B,d4
00017B90 6700                       		beq.s	@noflip
00017B92 4641                       		not.w	d1
00017B94 4414                       		neg.b	(a4)
00017B96                            
00017B96                            	@noflip:
00017B96 0804 000C                  		btst	#$C,d4
00017B9A 6700                       		beq.s	@noflip2
00017B9C 0614 0040                  		addi.b	#$40,(a4)
00017BA0 4414                       		neg.b	(a4)
00017BA2 0414 0040                  		subi.b	#$40,(a4)
00017BA6                            
00017BA6                            	@noflip2:
00017BA6 0241 000F                  		andi.w	#$F,d1
00017BAA D240                       		add.w	d0,d1
00017BAC 45F9 0000 0000             		lea	(CollArray1).l,a2
00017BB2 1032 1000                  		move.b	(a2,d1.w),d0
00017BB6 4880                       		ext.w	d0
00017BB8 BD44                       		eor.w	d6,d4
00017BBA 0804 000C                  		btst	#$C,d4
00017BBE 6700                       		beq.s	@noflip3
00017BC0 4440                       		neg.w	d0
00017BC2                            
00017BC2                            	@noflip3:
00017BC2 4A40                       		tst.w	d0
00017BC4 679C                       		beq.s	@isblank2
00017BC6 6B00                       		bmi.s	@negfloor
00017BC8 3202                       		move.w	d2,d1
00017BCA 0241 000F                  		andi.w	#$F,d1
00017BCE D041                       		add.w	d1,d0
00017BD0 323C 000F                  		move.w	#$F,d1
00017BD4 9240                       		sub.w	d0,d1
00017BD6 4E75                       		rts	
00017BD8                            ; ===========================================================================
00017BD8                            
00017BD8                            @negfloor:
00017BD8 3202                       		move.w	d2,d1
00017BDA 0241 000F                  		andi.w	#$F,d1
00017BDE D041                       		add.w	d1,d0
00017BE0 6A00 FF80                  		bpl.w	@isblank2
00017BE4 4641                       		not.w	d1
00017BE6 4E75                       		rts	
00017BE8                            ; End of function FindFloor2
00017BE8                            ; End of function FindFloor2
00017BE8                            		include	"_incObj\sub FindWall.asm"
00017BE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BE8                            
00017BE8                            
00017BE8                            FindWall:
00017BE8 6100 FE4E                  		bsr.w	FindNearestTile
00017BEC 3011                       		move.w	(a1),d0
00017BEE 3800                       		move.w	d0,d4
00017BF0 0240 07FF                  		andi.w	#$7FF,d0
00017BF4 6700                       		beq.s	loc_14B1E
00017BF6 0B04                       		btst	d5,d4
00017BF8 6600                       		bne.s	loc_14B2C
00017BFA                            
00017BFA                            loc_14B1E:
00017BFA D64B                       		add.w	a3,d3
00017BFC 6100 0000                  		bsr.w	FindWall2
00017C00 964B                       		sub.w	a3,d3
00017C02 0641 0010                  		addi.w	#$10,d1
00017C06 4E75                       		rts	
00017C08                            ; ===========================================================================
00017C08                            
00017C08                            loc_14B2C:
00017C08 2478 F796                  		movea.l	(v_collindex).w,a2
00017C0C 1032 0000                  		move.b	(a2,d0.w),d0
00017C10 0240 00FF                  		andi.w	#$FF,d0
00017C14 67E4                       		beq.s	loc_14B1E
00017C16 45F9 0000 0000             		lea	(AngleMap).l,a2
00017C1C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017C20 E948                       		lsl.w	#4,d0
00017C22 3202                       		move.w	d2,d1
00017C24 0804 000C                  		btst	#$C,d4
00017C28 6700                       		beq.s	loc_14B5A
00017C2A 4641                       		not.w	d1
00017C2C 0614 0040                  		addi.b	#$40,(a4)
00017C30 4414                       		neg.b	(a4)
00017C32 0414 0040                  		subi.b	#$40,(a4)
00017C36                            
00017C36                            loc_14B5A:
00017C36 0804 000B                  		btst	#$B,d4
00017C3A 6700                       		beq.s	loc_14B62
00017C3C 4414                       		neg.b	(a4)
00017C3E                            
00017C3E                            loc_14B62:
00017C3E 0241 000F                  		andi.w	#$F,d1
00017C42 D240                       		add.w	d0,d1
00017C44 45F9 0000 0000             		lea	(CollArray2).l,a2
00017C4A 1032 1000                  		move.b	(a2,d1.w),d0
00017C4E 4880                       		ext.w	d0
00017C50 BD44                       		eor.w	d6,d4
00017C52 0804 000B                  		btst	#$B,d4
00017C56 6700                       		beq.s	loc_14B7E
00017C58 4440                       		neg.w	d0
00017C5A                            
00017C5A                            loc_14B7E:
00017C5A 4A40                       		tst.w	d0
00017C5C 679C                       		beq.s	loc_14B1E
00017C5E 6B00                       		bmi.s	loc_14B9A
00017C60 0C00 0010                  		cmpi.b	#$10,d0
00017C64 6700                       		beq.s	loc_14BA6
00017C66 3203                       		move.w	d3,d1
00017C68 0241 000F                  		andi.w	#$F,d1
00017C6C D041                       		add.w	d1,d0
00017C6E 323C 000F                  		move.w	#$F,d1
00017C72 9240                       		sub.w	d0,d1
00017C74 4E75                       		rts	
00017C76                            ; ===========================================================================
00017C76                            
00017C76                            loc_14B9A:
00017C76 3203                       		move.w	d3,d1
00017C78 0241 000F                  		andi.w	#$F,d1
00017C7C D041                       		add.w	d1,d0
00017C7E 6A00 FF7A                  		bpl.w	loc_14B1E
00017C82                            
00017C82                            loc_14BA6:
00017C82 964B                       		sub.w	a3,d3
00017C84 6100 0000                  		bsr.w	FindWall2
00017C88 D64B                       		add.w	a3,d3
00017C8A 0441 0010                  		subi.w	#$10,d1
00017C8E 4E75                       		rts	
00017C90                            ; End of function FindWall
00017C90                            
00017C90                            
00017C90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C90                            
00017C90                            
00017C90                            FindWall2:
00017C90 6100 FDA6                  		bsr.w	FindNearestTile
00017C94 3011                       		move.w	(a1),d0
00017C96 3800                       		move.w	d0,d4
00017C98 0240 07FF                  		andi.w	#$7FF,d0
00017C9C 6700                       		beq.s	loc_14BC6
00017C9E 0B04                       		btst	d5,d4
00017CA0 6600                       		bne.s	loc_14BD4
00017CA2                            
00017CA2                            loc_14BC6:
00017CA2 323C 000F                  		move.w	#$F,d1
00017CA6 3003                       		move.w	d3,d0
00017CA8 0240 000F                  		andi.w	#$F,d0
00017CAC 9240                       		sub.w	d0,d1
00017CAE 4E75                       		rts	
00017CB0                            ; ===========================================================================
00017CB0                            
00017CB0                            loc_14BD4:
00017CB0 2478 F796                  		movea.l	(v_collindex).w,a2
00017CB4 1032 0000                  		move.b	(a2,d0.w),d0
00017CB8 0240 00FF                  		andi.w	#$FF,d0
00017CBC 67E4                       		beq.s	loc_14BC6
00017CBE 45F9 0000 0000             		lea	(AngleMap).l,a2
00017CC4 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017CC8 E948                       		lsl.w	#4,d0
00017CCA 3202                       		move.w	d2,d1
00017CCC 0804 000C                  		btst	#$C,d4
00017CD0 6700                       		beq.s	loc_14C02
00017CD2 4641                       		not.w	d1
00017CD4 0614 0040                  		addi.b	#$40,(a4)
00017CD8 4414                       		neg.b	(a4)
00017CDA 0414 0040                  		subi.b	#$40,(a4)
00017CDE                            
00017CDE                            loc_14C02:
00017CDE 0804 000B                  		btst	#$B,d4
00017CE2 6700                       		beq.s	loc_14C0A
00017CE4 4414                       		neg.b	(a4)
00017CE6                            
00017CE6                            loc_14C0A:
00017CE6 0241 000F                  		andi.w	#$F,d1
00017CEA D240                       		add.w	d0,d1
00017CEC 45F9 0000 0000             		lea	(CollArray2).l,a2
00017CF2 1032 1000                  		move.b	(a2,d1.w),d0
00017CF6 4880                       		ext.w	d0
00017CF8 BD44                       		eor.w	d6,d4
00017CFA 0804 000B                  		btst	#$B,d4
00017CFE 6700                       		beq.s	loc_14C26
00017D00 4440                       		neg.w	d0
00017D02                            
00017D02                            loc_14C26:
00017D02 4A40                       		tst.w	d0
00017D04 679C                       		beq.s	loc_14BC6
00017D06 6B00                       		bmi.s	loc_14C3C
00017D08 3203                       		move.w	d3,d1
00017D0A 0241 000F                  		andi.w	#$F,d1
00017D0E D041                       		add.w	d1,d0
00017D10 323C 000F                  		move.w	#$F,d1
00017D14 9240                       		sub.w	d0,d1
00017D16 4E75                       		rts	
00017D18                            ; ===========================================================================
00017D18                            
00017D18                            loc_14C3C:
00017D18 3203                       		move.w	d3,d1
00017D1A 0241 000F                  		andi.w	#$F,d1
00017D1E D041                       		add.w	d1,d0
00017D20 6A00 FF80                  		bpl.w	loc_14BC6
00017D24 4641                       		not.w	d1
00017D26 4E75                       		rts	
00017D28                            ; End of function FindWall2
00017D28                            ; End of function FindWall2
00017D28                            
00017D28                            ; ---------------------------------------------------------------------------
00017D28                            ; Unused floor/wall subroutine - logs something	to do with collision
00017D28                            ; ---------------------------------------------------------------------------
00017D28                            
00017D28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D28                            
00017D28                            
00017D28                            FloorLog_Unk:
00017D28 4E75                       		rts	
00017D2A                            
00017D2A 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D30 45F9 0000 0000             		lea	(CollArray1).l,a2
00017D36 363C 00FF                  		move.w	#$FF,d3
00017D3A                            
00017D3A                            loc_14C5E:
00017D3A 7A10                       		moveq	#$10,d5
00017D3C 343C 000F                  		move.w	#$F,d2
00017D40                            
00017D40                            loc_14C64:
00017D40 7800                       		moveq	#0,d4
00017D42 323C 000F                  		move.w	#$F,d1
00017D46                            
00017D46                            loc_14C6A:
00017D46 3019                       		move.w	(a1)+,d0
00017D48 EAA8                       		lsr.l	d5,d0
00017D4A D944                       		addx.w	d4,d4
00017D4C 51C9 FFF8                  		dbf	d1,loc_14C6A
00017D50                            
00017D50 34C4                       		move.w	d4,(a2)+
00017D52 92FC 0020                  		suba.w	#$20,a1
00017D56 5345                       		subq.w	#1,d5
00017D58 51CA FFE6                  		dbf	d2,loc_14C64
00017D5C                            
00017D5C D2FC 0020                  		adda.w	#$20,a1
00017D60 51CB FFD8                  		dbf	d3,loc_14C5E
00017D64                            
00017D64 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D6A 45F9 0000 0000             		lea	(CollArray2).l,a2
00017D70 6100                       		bsr.s	FloorLog_Unk2
00017D72 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D78 45F9 0000 0000             		lea	(CollArray1).l,a2
00017D7E                            
00017D7E                            ; End of function FloorLog_Unk
00017D7E                            
00017D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D7E                            
00017D7E                            
00017D7E                            FloorLog_Unk2:
00017D7E 363C 0FFF                  		move.w	#$FFF,d3
00017D82                            
00017D82                            loc_14CA6:
00017D82 7400                       		moveq	#0,d2
00017D84 323C 000F                  		move.w	#$F,d1
00017D88 3019                       		move.w	(a1)+,d0
00017D8A 6700                       		beq.s	loc_14CD4
00017D8C 6B00                       		bmi.s	loc_14CBE
00017D8E                            
00017D8E                            loc_14CB2:
00017D8E E248                       		lsr.w	#1,d0
00017D90 6400                       		bhs.s	loc_14CB8
00017D92 5202                       		addq.b	#1,d2
00017D94                            
00017D94                            loc_14CB8:
00017D94 51C9 FFF8                  		dbf	d1,loc_14CB2
00017D98                            
00017D98 6000                       		bra.s	loc_14CD6
00017D9A                            ; ===========================================================================
00017D9A                            
00017D9A                            loc_14CBE:
00017D9A 0C40 FFFF                  		cmpi.w	#-1,d0
00017D9E 6700                       		beq.s	loc_14CD0
00017DA0                            
00017DA0                            loc_14CC4:
00017DA0 E348                       		lsl.w	#1,d0
00017DA2 6400                       		bhs.s	loc_14CCA
00017DA4 5302                       		subq.b	#1,d2
00017DA6                            
00017DA6                            loc_14CCA:
00017DA6 51C9 FFF8                  		dbf	d1,loc_14CC4
00017DAA                            
00017DAA 6000                       		bra.s	loc_14CD6
00017DAC                            ; ===========================================================================
00017DAC                            
00017DAC                            loc_14CD0:
00017DAC 303C 0010                  		move.w	#$10,d0
00017DB0                            
00017DB0                            loc_14CD4:
00017DB0 3400                       		move.w	d0,d2
00017DB2                            
00017DB2                            loc_14CD6:
00017DB2 14C2                       		move.b	d2,(a2)+
00017DB4 51CB FFCC                  		dbf	d3,loc_14CA6
00017DB8                            
00017DB8 4E75                       		rts	
00017DBA                            
00017DBA                            ; End of function FloorLog_Unk2
00017DBA                            
00017DBA                            
00017DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DBA                            
00017DBA                            
00017DBA                            Sonic_WalkSpeed:
00017DBA 2628 0008                  		move.l	obX(a0),d3
00017DBE 2428 000C                  		move.l	obY(a0),d2
00017DC2 3228 0010                  		move.w	obVelX(a0),d1
00017DC6 48C1                       		ext.l	d1
00017DC8 E181                       		asl.l	#8,d1
00017DCA D681                       		add.l	d1,d3
00017DCC 3228 0012                  		move.w	obVelY(a0),d1
00017DD0 48C1                       		ext.l	d1
00017DD2 E181                       		asl.l	#8,d1
00017DD4 D481                       		add.l	d1,d2
00017DD6 4842                       		swap	d2
00017DD8 4843                       		swap	d3
00017DDA 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017DDE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017DE2 1200                       		move.b	d0,d1
00017DE4 0600 0020                  		addi.b	#$20,d0
00017DE8 6A00                       		bpl.s	loc_14D1A
00017DEA 1001                       		move.b	d1,d0
00017DEC 6A00                       		bpl.s	loc_14D14
00017DEE 5300                       		subq.b	#1,d0
00017DF0                            
00017DF0                            loc_14D14:
00017DF0 0600 0020                  		addi.b	#$20,d0
00017DF4 6000                       		bra.s	loc_14D24
00017DF6                            ; ===========================================================================
00017DF6                            
00017DF6                            loc_14D1A:
00017DF6 1001                       		move.b	d1,d0
00017DF8 6A00                       		bpl.s	loc_14D20
00017DFA 5200                       		addq.b	#1,d0
00017DFC                            
00017DFC                            loc_14D20:
00017DFC 0600 001F                  		addi.b	#$1F,d0
00017E00                            
00017E00                            loc_14D24:
00017E00 0200 00C0                  		andi.b	#$C0,d0
00017E04 6700 0000                  		beq.w	loc_14DF0
00017E08 0C00 0080                  		cmpi.b	#$80,d0
00017E0C 6700 0000                  		beq.w	loc_14F7C
00017E10 0201 0038                  		andi.b	#$38,d1
00017E14 6600                       		bne.s	loc_14D3C
00017E16 5042                       		addq.w	#8,d2
00017E18                            
00017E18                            loc_14D3C:
00017E18 0C00 0040                  		cmpi.b	#$40,d0
00017E1C 6700 0000                  		beq.w	loc_1504A
00017E20 6000 0000                  		bra.w	loc_14EBC
00017E24                            
00017E24                            ; End of function Sonic_WalkSpeed
00017E24                            
00017E24                            
00017E24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E24                            
00017E24                            
00017E24                            sub_14D48:
00017E24 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017E28 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017E2C 0600 0020                  		addi.b	#$20,d0
00017E30 0200 00C0                  		andi.b	#$C0,d0
00017E34 0C00 0040                  		cmpi.b	#$40,d0
00017E38 6700 0000                  		beq.w	loc_14FD6
00017E3C 0C00 0080                  		cmpi.b	#$80,d0
00017E40 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017E44 0C00 00C0                  		cmpi.b	#$C0,d0
00017E48 6700 0000                  		beq.w	sub_14E50
00017E4C                            
00017E4C                            ; End of function sub_14D48
00017E4C                            
00017E4C                            ; ---------------------------------------------------------------------------
00017E4C                            ; Subroutine to	make Sonic land	on the floor after jumping
00017E4C                            ; ---------------------------------------------------------------------------
00017E4C                            
00017E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E4C                            
00017E4C                            
00017E4C                            Sonic_HitFloor:
00017E4C 3428 000C                  		move.w	obY(a0),d2
00017E50 3628 0008                  		move.w	obX(a0),d3
00017E54 7000                       		moveq	#0,d0
00017E56 1028 0016                  		move.b	obHeight(a0),d0
00017E5A 4880                       		ext.w	d0
00017E5C D440                       		add.w	d0,d2
00017E5E 1028 0017                  		move.b	obWidth(a0),d0
00017E62 4880                       		ext.w	d0
00017E64 D640                       		add.w	d0,d3
00017E66 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E6A 367C 0010                  		movea.w	#$10,a3
00017E6E 3C3C 0000                  		move.w	#0,d6
00017E72 7A0D                       		moveq	#$D,d5
00017E74 6100 FC34                  		bsr.w	FindFloor
00017E78 3F01                       		move.w	d1,-(sp)
00017E7A 3428 000C                  		move.w	obY(a0),d2
00017E7E 3628 0008                  		move.w	obX(a0),d3
00017E82 7000                       		moveq	#0,d0
00017E84 1028 0016                  		move.b	obHeight(a0),d0
00017E88 4880                       		ext.w	d0
00017E8A D440                       		add.w	d0,d2
00017E8C 1028 0017                  		move.b	obWidth(a0),d0
00017E90 4880                       		ext.w	d0
00017E92 9640                       		sub.w	d0,d3
00017E94 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E98 367C 0010                  		movea.w	#$10,a3
00017E9C 3C3C 0000                  		move.w	#0,d6
00017EA0 7A0D                       		moveq	#$D,d5
00017EA2 6100 FC06                  		bsr.w	FindFloor
00017EA6 301F                       		move.w	(sp)+,d0
00017EA8 143C 0000                  		move.b	#0,d2
00017EAC                            
00017EAC                            loc_14DD0:
00017EAC 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017EB0 B240                       		cmp.w	d0,d1
00017EB2 6F00                       		ble.s	loc_14DDE
00017EB4 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EB8 C141                       		exg	d0,d1
00017EBA                            
00017EBA                            loc_14DDE:
00017EBA 0803 0000                  		btst	#0,d3
00017EBE 6700                       		beq.s	locret_14DE6
00017EC0 1602                       		move.b	d2,d3
00017EC2                            
00017EC2                            locret_14DE6:
00017EC2 4E75                       		rts	
00017EC4                            
00017EC4                            ; End of function Sonic_HitFloor
00017EC4                            
00017EC4                            ; ===========================================================================
00017EC4 3428 000C                  		move.w	obY(a0),d2
00017EC8 3628 0008                  		move.w	obX(a0),d3
00017ECC                            
00017ECC                            loc_14DF0:
00017ECC 0642 000A                  		addi.w	#$A,d2
00017ED0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017ED4 367C 0010                  		movea.w	#$10,a3
00017ED8 3C3C 0000                  		move.w	#0,d6
00017EDC 7A0E                       		moveq	#$E,d5
00017EDE 6100 FBCA                  		bsr.w	FindFloor
00017EE2 143C 0000                  		move.b	#0,d2
00017EE6                            
00017EE6                            loc_14E0A:
00017EE6 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EEA 0803 0000                  		btst	#0,d3
00017EEE 6700                       		beq.s	locret_14E16
00017EF0 1602                       		move.b	d2,d3
00017EF2                            
00017EF2                            locret_14E16:
00017EF2 4E75                       		rts	
00017EF4                            
00017EF4                            		include	"_incObj\sub ObjFloorDist.asm"
00017EF4                            ; ---------------------------------------------------------------------------
00017EF4                            ; Subroutine to find the distance of an object to the floor
00017EF4                            
00017EF4                            ; input:
00017EF4                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017EF4                            
00017EF4                            ; output:
00017EF4                            ;	d1 = distance to the floor
00017EF4                            ;	d3 = floor angle
00017EF4                            ;	a1 = address within 256x256 mappings where object is standing
00017EF4                            ;	     (refers to a 16x16 tile number)
00017EF4                            ;	(a4) = floor angle
00017EF4                            ; ---------------------------------------------------------------------------
00017EF4                            
00017EF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EF4                            
00017EF4                            
00017EF4                            ObjFloorDist:
00017EF4 3628 0008                  		move.w	obX(a0),d3
00017EF8                            
00017EF8                            
00017EF8                            ObjFloorDist2:
00017EF8 3428 000C                  		move.w	obY(a0),d2
00017EFC 7000                       		moveq	#0,d0
00017EFE 1028 0016                  		move.b	obHeight(a0),d0
00017F02 4880                       		ext.w	d0
00017F04 D440                       		add.w	d0,d2
00017F06 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F0A 18BC 0000                  		move.b	#0,(a4)
00017F0E 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017F12 3C3C 0000                  		move.w	#0,d6
00017F16 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017F18 6100 FB90                  		bsr.w	FindFloor
00017F1C 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017F20 0803 0000                  		btst	#0,d3
00017F24 6700                       		beq.s	locret_14E4E
00017F26 163C 0000                  		move.b	#0,d3
00017F2A                            
00017F2A                            	locret_14E4E:
00017F2A 4E75                       		rts	
00017F2C                            
00017F2C                            ; End of function ObjFloorDist2
00017F2C                            ; End of function ObjFloorDist2
00017F2C                            
00017F2C                            
00017F2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F2C                            
00017F2C                            
00017F2C                            sub_14E50:
00017F2C 3428 000C                  		move.w	obY(a0),d2
00017F30 3628 0008                  		move.w	obX(a0),d3
00017F34 7000                       		moveq	#0,d0
00017F36 1028 0017                  		move.b	obWidth(a0),d0
00017F3A 4880                       		ext.w	d0
00017F3C 9440                       		sub.w	d0,d2
00017F3E 1028 0016                  		move.b	obHeight(a0),d0
00017F42 4880                       		ext.w	d0
00017F44 D640                       		add.w	d0,d3
00017F46 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F4A 367C 0010                  		movea.w	#$10,a3
00017F4E 3C3C 0000                  		move.w	#0,d6
00017F52 7A0E                       		moveq	#$E,d5
00017F54 6100 FC92                  		bsr.w	FindWall
00017F58 3F01                       		move.w	d1,-(sp)
00017F5A 3428 000C                  		move.w	obY(a0),d2
00017F5E 3628 0008                  		move.w	obX(a0),d3
00017F62 7000                       		moveq	#0,d0
00017F64 1028 0017                  		move.b	obWidth(a0),d0
00017F68 4880                       		ext.w	d0
00017F6A D440                       		add.w	d0,d2
00017F6C 1028 0016                  		move.b	obHeight(a0),d0
00017F70 4880                       		ext.w	d0
00017F72 D640                       		add.w	d0,d3
00017F74 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017F78 367C 0010                  		movea.w	#$10,a3
00017F7C 3C3C 0000                  		move.w	#0,d6
00017F80 7A0E                       		moveq	#$E,d5
00017F82 6100 FC64                  		bsr.w	FindWall
00017F86 301F                       		move.w	(sp)+,d0
00017F88 143C 00C0                  		move.b	#-$40,d2
00017F8C 6000 FF1E                  		bra.w	loc_14DD0
00017F90                            
00017F90                            ; End of function sub_14E50
00017F90                            
00017F90                            
00017F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F90                            
00017F90                            
00017F90                            sub_14EB4:
00017F90 3428 000C                  		move.w	obY(a0),d2
00017F94 3628 0008                  		move.w	obX(a0),d3
00017F98                            
00017F98                            loc_14EBC:
00017F98 0643 000A                  		addi.w	#$A,d3
00017F9C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FA0 367C 0010                  		movea.w	#$10,a3
00017FA4 3C3C 0000                  		move.w	#0,d6
00017FA8 7A0E                       		moveq	#$E,d5
00017FAA 6100 FC3C                  		bsr.w	FindWall
00017FAE 143C 00C0                  		move.b	#-$40,d2
00017FB2 6000 FF32                  		bra.w	loc_14E0A
00017FB6                            
00017FB6                            ; End of function sub_14EB4
00017FB6                            
00017FB6                            ; ---------------------------------------------------------------------------
00017FB6                            ; Subroutine to	detect when an object hits a wall to its right
00017FB6                            ; ---------------------------------------------------------------------------
00017FB6                            
00017FB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FB6                            
00017FB6                            
00017FB6                            ObjHitWallRight:
00017FB6 D668 0008                  		add.w	obX(a0),d3
00017FBA 3428 000C                  		move.w	obY(a0),d2
00017FBE 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FC2 18BC 0000                  		move.b	#0,(a4)
00017FC6 367C 0010                  		movea.w	#$10,a3
00017FCA 3C3C 0000                  		move.w	#0,d6
00017FCE 7A0E                       		moveq	#$E,d5
00017FD0 6100 FC16                  		bsr.w	FindWall
00017FD4 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017FD8 0803 0000                  		btst	#0,d3
00017FDC 6700                       		beq.s	locret_14F06
00017FDE 163C 00C0                  		move.b	#-$40,d3
00017FE2                            
00017FE2                            locret_14F06:
00017FE2 4E75                       		rts	
00017FE4                            
00017FE4                            ; End of function ObjHitWallRight
00017FE4                            
00017FE4                            ; ---------------------------------------------------------------------------
00017FE4                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017FE4                            ; touches them
00017FE4                            ; ---------------------------------------------------------------------------
00017FE4                            
00017FE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FE4                            
00017FE4                            
00017FE4                            Sonic_DontRunOnWalls:
00017FE4 3428 000C                  		move.w	obY(a0),d2
00017FE8 3628 0008                  		move.w	obX(a0),d3
00017FEC 7000                       		moveq	#0,d0
00017FEE 1028 0016                  		move.b	obHeight(a0),d0
00017FF2 4880                       		ext.w	d0
00017FF4 9440                       		sub.w	d0,d2
00017FF6 0A42 000F                  		eori.w	#$F,d2
00017FFA 1028 0017                  		move.b	obWidth(a0),d0
00017FFE 4880                       		ext.w	d0
00018000 D640                       		add.w	d0,d3
00018002 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018006 367C FFF0                  		movea.w	#-$10,a3
0001800A 3C3C 1000                  		move.w	#$1000,d6
0001800E 7A0E                       		moveq	#$E,d5
00018010 6100 FA98                  		bsr.w	FindFloor
00018014 3F01                       		move.w	d1,-(sp)
00018016 3428 000C                  		move.w	obY(a0),d2
0001801A 3628 0008                  		move.w	obX(a0),d3
0001801E 7000                       		moveq	#0,d0
00018020 1028 0016                  		move.b	obHeight(a0),d0
00018024 4880                       		ext.w	d0
00018026 9440                       		sub.w	d0,d2
00018028 0A42 000F                  		eori.w	#$F,d2
0001802C 1028 0017                  		move.b	obWidth(a0),d0
00018030 4880                       		ext.w	d0
00018032 9640                       		sub.w	d0,d3
00018034 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018038 367C FFF0                  		movea.w	#-$10,a3
0001803C 3C3C 1000                  		move.w	#$1000,d6
00018040 7A0E                       		moveq	#$E,d5
00018042 6100 FA66                  		bsr.w	FindFloor
00018046 301F                       		move.w	(sp)+,d0
00018048 143C 0080                  		move.b	#-$80,d2
0001804C 6000 FE5E                  		bra.w	loc_14DD0
00018050                            ; End of function Sonic_DontRunOnWalls
00018050                            
00018050                            ; ===========================================================================
00018050 3428 000C                  		move.w	obY(a0),d2
00018054 3628 0008                  		move.w	obX(a0),d3
00018058                            
00018058                            loc_14F7C:
00018058 0442 000A                  		subi.w	#$A,d2
0001805C 0A42 000F                  		eori.w	#$F,d2
00018060 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018064 367C FFF0                  		movea.w	#-$10,a3
00018068 3C3C 1000                  		move.w	#$1000,d6
0001806C 7A0E                       		moveq	#$E,d5
0001806E 6100 FA3A                  		bsr.w	FindFloor
00018072 143C 0080                  		move.b	#-$80,d2
00018076 6000 FE6E                  		bra.w	loc_14E0A
0001807A                            
0001807A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001807A                            
0001807A                            
0001807A                            ObjHitCeiling:
0001807A 3428 000C                  		move.w	obY(a0),d2
0001807E 3628 0008                  		move.w	obX(a0),d3
00018082 7000                       		moveq	#0,d0
00018084 1028 0016                  		move.b	obHeight(a0),d0
00018088 4880                       		ext.w	d0
0001808A 9440                       		sub.w	d0,d2
0001808C 0A42 000F                  		eori.w	#$F,d2
00018090 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018094 367C FFF0                  		movea.w	#-$10,a3
00018098 3C3C 1000                  		move.w	#$1000,d6
0001809C 7A0E                       		moveq	#$E,d5
0001809E 6100 FA0A                  		bsr.w	FindFloor
000180A2 1638 F768                  		move.b	(v_anglebuffer).w,d3
000180A6 0803 0000                  		btst	#0,d3
000180AA 6700                       		beq.s	locret_14FD4
000180AC 163C 0080                  		move.b	#-$80,d3
000180B0                            
000180B0                            locret_14FD4:
000180B0 4E75                       		rts	
000180B2                            ; End of function ObjHitCeiling
000180B2                            
000180B2                            ; ===========================================================================
000180B2                            
000180B2                            loc_14FD6:
000180B2 3428 000C                  		move.w	obY(a0),d2
000180B6 3628 0008                  		move.w	obX(a0),d3
000180BA 7000                       		moveq	#0,d0
000180BC 1028 0017                  		move.b	obWidth(a0),d0
000180C0 4880                       		ext.w	d0
000180C2 9440                       		sub.w	d0,d2
000180C4 1028 0016                  		move.b	obHeight(a0),d0
000180C8 4880                       		ext.w	d0
000180CA 9640                       		sub.w	d0,d3
000180CC 0A43 000F                  		eori.w	#$F,d3
000180D0 49F8 F768                  		lea	(v_anglebuffer).w,a4
000180D4 367C FFF0                  		movea.w	#-$10,a3
000180D8 3C3C 0800                  		move.w	#$800,d6
000180DC 7A0E                       		moveq	#$E,d5
000180DE 6100 FB08                  		bsr.w	FindWall
000180E2 3F01                       		move.w	d1,-(sp)
000180E4 3428 000C                  		move.w	obY(a0),d2
000180E8 3628 0008                  		move.w	obX(a0),d3
000180EC 7000                       		moveq	#0,d0
000180EE 1028 0017                  		move.b	obWidth(a0),d0
000180F2 4880                       		ext.w	d0
000180F4 D440                       		add.w	d0,d2
000180F6 1028 0016                  		move.b	obHeight(a0),d0
000180FA 4880                       		ext.w	d0
000180FC 9640                       		sub.w	d0,d3
000180FE 0A43 000F                  		eori.w	#$F,d3
00018102 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018106 367C FFF0                  		movea.w	#-$10,a3
0001810A 3C3C 0800                  		move.w	#$800,d6
0001810E 7A0E                       		moveq	#$E,d5
00018110 6100 FAD6                  		bsr.w	FindWall
00018114 301F                       		move.w	(sp)+,d0
00018116 143C 0040                  		move.b	#$40,d2
0001811A 6000 FD90                  		bra.w	loc_14DD0
0001811E                            
0001811E                            ; ---------------------------------------------------------------------------
0001811E                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001811E                            ; ---------------------------------------------------------------------------
0001811E                            
0001811E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001811E                            
0001811E                            
0001811E                            Sonic_HitWall:
0001811E 3428 000C                  		move.w	obY(a0),d2
00018122 3628 0008                  		move.w	obX(a0),d3
00018126                            
00018126                            loc_1504A:
00018126 0443 000A                  		subi.w	#$A,d3
0001812A 0A43 000F                  		eori.w	#$F,d3
0001812E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018132 367C FFF0                  		movea.w	#-$10,a3
00018136 3C3C 0800                  		move.w	#$800,d6
0001813A 7A0E                       		moveq	#$E,d5
0001813C 6100 FAAA                  		bsr.w	FindWall
00018140 143C 0040                  		move.b	#$40,d2
00018144 6000 FDA0                  		bra.w	loc_14E0A
00018148                            ; End of function Sonic_HitWall
00018148                            
00018148                            ; ---------------------------------------------------------------------------
00018148                            ; Subroutine to	detect when an object hits a wall to its left
00018148                            ; ---------------------------------------------------------------------------
00018148                            
00018148                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018148                            
00018148                            
00018148                            ObjHitWallLeft:
00018148 D668 0008                  		add.w	obX(a0),d3
0001814C 3428 000C                  		move.w	obY(a0),d2
00018150                            		; Engine bug: colliding with left walls is erratic with this function.
00018150                            		; The cause is this: a missing instruction to flip collision on the found
00018150                            		; 16x16 block; this one:
00018150                            		;eori.w	#$F,d3
00018150 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018154 18BC 0000                  		move.b	#0,(a4)
00018158 367C FFF0                  		movea.w	#-$10,a3
0001815C 3C3C 0800                  		move.w	#$800,d6
00018160 7A0E                       		moveq	#$E,d5
00018162 6100 FA84                  		bsr.w	FindWall
00018166 1638 F768                  		move.b	(v_anglebuffer).w,d3
0001816A 0803 0000                  		btst	#0,d3
0001816E 6700                       		beq.s	locret_15098
00018170 163C 0040                  		move.b	#$40,d3
00018174                            
00018174                            locret_15098:
00018174 4E75                       		rts	
00018176                            ; End of function ObjHitWallLeft
00018176                            
00018176                            ; ===========================================================================
00018176                            
00018176                            		include	"_incObj\66 Rotating Junction.asm"
00018176                            ; ---------------------------------------------------------------------------
00018176                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00018176                            ; ---------------------------------------------------------------------------
00018176                            
00018176                            Junction:
00018176 7000                       		moveq	#0,d0
00018178 1028 0024                  		move.b	obRoutine(a0),d0
0001817C 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00018180 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00018184                            ; ===========================================================================
00018184 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00018186 0000                       		dc.w Jun_Action-Jun_Index
00018188 0000                       		dc.w Jun_Display-Jun_Index
0001818A 0000                       		dc.w Jun_Release-Jun_Index
0001818C                            
0001818C =00000034                  jun_frame:	equ $34		; current frame
0001818C =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
0001818C =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
0001818C                            ; ===========================================================================
0001818C                            
0001818C                            Jun_Main:	; Routine 0
0001818C 5428 0024                  		addq.b	#2,obRoutine(a0)
00018190 323C 0001                  		move.w	#1,d1
00018194 2248                       		movea.l	a0,a1
00018196 6000                       		bra.s	@makeitem
00018198                            ; ===========================================================================
00018198                            
00018198                            	@repeat:
00018198 4EB9 0000 FE16             		jsr	FindFreeObj
0001819E 6600                       		bne.s	@fail
000181A0 12BC 0066                  		move.b	#id_Junction,0(a1)
000181A4 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
000181A8 3368 0008 0008             		move.w	obX(a0),obX(a1)
000181AE 3368 000C 000C             		move.w	obY(a0),obY(a1)
000181B4 337C 0180 0018             		move.w	#$180,obPriority(a1)
000181BA 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
000181C0                            
000181C0                            @makeitem:
000181C0 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
000181C8 337C 4348 0002             		move.w	#$4348,obGfx(a1)
000181CE 0029 0004 0001             		ori.b	#4,obRender(a1)
000181D4 137C 0038 0014             		move.b	#$38,obActWid(a1)
000181DA                            
000181DA                            	@fail:
000181DA 51C9 FFBC                  		dbf	d1,@repeat
000181DE                            
000181DE 117C 0030 0014             		move.b	#$30,obActWid(a0)
000181E4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000181EA 317C 003C 0030             		move.w	#$3C,$30(a0)
000181F0 117C 0001 0034             		move.b	#1,jun_frame(a0)
000181F6 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
000181FC                            
000181FC                            Jun_Action:	; Routine 2
000181FC 6100 0000                  		bsr.w	Jun_ChkSwitch
00018200 4A28 0001                  		tst.b	obRender(a0)
00018204 6A00 0000                  		bpl.w	Jun_Display
00018208 323C 0030                  		move.w	#$30,d1
0001820C 3401                       		move.w	d1,d2
0001820E 3602                       		move.w	d2,d3
00018210 5243                       		addq.w	#1,d3
00018212 3828 0008                  		move.w	obX(a0),d4
00018216 6100 9B80                  		bsr.w	SolidObject
0001821A 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00018220 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018224                            
00018224 43F8 D000                  		lea	(v_player).w,a1
00018228 720E                       		moveq	#$E,d1
0001822A 3029 0008                  		move.w	obX(a1),d0
0001822E B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00018232 6500                       		bcs.s	@isleft		; if yes, branch
00018234 7207                       		moveq	#7,d1		
00018236                            
00018236                            	@isleft:
00018236 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
0001823A 6600                       		bne.s	Jun_Display	; if not, branch
0001823C                            
0001823C 1141 0032                  		move.b	d1,$32(a0)
00018240 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018244 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001824A 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00018250 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018256 337C 0000 0010             		move.w	#0,obVelX(a1)
0001825C 337C 0000 0012             		move.w	#0,obVelY(a1)
00018262 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018268 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001826E 08E9 0001 0022             		bset	#1,obStatus(a1)
00018274 3429 0008                  		move.w	obX(a1),d2
00018278 3629 000C                  		move.w	obY(a1),d3
0001827C 6100 0000                  		bsr.w	Jun_ChgPos
00018280 D569 0008                  		add.w	d2,obX(a1)
00018284 D769 000C                  		add.w	d3,obY(a1)
00018288 E0E9 0008                  		asr	obX(a1)
0001828C E0E9 000C                  		asr	obY(a1)
00018290                            
00018290                            Jun_Display:	; Routine 4
00018290 6000 966E                  		bra.w	RememberState
00018294                            ; ===========================================================================
00018294                            
00018294                            Jun_Release:	; Routine 6
00018294 1028 001A                  		move.b	obFrame(a0),d0
00018298 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
0001829C 6700                       		beq.s	@release	; if yes, branch
0001829E 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
000182A2 6600                       		bne.s	@dontrelease	; if not, branch
000182A4                            
000182A4                            	@release:
000182A4 B028 0032                  		cmp.b	$32(a0),d0
000182A8 6700                       		beq.s	@dontrelease
000182AA 43F8 D000                  		lea	(v_player).w,a1
000182AE 337C 0000 0010             		move.w	#0,obVelX(a1)
000182B4 337C 0800 0012             		move.w	#$800,obVelY(a1)
000182BA 0C00 0004                  		cmpi.b	#4,d0
000182BE 6700                       		beq.s	@isdown
000182C0 337C 0800 0010             		move.w	#$800,obVelX(a1)
000182C6 337C 0800 0012             		move.w	#$800,obVelY(a1)
000182CC                            
000182CC                            	@isdown:
000182CC 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
000182D0 5928 0024                  		subq.b	#4,obRoutine(a0)
000182D4                            
000182D4                            	@dontrelease:
000182D4 6100                       		bsr.s	Jun_ChkSwitch
000182D6 6100                       		bsr.s	Jun_ChgPos
000182D8 6000 9626                  		bra.w	RememberState
000182DC                            
000182DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182DC                            
000182DC                            
000182DC                            Jun_ChkSwitch:
000182DC 45F8 F7E0                  		lea	(f_switch).w,a2
000182E0 7000                       		moveq	#0,d0
000182E2 1028 0038                  		move.b	jun_switch(a0),d0
000182E6 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000182EC 6700                       		beq.s	@unpressed	; if not, branch
000182EE                            
000182EE 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
000182F2 6600                       		bne.s	@animate	; if yes, branch
000182F4 4428 0034                  		neg.b	jun_frame(a0)
000182F8 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
000182FE 6000                       		bra.s	@animate
00018300                            ; ===========================================================================
00018300                            
00018300                            @unpressed:
00018300 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018304                            
00018304                            @animate:
00018304 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018308 6A00                       		bpl.s	@nochange	; if time remains, branch
0001830A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018310 1228 0034                  		move.b	jun_frame(a0),d1
00018314 1028 001A                  		move.b	obFrame(a0),d0
00018318 D001                       		add.b	d1,d0
0001831A 0200 000F                  		andi.b	#$F,d0
0001831E 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018322                            
00018322                            	@nochange:
00018322 4E75                       		rts	
00018324                            ; End of function Jun_ChkSwitch
00018324                            
00018324                            
00018324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018324                            
00018324                            
00018324                            Jun_ChgPos:
00018324 43F8 D000                  		lea	(v_player).w,a1
00018328 7000                       		moveq	#0,d0
0001832A 1028 001A                  		move.b	obFrame(a0),d0
0001832E D040                       		add.w	d0,d0
00018330 45FB 0000                  		lea	@data(pc,d0.w),a2
00018334 101A                       		move.b	(a2)+,d0
00018336 4880                       		ext.w	d0
00018338 D068 0008                  		add.w	obX(a0),d0
0001833C 3340 0008                  		move.w	d0,obX(a1)
00018340 101A                       		move.b	(a2)+,d0
00018342 4880                       		ext.w	d0
00018344 D068 000C                  		add.w	obY(a0),d0
00018348 3340 000C                  		move.w	d0,obY(a1)
0001834C 4E75                       		rts	
0001834E                            
0001834E                            
0001834E E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
00018352 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018356 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
0001835A 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
0001835E 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
00018362 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018366 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
0001836A E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
0001836A E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
0001836E                            Map_Jun:	include	"_maps\Rotating Junction.asm"
0001836E                            ; ---------------------------------------------------------------------------
0001836E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001836E                            ; ---------------------------------------------------------------------------
0001836E                            Map_Jun_internal:
0001836E 0000                       		dc.w @gap0-Map_Jun_internal
00018370 0000                       		dc.w @gap1-Map_Jun_internal
00018372 0000                       		dc.w @gap2-Map_Jun_internal
00018374 0000                       		dc.w @gap3-Map_Jun_internal
00018376 0000                       		dc.w @gap4-Map_Jun_internal
00018378 0000                       		dc.w @gap5-Map_Jun_internal
0001837A 0000                       		dc.w @gap6-Map_Jun_internal
0001837C 0000                       		dc.w @gap7-Map_Jun_internal
0001837E 0000                       		dc.w @gap8-Map_Jun_internal
00018380 0000                       		dc.w @gap9-Map_Jun_internal
00018382 0000                       		dc.w @gapA-Map_Jun_internal
00018384 0000                       		dc.w @gapB-Map_Jun_internal
00018386 0000                       		dc.w @gapC-Map_Jun_internal
00018388 0000                       		dc.w @gapD-Map_Jun_internal
0001838A 0000                       		dc.w @gapE-Map_Jun_internal
0001838C 0000                       		dc.w @gapF-Map_Jun_internal
0001838E 0000                       		dc.w @circle-Map_Jun_internal
00018390 06                         @gap0:		dc.b 6
00018391 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018396 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001839B E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000183A0 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000183A5 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000183AA 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000183AF 06                         @gap1:		dc.b 6
000183B0 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000183B5 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000183BA F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000183BF F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000183C4 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000183C9 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000183CE 06                         @gap2:		dc.b 6
000183CF 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000183D4 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000183D9 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000183DE 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000183E3 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000183E8 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000183ED 06                         @gap3:		dc.b 6
000183EE 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000183F3 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000183F8 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000183FD 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018402 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018407 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001840C 06                         @gap4:		dc.b 6
0001840D 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018412 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018417 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001841C 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018421 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018426 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001842B 06                         @gap5:		dc.b 6
0001842C 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018431 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018436 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001843B 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00018440 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018445 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001844A 06                         @gap6:		dc.b 6
0001844B 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00018450 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018455 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001845A 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001845F 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018464 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018469 06                         @gap7:		dc.b 6
0001846A 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001846F F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018474 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018479 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001847E 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00018483 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00018488 06                         @gap8:		dc.b 6
00018489 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001848E 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00018493 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018498 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001849D 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000184A2 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000184A7 06                         @gap9:		dc.b 6
000184A8 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000184AD E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000184B2 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000184B7 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000184BC F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000184C1 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000184C6 06                         @gapA:		dc.b 6
000184C7 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000184CC E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000184D1 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000184D6 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000184DB E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000184E0 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000184E5 06                         @gapB:		dc.b 6
000184E6 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000184EB D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000184F0 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000184F5 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000184FA E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000184FF E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018504 06                         @gapC:		dc.b 6
00018505 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001850A D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001850F C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018514 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018519 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001851E E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018523 06                         @gapD:		dc.b 6
00018524 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018529 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001852E CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018533 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018538 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001853D E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00018542 06                         @gapE:		dc.b 6
00018543 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018548 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001854D D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00018552 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018557 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001855C E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00018561 06                         @gapF:		dc.b 6
00018562 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018567 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001856C DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00018571 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00018576 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001857B F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00018580 0C                         @circle:	dc.b $C
00018581 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00018586 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001858B E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00018590 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00018595 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001859A E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001859F 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000185A4 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000185A9 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000185AE 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000185B3 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000185B8 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000185BE 00                         		even
000185BE 00                         		even
000185BE                            		include	"_incObj\67 Running Disc.asm"
000185BE                            ; ---------------------------------------------------------------------------
000185BE                            ; Object 67 - disc that	you run	around (SBZ)
000185BE                            ; ---------------------------------------------------------------------------
000185BE                            
000185BE                            RunningDisc:
000185BE 7000                       		moveq	#0,d0
000185C0 1028 0024                  		move.b	obRoutine(a0),d0
000185C4 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
000185C8 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
000185CC                            ; ===========================================================================
000185CC 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
000185CE 0000                       		dc.w Disc_Action-Disc_Index
000185D0                            
000185D0 =00000032                  disc_origX:	equ $32		; original x-axis position
000185D0 =00000030                  disc_origY:	equ $30		; original y-axis position
000185D0                            ; ===========================================================================
000185D0                            
000185D0                            Disc_Main:	; Routine 0
000185D0 5428 0024                  		addq.b	#2,obRoutine(a0)
000185D4 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
000185DC 317C C344 0002             		move.w	#$C344,obGfx(a0)
000185E2 117C 0004 0001             		move.b	#4,obRender(a0)
000185E8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000185EE 117C 0008 0014             		move.b	#8,obActWid(a0)
000185F4 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
000185FA 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00018600 117C 0018 0034             		move.b	#$18,$34(a0)
00018606 117C 0048 0038             		move.b	#$48,$38(a0)
0001860C 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018610 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018614 6700                       		beq.s	@typeis0	; branch if 0
00018616 117C 0010 0034             		move.b	#$10,$34(a0)
0001861C 117C 0038 0038             		move.b	#$38,$38(a0)
00018622                            
00018622                            	@typeis0:
00018622 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018626 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001862A 4881                       		ext.w	d1
0001862C E741                       		asl.w	#3,d1
0001862E 3141 0036                  		move.w	d1,$36(a0)
00018632 1028 0022                  		move.b	obStatus(a0),d0
00018636 E418                       		ror.b	#2,d0
00018638 0200 00C0                  		andi.b	#$C0,d0
0001863C 1140 0026                  		move.b	d0,obAngle(a0)
00018640                            
00018640                            Disc_Action:	; Routine 2
00018640 6100 0000                  		bsr.w	Disc_MoveSonic
00018644 6100 0000                  		bsr.w	Disc_MoveSpot
00018648 6000 0000                  		bra.w	Disc_ChkDel
0001864C                            ; ===========================================================================
0001864C                            
0001864C                            Disc_MoveSonic:
0001864C 7400                       		moveq	#0,d2
0001864E 1428 0038                  		move.b	$38(a0),d2
00018652 3602                       		move.w	d2,d3
00018654 D643                       		add.w	d3,d3
00018656 43F8 D000                  		lea	(v_player).w,a1
0001865A 3029 0008                  		move.w	obX(a1),d0
0001865E 9068 0032                  		sub.w	disc_origX(a0),d0
00018662 D042                       		add.w	d2,d0
00018664 B043                       		cmp.w	d3,d0
00018666 6400                       		bcc.s	loc_155A8
00018668 3229 000C                  		move.w	obY(a1),d1
0001866C 9268 0030                  		sub.w	disc_origY(a0),d1
00018670 D242                       		add.w	d2,d1
00018672 B243                       		cmp.w	d3,d1
00018674 6400                       		bcc.s	loc_155A8
00018676 0829 0001 0022             		btst	#1,obStatus(a1)
0001867C 6700                       		beq.s	loc_155B8
0001867E 4228 003A                  		clr.b	$3A(a0)
00018682 4E75                       		rts	
00018684                            ; ===========================================================================
00018684                            
00018684                            loc_155A8:
00018684 4A28 003A                  		tst.b	$3A(a0)
00018688 6700                       		beq.s	locret_155B6
0001868A 4229 0038                  		clr.b	$38(a1)
0001868E 4228 003A                  		clr.b	$3A(a0)
00018692                            
00018692                            locret_155B6:
00018692 4E75                       		rts	
00018694                            ; ===========================================================================
00018694                            
00018694                            loc_155B8:
00018694 4A28 003A                  		tst.b	$3A(a0)
00018698 6600                       		bne.s	loc_155E2
0001869A 117C 0001 003A             		move.b	#1,$3A(a0)
000186A0 0829 0002 0022             		btst	#2,obStatus(a1)
000186A6 6600                       		bne.s	loc_155D0
000186A8 4229 001C                  		clr.b	obAnim(a1)
000186AC                            
000186AC                            loc_155D0:
000186AC 08A9 0005 0022             		bclr	#5,obStatus(a1)
000186B2 137C 0001 001D             		move.b	#1,obNextAni(a1)
000186B8 137C 0001 0038             		move.b	#1,$38(a1)
000186BE                            
000186BE                            loc_155E2:
000186BE 3029 0020                  		move.w	obInertia(a1),d0
000186C2 4A68 0036                  		tst.w	$36(a0)
000186C6 6A00                       		bpl.s	loc_15608
000186C8 0C40 FC00                  		cmpi.w	#-$400,d0
000186CC 6F00                       		ble.s	loc_155FA
000186CE 337C FC00 0020             		move.w	#-$400,obInertia(a1)
000186D4 4E75                       		rts	
000186D6                            ; ===========================================================================
000186D6                            
000186D6                            loc_155FA:
000186D6 0C40 F100                  		cmpi.w	#-$F00,d0
000186DA 6C00                       		bge.s	locret_15606
000186DC 337C F100 0020             		move.w	#-$F00,obInertia(a1)
000186E2                            
000186E2                            locret_15606:
000186E2 4E75                       		rts	
000186E4                            ; ===========================================================================
000186E4                            
000186E4                            loc_15608:
000186E4 0C40 0400                  		cmpi.w	#$400,d0
000186E8 6C00                       		bge.s	loc_15616
000186EA 337C 0400 0020             		move.w	#$400,obInertia(a1)
000186F0 4E75                       		rts	
000186F2                            ; ===========================================================================
000186F2                            
000186F2                            loc_15616:
000186F2 0C40 0F00                  		cmpi.w	#$F00,d0
000186F6 6F00                       		ble.s	locret_15622
000186F8 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
000186FE                            
000186FE                            locret_15622:
000186FE 4E75                       		rts	
00018700                            ; ===========================================================================
00018700                            
00018700                            Disc_MoveSpot:
00018700 3028 0036                  		move.w	$36(a0),d0
00018704 D168 0026                  		add.w	d0,obAngle(a0)
00018708 1028 0026                  		move.b	obAngle(a0),d0
0001870C 4EB9 0000 3A36             		jsr	(CalcSine).l
00018712 3428 0030                  		move.w	disc_origY(a0),d2
00018716 3628 0032                  		move.w	disc_origX(a0),d3
0001871A 7800                       		moveq	#0,d4
0001871C 1828 0034                  		move.b	$34(a0),d4
00018720 E14C                       		lsl.w	#8,d4
00018722 2A04                       		move.l	d4,d5
00018724 C9C0                       		muls.w	d0,d4
00018726 4844                       		swap	d4
00018728 CBC1                       		muls.w	d1,d5
0001872A 4845                       		swap	d5
0001872C D842                       		add.w	d2,d4
0001872E DA43                       		add.w	d3,d5
00018730 3144 000C                  		move.w	d4,obY(a0)
00018734 3145 0008                  		move.w	d5,obX(a0)
00018738 4E75                       		rts	
0001873A                            ; ===========================================================================
0001873A                            
0001873A                            Disc_ChkDel:
00018756 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001875C                            
0001875C                            	@delete:
0001875C 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001875C 4EF9 0000 F9CA             		jmp	(DeleteObject).l
00018762                            Map_Disc:	include	"_maps\Running Disc.asm"
00018762                            ; ---------------------------------------------------------------------------
00018762                            ; Sprite mappings - disc that you run around (SBZ)
00018762                            ; (It's just a small blob that moves around in a circle. The disc itself is
00018762                            ; part of the level tiles.)
00018762                            ; ---------------------------------------------------------------------------
00018762                            Map_Disc_internal:
00018762 0000                       		dc.w @spot-Map_Disc_internal
00018764 01                         @spot:		dc.b 1
00018765 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001876A                            		even
0001876A                            		even
0001876A                            		include	"_incObj\68 Conveyor Belt.asm"
0001876A                            ; ---------------------------------------------------------------------------
0001876A                            ; Object 68 - conveyor belts (SBZ)
0001876A                            ; ---------------------------------------------------------------------------
0001876A                            
0001876A                            Conveyor:
0001876A 7000                       		moveq	#0,d0
0001876C 1028 0024                  		move.b	obRoutine(a0),d0
00018770 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
00018774 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
00018778                            ; ===========================================================================
00018778 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
0001877A 0000                       		dc.w Conv_Action-Conv_Index
0001877C                            
0001877C =00000036                  conv_speed:	equ $36
0001877C =00000038                  conv_width:	equ $38
0001877C                            ; ===========================================================================
0001877C                            
0001877C                            Conv_Main:	; Routine 0
0001877C 5428 0024                  		addq.b	#2,obRoutine(a0)
00018780 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00018786 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001878A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001878E 6700                       		beq.s	@typeis0	; if zero, branch
00018790 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00018796                            
00018796                            	@typeis0:
00018796 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001879A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001879E 4881                       		ext.w	d1
000187A0 E841                       		asr.w	#4,d1
000187A2 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
000187A6                            
000187A6                            Conv_Action:	; Routine 2
000187A6 6100                       		bsr.s	@movesonic
000187C4 4E75                       		rts	
000187C6                            
000187C6                            	@delete:
000187C6 4EF9 0000 F9CA             		jmp	(DeleteObject).l
000187CC                            ; ===========================================================================
000187CC                            
000187CC                            @movesonic:
000187CC 7400                       		moveq	#0,d2
000187CE 1428 0038                  		move.b	conv_width(a0),d2
000187D2 3602                       		move.w	d2,d3
000187D4 D643                       		add.w	d3,d3
000187D6 43F8 D000                  		lea	(v_player).w,a1
000187DA 3029 0008                  		move.w	obX(a1),d0
000187DE 9068 0008                  		sub.w	obX(a0),d0
000187E2 D042                       		add.w	d2,d0
000187E4 B043                       		cmp.w	d3,d0
000187E6 6400                       		bcc.s	@notonconveyor
000187E8 3229 000C                  		move.w	obY(a1),d1
000187EC 9268 000C                  		sub.w	obY(a0),d1
000187F0 0641 0030                  		addi.w	#$30,d1
000187F4 0C41 0030                  		cmpi.w	#$30,d1
000187F8 6400                       		bcc.s	@notonconveyor
000187FA 0829 0001 0022             		btst	#1,obStatus(a1)
00018800 6600                       		bne.s	@notonconveyor
00018802 3028 0036                  		move.w	conv_speed(a0),d0
00018806 D169 0008                  		add.w	d0,obX(a1)
0001880A                            
0001880A                            	@notonconveyor:
0001880A 4E75                       		rts	
0001880A 4E75                       		rts	
0001880C                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
0001880C                            ; ---------------------------------------------------------------------------
0001880C                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001880C                            ; ---------------------------------------------------------------------------
0001880C                            
0001880C                            SpinPlatform:
0001880C 7000                       		moveq	#0,d0
0001880E 1028 0024                  		move.b	obRoutine(a0),d0
00018812 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
00018816 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
0001881A                            ; ===========================================================================
0001881A 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
0001881C 0000                       		dc.w Spin_Trapdoor-Spin_Index
0001881E 0000                       		dc.w Spin_Spinner-Spin_Index
00018820                            
00018820 =00000030                  spin_timer:	equ $30		; time counter until change
00018820 =00000032                  spin_timelen:	equ $32		; time between changes (general)
00018820                            ; ===========================================================================
00018820                            
00018820                            Spin_Main:	; Routine 0
00018820 5428 0024                  		addq.b	#2,obRoutine(a0)
00018824 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
0001882C 317C 4492 0002             		move.w	#$4492,obGfx(a0)
00018832 0028 0004 0001             		ori.b	#4,obRender(a0)
00018838 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001883E 7000                       		moveq	#0,d0
00018840 1028 0028                  		move.b	obSubtype(a0),d0
00018844 0240 000F                  		andi.w	#$F,d0
00018848 C0FC 003C                  		mulu.w	#$3C,d0
0001884C 3140 0032                  		move.w	d0,spin_timelen(a0)
00018850 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
00018854 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
00018856                            
00018856 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
0001885A 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
00018862 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00018868 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001886E 117C 0002 001C             		move.b	#2,obAnim(a0)
00018874 7000                       		moveq	#0,d0
00018876 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001887A 3200                       		move.w	d0,d1
0001887C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018880 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00018884 3140 0030                  		move.w	d0,spin_timer(a0)
00018888 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
0001888C 0241 0070                  		andi.w	#$70,d1
00018890 0641 0010                  		addi.w	#$10,d1
00018894 E549                       		lsl.w	#2,d1
00018896 5341                       		subq.w	#1,d1
00018898 3141 0036                  		move.w	d1,$36(a0)
0001889C 6000                       		bra.s	Spin_Spinner
0001889E                            ; ===========================================================================
0001889E                            
0001889E                            Spin_Trapdoor:	; Routine 2
0001889E 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
000188A2 6A00                       		bpl.s	@animate	; if time remains, branch
000188A4                            
000188A4 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000188AA 0868 0000 001C             		bchg	#0,obAnim(a0)
000188B0 4A28 0001                  		tst.b	obRender(a0)
000188B4 6A00                       		bpl.s	@animate
000188C0                            
000188C0                            	@animate:
000188C0 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000188C6 4EB9 0000 CA36             		jsr	(AnimateSprite).l
000188CC 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
000188D0 6600                       		bne.s	@notsolid	; if not, branch
000188D2 323C 004B                  		move.w	#$4B,d1
000188D6 343C 000C                  		move.w	#$C,d2
000188DA 3602                       		move.w	d2,d3
000188DC 5243                       		addq.w	#1,d3
000188DE 3828 0008                  		move.w	obX(a0),d4
000188E2 6100 94B4                  		bsr.w	SolidObject
000188E6 6000 9018                  		bra.w	RememberState
000188EA                            ; ===========================================================================
000188EA                            
000188EA                            @notsolid:
000188EA 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
000188F0 6700                       		beq.s	@display	; if not, branch
000188F2 43F8 D000                  		lea	(v_player).w,a1
000188F6 08A9 0003 0022             		bclr	#3,obStatus(a1)
000188FC 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018902 4228 0025                  		clr.b	obSolid(a0)
00018906                            
00018906                            	@display:
00018906 6000 8FF8                  		bra.w	RememberState
0001890A                            ; ===========================================================================
0001890A                            
0001890A                            Spin_Spinner:	; Routine 4
0001890A 3038 FE04                  		move.w	(v_framecount).w,d0
0001890E C068 0036                  		and.w	$36(a0),d0
00018912 6600                       		bne.s	@delay
00018914 117C 0001 0034             		move.b	#1,$34(a0)
0001891A                            
0001891A                            	@delay:
0001891A 4A28 0034                  		tst.b	$34(a0)
0001891E 6700                       		beq.s	@animate
00018920 5368 0030                  		subq.w	#1,spin_timer(a0)
00018924 6A00                       		bpl.s	@animate
00018926 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001892C 4228 0034                  		clr.b	$34(a0)
00018930 0868 0000 001C             		bchg	#0,obAnim(a0)
00018936                            
00018936                            	@animate:
00018936 43F9 0000 0000             		lea	(Ani_Spin).l,a1
0001893C 4EB9 0000 CA36             		jsr	(AnimateSprite).l
00018942 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00018946 6600                       		bne.s	@notsolid2	; if not, branch
00018948 323C 001B                  		move.w	#$1B,d1
0001894C 343C 0007                  		move.w	#7,d2
00018950 3602                       		move.w	d2,d3
00018952 5243                       		addq.w	#1,d3
00018954 3828 0008                  		move.w	obX(a0),d4
00018958 6100 943E                  		bsr.w	SolidObject
0001895C 6000 8FA2                  		bra.w	RememberState
00018960                            ; ===========================================================================
00018960                            
00018960                            @notsolid2:
00018960 0828 0003 0022             		btst	#3,obStatus(a0)
00018966 6700                       		beq.s	@display
00018968 43F8 D000                  		lea	(v_player).w,a1
0001896C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018972 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018978 4228 0025                  		clr.b	obSolid(a0)
0001897C                            
0001897C                            	@display:
0001897C 6000 8F82                  		bra.w	RememberState
0001897C 6000 8F82                  		bra.w	RememberState
00018980                            		include	"_anim\SBZ Spinning Platforms.asm"
00018980                            ; ---------------------------------------------------------------------------
00018980                            ; Animation script - trapdoor (SBZ)
00018980                            ; ---------------------------------------------------------------------------
00018980 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
00018982 0000                       		dc.w @trapclose-Ani_Spin
00018984 0000                       		dc.w @spin1-Ani_Spin
00018986 0000                       		dc.w @spin2-Ani_Spin
00018988 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
0001898E 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00018994 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000189A8 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000189BC                            		even
000189BC                            		even
000189BC                            Map_Trap:	include	"_maps\Trapdoor.asm"
000189BC                            ; ---------------------------------------------------------------------------
000189BC                            ; Sprite mappings - trapdoor (SBZ)
000189BC                            ; ---------------------------------------------------------------------------
000189BC                            Map_Trap_internal:
000189BC 0000                       		dc.w @closed-Map_Trap_internal
000189BE 0000                       		dc.w @half-Map_Trap_internal
000189C0 0000                       		dc.w @open-Map_Trap_internal
000189C2 04                         @closed:	dc.b 4
000189C3 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000189C8 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000189CD F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000189D2 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000189D7 08                         @half:		dc.b 8
000189D8 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000189DD 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000189E2 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000189E7 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000189EC F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000189F1 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000189F6 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000189FB 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00018A00 04                         @open:		dc.b 4
00018A01 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018A06 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00018A0B 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018A10 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018A16 00                         		even
00018A16 00                         		even
00018A16                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00018A16                            ; ---------------------------------------------------------------------------
00018A16                            ; Sprite mappings - spinning platforms (SBZ)
00018A16                            ; ---------------------------------------------------------------------------
00018A16                            Map_Spin_internal:
00018A16 0000                       		dc.w @flat-Map_Spin_internal
00018A18 0000                       		dc.w @spin1-Map_Spin_internal
00018A1A 0000                       		dc.w @spin2-Map_Spin_internal
00018A1C 0000                       		dc.w @spin3-Map_Spin_internal
00018A1E 0000                       		dc.w @spin4-Map_Spin_internal
00018A20 02                         @flat:		dc.b 2
00018A21 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018A26 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00018A2B 02                         @spin1:		dc.b 2
00018A2C F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00018A31 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018A36 02                         @spin2:		dc.b 2
00018A37 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018A3C 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00018A41 02                         @spin3:		dc.b 2
00018A42 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018A47 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018A4C 02                         @spin4:		dc.b 2
00018A4D F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00018A52 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018A58 00                         		even
00018A58 00                         		even
00018A58                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
00018A58                            ; ---------------------------------------------------------------------------
00018A58                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018A58                            ; ---------------------------------------------------------------------------
00018A58                            
00018A58                            Saws:
00018A58 7000                       		moveq	#0,d0
00018A5A 1028 0024                  		move.b	obRoutine(a0),d0
00018A5E 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
00018A62 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018A66                            ; ===========================================================================
00018A66 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00018A68 0000                       		dc.w Saw_Action-Saw_Index
00018A6A                            
00018A6A =0000003A                  saw_origX:	equ $3A		; original x-axis position
00018A6A =00000038                  saw_origY:	equ $38		; original y-axis position
00018A6A =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00018A6A                            ; ===========================================================================
00018A6A                            
00018A6A                            Saw_Main:	; Routine 0
00018A6A 5428 0024                  		addq.b	#2,obRoutine(a0)
00018A6E 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00018A76 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
00018A7C 117C 0004 0001             		move.b	#4,obRender(a0)
00018A82 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018A88 117C 0020 0014             		move.b	#$20,obActWid(a0)
00018A8E 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018A94 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
00018A9A 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00018AA0 6400                       		bcc.s	Saw_Action	; if yes, branch
00018AA2 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018AA8                            
00018AA8                            Saw_Action:	; Routine 2
00018AA8 7000                       		moveq	#0,d0
00018AAA 1028 0028                  		move.b	obSubtype(a0),d0
00018AAE 0240 0007                  		andi.w	#7,d0
00018AB2 D040                       		add.w	d0,d0
00018AB4 323B 0000                  		move.w	@index(pc,d0.w),d1
00018AB8 4EBB 1000                  		jsr	@index(pc,d1.w)
00018AD8 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00018ADE                            
00018ADE                            	@delete:
00018ADE 4EF9 0000 F9CA             		jmp	(DeleteObject).l
00018AE4                            ; ===========================================================================
00018AE4 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
00018AEA 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00018AEE                            ; ===========================================================================
00018AEE                            
00018AEE                            @type00:
00018AEE 4E75                       		rts			; doesn't move
00018AF0                            ; ===========================================================================
00018AF0                            
00018AF0                            @type01:
00018AF0 323C 0060                  		move.w	#$60,d1
00018AF4 7000                       		moveq	#0,d0
00018AF6 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00018AFA 0828 0000 0022             		btst	#0,obStatus(a0)
00018B00 6700                       		beq.s	@noflip01
00018B02 4440                       		neg.w	d0
00018B04 D041                       		add.w	d1,d0
00018B06                            
00018B06                            	@noflip01:
00018B06 3228 003A                  		move.w	saw_origX(a0),d1
00018B0A 9240                       		sub.w	d0,d1
00018B0C 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00018B10                            
00018B10 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B14 6A00                       		bpl.s	@sameframe01
00018B16 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00018B1C 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00018B22                            
00018B22                            	@sameframe01:
00018B22 4A28 0001                  		tst.b	obRender(a0)
00018B26 6A00                       		bpl.s	@nosound01
00018B28 3038 FE04                  		move.w	(v_framecount).w,d0
00018B2C 0240 000F                  		andi.w	#$F,d0
00018B30 6600                       		bne.s	@nosound01
00018B3C                            
00018B3C                            	@nosound01:
00018B3C 4E75                       		rts	
00018B3E                            ; ===========================================================================
00018B3E                            
00018B3E                            @type02:
00018B3E 323C 0030                  		move.w	#$30,d1
00018B42 7000                       		moveq	#0,d0
00018B44 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018B48 0828 0000 0022             		btst	#0,obStatus(a0)
00018B4E 6700                       		beq.s	@noflip02
00018B50 4440                       		neg.w	d0
00018B52 0640 0080                  		addi.w	#$80,d0
00018B56                            
00018B56                            	@noflip02:
00018B56 3228 0038                  		move.w	saw_origY(a0),d1
00018B5A 9240                       		sub.w	d0,d1
00018B5C 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
00018B60 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B64 6A00                       		bpl.s	@sameframe02
00018B66 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018B6C 0868 0000 001A             		bchg	#0,obFrame(a0)
00018B72                            
00018B72                            	@sameframe02:
00018B72 4A28 0001                  		tst.b	obRender(a0)
00018B76 6A00                       		bpl.s	@nosound02
00018B78 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018B7C 0C00 0018                  		cmpi.b	#$18,d0
00018B80 6600                       		bne.s	@nosound02
00018B8C                            
00018B8C                            	@nosound02:
00018B8C 4E75                       		rts	
00018B8E                            ; ===========================================================================
00018B8E                            
00018B8E                            @type03:
00018B8E 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00018B92 6600                       		bne.s	@here03		; if yes, branch
00018B94                            
00018B94 3038 D008                  		move.w	(v_player+obX).w,d0
00018B98 0440 00C0                  		subi.w	#$C0,d0
00018B9C 6500                       		bcs.s	@nosaw03x
00018B9E 9068 0008                  		sub.w	obX(a0),d0
00018BA2 6500                       		bcs.s	@nosaw03x
00018BA4 3038 D00C                  		move.w	(v_player+obY).w,d0
00018BA8 0440 0080                  		subi.w	#$80,d0
00018BAC B068 000C                  		cmp.w	obY(a0),d0
00018BB0 6400                       		bcc.s	@nosaw03y
00018BB2 0640 0100                  		addi.w	#$100,d0
00018BB6 B068 000C                  		cmp.w	obY(a0),d0
00018BBA 6500                       		bcs.s	@nosaw03y
00018BBC 117C 0001 003D             		move.b	#1,saw_here(a0)
00018BC2 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00018BC8 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018BCE 117C 0002 001A             		move.b	#2,obFrame(a0)
00018BDE                            
00018BDE                            	@nosaw03x:
00018BDE 588F                       		addq.l	#4,sp
00018BE0                            
00018BE0                            	@nosaw03y:
00018BE0 4E75                       		rts	
00018BE2                            ; ===========================================================================
00018BE2                            
00018BE2                            @here03:
00018BE2 4EB9 0000 F976             		jsr	(SpeedToPos).l
00018BE8 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018BEE 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018BF2 6A00                       		bpl.s	@sameframe03
00018BF4 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018BFA 0868 0000 001A             		bchg	#0,obFrame(a0)
00018C00                            
00018C00                            	@sameframe03:
00018C00 4E75                       		rts	
00018C02                            ; ===========================================================================
00018C02                            
00018C02                            @type04:
00018C02 4A28 003D                  		tst.b	saw_here(a0)
00018C06 6600                       		bne.s	@here04
00018C08 3038 D008                  		move.w	(v_player+obX).w,d0
00018C0C 0640 00E0                  		addi.w	#$E0,d0
00018C10 9068 0008                  		sub.w	obX(a0),d0
00018C14 6400                       		bcc.s	@nosaw04x
00018C16 3038 D00C                  		move.w	(v_player+obY).w,d0
00018C1A 0440 0080                  		subi.w	#$80,d0
00018C1E B068 000C                  		cmp.w	obY(a0),d0
00018C22 6400                       		bcc.s	@nosaw04y
00018C24 0640 0100                  		addi.w	#$100,d0
00018C28 B068 000C                  		cmp.w	obY(a0),d0
00018C2C 6500                       		bcs.s	@nosaw04y
00018C2E 117C 0001 003D             		move.b	#1,saw_here(a0)
00018C34 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018C3A 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018C40 117C 0002 001A             		move.b	#2,obFrame(a0)
00018C50                            
00018C50                            	@nosaw04x:
00018C50 588F                       		addq.l	#4,sp
00018C52                            
00018C52                            	@nosaw04y:
00018C52 4E75                       		rts	
00018C54                            ; ===========================================================================
00018C54                            
00018C54                            @here04:
00018C54 4EB9 0000 F976             		jsr	(SpeedToPos).l
00018C5A 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018C60 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018C64 6A00                       		bpl.s	@sameframe04
00018C66 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018C6C 0868 0000 001A             		bchg	#0,obFrame(a0)
00018C72                            
00018C72                            	@sameframe04:
00018C72 4E75                       		rts	
00018C72 4E75                       		rts	
00018C74                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018C74                            ; ---------------------------------------------------------------------------
00018C74                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018C74                            ; ---------------------------------------------------------------------------
00018C74                            Map_Saw_internal:
00018C74 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018C76 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018C78 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018C7A 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018C7C 07                         @pizzacutter1:	dc.b 7
00018C7D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018C82 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018C87 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018C8C E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018C91 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018C96 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018C9B 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018CA0 07                         @pizzacutter2:	dc.b 7
00018CA1 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018CA6 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018CAB E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018CB0 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018CB5 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018CBA 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018CBF 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018CC4 04                         @groundsaw1:	dc.b 4
00018CC5 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018CCA E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018CCF 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018CD4 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018CD9 04                         @groundsaw2:	dc.b 4
00018CDA E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018CDF E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018CE4 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018CE9 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018CEE                            		even
00018CEE                            		even
00018CEE                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018CEE                            ; ---------------------------------------------------------------------------
00018CEE                            ; Object 6B - stomper and sliding door (SBZ)
00018CEE                            ; ---------------------------------------------------------------------------
00018CEE                            
00018CEE                            ScrapStomp:
00018CEE 7000                       		moveq	#0,d0
00018CF0 1028 0024                  		move.b	obRoutine(a0),d0
00018CF4 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018CF8 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018CFC                            ; ===========================================================================
00018CFC 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018CFE 0000                       		dc.w Sto_Action-Sto_Index
00018D00                            
00018D00 =00000016                  sto_height:	equ $16
00018D00 =00000034                  sto_origX:	equ $34		; original x-axis position
00018D00 =00000030                  sto_origY:	equ $30		; original y-axis position
00018D00 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018D00                            
00018D00 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018D04 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018D08 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018D0C 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018D10 8040 0005                  		dc.b  $80, $40,	  0,   5
00018D14                            ; ===========================================================================
00018D14                            
00018D14                            Sto_Main:	; Routine 0
00018D14 5428 0024                  		addq.b	#2,obRoutine(a0)
00018D18 7000                       		moveq	#0,d0
00018D1A 1028 0028                  		move.b	obSubtype(a0),d0
00018D1E E448                       		lsr.w	#2,d0
00018D20 0240 001C                  		andi.w	#$1C,d0
00018D24 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018D28 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018D2C 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018D30 E448                       		lsr.w	#2,d0
00018D32 1140 001A                  		move.b	d0,obFrame(a0)
00018D36 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018D3E 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018D44 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018D4A 6600                       		bne.s	@isSBZ12	; if not, branch
00018D4C 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018D52 6700                       		beq.s	@isSBZ3
00018D54                            
00018D54                            @chkdel:
00018D54 45F8 FC00                  		lea	(v_objstate).w,a2
00018D58 7000                       		moveq	#0,d0
00018D5A 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D5E 6700                       		beq.s	@delete
00018D60 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018D66                            
00018D66                            	@delete:
00018D66 4EF9 0000 F9CA             		jmp	(DeleteObject).l
00018D6C                            ; ===========================================================================
00018D6C                            
00018D6C                            @isSBZ3:
00018D6C 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018D72 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018D78 6600                       		bne.s	@isSBZ12
00018D7A 45F8 FC00                  		lea	(v_objstate).w,a2
00018D7E 7000                       		moveq	#0,d0
00018D80 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D84 6700                       		beq.s	@isSBZ12
00018D86 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018D8C 6700                       		beq.s	@isSBZ12
00018D8E 4238 F7CB                  		clr.b	(v_obj6B).w
00018D92 60C0                       		bra.s	@chkdel
00018D94                            ; ===========================================================================
00018D94                            
00018D94                            @isSBZ12:
00018D94 0028 0004 0001             		ori.b	#4,obRender(a0)
00018D9A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018DA0 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018DA6 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018DAC 7000                       		moveq	#0,d0
00018DAE 101B                       		move.b	(a3)+,d0
00018DB0 3140 003C                  		move.w	d0,$3C(a0)
00018DB4 7000                       		moveq	#0,d0
00018DB6 1028 0028                  		move.b	obSubtype(a0),d0
00018DBA 6A00                       		bpl.s	Sto_Action
00018DBC 0200 000F                  		andi.b	#$F,d0
00018DC0 1140 003E                  		move.b	d0,$3E(a0)
00018DC4 1153 0028                  		move.b	(a3),obSubtype(a0)
00018DC8 0C13 0005                  		cmpi.b	#5,(a3)
00018DCC 6600                       		bne.s	@chkgone
00018DCE 08E8 0004 0001             		bset	#4,obRender(a0)
00018DD4                            
00018DD4                            	@chkgone:
00018DD4 45F8 FC00                  		lea	(v_objstate).w,a2
00018DD8 7000                       		moveq	#0,d0
00018DDA 1028 0023                  		move.b	obRespawnNo(a0),d0
00018DDE 6700                       		beq.s	Sto_Action
00018DE0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018DE6                            
00018DE6                            Sto_Action:	; Routine 2
00018DE6 3F28 0008                  		move.w	obX(a0),-(sp)
00018DEA 7000                       		moveq	#0,d0
00018DEC 1028 0028                  		move.b	obSubtype(a0),d0
00018DF0 0240 000F                  		andi.w	#$F,d0
00018DF4 D040                       		add.w	d0,d0
00018DF6 323B 0000                  		move.w	@index(pc,d0.w),d1
00018DFA 4EBB 1000                  		jsr	@index(pc,d1.w)
00018DFE 381F                       		move.w	(sp)+,d4
00018E00 4A28 0001                  		tst.b	obRender(a0)
00018E04 6A00                       		bpl.s	@chkdel
00018E06 7200                       		moveq	#0,d1
00018E08 1228 0014                  		move.b	obActWid(a0),d1
00018E0C 0641 000B                  		addi.w	#$B,d1
00018E10 7400                       		moveq	#0,d2
00018E12 1428 0016                  		move.b	sto_height(a0),d2
00018E16 3602                       		move.w	d2,d3
00018E18 5243                       		addq.w	#1,d3
00018E1A 6100 8F7C                  		bsr.w	SolidObject
00018E1E                            
00018E1E                            	@chkdel:
00018E3A 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00018E40                            
00018E40                            	@chkgone:
00018E40 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018E46 6600                       		bne.s	@delete
00018E48 4238 F7CB                  		clr.b	(v_obj6B).w
00018E4C 45F8 FC00                  		lea	(v_objstate).w,a2
00018E50 7000                       		moveq	#0,d0
00018E52 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E56 6700                       		beq.s	@delete
00018E58 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018E5E                            
00018E5E                            	@delete:
00018E5E 4EF9 0000 F9CA             		jmp	(DeleteObject).l
00018E64                            ; ===========================================================================
00018E64 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018E68 0000 0000                  		dc.w @type02-@index, @type03-@index
00018E6C 0000 0000                  		dc.w @type04-@index, @type05-@index
00018E70                            ; ===========================================================================
00018E70                            
00018E70                            @type00:
00018E70 4E75                       		rts
00018E72                            ; ===========================================================================
00018E72                            
00018E72                            @type01:
00018E72 4A28 0038                  		tst.b	sto_active(a0)
00018E76 6600                       		bne.s	@isactive01
00018E78 45F8 F7E0                  		lea	(f_switch).w,a2
00018E7C 7000                       		moveq	#0,d0
00018E7E 1028 003E                  		move.b	$3E(a0),d0
00018E82 0832 0000 0000             		btst	#0,(a2,d0.w)
00018E88 6700                       		beq.s	@loc_15DC2
00018E8A 117C 0001 0038             		move.b	#1,sto_active(a0)
00018E90                            
00018E90                            	@isactive01:
00018E90 3028 003C                  		move.w	$3C(a0),d0
00018E94 B068 003A                  		cmp.w	$3A(a0),d0
00018E98 6700                       		beq.s	@loc_15DE0
00018E9A 5468 003A                  		addq.w	#2,$3A(a0)
00018E9E                            
00018E9E                            	@loc_15DC2:
00018E9E 3028 003A                  		move.w	$3A(a0),d0
00018EA2 0828 0000 0022             		btst	#0,obStatus(a0)
00018EA8 6700                       		beq.s	@noflip01
00018EAA 4440                       		neg.w	d0
00018EAC 0640 0080                  		addi.w	#$80,d0
00018EB0                            
00018EB0                            	@noflip01:
00018EB0 3228 0034                  		move.w	sto_origX(a0),d1
00018EB4 9240                       		sub.w	d0,d1
00018EB6 3141 0008                  		move.w	d1,obX(a0)
00018EBA 4E75                       		rts	
00018EBC                            ; ===========================================================================
00018EBC                            
00018EBC                            @loc_15DE0:
00018EBC 5228 0028                  		addq.b	#1,obSubtype(a0)
00018EC0 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018EC6 4228 0038                  		clr.b	sto_active(a0)
00018ECA 45F8 FC00                  		lea	(v_objstate).w,a2
00018ECE 7000                       		moveq	#0,d0
00018ED0 1028 0023                  		move.b	obRespawnNo(a0),d0
00018ED4 67C8                       		beq.s	@loc_15DC2
00018ED6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018EDC 60C0                       		bra.s	@loc_15DC2
00018EDE                            ; ===========================================================================
00018EDE                            
00018EDE                            @type02:
00018EDE 4A28 0038                  		tst.b	sto_active(a0)
00018EE2 6600                       		bne.s	@isactive02
00018EE4 5368 0036                  		subq.w	#1,$36(a0)
00018EE8 6600                       		bne.s	@loc_15E1E
00018EEA 117C 0001 0038             		move.b	#1,sto_active(a0)
00018EF0                            
00018EF0                            	@isactive02:
00018EF0 4A68 003A                  		tst.w	$3A(a0)
00018EF4 6700                       		beq.s	@loc_15E3C
00018EF6 5568 003A                  		subq.w	#2,$3A(a0)
00018EFA                            
00018EFA                            	@loc_15E1E:
00018EFA 3028 003A                  		move.w	$3A(a0),d0
00018EFE 0828 0000 0022             		btst	#0,obStatus(a0)
00018F04 6700                       		beq.s	@noflip02
00018F06 4440                       		neg.w	d0
00018F08 0640 0080                  		addi.w	#$80,d0
00018F0C                            
00018F0C                            	@noflip02:
00018F0C 3228 0034                  		move.w	sto_origX(a0),d1
00018F10 9240                       		sub.w	d0,d1
00018F12 3141 0008                  		move.w	d1,obX(a0)
00018F16 4E75                       		rts	
00018F18                            ; ===========================================================================
00018F18                            
00018F18                            @loc_15E3C:
00018F18 5328 0028                  		subq.b	#1,obSubtype(a0)
00018F1C 4228 0038                  		clr.b	sto_active(a0)
00018F20 45F8 FC00                  		lea	(v_objstate).w,a2
00018F24 7000                       		moveq	#0,d0
00018F26 1028 0023                  		move.b	obRespawnNo(a0),d0
00018F2A 67CE                       		beq.s	@loc_15E1E
00018F2C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018F32 60C6                       		bra.s	@loc_15E1E
00018F34                            ; ===========================================================================
00018F34                            
00018F34                            @type03:
00018F34 4A28 0038                  		tst.b	sto_active(a0)
00018F38 6600                       		bne.s	@isactive03
00018F3A 4A68 003A                  		tst.w	$3A(a0)
00018F3E 6700                       		beq.s	@loc_15E6A
00018F40 5368 003A                  		subq.w	#1,$3A(a0)
00018F44 6000                       		bra.s	@loc_15E8E
00018F46                            ; ===========================================================================
00018F46                            
00018F46                            @loc_15E6A:
00018F46 5368 0036                  		subq.w	#1,$36(a0)
00018F4A 6A00                       		bpl.s	@loc_15E8E
00018F4C 317C 003C 0036             		move.w	#$3C,$36(a0)
00018F52 117C 0001 0038             		move.b	#1,sto_active(a0)
00018F58                            
00018F58                            @isactive03:
00018F58 5068 003A                  		addq.w	#8,$3A(a0)
00018F5C 3028 003A                  		move.w	$3A(a0),d0
00018F60 B068 003C                  		cmp.w	$3C(a0),d0
00018F64 6600                       		bne.s	@loc_15E8E
00018F66 4228 0038                  		clr.b	sto_active(a0)
00018F6A                            
00018F6A                            @loc_15E8E:
00018F6A 3028 003A                  		move.w	$3A(a0),d0
00018F6E 0828 0000 0022             		btst	#0,obStatus(a0)
00018F74 6700                       		beq.s	@noflip03
00018F76 4440                       		neg.w	d0
00018F78 0640 0038                  		addi.w	#$38,d0
00018F7C                            
00018F7C                            	@noflip03:
00018F7C 3228 0030                  		move.w	sto_origY(a0),d1
00018F80 D240                       		add.w	d0,d1
00018F82 3141 000C                  		move.w	d1,obY(a0)
00018F86 4E75                       		rts	
00018F88                            ; ===========================================================================
00018F88                            
00018F88                            @type04:
00018F88 4A28 0038                  		tst.b	sto_active(a0)
00018F8C 6600                       		bne.s	@isactive04
00018F8E 4A68 003A                  		tst.w	$3A(a0)
00018F92 6700                       		beq.s	@loc_15EBE
00018F94 5168 003A                  		subq.w	#8,$3A(a0)
00018F98 6000                       		bra.s	@loc_15EF0
00018F9A                            ; ===========================================================================
00018F9A                            
00018F9A                            @loc_15EBE:
00018F9A 5368 0036                  		subq.w	#1,$36(a0)
00018F9E 6A00                       		bpl.s	@loc_15EF0
00018FA0 317C 003C 0036             		move.w	#$3C,$36(a0)
00018FA6 117C 0001 0038             		move.b	#1,sto_active(a0)
00018FAC                            
00018FAC                            @isactive04:
00018FAC 3028 003A                  		move.w	$3A(a0),d0
00018FB0 B068 003C                  		cmp.w	$3C(a0),d0
00018FB4 6700                       		beq.s	@loc_15EE0
00018FB6 5068 003A                  		addq.w	#8,$3A(a0)
00018FBA 6000                       		bra.s	@loc_15EF0
00018FBC                            ; ===========================================================================
00018FBC                            
00018FBC                            @loc_15EE0:
00018FBC 5368 0036                  		subq.w	#1,$36(a0)
00018FC0 6A00                       		bpl.s	@loc_15EF0
00018FC2 317C 003C 0036             		move.w	#$3C,$36(a0)
00018FC8 4228 0038                  		clr.b	sto_active(a0)
00018FCC                            
00018FCC                            @loc_15EF0:
00018FCC 3028 003A                  		move.w	$3A(a0),d0
00018FD0 0828 0000 0022             		btst	#0,obStatus(a0)
00018FD6 6700                       		beq.s	@noflip04
00018FD8 4440                       		neg.w	d0
00018FDA 0640 0038                  		addi.w	#$38,d0
00018FDE                            
00018FDE                            	@noflip04:
00018FDE 3228 0030                  		move.w	sto_origY(a0),d1
00018FE2 D240                       		add.w	d0,d1
00018FE4 3141 000C                  		move.w	d1,obY(a0)
00018FE8 4E75                       		rts	
00018FEA                            ; ===========================================================================
00018FEA                            
00018FEA                            @type05:
00018FEA 4A28 0038                  		tst.b	sto_active(a0)
00018FEE 6600                       		bne.s	@loc_15F3E
00018FF0 45F8 F7E0                  		lea	(f_switch).w,a2
00018FF4 7000                       		moveq	#0,d0
00018FF6 1028 003E                  		move.b	$3E(a0),d0
00018FFA 0832 0000 0000             		btst	#0,(a2,d0.w)
00019000 6700                       		beq.s	@locret_15F5C
00019002 117C 0001 0038             		move.b	#1,sto_active(a0)
00019008 45F8 FC00                  		lea	(v_objstate).w,a2
0001900C 7000                       		moveq	#0,d0
0001900E 1028 0023                  		move.b	obRespawnNo(a0),d0
00019012 6700                       		beq.s	@loc_15F3E
00019014 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001901A                            
0001901A                            @loc_15F3E:
0001901A 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00019022 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
0001902A 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019030 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00019036 6700                       		beq.s	@loc_15F5E
00019038                            
00019038                            @locret_15F5C:
00019038 4E75                       		rts	
0001903A                            ; ===========================================================================
0001903A                            
0001903A                            @loc_15F5E:
0001903A 4228 0028                  		clr.b	obSubtype(a0)
0001903E 4228 0038                  		clr.b	sto_active(a0)
00019042 4E75                       		rts	
00019042 4E75                       		rts	
00019044                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00019044                            ; ---------------------------------------------------------------------------
00019044                            ; Sprite mappings - stomper and	platforms (SBZ)
00019044                            ; ---------------------------------------------------------------------------
00019044                            Map_Stomp_internal:
00019044 0000                       		dc.w @door-Map_Stomp_internal
00019046 0000                       		dc.w @stomper-Map_Stomp_internal
00019048 0000                       		dc.w @stomper-Map_Stomp_internal
0001904A 0000                       		dc.w @stomper-Map_Stomp_internal
0001904C 0000                       		dc.w @bigdoor-Map_Stomp_internal
0001904E 04                         @door:		dc.b 4
0001904F F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00019054 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00019059 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001905E F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00019063 08                         @stomper:	dc.b 8
00019064 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00019069 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001906E E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00019073 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00019078 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001907D 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00019082 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00019087 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001908C 0E                         @bigdoor:	dc.b $E
0001908D C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00019092 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00019097 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001909C C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000190A1 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000190A6 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000190AB C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000190B0 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000190B5 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000190BA E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000190BF E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000190C4 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000190C9 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000190CE 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000190D4 00                         		even
000190D4 00                         		even
000190D4                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
000190D4                            ; ---------------------------------------------------------------------------
000190D4                            ; Object 6C - vanishing	platforms (SBZ)
000190D4                            ; ---------------------------------------------------------------------------
000190D4                            
000190D4                            VanishPlatform:
000190D4 7000                       		moveq	#0,d0
000190D6 1028 0024                  		move.b	obRoutine(a0),d0
000190DA 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
000190DE 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
000190E2                            ; ===========================================================================
000190E2 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
000190E4 0000                       		dc.w VanP_Vanish-VanP_Index
000190E6 0000                       		dc.w VanP_Appear-VanP_Index
000190E8 0000                       		dc.w loc_16068-VanP_Index
000190EA                            
000190EA =00000030                  vanp_timer:	equ $30		; counter for time until event
000190EA =00000032                  vanp_timelen:	equ $32		; time between events (general)
000190EA                            ; ===========================================================================
000190EA                            
000190EA                            VanP_Main:	; Routine 0
000190EA 5C28 0024                  		addq.b	#6,obRoutine(a0)
000190EE 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
000190F6 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
000190FC 0028 0004 0001             		ori.b	#4,obRender(a0)
00019102 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019108 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001910E 7000                       		moveq	#0,d0
00019110 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019114 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00019118 5240                       		addq.w	#1,d0		; add 1
0001911A EF48                       		lsl.w	#7,d0		; multiply by $80
0001911C 3200                       		move.w	d0,d1
0001911E 5340                       		subq.w	#1,d0
00019120 3140 0030                  		move.w	d0,vanp_timer(a0)
00019124 3140 0032                  		move.w	d0,vanp_timelen(a0)
00019128 7000                       		moveq	#0,d0
0001912A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001912E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00019132 0641 0080                  		addi.w	#$80,d1
00019136 C0C1                       		mulu.w	d1,d0
00019138 E088                       		lsr.l	#8,d0
0001913A 3140 0036                  		move.w	d0,$36(a0)
0001913E 5341                       		subq.w	#1,d1
00019140 3141 0038                  		move.w	d1,$38(a0)
00019144                            
00019144                            loc_16068:	; Routine 6
00019144 3038 FE04                  		move.w	(v_framecount).w,d0
00019148 9068 0036                  		sub.w	$36(a0),d0
0001914C C068 0038                  		and.w	$38(a0),d0
00019150 6600                       		bne.s	@animate
00019152 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00019156 6000                       		bra.s	VanP_Vanish
00019158                            ; ===========================================================================
00019158                            
00019158                            @animate:
00019158 43F9 0000 0000             		lea	(Ani_Van).l,a1
0001915E 4EB9 0000 CA36             		jsr	(AnimateSprite).l
00019164 6000 879A                  		bra.w	RememberState
00019168                            ; ===========================================================================
00019168                            
00019168                            VanP_Vanish:	; Routine 2
00019168                            VanP_Appear:	; Routine 4
00019168 5368 0030                  		subq.w	#1,vanp_timer(a0)
0001916C 6A00                       		bpl.s	@wait
0001916E 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019174 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00019178 6700                       		beq.s	@isvanishing	; if yes, branch
0001917A 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00019180                            
00019180                            	@isvanishing:
00019180 0868 0000 001C             		bchg	#0,obAnim(a0)
00019186                            
00019186                            	@wait:
00019186 43F9 0000 0000             		lea	(Ani_Van).l,a1
0001918C 4EB9 0000 CA36             		jsr	(AnimateSprite).l
00019192 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00019198 6600                       		bne.s	@notsolid	; if yes, branch
0001919A 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
000191A0 6600                       		bne.s	@loc_160D6
000191A2 7200                       		moveq	#0,d1
000191A4 1228 0014                  		move.b	obActWid(a0),d1
000191A8 4EB9 0000 9098             		jsr	(PlatformObject).l
000191AE 6000 8750                  		bra.w	RememberState
000191B2                            ; ===========================================================================
000191B2                            
000191B2                            @loc_160D6:
000191B2 7200                       		moveq	#0,d1
000191B4 1228 0014                  		move.b	obActWid(a0),d1
000191B8 4EB9 0000 920C             		jsr	(ExitPlatform).l
000191BE 3428 0008                  		move.w	obX(a0),d2
000191C2 4EB9 0000 9776             		jsr	(MvSonicOnPtfm2).l
000191C8 6000 8736                  		bra.w	RememberState
000191CC                            ; ===========================================================================
000191CC                            
000191CC                            @notsolid:
000191CC 0828 0003 0022             		btst	#3,obStatus(a0)
000191D2 6700                       		beq.s	@display
000191D4 43F8 D000                  		lea	(v_player).w,a1
000191D8 08A9 0003 0022             		bclr	#3,obStatus(a1)
000191DE 08A8 0003 0022             		bclr	#3,obStatus(a0)
000191E4 117C 0002 0024             		move.b	#2,obRoutine(a0)
000191EA 4228 0025                  		clr.b	obSolid(a0)
000191EE                            
000191EE                            	@display:
000191EE 6000 8710                  		bra.w	RememberState
000191EE 6000 8710                  		bra.w	RememberState
000191F2                            		include	"_anim\SBZ Vanishing Platforms.asm"
000191F2                            ; ---------------------------------------------------------------------------
000191F2                            ; Animation script - vanishing platforms (SBZ)
000191F2                            ; ---------------------------------------------------------------------------
000191F2 0000                       Ani_Van:	dc.w @vanish-Ani_Van
000191F4 0000                       		dc.w @appear-Ani_Van
000191F6 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
000191FE 00                         		even
000191FE 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
00019206 00                         		even
00019206 00                         		even
00019206                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019206                            ; ---------------------------------------------------------------------------
00019206                            ; Sprite mappings - vanishing platforms	(SBZ)
00019206                            ; ---------------------------------------------------------------------------
00019206                            Map_VanP_internal:
00019206 0000                       		dc.w @whole-Map_VanP_internal
00019208 0000                       		dc.w @half-Map_VanP_internal
0001920A 0000                       		dc.w @quarter-Map_VanP_internal
0001920C 0000                       		dc.w @gone-Map_VanP_internal
0001920E 01                         @whole:		dc.b 1
0001920F F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00019214 01                         @half:		dc.b 1
00019215 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001921A 01                         @quarter:	dc.b 1
0001921B F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00019220 00                         @gone:		dc.b 0
00019222 00                         		even
00019222 00                         		even
00019222                            		include	"_incObj\6E Electrocuter.asm"
00019222                            ; ---------------------------------------------------------------------------
00019222                            ; Object 6E - electrocution orbs (SBZ)
00019222                            ; ---------------------------------------------------------------------------
00019222                            
00019222                            Electro:
00019222 7000                       		moveq	#0,d0
00019224 1028 0024                  		move.b	obRoutine(a0),d0
00019228 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
0001922C 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00019230                            ; ===========================================================================
00019230 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00019232 0000                       		dc.w Elec_Shock-Elec_Index
00019234                            
00019234 =00000034                  elec_freq:	equ $34		; frequency
00019234                            ; ===========================================================================
00019234                            
00019234                            Elec_Main:	; Routine 0
00019234 5428 0024                  		addq.b	#2,obRoutine(a0)
00019238 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00019240 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019246 0028 0004 0001             		ori.b	#4,obRender(a0)
0001924C 117C 0028 0014             		move.b	#$28,obActWid(a0)
00019252 7000                       		moveq	#0,d0
00019254 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019258 E948                       		lsl.w	#4,d0		; multiply by $10
0001925A 5340                       		subq.w	#1,d0
0001925C 3140 0034                  		move.w	d0,elec_freq(a0)
00019260                            
00019260                            Elec_Shock:	; Routine 2
00019260 3038 FE04                  		move.w	(v_framecount).w,d0
00019264 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019268 6600                       		bne.s	@animate	; if not, branch
0001926A                            
0001926A 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00019270 4A28 0001                  		tst.b	obRender(a0)
00019274 6A00                       		bpl.s	@animate
00019280                            
00019280                            	@animate:
00019280 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019286 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001928C 117C 0000 0020             		move.b	#0,obColType(a0)
00019292 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019298 6600                       		bne.s	@display	; if not, branch
0001929A 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
000192A0                            
000192A0                            	@display:
000192A0 6000 865E                  		bra.w	RememberState
000192A0 6000 865E                  		bra.w	RememberState
000192A4                            		include	"_anim\Electrocuter.asm"
000192A4                            ; ---------------------------------------------------------------------------
000192A4                            ; Animation script - electrocution orbs (SBZ)
000192A4                            ; ---------------------------------------------------------------------------
000192A4 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
000192A6 0000                       		dc.w byte_161D0-Ani_Elec
000192A8 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
000192AC 00                         		even
000192AC 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
000192BC                            		even
000192BC                            		even
000192BC                            Map_Elec:	include	"_maps\Electrocuter.asm"
000192BC                            ; --------------------------------------------------------------------------------
000192BC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000192BC                            ; --------------------------------------------------------------------------------
000192BC                            
000192BC                            SME_KiF9w:	
000192BC 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
000192C0 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
000192C4 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
000192C8 02                         SME_KiF9w_C:	dc.b 2	
000192C9 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000192CE 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000192D3 03                         SME_KiF9w_17:	dc.b 3	
000192D4 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000192D9 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000192DE 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000192E3 05                         SME_KiF9w_27:	dc.b 5	
000192E4 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000192E9 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000192EE 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000192F3 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
000192F8 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
000192FD 04                         SME_KiF9w_41:	dc.b 4	
000192FE F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019303 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019308 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
0001930D F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019312 06                         SME_KiF9w_56:	dc.b 6	
00019313 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019318 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001931D F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019322 F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019327 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
0001932C F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
00019331 04                         SME_KiF9w_75:	dc.b 4	
00019332 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019337 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001933C F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
00019341 F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019346                            		even
00019346                            		even
00019346                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019346                            ; ---------------------------------------------------------------------------
00019346                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019346                            ; ---------------------------------------------------------------------------
00019346                            
00019346                            SpinConvey:
00019346 7000                       		moveq	#0,d0
00019348 1028 0024                  		move.b	obRoutine(a0),d0
0001934C 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
00019350 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
00019370                            
00019370                            SpinC_Display:
00019370 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00019376                            ; ===========================================================================
00019376                            
00019376                            loc_1629A:
00019376 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
0001937C 6600                       		bne.s	SpinC_Act1or2	; if not, branch
0001937E 0C40 FF80                  		cmpi.w	#-$80,d0
00019382 64EC                       		bcc.s	SpinC_Display
00019384                            
00019384                            SpinC_Act1or2:
00019384 1028 002F                  		move.b	$2F(a0),d0
00019388 6A00                       		bpl.s	SpinC_Delete
0001938A 0240 007F                  		andi.w	#$7F,d0
0001938E 45F8 F7C1                  		lea	(v_obj63).w,a2
00019392 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019398                            
00019398                            SpinC_Delete:
00019398 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001939E                            ; ===========================================================================
0001939E 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
000193A0 0000                       		dc.w loc_163D8-SpinC_Index
000193A2                            ; ===========================================================================
000193A2                            
000193A2                            SpinC_Main:	; Routine 0
000193A2 1028 0028                  		move.b	obSubtype(a0),d0
000193A6 6B00 0000                  		bmi.w	loc_16380
000193AA 5428 0024                  		addq.b	#2,obRoutine(a0)
000193AE 217C 0001 8A16 0004        		move.l	#Map_Spin,obMap(a0)
000193B6 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000193BC 117C 0010 0014             		move.b	#$10,obActWid(a0)
000193C2 0028 0004 0001             		ori.b	#4,obRender(a0)
000193C8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000193CE 7000                       		moveq	#0,d0
000193D0 1028 0028                  		move.b	obSubtype(a0),d0
000193D4 3200                       		move.w	d0,d1
000193D6 E648                       		lsr.w	#3,d0
000193D8 0240 001E                  		andi.w	#$1E,d0
000193DC 45FA 0000                  		lea	off_164A6(pc),a2
000193E0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000193E4 315A 0038                  		move.w	(a2)+,$38(a0)
000193E8 315A 0030                  		move.w	(a2)+,$30(a0)
000193EC 214A 003C                  		move.l	a2,$3C(a0)
000193F0 0241 000F                  		andi.w	#$F,d1
000193F4 E549                       		lsl.w	#2,d1
000193F6 1141 0038                  		move.b	d1,$38(a0)
000193FA 117C 0004 003A             		move.b	#4,$3A(a0)
00019400 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019404 6700                       		beq.s	loc_16356
00019406 117C 0001 003B             		move.b	#1,$3B(a0)
0001940C 4428 003A                  		neg.b	$3A(a0)
00019410 7200                       		moveq	#0,d1
00019412 1228 0038                  		move.b	$38(a0),d1
00019416 D228 003A                  		add.b	$3A(a0),d1
0001941A B228 0039                  		cmp.b	$39(a0),d1
0001941E 6500                       		bcs.s	loc_16352
00019420 1001                       		move.b	d1,d0
00019422 7200                       		moveq	#0,d1
00019424 4A00                       		tst.b	d0
00019426 6A00                       		bpl.s	loc_16352
00019428 1228 0039                  		move.b	$39(a0),d1
0001942C 5901                       		subq.b	#4,d1
0001942E                            
0001942E                            loc_16352:
0001942E 1141 0038                  		move.b	d1,$38(a0)
00019432                            
00019432                            loc_16356:
00019432 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00019438 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001943E 4A41                       		tst.w	d1
00019440 6600                       		bne.s	loc_1636C
00019442 117C 0001 001C             		move.b	#1,obAnim(a0)
00019448                            
00019448                            loc_1636C:
00019448 0C41 0008                  		cmpi.w	#8,d1
0001944C 6600                       		bne.s	loc_16378
0001944E 117C 0000 001C             		move.b	#0,obAnim(a0)
00019454                            
00019454                            loc_16378:
00019454 6100 B522                  		bsr.w	LCon_ChangeDir
00019458 6000 0000                  		bra.w	loc_163D8
0001945C                            ; ===========================================================================
0001945C                            
0001945C                            loc_16380:
0001945C 1140 002F                  		move.b	d0,$2F(a0)
00019460 0240 007F                  		andi.w	#$7F,d0
00019464 45F8 F7C1                  		lea	(v_obj63).w,a2
00019468 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001946E 6700                       		beq.s	loc_1639A
00019470 4EF9 0000 F9CA             		jmp	(DeleteObject).l
00019476                            ; ===========================================================================
00019476                            
00019476                            loc_1639A:
00019476 D040                       		add.w	d0,d0
00019478 0240 001E                  		andi.w	#$1E,d0
0001947C 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
00019480 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019486 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001948A 321A                       		move.w	(a2)+,d1
0001948C 2248                       		movea.l	a0,a1
0001948E 6000                       		bra.s	SpinC_LoadPform
00019490                            ; ===========================================================================
00019490                            
00019490                            SpinC_Loop:
00019490 4EB9 0000 FE16             		jsr	(FindFreeObj).l
00019496 6600                       		bne.s	loc_163D0
00019498                            
00019498                            SpinC_LoadPform:
00019498 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
0001949C 335A 0008                  		move.w	(a2)+,obX(a1)
000194A0 335A 000C                  		move.w	(a2)+,obY(a1)
000194A4 301A                       		move.w	(a2)+,d0
000194A6 1340 0028                  		move.b	d0,obSubtype(a1)
000194AA                            
000194AA                            loc_163D0:
000194AA 51C9 FFE4                  		dbf	d1,SpinC_Loop
000194AE                            
000194AE 588F                       		addq.l	#4,sp
000194B0 4E75                       		rts	
000194B2                            ; ===========================================================================
000194B2                            
000194B2                            loc_163D8:	; Routine 2
000194B2 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
000194B8 4EB9 0000 CA36             		jsr	(AnimateSprite).l
000194BE 4A28 001A                  		tst.b	obFrame(a0)
000194C2 6600                       		bne.s	loc_16404
000194C4 3F28 0008                  		move.w	obX(a0),-(sp)
000194C8 6100 0000                  		bsr.w	loc_16424
000194CC 323C 001B                  		move.w	#$1B,d1
000194D0 343C 0007                  		move.w	#7,d2
000194D4 3602                       		move.w	d2,d3
000194D6 5243                       		addq.w	#1,d3
000194D8 381F                       		move.w	(sp)+,d4
000194DA 6000 88BC                  		bra.w	SolidObject
000194DE                            ; ===========================================================================
000194DE                            
000194DE                            loc_16404:
000194DE 0828 0003 0022             		btst	#3,obStatus(a0)
000194E4 6700                       		beq.s	loc_16420
000194E6 43F8 D000                  		lea	(v_objspace).w,a1
000194EA 08A9 0003 0022             		bclr	#3,obStatus(a1)
000194F0 08A8 0003 0022             		bclr	#3,obStatus(a0)
000194F6 4228 0025                  		clr.b	obSolid(a0)
000194FA                            
000194FA                            loc_16420:
000194FA 6000 0000                  		bra.w	loc_16424
000194FE                            
000194FE                            loc_16424:
000194FE 3028 0008                  		move.w	obX(a0),d0
00019502 B068 0034                  		cmp.w	$34(a0),d0
00019506 6600                       		bne.s	loc_16484
00019508 3028 000C                  		move.w	obY(a0),d0
0001950C B068 0036                  		cmp.w	$36(a0),d0
00019510 6600                       		bne.s	loc_16484
00019512 7200                       		moveq	#0,d1
00019514 1228 0038                  		move.b	$38(a0),d1
00019518 D228 003A                  		add.b	$3A(a0),d1
0001951C B228 0039                  		cmp.b	$39(a0),d1
00019520 6500                       		bcs.s	loc_16456
00019522 1001                       		move.b	d1,d0
00019524 7200                       		moveq	#0,d1
00019526 4A00                       		tst.b	d0
00019528 6A00                       		bpl.s	loc_16456
0001952A 1228 0039                  		move.b	$39(a0),d1
0001952E 5901                       		subq.b	#4,d1
00019530                            
00019530                            loc_16456:
00019530 1141 0038                  		move.b	d1,$38(a0)
00019534 2268 003C                  		movea.l	$3C(a0),a1
00019538 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001953E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00019544 4A41                       		tst.w	d1
00019546 6600                       		bne.s	loc_16474
00019548 117C 0001 001C             		move.b	#1,obAnim(a0)
0001954E                            
0001954E                            loc_16474:
0001954E 0C41 0008                  		cmpi.w	#8,d1
00019552 6600                       		bne.s	loc_16480
00019554 117C 0000 001C             		move.b	#0,obAnim(a0)
0001955A                            
0001955A                            loc_16480:
0001955A 6100 B41C                  		bsr.w	LCon_ChangeDir
0001955E                            
0001955E                            loc_16484:
0001955E 4EF9 0000 F976             		jmp	(SpeedToPos).l
0001955E 4EF9 0000 F976             		jmp	(SpeedToPos).l
00019564                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
00019564                            ; ---------------------------------------------------------------------------
00019564                            ; Animation script - platform on conveyor belt (SBZ)
00019564                            ; ---------------------------------------------------------------------------
00019564 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
00019566 0000                       		dc.w @still-Ani_SpinConvey
00019568 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00019575 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
0001957C 00                         		even
0001957C 0F00 FF                    @still:		dc.b $F, 0, afEnd
00019580 00                         		even
00019580 00                         		even
00019580                            
00019580 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00019586 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001958C 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000195A0 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000195B4 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000195C8 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000195DC 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000195F0 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019604                            ; ===========================================================================
00019604                            
00019604                            		include	"_incObj\70 Girder Block.asm"
00019604                            ; ---------------------------------------------------------------------------
00019604                            ; Object 70 - large girder block (SBZ)
00019604                            ; ---------------------------------------------------------------------------
00019604                            
00019604                            Girder:
00019604 7000                       		moveq	#0,d0
00019606 1028 0024                  		move.b	obRoutine(a0),d0
0001960A 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
0001960E 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
00019612                            ; ===========================================================================
00019612 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00019614 0000                       		dc.w Gird_Action-Gird_Index
00019616                            
00019616 =00000016                  gird_height:	equ $16
00019616 =00000032                  gird_origX:	equ $32		; original x-axis position
00019616 =00000030                  gird_origY:	equ $30		; original y-axis position
00019616 =00000034                  gird_time:	equ $34		; duration for movement in a direction
00019616 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
00019616 =0000003A                  gird_delay:	equ $3A		; delay for movement
00019616                            ; ===========================================================================
00019616                            
00019616                            Gird_Main:	; Routine 0
00019616 5428 0024                  		addq.b	#2,obRoutine(a0)
0001961A 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
00019622 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
00019628 0028 0004 0001             		ori.b	#4,obRender(a0)
0001962E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019634 117C 0060 0014             		move.b	#$60,obActWid(a0)
0001963A 117C 0018 0016             		move.b	#$18,gird_height(a0)
00019640 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
00019646 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
0001964C 6100 0000                  		bsr.w	Gird_ChgMove
00019650                            
00019650                            Gird_Action:	; Routine 2
00019650 3F28 0008                  		move.w	obX(a0),-(sp)
00019654 4A68 003A                  		tst.w	gird_delay(a0)
00019658 6700                       		beq.s	@beginmove
0001965A 5368 003A                  		subq.w	#1,gird_delay(a0)
0001965E 6600                       		bne.s	@solid
00019660                            
00019660                            	@beginmove:
00019660 4EB9 0000 F976             		jsr	(SpeedToPos).l
00019666 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
0001966A 6600                       		bne.s	@solid		; if time remains, branch
0001966C 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
00019670                            
00019670                            	@solid:
00019670 381F                       		move.w	(sp)+,d4
00019672 4A28 0001                  		tst.b	obRender(a0)
00019676 6A00                       		bpl.s	@chkdel
00019678 7200                       		moveq	#0,d1
0001967A 1228 0014                  		move.b	obActWid(a0),d1
0001967E 0641 000B                  		addi.w	#$B,d1
00019682 7400                       		moveq	#0,d2
00019684 1428 0016                  		move.b	gird_height(a0),d2
00019688 3602                       		move.w	d2,d3
0001968A 5243                       		addq.w	#1,d3
0001968C 6100 870A                  		bsr.w	SolidObject
00019690                            
00019690                            	@chkdel:
000196AC 4EF9 0000 F98A             		jmp	(DisplaySprite).l
000196B2                            
000196B2                            	@delete:
000196B2 4EF9 0000 F9CA             		jmp	(DeleteObject).l
000196B8                            ; ===========================================================================
000196B8                            
000196B8                            Gird_ChgMove:
000196B8 1028 0038                  		move.b	gird_set(a0),d0
000196BC 0240 0018                  		andi.w	#$18,d0
000196C0 43F9 0000 0000             		lea	(@settings).l,a1
000196C6 43F1 0000                  		lea	(a1,d0.w),a1
000196CA 3159 0010                  		move.w	(a1)+,obVelX(a0)
000196CE 3159 0012                  		move.w	(a1)+,obVelY(a0)
000196D2 3159 0034                  		move.w	(a1)+,gird_time(a0)
000196D6 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
000196DA 317C 0007 003A             		move.w	#7,gird_delay(a0)
000196E0 4E75                       		rts	
000196E2                            ; ===========================================================================
000196E2                            @settings:	;   x-speed, y-speed, duration
000196E2 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
000196EA 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
000196F2 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
000196FA 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
000196FA 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019702                            Map_Gird:	include	"_maps\Girder Block.asm"
00019702                            ; ---------------------------------------------------------------------------
00019702                            ; Sprite mappings - large girder block (SBZ)
00019702                            ; ---------------------------------------------------------------------------
00019702                            Map_Gird_internal:
00019702 0000                       		dc.w @girder-Map_Gird_internal
00019704 0C                         @girder:	dc.b $C
00019705 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001970A 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001970F E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019714 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00019719 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001971E 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00019723 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00019728 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001972D E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00019732 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00019737 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001973C 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00019742 00                         		even
00019742 00                         		even
00019742                            		include	"_incObj\72 Teleporter.asm"
00019742                            ; ---------------------------------------------------------------------------
00019742                            ; Object 72 - teleporter (SBZ)
00019742                            ; ---------------------------------------------------------------------------
00019742                            
00019742                            Teleport:
00019742 7000                       		moveq	#0,d0
00019744 1028 0024                  		move.b	obRoutine(a0),d0
00019748 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
0001974C 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
0001976C 4E75                       		rts	
0001976E                            
0001976E                            	@delete:
0001976E 4EF9 0000 F9CA             		jmp	(DeleteObject).l
00019774                            ; ===========================================================================
00019774 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
00019776 0000                       		dc.w loc_166C8-Tele_Index
00019778 0000                       		dc.w loc_1675E-Tele_Index
0001977A 0000                       		dc.w loc_16798-Tele_Index
0001977C                            ; ===========================================================================
0001977C                            
0001977C                            Tele_Main:	; Routine 0
0001977C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019780 1028 0028                  		move.b	obSubtype(a0),d0
00019784 D040                       		add.w	d0,d0
00019786 0240 001E                  		andi.w	#$1E,d0
0001978A 45FA 0000                  		lea	Tele_Data(pc),a2
0001978E D4F2 0000                  		adda.w	(a2,d0.w),a2
00019792 315A 003A                  		move.w	(a2)+,$3A(a0)
00019796 214A 003C                  		move.l	a2,$3C(a0)
0001979A 315A 0036                  		move.w	(a2)+,$36(a0)
0001979E 315A 0038                  		move.w	(a2)+,$38(a0)
000197A2                            
000197A2                            loc_166C8:	; Routine 2
000197A2 43F8 D000                  		lea	(v_player).w,a1
000197A6 3029 0008                  		move.w	obX(a1),d0
000197AA 9068 0008                  		sub.w	obX(a0),d0
000197AE 0828 0000 0022             		btst	#0,obStatus(a0)
000197B4 6700                       		beq.s	loc_166E0
000197B6 0640 000F                  		addi.w	#$F,d0
000197BA                            
000197BA                            loc_166E0:
000197BA 0C40 0010                  		cmpi.w	#$10,d0
000197BE 6400                       		bcc.s	locret_1675C
000197C0 3229 000C                  		move.w	obY(a1),d1
000197C4 9268 000C                  		sub.w	obY(a0),d1
000197C8 0641 0020                  		addi.w	#$20,d1
000197CC 0C41 0040                  		cmpi.w	#$40,d1
000197D0 6400                       		bcc.s	locret_1675C
000197D2 4A38 F7C8                  		tst.b	(f_lockmulti).w
000197D6 6600                       		bne.s	locret_1675C
000197D8 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
000197DE 6600                       		bne.s	loc_1670E
000197E0 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
000197E6 6500                       		bcs.s	locret_1675C
000197E8                            
000197E8                            loc_1670E:
000197E8 5428 0024                  		addq.b	#2,obRoutine(a0)
000197EC 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
000197F2 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
000197F8 337C 0800 0020             		move.w	#$800,obInertia(a1)
000197FE 337C 0000 0010             		move.w	#0,obVelX(a1)
00019804 337C 0000 0012             		move.w	#0,obVelY(a1)
0001980A 08A8 0005 0022             		bclr	#5,obStatus(a0)
00019810 08A9 0005 0022             		bclr	#5,obStatus(a1)
00019816 08E9 0001 0022             		bset	#1,obStatus(a1)
0001981C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00019822 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019828 4228 0032                  		clr.b	$32(a0)
00019836                            
00019836                            locret_1675C:
00019836 4E75                       		rts	
00019838                            ; ===========================================================================
00019838                            
00019838                            loc_1675E:	; Routine 4
00019838 43F8 D000                  		lea	(v_player).w,a1
0001983C 1028 0032                  		move.b	$32(a0),d0
00019840 5428 0032                  		addq.b	#2,$32(a0)
00019844 4EB9 0000 3A36             		jsr	(CalcSine).l
0001984A EA40                       		asr.w	#5,d0
0001984C 3428 000C                  		move.w	obY(a0),d2
00019850 9440                       		sub.w	d0,d2
00019852 3342 000C                  		move.w	d2,obY(a1)
00019856 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001985C 6600                       		bne.s	locret_16796
0001985E 6100 0000                  		bsr.w	sub_1681C
00019862 5428 0024                  		addq.b	#2,obRoutine(a0)
00019870                            
00019870                            locret_16796:
00019870 4E75                       		rts	
00019872                            ; ===========================================================================
00019872                            
00019872                            loc_16798:	; Routine 6
00019872 588F                       		addq.l	#4,sp
00019874 43F8 D000                  		lea	(v_player).w,a1
00019878 5328 002E                  		subq.b	#1,$2E(a0)
0001987C 6A00                       		bpl.s	loc_167DA
0001987E 3368 0036 0008             		move.w	$36(a0),obX(a1)
00019884 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001988A 7200                       		moveq	#0,d1
0001988C 1228 003A                  		move.b	$3A(a0),d1
00019890 5801                       		addq.b	#4,d1
00019892 B228 003B                  		cmp.b	$3B(a0),d1
00019896 6500                       		bcs.s	loc_167C2
00019898 7200                       		moveq	#0,d1
0001989A 6000                       		bra.s	loc_16800
0001989C                            ; ===========================================================================
0001989C                            
0001989C                            loc_167C2:
0001989C 1141 003A                  		move.b	d1,$3A(a0)
000198A0 2468 003C                  		movea.l	$3C(a0),a2
000198A4 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000198AA 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000198B0 6000 0000                  		bra.w	sub_1681C
000198B4                            ; ===========================================================================
000198B4                            
000198B4                            loc_167DA:
000198B4 2429 0008                  		move.l	obX(a1),d2
000198B8 2629 000C                  		move.l	obY(a1),d3
000198BC 3029 0010                  		move.w	obVelX(a1),d0
000198C0 48C0                       		ext.l	d0
000198C2 E180                       		asl.l	#8,d0
000198C4 D480                       		add.l	d0,d2
000198C6 3029 0012                  		move.w	obVelY(a1),d0
000198CA 48C0                       		ext.l	d0
000198CC E180                       		asl.l	#8,d0
000198CE D680                       		add.l	d0,d3
000198D0 2342 0008                  		move.l	d2,obX(a1)
000198D4 2343 000C                  		move.l	d3,obY(a1)
000198D8 4E75                       		rts	
000198DA                            ; ===========================================================================
000198DA                            
000198DA                            loc_16800:
000198DA 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
000198E0 4228 0024                  		clr.b	obRoutine(a0)
000198E4 4238 F7C8                  		clr.b	(f_lockmulti).w
000198E8 337C 0000 0010             		move.w	#0,obVelX(a1)
000198EE 337C 0200 0012             		move.w	#$200,obVelY(a1)
000198F4 4E75                       		rts	
000198F6                            
000198F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000198F6                            
000198F6                            
000198F6                            sub_1681C:
000198F6 7000                       		moveq	#0,d0
000198F8 343C 1000                  		move.w	#$1000,d2
000198FC 3028 0036                  		move.w	$36(a0),d0
00019900 9069 0008                  		sub.w	obX(a1),d0
00019904 6C00                       		bge.s	loc_16830
00019906 4440                       		neg.w	d0
00019908 4442                       		neg.w	d2
0001990A                            
0001990A                            loc_16830:
0001990A 7200                       		moveq	#0,d1
0001990C 363C 1000                  		move.w	#$1000,d3
00019910 3228 0038                  		move.w	$38(a0),d1
00019914 9269 000C                  		sub.w	obY(a1),d1
00019918 6C00                       		bge.s	loc_16844
0001991A 4441                       		neg.w	d1
0001991C 4443                       		neg.w	d3
0001991E                            
0001991E                            loc_16844:
0001991E B240                       		cmp.w	d0,d1
00019920 6500                       		bcs.s	loc_1687A
00019922 7200                       		moveq	#0,d1
00019924 3228 0038                  		move.w	$38(a0),d1
00019928 9269 000C                  		sub.w	obY(a1),d1
0001992C 4841                       		swap	d1
0001992E 83C3                       		divs.w	d3,d1
00019930 7000                       		moveq	#0,d0
00019932 3028 0036                  		move.w	$36(a0),d0
00019936 9069 0008                  		sub.w	obX(a1),d0
0001993A 6700                       		beq.s	loc_16866
0001993C 4840                       		swap	d0
0001993E 81C1                       		divs.w	d1,d0
00019940                            
00019940                            loc_16866:
00019940 3340 0010                  		move.w	d0,obVelX(a1)
00019944 3343 0012                  		move.w	d3,obVelY(a1)
00019948 4A41                       		tst.w	d1
0001994A 6A00                       		bpl.s	loc_16874
0001994C 4441                       		neg.w	d1
0001994E                            
0001994E                            loc_16874:
0001994E 3141 002E                  		move.w	d1,$2E(a0)
00019952 4E75                       		rts	
00019954                            ; ===========================================================================
00019954                            
00019954                            loc_1687A:
00019954 7000                       		moveq	#0,d0
00019956 3028 0036                  		move.w	$36(a0),d0
0001995A 9069 0008                  		sub.w	obX(a1),d0
0001995E 4840                       		swap	d0
00019960 81C2                       		divs.w	d2,d0
00019962 7200                       		moveq	#0,d1
00019964 3228 0038                  		move.w	$38(a0),d1
00019968 9269 000C                  		sub.w	obY(a1),d1
0001996C 6700                       		beq.s	loc_16898
0001996E 4841                       		swap	d1
00019970 83C0                       		divs.w	d0,d1
00019972                            
00019972                            loc_16898:
00019972 3341 0012                  		move.w	d1,obVelY(a1)
00019976 3342 0010                  		move.w	d2,obVelX(a1)
0001997A 4A40                       		tst.w	d0
0001997C 6A00                       		bpl.s	loc_168A6
0001997E 4440                       		neg.w	d0
00019980                            
00019980                            loc_168A6:
00019980 3140 002E                  		move.w	d0,$2E(a0)
00019984 4E75                       		rts	
00019986                            ; End of function sub_1681C
00019986                            
00019986                            ; ===========================================================================
00019986 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
0001998C 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
00019992 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
00019996 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
0001999C 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
000199A2 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
000199A8 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000199AE 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000199B4 0884 0298 0894             		dc.w $884, $298, $894
000199BA 0270 0894 0190             		dc.w $270, $894, $190
000199C0 0004 0894 0690             @type03:	dc.w 4,	$894, $690
000199C6 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
000199CC 1184 0498 1158             		dc.w $1184, $498, $1158
000199D2 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000199D8 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000199DE 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000199E4 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
000199EA 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
000199F0 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000199F6 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000199FC 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019A02 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019A08 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019A08 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019A0E                            
00019A0E                            		include	"_incObj\78 Caterkiller.asm"
00019A0E                            ; ---------------------------------------------------------------------------
00019A0E                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00019A0E                            ; ---------------------------------------------------------------------------
00019A0E                            
00019A0E                            Caterkiller:
00019A0E 7000                       		moveq	#0,d0
00019A10 1028 0024                  		move.b	obRoutine(a0),d0
00019A14 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
00019A18 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
00019A1C                            ; ===========================================================================
00019A1C 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
00019A1E 0000                       		dc.w Cat_Head-Cat_Index
00019A20 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019A22 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019A24 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019A26 0000                       		dc.w Cat_Delete-Cat_Index
00019A28 0000                       		dc.w loc_16CC0-Cat_Index
00019A2A                            
00019A2A =0000003C                  cat_parent:	equ $3C		; address of parent object
00019A2A                            ; ===========================================================================
00019A2A                            
00019A2A                            locret_16950:
00019A2A 4E75                       		rts	
00019A2C                            ; ===========================================================================
00019A2C                            
00019A2C                            Cat_Main:	; Routine 0
00019A2C 117C 0007 0016             		move.b	#7,obHeight(a0)
00019A32 117C 0008 0017             		move.b	#8,obWidth(a0)
00019A38 4EB9 0000 F93E             		jsr	(ObjectFall).l
00019A3E 4EB9 0001 7EF4             		jsr	(ObjFloorDist).l
00019A44 4A41                       		tst.w	d1
00019A46 6AE2                       		bpl.s	locret_16950
00019A48 D368 000C                  		add.w	d1,obY(a0)
00019A4C 4268 0012                  		clr.w	obVelY(a0)
00019A50 5428 0024                  		addq.b	#2,obRoutine(a0)
00019A54 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
00019A5C 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
00019A62 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
00019A68 6700                       		beq.s	@isscrapbrain
00019A6A 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
00019A70                            
00019A70                            	@isscrapbrain:
00019A70 0228 0003 0001             		andi.b	#3,obRender(a0)
00019A76 0028 0004 0001             		ori.b	#4,obRender(a0)
00019A7C 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
00019A82 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019A88 117C 0008 0014             		move.b	#8,obActWid(a0)
00019A8E 117C 000B 0020             		move.b	#$B,obColType(a0)
00019A94 3428 0008                  		move.w	obX(a0),d2
00019A98 7A0C                       		moveq	#$C,d5
00019A9A 0828 0000 0022             		btst	#0,obStatus(a0)
00019AA0 6700                       		beq.s	@noflip
00019AA2 4445                       		neg.w	d5
00019AA4                            
00019AA4                            	@noflip:
00019AA4 1C3C 0004                  		move.b	#4,d6
00019AA8 7600                       		moveq	#0,d3
00019AAA 7804                       		moveq	#4,d4
00019AAC 2448                       		movea.l	a0,a2
00019AAE 7202                       		moveq	#2,d1
00019AB0                            
00019AB0                            Cat_Loop:
00019AB0 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
00019AB6 6600 0000                  			bne.w	Cat_ChkGone
00019ABA 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
00019ABE 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
00019AC2 5406                       		addq.b	#2,d6		; alternate between the two
00019AC4 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00019ACA 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00019AD0 337C 0280 0018             		move.w	#$280,obPriority(a1)
00019AD6 137C 0008 0014             		move.b	#8,obActWid(a1)
00019ADC 137C 00CB 0020             		move.b	#$CB,obColType(a1)
00019AE2 D445                       		add.w	d5,d2
00019AE4 3342 0008                  		move.w	d2,obX(a1)
00019AE8 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019AEE 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019AF4 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
00019AFA 137C 0008 001A             		move.b	#8,obFrame(a1)
00019B00 234A 003C                  		move.l	a2,cat_parent(a1)
00019B04 1344 003C                  		move.b	d4,cat_parent(a1)
00019B08 5804                       		addq.b	#4,d4
00019B0A 2449                       		movea.l	a1,a2
00019B0C                            
00019B0C                            	@fail:
00019B0C 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
00019B10                            
00019B10 117C 0007 002A             		move.b	#7,$2A(a0)
00019B16 4228 003C                  		clr.b	cat_parent(a0)
00019B1A                            
00019B1A                            Cat_Head:	; Routine 2
00019B1A 4A28 0022                  		tst.b	obStatus(a0)
00019B1E 6B00 0000                  		bmi.w	loc_16C96
00019B22 7000                       		moveq	#0,d0
00019B24 1028 0025                  		move.b	ob2ndRout(a0),d0
00019B28 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
00019B2C 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
00019B30 1228 002B                  		move.b	$2B(a0),d1
00019B34 6A00                       		bpl.s	@display
00019B36 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019B3C 1028 0026                  		move.b	obAngle(a0),d0
00019B40 0240 007F                  		andi.w	#$7F,d0
00019B44 5828 0026                  		addq.b	#4,obAngle(a0)
00019B48 1031 0000                  		move.b	(a1,d0.w),d0
00019B4C 6A00                       		bpl.s	@animate
00019B4E 08A8 0007 002B             		bclr	#7,$2B(a0)
00019B54 6000                       		bra.s	@display
00019B56                            
00019B56                            	@animate:
00019B56 0201 0010                  		andi.b	#$10,d1
00019B5A D001                       		add.b	d1,d0
00019B5C 1140 001A                  		move.b	d0,obFrame(a0)
00019B60                            
00019B60                            	@display:
00019B7E 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00019B84                            
00019B84                            	Cat_ChkGone:
00019B84 45F8 FC00                  		lea	(v_objstate).w,a2
00019B88 7000                       		moveq	#0,d0
00019B8A 1028 0023                  		move.b	obRespawnNo(a0),d0
00019B8E 6700                       		beq.s	@delete
00019B90 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019B96                            
00019B96                            	@delete:
00019B96 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019B9C 4E75                       		rts	
00019B9E                            ; ===========================================================================
00019B9E                            
00019B9E                            Cat_Delete:	; Routine $A
00019B9E 4EF9 0000 F9CA             		jmp	(DeleteObject).l
00019BA4                            ; ===========================================================================
00019BA4 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00019BA6 0000                       		dc.w loc_16B02-Cat_Index2
00019BA8                            ; ===========================================================================
00019BA8                            
00019BA8                            @wait:
00019BA8 5328 002A                  		subq.b	#1,$2A(a0)
00019BAC 6B00                       		bmi.s	@move
00019BAE 4E75                       		rts	
00019BB0                            ; ===========================================================================
00019BB0                            
00019BB0                            @move:
00019BB0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019BB4 117C 0010 002A             		move.b	#$10,$2A(a0)
00019BBA 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019BC0 317C 0040 001C             		move.w	#$40,obAnim(a0)
00019BC6 0868 0004 002B             		bchg	#4,$2B(a0)
00019BCC 6600                       		bne.s	loc_16AFC
00019BCE 4268 0010                  		clr.w	obVelX(a0)
00019BD2 4468 001C                  		neg.w	obAnim(a0)
00019BD6                            
00019BD6                            loc_16AFC:
00019BD6 08E8 0007 002B             		bset	#7,$2B(a0)
00019BDC                            
00019BDC                            loc_16B02:
00019BDC 5328 002A                  		subq.b	#1,$2A(a0)
00019BE0 6B00                       		bmi.s	@loc_16B5E
00019BE2 4A68 0010                  			tst.w	obVelX(a0)
00019BE6 6700                       			beq.s	@notmoving
00019BE8 2428 0008                  			move.l	obX(a0),d2
00019BEC 2602                       			move.l	d2,d3
00019BEE 3028 0010                  		move.w	obVelX(a0),d0
00019BF2 0828 0000 0022             		btst	#0,obStatus(a0)
00019BF8 6700                       		beq.s	@noflip
00019BFA 4440                       		neg.w	d0
00019BFC                            
00019BFC                            	@noflip:
00019BFC 48C0                       		ext.l	d0
00019BFE E180                       		asl.l	#8,d0
00019C00 D480                       		add.l	d0,d2
00019C02 2142 0008                  		move.l	d2,obX(a0)
00019C06 4843                       			swap	d3
00019C08 B668 0008                  			cmp.w	obX(a0),d3
00019C0C 6700                       			beq.s	@notmoving
00019C0E 4EB9 0001 7EF4             			jsr	(ObjFloorDist).l
00019C14 0C41 FFF8                  			cmpi.w	#-8,d1
00019C18 6D00                       			blt.s	@loc_16B70
00019C1A 0C41 000C                  			cmpi.w	#$C,d1
00019C1E 6C00                       			bge.s	@loc_16B70
00019C20 D368 000C                  			add.w	d1,obY(a0)
00019C24 7000                       		moveq	#0,d0
00019C26 1028 003C                  		move.b	cat_parent(a0),d0
00019C2A 5228 003C                  		addq.b	#1,cat_parent(a0)
00019C2E 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019C34 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019C38                            
00019C38                            	@notmoving:
00019C38 4E75                       		rts	
00019C3A                            ; ===========================================================================
00019C3A                            
00019C3A                            @loc_16B5E:
00019C3A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019C3E 117C 0007 002A             		move.b	#7,$2A(a0)
00019C44 4268 0010                  			clr.w	obVelX(a0)
00019C48 4268 001C                  			clr.w	obAnim(a0)
00019C4C 4E75                       		rts	
00019C4E                            ; ===========================================================================
00019C4E                            
00019C4E                            @loc_16B70:
00019C4E 7000                       			moveq	#0,d0
00019C50 1028 003C                  			move.b	cat_parent(a0),d0
00019C54 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019C5A 4468 000A                  			neg.w	obX+2(a0)
00019C5E 6700                       			beq.s	@loc_1730A
00019C60 0828 0000 0022             			btst	#0,obStatus(a0)
00019C66 6700                       			beq.s	@loc_1730A
00019C68 5368 0008                  			subq.w	#1,obX(a0)
00019C6C 5228 003C                  			addq.b	#1,cat_parent(a0)
00019C70 7000                       			moveq	#0,d0
00019C72 1028 003C                  			move.b	cat_parent(a0),d0
00019C76 4230 002C                  			clr.b	$2C(a0,d0)
00019C7A                            	@loc_1730A:
00019C7A 0868 0000 0022             			bchg	#0,obStatus(a0)
00019C80 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019C86 5228 003C                  		addq.b	#1,cat_parent(a0)
00019C8A 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019C90 4E75                       		rts	
00019C92                            ; ===========================================================================
00019C92                            
00019C92                            Cat_BodySeg2:	; Routine 6
00019C92 2268 003C                  		movea.l	cat_parent(a0),a1
00019C96 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019C9C 6A00                       		bpl.s	Cat_BodySeg1
00019C9E 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019CA4 1028 0026                  		move.b	obAngle(a0),d0
00019CA8 0240 007F                  		andi.w	#$7F,d0
00019CAC 5828 0026                  		addq.b	#4,obAngle(a0)
00019CB0 4A31 0004                  		tst.b	4(a1,d0.w)
00019CB4 6A00                       		bpl.s	Cat_AniBody
00019CB6 5828 0026                  		addq.b	#4,obAngle(a0)
00019CBA                            
00019CBA                            Cat_AniBody:
00019CBA 1031 0000                  		move.b	(a1,d0.w),d0
00019CBE 5000                       		addq.b	#8,d0
00019CC0 1140 001A                  		move.b	d0,obFrame(a0)
00019CC4                            
00019CC4                            Cat_BodySeg1:	; Routine 4, 8
00019CC4 2268 003C                  		movea.l	cat_parent(a0),a1
00019CC8 4A28 0022                  		tst.b	obStatus(a0)
00019CCC 6B00 0000                  		bmi.w	loc_16C90
00019CD0 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019CD6 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019CDC 6700 0000                  		beq.w	loc_16C64
00019CE0 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019CE6 3029 0010                  		move.w	obVelX(a1),d0
00019CEA D068 001C                  			add.w	obAnim(a0),d0
00019CEE 3140 0010                  		move.w	d0,obVelX(a0)
00019CF2 2428 0008                  		move.l	obX(a0),d2
00019CF6 2602                       		move.l	d2,d3
00019CF8 3028 0010                  		move.w	obVelX(a0),d0
00019CFC 0828 0000 0022             		btst	#0,obStatus(a0)
00019D02 6700                       		beq.s	loc_16C0C
00019D04 4440                       		neg.w	d0
00019D06                            
00019D06                            loc_16C0C:
00019D06 48C0                       		ext.l	d0
00019D08 E180                       		asl.l	#8,d0
00019D0A D480                       		add.l	d0,d2
00019D0C 2142 0008                  		move.l	d2,obX(a0)
00019D10 4843                       		swap	d3
00019D12 B668 0008                  		cmp.w	obX(a0),d3
00019D16 6700                       		beq.s	loc_16C64
00019D18 7000                       		moveq	#0,d0
00019D1A 1028 003C                  		move.b	cat_parent(a0),d0
00019D1E 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019D22 0C01 0080                  		cmpi.b	#$80,d1
00019D26 6600                       		bne.s	loc_16C50
00019D28 1181 002C                  			move.b	d1,$2C(a0,d0)
00019D2C 4468 000A                  			neg.w	obX+2(a0)
00019D30 6700                       			beq.s	locj_173E4
00019D32 0828 0000 0022             			btst	#0,obStatus(a0)
00019D38 6700                       			beq.s	locj_173E4
00019D3A 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019D40 6600                       			bne.s	locj_173E4
00019D42 5368 0008                  			subq.w	#1,obX(a0)
00019D46 5228 003C                  			addq.b	#1,cat_parent(a0)
00019D4A 7000                       			moveq	#0,d0
00019D4C 1028 003C                  			move.b	cat_parent(a0),d0
00019D50 4230 002C                  			clr.b	$2C(a0,d0)
00019D54                            	locj_173E4:
00019D54 0868 0000 0022             		bchg	#0,obStatus(a0)
00019D5A 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019D60 5228 003C                  		addq.b	#1,cat_parent(a0)
00019D64 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019D6A 6000                       		bra.s	loc_16C64
00019D6C                            ; ===========================================================================
00019D6C                            
00019D6C                            loc_16C50:
00019D6C 4881                       		ext.w	d1
00019D6E D368 000C                  		add.w	d1,obY(a0)
00019D72 5228 003C                  		addq.b	#1,cat_parent(a0)
00019D76 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019D7C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019D80                            
00019D80                            loc_16C64:
00019D80 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019D86 6700                       		beq.s	loc_16C90
00019D88 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019D8C 6700                       		beq.s	loc_16C7C
00019D8E 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019D94 6600                       		bne.s	loc_16C82
00019D96                            
00019D96                            loc_16C7C:
00019D96 4229 0020                  		clr.b    $20(a1)
00019D9A 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019DA0                            
00019DA0                            loc_16C82:
00019DA0 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00019DA6                            
00019DA6                            ; ===========================================================================
00019DA6 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019DAE                            ; ===========================================================================
00019DAE                            
00019DAE                            loc_16C90:
00019DAE 08E9 0007 0022             		bset	#7,obStatus(a1)
00019DB4                            
00019DB4                            loc_16C96:
00019DB4 7000                       		moveq	#0,d0
00019DB6 1028 0024                  		move.b	obRoutine(a0),d0
00019DBA 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019DBE 0828 0000 0022             		btst	#0,obStatus(a0)
00019DC4 6700                       		beq.s	loc_16CAA
00019DC6 4440                       		neg.w	d0
00019DC8                            
00019DC8                            loc_16CAA:
00019DC8 3140 0010                  		move.w	d0,obVelX(a0)
00019DCC 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019DD2 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019DD8 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019DDE                            
00019DDE                            loc_16CC0:	; Routine $C
00019DDE 4EB9 0000 F93E             		jsr	(ObjectFall).l
00019DE4 4A68 0012                  		tst.w	obVelY(a0)
00019DE8 6B00                       		bmi.s	loc_16CE0
00019DEA 4EB9 0001 7EF4             		jsr	(ObjFloorDist).l
00019DF0 4A41                       		tst.w	d1
00019DF2 6A00                       		bpl.s	loc_16CE0
00019DF4 D368 000C                  		add.w	d1,obY(a0)
00019DF8 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019DFE                            
00019DFE                            loc_16CE0:
00019DFE 4A28 0001                  		tst.b	obRender(a0)
00019E02 6A00 FD80                  		bpl.w	Cat_ChkGone
00019E06 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00019E06 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00019E0C                            		include	"_anim\Caterkiller.asm"
00019E0C                            ; ---------------------------------------------------------------------------
00019E0C                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019E0C                            ; ---------------------------------------------------------------------------
00019E0C 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019E1C 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019E2C 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019E3C 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019E4C 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019E5C 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019E6C 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019E7C 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019E8C                            		even
00019E8C                            		even
00019E8C                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019E8C                            ; ---------------------------------------------------------------------------
00019E8C                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019E8C                            ; ---------------------------------------------------------------------------
00019E8C                            Map_Cat_internal:
00019E8C 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019E8E 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019E90 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019E92 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019E94 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019E96 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019E98 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019E9A 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019E9C 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019E9E 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019EA0 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019EA2 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019EA4 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019EA6 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019EA8 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019EAA 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019EAC 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019EAE 0000                       		dc.w byte_16E04-Map_Cat_internal
00019EB0 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019EB2 0000                       		dc.w byte_16E10-Map_Cat_internal
00019EB4 0000                       		dc.w byte_16E16-Map_Cat_internal
00019EB6 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019EB8 0000                       		dc.w byte_16E22-Map_Cat_internal
00019EBA 0000                       		dc.w byte_16E28-Map_Cat_internal
00019EBC 01                         byte_16D9E:	dc.b 1
00019EBD F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019EC2 01                         byte_16DA4:	dc.b 1
00019EC3 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019EC8 01                         byte_16DAA:	dc.b 1
00019EC9 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019ECE 01                         byte_16DB0:	dc.b 1
00019ECF EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019ED4 01                         byte_16DB6:	dc.b 1
00019ED5 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019EDA 01                         byte_16DBC:	dc.b 1
00019EDB ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019EE0 01                         byte_16DC2:	dc.b 1
00019EE1 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019EE6 01                         byte_16DC8:	dc.b 1
00019EE7 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019EEC 01                         byte_16DCE:	dc.b 1
00019EED F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019EF2 01                         byte_16DD4:	dc.b 1
00019EF3 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019EF8 01                         byte_16DDA:	dc.b 1
00019EF9 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019EFE 01                         byte_16DE0:	dc.b 1
00019EFF F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019F04 01                         byte_16DE6:	dc.b 1
00019F05 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019F0A 01                         byte_16DEC:	dc.b 1
00019F0B F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019F10 01                         byte_16DF2:	dc.b 1
00019F11 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019F16 01                         byte_16DF8:	dc.b 1
00019F17 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019F1C 01                         byte_16DFE:	dc.b 1
00019F1D F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019F22 01                         byte_16E04:	dc.b 1
00019F23 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019F28 01                         byte_16E0A:	dc.b 1
00019F29 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019F2E 01                         byte_16E10:	dc.b 1
00019F2F EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019F34 01                         byte_16E16:	dc.b 1
00019F35 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019F3A 01                         byte_16E1C:	dc.b 1
00019F3B ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019F40 01                         byte_16E22:	dc.b 1
00019F41 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019F46 01                         byte_16E28:	dc.b 1
00019F47 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019F4C                            		even
00019F4C                            		even
00019F4C                            
00019F4C                            		include	"_incObj\79 Lamppost.asm"
00019F4C                            ; ---------------------------------------------------------------------------
00019F4C                            ; Object 79 - lamppost
00019F4C                            ; ---------------------------------------------------------------------------
00019F4C                            
00019F4C                            Lamppost:
00019F4C 7000                       		moveq	#0,d0
00019F4E 1028 0024                  		move.b	obRoutine(a0),d0
00019F52 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019F56 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019F5A 4EF9 0001 1900             		jmp	(RememberState).l
00019F60                            ; ===========================================================================
00019F60 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019F62 0000                       		dc.w Lamp_Blue-Lamp_Index
00019F64 0000                       		dc.w Lamp_Finish-Lamp_Index
00019F66 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019F68                            
00019F68 =00000030                  lamp_origX:	equ $30		; original x-axis position
00019F68 =00000032                  lamp_origY:	equ $32		; original y-axis position
00019F68 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019F68                            ; ===========================================================================
00019F68                            
00019F68                            Lamp_Main:	; Routine 0
00019F68 5428 0024                  		addq.b	#2,obRoutine(a0)
00019F6C 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019F74 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00019F7A 117C 0004 0001             		move.b	#4,obRender(a0)
00019F80 117C 0008 0014             		move.b	#8,obActWid(a0)
00019F86 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019F8C 45F8 FC00                  		lea	(v_objstate).w,a2
00019F90 7000                       		moveq	#0,d0
00019F92 1028 0023                  		move.b	obRespawnNo(a0),d0
00019F96 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019F9C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019FA2 6600                       		bne.s	@red
00019FA4 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019FA8 0201 007F                  		andi.b	#$7F,d1
00019FAC 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019FB0 0202 007F                  		andi.b	#$7F,d2
00019FB4 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019FB6 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019FB8                            
00019FB8                            @red:
00019FB8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019FBE 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019FC4 117C 0003 001A             		move.b	#3,obFrame(a0)
00019FCA 4E75                       		rts	
00019FCC                            
00019FCC                            ; ===========================================================================
00019FCC                            
00019FCC                            Lamp_Blue:	; Routine 2
00019FCC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00019FD0 6600 0000                  		bne.w	@donothing	; if yes, branch
00019FD4 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019FD8 6B00 0000                  		bmi.w	@donothing
00019FDC 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019FE0 0201 007F                  		andi.b	#$7F,d1
00019FE4 1428 0028                  		move.b	obSubtype(a0),d2
00019FE8 0202 007F                  		andi.b	#$7F,d2
00019FEC B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019FEE 6500                       		bcs.s	@chkhit		; if yes, branch
00019FF0 45F8 FC00                  		lea	(v_objstate).w,a2
00019FF4 7000                       		moveq	#0,d0
00019FF6 1028 0023                  		move.b	obRespawnNo(a0),d0
00019FFA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A000 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001A006 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A00C 6000 0000                  		bra.w	@donothing
0001A010                            ; ===========================================================================
0001A010                            
0001A010                            @chkhit:
0001A010 3038 D008                  		move.w	(v_player+obX).w,d0
0001A014 9068 0008                  		sub.w	obX(a0),d0
0001A018 5040                       		addq.w	#8,d0
0001A01A 0C40 0010                  		cmpi.w	#$10,d0
0001A01E 6400 0000                  		bcc.w	@donothing
0001A022 3038 D00C                  		move.w	(v_player+obY).w,d0
0001A026 9068 000C                  		sub.w	obY(a0),d0
0001A02A 0640 0040                  		addi.w	#$40,d0
0001A02E 0C40 0068                  		cmpi.w	#$68,d0
0001A032 6400                       		bcc.s	@donothing
0001A034                            
0001A03E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A042 4EB9 0000 FE16             		jsr	(FindFreeObj).l
0001A048 6600                       		bne.s	@fail
0001A04A 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001A04E 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001A054 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001A05A 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001A060 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001A066 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001A06E 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001A074 137C 0004 0001             		move.b	#4,obRender(a1)
0001A07A 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A080 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001A086 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001A08C 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001A092                            
0001A092                            	@fail:
0001A092 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001A098 6100 0000                  		bsr.w	Lamp_StoreInfo
0001A09C 45F8 FC00                  		lea	(v_objstate).w,a2
0001A0A0 7000                       		moveq	#0,d0
0001A0A2 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A0A6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A0AC                            
0001A0AC                            	@donothing:
0001A0AC 4E75                       		rts	
0001A0AE                            ; ===========================================================================
0001A0AE                            
0001A0AE                            Lamp_Finish:	; Routine 4	
0001A0AE 4E75                       		rts	
0001A0B0                            ; ===========================================================================
0001A0B0                            
0001A0B0                            Lamp_Twirl:	; Routine 6
0001A0B0 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001A0B4 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001A0B6 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A0BC                            
0001A0BC                            	@continue:
0001A0BC 1028 0026                  		move.b	obAngle(a0),d0
0001A0C0 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001A0C6 0400 0040                  		subi.b	#$40,d0
0001A0CA 4EB9 0000 3A36             		jsr	(CalcSine).l
0001A0D0 C3FC 0C00                  		muls.w	#$C00,d1
0001A0D4 4841                       		swap	d1
0001A0D6 D268 0030                  		add.w	lamp_origX(a0),d1
0001A0DA 3141 0008                  		move.w	d1,obX(a0)
0001A0DE C1FC 0C00                  		muls.w	#$C00,d0
0001A0E2 4840                       		swap	d0
0001A0E4 D068 0032                  		add.w	lamp_origY(a0),d0
0001A0E8 3140 000C                  		move.w	d0,obY(a0)
0001A0EC 4E75                       		rts	
0001A0EE                            ; ===========================================================================
0001A0EE                            ; ---------------------------------------------------------------------------
0001A0EE                            ; Subroutine to	store information when you hit a lamppost
0001A0EE                            ; ---------------------------------------------------------------------------
0001A0EE                            
0001A0EE                            Lamp_StoreInfo:
0001A0EE 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001A0F4 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001A0FA 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001A100 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001A106 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001A10C 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001A112 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001A118 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001A11E 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001A124 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001A12A 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001A130 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001A136 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001A13C 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001A142 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001A148 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001A14E 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001A154 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001A15A 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001A160 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001A166 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001A16C 4E75                       		rts	
0001A16E                            
0001A16E                            ; ---------------------------------------------------------------------------
0001A16E                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001A16E                            ; ---------------------------------------------------------------------------
0001A16E                            
0001A16E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A16E                            
0001A16E                            
0001A16E                            Lamp_LoadInfo:
0001A16E 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001A174 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001A17A 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001A180 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001A186 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001A18C 4278 FE20                  		clr.w	(v_rings).w
0001A190 4238 FE1B                  		clr.b	(v_lifecount).w
0001A194 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001A19A 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001A1A0 5338 FE24                  		subq.b	#1,(v_timesec).w
0001A1A4 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001A1AA 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A1B0 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001A1B6 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001A1BC 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001A1C2 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001A1C8 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001A1CE 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001A1D4 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001A1DA 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001A1E0 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001A1E6 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001A1EC 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001A1F2 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001A1F8 6600                       		bne.s	@notlabyrinth	; if not, branch
0001A1FA                            
0001A1FA 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001A200 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A206 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001A20C                            
0001A20C                            	@notlabyrinth:
0001A20C 4A38 FE30                  		tst.b	(v_lastlamp).w
0001A210 6A00                       		bpl.s	locret_170F6
0001A212 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A216 0440 00A0                  		subi.w	#$A0,d0
0001A21A 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001A21E                            
0001A21E                            locret_170F6:
0001A21E 4E75                       		rts	
0001A21E 4E75                       		rts	
0001A220                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001A220                            ; --------------------------------------------------------------------------------
0001A220                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A220                            ; --------------------------------------------------------------------------------
0001A220                            
0001A220                            SME_JfaKr:	
0001A220 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001A224 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A228 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A22A 0A                         SME_JfaKr_A:	dc.b $A	
0001A22B E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A230 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A235 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A23A D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A23F F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A244 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A249 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A24E 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A253 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A258 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A25D 08                         SME_JfaKr_3D:	dc.b 8	
0001A25E E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A263 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A268 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A26D F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A272 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A277 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A27C 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A281 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A286 02                         SME_JfaKr_66:	dc.b 2	
0001A287 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A28C F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A291 0A                         SME_JfaKr_71:	dc.b $A	
0001A292 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A297 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A29C F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A2A1 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A2A6 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A2AB 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A2B0 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A2B5 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A2BA D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A2BF D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A2C4 0A                         SME_JfaKr_A4:	dc.b $A	
0001A2C5 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A2CA E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A2CF F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A2D4 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A2D9 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A2DE 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A2E3 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A2E8 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A2ED D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A2F2 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A2F8 00                         		even
0001A2F8 00                         		even
0001A2F8                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A2F8                            ; ---------------------------------------------------------------------------
0001A2F8                            ; Object 7D - hidden points at the end of a level
0001A2F8                            ; ---------------------------------------------------------------------------
0001A2F8                            
0001A2F8                            HiddenBonus:
0001A2F8 7000                       		moveq	#0,d0
0001A2FA 1028 0024                  		move.b	obRoutine(a0),d0
0001A2FE 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A302 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A306                            ; ===========================================================================
0001A306 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A308 0000                       		dc.w Bonus_Display-Bonus_Index
0001A30A                            
0001A30A =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A30A                            ; ===========================================================================
0001A30A                            
0001A30A                            Bonus_Main:	; Routine 0
0001A30A 7410                       		moveq	#$10,d2
0001A30C 3602                       		move.w	d2,d3
0001A30E D643                       		add.w	d3,d3
0001A310 43F8 D000                  		lea	(v_player).w,a1
0001A314 3029 0008                  		move.w	obX(a1),d0
0001A318 9068 0008                  		sub.w	obX(a0),d0
0001A31C D042                       		add.w	d2,d0
0001A31E B043                       		cmp.w	d3,d0
0001A320 6400                       		bcc.s	bonu_chkdel
0001A322 3229 000C                  		move.w	obY(a1),d1
0001A326 9268 000C                  		sub.w	obY(a0),d1
0001A32A D242                       		add.w	d2,d1
0001A32C B243                       		cmp.w	d3,d1
0001A32E 6400                       		bcc.s	bonu_chkdel
0001A330 4A78 FE08                  		tst.w	(v_debuguse).w
0001A334 6600                       		bne.s	bonu_chkdel
0001A336 4A38 F7CD                  		tst.b	(f_bigring).w
0001A33A 6600                       		bne.s	bonu_chkdel
0001A33C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A340 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A348 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A34E 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A354 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A35A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A360 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A366 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A376 7000                       		moveq	#0,d0
0001A378 1028 0028                  		move.b	obSubtype(a0),d0
0001A37C D040                       		add.w	d0,d0
0001A37E 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A382 4EB9 0000 0000             		jsr	(AddPoints).l
0001A388                            
0001A388                            bonu_chkdel:
0001A3A4 4E75                       		rts	
0001A3A6                            
0001A3A6                            	@delete:
0001A3A6 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001A3AC                            
0001A3AC                            ; ===========================================================================
0001A3AC 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A3AE 03E8                       		dc.w 1000
0001A3B0 0064                       		dc.w 100
0001A3B2 000A                       		dc.w 10
0001A3B4                            ; ===========================================================================
0001A3B4                            
0001A3B4                            Bonus_Display:	; Routine 2
0001A3B4 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A3B8 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A3D6 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001A3DC                            
0001A3DC                            Bonus_Display_Delete:	
0001A3DC 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001A3DC 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001A3E2                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A3E2                            ; ---------------------------------------------------------------------------
0001A3E2                            ; Sprite mappings - hidden points at the end of	a level
0001A3E2                            ; ---------------------------------------------------------------------------
0001A3E2                            Map_Bonus_internal:
0001A3E2 0000                       		dc.w @blank-Map_Bonus_internal
0001A3E4 0000                       		dc.w @10000-Map_Bonus_internal
0001A3E6 0000                       		dc.w @1000-Map_Bonus_internal
0001A3E8 0000                       		dc.w @100-Map_Bonus_internal
0001A3EA 00                         @blank:		dc.b 0
0001A3EB 01                         @10000:		dc.b 1
0001A3EC F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A3F1 01                         @1000:		dc.b 1
0001A3F2 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A3F7 01                         @100:		dc.b 1
0001A3F8 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A3FE 00                         		even
0001A3FE 00                         		even
0001A3FE                            
0001A3FE                            		include	"_incObj\8A Credits.asm"
0001A3FE                            ; ---------------------------------------------------------------------------
0001A3FE                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A3FE                            ; ---------------------------------------------------------------------------
0001A3FE                            
0001A3FE                            CreditsText:
0001A3FE 7000                       		moveq	#0,d0
0001A400 1028 0024                  		move.b	obRoutine(a0),d0
0001A404 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A408 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A40C                            ; ===========================================================================
0001A40C 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A40E 0000                       		dc.w Cred_Display-Cred_Index
0001A410                            ; ===========================================================================
0001A410                            
0001A410                            Cred_Main:	; Routine 0
0001A410 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A414 317C 0120 0008             		move.w	#$120,obX(a0)
0001A41A 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A420 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A428 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A42E 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A432 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A436 117C 0000 0001             		move.b	#0,obRender(a0)
0001A43C 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A442                            
0001A442 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A448 6600                       		bne.s	Cred_Display	; if not, branch
0001A44A                            
0001A44A 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A450 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A456 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A45A 6700                       		beq.s	Cred_Display	; if not, branch
0001A45C 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A462 6600                       		bne.s	Cred_Display	; if not, branch
0001A464 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A46A 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A470 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001A476                            ; ===========================================================================
0001A476                            
0001A476                            Cred_Display:	; Routine 2
0001A476 4EF9 0000 F98A             		jmp	DisplaySprite
0001A476 4EF9 0000 F98A             		jmp	DisplaySprite
0001A47C                            Map_Cred:	include	"_maps\Credits.asm"
0001A47C                            ; ---------------------------------------------------------------------------
0001A47C                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A47C                            ; ---------------------------------------------------------------------------
0001A47C                            Map_Cred_internal:
0001A47C 0000                       		dc.w @staff-Map_Cred_internal
0001A47E 0000                       		dc.w @gameplan-Map_Cred_internal
0001A480 0000                       		dc.w @program-Map_Cred_internal
0001A482 0000                       		dc.w @character-Map_Cred_internal
0001A484 0000                       		dc.w @design-Map_Cred_internal
0001A486 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A488 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A48A 0000                       		dc.w @thanks-Map_Cred_internal
0001A48C 0000                       		dc.w @presentedby-Map_Cred_internal
0001A48E 0000                       		dc.w @tryagain-Map_Cred_internal
0001A490 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A492 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A493 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A498 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A49D F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A4A2 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A4A7 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A4AC F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A4B1 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A4B6 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A4BB F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A4C0 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A4C5 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A4CA F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A4CF F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A4D4 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A4D9 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A4DA 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A4DF 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A4E4 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A4E9 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A4EE 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A4F3 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A4F8 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A4FD 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A502 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A507                            
0001A507 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A50C B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A511 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A516 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A51B B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A520 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A521 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A526 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A52B 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A530 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A535 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A53A 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A53F 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A544                            
0001A544 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A549 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A54E B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A553 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A558 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A55D B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A562 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A567 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A56C                            
0001A56C D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A571 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A576                            
0001A576 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A57B D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A580 D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A585 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A58A D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A58F D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A594                            
0001A594 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A599 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A59E F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A5A3 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A5A4 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A5A9 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A5AE 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A5B3                            
0001A5B3 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A5B8 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A5BD B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A5C2 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A5C7 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A5CC 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A5CD 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A5D2 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A5D7 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A5DC 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A5E1 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A5E6 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A5EB                            
0001A5EB B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A5F0 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A5F5 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A5FA B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A5FF B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A604 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A605 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A60A 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A60F 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A614 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A619 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A61E 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A623 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A628 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A62D 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A632 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A637                            
0001A637 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A63C B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A641 B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A646 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A64B B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A650 B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A655 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A65A B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A65F                            
0001A65F D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A664 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A669 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A66E D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A673 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A678 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A67D D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A682 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A687 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A68C D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A691 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A692 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A697 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A69C D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A6A1 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A6A6 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A6AB D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A6B0 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A6B5 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A6BA D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A6BF D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A6C4 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A6C9 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A6CE 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A6D3 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A6D8 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A6DD 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A6E2 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A6E7 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A6EC 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A6F1 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A6F6 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A6FB 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A700 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A705 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A706 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A70B 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A710 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A715 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A71A 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A71F 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A724 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A729 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A72E                            
0001A72E B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A733 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A738 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A73D B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A742 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A747 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A74C                            
0001A74C D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A751 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A756 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A75B 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A75C 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A761 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A766 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A76B 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A770 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A775 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A77A 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A77F 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A784 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A789                            
0001A789 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A78E B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A793                            
0001A793 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A798 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A79D D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A7A2 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A7A7 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A7AC 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A7AD 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A7B2 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A7B7 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A7BC 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A7C1 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A7C6 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A7CB 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A7D0 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A7D5 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A7D6 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A7DB E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A7E0 E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A7E5 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A7EA E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A7EF E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A7F4                            
0001A7F4 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A7F9 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A7FE 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A803 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A808 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A80D 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A812 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A817 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A81C                            		even
0001A81C                            		even
0001A81C                            
0001A81C                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A81C                            ; ---------------------------------------------------------------------------
0001A81C                            ; Object 3D - Eggman (GHZ)
0001A81C                            ; ---------------------------------------------------------------------------
0001A81C                            
0001A81C                            BossGreenHill:
0001A81C 7000                       		moveq	#0,d0
0001A81E 1028 0024                  		move.b	obRoutine(a0),d0
0001A822 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A826 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A82A                            ; ===========================================================================
0001A82A 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A82C 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A82E 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A830 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A832                            
0001A832 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A834 0401                       		dc.b 4,	1
0001A836 0607                       		dc.b 6,	7
0001A838                            ; ===========================================================================
0001A838                            
0001A838                            BGHZ_Main:	; Routine 0
0001A838 45F9 0001 A832             		lea	(BGHZ_ObjData).l,a2
0001A83E 2248                       		movea.l	a0,a1
0001A840 7202                       		moveq	#2,d1
0001A842 6000                       		bra.s	BGHZ_LoadBoss
0001A844                            ; ===========================================================================
0001A844                            
0001A844                            BGHZ_Loop:
0001A844 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001A84A 6600                       		bne.s	loc_17772
0001A84C                            
0001A84C                            BGHZ_LoadBoss:
0001A84C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A850 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A854 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A85A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A860 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A868 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A86E 137C 0004 0001             		move.b	#4,obRender(a1)
0001A874 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A87A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A880 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A884 2348 0034                  		move.l	a0,$34(a1)
0001A888 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A88C                            
0001A88C                            loc_17772:
0001A88C 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A892 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A898 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A89E 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A8A4                            
0001A8A4                            
0001A8A4                            BGHZ_ShipMain:	; Routine 2
0001A8A4 7000                       		moveq	#0,d0
0001A8A6 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A8AA 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A8AE 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A8B2 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A8B8 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001A8BE 1028 0022                  		move.b	obStatus(a0),d0
0001A8C2 0200 0003                  		andi.b	#3,d0
0001A8C6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A8CC 8128 0001                  		or.b	d0,obRender(a0)
0001A8D0 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001A8D6                            ; ===========================================================================
0001A8D6 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A8D8 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A8DA 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A8DC 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A8DE 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A8E0 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A8E2 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A8E4                            ; ===========================================================================
0001A8E4                            
0001A8E4                            BGHZ_ShipStart:
0001A8E4 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A8EA 6100 0000                  		bsr.w	BossMove
0001A8EE 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A8F4 6600                       		bne.s	loc_177E6
0001A8F6 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A8FC 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A900                            
0001A900                            loc_177E6:
0001A900 1028 003F                  		move.b	$3F(a0),d0
0001A904 4EB9 0000 3A36             		jsr	(CalcSine).l
0001A90A EC40                       		asr.w	#6,d0
0001A90C D068 0038                  		add.w	$38(a0),d0
0001A910 3140 000C                  		move.w	d0,obY(a0)
0001A914 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A91A 5428 003F                  		addq.b	#2,$3F(a0)
0001A91E 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A924 6400                       		bcc.s	locret_1784A
0001A926 4A28 0022                  		tst.b	obStatus(a0)
0001A92A 6B00                       		bmi.s	loc_1784C
0001A92C 4A28 0020                  		tst.b	obColType(a0)
0001A930 6600                       		bne.s	locret_1784A
0001A932 4A28 003E                  		tst.b	$3E(a0)
0001A936 6600                       		bne.s	BGHZ_ShipFlash
0001A938 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A948                            
0001A948                            BGHZ_ShipFlash:
0001A948 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A94C 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A94E 4A51                       		tst.w	(a1)
0001A950 6600                       		bne.s	loc_1783C
0001A952 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A956                            
0001A956                            loc_1783C:
0001A956 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A958 5328 003E                  		subq.b	#1,$3E(a0)
0001A95C 6600                       		bne.s	locret_1784A
0001A95E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A964                            
0001A964                            locret_1784A:
0001A964 4E75                       		rts	
0001A966                            ; ===========================================================================
0001A966                            
0001A966                            loc_1784C:
0001A966 7064                       		moveq	#100,d0
0001A968 6100 0000                  		bsr.w	AddPoints
0001A96C 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A972 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A978 4E75                       		rts	
0001A978 4E75                       		rts	
0001A97A                            
0001A97A                            ; ---------------------------------------------------------------------------
0001A97A                            ; Defeated boss	subroutine
0001A97A                            ; ---------------------------------------------------------------------------
0001A97A                            
0001A97A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A97A                            
0001A97A                            
0001A97A                            BossDefeated:
0001A97A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A97E 0200 0007                  		andi.b	#7,d0
0001A982 6600                       		bne.s	locret_178A2
0001A984 4EB9 0000 FE16             		jsr	(FindFreeObj).l
0001A98A 6600                       		bne.s	locret_178A2
0001A98C 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A990 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A996 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A99C 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001A9A2 3200                       		move.w	d0,d1
0001A9A4 7200                       		moveq	#0,d1
0001A9A6 1200                       		move.b	d0,d1
0001A9A8 E409                       		lsr.b	#2,d1
0001A9AA 0441 0020                  		subi.w	#$20,d1
0001A9AE D369 0008                  		add.w	d1,obX(a1)
0001A9B2 E048                       		lsr.w	#8,d0
0001A9B4 E608                       		lsr.b	#3,d0
0001A9B6 D169 000C                  		add.w	d0,obY(a1)
0001A9BA                            
0001A9BA                            locret_178A2:
0001A9BA 4E75                       		rts	
0001A9BC                            ; End of function BossDefeated
0001A9BC                            
0001A9BC                            ; ---------------------------------------------------------------------------
0001A9BC                            ; Subroutine to	move a boss
0001A9BC                            ; ---------------------------------------------------------------------------
0001A9BC                            
0001A9BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A9BC                            
0001A9BC                            
0001A9BC                            BossMove:
0001A9BC 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001A9C2 E188                       		lsl.l	#8,d0
0001A9C4 D1A8 0030                  		add.l	d0,$30(a0)
0001A9C8 E18A                       		lsl.l	#8,d2
0001A9CA D5A8 0038                  		add.l	d2,$38(a0)
0001A9CE 4E75                       		rts
0001A9D0                            ; End of function BossMove
0001A9D0                            
0001A9D0                            ; ===========================================================================
0001A9D0                            
0001A9D0                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001A9D0                            
0001A9D0                            BGHZ_MakeBall:
0001A9D0 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001A9D6 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A9DC 6100 FFDE                  		bsr.w	BossMove
0001A9E0 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A9E6 6600                       		bne.s	loc_17916
0001A9E8 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A9EE 317C 0000 0012             		move.w	#0,obVelY(a0)
0001A9F4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A9F8 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001A9FE 6600                       		bne.s	loc_17910
0001AA00 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001AA04 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001AA0A 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001AA10 2348 0034                  		move.l	a0,$34(a1)
0001AA14                            
0001AA14                            loc_17910:
0001AA14 317C 0077 003C             		move.w	#$77,$3C(a0)
0001AA1A                            
0001AA1A                            loc_17916:
0001AA1A 6000 FEE4                  		bra.w	loc_177E6
0001AA1E                            ; ===========================================================================
0001AA1E                            
0001AA1E                            BGHZ_ShipMove:
0001AA1E 5368 003C                  		subq.w	#1,$3C(a0)
0001AA22 6A00                       		bpl.s	BGHZ_Reverse
0001AA24 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AA28 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AA2E 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001AA34 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001AA3A 6600                       		bne.s	BGHZ_Reverse
0001AA3C 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001AA42 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001AA48                            
0001AA48                            BGHZ_Reverse:
0001AA48 0828 0000 0022             		btst	#0,obStatus(a0)
0001AA4E 6600                       		bne.s	loc_17950
0001AA50 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001AA54                            
0001AA54                            loc_17950:
0001AA54 6000 FEAA                  		bra.w	loc_177E6
0001AA58                            ; ===========================================================================
0001AA58                            
0001AA58                            loc_17954:
0001AA58 5368 003C                  		subq.w	#1,$3C(a0)
0001AA5C 6B00                       		bmi.s	loc_17960
0001AA5E 6100 FF5C                  		bsr.w	BossMove
0001AA62 6000                       		bra.s	loc_17976
0001AA64                            ; ===========================================================================
0001AA64                            
0001AA64                            loc_17960:
0001AA64 0868 0000 0022             		bchg	#0,obStatus(a0)
0001AA6A 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AA70 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001AA74 317C 0000 0010             		move.w	#0,obVelX(a0)
0001AA7A                            
0001AA7A                            loc_17976:
0001AA7A 6000 FE84                  		bra.w	loc_177E6
0001AA7E                            ; ===========================================================================
0001AA7E                            
0001AA7E                            loc_1797A:
0001AA7E 5368 003C                  		subq.w	#1,$3C(a0)
0001AA82 6B00                       		bmi.s	loc_17984
0001AA84 6000 FEF4                  		bra.w	BossDefeated
0001AA88                            ; ===========================================================================
0001AA88                            
0001AA88                            loc_17984:
0001AA88 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AA8E 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001AA94 4268 0010                  		clr.w	obVelX(a0)
0001AA98 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AA9C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001AAA2 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001AAA6 6600                       		bne.s	locret_179AA
0001AAA8 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001AAAE                            
0001AAAE                            locret_179AA:
0001AAAE 4E75                       		rts	
0001AAB0                            ; ===========================================================================
0001AAB0                            
0001AAB0                            loc_179AC:
0001AAB0 5268 003C                  		addq.w	#1,$3C(a0)
0001AAB4 6700                       		beq.s	loc_179BC
0001AAB6 6A00                       		bpl.s	loc_179C2
0001AAB8 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001AABE 6000                       		bra.s	loc_179EE
0001AAC0                            ; ===========================================================================
0001AAC0                            
0001AAC0                            loc_179BC:
0001AAC0 4268 0012                  		clr.w	obVelY(a0)
0001AAC4 6000                       		bra.s	loc_179EE
0001AAC6                            ; ===========================================================================
0001AAC6                            
0001AAC6                            loc_179C2:
0001AAC6 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001AACC 6500                       		bcs.s	loc_179DA
0001AACE 6700                       		beq.s	loc_179E0
0001AAD0 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001AAD6 6500                       		bcs.s	loc_179EE
0001AAD8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AADC 6000                       		bra.s	loc_179EE
0001AADE                            ; ===========================================================================
0001AADE                            
0001AADE                            loc_179DA:
0001AADE 5168 0012                  		subq.w	#8,obVelY(a0)
0001AAE2 6000                       		bra.s	loc_179EE
0001AAE4                            ; ===========================================================================
0001AAE4                            
0001AAE4                            loc_179E0:
0001AAE4 4268 0012                          clr.w    obVelY(a0)
0001AAE8 4A38 FE2D                          tst.b     (v_invinc).w
0001AAEC 6600                               bne.s   @boss_invinc
0001AAEE 4A38 FE2E                          tst.b     (v_shoes).w
0001AAF2 6600                               bne.s   @boss_shoes
0001AAF4                            
0001AAF4 1038 F5C6                          move.b   (v_Saved_music),d0
0001AAF8 6000 0000                          bra.w      @boss_play
0001AAFC                            
0001AAFC                            @boss_invinc:
0001AAFC 103C 0000                          move.b #bgm_Invincible,d0
0001AB00                            
0001AB00                            @boss_shoes:
0001AB00 103C 0000                          move.b #bgm_Ending,d0
0001AB04                            
0001AB04                            @boss_play:
0001AB04 4EB8 124E                          jsr PlaySound
0001AB08                            
0001AB08                            loc_179EE:
0001AB08 6100 FEB2                  		bsr.w	BossMove
0001AB0C 6000 FDF2                  		bra.w	loc_177E6
0001AB10                            ; ===========================================================================
0001AB10                            
0001AB10                            loc_179F6:
0001AB10 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001AB16 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001AB1C 0C78 14C0 F72A             		cmpi.w	#$14C0,(v_limitright2).w
0001AB22 6700                       		beq.s	loc_17A10
0001AB24 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001AB28 6000                       		bra.s	loc_17A16
0001AB2A                            ; ===========================================================================
0001AB2A                            
0001AB2A                            loc_17A10:
0001AB2A 4A28 0001                  		tst.b	obRender(a0)
0001AB2E 6A00                       		bpl.s	BGHZ_ShipDel
0001AB30                            
0001AB30                            loc_17A16:
0001AB30 6100 FE8A                  		bsr.w	BossMove
0001AB34 6000 FDCA                  		bra.w	loc_177E6
0001AB38                            ; ===========================================================================
0001AB38                            
0001AB38                            BGHZ_ShipDel:
0001AB38 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001AB3E                            ; ===========================================================================
0001AB3E                            
0001AB3E                            BGHZ_FaceMain:	; Routine 4
0001AB3E 7000                       		moveq	#0,d0
0001AB40 7201                       		moveq	#1,d1
0001AB42 2268 0034                  		movea.l	$34(a0),a1
0001AB46 1029 0025                  		move.b	ob2ndRout(a1),d0
0001AB4A 5900                       		subq.b	#4,d0
0001AB4C 6600                       		bne.s	loc_17A3E
0001AB4E 0C69 1400 0030             		cmpi.w	#$1400,$30(a1)
0001AB54 6600                       		bne.s	loc_17A46
0001AB56 7204                       		moveq	#4,d1
0001AB58                            
0001AB58                            loc_17A3E:
0001AB58 5D00                       		subq.b	#6,d0
0001AB5A 6B00                       		bmi.s	loc_17A46
0001AB5C 720A                       		moveq	#$A,d1
0001AB5E 6000                       		bra.s	loc_17A5A
0001AB60                            ; ===========================================================================
0001AB60                            
0001AB60                            loc_17A46:
0001AB60 4A29 0020                  		tst.b	obColType(a1)
0001AB64 6600                       		bne.s	loc_17A50
0001AB66 7205                       		moveq	#5,d1
0001AB68 6000                       		bra.s	loc_17A5A
0001AB6A                            ; ===========================================================================
0001AB6A                            
0001AB6A                            loc_17A50:
0001AB6A 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001AB70 6500                       		bcs.s	loc_17A5A
0001AB72 7204                       		moveq	#4,d1
0001AB74                            
0001AB74                            loc_17A5A:
0001AB74 1141 001C                  		move.b	d1,obAnim(a0)
0001AB78 5500                       		subq.b	#2,d0
0001AB7A 6600                       		bne.s	BGHZ_FaceDisp
0001AB7C 117C 0006 001C             		move.b	#6,obAnim(a0)
0001AB82 4A28 0001                  		tst.b	obRender(a0)
0001AB86 6A00                       		bpl.s	BGHZ_FaceDel
0001AB88                            
0001AB88                            BGHZ_FaceDisp:
0001AB88 6000                       		bra.s	BGHZ_Display
0001AB8A                            ; ===========================================================================
0001AB8A                            
0001AB8A                            BGHZ_FaceDel:
0001AB8A 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001AB90                            ; ===========================================================================
0001AB90                            
0001AB90                            BGHZ_FlameMain:	; Routine 6
0001AB90 117C 0007 001C             		move.b	#7,obAnim(a0)
0001AB96 2268 0034                  		movea.l	$34(a0),a1
0001AB9A 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001ABA0 6600                       		bne.s	loc_17A96
0001ABA2 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001ABA8 4A28 0001                  		tst.b	obRender(a0)
0001ABAC 6A00                       		bpl.s	BGHZ_FlameDel
0001ABAE 6000                       		bra.s	BGHZ_FlameDisp
0001ABB0                            ; ===========================================================================
0001ABB0                            
0001ABB0                            loc_17A96:
0001ABB0 3029 0010                  		move.w	obVelX(a1),d0
0001ABB4 6700                       		beq.s	BGHZ_FlameDisp
0001ABB6 117C 0008 001C             		move.b	#8,obAnim(a0)
0001ABBC                            
0001ABBC                            BGHZ_FlameDisp:
0001ABBC 6000                       		bra.s	BGHZ_Display
0001ABBE                            ; ===========================================================================
0001ABBE                            
0001ABBE                            BGHZ_FlameDel:
0001ABBE 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001ABC4                            ; ===========================================================================
0001ABC4                            
0001ABC4                            BGHZ_Display:
0001ABC4 2268 0034                  		movea.l	$34(a0),a1
0001ABC8 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001ABCE 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001ABD4 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001ABDA 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001ABE0 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001ABE6 1028 0022                  		move.b	obStatus(a0),d0
0001ABEA 0200 0003                  		andi.b	#3,d0
0001ABEE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001ABF4 8128 0001                  		or.b	d0,obRender(a0)
0001ABF8 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001ABF8 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001ABFE                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001ABFE                            ; ---------------------------------------------------------------------------
0001ABFE                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001ABFE                            ; ---------------------------------------------------------------------------
0001ABFE                            
0001ABFE                            BossBall:
0001ABFE 7000                       		moveq	#0,d0
0001AC00 1028 0024                  		move.b	obRoutine(a0),d0
0001AC04 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001AC08 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001AC0C                            ; ===========================================================================
0001AC0C 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001AC0E 0000                       		dc.w GBall_Base-GBall_Index
0001AC10 0000                       		dc.w GBall_Display2-GBall_Index
0001AC12 0000                       		dc.w loc_17C68-GBall_Index
0001AC14 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001AC16                            ; ===========================================================================
0001AC16                            
0001AC16                            GBall_Main:	; Routine 0
0001AC16 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AC1A 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001AC20 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001AC26 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001AC2E 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001AC34 45E8 0028                  		lea	obSubtype(a0),a2
0001AC38 14FC 0000                  		move.b	#0,(a2)+
0001AC3C 7205                       		moveq	#5,d1
0001AC3E 2248                       		movea.l	a0,a1
0001AC40 6000                       		bra.s	loc_17B60
0001AC42                            ; ===========================================================================
0001AC42                            
0001AC42                            GBall_MakeLinks:
0001AC42 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001AC48 6600                       		bne.s	GBall_MakeBall
0001AC4A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AC50 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AC56 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AC5A 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001AC60 237C 0000 9890 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001AC68 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001AC6E 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AC74 5228 0028                  		addq.b	#1,obSubtype(a0)
0001AC78                            
0001AC78                            loc_17B60:
0001AC78 3A09                       		move.w	a1,d5
0001AC7A 0445 D000                  		subi.w	#$D000,d5
0001AC7E EC4D                       		lsr.w	#6,d5
0001AC80 0245 007F                  		andi.w	#$7F,d5
0001AC84 14C5                       		move.b	d5,(a2)+
0001AC86 137C 0004 0001             		move.b	#4,obRender(a1)
0001AC8C 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AC92 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001AC98 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001AC9E 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001ACA2                            
0001ACA2                            GBall_MakeBall:
0001ACA2 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001ACA8 237C 0000 9DEC 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001ACB0 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001ACB6 137C 0001 001A             		move.b	#1,obFrame(a1)
0001ACBC 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001ACC2 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001ACC8 4E75                       		rts	
0001ACCA                            ; ===========================================================================
0001ACCA                            
0001ACCA 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001ACD0                            
0001ACD0                            ; ===========================================================================
0001ACD0                            
0001ACD0                            GBall_Base:	; Routine 2
0001ACD0 47F9 0001 ACCA             		lea	(GBall_PosData).l,a3
0001ACD6 45E8 0028                  		lea	obSubtype(a0),a2
0001ACDA 7C00                       		moveq	#0,d6
0001ACDC 1C1A                       		move.b	(a2)+,d6
0001ACDE                            
0001ACDE                            loc_17BC6:
0001ACDE 7800                       		moveq	#0,d4
0001ACE0 181A                       		move.b	(a2)+,d4
0001ACE2 ED4C                       		lsl.w	#6,d4
0001ACE4 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001ACEA 2244                       		movea.l	d4,a1
0001ACEC 101B                       		move.b	(a3)+,d0
0001ACEE B029 003C                  		cmp.b	$3C(a1),d0
0001ACF2 6700                       		beq.s	loc_17BE0
0001ACF4 5229 003C                  		addq.b	#1,$3C(a1)
0001ACF8                            
0001ACF8                            loc_17BE0:
0001ACF8 51CE FFE4                  		dbf	d6,loc_17BC6
0001ACFC                            
0001ACFC B029 003C                  		cmp.b	$3C(a1),d0
0001AD00 6600                       		bne.s	loc_17BFA
0001AD02 2268 0034                  		movea.l	$34(a0),a1
0001AD06 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AD0C 6600                       		bne.s	loc_17BFA
0001AD0E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AD12                            
0001AD12                            loc_17BFA:
0001AD12 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AD18 6700                       		beq.s	GBall_Display
0001AD1A 5268 0032                  		addq.w	#1,$32(a0)
0001AD1E                            
0001AD1E                            GBall_Display:
0001AD1E 6100 0000                  		bsr.w	sub_17C2A
0001AD22 1028 0026                  		move.b	obAngle(a0),d0
0001AD26 4EB9 0000 9802             		jsr	(Swing_Move2).l
0001AD2C 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001AD32                            ; ===========================================================================
0001AD32                            
0001AD32                            GBall_Display2:	; Routine 4
0001AD32 6100 0000                  		bsr.w	sub_17C2A
0001AD36 4EB9 0000 97C2             		jsr	(Obj48_Move).l
0001AD3C 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001AD42                            
0001AD42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AD42                            
0001AD42                            
0001AD42                            sub_17C2A:
0001AD42 2268 0034                  		movea.l	$34(a0),a1
0001AD46 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AD4C 6400                       		bcc.s	loc_17C3C
0001AD4E 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AD54                            
0001AD54                            loc_17C3C:
0001AD54 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AD5A 3029 000C                  		move.w	obY(a1),d0
0001AD5E D068 0032                  		add.w	$32(a0),d0
0001AD62 3140 0038                  		move.w	d0,$38(a0)
0001AD66 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AD6C 4A29 0022                  		tst.b	obStatus(a1)
0001AD70 6A00                       		bpl.s	locret_17C66
0001AD72 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AD76 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AD7C                            
0001AD7C                            locret_17C66:
0001AD7C 4E75                       		rts	
0001AD7E                            ; End of function sub_17C2A
0001AD7E                            
0001AD7E                            ; ===========================================================================
0001AD7E                            
0001AD7E                            loc_17C68:	; Routine 6
0001AD7E 2268 0034                  		movea.l	$34(a0),a1
0001AD82 4A29 0022                  		tst.b	obStatus(a1)
0001AD86 6A00                       		bpl.s	GBall_Display3
0001AD88 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AD8C 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AD92                            
0001AD92                            GBall_Display3:
0001AD92 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001AD98                            ; ===========================================================================
0001AD98                            
0001AD98                            GBall_ChkVanish:; Routine 8
0001AD98 7000                       		moveq	#0,d0
0001AD9A 4A28 001A                  		tst.b	obFrame(a0)
0001AD9E 6600                       		bne.s	GBall_Vanish
0001ADA0 5200                       		addq.b	#1,d0
0001ADA2                            
0001ADA2                            GBall_Vanish:
0001ADA2 1140 001A                  		move.b	d0,obFrame(a0)
0001ADA6 2268 0034                  		movea.l	$34(a0),a1
0001ADAA 4A29 0022                  		tst.b	obStatus(a1)
0001ADAE 6A00                       		bpl.s	GBall_Display4
0001ADB0 117C 0000 0020             		move.b	#0,obColType(a0)
0001ADB6 6100 FBC2                  		bsr.w	BossDefeated
0001ADBA 5328 003C                  		subq.b	#1,$3C(a0)
0001ADBE 6A00                       		bpl.s	GBall_Display4
0001ADC0 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001ADC4 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ADCA                            
0001ADCA                            GBall_Display4:
0001ADCA 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001ADCA 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001ADD0                            		include	"_anim\Eggman.asm"
0001ADD0                            ; ---------------------------------------------------------------------------
0001ADD0                            ; Animation script - Eggman (bosses)
0001ADD0                            ; ---------------------------------------------------------------------------
0001ADD0 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001ADD2 0000                       		dc.w @facenormal1-Ani_Eggman
0001ADD4 0000                       		dc.w @facenormal2-Ani_Eggman
0001ADD6 0000                       		dc.w @facenormal3-Ani_Eggman
0001ADD8 0000                       		dc.w @facelaugh-Ani_Eggman
0001ADDA 0000                       		dc.w @facehit-Ani_Eggman
0001ADDC 0000                       		dc.w @facepanic-Ani_Eggman
0001ADDE 0000                       		dc.w @blank-Ani_Eggman
0001ADE0 0000                       		dc.w @flame1-Ani_Eggman
0001ADE2 0000                       		dc.w @flame2-Ani_Eggman
0001ADE4 0000                       		dc.w @facedefeat-Ani_Eggman
0001ADE6 0000                       		dc.w @escapeflame-Ani_Eggman
0001ADE8 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001ADEC 00                         		even
0001ADEC 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001ADF0                            		even
0001ADF0 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001ADF4                            		even
0001ADF4 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001ADF8                            		even
0001ADF8 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001ADFC                            		even
0001ADFC 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001AE00                            		even
0001AE00 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AE04                            		even
0001AE04 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AE08 00                         		even
0001AE08 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AE0C                            		even
0001AE0C 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AE10                            		even
0001AE10 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AE14 00                         		even
0001AE14 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AE20 00                         		even
0001AE20 00                         		even
0001AE20                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AE20                            ; --------------------------------------------------------------------------------
0001AE20                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AE20                            ; --------------------------------------------------------------------------------
0001AE20                            
0001AE20                            SME_F_pyS:	
0001AE20 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AE24 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AE28 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AE2C 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AE30 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AE34 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AE38 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AE3A 05                         SME_F_pyS_1A:	dc.b 5	
0001AE3B EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001AE40 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001AE45 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001AE4A 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001AE4F 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001AE54 03                         SME_F_pyS_34:	dc.b 3	
0001AE55 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AE5A EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001AE5F EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AE64 03                         SME_F_pyS_44:	dc.b 3	
0001AE65 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AE6A EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AE6F EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AE74 04                         SME_F_pyS_54:	dc.b 4	
0001AE75 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001AE7A EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001AE7F EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001AE84 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AE89 04                         SME_F_pyS_69:	dc.b 4	
0001AE8A E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001AE8F EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001AE94 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001AE99 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AE9E 04                         SME_F_pyS_7E:	dc.b 4	
0001AE9F E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AEA4 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AEA9 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AEAE EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AEB3 04                         SME_F_pyS_93:	dc.b 4	
0001AEB4 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AEB9 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AEBE EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AEC3 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AEC8 07                         SME_F_pyS_A8:	dc.b 7	
0001AEC9 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AECE E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AED3 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AED8 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001AEDD F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001AEE2 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001AEE7 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AEEC 01                         SME_F_pyS_CC:	dc.b 1	
0001AEED 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AEF2 01                         SME_F_pyS_D2:	dc.b 1	
0001AEF3 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AEF8 00                         SME_F_pyS_D8:	dc.b 0	
0001AEF9 02                         SME_F_pyS_D9:	dc.b 2	
0001AEFA 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AEFF 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AF04 02                         SME_F_pyS_E4:	dc.b 2	
0001AF05 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AF0A 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AF10 00                         		even
0001AF10 00                         		even
0001AF10                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AF10                            ; ---------------------------------------------------------------------------
0001AF10                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AF10                            ; ---------------------------------------------------------------------------
0001AF10                            Map_BossItems_internal:
0001AF10 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AF12 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AF14 0000                       		dc.w @cross-Map_BossItems_internal
0001AF16 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AF18 0000                       		dc.w @pipe-Map_BossItems_internal
0001AF1A 0000                       		dc.w @spike-Map_BossItems_internal
0001AF1C 0000                       		dc.w @legmask-Map_BossItems_internal
0001AF1E 0000                       		dc.w @legs-Map_BossItems_internal
0001AF20 01                         @chainanchor1:	dc.b 1
0001AF21 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AF26 02                         @chainanchor2:	dc.b 2
0001AF27 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AF2C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001AF32 00                         		even
0001AF32 01                         @cross:		dc.b 1
0001AF33 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001AF38 01                         @widepipe:	dc.b 1
0001AF39 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001AF3E 01                         @pipe:		dc.b 1
0001AF3F 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001AF44 04                         @spike:		dc.b 4
0001AF45 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001AF4A F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001AF4F F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001AF54 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001AF5A 00                         		even
0001AF5A 02                         @legmask:	dc.b 2
0001AF5B 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001AF60 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001AF66 00                         		even
0001AF66 02                         @legs:		dc.b 2
0001AF67 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001AF6C 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001AF72 00                         		even
0001AF72 00                         		even
0001AF72                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001AF72                            ; ---------------------------------------------------------------------------
0001AF72                            ; Object 77 - Eggman (LZ)
0001AF72                            ; ---------------------------------------------------------------------------
0001AF72                            
0001AF72                            BossLabyrinth:
0001AF72 7000                       		moveq	#0,d0
0001AF74 1028 0024                  		move.b	obRoutine(a0),d0
0001AF78 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001AF7C 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001AF80                            ; ===========================================================================
0001AF80 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001AF82 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001AF84 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001AF86 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001AF88                            
0001AF88 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001AF8A 0401                       		dc.b 4,	1
0001AF8C 0607                       		dc.b 6,	7
0001AF8E                            ; ===========================================================================
0001AF8E                            
0001AF8E                            Obj77_Main:	; Routine 0
0001AF8E 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001AF94 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001AF9A 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001AFA0 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001AFA6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AFAC 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001AFB2 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001AFB8 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001AFBC 2248                       		movea.l	a0,a1
0001AFBE 7202                       		moveq	#2,d1
0001AFC0 6000                       		bra.s	Obj77_LoadBoss
0001AFC2                            ; ===========================================================================
0001AFC2                            
0001AFC2                            Obj77_Loop:
0001AFC2 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001AFC8 6600                       		bne.s	Obj77_ShipMain
0001AFCA 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001AFCE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AFD4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AFDA                            
0001AFDA                            Obj77_LoadBoss:
0001AFDA 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AFE0 4229 0025                  		clr.b	ob2ndRout(a1)
0001AFE4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001AFE8 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001AFEC 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001AFF2 237C 0001 AE20 0004        		move.l	#Map_Eggman,obMap(a1)
0001AFFA 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B000 137C 0004 0001             		move.b	#4,obRender(a1)
0001B006 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B00C 2348 0034                  		move.l	a0,$34(a1)
0001B010 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001B014                            
0001B014                            Obj77_ShipMain:	; Routine 2
0001B014 43F8 D000                  		lea	(v_player).w,a1
0001B018 7000                       		moveq	#0,d0
0001B01A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B01E 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001B022 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001B026 43F9 0001 ADD0             		lea	(Ani_Eggman).l,a1
0001B02C 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001B032 7003                       		moveq	#3,d0
0001B034 C028 0022                  		and.b	obStatus(a0),d0
0001B038 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B03E 8128 0001                  		or.b	d0,obRender(a0)
0001B042 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001B048                            ; ===========================================================================
0001B048 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001B04C 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001B050 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001B054 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001B058                            ; ===========================================================================
0001B058                            
0001B058                            loc_17F1E:
0001B058 3029 0008                  		move.w	obX(a1),d0
0001B05C 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001B060 6500                       		bcs.s	loc_17F38
0001B062 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B068 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001B06E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B072                            
0001B072                            loc_17F38:
0001B072 6100 F948                  		bsr.w	BossMove
0001B076 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B07C 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B082                            
0001B082                            loc_17F48:
0001B082 4A28 003D                  		tst.b	$3D(a0)
0001B086 6600                       		bne.s	loc_17F8E
0001B088 4A28 0022                  		tst.b	obStatus(a0)
0001B08C 6B00                       		bmi.s	loc_17F92
0001B08E 4A28 0020                  		tst.b	obColType(a0)
0001B092 6600                       		bne.s	locret_17F8C
0001B094 4A28 003E                  		tst.b	$3E(a0)
0001B098 6600                       		bne.s	loc_17F70
0001B09A 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B0AA                            
0001B0AA                            loc_17F70:
0001B0AA 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B0AE 7000                       		moveq	#0,d0
0001B0B0 4A51                       		tst.w	(a1)
0001B0B2 6600                       		bne.s	loc_17F7E
0001B0B4 303C 0EEE                  		move.w	#cWhite,d0
0001B0B8                            
0001B0B8                            loc_17F7E:
0001B0B8 3280                       		move.w	d0,(a1)
0001B0BA 5328 003E                  		subq.b	#1,$3E(a0)
0001B0BE 6600                       		bne.s	locret_17F8C
0001B0C0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B0C6                            
0001B0C6                            locret_17F8C:
0001B0C6 4E75                       		rts	
0001B0C8                            ; ===========================================================================
0001B0C8                            
0001B0C8                            loc_17F8E:
0001B0C8 6000 F8B0                  		bra.w	BossDefeated
0001B0CC                            ; ===========================================================================
0001B0CC                            
0001B0CC                            loc_17F92:
0001B0CC 7064                       		moveq	#100,d0
0001B0CE 6100 0000                  		bsr.w	AddPoints
0001B0D2 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B0D8 4E75                       		rts	
0001B0DA                            ; ===========================================================================
0001B0DA                            
0001B0DA                            loc_17FA0:
0001B0DA 70FE                       		moveq	#-2,d0
0001B0DC 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001B0E2 6500                       		bcs.s	loc_17FB6
0001B0E4 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001B0EA 4268 0010                  		clr.w	obVelX(a0)
0001B0EE 5240                       		addq.w	#1,d0
0001B0F0                            
0001B0F0                            loc_17FB6:
0001B0F0 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001B0F6 6E00                       		bgt.s	loc_17FCA
0001B0F8 317C 0500 0038             		move.w	#$500,$38(a0)
0001B0FE 4268 0012                  		clr.w	obVelY(a0)
0001B102 5240                       		addq.w	#1,d0
0001B104                            
0001B104                            loc_17FCA:
0001B104 6600                       		bne.s	loc_17FDC
0001B106 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B10C 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001B112 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B116                            
0001B116                            loc_17FDC:
0001B116 6000 FF5A                  		bra.w	loc_17F38
0001B11A                            ; ===========================================================================
0001B11A                            
0001B11A                            loc_17FE0:
0001B11A 70FE                       		moveq	#-2,d0
0001B11C 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001B122 6500                       		bcs.s	loc_17FF6
0001B124 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001B12A 4268 0010                  		clr.w	obVelX(a0)
0001B12E 5240                       		addq.w	#1,d0
0001B130                            
0001B130                            loc_17FF6:
0001B130 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001B136 6E00                       		bgt.s	loc_1800A
0001B138 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001B13E 4268 0012                  		clr.w	obVelY(a0)
0001B142 5240                       		addq.w	#1,d0
0001B144                            
0001B144                            loc_1800A:
0001B144 6600                       		bne.s	loc_1801A
0001B146 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B14C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B150 4228 003F                  		clr.b	$3F(a0)
0001B154                            
0001B154                            loc_1801A:
0001B154 6000 FF1C                  		bra.w	loc_17F38
0001B158                            ; ===========================================================================
0001B158                            
0001B158                            loc_1801E:
0001B158 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001B15E 6E00                       		bgt.s	loc_1804E
0001B160 317C 0100 0038             		move.w	#$100,$38(a0)
0001B166 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B16C 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001B172 4A28 003D                  		tst.b	$3D(a0)
0001B176 6700                       		beq.s	loc_18046
0001B178 E1E8 0010                  		asl	obVelX(a0)
0001B17C E1E8 0012                  		asl	obVelY(a0)
0001B180                            
0001B180                            loc_18046:
0001B180 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B184 6000 FEEC                  		bra.w	loc_17F38
0001B188                            ; ===========================================================================
0001B188                            
0001B188                            loc_1804E:
0001B188 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B18E 5428 003F                  		addq.b	#2,$3F(a0)
0001B192 1028 003F                  		move.b	$3F(a0),d0
0001B196 4EB9 0000 3A36             		jsr	(CalcSine).l
0001B19C 4A41                       		tst.w	d1
0001B19E 6A00                       		bpl.s	loc_1806C
0001B1A0 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B1A6                            
0001B1A6                            loc_1806C:
0001B1A6 E840                       		asr.w	#4,d0
0001B1A8 4840                       		swap	d0
0001B1AA 4240                       		clr.w	d0
0001B1AC D0A8 0030                  		add.l	$30(a0),d0
0001B1B0 4840                       		swap	d0
0001B1B2 3140 0008                  		move.w	d0,obX(a0)
0001B1B6 3028 0012                  		move.w	obVelY(a0),d0
0001B1BA 3238 D00C                  		move.w	(v_player+obY).w,d1
0001B1BE 9268 000C                  		sub.w	obY(a0),d1
0001B1C2 6500                       		bcs.s	loc_180A2
0001B1C4 0441 0048                  		subi.w	#$48,d1
0001B1C8 6500                       		bcs.s	loc_180A2
0001B1CA E240                       		asr.w	#1,d0
0001B1CC 0441 0028                  		subi.w	#$28,d1
0001B1D0 6500                       		bcs.s	loc_180A2
0001B1D2 E240                       		asr.w	#1,d0
0001B1D4 0441 0028                  		subi.w	#$28,d1
0001B1D8 6500                       		bcs.s	loc_180A2
0001B1DA 7000                       		moveq	#0,d0
0001B1DC                            
0001B1DC                            loc_180A2:
0001B1DC 48C0                       		ext.l	d0
0001B1DE E180                       		asl.l	#8,d0
0001B1E0 4A28 003D                  		tst.b	$3D(a0)
0001B1E4 6700                       		beq.s	loc_180AE
0001B1E6 D080                       		add.l	d0,d0
0001B1E8                            
0001B1E8                            loc_180AE:
0001B1E8 D1A8 0038                  		add.l	d0,$38(a0)
0001B1EC 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B1F2 6000 FE8E                  		bra.w	loc_17F48
0001B1F6                            ; ===========================================================================
0001B1F6                            
0001B1F6                            loc_180BC:
0001B1F6 70FE                       		moveq	#-2,d0
0001B1F8 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B1FE 6500                       		bcs.s	loc_180D2
0001B200 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B206 4268 0010                  		clr.w	obVelX(a0)
0001B20A 5240                       		addq.w	#1,d0
0001B20C                            
0001B20C                            loc_180D2:
0001B20C 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B212 6E00                       		bgt.s	loc_180E6
0001B214 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B21A 4268 0012                  		clr.w	obVelY(a0)
0001B21E 5240                       		addq.w	#1,d0
0001B220                            
0001B220                            loc_180E6:
0001B220 6600                       		bne.s	loc_180F2
0001B222 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B226 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B22C                            
0001B22C                            loc_180F2:
0001B22C 6000 FE44                  		bra.w	loc_17F38
0001B230                            ; ===========================================================================
0001B230                            
0001B230                            loc_180F6:
0001B230 4A28 003D                  		tst.b	$3D(a0)
0001B234 6600                       		bne.s	loc_18112
0001B236 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B23C 6D00                       		blt.s	loc_18126
0001B23E 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B244 6E00                       		bgt.s	loc_18126
0001B246 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B24C                            
0001B24C                            loc_18112:
0001B24C 4A38 FE2D                          tst.b     (v_invinc).w
0001B250 6600                               bne.s   @boss_invinc
0001B252                            
0001B252 1038 F5C6                          move.b   (v_Saved_music),d0
0001B256 6000 0000                          bra.w      @boss_play
0001B25A                            
0001B25A                            @boss_invinc:
0001B25A 103C 0000                          move.b #bgm_Invincible,d0
0001B25E                            
0001B25E                            @boss_play:
0001B25E 4EB8 124E                          jsr PlaySound
0001B262 4238 F7AA                          clr.b    (f_lockscreen).w
0001B266 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B26C 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B270                            
0001B270                            loc_18126:
0001B270 6000 FE00                  		bra.w	loc_17F38
0001B274                            ; ===========================================================================
0001B274                            
0001B274                            loc_1812A:
0001B274 4A28 003D                  		tst.b	$3D(a0)
0001B278 6600                       		bne.s	loc_18136
0001B27A 5328 003C                  		subq.b	#1,$3C(a0)
0001B27E 6600                       		bne.s	loc_1814E
0001B280                            
0001B280                            loc_18136:
0001B280 4228 003C                  		clr.b	$3C(a0)
0001B284 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B28A 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B290 4228 003D                  		clr.b	$3D(a0)
0001B294 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B298                            
0001B298                            loc_1814E:
0001B298 6000 FDD8                  		bra.w	loc_17F38
0001B29C                            ; ===========================================================================
0001B29C                            
0001B29C                            loc_18152:
0001B29C 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B2A2 6400                       		bcc.s	loc_18160
0001B2A4 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B2A8 6000                       		bra.s	loc_18166
0001B2AA                            ; ===========================================================================
0001B2AA                            
0001B2AA                            loc_18160:
0001B2AA 4A28 0001                  		tst.b	obRender(a0)
0001B2AE 6A00                       		bpl.s	Obj77_ShipDel
0001B2B0                            
0001B2B0                            loc_18166:
0001B2B0 6000 FDC0                  		bra.w	loc_17F38
0001B2B4                            ; ===========================================================================
0001B2B4                            
0001B2B4                            Obj77_ShipDel:
0001B2B4 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001B2BA                            ; ===========================================================================
0001B2BA                            
0001B2BA                            Obj77_FaceMain:	; Routine 4
0001B2BA 2268 0034                  		movea.l	$34(a0),a1
0001B2BE 1011                       		move.b	(a1),d0
0001B2C0 B010                       		cmp.b	(a0),d0
0001B2C2 6600                       		bne.s	Obj77_FaceDel
0001B2C4 7000                       		moveq	#0,d0
0001B2C6 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B2CA 7201                       		moveq	#1,d1
0001B2CC 4A28 003D                  		tst.b	$3D(a0)
0001B2D0 6700                       		beq.s	loc_1818C
0001B2D2 720A                       		moveq	#$A,d1
0001B2D4 6000                       		bra.s	loc_181A0
0001B2D6                            ; ===========================================================================
0001B2D6                            
0001B2D6                            loc_1818C:
0001B2D6 4A29 0020                  		tst.b	obColType(a1)
0001B2DA 6600                       		bne.s	loc_18196
0001B2DC 7205                       		moveq	#5,d1
0001B2DE 6000                       		bra.s	loc_181A0
0001B2E0                            ; ===========================================================================
0001B2E0                            
0001B2E0                            loc_18196:
0001B2E0 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B2E6 6500                       		bcs.s	loc_181A0
0001B2E8 7204                       		moveq	#4,d1
0001B2EA                            
0001B2EA                            loc_181A0:
0001B2EA 1141 001C                  		move.b	d1,obAnim(a0)
0001B2EE 0C00 000E                  		cmpi.b	#$E,d0
0001B2F2 6600                       		bne.s	loc_181B6
0001B2F4 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B2FA 4A28 0001                  		tst.b	obRender(a0)
0001B2FE 6A00                       		bpl.s	Obj77_FaceDel
0001B300                            
0001B300                            loc_181B6:
0001B300 6000                       		bra.s	Obj77_Display
0001B302                            ; ===========================================================================
0001B302                            
0001B302                            Obj77_FaceDel:
0001B302 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001B308                            ; ===========================================================================
0001B308                            
0001B308                            Obj77_FlameMain:; Routine 6
0001B308 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B30E 2268 0034                  		movea.l	$34(a0),a1
0001B312 1011                       		move.b	(a1),d0
0001B314 B010                       		cmp.b	(a0),d0
0001B316 6600                       		bne.s	Obj77_FlameDel
0001B318 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B31E 6600                       		bne.s	loc_181F0
0001B320 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B326 4A28 0001                  		tst.b	1(a0)
0001B32A 6A00                       		bpl.s	Obj77_FlameDel
0001B32C 6000                       		bra.s	loc_181F0
0001B32E                            ; ===========================================================================
0001B32E 4A69 0010                  		tst.w	obVelX(a1)
0001B332 6700                       		beq.s	loc_181F0
0001B334 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B33A                            
0001B33A                            loc_181F0:
0001B33A 6000                       		bra.s	Obj77_Display
0001B33C                            ; ===========================================================================
0001B33C                            
0001B33C                            Obj77_FlameDel:
0001B33C 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001B342                            ; ===========================================================================
0001B342                            
0001B342                            Obj77_Display:
0001B342 43F9 0001 ADD0             		lea	(Ani_Eggman).l,a1
0001B348 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001B34E 2268 0034                  		movea.l	$34(a0),a1
0001B352 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B358 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B35E 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B364 7003                       		moveq	#3,d0
0001B366 C028 0022                  		and.b	obStatus(a0),d0
0001B36A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B370 8128 0001                  		or.b	d0,obRender(a0)
0001B374 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001B374 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001B37A                            		include	"_incObj\73 Boss - Marble.asm"
0001B37A                            ; ---------------------------------------------------------------------------
0001B37A                            ; Object 73 - Eggman (MZ)
0001B37A                            ; ---------------------------------------------------------------------------
0001B37A                            
0001B37A                            BossMarble:
0001B37A 7000                       		moveq	#0,d0
0001B37C 1028 0024                  		move.b	obRoutine(a0),d0
0001B380 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B384 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B388                            ; ===========================================================================
0001B388 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B38A 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B38C 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B38E 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B390 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B392                            
0001B392 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B396 0401 0200                  		dc.b 4,	1, $02, $00
0001B39A 0607 0200                  		dc.b 6,	7, $02, $00
0001B39E 0800 0180                  		dc.b 8,	0, $01, $80
0001B3A2                            ; ===========================================================================
0001B3A2                            
0001B3A2                            Obj73_Main:	; Routine 0
0001B3A2 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B3A8 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B3AE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B3B4 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B3BA 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B3BE 2248                       		movea.l	a0,a1
0001B3C0 7203                       		moveq	#3,d1
0001B3C2 6000                       		bra.s	Obj73_LoadBoss
0001B3C4                            ; ===========================================================================
0001B3C4                            
0001B3C4                            Obj73_Loop:
0001B3C4 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001B3CA 6600                       		bne.s	Obj73_ShipMain
0001B3CC 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B3D0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B3D6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B3DC                            
0001B3DC                            Obj73_LoadBoss:
0001B3DC 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B3E2 4229 0025                  		clr.b	ob2ndRout(a1)
0001B3E6 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B3EA 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B3EE 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B3F2 237C 0001 AE20 0004        		move.l	#Map_Eggman,obMap(a1)
0001B3FA 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B400 137C 0004 0001             		move.b	#4,obRender(a1)
0001B406 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B40C 2348 0034                  		move.l	a0,$34(a1)
0001B410 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B414                            
0001B414                            Obj73_ShipMain:	; Routine 2
0001B414 7000                       		moveq	#0,d0
0001B416 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B41A 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B41E 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B422 43F9 0001 ADD0             		lea	(Ani_Eggman).l,a1
0001B428 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001B42E 7003                       		moveq	#3,d0
0001B430 C028 0022                  		and.b	obStatus(a0),d0
0001B434 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B43A 8128 0001                  		or.b	d0,obRender(a0)
0001B43E 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001B444                            ; ===========================================================================
0001B444 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B446 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B448 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B44A 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B44C 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B44E                            ; ===========================================================================
0001B44E                            
0001B44E                            loc_18302:
0001B44E 1028 003F                  		move.b	$3F(a0),d0
0001B452 5428 003F                  		addq.b	#2,$3F(a0)
0001B456 4EB9 0000 3A36             		jsr	(CalcSine).l
0001B45C E440                       		asr.w	#2,d0
0001B45E 3140 0012                  		move.w	d0,obVelY(a0)
0001B462 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B468 6100 F552                  		bsr.w	BossMove
0001B46C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B472 6600                       		bne.s	loc_18334
0001B474 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B478 4228 0028                  		clr.b	obSubtype(a0)
0001B47C 42A8 0010                  		clr.l	obVelX(a0)
0001B480                            
0001B480                            loc_18334:
0001B480 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001B486 1140 0034                  		move.b	d0,$34(a0)
0001B48A                            
0001B48A                            loc_1833E:
0001B48A 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B490 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B496 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B49C 6400                       		bcc.s	locret_18390
0001B49E 4A28 0022                  		tst.b	obStatus(a0)
0001B4A2 6B00                       		bmi.s	loc_18392
0001B4A4 4A28 0020                  		tst.b	obColType(a0)
0001B4A8 6600                       		bne.s	locret_18390
0001B4AA 4A28 003E                  		tst.b	$3E(a0)
0001B4AE 6600                       		bne.s	loc_18374
0001B4B0 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B4C0                            
0001B4C0                            loc_18374:
0001B4C0 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B4C4 7000                       		moveq	#0,d0
0001B4C6 4A51                       		tst.w	(a1)
0001B4C8 6600                       		bne.s	loc_18382
0001B4CA 303C 0EEE                  		move.w	#cWhite,d0
0001B4CE                            
0001B4CE                            loc_18382:
0001B4CE 3280                       		move.w	d0,(a1)
0001B4D0 5328 003E                  		subq.b	#1,$3E(a0)
0001B4D4 6600                       		bne.s	locret_18390
0001B4D6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B4DC                            
0001B4DC                            locret_18390:
0001B4DC 4E75                       		rts	
0001B4DE                            ; ===========================================================================
0001B4DE                            
0001B4DE                            loc_18392:
0001B4DE 7064                       		moveq	#100,d0
0001B4E0 6100 0000                  		bsr.w	AddPoints
0001B4E4 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B4EA 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B4F0 4268 0010                  		clr.w	obVelX(a0)
0001B4F4 4E75                       		rts	
0001B4F6                            ; ===========================================================================
0001B4F6                            
0001B4F6                            loc_183AA:
0001B4F6 7000                       		moveq	#0,d0
0001B4F8 1028 0028                  		move.b	obSubtype(a0),d0
0001B4FC 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B500 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B504 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B50A 6000 FF7E                  		bra.w	loc_1833E
0001B50E                            ; ===========================================================================
0001B50E 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B510 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B512 0000                       		dc.w loc_183CA-off_183C2
0001B514 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B516                            ; ===========================================================================
0001B516                            
0001B516                            loc_183CA:
0001B516 4A68 0010                  		tst.w	obVelX(a0)
0001B51A 6600                       		bne.s	loc_183FE
0001B51C 7040                       		moveq	#$40,d0
0001B51E 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B524 6700                       		beq.s	loc_183E6
0001B526 6500                       		bcs.s	loc_183DE
0001B528 4440                       		neg.w	d0
0001B52A                            
0001B52A                            loc_183DE:
0001B52A 3140 0012                  		move.w	d0,obVelY(a0)
0001B52E 6000 F48C                  		bra.w	BossMove
0001B532                            ; ===========================================================================
0001B532                            
0001B532                            loc_183E6:
0001B532 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B538 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B53E 0828 0000 0022             		btst	#0,obStatus(a0)
0001B544 6600                       		bne.s	loc_183FE
0001B546 4468 0010                  		neg.w	obVelX(a0)
0001B54A                            
0001B54A                            loc_183FE:
0001B54A 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B550 6400                       		bcc.s	Obj73_MakeLava
0001B552 6100 F468                  		bsr.w	BossMove
0001B556 5968 0012                  		subq.w	#4,obVelY(a0)
0001B55A                            
0001B55A                            Obj73_MakeLava:
0001B55A 5328 0034                  		subq.b	#1,$34(a0)
0001B55E 6400                       		bcc.s	loc_1845C
0001B560 4EB9 0000 FE16             		jsr	(FindFreeObj).l
0001B566 6600                       		bne.s	loc_1844A
0001B568 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B56C 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B572 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001B578 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B57E 80FC 0050                  		divu.w	#$50,d0
0001B582 4840                       		swap	d0
0001B584 0640 1878                  		addi.w	#$1878,d0
0001B588 3340 0008                  		move.w	d0,obX(a1)
0001B58C EE09                       		lsr.b	#7,d1
0001B58E 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B594                            
0001B594                            loc_1844A:
0001B594 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001B59A 0200 001F                  		andi.b	#$1F,d0
0001B59E 0600 0040                  		addi.b	#$40,d0
0001B5A2 1140 0034                  		move.b	d0,$34(a0)
0001B5A6                            
0001B5A6                            loc_1845C:
0001B5A6 0828 0000 0022             		btst	#0,obStatus(a0)
0001B5AC 6700                       		beq.s	loc_18474
0001B5AE 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B5B4 6D00                       		blt.s	locret_1849C
0001B5B6 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B5BC 6000                       		bra.s	loc_18482
0001B5BE                            ; ===========================================================================
0001B5BE                            
0001B5BE                            loc_18474:
0001B5BE 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B5C4 6E00                       		bgt.s	locret_1849C
0001B5C6 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B5CC                            
0001B5CC                            loc_18482:
0001B5CC 4268 0010                  		clr.w	obVelX(a0)
0001B5D0 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B5D6 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B5DC 6400                       		bcc.s	loc_18498
0001B5DE 4468 0012                  		neg.w	obVelY(a0)
0001B5E2                            
0001B5E2                            loc_18498:
0001B5E2 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B5E6                            
0001B5E6                            locret_1849C:
0001B5E6 4E75                       		rts	
0001B5E8                            ; ===========================================================================
0001B5E8                            
0001B5E8                            Obj73_MakeLava2:
0001B5E8 6100 F3D2                  		bsr.w	BossMove
0001B5EC 3028 0038                  		move.w	$38(a0),d0
0001B5F0 0440 022C                  		subi.w	#$22C,d0
0001B5F4 6E00                       		bgt.s	locret_184F4
0001B5F6 303C 022C                  		move.w	#$22C,d0
0001B5FA 4A68 0012                  		tst.w	obVelY(a0)
0001B5FE 6700                       		beq.s	loc_184EA
0001B600 4268 0012                  		clr.w	obVelY(a0)
0001B604 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B60A 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B610 4EB9 0000 FE16             		jsr	(FindFreeObj).l
0001B616 6600                       		bne.s	loc_184EA
0001B618 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B61E 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B624 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B62A 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B62E 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B634                            
0001B634                            loc_184EA:
0001B634 5368 003C                  		subq.w	#1,$3C(a0)
0001B638 6600                       		bne.s	locret_184F4
0001B63A 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B63E                            
0001B63E                            locret_184F4:
0001B63E 4E75                       		rts	
0001B640                            ; ===========================================================================
0001B640                            
0001B640                            loc_184F6:
0001B640 5368 003C                  		subq.w	#1,$3C(a0)
0001B644 6B00                       		bmi.s	loc_18500
0001B646 6000 F332                  		bra.w	BossDefeated
0001B64A                            ; ===========================================================================
0001B64A                            
0001B64A                            loc_18500:
0001B64A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B650 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B656 4268 0010                  		clr.w	obVelX(a0)
0001B65A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B65E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B664 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B668 6600                       		bne.s	locret_1852A
0001B66A 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B670 4268 0012                  		clr.w	obVelY(a0)
0001B674                            
0001B674                            locret_1852A:
0001B674 4E75                       		rts	
0001B676                            ; ===========================================================================
0001B676                            
0001B676                            loc_1852C:
0001B676 5268 003C                  		addq.w	#1,$3C(a0)
0001B67A 6700                       		beq.s	loc_18544
0001B67C 6A00                       		bpl.s	loc_1854E
0001B67E 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B684 6400                       		bcc.s	loc_18544
0001B686 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B68C 6000                       		bra.s	loc_1857A
0001B68E                            ; ===========================================================================
0001B68E                            
0001B68E                            loc_18544:
0001B68E 4268 0012                  		clr.w	obVelY(a0)
0001B692 4268 003C                  		clr.w	$3C(a0)
0001B696 6000                       		bra.s	loc_1857A
0001B698                            ; ===========================================================================
0001B698                            
0001B698                            loc_1854E:
0001B698 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B69E 6500                       		bcs.s	loc_18566
0001B6A0 6700                       		beq.s	loc_1856C
0001B6A2 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B6A8 6500                       		bcs.s	loc_1857A
0001B6AA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B6AE 6000                       		bra.s	loc_1857A
0001B6B0                            ; ===========================================================================
0001B6B0                            
0001B6B0                            loc_18566:
0001B6B0 5168 0012                  		subq.w	#8,obVelY(a0)
0001B6B4 6000                       		bra.s	loc_1857A
0001B6B6                            ; ===========================================================================
0001B6B6                            
0001B6B6                            loc_1856C:
0001B6B6 4268 0012                  		clr.w	obVelY(a0)
0001B6C4                            
0001B6C4                            loc_1857A:
0001B6C4 6100 F2F6                  		bsr.w	BossMove
0001B6C8 6000 FDC0                  		bra.w	loc_1833E
0001B6CC                            ; ===========================================================================
0001B6CC                            
0001B6CC                            loc_18582:
0001B6CC 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B6D2 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B6D8 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B6DE 6400                       		bcc.s	loc_1859C
0001B6E0 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B6E4 6000                       		bra.s	loc_185A2
0001B6E6                            ; ===========================================================================
0001B6E6                            
0001B6E6                            loc_1859C:
0001B6E6 4A28 0001                  		tst.b	obRender(a0)
0001B6EA 6A00                       		bpl.s	Obj73_ShipDel
0001B6EC                            
0001B6EC                            loc_185A2:
0001B6EC 6100 F2CE                  		bsr.w	BossMove
0001B6F0 6000 FD98                  		bra.w	loc_1833E
0001B6F4                            ; ===========================================================================
0001B6F4                            
0001B6F4                            Obj73_ShipDel:
0001B6F4 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001B6FA                            ; ===========================================================================
0001B6FA                            
0001B6FA                            Obj73_FaceMain:	; Routine 4
0001B6FA 7000                       		moveq	#0,d0
0001B6FC 7201                       		moveq	#1,d1
0001B6FE 2268 0034                  		movea.l	$34(a0),a1
0001B702 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B706 5540                       		subq.w	#2,d0
0001B708 6600                       		bne.s	loc_185D2
0001B70A 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B710 6700                       		beq.s	loc_185DA
0001B712 4A69 0012                  		tst.w	obVelY(a1)
0001B716 6600                       		bne.s	loc_185DA
0001B718 7204                       		moveq	#4,d1
0001B71A 6000                       		bra.s	loc_185EE
0001B71C                            ; ===========================================================================
0001B71C                            
0001B71C                            loc_185D2:
0001B71C 5500                       		subq.b	#2,d0
0001B71E 6B00                       		bmi.s	loc_185DA
0001B720 720A                       		moveq	#$A,d1
0001B722 6000                       		bra.s	loc_185EE
0001B724                            ; ===========================================================================
0001B724                            
0001B724                            loc_185DA:
0001B724 4A29 0020                  		tst.b	obColType(a1)
0001B728 6600                       		bne.s	loc_185E4
0001B72A 7205                       		moveq	#5,d1
0001B72C 6000                       		bra.s	loc_185EE
0001B72E                            ; ===========================================================================
0001B72E                            
0001B72E                            loc_185E4:
0001B72E 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B734 6500                       		bcs.s	loc_185EE
0001B736 7204                       		moveq	#4,d1
0001B738                            
0001B738                            loc_185EE:
0001B738 1141 001C                  		move.b	d1,obAnim(a0)
0001B73C 5900                       		subq.b	#4,d0
0001B73E 6600                       		bne.s	loc_18602
0001B740 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B746 4A28 0001                  		tst.b	obRender(a0)
0001B74A 6A00                       		bpl.s	Obj73_FaceDel
0001B74C                            
0001B74C                            loc_18602:
0001B74C 6000                       		bra.s	Obj73_Display
0001B74E                            ; ===========================================================================
0001B74E                            
0001B74E                            Obj73_FaceDel:
0001B74E 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001B754                            ; ===========================================================================
0001B754                            
0001B754                            Obj73_FlameMain:; Routine 6
0001B754 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B75A 2268 0034                  		movea.l	$34(a0),a1
0001B75E 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B764 6D00                       		blt.s	loc_1862A
0001B766 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B76C 4A28 0001                  		tst.b	obRender(a0)
0001B770 6A00                       		bpl.s	Obj73_FlameDel
0001B772 6000                       		bra.s	loc_18636
0001B774                            ; ===========================================================================
0001B774                            
0001B774                            loc_1862A:
0001B774 4A69 0010                  		tst.w	obVelX(a1)
0001B778 6700                       		beq.s	loc_18636
0001B77A 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B780                            
0001B780                            loc_18636:
0001B780 6000                       		bra.s	Obj73_Display
0001B782                            ; ===========================================================================
0001B782                            
0001B782                            Obj73_FlameDel:
0001B782 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001B788                            ; ===========================================================================
0001B788                            
0001B788                            Obj73_Display:
0001B788 43F9 0001 ADD0             		lea	(Ani_Eggman).l,a1
0001B78E 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001B794                            
0001B794                            loc_1864A:
0001B794 2268 0034                  		movea.l	$34(a0),a1
0001B798 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B79E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B7A4 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B7AA 7003                       		moveq	#3,d0
0001B7AC C028 0022                  		and.b	obStatus(a0),d0
0001B7B0 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B7B6 8128 0001                  		or.b	d0,obRender(a0)
0001B7BA 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001B7C0                            ; ===========================================================================
0001B7C0                            
0001B7C0                            Obj73_TubeMain:	; Routine 8
0001B7C0 2268 0034                  		movea.l	$34(a0),a1
0001B7C4 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B7CA 6600                       		bne.s	loc_18688
0001B7CC 4A28 0001                  		tst.b	obRender(a0)
0001B7D0 6A00                       		bpl.s	Obj73_TubeDel
0001B7D2                            
0001B7D2                            loc_18688:
0001B7D2 217C 0001 AF10 0004        		move.l	#Map_BossItems,obMap(a0)
0001B7DA 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B7E0 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B7E6 60AC                       		bra.s	loc_1864A
0001B7E8                            ; ===========================================================================
0001B7E8                            
0001B7E8                            Obj73_TubeDel:
0001B7E8 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001B7E8 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001B7EE                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B7EE                            ; ---------------------------------------------------------------------------
0001B7EE                            ; Object 74 - lava that	Eggman drops (MZ)
0001B7EE                            ; ---------------------------------------------------------------------------
0001B7EE                            
0001B7EE                            BossFire:
0001B7EE 7000                       		moveq	#0,d0
0001B7F0 1028 0024                  		move.b	obRoutine(a0),d0
0001B7F4 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B7F8 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B7FC 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001B802                            ; ===========================================================================
0001B802 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B804 0000                       		dc.w Obj74_Action-Obj74_Index
0001B806 0000                       		dc.w loc_18886-Obj74_Index
0001B808 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B80A                            ; ===========================================================================
0001B80A                            
0001B80A                            Obj74_Main:	; Routine 0
0001B80A 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B810 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B816 217C 0000 D688 0004        		move.l	#Map_Fire,obMap(a0)
0001B81E 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B824 117C 0004 0001             		move.b	#4,obRender(a0)
0001B82A 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B830 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B836 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B83C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B840 4A28 0028                  		tst.b	obSubtype(a0)
0001B844 6600                       		bne.s	loc_1870A
0001B846 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B84C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B850 6000 0000                  		bra.w	loc_18886
0001B854                            ; ===========================================================================
0001B854                            
0001B854                            loc_1870A:
0001B854 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B864                            
0001B864                            Obj74_Action:	; Routine 2
0001B864 7000                       		moveq	#0,d0
0001B866 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B86A 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B86E 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B872 4EB9 0000 F976             		jsr	(SpeedToPos).l
0001B878 43F9 0001 084E             		lea	(Ani_Fire).l,a1
0001B87E 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001B884 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B88A 6200                       		bhi.s	Obj74_Delete
0001B88C 4E75                       		rts	
0001B88E                            ; ===========================================================================
0001B88E                            
0001B88E                            Obj74_Delete:
0001B88E 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001B894                            ; ===========================================================================
0001B894 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B896 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B898 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B89A 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B89C                            ; ===========================================================================
0001B89C                            
0001B89C                            Obj74_Drop:
0001B89C 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B8A2 5328 0029                  		subq.b	#1,$29(a0)
0001B8A6 6A00                       		bpl.s	locret_18780
0001B8A8 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B8AE 4228 0028                  		clr.b	obSubtype(a0)
0001B8B2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B8B8 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B8BE 6100 C634                  		bsr.w	ObjFloorDist
0001B8C2 4A41                       		tst.w	d1
0001B8C4 6A00                       		bpl.s	locret_18780
0001B8C6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B8CA                            
0001B8CA                            locret_18780:
0001B8CA 4E75                       		rts	
0001B8CC                            ; ===========================================================================
0001B8CC                            
0001B8CC                            Obj74_MakeFlame:
0001B8CC 5568 000C                  		subq.w	#2,obY(a0)
0001B8D0 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B8D6 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B8DC 4268 0012                  		clr.w	obVelY(a0)
0001B8E0 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B8E6 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B8EC 117C 0003 0029             		move.b	#3,$29(a0)
0001B8F2 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001B8F8 6600                       		bne.s	loc_187CA
0001B8FA 47D1                       		lea	(a1),a3
0001B8FC 45D0                       		lea	(a0),a2
0001B8FE 7003                       		moveq	#3,d0
0001B900                            
0001B900                            Obj74_Loop:
0001B900 26DA                       		move.l	(a2)+,(a3)+
0001B902 26DA                       		move.l	(a2)+,(a3)+
0001B904 26DA                       		move.l	(a2)+,(a3)+
0001B906 26DA                       		move.l	(a2)+,(a3)+
0001B908 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B90C                            
0001B90C 4469 0010                  		neg.w	obVelX(a1)
0001B910 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B914                            
0001B914                            loc_187CA:
0001B914 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B918 4E75                       		rts	
0001B91A                            
0001B91A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B91A                            
0001B91A                            
0001B91A                            Obj74_Duplicate2:
0001B91A 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001B920 6600                       		bne.s	locret_187EE
0001B922 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B928 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B92E 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B932 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B938                            
0001B938                            locret_187EE:
0001B938 4E75                       		rts	
0001B93A                            ; End of function Obj74_Duplicate2
0001B93A                            
0001B93A                            ; ===========================================================================
0001B93A                            
0001B93A                            Obj74_Duplicate:
0001B93A 6100 C5B8                  		bsr.w	ObjFloorDist
0001B93E 4A41                       		tst.w	d1
0001B940 6A00                       		bpl.s	loc_18826
0001B942 3028 0008                  		move.w	obX(a0),d0
0001B946 0C40 1940                  		cmpi.w	#$1940,d0
0001B94A 6E00                       		bgt.s	loc_1882C
0001B94C 3228 0030                  		move.w	$30(a0),d1
0001B950 B240                       		cmp.w	d0,d1
0001B952 6700                       		beq.s	loc_1881E
0001B954 0240 0010                  		andi.w	#$10,d0
0001B958 0241 0010                  		andi.w	#$10,d1
0001B95C B240                       		cmp.w	d0,d1
0001B95E 6700                       		beq.s	loc_1881E
0001B960 61B8                       		bsr.s	Obj74_Duplicate2
0001B962 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B968                            
0001B968                            loc_1881E:
0001B968 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B96E 4E75                       		rts	
0001B970                            ; ===========================================================================
0001B970                            
0001B970                            loc_18826:
0001B970 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B974 4E75                       		rts	
0001B976                            ; ===========================================================================
0001B976                            
0001B976                            loc_1882C:
0001B976 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B97A 4E75                       		rts	
0001B97C                            ; ===========================================================================
0001B97C                            
0001B97C                            Obj74_FallEdge:
0001B97C 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B982 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B988 3028 0008                  		move.w	obX(a0),d0
0001B98C 9068 0032                  		sub.w	$32(a0),d0
0001B990 6A00                       		bpl.s	loc_1884A
0001B992 4440                       		neg.w	d0
0001B994                            
0001B994                            loc_1884A:
0001B994 0C40 0012                  		cmpi.w	#$12,d0
0001B998 6600                       		bne.s	loc_18856
0001B99A 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B9A0                            
0001B9A0                            loc_18856:
0001B9A0 6100 C552                  		bsr.w	ObjFloorDist
0001B9A4 4A41                       		tst.w	d1
0001B9A6 6A00                       		bpl.s	locret_1887E
0001B9A8 5328 0029                  		subq.b	#1,$29(a0)
0001B9AC 6700                       		beq.s	Obj74_Delete2
0001B9AE 4268 0012                  		clr.w	obVelY(a0)
0001B9B2 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B9B8 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B9BE 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B9C4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B9C8                            
0001B9C8                            locret_1887E:
0001B9C8 4E75                       		rts	
0001B9CA                            ; ===========================================================================
0001B9CA                            
0001B9CA                            Obj74_Delete2:
0001B9CA 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001B9D0                            ; ===========================================================================
0001B9D0                            
0001B9D0                            loc_18886:	; Routine 4
0001B9D0 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B9D6 5328 0029                  		subq.b	#1,$29(a0)
0001B9DA 6600                       		bne.s	Obj74_Animate
0001B9DC 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B9E2 5968 000C                  		subq.w	#4,obY(a0)
0001B9E6 4228 0020                  		clr.b	obColType(a0)
0001B9EA                            
0001B9EA                            Obj74_Animate:
0001B9EA 43F9 0001 084E             		lea	(Ani_Fire).l,a1
0001B9F0 4EF9 0000 CA36             		jmp	(AnimateSprite).l
0001B9F6                            ; ===========================================================================
0001B9F6                            
0001B9F6                            Obj74_Delete3:	; Routine 6
0001B9F6 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001B9F6 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001B9FC                            
0001B9FC                            	Obj7A_Delete:
0001B9FC 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001BA02                            
0001BA02                            		include	"_incObj\7A Boss - Star Light.asm"
0001BA02                            ; ---------------------------------------------------------------------------
0001BA02                            ; Object 7A - Eggman (SLZ)
0001BA02                            ; ---------------------------------------------------------------------------
0001BA02                            
0001BA02                            BossStarLight:
0001BA02 7000                       		moveq	#0,d0
0001BA04 1028 0024                  		move.b	obRoutine(a0),d0
0001BA08 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001BA0C 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001BA10                            ; ===========================================================================
0001BA10 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001BA12 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001BA14 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001BA16 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001BA18 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001BA1A                            
0001BA1A 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BA1E 0401 0200                  		dc.b 4,	1, $02, $00
0001BA22 0607 0200                  		dc.b 6,	7, $02, $00
0001BA26 0800 0180                  		dc.b 8,	0, $01, $80
0001BA2A                            ; ===========================================================================
0001BA2A                            
0001BA2A                            Obj7A_Main:
0001BA2A 317C 2188 0008             		move.w	#$2188,obX(a0)
0001BA30 317C 0228 000C             		move.w	#$228,obY(a0)
0001BA36 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BA3C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BA42 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BA48 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BA4E 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001BA52 2248                       		movea.l	a0,a1
0001BA54 7203                       		moveq	#3,d1
0001BA56 6000                       		bra.s	Obj7A_LoadBoss
0001BA58                            ; ===========================================================================
0001BA58                            
0001BA58                            Obj7A_Loop:
0001BA58 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001BA5E 6600                       		bne.s	loc_1895C
0001BA60 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001BA64 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BA6A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BA70                            
0001BA70                            Obj7A_LoadBoss:
0001BA70 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BA76 4229 0025                  		clr.b	ob2ndRout(a1)
0001BA7A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BA7E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BA82 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001BA86 237C 0001 AE20 0004        		move.l	#Map_Eggman,obMap(a1)
0001BA8E 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BA94 137C 0004 0001             		move.b	#4,obRender(a1)
0001BA9A 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BAA0 2348 0034                  		move.l	a0,$34(a1)
0001BAA4 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001BAA8                            
0001BAA8                            loc_1895C:
0001BAA8 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BAAC 45E8 002A                  		lea	$2A(a0),a2
0001BAB0 705E                       		moveq	#$5E,d0
0001BAB2 723E                       		moveq	#$3E,d1
0001BAB4                            
0001BAB4                            loc_18968:
0001BAB4 B011                       		cmp.b	(a1),d0
0001BAB6 6600                       		bne.s	loc_18974
0001BAB8 4A29 0028                  		tst.b	obSubtype(a1)
0001BABC 6700                       		beq.s	loc_18974
0001BABE 34C9                       		move.w	a1,(a2)+
0001BAC0                            
0001BAC0                            loc_18974:
0001BAC0 D2FC 0040                  		adda.w	#$40,a1
0001BAC4 51C9 FFEE                  		dbf	d1,loc_18968
0001BAC8                            
0001BAC8                            Obj7A_ShipMain:	; Routine 2
0001BAC8 7000                       		moveq	#0,d0
0001BACA 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BACE 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001BAD2 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001BAD6 43F9 0001 ADD0             		lea	(Ani_Eggman).l,a1
0001BADC 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001BAE2 7003                       		moveq	#3,d0
0001BAE4 C028 0022                  		and.b	obStatus(a0),d0
0001BAE8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BAEE 8128 0001                  		or.b	d0,obRender(a0)
0001BAF2 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001BAF8                            ; ===========================================================================
0001BAF8 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001BAFA 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001BAFC 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001BAFE 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001BB00 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001BB02 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001BB04                            ; ===========================================================================
0001BB04                            
0001BB04                            loc_189B8:
0001BB04 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BB0A 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001BB10 6400                       		bcc.s	loc_189CA
0001BB12 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB16                            
0001BB16                            loc_189CA:
0001BB16 6100 EEA4                  		bsr.w	BossMove
0001BB1A 1028 003F                  		move.b	$3F(a0),d0
0001BB1E 5428 003F                  		addq.b	#2,$3F(a0)
0001BB22 4EB9 0000 3A36             		jsr	(CalcSine).l
0001BB28 EC40                       		asr.w	#6,d0
0001BB2A D068 0038                  		add.w	$38(a0),d0
0001BB2E 3140 000C                  		move.w	d0,obY(a0)
0001BB32 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BB38 6000                       		bra.s	loc_189FE
0001BB3A                            ; ===========================================================================
0001BB3A                            
0001BB3A                            loc_189EE:
0001BB3A 6100 EE80                  		bsr.w	BossMove
0001BB3E 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BB44 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BB4A                            
0001BB4A                            loc_189FE:
0001BB4A 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001BB50 6400                       		bcc.s	locret_18A44
0001BB52 4A28 0022                  		tst.b	obStatus(a0)
0001BB56 6B00                       		bmi.s	loc_18A46
0001BB58 4A28 0020                  		tst.b	obColType(a0)
0001BB5C 6600                       		bne.s	locret_18A44
0001BB5E 4A28 003E                  		tst.b	$3E(a0)
0001BB62 6600                       		bne.s	loc_18A28
0001BB64 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BB74                            
0001BB74                            loc_18A28:
0001BB74 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BB78 7000                       		moveq	#0,d0
0001BB7A 4A51                       		tst.w	(a1)
0001BB7C 6600                       		bne.s	loc_18A36
0001BB7E 303C 0EEE                  		move.w	#cWhite,d0
0001BB82                            
0001BB82                            loc_18A36:
0001BB82 3280                       		move.w	d0,(a1)
0001BB84 5328 003E                  		subq.b	#1,$3E(a0)
0001BB88 6600                       		bne.s	locret_18A44
0001BB8A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BB90                            
0001BB90                            locret_18A44:
0001BB90 4E75                       		rts	
0001BB92                            ; ===========================================================================
0001BB92                            
0001BB92                            loc_18A46:
0001BB92 7064                       		moveq	#100,d0
0001BB94 6100 0000                  		bsr.w	AddPoints
0001BB98 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001BB9E 117C 0078 003C             		move.b	#$78,$3C(a0)
0001BBA4 4268 0010                  		clr.w	obVelX(a0)
0001BBA8 4E75                       		rts	
0001BBAA                            ; ===========================================================================
0001BBAA                            
0001BBAA                            loc_18A5E:
0001BBAA 3028 0030                  		move.w	$30(a0),d0
0001BBAE 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001BBB4 0828 0000 0022             		btst	#0,obStatus(a0)
0001BBBA 6600                       		bne.s	loc_18A7C
0001BBBC 4468 0010                  		neg.w	obVelX(a0)
0001BBC0 0C40 2008                  		cmpi.w	#$2008,d0
0001BBC4 6E00                       		bgt.s	loc_18A88
0001BBC6 6000                       		bra.s	loc_18A82
0001BBC8                            ; ===========================================================================
0001BBC8                            
0001BBC8                            loc_18A7C:
0001BBC8 0C40 2138                  		cmpi.w	#$2138,d0
0001BBCC 6D00                       		blt.s	loc_18A88
0001BBCE                            
0001BBCE                            loc_18A82:
0001BBCE 0868 0000 0022             		bchg	#0,obStatus(a0)
0001BBD4                            
0001BBD4                            loc_18A88:
0001BBD4 3028 0008                  		move.w	8(a0),d0
0001BBD8 72FF                       		moveq	#-1,d1
0001BBDA 7402                       		moveq	#2,d2
0001BBDC 45E8 002A                  		lea	$2A(a0),a2
0001BBE0 7828                       		moveq	#$28,d4
0001BBE2 4A68 0010                  		tst.w	obVelX(a0)
0001BBE6 6A00                       		bpl.s	loc_18A9E
0001BBE8 4444                       		neg.w	d4
0001BBEA                            
0001BBEA                            loc_18A9E:
0001BBEA 321A                       		move.w	(a2)+,d1
0001BBEC 2641                       		movea.l	d1,a3
0001BBEE 082B 0003 0022             		btst	#3,obStatus(a3)
0001BBF4 6600                       		bne.s	loc_18AB4
0001BBF6 362B 0008                  		move.w	8(a3),d3
0001BBFA D644                       		add.w	d4,d3
0001BBFC 9640                       		sub.w	d0,d3
0001BBFE 6700                       		beq.s	loc_18AC0
0001BC00                            
0001BC00                            loc_18AB4:
0001BC00 51CA FFE8                  		dbf	d2,loc_18A9E
0001BC04                            
0001BC04 1142 0028                  		move.b	d2,obSubtype(a0)
0001BC08 6000 FF0C                  		bra.w	loc_189CA
0001BC0C                            ; ===========================================================================
0001BC0C                            
0001BC0C                            loc_18AC0:
0001BC0C 1142 0028                  		move.b	d2,obSubtype(a0)
0001BC10 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC14 117C 0028 003C             		move.b	#$28,$3C(a0)
0001BC1A 6000 FEFA                  		bra.w	loc_189CA
0001BC1E                            ; ===========================================================================
0001BC1E                            
0001BC1E                            Obj7A_MakeBall:
0001BC1E 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001BC24 6600                       		bne.s	loc_18B36
0001BC26 70FF                       		moveq	#-1,d0
0001BC28 1028 0028                  		move.b	obSubtype(a0),d0
0001BC2C 4880                       		ext.w	d0
0001BC2E 6B00                       		bmi.s	loc_18B40
0001BC30 5540                       		subq.w	#2,d0
0001BC32 4440                       		neg.w	d0
0001BC34 D040                       		add.w	d0,d0
0001BC36 43E8 002A                  		lea	$2A(a0),a1
0001BC3A 3031 0000                  		move.w	(a1,d0.w),d0
0001BC3E 2440                       		movea.l	d0,a2
0001BC40 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BC44 723E                       		moveq	#$3E,d1
0001BC46                            
0001BC46                            loc_18AFA:
0001BC46 B0A9 003C                  		cmp.l	$3C(a1),d0
0001BC4A 6700                       		beq.s	loc_18B40
0001BC4C D2FC 0040                  		adda.w	#$40,a1
0001BC50 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BC54                            
0001BC54 2F08                       		move.l	a0,-(sp)
0001BC56 41D2                       		lea	(a2),a0
0001BC58 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001BC5E 205F                       		movea.l	(sp)+,a0
0001BC60 6600                       		bne.s	loc_18B40
0001BC62 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BC66 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BC6C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BC72 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BC78 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BC7E 234A 003C                  		move.l	a2,$3C(a1)
0001BC82                            
0001BC82                            loc_18B36:
0001BC82 5328 003C                  		subq.b	#1,$3C(a0)
0001BC86 6700                       		beq.s	loc_18B40
0001BC88 6000 FEC0                  		bra.w	loc_189FE
0001BC8C                            ; ===========================================================================
0001BC8C                            
0001BC8C                            loc_18B40:
0001BC8C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BC90 6000 FE84                  		bra.w	loc_189CA
0001BC94                            ; ===========================================================================
0001BC94                            
0001BC94                            loc_18B48:
0001BC94 5328 003C                  		subq.b	#1,$3C(a0)
0001BC98 6B00                       		bmi.s	loc_18B52
0001BC9A 6000 ECDE                  		bra.w	BossDefeated
0001BC9E                            ; ===========================================================================
0001BC9E                            
0001BC9E                            loc_18B52:
0001BC9E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BCA2 4268 0012                  		clr.w	obVelY(a0)
0001BCA6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BCAC 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BCB2 4268 0010                  		clr.w	obVelX(a0)
0001BCB6 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BCBC 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BCC0 6600                       		bne.s	loc_18B7C
0001BCC2 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BCC8                            
0001BCC8                            loc_18B7C:
0001BCC8 6000 FE80                  		bra.w	loc_189FE
0001BCCC                            ; ===========================================================================
0001BCCC                            
0001BCCC                            loc_18B80:
0001BCCC 5228 003C                  		addq.b	#1,$3C(a0)
0001BCD0 6700                       		beq.s	loc_18B90
0001BCD2 6A00                       		bpl.s	loc_18B96
0001BCD4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BCDA 6000                       		bra.s	loc_18BC2
0001BCDC                            ; ===========================================================================
0001BCDC                            
0001BCDC                            loc_18B90:
0001BCDC 4268 0012                  		clr.w	obVelY(a0)
0001BCE0 6000                       		bra.s	loc_18BC2
0001BCE2                            ; ===========================================================================
0001BCE2                            
0001BCE2                            loc_18B96:
0001BCE2 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BCE8 6500                       		bcs.s	loc_18BAE
0001BCEA 6700                       		beq.s	loc_18BB4
0001BCEC 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BCF2 6500                       		bcs.s	loc_18BC2
0001BCF4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BCF8 6000                       		bra.s	loc_18BC2
0001BCFA                            ; ===========================================================================
0001BCFA                            
0001BCFA                            loc_18BAE:
0001BCFA 5168 0012                  		subq.w	#8,obVelY(a0)
0001BCFE 6000                       		bra.s	loc_18BC2
0001BD00                            ; ===========================================================================
0001BD00                            
0001BD00                            loc_18BB4:
0001BD00 4268 0012                          	clr.w    obVelY(a0)
0001BD04 4A38 FE2D                          	tst.b     (v_invinc).w
0001BD08 6600                               	bne.s   @boss_invinc
0001BD0A                            
0001BD0A 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BD0E 6000 0000                          	bra.w      @boss_play
0001BD12                            
0001BD12                            	@boss_invinc:
0001BD12 103C 0000                          	move.b #bgm_Invincible,d0
0001BD16                            
0001BD16                            	@boss_play:
0001BD16 4EB8 124E                          	jsr PlaySound
0001BD1A                            
0001BD1A                            loc_18BC2:
0001BD1A 6000 FE1E                  		bra.w	loc_189EE
0001BD1E                            ; ===========================================================================
0001BD1E                            
0001BD1E                            loc_18BC6:
0001BD1E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BD24 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BD2A 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BD30 6400                       		bcc.s	loc_18BE0
0001BD32 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BD36 6000                       		bra.s	loc_18BE8
0001BD38                            ; ===========================================================================
0001BD38                            
0001BD38                            loc_18BE0:
0001BD38 4A28 0001                  		tst.b	obRender(a0)
0001BD3C 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BD40                            
0001BD40                            loc_18BE8:
0001BD40 6100 EC7A                  		bsr.w	BossMove
0001BD44 6000 FDD0                  		bra.w	loc_189CA
0001BD48                            ; ===========================================================================
0001BD48                            
0001BD48                            Obj7A_FaceMain:	; Routine 4
0001BD48 7000                       		moveq	#0,d0
0001BD4A 7201                       		moveq	#1,d1
0001BD4C 2268 0034                  		movea.l	$34(a0),a1
0001BD50 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BD54 0C00 0006                  		cmpi.b	#6,d0
0001BD58 6B00                       		bmi.s	loc_18C06
0001BD5A 720A                       		moveq	#$A,d1
0001BD5C 6000                       		bra.s	loc_18C1A
0001BD5E                            ; ===========================================================================
0001BD5E                            
0001BD5E                            loc_18C06:
0001BD5E 4A29 0020                  		tst.b	obColType(a1)
0001BD62 6600                       		bne.s	loc_18C10
0001BD64 7205                       		moveq	#5,d1
0001BD66 6000                       		bra.s	loc_18C1A
0001BD68                            ; ===========================================================================
0001BD68                            
0001BD68                            loc_18C10:
0001BD68 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BD6E 6500                       		bcs.s	loc_18C1A
0001BD70 7204                       		moveq	#4,d1
0001BD72                            
0001BD72                            loc_18C1A:
0001BD72 1141 001C                  		move.b	d1,obAnim(a0)
0001BD76 0C00 000A                  		cmpi.b	#$A,d0
0001BD7A 6600                       		bne.s	loc_18C32
0001BD7C 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BD82 4A28 0001                  		tst.b	obRender(a0)
0001BD86 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BD8A                            
0001BD8A                            loc_18C32:
0001BD8A 6000                       		bra.s	loc_18C6C
0001BD8C                            ; ===========================================================================
0001BD8C                            
0001BD8C                            Obj7A_FlameMain:; Routine 6
0001BD8C 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BD92 2268 0034                  		movea.l	$34(a0),a1
0001BD96 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BD9C 6600                       		bne.s	loc_18C56
0001BD9E 4A28 0001                  		tst.b	obRender(a0)
0001BDA2 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BDA6 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BDAC 6000                       		bra.s	loc_18C6C
0001BDAE                            ; ===========================================================================
0001BDAE                            
0001BDAE                            loc_18C56:
0001BDAE 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BDB4 6E00                       		bgt.s	loc_18C6C
0001BDB6 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BDBC 6D00                       		blt.s	loc_18C6C
0001BDBE 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BDC4                            
0001BDC4                            loc_18C6C:
0001BDC4 43F9 0001 ADD0             		lea	(Ani_Eggman).l,a1
0001BDCA 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001BDD0                            
0001BDD0                            loc_18C78:
0001BDD0 2268 0034                  		movea.l	$34(a0),a1
0001BDD4 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BDDA 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BDE0 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BDE6 7003                       		moveq	#3,d0
0001BDE8 C028 0022                  		and.b	obStatus(a0),d0
0001BDEC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BDF2 8128 0001                  		or.b	d0,obRender(a0)
0001BDF6 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001BDFC                            ; ===========================================================================
0001BDFC                            
0001BDFC                            Obj7A_TubeMain:	; Routine 8
0001BDFC 2268 0034                  		movea.l	$34(a0),a1
0001BE00 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BE06 6600                       		bne.s	loc_18CB8
0001BE08 4A28 0001                  		tst.b	obRender(a0)
0001BE0C 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BE10                            
0001BE10                            loc_18CB8:
0001BE10 217C 0001 AF10 0004        		move.l	#Map_BossItems,obMap(a0)
0001BE18 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BE1E 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BE24 60AA                       		bra.s	loc_18C78
0001BE24 60AA                       		bra.s	loc_18C78
0001BE26                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BE26                            ; ---------------------------------------------------------------------------
0001BE26                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BE26                            ; ---------------------------------------------------------------------------
0001BE26                            
0001BE26                            BossSpikeball:
0001BE26 7000                       		moveq	#0,d0
0001BE28 1028 0024                  		move.b	obRoutine(a0),d0
0001BE2C 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BE30 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BE34 3028 0030                  		move.w	$30(a0),d0
0001BE38 0240 FF80                  		andi.w	#$FF80,d0
0001BE3C 3238 F700                  		move.w	(v_screenposx).w,d1
0001BE40 0441 0080                  		subi.w	#$80,d1
0001BE44 0241 FF80                  		andi.w	#$FF80,d1
0001BE48 9041                       		sub.w	d1,d0
0001BE4A 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BE4E 0C40 0280                  		cmpi.w	#$280,d0
0001BE52 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BE56 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001BE5C                            ; ===========================================================================
0001BE5C 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BE5E 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BE60 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BE62 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BE64 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BE66 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BE68                            ; ===========================================================================
0001BE68                            
0001BE68                            Obj7B_Main:	; Routine 0
0001BE68 217C 0001 3DFE 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BE70 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BE76 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BE7C 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BE82 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BE88 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BE8E 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BE94 2268 003C                  		movea.l	$3C(a0),a1
0001BE98 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BE9E 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BEA4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BEAA 3028 0008                  		move.w	obX(a0),d0
0001BEAE B069 0008                  		cmp.w	obX(a1),d0
0001BEB2 6E00                       		bgt.s	loc_18D68
0001BEB4 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BEBA 117C 0002 003A             		move.b	#2,$3A(a0)
0001BEC0                            
0001BEC0                            loc_18D68:
0001BEC0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BEC4                            
0001BEC4                            Obj7B_Fall:	; Routine 2
0001BEC4 4EB9 0000 F93E             		jsr	(ObjectFall).l
0001BECA 2268 003C                  		movea.l	$3C(a0),a1
0001BECE 45F9 0000 0000             		lea	(word_19018).l,a2
0001BED4 7000                       		moveq	#0,d0
0001BED6 1029 001A                  		move.b	obFrame(a1),d0
0001BEDA 3228 0008                  		move.w	8(a0),d1
0001BEDE 9268 0030                  		sub.w	$30(a0),d1
0001BEE2 6400                       		bcc.s	loc_18D8E
0001BEE4 5440                       		addq.w	#2,d0
0001BEE6                            
0001BEE6                            loc_18D8E:
0001BEE6 D040                       		add.w	d0,d0
0001BEE8 3228 0034                  		move.w	$34(a0),d1
0001BEEC D272 0000                  		add.w	(a2,d0.w),d1
0001BEF0 B268 000C                  		cmp.w	obY(a0),d1
0001BEF4 6E00                       		bgt.s	locret_18DC4
0001BEF6 2268 003C                  		movea.l	$3C(a0),a1
0001BEFA 7202                       		moveq	#2,d1
0001BEFC 0828 0000 0022             		btst	#0,obStatus(a0)
0001BF02 6700                       		beq.s	loc_18DAE
0001BF04 7200                       		moveq	#0,d1
0001BF06                            
0001BF06                            loc_18DAE:
0001BF06 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BF0C 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BF12 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BF18 6000 0000                  		bra.w	loc_18FA2
0001BF1C                            ; ===========================================================================
0001BF1C                            
0001BF1C                            locret_18DC4:
0001BF1C 4E75                       		rts	
0001BF1E                            ; ===========================================================================
0001BF1E                            
0001BF1E                            loc_18DC6:	; Routine 4
0001BF1E 2268 003C                  		movea.l	$3C(a0),a1
0001BF22 7000                       		moveq	#0,d0
0001BF24 1028 003A                  		move.b	$3A(a0),d0
0001BF28 9029 003A                  		sub.b	$3A(a1),d0
0001BF2C 6700                       		beq.s	loc_18E2A
0001BF2E 6400                       		bcc.s	loc_18DDA
0001BF30 4400                       		neg.b	d0
0001BF32                            
0001BF32                            loc_18DDA:
0001BF32 323C F7E8                  		move.w	#-$818,d1
0001BF36 343C FEEC                  		move.w	#-$114,d2
0001BF3A 0C00 0001                  		cmpi.b	#1,d0
0001BF3E 6700                       		beq.s	loc_18E00
0001BF40 323C F6A0                  		move.w	#-$960,d1
0001BF44 343C FF0C                  		move.w	#-$F4,d2
0001BF48 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BF4E 6D00                       		blt.s	loc_18E00
0001BF50 323C F5E0                  		move.w	#-$A20,d1
0001BF54 343C FF80                  		move.w	#-$80,d2
0001BF58                            
0001BF58                            loc_18E00:
0001BF58 3141 0012                  		move.w	d1,obVelY(a0)
0001BF5C 3142 0010                  		move.w	d2,obVelX(a0)
0001BF60 3028 0008                  		move.w	obX(a0),d0
0001BF64 9068 0030                  		sub.w	$30(a0),d0
0001BF68 6400                       		bcc.s	loc_18E16
0001BF6A 4468 0010                  		neg.w	obVelX(a0)
0001BF6E                            
0001BF6E                            loc_18E16:
0001BF6E 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BF74 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BF7A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BF7E 6000 0000                  		bra.w	loc_18EAA
0001BF82                            ; ===========================================================================
0001BF82                            
0001BF82                            loc_18E2A:
0001BF82 45F9 0000 0000             		lea	(word_19018).l,a2
0001BF88 7000                       		moveq	#0,d0
0001BF8A 1029 001A                  		move.b	obFrame(a1),d0
0001BF8E 343C 0028                  		move.w	#$28,d2
0001BF92 3228 0008                  		move.w	obX(a0),d1
0001BF96 9268 0030                  		sub.w	$30(a0),d1
0001BF9A 6400                       		bcc.s	loc_18E48
0001BF9C 4442                       		neg.w	d2
0001BF9E 5440                       		addq.w	#2,d0
0001BFA0                            
0001BFA0                            loc_18E48:
0001BFA0 D040                       		add.w	d0,d0
0001BFA2 3228 0034                  		move.w	$34(a0),d1
0001BFA6 D272 0000                  		add.w	(a2,d0.w),d1
0001BFAA 3141 000C                  		move.w	d1,obY(a0)
0001BFAE D468 0030                  		add.w	$30(a0),d2
0001BFB2 3142 0008                  		move.w	d2,obX(a0)
0001BFB6 4268 000E                  		clr.w	obY+2(a0)
0001BFBA 4268 000A                  		clr.w	obX+2(a0)
0001BFBE 5368 0028                  		subq.w	#1,obSubtype(a0)
0001BFC2 6600                       		bne.s	loc_18E7A
0001BFC4 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BFCA 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001BFD0 4E75                       		rts	
0001BFD2                            ; ===========================================================================
0001BFD2                            
0001BFD2                            loc_18E7A:
0001BFD2 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001BFD8 6600                       		bne.s	loc_18E88
0001BFDA 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001BFE0                            
0001BFE0                            loc_18E88:
0001BFE0 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001BFE6 6600                       		bne.s	loc_18E96
0001BFE8 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001BFEE                            
0001BFEE                            loc_18E96:
0001BFEE 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001BFF2 6E00                       		bgt.s	locret_18EA8
0001BFF4 0868 0000 001A             		bchg	#0,obFrame(a0)
0001BFFA 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001C000                            
0001C000                            locret_18EA8:
0001C000 4E75                       		rts	
0001C002                            ; ===========================================================================
0001C002                            
0001C002                            loc_18EAA:	; Routine 6
0001C002 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C006 707A                       		moveq	#id_BossStarLight,d0
0001C008 7240                       		moveq	#$40,d1
0001C00A 743E                       		moveq	#$3E,d2
0001C00C                            
0001C00C                            loc_18EB4:
0001C00C B011                       		cmp.b	(a1),d0
0001C00E 6700                       		beq.s	loc_18EC0
0001C010 D2C1                       		adda.w	d1,a1
0001C012 51CA FFF8                  		dbf	d2,loc_18EB4
0001C016                            
0001C016 6000                       		bra.s	loc_18F38
0001C018                            ; ===========================================================================
0001C018                            
0001C018                            loc_18EC0:
0001C018 3029 0008                  		move.w	obX(a1),d0
0001C01C 3229 000C                  		move.w	obY(a1),d1
0001C020 3428 0008                  		move.w	obX(a0),d2
0001C024 3628 000C                  		move.w	obY(a0),d3
0001C028 45FA 0000                  		lea	byte_19022(pc),a2
0001C02C 47FA 0000                  		lea	byte_19026(pc),a3
0001C030 181A                       		move.b	(a2)+,d4
0001C032 4884                       		ext.w	d4
0001C034 D044                       		add.w	d4,d0
0001C036 181B                       		move.b	(a3)+,d4
0001C038 4884                       		ext.w	d4
0001C03A D444                       		add.w	d4,d2
0001C03C B440                       		cmp.w	d0,d2
0001C03E 6500                       		bcs.s	loc_18F38
0001C040 181A                       		move.b	(a2)+,d4
0001C042 4884                       		ext.w	d4
0001C044 D044                       		add.w	d4,d0
0001C046 181B                       		move.b	(a3)+,d4
0001C048 4884                       		ext.w	d4
0001C04A D444                       		add.w	d4,d2
0001C04C B042                       		cmp.w	d2,d0
0001C04E 6500                       		bcs.s	loc_18F38
0001C050 181A                       		move.b	(a2)+,d4
0001C052 4884                       		ext.w	d4
0001C054 D244                       		add.w	d4,d1
0001C056 181B                       		move.b	(a3)+,d4
0001C058 4884                       		ext.w	d4
0001C05A D644                       		add.w	d4,d3
0001C05C B641                       		cmp.w	d1,d3
0001C05E 6500                       		bcs.s	loc_18F38
0001C060 181A                       		move.b	(a2)+,d4
0001C062 4884                       		ext.w	d4
0001C064 D244                       		add.w	d4,d1
0001C066 181B                       		move.b	(a3)+,d4
0001C068 4884                       		ext.w	d4
0001C06A D644                       		add.w	d4,d3
0001C06C B243                       		cmp.w	d3,d1
0001C06E 6500                       		bcs.s	loc_18F38
0001C070 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C074 4268 0028                  		clr.w	obSubtype(a0)
0001C078 4229 0020                  		clr.b	obColType(a1)
0001C07C 5329 0021                  		subq.b	#1,obColProp(a1)
0001C080 6600                       		bne.s	loc_18F38
0001C082 08E9 0007 0022             		bset	#7,obStatus(a1)
0001C088 4268 0010                  		clr.w	obVelX(a0)
0001C08C 4268 0012                  		clr.w	obVelY(a0)
0001C090                            
0001C090                            loc_18F38:
0001C090 4A68 0012                  		tst.w	obVelY(a0)
0001C094 6A00                       		bpl.s	loc_18F5C
0001C096 4EB9 0000 F93E             		jsr	(ObjectFall).l
0001C09C 3028 0034                  		move.w	$34(a0),d0
0001C0A0 0440 002F                  		subi.w	#$2F,d0
0001C0A4 B068 000C                  		cmp.w	obY(a0),d0
0001C0A8 6E00                       		bgt.s	loc_18F58
0001C0AA 4EB9 0000 F93E             		jsr	(ObjectFall).l
0001C0B0                            
0001C0B0                            loc_18F58:
0001C0B0 6000 FF20                  		bra.w	loc_18E7A
0001C0B4                            ; ===========================================================================
0001C0B4                            
0001C0B4                            loc_18F5C:
0001C0B4 4EB9 0000 F93E             		jsr	(ObjectFall).l
0001C0BA 2268 003C                  		movea.l	$3C(a0),a1
0001C0BE 45F9 0000 0000             		lea	(word_19018).l,a2
0001C0C4 7000                       		moveq	#0,d0
0001C0C6 1029 001A                  		move.b	obFrame(a1),d0
0001C0CA 3228 0008                  		move.w	obX(a0),d1
0001C0CE 9268 0030                  		sub.w	$30(a0),d1
0001C0D2 6400                       		bcc.s	loc_18F7E
0001C0D4 5440                       		addq.w	#2,d0
0001C0D6                            
0001C0D6                            loc_18F7E:
0001C0D6 D040                       		add.w	d0,d0
0001C0D8 3228 0034                  		move.w	$34(a0),d1
0001C0DC D272 0000                  		add.w	(a2,d0.w),d1
0001C0E0 B268 000C                  		cmp.w	obY(a0),d1
0001C0E4 6ECA                       		bgt.s	loc_18F58
0001C0E6 2268 003C                  		movea.l	$3C(a0),a1
0001C0EA 7202                       		moveq	#2,d1
0001C0EC 4A68 0010                  		tst.w	obVelX(a0)
0001C0F0 6B00                       		bmi.s	loc_18F9C
0001C0F2 7200                       		moveq	#0,d1
0001C0F4                            
0001C0F4                            loc_18F9C:
0001C0F4 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001C0FA                            
0001C0FA                            loc_18FA2:
0001C0FA 1341 003A                  		move.b	d1,$3A(a1)
0001C0FE 1141 003A                  		move.b	d1,$3A(a0)
0001C102 B229 001A                  		cmp.b	obFrame(a1),d1
0001C106 6700                       		beq.s	loc_19008
0001C108 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001C10E 6700                       		beq.s	loc_19008
0001C110 4229 0025                  		clr.b	ob2ndRout(a1)
0001C114 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001C11A 45F8 D000                  		lea	(v_objspace).w,a2
0001C11E 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001C124 446A 0012                  		neg.w	obVelY(a2)
0001C128 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001C12E 6600                       		bne.s	loc_18FDC
0001C130 E0EA 0012                  		asr	obVelY(a2)
0001C134                            
0001C134                            loc_18FDC:
0001C134 08EA 0001 0022             		bset	#1,obStatus(a2)
0001C13A 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001C140 422A 003C                  		clr.b	$3C(a2)
0001C144 2F08                       		move.l	a0,-(sp)
0001C146 41D2                       		lea	(a2),a0
0001C148 4EB9 0001 5FE4             		jsr	(Sonic_ChkRoll).l
0001C14E 205F                       		movea.l	(sp)+,a0
0001C150 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001C160                            
0001C160                            loc_19008:
0001C160 4268 0010                  		clr.w	obVelX(a0)
0001C164 4268 0012                  		clr.w	obVelY(a0)
0001C168 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C16C 6000 FE64                  		bra.w	loc_18E7A
0001C170                            ; ===========================================================================
0001C170 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001C17A                            		even
0001C17A E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001C17E                            		even
0001C17E 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001C182                            		even
0001C182                            ; ===========================================================================
0001C182                            
0001C182                            Obj7B_Explode:	; Routine 8
0001C182 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001C186 4228 0024                  		clr.b	obRoutine(a0)
0001C18A 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001C190 6700                       		beq.s	Obj7B_MakeFrag
0001C192 4E75                       		rts	
0001C194                            ; ===========================================================================
0001C194                            
0001C194                            Obj7B_MakeFrag:
0001C194 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001C19A 7203                       		moveq	#3,d1
0001C19C 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001C1A0                            
0001C1A0                            Obj7B_Loop:
0001C1A0 4EB9 0000 FE16             		jsr	(FindFreeObj).l
0001C1A6 6600                       		bne.s	loc_1909A
0001C1A8 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001C1AC 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001C1B2 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001C1BA 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C1C0 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001C1C6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C1CC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C1D2 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001C1D6 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001C1DA 137C 0098 0020             		move.b	#$98,obColType(a1)
0001C1E0 0029 0004 0001             		ori.b	#4,obRender(a1)
0001C1E6 08E9 0007 0001             		bset	#7,obRender(a1)
0001C1EC 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001C1F2                            
0001C1F2                            loc_1909A:
0001C1F2 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C1F6                            
0001C1F6 4E75                       		rts	
0001C1F8                            ; ===========================================================================
0001C1F8 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001C1FC FF60 FDC0                  		dc.w -$A0, -$240
0001C200 0100 FCC0                  		dc.w $100, -$340
0001C204 00A0 FDC0                  		dc.w $A0, -$240
0001C208                            ; ===========================================================================
0001C208                            
0001C208                            Obj7B_MoveFrag:	; Routine $A
0001C208 4EB9 0000 F976             		jsr	(SpeedToPos).l
0001C20E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C214 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001C21A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C220 7004                       		moveq	#4,d0
0001C222 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C226 E448                       		lsr.w	#2,d0
0001C228 1140 001A                  		move.b	d0,obFrame(a0)
0001C22C 4A28 0001                  		tst.b	1(a0)
0001C230 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C234 4E75                       		rts	
0001C234 4E75                       		rts	
0001C236                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C236                            ; ---------------------------------------------------------------------------
0001C236                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C236                            ; ---------------------------------------------------------------------------
0001C236                            Map_BSBall_internal:
0001C236 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C238 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C23A 01                         @fireball1:	dc.b 1
0001C23B FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C240 01                         @fireball2:	dc.b 1
0001C241 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C246                            		even
0001C246                            		even
0001C246                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C246                            ; ---------------------------------------------------------------------------
0001C246                            ; Object 75 - Eggman (SYZ)
0001C246                            ; ---------------------------------------------------------------------------
0001C246                            
0001C246                            BossSpringYard:
0001C246 7000                       		moveq	#0,d0
0001C248 1028 0024                  		move.b	obRoutine(a0),d0
0001C24C 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C250 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C254                            ; ===========================================================================
0001C254 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C256 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C258 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C25A 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C25C 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C25E                            
0001C25E 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001C262 0401 0280                  		dc.b 4,	1, $02, $80
0001C266 0607 0280                  		dc.b 6,	7, $02, $80
0001C26A 0800 0280                  		dc.b 8,	0, $02, $80
0001C26E                            ; ===========================================================================
0001C26E                            
0001C26E                            Obj75_Main:	; Routine 0
0001C26E 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C274 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C27A 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C280 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C286 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C28C 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C292 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C296 2248                       		movea.l	a0,a1
0001C298 7203                       		moveq	#3,d1
0001C29A 6000                       		bra.s	Obj75_LoadBoss
0001C29C                            ; ===========================================================================
0001C29C                            
0001C29C                            Obj75_Loop:
0001C29C 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001C2A2 6600                       		bne.s	Obj75_ShipMain
0001C2A4 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C2A8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C2AE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C2B4                            
0001C2B4                            Obj75_LoadBoss:
0001C2B4 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C2BA 4229 0025                  		clr.b	ob2ndRout(a1)
0001C2BE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C2C2 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C2C6 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C2CA 237C 0001 AE20 0004        		move.l	#Map_Eggman,obMap(a1)
0001C2D2 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C2D8 137C 0004 0001             		move.b	#4,obRender(a1)
0001C2DE 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C2E4 2348 0034                  		move.l	a0,$34(a1)
0001C2E8 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C2EC                            
0001C2EC                            Obj75_ShipMain:	; Routine 2
0001C2EC 7000                       		moveq	#0,d0
0001C2EE 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C2F2 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C2F6 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C2FA 43F9 0001 ADD0             		lea	(Ani_Eggman).l,a1
0001C300 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001C306 7003                       		moveq	#3,d0
0001C308 C028 0022                  		and.b	obStatus(a0),d0
0001C30C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C312 8128 0001                  		or.b	d0,obRender(a0)
0001C316 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001C31C                            ; ===========================================================================
0001C31C 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C320 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C324 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C328                            ; ===========================================================================
0001C328                            
0001C328                            loc_191CC:
0001C328 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C32E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C334 6400                       		bcc.s	loc_191DE
0001C336 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C33A                            
0001C33A                            loc_191DE:
0001C33A 1028 003F                  		move.b	$3F(a0),d0
0001C33E 5428 003F                  		addq.b	#2,$3F(a0)
0001C342 4EB9 0000 3A36             		jsr	(CalcSine).l
0001C348 E440                       		asr.w	#2,d0
0001C34A 3140 0012                  		move.w	d0,obVelY(a0)
0001C34E                            
0001C34E                            loc_191F2:
0001C34E 6100 E66C                  		bsr.w	BossMove
0001C352 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C358 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C35E                            
0001C35E                            loc_19202:
0001C35E 3028 0008                  		move.w	8(a0),d0
0001C362 0440 2C00                  		subi.w	#$2C00,d0
0001C366 EA48                       		lsr.w	#5,d0
0001C368 1140 0034                  		move.b	d0,$34(a0)
0001C36C 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C372 6400                       		bcc.s	locret_19256
0001C374 4A28 0022                  		tst.b	obStatus(a0)
0001C378 6B00                       		bmi.s	loc_19258
0001C37A 4A28 0020                  		tst.b	obColType(a0)
0001C37E 6600                       		bne.s	locret_19256
0001C380 4A28 003E                  		tst.b	$3E(a0)
0001C384 6600                       		bne.s	loc_1923A
0001C386 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C396                            
0001C396                            loc_1923A:
0001C396 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C39A 7000                       		moveq	#0,d0
0001C39C 4A51                       		tst.w	(a1)
0001C39E 6600                       		bne.s	loc_19248
0001C3A0 303C 0EEE                  		move.w	#cWhite,d0
0001C3A4                            
0001C3A4                            loc_19248:
0001C3A4 3280                       		move.w	d0,(a1)
0001C3A6 5328 003E                  		subq.b	#1,$3E(a0)
0001C3AA 6600                       		bne.s	locret_19256
0001C3AC 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C3B2                            
0001C3B2                            locret_19256:
0001C3B2 4E75                       		rts	
0001C3B4                            ; ===========================================================================
0001C3B4                            
0001C3B4                            loc_19258:
0001C3B4 7064                       		moveq	#100,d0
0001C3B6 6100 0000                  		bsr.w	AddPoints
0001C3BA 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C3C0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C3C6 4268 0010                  		clr.w	obVelX(a0)
0001C3CA 4E75                       		rts	
0001C3CC                            ; ===========================================================================
0001C3CC                            
0001C3CC                            loc_19270:
0001C3CC 3028 0030                  		move.w	$30(a0),d0
0001C3D0 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C3D6 0828 0000 0022             		btst	#0,obStatus(a0)
0001C3DC 6600                       		bne.s	loc_1928E
0001C3DE 4468 0010                  		neg.w	obVelX(a0)
0001C3E2 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C3E6 6E00                       		bgt.s	loc_1929E
0001C3E8 6000                       		bra.s	loc_19294
0001C3EA                            ; ===========================================================================
0001C3EA                            
0001C3EA                            loc_1928E:
0001C3EA 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C3EE 6D00                       		blt.s	loc_1929E
0001C3F0                            
0001C3F0                            loc_19294:
0001C3F0 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C3F6 4228 003D                  		clr.b	$3D(a0)
0001C3FA                            
0001C3FA                            loc_1929E:
0001C3FA 0440 2C10                  		subi.w	#$2C10,d0
0001C3FE 0240 001F                  		andi.w	#$1F,d0
0001C402 0440 001F                  		subi.w	#$1F,d0
0001C406 6A00                       		bpl.s	loc_192AE
0001C408 4440                       		neg.w	d0
0001C40A                            
0001C40A                            loc_192AE:
0001C40A 5340                       		subq.w	#1,d0
0001C40C 6E00                       		bgt.s	loc_192E8
0001C40E 4A28 003D                  		tst.b	$3D(a0)
0001C412 6600                       		bne.s	loc_192E8
0001C414 3238 D008                  		move.w	(v_player+obX).w,d1
0001C418 0441 2C00                  		subi.w	#$2C00,d1
0001C41C EA41                       		asr.w	#5,d1
0001C41E B228 0034                  		cmp.b	$34(a0),d1
0001C422 6600                       		bne.s	loc_192E8
0001C424 7000                       		moveq	#0,d0
0001C426 1028 0034                  		move.b	$34(a0),d0
0001C42A EB40                       		asl.w	#5,d0
0001C42C 0640 2C10                  		addi.w	#$2C10,d0
0001C430 3140 0030                  		move.w	d0,$30(a0)
0001C434 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C438 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C43C 4268 0028                  		clr.w	obSubtype(a0)
0001C440 4268 0010                  		clr.w	obVelX(a0)
0001C444                            
0001C444                            loc_192E8:
0001C444 6000 FEF4                  		bra.w	loc_191DE
0001C448                            ; ===========================================================================
0001C448                            
0001C448                            loc_192EC:
0001C448 7000                       		moveq	#0,d0
0001C44A 1028 0028                  		move.b	obSubtype(a0),d0
0001C44E 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C452 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C456                            ; ===========================================================================
0001C456 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C458 0000                       		dc.w loc_19348-off_192FA
0001C45A 0000                       		dc.w loc_1938E-off_192FA
0001C45C 0000                       		dc.w loc_193D0-off_192FA
0001C45E                            ; ===========================================================================
0001C45E                            
0001C45E                            loc_19302:
0001C45E 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C464 3028 0038                  		move.w	$38(a0),d0
0001C468 0C40 0556                  		cmpi.w	#$556,d0
0001C46C 6500                       		bcs.s	loc_19344
0001C46E 317C 0556 0038             		move.w	#$556,$38(a0)
0001C474 4268 003C                  		clr.w	$3C(a0)
0001C478 70FF                       		moveq	#-1,d0
0001C47A 3028 0036                  		move.w	$36(a0),d0
0001C47E 6700                       		beq.s	loc_1933C
0001C480 2240                       		movea.l	d0,a1
0001C482 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C488 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C48E 2348 0034                  		move.l	a0,$34(a1)
0001C492 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C498                            
0001C498                            loc_1933C:
0001C498 4268 0012                  		clr.w	obVelY(a0)
0001C49C 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C4A0                            
0001C4A0                            loc_19344:
0001C4A0 6000 FEAC                  		bra.w	loc_191F2
0001C4A4                            ; ===========================================================================
0001C4A4                            
0001C4A4                            loc_19348:
0001C4A4 5368 003C                  		subq.w	#1,$3C(a0)
0001C4A8 6A00                       		bpl.s	loc_19366
0001C4AA 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C4AE 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C4B4 4A68 0036                  		tst.w	$36(a0)
0001C4B8 6600                       		bne.s	loc_19362
0001C4BA E0E8 0012                  		asr	obVelY(a0)
0001C4BE                            
0001C4BE                            loc_19362:
0001C4BE 7000                       		moveq	#0,d0
0001C4C0 6000                       		bra.s	loc_1937C
0001C4C2                            ; ===========================================================================
0001C4C2                            
0001C4C2                            loc_19366:
0001C4C2 7000                       		moveq	#0,d0
0001C4C4 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C4CA 6E00                       		bgt.s	loc_1937C
0001C4CC 7002                       		moveq	#2,d0
0001C4CE 0828 0001 003D             		btst	#1,$3D(a0)
0001C4D4 6700                       		beq.s	loc_1937C
0001C4D6 4440                       		neg.w	d0
0001C4D8                            
0001C4D8                            loc_1937C:
0001C4D8 D068 0038                  		add.w	$38(a0),d0
0001C4DC 3140 000C                  		move.w	d0,obY(a0)
0001C4E0 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C4E6 6000 FE76                  		bra.w	loc_19202
0001C4EA                            ; ===========================================================================
0001C4EA                            
0001C4EA                            loc_1938E:
0001C4EA 303C 04DA                  		move.w	#$4DA,d0
0001C4EE 4A68 0036                  		tst.w	$36(a0)
0001C4F2 6700                       		beq.s	loc_1939C
0001C4F4 0440 0018                  		subi.w	#$18,d0
0001C4F8                            
0001C4F8                            loc_1939C:
0001C4F8 B068 0038                  		cmp.w	$38(a0),d0
0001C4FC 6D00                       		blt.s	loc_193BE
0001C4FE 317C 0008 003C             		move.w	#8,$3C(a0)
0001C504 4A68 0036                  		tst.w	$36(a0)
0001C508 6700                       		beq.s	loc_193B4
0001C50A 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C510                            
0001C510                            loc_193B4:
0001C510 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C514 4268 0012                  		clr.w	obVelY(a0)
0001C518 6000                       		bra.s	loc_193CC
0001C51A                            ; ===========================================================================
0001C51A                            
0001C51A                            loc_193BE:
0001C51A 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C520 6C00                       		bge.s	loc_193CC
0001C522 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C528                            
0001C528                            loc_193CC:
0001C528 6000 FE24                  		bra.w	loc_191F2
0001C52C                            ; ===========================================================================
0001C52C                            
0001C52C                            loc_193D0:
0001C52C 5368 003C                  		subq.w	#1,$3C(a0)
0001C530 6E00                       		bgt.s	loc_19406
0001C532 6B00                       		bmi.s	loc_193EE
0001C534 70FF                       		moveq	#-1,d0
0001C536 3028 0036                  		move.w	$36(a0),d0
0001C53A 6700                       		beq.s	loc_193E8
0001C53C 2240                       		movea.l	d0,a1
0001C53E 137C 000A 0029             		move.b	#$A,$29(a1)
0001C544                            
0001C544                            loc_193E8:
0001C544 4268 0036                  		clr.w	$36(a0)
0001C548 6000                       		bra.s	loc_19406
0001C54A                            ; ===========================================================================
0001C54A                            
0001C54A                            loc_193EE:
0001C54A 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C550 6600                       		bne.s	loc_19406
0001C552 4228 0029                  		clr.b	$29(a0)
0001C556 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C55A 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C560 6000                       		bra.s	loc_19446
0001C562                            ; ===========================================================================
0001C562                            
0001C562                            loc_19406:
0001C562 7001                       		moveq	#1,d0
0001C564 4A68 0036                  		tst.w	$36(a0)
0001C568 6700                       		beq.s	loc_19410
0001C56A 7002                       		moveq	#2,d0
0001C56C                            
0001C56C                            loc_19410:
0001C56C 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C572 6700                       		beq.s	loc_19424
0001C574 6D00                       		blt.s	loc_1941C
0001C576 4440                       		neg.w	d0
0001C578                            
0001C578                            loc_1941C:
0001C578 4A68 0036                  		tst.w	$36(a0)
0001C57C D168 0038                  		add.w	d0,$38(a0)
0001C580                            
0001C580                            loc_19424:
0001C580 7000                       		moveq	#0,d0
0001C582 4A68 0036                  		tst.w	$36(a0)
0001C586 6700                       		beq.s	loc_19438
0001C588 7002                       		moveq	#2,d0
0001C58A 0828 0000 003D             		btst	#0,$3D(a0)
0001C590 6700                       		beq.s	loc_19438
0001C592 4440                       		neg.w	d0
0001C594                            
0001C594                            loc_19438:
0001C594 D068 0038                  		add.w	$38(a0),d0
0001C598 3140 000C                  		move.w	d0,obY(a0)
0001C59C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C5A2                            
0001C5A2                            loc_19446:
0001C5A2 6000 FDBA                  		bra.w	loc_19202
0001C5A6                            
0001C5A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5A6                            
0001C5A6                            
0001C5A6                            Obj75_FindBlocks:
0001C5A6 4268 0036                  		clr.w	$36(a0)
0001C5AA 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C5AE 703E                       		moveq	#$3E,d0
0001C5B0 7276                       		moveq	#$76,d1
0001C5B2 1428 0034                  		move.b	$34(a0),d2
0001C5B6                            
0001C5B6                            Obj75_FindLoop:
0001C5B6 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C5B8 6600                       		bne.s	loc_1946A	; if not, branch
0001C5BA B429 0028                  		cmp.b	obSubtype(a1),d2
0001C5BE 6600                       		bne.s	loc_1946A
0001C5C0 3149 0036                  		move.w	a1,$36(a0)
0001C5C4 6000                       		bra.s	locret_19472
0001C5C6                            ; ===========================================================================
0001C5C6                            
0001C5C6                            loc_1946A:
0001C5C6 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C5CA 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C5CE                            
0001C5CE                            locret_19472:
0001C5CE 4E75                       		rts	
0001C5D0                            ; End of function Obj75_FindBlocks
0001C5D0                            
0001C5D0                            ; ===========================================================================
0001C5D0                            
0001C5D0                            loc_19474:
0001C5D0 5368 003C                  		subq.w	#1,$3C(a0)
0001C5D4 6B00                       		bmi.s	loc_1947E
0001C5D6 6000 E3A2                  		bra.w	BossDefeated
0001C5DA                            ; ===========================================================================
0001C5DA                            
0001C5DA                            loc_1947E:
0001C5DA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C5DE 4268 0012                  		clr.w	obVelY(a0)
0001C5E2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C5E8 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C5EE 4268 0010                  		clr.w	obVelX(a0)
0001C5F2 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C5F8 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C5FC 6600                       		bne.s	loc_194A8
0001C5FE 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C604                            
0001C604                            loc_194A8:
0001C604 6000 FD58                  		bra.w	loc_19202
0001C608                            ; ===========================================================================
0001C608                            
0001C608                            loc_194AC:
0001C608 5268 003C                  		addq.w	#1,$3C(a0)
0001C60C 6700                       		beq.s	loc_194BC
0001C60E 6A00                       		bpl.s	loc_194C2
0001C610 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C616 6000                       		bra.s	loc_194EE
0001C618                            ; ===========================================================================
0001C618                            
0001C618                            loc_194BC:
0001C618 4268 0012                  		clr.w	obVelY(a0)
0001C61C 6000                       		bra.s	loc_194EE
0001C61E                            ; ===========================================================================
0001C61E                            
0001C61E                            loc_194C2:
0001C61E 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C624 6500                       		bcs.s	loc_194DA
0001C626 6700                       		beq.s	loc_194E0
0001C628 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C62E 6500                       		bcs.s	loc_194EE
0001C630 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C634 6000                       		bra.s	loc_194EE
0001C636                            ; ===========================================================================
0001C636                            
0001C636                            loc_194DA:
0001C636 5168 0012                  		subq.w	#8,obVelY(a0)
0001C63A 6000                       		bra.s	loc_194EE
0001C63C                            ; ===========================================================================
0001C63C                            
0001C63C                            loc_194E0:
0001C63C 4268 0012                  		clr.w    obVelY(a0)
0001C640 4A38 FE2D                          	tst.b     (v_invinc).w
0001C644 6600                               	bne.s   @boss_invinc
0001C646                            
0001C646 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C64A 6000 0000                          	bra.w      @boss_play
0001C64E                            
0001C64E                            @boss_invinc:
0001C64E 103C 0000                          	move.b #bgm_Invincible,d0
0001C652                            
0001C652                            @boss_play:
0001C652 4EB8 124E                          	jsr PlaySound
0001C656                            
0001C656                            loc_194EE:
0001C656 6000 FCF6                  		bra.w	loc_191F2
0001C65A                            ; ===========================================================================
0001C65A                            
0001C65A                            loc_194F2:
0001C65A 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C660 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C666 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C66C 6400                       		bcc.s	loc_1950C
0001C66E 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C672 6000                       		bra.s	loc_19512
0001C674                            ; ===========================================================================
0001C674                            
0001C674                            loc_1950C:
0001C674 4A28 0001                  		tst.b	obRender(a0)
0001C678 6A00                       		bpl.s	Obj75_ShipDelete
0001C67A                            
0001C67A                            loc_19512:
0001C67A 6100 E340                  		bsr.w	BossMove
0001C67E 6000 FCBA                  		bra.w	loc_191DE
0001C682                            ; ===========================================================================
0001C682                            
0001C682                            Obj75_ShipDelete:
0001C682 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001C688                            ; ===========================================================================
0001C688                            
0001C688                            Obj75_FaceMain:	; Routine 4
0001C688 7201                       		moveq	#1,d1
0001C68A 2268 0034                  		movea.l	$34(a0),a1
0001C68E 7000                       		moveq	#0,d0
0001C690 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C694 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C698 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C69C 1141 001C                  		move.b	d1,obAnim(a0)
0001C6A0 1010                       		move.b	(a0),d0
0001C6A2 B011                       		cmp.b	(a1),d0
0001C6A4 6600                       		bne.s	Obj75_FaceDelete
0001C6A6 6000                       		bra.s	loc_195BE
0001C6A8                            ; ===========================================================================
0001C6A8                            
0001C6A8                            Obj75_FaceDelete:
0001C6A8 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001C6AE                            ; ===========================================================================
0001C6AE 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C6B2 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C6B6 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C6BA                            ; ===========================================================================
0001C6BA                            
0001C6BA                            loc_19552:
0001C6BA 720A                       		moveq	#$A,d1
0001C6BC 4E75                       		rts	
0001C6BE                            ; ===========================================================================
0001C6BE                            
0001C6BE                            loc_19556:
0001C6BE 7206                       		moveq	#6,d1
0001C6C0 4E75                       		rts	
0001C6C2                            ; ===========================================================================
0001C6C2                            
0001C6C2                            loc_1955A:
0001C6C2 7000                       		moveq	#0,d0
0001C6C4 1029 0028                  		move.b	obSubtype(a1),d0
0001C6C8 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C6CC 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C6D0                            ; ===========================================================================
0001C6D0 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C6D4 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C6D8                            ; ===========================================================================
0001C6D8                            
0001C6D8                            loc_19570:
0001C6D8 6000                       		bra.s	loc_19574
0001C6DA                            ; ===========================================================================
0001C6DA                            
0001C6DA                            loc_19572:
0001C6DA 7206                       		moveq	#6,d1
0001C6DC                            
0001C6DC                            loc_19574:
0001C6DC 4A29 0020                  		tst.b	obColType(a1)
0001C6E0 6600                       		bne.s	loc_1957E
0001C6E2 7205                       		moveq	#5,d1
0001C6E4 4E75                       		rts	
0001C6E6                            ; ===========================================================================
0001C6E6                            
0001C6E6                            loc_1957E:
0001C6E6 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C6EC 6500                       		bcs.s	locret_19588
0001C6EE 7204                       		moveq	#4,d1
0001C6F0                            
0001C6F0                            locret_19588:
0001C6F0 4E75                       		rts	
0001C6F2                            ; ===========================================================================
0001C6F2                            
0001C6F2                            Obj75_FlameMain:; Routine 6
0001C6F2 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C6F8 2268 0034                  		movea.l	$34(a0),a1
0001C6FC 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C702 6600                       		bne.s	loc_195AA
0001C704 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C70A 4A28 0001                  		tst.b	1(a0)
0001C70E 6A00                       		bpl.s	Obj75_FlameDelete
0001C710 6000                       		bra.s	loc_195B6
0001C712                            ; ===========================================================================
0001C712                            
0001C712                            loc_195AA:
0001C712 4A69 0010                  		tst.w	obVelX(a1)
0001C716 6700                       		beq.s	loc_195B6
0001C718 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C71E                            
0001C71E                            loc_195B6:
0001C71E 6000                       		bra.s	loc_195BE
0001C720                            ; ===========================================================================
0001C720                            
0001C720                            Obj75_FlameDelete:
0001C720 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001C726                            ; ===========================================================================
0001C726                            
0001C726                            loc_195BE:
0001C726 43F9 0001 ADD0             		lea	(Ani_Eggman).l,a1
0001C72C 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001C732 2268 0034                  		movea.l	$34(a0),a1
0001C736 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C73C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C742                            
0001C742                            loc_195DA:
0001C742 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C748 7003                       		moveq	#3,d0
0001C74A C028 0022                  		and.b	obStatus(a0),d0
0001C74E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C754 8128 0001                  		or.b	d0,obRender(a0)
0001C758 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001C75E                            ; ===========================================================================
0001C75E                            
0001C75E                            Obj75_SpikeMain:; Routine 8
0001C75E 217C 0001 AF10 0004        		move.l	#Map_BossItems,obMap(a0)
0001C766 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C76C 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C772 2268 0034                  		movea.l	$34(a0),a1
0001C776 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C77C 6600                       		bne.s	loc_1961C
0001C77E 4A28 0001                  		tst.b	obRender(a0)
0001C782 6A00                       		bpl.s	Obj75_SpikeDelete
0001C784                            
0001C784                            loc_1961C:
0001C784 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C78A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C790 3028 003C                  		move.w	$3C(a0),d0
0001C794 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C79A 6600                       		bne.s	loc_19652
0001C79C 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C7A2 6700                       		beq.s	loc_1964C
0001C7A4 4A29 0028                  		tst.b	obSubtype(a1)
0001C7A8 6600                       		bne.s	loc_19658
0001C7AA 0C40 0094                  		cmpi.w	#$94,d0
0001C7AE 6C00                       		bge.s	loc_19658
0001C7B0 5E40                       		addq.w	#7,d0
0001C7B2 6000                       		bra.s	loc_19658
0001C7B4                            ; ===========================================================================
0001C7B4                            
0001C7B4                            loc_1964C:
0001C7B4 4A69 003C                  		tst.w	$3C(a1)
0001C7B8 6A00                       		bpl.s	loc_19658
0001C7BA                            
0001C7BA                            loc_19652:
0001C7BA 4A40                       		tst.w	d0
0001C7BC 6F00                       		ble.s	loc_19658
0001C7BE 5B40                       		subq.w	#5,d0
0001C7C0                            
0001C7C0                            loc_19658:
0001C7C0 3140 003C                  		move.w	d0,$3C(a0)
0001C7C4 E440                       		asr.w	#2,d0
0001C7C6 D168 000C                  		add.w	d0,obY(a0)
0001C7CA 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C7D0 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C7D6 4228 0020                  		clr.b	obColType(a0)
0001C7DA 2268 0034                  		movea.l	$34(a0),a1
0001C7DE 4A29 0020                  		tst.b	obColType(a1)
0001C7E2 6700                       		beq.s	loc_19688
0001C7E4 4A29 0029                  		tst.b	$29(a1)
0001C7E8 6600                       		bne.s	loc_19688
0001C7EA 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C7F0                            
0001C7F0                            loc_19688:
0001C7F0 6000 FF50                  		bra.w	loc_195DA
0001C7F4                            ; ===========================================================================
0001C7F4                            
0001C7F4                            Obj75_SpikeDelete:
0001C7F4 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001C7F4 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001C7FA                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C7FA                            ; ---------------------------------------------------------------------------
0001C7FA                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C7FA                            ; ---------------------------------------------------------------------------
0001C7FA                            
0001C7FA                            BossBlock:
0001C7FA 7000                       		moveq	#0,d0
0001C7FC 1028 0024                  		move.b	obRoutine(a0),d0
0001C800 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C804 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C808                            ; ===========================================================================
0001C808 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C80A 0000                       		dc.w Obj76_Action-Obj76_Index
0001C80C 0000                       		dc.w loc_19762-Obj76_Index
0001C80E                            ; ===========================================================================
0001C80E                            
0001C80E                            Obj76_Main:	; Routine 0
0001C80E 7800                       		moveq	#0,d4
0001C810 3A3C 2C10                  		move.w	#$2C10,d5
0001C814 7C09                       		moveq	#9,d6
0001C816 43D0                       		lea	(a0),a1
0001C818 6000                       		bra.s	Obj76_MakeBlock
0001C81A                            ; ===========================================================================
0001C81A                            
0001C81A                            Obj76_Loop:
0001C81A 4EB9 0000 FE16             		jsr	(FindFreeObj).l
0001C820 6600                       		bne.s	Obj76_ExitLoop
0001C822                            
0001C822                            Obj76_MakeBlock:
0001C822 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C826 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C82E 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C834 137C 0004 0001             		move.b	#4,obRender(a1)
0001C83A 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C840 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C846 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C84C 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C850 337C 0582 000C             		move.w	#$582,obY(a1)
0001C856 3344 0028                  		move.w	d4,obSubtype(a1)
0001C85A 0644 0101                  		addi.w	#$101,d4
0001C85E 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C862 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C866 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C86A                            
0001C86A                            Obj76_ExitLoop:
0001C86A 4E75                       		rts	
0001C86C                            ; ===========================================================================
0001C86C                            
0001C86C                            Obj76_Action:	; Routine 2
0001C86C 1028 0029                  		move.b	$29(a0),d0
0001C870 B028 0028                  		cmp.b	obSubtype(a0),d0
0001C874 6700                       		beq.s	Obj76_Solid
0001C876 4A00                       		tst.b	d0
0001C878 6B00                       		bmi.s	loc_19718
0001C87A                            
0001C87A                            loc_19712:
0001C87A 6100 0000                  		bsr.w	Obj76_Break
0001C87E 6000                       		bra.s	Obj76_Display
0001C880                            ; ===========================================================================
0001C880                            
0001C880                            loc_19718:
0001C880 2268 0034                  		movea.l	$34(a0),a1
0001C884 4A29 0021                  		tst.b	obColProp(a1)
0001C888 67F0                       		beq.s	loc_19712
0001C88A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C890 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C896 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C89C B2C8                       		cmpa.w	a0,a1
0001C89E 6500                       		bcs.s	Obj76_Display
0001C8A0 3029 0012                  		move.w	obVelY(a1),d0
0001C8A4 48C0                       		ext.l	d0
0001C8A6 E080                       		asr.l	#8,d0
0001C8A8 D168 000C                  		add.w	d0,obY(a0)
0001C8AC 6000                       		bra.s	Obj76_Display
0001C8AE                            ; ===========================================================================
0001C8AE                            
0001C8AE                            Obj76_Solid:
0001C8AE 323C 001B                  		move.w	#$1B,d1
0001C8B2 343C 0010                  		move.w	#$10,d2
0001C8B6 363C 0011                  		move.w	#$11,d3
0001C8BA 3828 0008                  		move.w	obX(a0),d4
0001C8BE 4EB9 0001 1D98             		jsr	(SolidObject).l
0001C8C4                            
0001C8C4                            Obj76_Display:
0001C8C4 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001C8CA                            ; ===========================================================================
0001C8CA                            
0001C8CA                            loc_19762:	; Routine 4
0001C8CA 4A28 0001                  		tst.b	obRender(a0)
0001C8CE 6A00                       		bpl.s	Obj76_Delete
0001C8D0 4EB9 0000 F93E             		jsr	(ObjectFall).l
0001C8D6 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001C8DC                            ; ===========================================================================
0001C8DC                            
0001C8DC                            Obj76_Delete:
0001C8DC 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001C8E2                            
0001C8E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8E2                            
0001C8E2                            
0001C8E2                            Obj76_Break:
0001C8E2 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C8E6 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C8EA 7801                       		moveq	#1,d4
0001C8EC 7203                       		moveq	#3,d1
0001C8EE 7438                       		moveq	#$38,d2
0001C8F0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C8F4 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C8FA 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C900 43D0                       		lea	(a0),a1
0001C902 6000                       		bra.s	Obj76_MakeFrag
0001C904                            ; ===========================================================================
0001C904                            
0001C904                            Obj76_LoopFrag:
0001C904 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001C90A 6600                       		bne.s	loc_197D4
0001C90C                            
0001C90C                            Obj76_MakeFrag:
0001C90C 45D0                       		lea	(a0),a2
0001C90E 47D1                       		lea	(a1),a3
0001C910 7603                       		moveq	#3,d3
0001C912                            
0001C912                            loc_197AA:
0001C912 26DA                       		move.l	(a2)+,(a3)+
0001C914 26DA                       		move.l	(a2)+,(a3)+
0001C916 26DA                       		move.l	(a2)+,(a3)+
0001C918 26DA                       		move.l	(a2)+,(a3)+
0001C91A 51CB FFF6                  		dbf	d3,loc_197AA
0001C91E                            
0001C91E 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C922 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C926 361D                       		move.w	(a5)+,d3
0001C928 D769 0008                  		add.w	d3,obX(a1)
0001C92C 361D                       		move.w	(a5)+,d3
0001C92E D769 000C                  		add.w	d3,obY(a1)
0001C932 1344 001A                  		move.b	d4,obFrame(a1)
0001C936 5244                       		addq.w	#1,d4
0001C938 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C93C                            
0001C93C                            loc_197D4:
0001C946                            ; End of function Obj76_Break
0001C946                            
0001C946                            ; ===========================================================================
0001C946 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C94A 0180 FE00                  		dc.w $180, -$200
0001C94E FF00 FF00                  		dc.w -$100, -$100
0001C952 0100 FF00                  		dc.w $100, -$100
0001C956 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C95A 0010 0000                  		dc.w $10, 0
0001C95E 0000 0010                  		dc.w 0,	$10
0001C962 0010 0010                  		dc.w $10, $10
0001C962 0010 0010                  		dc.w $10, $10
0001C966                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C966                            ; ---------------------------------------------------------------------------
0001C966                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C966                            ; ---------------------------------------------------------------------------
0001C966                            Map_BossBlock_internal:
0001C966 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C968 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C96A 0000                       		dc.w @topright-Map_BossBlock_internal
0001C96C 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C96E 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C970 02                         @wholeblock:	dc.b 2
0001C971 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C976 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C97B 00                         		dc.b 0
0001C97C 01                         @topleft:	dc.b 1
0001C97D F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C982 01                         @topright:	dc.b 1
0001C983 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C988 01                         @bottomleft:	dc.b 1
0001C989 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C98E 01                         @bottomright:	dc.b 1
0001C98F F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C994                            		even
0001C994                            		even
0001C994                            
0001C994                            loc_1982C:
0001C994 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001C99A                            
0001C99A                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C99A                            ; ---------------------------------------------------------------------------
0001C99A                            ; Object 82 - Eggman (SBZ2)
0001C99A                            ; ---------------------------------------------------------------------------
0001C99A                            
0001C99A                            ScrapEggman:
0001C99A 7000                       		moveq	#0,d0
0001C99C 1028 0024                  		move.b	obRoutine(a0),d0
0001C9A0 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C9A4 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C9A8                            ; ===========================================================================
0001C9A8 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C9AA 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C9AC 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C9AE                            
0001C9AE 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C9B1 0400 03                    		dc.b 4,	0, 3
0001C9B4                            ; ===========================================================================
0001C9B4                            
0001C9B4                            SEgg_Main:	; Routine 0
0001C9B4 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C9B8 317C 2160 0008             		move.w	#$2160,obX(a0)
0001C9BE 317C 05A4 000C             		move.w	#$5A4,obY(a0)
0001C9C4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C9CA 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001C9D0 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C9D6 4228 0025                  		clr.b	ob2ndRout(a0)
0001C9DA 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001C9DE 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001C9E2 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001C9E6 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001C9EE 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001C9F4 117C 0004 0001             		move.b	#4,obRender(a0)
0001C9FA 08E8 0007 0001             		bset	#7,obRender(a0)
0001CA00 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001CA06 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001CA0C 6600                       		bne.s	SEgg_Eggman
0001CA0E 2348 0034                  		move.l	a0,$34(a1)
0001CA12 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001CA16 337C 2130 0008             		move.w	#$2130,obX(a1)
0001CA1C 337C 05BC 000C             		move.w	#$5BC,obY(a1)
0001CA22 4228 0025                  		clr.b	ob2ndRout(a0)
0001CA26 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CA2A 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CA2E 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001CA32 237C 0000 E1B8 0004        		move.l	#Map_But,obMap(a1)
0001CA3A 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001CA40 137C 0004 0001             		move.b	#4,obRender(a1)
0001CA46 08E9 0007 0001             		bset	#7,obRender(a1)
0001CA4C 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CA52 137C 0000 001A             		move.b	#0,obFrame(a1)
0001CA58                            
0001CA58                            SEgg_Eggman:	; Routine 2
0001CA58 7000                       		moveq	#0,d0
0001CA5A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CA5E 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001CA62 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001CA66 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001CA6A 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001CA70 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001CA76                            ; ===========================================================================
0001CA76 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001CA78 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001CA7A 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001CA7C 0000                       		dc.w loc_19934-SEgg_EggIndex
0001CA7E                            ; ===========================================================================
0001CA7E                            
0001CA7E                            SEgg_ChkSonic:
0001CA7E 3028 0008                  		move.w	obX(a0),d0
0001CA82 9078 D008                  		sub.w	(v_player+obX).w,d0
0001CA86 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001CA8A 6400                       		bcc.s	loc_19934	; if not, branch
0001CA8C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CA90 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001CA96 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CA9C                            
0001CA9C                            loc_19934:
0001CA9C 4EF9 0000 F976             		jmp	(SpeedToPos).l
0001CAA2                            ; ===========================================================================
0001CAA2                            
0001CAA2                            SEgg_PreLeap:
0001CAA2 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001CAA6 6600                       		bne.s	loc_19954	; if time remains, branch
0001CAA8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CAAC 117C 0002 001C             		move.b	#2,obAnim(a0)
0001CAB2 5868 000C                  		addq.w	#4,obY(a0)
0001CAB6 317C 000F 003C             		move.w	#15,$3C(a0)
0001CABC                            
0001CABC                            loc_19954:
0001CABC 60DE                       		bra.s	loc_19934
0001CABE                            ; ===========================================================================
0001CABE                            
0001CABE                            SEgg_Leap:
0001CABE 5368 003C                  		subq.w	#1,$3C(a0)
0001CAC2 6E00                       		bgt.s	loc_199D0
0001CAC4 6600                       		bne.s	loc_1996A
0001CAC6 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001CACC 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001CAD2                            
0001CAD2                            loc_1996A:
0001CAD2 0C68 2132 0008             		cmpi.w	#$2132,obX(a0)
0001CAD8 6E00                       		bgt.s	loc_19976
0001CADA 4268 0010                  		clr.w	obVelX(a0)
0001CADE                            
0001CADE                            loc_19976:
0001CADE 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001CAE4 4A68 0012                  		tst.w	obVelY(a0)
0001CAE8 6B00                       		bmi.s	SEgg_FindBlocks
0001CAEA 0C68 0595 000C             		cmpi.w	#$595,obY(a0)
0001CAF0 6500                       		bcs.s	SEgg_FindBlocks
0001CAF2 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001CAF8 0C68 059B 000C             		cmpi.w	#$59B,obY(a0)
0001CAFE 6500                       		bcs.s	SEgg_FindBlocks
0001CB00 317C 059B 000C             		move.w	#$59B,obY(a0)
0001CB06 4268 0012                  		clr.w	obVelY(a0)
0001CB0A                            
0001CB0A                            SEgg_FindBlocks:
0001CB0A 3028 0010                  		move.w	obVelX(a0),d0
0001CB0E 8068 0012                  		or.w	obVelY(a0),d0
0001CB12 6600                       		bne.s	loc_199D0
0001CB14 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001CB18 703E                       		moveq	#$3E,d0
0001CB1A 7240                       		moveq	#$40,d1
0001CB1C                            
0001CB1C                            SEgg_FindLoop:	
0001CB1C D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001CB1E 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001CB22 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001CB26                            
0001CB26 6600                       		bne.s	loc_199D0
0001CB28 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001CB2E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CB32 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CB38                            
0001CB38                            loc_199D0:
0001CB38 6000 FF62                  		bra.w	loc_19934
0001CB3C                            ; ===========================================================================
0001CB3C                            
0001CB3C                            SEgg_Switch:	; Routine 4
0001CB3C 7000                       		moveq	#0,d0
0001CB3E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CB42 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001CB46 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001CB4A                            ; ===========================================================================
0001CB4A 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001CB4C 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001CB4E                            ; ===========================================================================
0001CB4E                            
0001CB4E                            loc_199E6:
0001CB4E 2268 0034                  		movea.l	$34(a0),a1
0001CB52 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001CB58 6600                       		bne.s	SEgg_SwDisplay
0001CB5A 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CB60 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CB64                            
0001CB64                            SEgg_SwDisplay:
0001CB64 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001CB64 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001CB6A                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001CB6A                            ; ---------------------------------------------------------------------------
0001CB6A                            ; Animation script - Eggman (SBZ2)
0001CB6A                            ; ---------------------------------------------------------------------------
0001CB6A 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001CB6C 0000                       		dc.w @laugh-Ani_SEgg
0001CB6E 0000                       		dc.w @jump1-Ani_SEgg
0001CB70 0000                       		dc.w @intube-Ani_SEgg
0001CB72 0000                       		dc.w @running-Ani_SEgg
0001CB74 0000                       		dc.w @jump2-Ani_SEgg
0001CB76 0000                       		dc.w @starjump-Ani_SEgg
0001CB78 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001CB7C 00                         		even
0001CB7C 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001CB80 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001CB88 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001CB8C 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001CB92 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001CB98 00                         		even
0001CB98 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001CB9C 00                         		even
0001CB9C 00                         		even
0001CB9C                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001CB9C                            ; ---------------------------------------------------------------------------
0001CB9C                            ; Sprite mappings - Eggman (SBZ2)
0001CB9C                            ; ---------------------------------------------------------------------------
0001CB9C                            Map_SEgg_internal:
0001CB9C 0000                       		dc.w @stand-Map_SEgg_internal
0001CB9E 0000                       		dc.w @laugh1-Map_SEgg_internal
0001CBA0 0000                       		dc.w @laugh2-Map_SEgg_internal
0001CBA2 0000                       		dc.w @jump1-Map_SEgg_internal
0001CBA4 0000                       		dc.w @jump2-Map_SEgg_internal
0001CBA6 0000                       		dc.w @surprise-Map_SEgg_internal
0001CBA8 0000                       		dc.w @starjump-Map_SEgg_internal
0001CBAA 0000                       		dc.w @running1-Map_SEgg_internal
0001CBAC 0000                       		dc.w @running2-Map_SEgg_internal
0001CBAE 0000                       		dc.w @intube-Map_SEgg_internal
0001CBB0 0000                       		dc.w @cockpit-Map_SEgg_internal
0001CBB2 03                         @stand:		dc.b 3
0001CBB3 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001CBB8 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CBBD 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CBC2 04                         @laugh1:	dc.b 4
0001CBC3 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001CBC8 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CBCD 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CBD2 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001CBD7 00                         		dc.b 0
0001CBD8 04                         @laugh2:	dc.b 4
0001CBD9 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001CBDE E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001CBE3 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001CBE8 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001CBED 00                         		dc.b 0
0001CBEE 04                         @jump1:		dc.b 4
0001CBEF F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001CBF4 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001CBF9 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001CBFE EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001CC03 00                         		dc.b 0
0001CC04 04                         @jump2:		dc.b 4
0001CC05 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CC0A F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CC0F 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001CC14 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC19 00                         		dc.b 0
0001CC1A 04                         @surprise:	dc.b 4
0001CC1B E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CC20 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CC25 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC2A 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CC2F 00                         		dc.b 0
0001CC30 07                         @starjump:	dc.b 7
0001CC31 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CC36 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CC3B 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CC40 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CC45 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CC4A F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001CC4F F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001CC54 05                         @running1:	dc.b 5
0001CC55 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CC5A F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CC5F 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CC64 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CC69 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC6E 06                         @running2:	dc.b 6
0001CC6F EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001CC74 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001CC79 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001CC7E 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001CC83 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001CC88 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001CC8D 00                         		dc.b 0
0001CC8E 08                         @intube:	dc.b 8
0001CC8F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC ; Eggman inside tube in Final Zone
0001CC94 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CC99 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC9E 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CCA3 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001CCA8 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001CCAD 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001CCB2 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001CCB7 03                         @cockpit:	dc.b 3
0001CCB8 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4 ; empty cockpit of Eggmobile in Final Zone
0001CCBD F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001CCC2 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001CCC8 00                         		even
0001CCC8 00                         		even
0001CCC8                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CCC8                            ; ---------------------------------------------------------------------------
0001CCC8                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CCC8                            ; ---------------------------------------------------------------------------
0001CCC8                            
0001CCC8                            FalseFloor:
0001CCC8 7000                       		moveq	#0,d0
0001CCCA 1028 0024                  		move.b	obRoutine(a0),d0
0001CCCE 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CCD2 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CCD6                            ; ===========================================================================
0001CCD6 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CCD8 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CCDA 0000                       		dc.w loc_19C36-FFloor_Index
0001CCDC 0000                       		dc.w loc_19C62-FFloor_Index
0001CCDE 0000                       		dc.w loc_19C72-FFloor_Index
0001CCE0 0000                       		dc.w loc_19C80-FFloor_Index
0001CCE2                            ; ===========================================================================
0001CCE2                            
0001CCE2                            FFloor_Main:	; Routine 0
0001CCE2 317C 2080 0008             		move.w	#$2080,obX(a0)
0001CCE8 317C 05D0 000C             		move.w	#$5D0,obY(a0)
0001CCEE 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CCF4 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CCFA 117C 0004 0001             		move.b	#4,obRender(a0)
0001CD00 08E8 0007 0001             		bset	#7,obRender(a0)
0001CD06 7800                       		moveq	#0,d4
0001CD08 3A3C 2010                  		move.w	#$2010,d5
0001CD0C 7C07                       		moveq	#7,d6
0001CD0E 45E8 0030                  		lea	$30(a0),a2
0001CD12                            
0001CD12                            FFloor_MakeBlock:
0001CD12 4EB9 0000 FE16             		jsr	(FindFreeObj).l
0001CD18 6600                       		bne.s	FFloor_ExitMake
0001CD1A 34C9                       		move.w	a1,(a2)+
0001CD1C 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CD20 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CD28 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CD2E 137C 0004 0001             		move.b	#4,obRender(a1)
0001CD34 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CD3A 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CD40 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CD46 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CD4A 337C 05D0 000C             		move.w	#$5D0,obY(a1)
0001CD50 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CD54 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CD5A 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CD5E                            
0001CD5E                            FFloor_ExitMake:
0001CD5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CD62 4E75                       		rts	
0001CD64                            ; ===========================================================================
0001CD64                            
0001CD64                            FFloor_ChkBreak:; Routine 2
0001CD64 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CD6A 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CD6C 4228 001A                  		clr.b	obFrame(a0)
0001CD70 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CD74                            
0001CD74                            FFloor_Solid:
0001CD74 7000                       		moveq	#0,d0
0001CD76 1028 001A                  		move.b	obFrame(a0),d0
0001CD7A 4400                       		neg.b	d0
0001CD7C 4880                       		ext.w	d0
0001CD7E 5040                       		addq.w	#8,d0
0001CD80 E940                       		asl.w	#4,d0
0001CD82 383C 2100                  		move.w	#$2100,d4
0001CD86 9840                       		sub.w	d0,d4
0001CD88 1140 0014                  		move.b	d0,obActWid(a0)
0001CD8C 3144 0008                  		move.w	d4,obX(a0)
0001CD90 720B                       		moveq	#$B,d1
0001CD92 D240                       		add.w	d0,d1
0001CD94 7410                       		moveq	#$10,d2
0001CD96 7611                       		moveq	#$11,d3
0001CD98 4EF9 0001 1D98             		jmp	(SolidObject).l
0001CD9E                            ; ===========================================================================
0001CD9E                            
0001CD9E                            loc_19C36:	; Routine 4
0001CD9E 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CDA4 6400                       		bcc.s	FFloor_Solid2
0001CDA6 70FF                       		moveq	#-1,d0
0001CDA8 1028 001A                  		move.b	obFrame(a0),d0
0001CDAC 4880                       		ext.w	d0
0001CDAE D040                       		add.w	d0,d0
0001CDB0 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CDB4 2240                       		movea.l	d0,a1
0001CDB6 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CDBC 5228 001A                  		addq.b	#1,obFrame(a0)
0001CDC0 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CDC6 6700                       		beq.s	loc_19C62
0001CDC8                            
0001CDC8                            FFloor_Solid2:
0001CDC8 60AA                       		bra.s	FFloor_Solid
0001CDCA                            ; ===========================================================================
0001CDCA                            
0001CDCA                            loc_19C62:	; Routine 6
0001CDCA 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CDD0 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CDD6 6000 FBBC                  		bra.w	loc_1982C
0001CDDA                            ; ===========================================================================
0001CDDA                            
0001CDDA                            loc_19C72:	; Routine 8
0001CDDA 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CDE0 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CDE2 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001CDE8                            ; ===========================================================================
0001CDE8                            
0001CDE8                            loc_19C80:	; Routine $A
0001CDE8 4A28 0001                  		tst.b	obRender(a0)
0001CDEC 6A00 FBA6                  		bpl.w	loc_1982C
0001CDF0 4EB9 0000 F93E             		jsr	(ObjectFall).l
0001CDF6 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001CDFC                            ; ===========================================================================
0001CDFC                            
0001CDFC                            FFloor_Break:
0001CDFC 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CE00 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CE04 7801                       		moveq	#1,d4
0001CE06 7203                       		moveq	#3,d1
0001CE08 7438                       		moveq	#$38,d2
0001CE0A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CE0E 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CE14 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CE1A 43D0                       		lea	(a0),a1
0001CE1C 6000                       		bra.s	FFloor_MakeFrag
0001CE1E                            ; ===========================================================================
0001CE1E                            
0001CE1E                            FFloor_LoopFrag:
0001CE1E 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001CE24 6600                       		bne.s	FFloor_BreakSnd
0001CE26                            
0001CE26                            FFloor_MakeFrag:
0001CE26 45D0                       		lea	(a0),a2
0001CE28 47D1                       		lea	(a1),a3
0001CE2A 7603                       		moveq	#3,d3
0001CE2C                            
0001CE2C                            loc_19CC4:
0001CE2C 26DA                       		move.l	(a2)+,(a3)+
0001CE2E 26DA                       		move.l	(a2)+,(a3)+
0001CE30 26DA                       		move.l	(a2)+,(a3)+
0001CE32 26DA                       		move.l	(a2)+,(a3)+
0001CE34 51CB FFF6                  		dbf	d3,loc_19CC4
0001CE38                            
0001CE38 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CE3C 361D                       		move.w	(a5)+,d3
0001CE3E D769 0008                  		add.w	d3,obX(a1)
0001CE42 361D                       		move.w	(a5)+,d3
0001CE44 D769 000C                  		add.w	d3,obY(a1)
0001CE48 1344 001A                  		move.b	d4,obFrame(a1)
0001CE4C 5244                       		addq.w	#1,d4
0001CE4E 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CE52                            
0001CE52                            FFloor_BreakSnd:
0001CE5C 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001CE62                            ; ===========================================================================
0001CE62 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CE66 0120 00C0                  		dc.w $120, $C0
0001CE6A FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CE6E 0010 0000                  		dc.w $10, 0
0001CE72 0000 0010                  		dc.w 0,	$10
0001CE76 0010 0010                  		dc.w $10, $10
0001CE76 0010 0010                  		dc.w $10, $10
0001CE7A                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CE7A                            ; ---------------------------------------------------------------------------
0001CE7A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CE7A                            ; ---------------------------------------------------------------------------
0001CE7A                            Map_FFloor_internal:
0001CE7A 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CE7C 0000                       		dc.w @topleft-Map_FFloor_internal
0001CE7E 0000                       		dc.w @topright-Map_FFloor_internal
0001CE80 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CE82 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CE84 01                         @wholeblock:	dc.b 1
0001CE85 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CE8A 02                         @topleft:	dc.b 2
0001CE8B F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CE90 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CE95 00                         		dc.b 0
0001CE96 02                         @topright:	dc.b 2
0001CE97 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CE9C F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CEA1 00                         		dc.b 0
0001CEA2 02                         @bottomleft:	dc.b 2
0001CEA3 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CEA8 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CEAD 00                         		dc.b 0
0001CEAE 02                         @bottomright:	dc.b 2
0001CEAF F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CEB4 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CEBA 00                         		even
0001CEBA 00                         		even
0001CEBA                            		include	"_incObj\85 Boss - Final.asm"
0001CEBA                            ; ---------------------------------------------------------------------------
0001CEBA                            ; Object 85 - Eggman (FZ)
0001CEBA                            ; ---------------------------------------------------------------------------
0001CEBA                            
0001CEBA                            Obj85_Delete:
0001CEBA 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001CEC0                            ; ===========================================================================
0001CEC0                            
0001CEC0                            BossFinal:
0001CEC0 7000                       		moveq	#0,d0
0001CEC2 1028 0024                  		move.b	obRoutine(a0),d0
0001CEC6 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CECA 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CECE                            ; ===========================================================================
0001CECE 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CED0 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CED2 0000                       		dc.w loc_1A38E-Obj85_Index
0001CED4 0000                       		dc.w loc_1A346-Obj85_Index
0001CED6 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CED8 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CEDA 0000                       		dc.w loc_1A264-Obj85_Index
0001CEDC                            
0001CEDC 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CEE2 0001 CB9C                  		dc.l Map_SEgg		; mappings pointer
0001CEE6 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CEEC 0000 0000                  		dc.l Map_EggCyl
0001CEF0 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CEF6 0000 0000                  		dc.l Map_FZLegs
0001CEFA 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CF00 0001 CB9C                  		dc.l Map_SEgg
0001CF04 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CF0A 0001 AE20                  		dc.l Map_Eggman
0001CF0E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CF14 0001 AE20                  		dc.l Map_Eggman
0001CF18                            
0001CF18                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CF18 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001CF1E 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001CF24 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001CF2A 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001CF30 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001CF36 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001CF3C                            ; ===========================================================================
0001CF3C                            
0001CF3C                            Obj85_Main:	; Routine 0
0001CF3C 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001CF40 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001CF44 2248                       		movea.l	a0,a1
0001CF46 7205                       		moveq	#5,d1
0001CF48 6000                       		bra.s	Obj85_LoadBoss
0001CF4A                            ; ===========================================================================
0001CF4A                            
0001CF4A                            Obj85_Loop:
0001CF4A 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001CF50 6600                       		bne.s	loc_19E20
0001CF52                            
0001CF52                            Obj85_LoadBoss:
0001CF52 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CF56 335A 0008                  		move.w	(a2)+,obX(a1)
0001CF5A 335A 000C                  		move.w	(a2)+,obY(a1)
0001CF5E 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CF62 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CF66 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CF6A 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CF6E 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001CF72 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CF76 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CF7A 137C 0004 0001             		move.b	#4,obRender(a1)
0001CF80 08E8 0007 0001             		bset	#7,obRender(a0)
0001CF86 2348 0034                  		move.l	a0,$34(a1)
0001CF8A 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CF8E                            
0001CF8E                            loc_19E20:
0001CF8E 45E8 0036                  		lea	$36(a0),a2
0001CF92 4EB9 0000 FE16             		jsr	(FindFreeObj).l
0001CF98 6600                       		bne.s	loc_19E5A
0001CF9A 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001CF9E 3489                       		move.w	a1,(a2)
0001CFA0 2348 0034                  		move.l	a0,$34(a1)
0001CFA4 45E8 0038                  		lea	$38(a0),a2
0001CFA8 7400                       		moveq	#0,d2
0001CFAA 7203                       		moveq	#3,d1
0001CFAC                            
0001CFAC                            loc_19E3E:
0001CFAC 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001CFB2 6600                       		bne.s	loc_19E5A
0001CFB4 34C9                       		move.w	a1,(a2)+
0001CFB6 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001CFBA 2348 0034                  		move.l	a0,$34(a1)
0001CFBE 1342 0028                  		move.b	d2,obSubtype(a1)
0001CFC2 5442                       		addq.w	#2,d2
0001CFC4 51C9 FFE6                  		dbf	d1,loc_19E3E
0001CFC8                            
0001CFC8                            loc_19E5A:
0001CFC8 317C 0000 0034             		move.w	#0,$34(a0)
0001CFCE 117C 0004 0021             		move.b	#4,obColProp(a0) ; set number of hits to 8
0001CFD4 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CFDA                            
0001CFDA                            Obj85_Eggman:	; Routine 2
0001CFDA 7000                       		moveq	#0,d0
0001CFDC 1028 0034                  		move.b	$34(a0),d0
0001CFE0 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001CFE4 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001CFE8 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001CFEE                            ; ===========================================================================
0001CFEE 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001CFF2 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001CFF6 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001CFFA 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001CFFE                            ; ===========================================================================
0001CFFE                            
0001CFFE                            loc_19E90:
0001CFFE 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001D002 6600                       		bne.s	loc_19EA2
0001D004 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001D00A 6500                       		bcs.s	loc_19EA2
0001D00C 5428 0034                  		addq.b	#2,$34(a0)
0001D010                            
0001D010                            loc_19EA2:
0001D010 52B8 F636                  		addq.l	#1,(v_random).w
0001D014 4E75                       		rts	
0001D016                            ; ===========================================================================
0001D016                            
0001D016                            loc_19EA8:
0001D016 4A68 0030                  		tst.w	$30(a0)
0001D01A 6A00                       		bpl.s	loc_19F10
0001D01C 4268 0030                  		clr.w	$30(a0)
0001D020 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001D026 0240 000C                  		andi.w	#$C,d0
0001D02A 3200                       		move.w	d0,d1
0001D02C 5441                       		addq.w	#2,d1
0001D02E 4A80                       		tst.l	d0
0001D030 6A00                       		bpl.s	loc_19EC6
0001D032 C340                       		exg	d1,d0
0001D034                            
0001D034                            loc_19EC6:
0001D034 43FA 0000                  		lea	word_19FD6(pc),a1
0001D038 3031 0000                  		move.w	(a1,d0.w),d0
0001D03C 3231 1000                  		move.w	(a1,d1.w),d1
0001D040 3140 0030                  		move.w	d0,$30(a0)
0001D044 74FF                       		moveq	#-1,d2
0001D046 3430 0038                  		move.w	$38(a0,d0.w),d2
0001D04A 2242                       		movea.l	d2,a1
0001D04C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D052 337C FFFF 0030             		move.w	#-1,$30(a1)
0001D058 3430 1038                  		move.w	$38(a0,d1.w),d2
0001D05C 2242                       		movea.l	d2,a1
0001D05E 137C 0001 0029             		move.b	#1,$29(a1)
0001D064 337C 0000 0030             		move.w	#0,$30(a1)
0001D06A 317C 0001 0032             		move.w	#1,$32(a0)
0001D070 4228 0035                  		clr.b	$35(a0)
0001D07E                            
0001D07E                            loc_19F10:
0001D07E 4A68 0032                  		tst.w	$32(a0)
0001D082 6B00 0000                  		bmi.w	loc_19FA6
0001D086 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D08C 3038 D008                  		move.w	(v_player+obX).w,d0
0001D090 9068 0008                  		sub.w	obX(a0),d0
0001D094 6500                       		bcs.s	loc_19F2E
0001D096 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D09C                            
0001D09C                            loc_19F2E:
0001D09C 323C 002B                  		move.w	#$2B,d1
0001D0A0 343C 0014                  		move.w	#$14,d2
0001D0A4 363C 0014                  		move.w	#$14,d3
0001D0A8 3828 0008                  		move.w	obX(a0),d4
0001D0AC 4EB9 0001 1D98             		jsr	(SolidObject).l
0001D0B2 4A44                       		tst.w	d4
0001D0B4 6E00                       		bgt.s	loc_19F50
0001D0B6                            
0001D0B6                            loc_19F48:
0001D0B6 4A28 0035                  		tst.b	$35(a0)
0001D0BA 6600                       		bne.s	loc_19F88
0001D0BC 6000                       		bra.s	loc_19F96
0001D0BE                            ; ===========================================================================
0001D0BE                            
0001D0BE                            loc_19F50:
0001D0BE 5E78 F636                  		addq.w	#7,(v_random).w
0001D0C2 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001D0C8 66EC                       		bne.s	loc_19F48
0001D0CA 303C 0300                  		move.w	#$300,d0
0001D0CE 0828 0000 0022             		btst	#0,obStatus(a0)
0001D0D4 6600                       		bne.s	loc_19F6A
0001D0D6 4440                       		neg.w	d0
0001D0D8                            
0001D0D8                            loc_19F6A:
0001D0D8 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001D0DC 4A28 0035                  		tst.b	$35(a0)
0001D0E0 6600                       		bne.s	loc_19F88
0001D0E2 5328 0021                  		subq.b	#1,obColProp(a0)
0001D0E6 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001D0EC 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D0F2                            
0001D0F2                            loc_19F88:
0001D0F2 5328 0035                  		subq.b	#1,$35(a0)
0001D0F6 6700                       		beq.s	loc_19F96
0001D0F8 117C 0003 001C             		move.b	#3,obAnim(a0)
0001D0FE 6000                       		bra.s	loc_19F9C
0001D100                            ; ===========================================================================
0001D100                            
0001D100                            loc_19F96:
0001D100 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D106                            
0001D106                            loc_19F9C:
0001D106 43FA FA62                  		lea	Ani_SEgg(pc),a1
0001D10A 4EF9 0000 CA36             		jmp	(AnimateSprite).l
0001D110                            ; ===========================================================================
0001D110                            
0001D110                            loc_19FA6:
0001D110 4A28 0021                  		tst.b	obColProp(a0)
0001D114 6700                       		beq.s	loc_19FBC
0001D116 5428 0034                  		addq.b	#2,$34(a0)
0001D11A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D120 4268 0032                  		clr.w	$32(a0)
0001D124 4E75                       		rts	
0001D126                            ; ===========================================================================
0001D126                            
0001D126                            loc_19FBC:
0001D126 7064                       			moveq	#100,d0
0001D128 6100 0000                  			bsr.w	AddPoints
0001D12C 117C 0006 0034             		move.b	#6,$34(a0)
0001D132 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001D138 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D13E 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001D144 4E75                       		rts	
0001D146                            ; ===========================================================================
0001D146 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001D156                            ; ===========================================================================
0001D156                            
0001D156                            loc_19FE6:
0001D156 70FF                       		moveq	#-1,d0
0001D158 3028 0036                  		move.w	$36(a0),d0
0001D15C 2240                       		movea.l	d0,a1
0001D15E 4A68 0030                  		tst.w	$30(a0)
0001D162 6A00                       		bpl.s	loc_1A000
0001D164 4268 0030                  		clr.w	$30(a0)
0001D168 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D16E 6100                       		bsr.s	loc_1A020
0001D170                            
0001D170                            loc_1A000:
0001D170 700F                       		moveq	#$F,d0
0001D172 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001D176 6600                       		bne.s	loc_1A00A
0001D178 6100                       		bsr.s	loc_1A020
0001D17A                            
0001D17A                            loc_1A00A:
0001D17A 4A68 0032                  		tst.w	$32(a0)
0001D17E 6700                       		beq.s	locret_1A01E
0001D180 5528 0034                  		subq.b	#2,$34(a0)
0001D184 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D18A 4268 0032                  		clr.w	$32(a0)
0001D18E                            
0001D18E                            locret_1A01E:
0001D18E 4E75                       		rts	
0001D190                            ; ===========================================================================
0001D190                            
0001D190                            loc_1A020:
0001D19A                            ; ===========================================================================
0001D19A                            
0001D19A                            loc_1A02A:
0001D19A 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001D1A0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D1A6 4EB9 0000 F976             		jsr	(SpeedToPos).l
0001D1AC 117C 0006 001A             		move.b	#6,obFrame(a0)
0001D1B2 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D1B8 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001D1BE 6500                       		bcs.s	loc_1A070
0001D1C0 317C 059C 000C             		move.w	#$59C,obY(a0)
0001D1C6 5428 0034                  		addq.b	#2,$34(a0)
0001D1CA 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001D1D0 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001D1D6 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001D1DC 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001D1E0                            
0001D1E0                            loc_1A070:
0001D1E0 6000 0000                  		bra.w	loc_1A166
0001D1E4                            ; ===========================================================================
0001D1E4                            
0001D1E4                            loc_1A074:
0001D1E4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D1EA 117C 0004 001C             		move.b	#4,obAnim(a0)
0001D1F0 4EB9 0000 F976             		jsr	(SpeedToPos).l
0001D1F6 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D1FC 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D202 6500                       		bcs.s	loc_1A09A
0001D204 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D20A                            
0001D20A                            loc_1A09A:
0001D20A 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D210 3028 0008                  		move.w	obX(a0),d0
0001D214 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D218 6A00                       		bpl.s	loc_1A0B4
0001D21A 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D220 6000 0000                  		bra.w	loc_1A0F2
0001D224                            ; ===========================================================================
0001D224                            
0001D224                            loc_1A0B4:
0001D224 0440 0070                  		subi.w	#$70,d0
0001D228 6500                       		bcs.s	loc_1A0F2
0001D22A 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D230 5140                       		subq.w	#8,d0
0001D232 6500                       		bcs.s	loc_1A0F2
0001D234 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D23A 5140                       		subq.w	#8,d0
0001D23C 6500                       		bcs.s	loc_1A0F2
0001D23E 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D244 5140                       		subq.w	#8,d0
0001D246 6500                       		bcs.s	loc_1A0F2
0001D248 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D24E 5140                       		subq.w	#8,d0
0001D250 6500                       		bcs.s	loc_1A0F2
0001D252 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D258 0440 0038                  		subi.w	#$38,d0
0001D25C 6500                       		bcs.s	loc_1A0F2
0001D25E 4268 0010                  		clr.w	obVelX(a0)
0001D262                            
0001D262                            loc_1A0F2:
0001D262 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D268 6500                       		bcs.s	loc_1A110
0001D26A 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D270 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D276 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D27C 5428 0034                  		addq.b	#2,$34(a0)
0001D280                            
0001D280                            loc_1A110:
0001D280 6000                       		bra.s	loc_1A15C
0001D282                            ; ===========================================================================
0001D282                            
0001D282                            loc_1A112:
0001D282 4EB9 0000 F976             		jsr	(SpeedToPos).l
0001D288 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D28E 6500                       		bcs.s	loc_1A124
0001D290 4268 0010                  		clr.w	obVelX(a0)
0001D294                            
0001D294                            loc_1A124:
0001D294 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D29A 4A68 0012                  		tst.w	obVelY(a0)
0001D29E 6B00                       		bmi.s	loc_1A142
0001D2A0 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D2A6 6500                       		bcs.s	loc_1A142
0001D2A8 317C 0592 000C             		move.w	#$592,obY(a0)
0001D2AE 4268 0012                  		clr.w	obVelY(a0)
0001D2B2                            
0001D2B2                            loc_1A142:
0001D2B2 3028 0010                  		move.w	obVelX(a0),d0
0001D2B6 8068 0012                  		or.w	obVelY(a0),d0
0001D2BA 6600                       		bne.s	loc_1A15C
0001D2BC 5428 0034                  		addq.b	#2,$34(a0)
0001D2C0 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D2C6 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D2CC                            
0001D2CC                            loc_1A15C:
0001D2CC 43FA F89C                  		lea	Ani_SEgg(pc),a1
0001D2D0 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001D2D6                            
0001D2D6                            loc_1A166:
0001D2D6 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D2DC 6C00                       		bge.s	loc_1A172
0001D2DE 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D2E2                            
0001D2E2                            loc_1A172:
0001D2E2 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D2E8 6C00                       		bge.s	locret_1A190
0001D2EA 323C 001B                  		move.w	#$1B,d1
0001D2EE 343C 0070                  		move.w	#$70,d2
0001D2F2 363C 0071                  		move.w	#$71,d3
0001D2F6 3828 0008                  		move.w	obX(a0),d4
0001D2FA 4EF9 0001 1D98             		jmp	(SolidObject).l
0001D300                            ; ===========================================================================
0001D300                            
0001D300                            locret_1A190:
0001D300 4E75                       		rts	
0001D302                            ; ===========================================================================
0001D302                            
0001D302                            loc_1A192:
0001D302 217C 0001 AE20 0004        		move.l	#Map_Eggman,obMap(a0)
0001D30A 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D310 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D316 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D31C 4EB9 0000 F976             		jsr	(SpeedToPos).l
0001D322 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D328 6400                       		bcc.s	loc_1A1D0
0001D32A 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D330 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D336 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D33C 5428 0034                  		addq.b	#2,$34(a0)
0001D340                            
0001D340                            loc_1A1D0:
0001D340 6000 FF8A                  		bra.w	loc_1A15C
0001D344                            ; ===========================================================================
0001D344                            
0001D344                            loc_1A1D4:
0001D344 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D34A 4EB9 0000 F976             		jsr	(SpeedToPos).l
0001D350 4A68 0030                  		tst.w	$30(a0)
0001D354 6600                       		bne.s	loc_1A1FC
0001D356 4A28 0020                  		tst.b	obColType(a0)
0001D35A 6600                       		bne.s	loc_1A216
0001D35C 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D362 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D368                            
0001D368                            loc_1A1FC:
0001D368 5368 0030                  		subq.w	#1,$30(a0)
0001D36C 6600                       		bne.s	loc_1A216
0001D36E 4A28 0022                  		tst.b	obStatus(a0)
0001D372 6A00                       		bpl.s	loc_1A210
0001D374 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D37A 6000                       		bra.s	loc_1A216
0001D37C                            ; ===========================================================================
0001D37C                            
0001D37C                            loc_1A210:
0001D37C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D382                            
0001D382                            loc_1A216:
0001D382 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D388 6D00                       		blt.s	loc_1A23A
0001D38A 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D390 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D396 4278 D020                  		clr.w	(v_player+obInertia).w
0001D39A 4A68 0012                  		tst.w	obVelY(a0)
0001D39E 6A00                       		bpl.s	loc_1A248
0001D3A0 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D3A6                            
0001D3A6                            loc_1A23A:
0001D3A6 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D3AC 6D00                       		blt.s	loc_1A248
0001D3AE 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D3B4                            
0001D3B4                            loc_1A248:
0001D3B4 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D3BA 6500                       		bcs.s	loc_1A260
0001D3BC 4A28 0001                  		tst.b	obRender(a0)
0001D3C0 6B00                       		bmi.s	loc_1A260
0001D3C2 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D3C8 6000 FAF0                  		bra.w	Obj85_Delete
0001D3CC                            ; ===========================================================================
0001D3CC                            
0001D3CC                            loc_1A260:
0001D3CC 6000 FEFE                  		bra.w	loc_1A15C
0001D3D0                            ; ===========================================================================
0001D3D0                            
0001D3D0                            loc_1A264:	; Routine 4
0001D3D0 2268 0034                  		movea.l	$34(a0),a1
0001D3D4 1011                       		move.b	(a1),d0
0001D3D6 B010                       		cmp.b	(a0),d0
0001D3D8 6600 FAE0                  		bne.w	Obj85_Delete
0001D3DC 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D3E2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D3E8 6C00                       		bge.s	loc_1A280
0001D3EA 6000                       		bra.s	loc_1A2A6
0001D3EC                            ; ===========================================================================
0001D3EC                            
0001D3EC                            loc_1A280:
0001D3EC 4A69 0010                  		tst.w	obVelX(a1)
0001D3F0 6700                       		beq.s	loc_1A28C
0001D3F2 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D3F8                            
0001D3F8                            loc_1A28C:
0001D3F8 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001D3FC 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001D402                            
0001D402                            loc_1A296:
0001D402 2268 0034                  		movea.l	$34(a0),a1
0001D406 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D40C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D412                            
0001D412                            loc_1A2A6:
0001D412 2268 0034                  		movea.l	$34(a0),a1
0001D416 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D41C 7003                       		moveq	#3,d0
0001D41E C028 0022                  		and.b	obStatus(a0),d0
0001D422 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D428 8128 0001                  		or.b	d0,obRender(a0)
0001D42C 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001D432                            ; ===========================================================================
0001D432                            
0001D432                            loc_1A2C6:	; Routine 6
0001D432 2268 0034                  		movea.l	$34(a0),a1
0001D436 1011                       		move.b	(a1),d0
0001D438 B010                       		cmp.b	(a0),d0
0001D43A 6600 FA7E                  		bne.w	Obj85_Delete
0001D43E 0CA9 0001 AE20 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D446 6700                       		beq.s	loc_1A2E4
0001D448 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D44E 60C2                       		bra.s	loc_1A2A6
0001D450                            ; ===========================================================================
0001D450                            
0001D450                            loc_1A2E4:
0001D450 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D456 4A29 0021                  		tst.b	obColProp(a1)
0001D45A 6F00                       		ble.s	loc_1A312
0001D45C 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D462 217C 0001 AE20 0004        		move.l	#Map_Eggman,obMap(a0)
0001D46A 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D470 43FA D95E                  		lea	Ani_Eggman(pc),a1
0001D474 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001D47A 6000 FF86                  		bra.w	loc_1A296
0001D47E                            ; ===========================================================================
0001D47E                            
0001D47E                            loc_1A312:
0001D47E 4A28 0001                  		tst.b	1(a0)
0001D482 6A00 FA36                  		bpl.w	Obj85_Delete
0001D486 6100 D4F2                  		bsr.w	BossDefeated
0001D48A 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D490 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D496 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D49E 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D4A4 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D4A8 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001D4AE 6000 FF52                  		bra.w	loc_1A296
0001D4B2                            ; ===========================================================================
0001D4B2                            
0001D4B2                            loc_1A346:	; Routine 8
0001D4B2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D4B8 2268 0034                  		movea.l	$34(a0),a1
0001D4BC 0CA9 0001 AE20 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D4C4 6700                       		beq.s	loc_1A35E
0001D4C6 6000 FF4A                  		bra.w	loc_1A2A6
0001D4CA                            ; ===========================================================================
0001D4CA                            
0001D4CA                            loc_1A35E:
0001D4CA 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D4D0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D4D6 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D4DA 6600                       		bne.s	loc_1A376
0001D4DC 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D4E2                            
0001D4E2                            loc_1A376:
0001D4E2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D4E6 6E00                       		bgt.s	loc_1A38A
0001D4E8 5228 001A                  		addq.b	#1,obFrame(a0)
0001D4EC 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D4F2 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D4F6                            
0001D4F6                            loc_1A38A:
0001D4F6 6000 FF0A                  		bra.w	loc_1A296
0001D4FA                            ; ===========================================================================
0001D4FA                            
0001D4FA                            loc_1A38E:	; Routine $A
0001D4FA 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D500 3038 D008                  		move.w	(v_player+obX).w,d0
0001D504 9068 0008                  		sub.w	obX(a0),d0
0001D508 6500                       		bcs.s	loc_1A3A6
0001D50A 4A28 0001                  		tst.b	obRender(a0)
0001D50E 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D512                            
0001D512                            loc_1A3A6:
0001D512 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001D518                            ; ===========================================================================
0001D518                            
0001D518                            loc_1A3AC:	; Routine $C
0001D518 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D51E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D524 2268 0034                  		movea.l	$34(a0),a1
0001D528 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D52E 6600                       		bne.s	loc_1A3D0
0001D530 0CA9 0001 AE20 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D538 6700 F980                  		beq.w	Obj85_Delete
0001D53C                            
0001D53C                            loc_1A3D0:
0001D53C 6000 FED4                  		bra.w	loc_1A2A6
0001D540                            		
0001D540                            BossModeMusic:
0001D540 0C28 0001 0021             		cmpi.b	#1,obColProp(a0)
0001D546 6600 0000                  		bne.w	NormalMode
0001D54A 4EF9 0000 0000             		jmp	PinchMode
0001D550                            
0001D550                            NormalMode:
0001D550 303C 00AC                  		move.w	#$AC,d0
0001D554 4EB9 0000 1254             		jsr	(PlaySound_Special).l
0001D55A 4E75                       		rts
0001D55C                            
0001D55C                            PinchMode:
0001D55C 303C 0094                  		move.w	#$94,d0
0001D560 4EB9 0000 1254             		jsr	(PlaySound_Special).l
0001D566 303C 00E2                  		move.w	#$E2,d0
0001D56A 4EB9 0000 124E             		jsr	(PlaySound).l
0001D570 4E75                       		rts		
0001D570 4E75                       		rts		
0001D572                            		include	"_anim\FZ Eggman in Ship.asm"
0001D572                            ; ---------------------------------------------------------------------------
0001D572                            ; Animation script - Eggman (FZ)
0001D572                            ; ---------------------------------------------------------------------------
0001D572 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D574 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D578                            		even
0001D578                            		even
0001D578                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D578                            ; ---------------------------------------------------------------------------
0001D578                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D578                            ; ---------------------------------------------------------------------------
0001D578                            Map_FZDamaged_internal:
0001D578 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D57A 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D57C 06                         @damage1:	dc.b 6
0001D57D E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D582 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D587 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D58C FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D591 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D596 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D59B 06                         @damage2:	dc.b 6
0001D59C E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D5A1 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D5A6 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D5AB FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D5B0 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D5B5 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D5BA                            		even
0001D5BA                            		even
0001D5BA                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D5BA                            ; ---------------------------------------------------------------------------
0001D5BA                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D5BA                            ; ---------------------------------------------------------------------------
0001D5BA                            Map_FZLegs_internal:
0001D5BA 0000                       		dc.w @extended-Map_FZLegs_internal
0001D5BC 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D5BE 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D5C0 02                         @extended:	dc.b 2
0001D5C1 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D5C6 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D5CB 03                         @halfway:	dc.b 3
0001D5CC 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D5D1 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D5D6 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D5DB 02                         @retracted:	dc.b 2
0001D5DC 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D5E1 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D5E6                            		even
0001D5E6                            		even
0001D5E6                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D5E6                            ; ---------------------------------------------------------------------------
0001D5E6                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D5E6                            ; ---------------------------------------------------------------------------
0001D5E6                            
0001D5E6                            Obj84_Delete:
0001D5E6 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001D5EC                            ; ===========================================================================
0001D5EC                            
0001D5EC                            EggmanCylinder:
0001D5EC 7000                       		moveq	#0,d0
0001D5EE 1028 0024                  		move.b	obRoutine(a0),d0
0001D5F2 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D5F6 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D5FA                            ; ===========================================================================
0001D5FA 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D5FC 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D5FE 0000                       		dc.w loc_1A57E-Obj84_Index
0001D600                            
0001D600 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D604 2550 0620                  		dc.w $2550, $620
0001D608 2490 04C0                  		dc.w $2490, $4C0
0001D60C 2510 04C0                  		dc.w $2510, $4C0
0001D610                            ; ===========================================================================
0001D610                            
0001D610                            Obj84_Main:	; Routine
0001D610 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D614 7000                       		moveq	#0,d0
0001D616 1028 0028                  		move.b	obSubtype(a0),d0
0001D61A D040                       		add.w	d0,d0
0001D61C D2C0                       		adda.w	d0,a1
0001D61E 117C 0004 0001             		move.b	#4,obRender(a0)
0001D624 08E8 0007 0001             		bset	#7,obRender(a0)
0001D62A 08E8 0004 0001             		bset	#4,obRender(a0)
0001D630 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D636 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D63E 3159 0008                  		move.w	(a1)+,obX(a0)
0001D642 3151 000C                  		move.w	(a1),obY(a0)
0001D646 3159 0038                  		move.w	(a1)+,$38(a0)
0001D64A 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D650 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D656 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D65C 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D662 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D668 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D66C                            
0001D66C                            loc_1A4CE:	; Routine 2
0001D66C 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D672 6F00                       		ble.s	loc_1A4DC
0001D674 08E8 0001 0001             		bset	#1,obRender(a0)
0001D67A                            
0001D67A                            loc_1A4DC:
0001D67A 42A8 003C                  		clr.l	$3C(a0)
0001D67E 4A28 0029                  		tst.b	$29(a0)
0001D682 6700                       		beq.s	loc_1A4EA
0001D684 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D688                            
0001D688                            loc_1A4EA:
0001D688 2028 003C                  		move.l	$3C(a0),d0
0001D68C 2228 0038                  		move.l	$38(a0),d1
0001D690 D280                       		add.l	d0,d1
0001D692 4841                       		swap	d1
0001D694 3141 000C                  		move.w	d1,obY(a0)
0001D698 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D69E 6600                       		bne.s	loc_1A524
0001D6A0 4A68 0030                  		tst.w	$30(a0)
0001D6A4 6A00                       		bpl.s	loc_1A524
0001D6A6 70F6                       		moveq	#-$A,d0
0001D6A8 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D6AE 6F00                       		ble.s	loc_1A514
0001D6B0 700E                       		moveq	#$E,d0
0001D6B2                            
0001D6B2                            loc_1A514:
0001D6B2 D240                       		add.w	d0,d1
0001D6B4 2268 0034                  		movea.l	$34(a0),a1
0001D6B8 3341 000C                  		move.w	d1,obY(a1)
0001D6BC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D6C2                            
0001D6C2                            loc_1A524:
0001D6C2 323C 002B                  		move.w	#$2B,d1
0001D6C6 343C 0060                  		move.w	#$60,d2
0001D6CA 363C 0061                  		move.w	#$61,d3
0001D6CE 3828 0008                  		move.w	obX(a0),d4
0001D6D2 4EB9 0001 1D98             		jsr	(SolidObject).l
0001D6D8 7000                       		moveq	#0,d0
0001D6DA 3228 003C                  		move.w	$3C(a0),d1
0001D6DE 6A00                       		bpl.s	loc_1A550
0001D6E0 4441                       		neg.w	d1
0001D6E2 5141                       		subq.w	#8,d1
0001D6E4 6500                       		bcs.s	loc_1A55C
0001D6E6 5200                       		addq.b	#1,d0
0001D6E8 E841                       		asr.w	#4,d1
0001D6EA D041                       		add.w	d1,d0
0001D6EC 6000                       		bra.s	loc_1A55C
0001D6EE                            ; ===========================================================================
0001D6EE                            
0001D6EE                            loc_1A550:
0001D6EE 0441 0027                  		subi.w	#$27,d1
0001D6F2 6500                       		bcs.s	loc_1A55C
0001D6F4 5200                       		addq.b	#1,d0
0001D6F6 E841                       		asr.w	#4,d1
0001D6F8 D041                       		add.w	d1,d0
0001D6FA                            
0001D6FA                            loc_1A55C:
0001D6FA 1140 001A                  		move.b	d0,obFrame(a0)
0001D6FE 3038 D008                  		move.w	(v_player+obX).w,d0
0001D702 9068 0008                  		sub.w	obX(a0),d0
0001D706 6B00                       		bmi.s	loc_1A578
0001D708 0440 0140                  		subi.w	#$140,d0
0001D70C 6B00                       		bmi.s	loc_1A578
0001D70E 4A28 0001                  		tst.b	obRender(a0)
0001D712 6A00 FED2                  		bpl.w	Obj84_Delete
0001D716                            
0001D716                            loc_1A578:
0001D716 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001D71C                            ; ===========================================================================
0001D71C                            
0001D71C                            loc_1A57E:	; Routine 4
0001D71C 7000                       		moveq	#0,d0
0001D71E 1028 0028                  		move.b	obSubtype(a0),d0
0001D722 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D726 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D72A 6000 FF5C                  		bra.w	loc_1A4EA
0001D72E                            ; ===========================================================================
0001D72E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D730 0000                       		dc.w loc_1A598-off_1A590
0001D732 0000                       		dc.w loc_1A604-off_1A590
0001D734 0000                       		dc.w loc_1A604-off_1A590
0001D736                            ; ===========================================================================
0001D736                            
0001D736                            loc_1A598:
0001D736 4A28 0029                  		tst.b	$29(a0)
0001D73A 6600                       		bne.s	loc_1A5D4
0001D73C 2268 0034                  		movea.l	$34(a0),a1
0001D740 4A29 0021                  		tst.b	obColProp(a1)
0001D744 6600                       		bne.s	loc_1A5B4
0001D746 6100 D232                  		bsr.w	BossDefeated
0001D74A 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D752                            
0001D752                            loc_1A5B4:
0001D752 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D75A 6400                       		bcc.s	locret_1A602
0001D75C 42A8 003C                  		clr.l	$3C(a0)
0001D760 2268 0034                  		movea.l	$34(a0),a1
0001D764 5369 0032                  		subq.w	#1,$32(a1)
0001D768 4269 0030                  		clr.w	$30(a1)
0001D76C 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D770 4E75                       		rts	
0001D772                            ; ===========================================================================
0001D772                            
0001D772                            loc_1A5D4:
0001D772 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D778 6C00                       		bge.s	loc_1A5E4
0001D77A 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D782                            
0001D782                            loc_1A5E4:
0001D782 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D78A 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D790 6E00                       		bgt.s	locret_1A602
0001D792 4268 003E                  		clr.w	$3E(a0)
0001D796 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D79C 4228 0029                  		clr.b	$29(a0)
0001D7A0                            
0001D7A0                            locret_1A602:
0001D7A0 4E75                       		rts	
0001D7A2                            ; ===========================================================================
0001D7A2                            
0001D7A2                            loc_1A604:
0001D7A2 08E8 0001 0001             		bset	#1,obRender(a0)
0001D7A8 4A28 0029                  		tst.b	$29(a0)
0001D7AC 6600                       		bne.s	loc_1A646
0001D7AE 2268 0034                  		movea.l	$34(a0),a1
0001D7B2 4A29 0021                  		tst.b	obColProp(a1)
0001D7B6 6600                       		bne.s	loc_1A626
0001D7B8 6100 D1C0                  		bsr.w	BossDefeated
0001D7BC 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D7C4                            
0001D7C4                            loc_1A626:
0001D7C4 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D7CC 6400                       		bcc.s	locret_1A674
0001D7CE 42A8 003C                  		clr.l	$3C(a0)
0001D7D2 2268 0034                  		movea.l	$34(a0),a1
0001D7D6 5369 0032                  		subq.w	#1,$32(a1)
0001D7DA 4269 0030                  		clr.w	$30(a1)
0001D7DE 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D7E2 4E75                       		rts	
0001D7E4                            ; ===========================================================================
0001D7E4                            
0001D7E4                            loc_1A646:
0001D7E4 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D7EA 6D00                       		blt.s	loc_1A656
0001D7EC 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D7F4                            
0001D7F4                            loc_1A656:
0001D7F4 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D7FC 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D802 6D00                       		blt.s	locret_1A674
0001D804 4268 003E                  		clr.w	$3E(a0)
0001D808 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D80E 4228 0029                  		clr.b	$29(a0)
0001D812                            
0001D812                            locret_1A674:
0001D812 4E75                       		rts	
0001D812 4E75                       		rts	
0001D814                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D814                            ; --------------------------------------------------------------------------------
0001D814                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D814                            ; --------------------------------------------------------------------------------
0001D814                            
0001D814                            SME_SCUpI:	
0001D814 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D818 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D81C 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D820 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D824 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D828 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D82C 06                         SME_SCUpI_18:	dc.b 6	
0001D82D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D832 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D837 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D83C B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D841 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D846 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D84B 08                         SME_SCUpI_37:	dc.b 8	
0001D84C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D851 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D856 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D85B B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D860 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D865 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D86A D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D86F A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D874 0A                         SME_SCUpI_60:	dc.b $A	
0001D875 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D87A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D87F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D884 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D889 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D88E D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D893 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D898 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D89D F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8A2 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8A7 0C                         SME_SCUpI_93:	dc.b $C	
0001D8A8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8AD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8B2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8B7 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8BC B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8C1 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8C6 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8CB F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D8D0 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8D5 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D8DA 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D8DF A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8E4 0D                         SME_SCUpI_D0:	dc.b $D	
0001D8E5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8EA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8EF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8F4 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8F9 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8FE D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D903 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D908 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D90D F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D912 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D917 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D91C 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D921 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D926 0E                         SME_SCUpI_112:	dc.b $E	
0001D927 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D92C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D931 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D936 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D93B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D940 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D945 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D94A F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D94F F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D954 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D959 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D95E 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D963 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D968 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D96D 0E                         SME_SCUpI_159:	dc.b $E	
0001D96E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D973 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D978 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D97D B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D982 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D987 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D98C D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D991 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D996 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D99B 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D9A0 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D9A5 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D9AA 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D9AF A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9B4 0E                         SME_SCUpI_1A0:	dc.b $E	
0001D9B5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D9BA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D9BF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D9C4 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D9C9 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D9CE D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D9D3 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D9D8 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D9DD F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D9E2 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D9E7 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D9EC 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D9F1 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D9F6 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9FB 0E                         SME_SCUpI_1E7:	dc.b $E	
0001D9FC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA01 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA06 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA0B B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA10 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA15 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA1A D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA1F F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA24 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA29 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA2E 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA33 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA38 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA3D A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA42 0E                         SME_SCUpI_22E:	dc.b $E	
0001DA43 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA48 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA4D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA52 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA57 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA5C D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA61 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA66 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA6B F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA70 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA75 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA7A 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA7F 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA84 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA89 0E                         SME_SCUpI_275:	dc.b $E	
0001DA8A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA8F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA94 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA99 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA9E B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DAA3 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DAA8 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DAAD F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DAB2 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DAB7 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DABC 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DAC1 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DAC6 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DACB A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DAD0 02                         SME_SCUpI_2BC:	dc.b 2	
0001DAD1 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001DAD6 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001DADC 00                         		even
0001DADC 00                         		even
0001DADC                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001DADC                            ; ---------------------------------------------------------------------------
0001DADC                            ; Object 86 - energy balls (FZ)
0001DADC                            ; ---------------------------------------------------------------------------
0001DADC                            
0001DADC                            BossPlasma:
0001DADC 7000                       		moveq	#0,d0
0001DADE 1028 0024                  		move.b	obRoutine(a0),d0
0001DAE2 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001DAE6 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001DAEA                            ; ===========================================================================
0001DAEA 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001DAEC 0000                       		dc.w Obj86_Generator-Obj86_Index
0001DAEE 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001DAF0 0000                       		dc.w loc_1A962-Obj86_Index
0001DAF2 0000                       		dc.w loc_1A982-Obj86_Index
0001DAF4                            ; ===========================================================================
0001DAF4                            
0001DAF4                            Obj86_Main:	; Routine 0
0001DAF4 317C 2588 0008             		move.w	#$2588,obX(a0)
0001DAFA 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DB00 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001DB06 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001DB0E 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DB14 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001DB1A 117C 0008 0017             		move.b	#8,obWidth(a0)
0001DB20 117C 0008 0016             		move.b	#8,obHeight(a0)
0001DB26 117C 0004 0001             		move.b	#4,obRender(a0)
0001DB2C 08E8 0007 0001             		bset	#7,obRender(a0)
0001DB32 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DB36                            
0001DB36                            Obj86_Generator:; Routine 2
0001DB36 2268 0034                  		movea.l	$34(a0),a1
0001DB3A 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001DB40 6600                       		bne.s	loc_1A850
0001DB42 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001DB46 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001DB4C 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001DB52                            ; ===========================================================================
0001DB52                            
0001DB52                            loc_1A850:
0001DB52 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DB58 4A28 0029                  		tst.b	$29(a0)
0001DB5C 6700                       		beq.s	loc_1A86C
0001DB5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DB62 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DB68 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001DB6E                            
0001DB6E                            loc_1A86C:
0001DB6E 323C 0013                  		move.w	#$13,d1
0001DB72 343C 0008                  		move.w	#8,d2
0001DB76 363C 0011                  		move.w	#$11,d3
0001DB7A 3828 0008                  		move.w	obX(a0),d4
0001DB7E 4EB9 0001 1D98             		jsr	(SolidObject).l
0001DB84 3038 D008                  		move.w	(v_player+obX).w,d0
0001DB88 9068 0008                  		sub.w	obX(a0),d0
0001DB8C 6B00                       		bmi.s	loc_1A89A
0001DB8E 0440 0140                  		subi.w	#$140,d0
0001DB92 6B00                       		bmi.s	loc_1A89A
0001DB94 4A28 0001                  		tst.b	obRender(a0)
0001DB98 6A00 FA4C                  		bpl.w	Obj84_Delete
0001DB9C                            
0001DB9C                            loc_1A89A:
0001DB9C 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001DBA0 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001DBA6 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001DBAC                            ; ===========================================================================
0001DBAC                            
0001DBAC                            Obj86_MakeBalls:; Routine 4
0001DBAC 4A28 0029                  		tst.b	$29(a0)
0001DBB0 6700 0000                  		beq.w	loc_1A954
0001DBB4 4228 0029                  		clr.b	$29(a0)
0001DBB8 D068 0030                  		add.w	$30(a0),d0
0001DBBC 0240 001E                  		andi.w	#$1E,d0
0001DBC0 D4C0                       		adda.w	d0,a2
0001DBC2 5868 0030                  		addq.w	#4,$30(a0)
0001DBC6 4268 0032                  		clr.w	$32(a0)
0001DBCA 7403                       		moveq	#3,d2
0001DBCC                            
0001DBCC                            Obj86_Loop:
0001DBCC 4EB9 0000 FE2C             		jsr	(FindNextFreeObj).l
0001DBD2 6600 0000                  		bne.w	loc_1A954
0001DBD6 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001DBDA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DBE0 337C 053C 000C             		move.w	#$53C,obY(a1)
0001DBE6 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001DBEC 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001DBF2 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001DBFA 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DC00 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DC06 137C 0000 0020             		move.b	#0,obColType(a1)
0001DC0C 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DC12 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DC18 137C 0004 0001             		move.b	#4,obRender(a1)
0001DC1E 08E9 0007 0001             		bset	#7,obRender(a1)
0001DC24 2348 0034                  		move.l	a0,$34(a1)
0001DC28 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001DC2E 3228 0032                  		move.w	$32(a0),d1
0001DC32 C3FC FFB1                  		muls.w	#-$4F,d1
0001DC36 0641 2578                  		addi.w	#$2578,d1
0001DC3A 0240 001F                  		andi.w	#$1F,d0
0001DC3E 0440 0010                  		subi.w	#$10,d0
0001DC42 D041                       		add.w	d1,d0
0001DC44 3340 0030                  		move.w	d0,$30(a1)
0001DC48 5268 0032                  		addq.w	#1,$32(a0)
0001DC4C 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DC52 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DC56                            
0001DC56                            loc_1A954:
0001DC56 4A68 0032                  		tst.w	$32(a0)
0001DC5A 6600                       		bne.s	loc_1A95E
0001DC5C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DC60                            
0001DC60                            loc_1A95E:
0001DC60 6000 FF0C                  		bra.w	loc_1A86C
0001DC64                            ; ===========================================================================
0001DC64                            
0001DC64                            loc_1A962:	; Routine 6
0001DC64 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DC6A 4A68 0038                  		tst.w	$38(a0)
0001DC6E 6600                       		bne.s	loc_1A97E
0001DC70 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DC76 2268 0034                  		movea.l	$34(a0),a1
0001DC7A 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DC80                            
0001DC80                            loc_1A97E:
0001DC80 6000 FEEC                  		bra.w	loc_1A86C
0001DC84                            ; ===========================================================================
0001DC84                            
0001DC84                            loc_1A982:	; Routine 8
0001DC84 7000                       		moveq	#0,d0
0001DC86 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DC8A 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DC8E 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DC92 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DC96 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001DC9C 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001DCA2                            ; ===========================================================================
0001DCA2 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DCA4 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DCA6 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DCA8                            ; ===========================================================================
0001DCA8                            
0001DCA8                            loc_1A9A6:
0001DCA8 3028 0030                  		move.w	$30(a0),d0
0001DCAC 9068 0008                  		sub.w	obX(a0),d0
0001DCB0 E940                       		asl.w	#4,d0
0001DCB2 3140 0010                  		move.w	d0,obVelX(a0)
0001DCB6 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DCBC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DCC0 4E75                       		rts	
0001DCC2                            ; ===========================================================================
0001DCC2                            
0001DCC2                            loc_1A9C0:
0001DCC2 4A68 0010                  		tst.w	obVelX(a0)
0001DCC6 6700                       		beq.s	loc_1A9E6
0001DCC8 4EB9 0000 F976             		jsr	(SpeedToPos).l
0001DCCE 3028 0008                  		move.w	obX(a0),d0
0001DCD2 9068 0030                  		sub.w	$30(a0),d0
0001DCD6 6400                       		bcc.s	loc_1A9E6
0001DCD8 4268 0010                  		clr.w	obVelX(a0)
0001DCDC D168 0008                  		add.w	d0,obX(a0)
0001DCE0 2268 0034                  		movea.l	$34(a0),a1
0001DCE4 5369 0032                  		subq.w	#1,$32(a1)
0001DCE8                            
0001DCE8                            loc_1A9E6:
0001DCE8 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DCEE 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DCF2 6600                       		bne.s	locret_1AA1C
0001DCF4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DCF8 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DCFE 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DD04 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DD0A 7000                       		moveq	#0,d0
0001DD0C 3038 D008                  		move.w	(v_player+obX).w,d0
0001DD10 9068 0008                  		sub.w	obX(a0),d0
0001DD14 3140 0010                  		move.w	d0,obVelX(a0)
0001DD18 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DD1E                            
0001DD1E                            locret_1AA1C:
0001DD1E 4E75                       		rts	
0001DD20                            ; ===========================================================================
0001DD20                            
0001DD20                            loc_1AA1E:
0001DD20 4EB9 0000 F976             		jsr	(SpeedToPos).l
0001DD26 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DD2C 6400                       		bcc.s	loc_1AA34
0001DD2E 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DD32 6700                       		beq.s	loc_1AA34
0001DD34 4E75                       		rts	
0001DD36                            ; ===========================================================================
0001DD36                            
0001DD36                            loc_1AA34:
0001DD36 2268 0034                  		movea.l	$34(a0),a1
0001DD3A 5369 0038                  		subq.w	#1,$38(a1)
0001DD3E 6000 F8A6                  		bra.w	Obj84_Delete
0001DD3E 6000 F8A6                  		bra.w	Obj84_Delete
0001DD42                            		include	"_anim\Plasma Ball Launcher.asm"
0001DD42                            ; ---------------------------------------------------------------------------
0001DD42                            ; Animation script - energy ball launcher (FZ)
0001DD42                            ; ---------------------------------------------------------------------------
0001DD42 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DD44 0000                       		dc.w @redsparking-Ani_PLaunch
0001DD46 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DD48 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DD4C 00                         		even
0001DD4C 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DD52                            		even
0001DD52 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DD58                            		even
0001DD58                            		even
0001DD58                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DD58                            ; ---------------------------------------------------------------------------
0001DD58                            ; Sprite mappings - energy ball	launcher (FZ)
0001DD58                            ; ---------------------------------------------------------------------------
0001DD58                            Map_PLaunch_internal:
0001DD58 0000                       		dc.w @red-Map_PLaunch_internal
0001DD5A 0000                       		dc.w @white-Map_PLaunch_internal
0001DD5C 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DD5E 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DD60 01                         @red:		dc.b 1
0001DD61 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DD66 01                         @white:		dc.b 1
0001DD67 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DD6C 01                         @sparking1:	dc.b 1
0001DD6D F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DD72 01                         @sparking2:	dc.b 1
0001DD73 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DD78                            		even
0001DD78                            		even
0001DD78                            		include	"_anim\Plasma Balls.asm"
0001DD78                            ; ---------------------------------------------------------------------------
0001DD78                            ; Animation script - energy balls (FZ)
0001DD78                            ; ---------------------------------------------------------------------------
0001DD78 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DD7A 0000                       		dc.w @short-Ani_Plasma
0001DD7C 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DD8B 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DD9A 0A05 FF                    		dc.b $A, 5, afEnd
0001DD9E 00                         		even
0001DD9E 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DDA8                            		even
0001DDA8                            		even
0001DDA8                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DDA8                            ; ---------------------------------------------------------------------------
0001DDA8                            ; Sprite mappings - energy balls (FZ)
0001DDA8                            ; ---------------------------------------------------------------------------
0001DDA8                            Map_Plasma_internal:
0001DDA8 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DDAA 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DDAC 0000                       		dc.w @white1-Map_Plasma_internal
0001DDAE 0000                       		dc.w @white2-Map_Plasma_internal
0001DDB0 0000                       		dc.w @white3-Map_Plasma_internal
0001DDB2 0000                       		dc.w @white4-Map_Plasma_internal
0001DDB4 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DDB6 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DDB8 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DDBA 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DDBC 0000                       		dc.w @blank-Map_Plasma_internal
0001DDBE 02                         @fuzzy1:	dc.b 2
0001DDBF F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DDC4 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DDC9 02                         @fuzzy2:	dc.b 2
0001DDCA F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DDCF F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DDD4 02                         @white1:	dc.b 2
0001DDD5 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DDDA 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DDDF 02                         @white2:	dc.b 2
0001DDE0 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DDE5 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DDEA 02                         @white3:	dc.b 2
0001DDEB F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DDF0 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DDF5 02                         @white4:	dc.b 2
0001DDF6 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DDFB F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DE00 01                         @fuzzy3:	dc.b 1
0001DE01 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DE06 01                         @fuzzy4:	dc.b 1
0001DE07 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DE0C 02                         @fuzzy5:	dc.b 2
0001DE0D F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DE12 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DE17 02                         @fuzzy6:	dc.b 2
0001DE18 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DE1D F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DE22 00                         @blank:		dc.b 0
0001DE24 00                         		even
0001DE24 00                         		even
0001DE24                            
0001DE24                            		include	"_incObj\3E Prison Capsule.asm"
0001DE24                            ; ---------------------------------------------------------------------------
0001DE24                            ; Object 3E - prison capsule
0001DE24                            ; ---------------------------------------------------------------------------
0001DE24                            
0001DE24                            Prison:
0001DE24 7000                       		moveq	#0,d0
0001DE26 1028 0024                  		move.b	obRoutine(a0),d0
0001DE2A 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DE2E 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DE4E 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001DE54                            
0001DE54                            	@delete:
0001DE54 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001DE5A                            ; ===========================================================================
0001DE5A 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DE5C 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DE5E 0000                       		dc.w Pri_Switched-Pri_Index
0001DE60 0000                       		dc.w Pri_Explosion-Pri_Index
0001DE62 0000                       		dc.w Pri_Explosion-Pri_Index
0001DE64 0000                       		dc.w Pri_Explosion-Pri_Index
0001DE66 0000                       		dc.w Pri_Animals-Pri_Index
0001DE68 0000                       		dc.w Pri_EndAct-Pri_Index
0001DE6A                            
0001DE6A =00000030                  pri_origY:	equ $30		; original y-axis position
0001DE6A                            
0001DE6A 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DE6E 040C 0501                  		dc.b 4,	$C, 5, 1
0001DE72 0610 0403                  		dc.b 6,	$10, 4,	3
0001DE76 0810 0305                  		dc.b 8,	$10, 3,	5
0001DE7A                            ; ===========================================================================
0001DE7A                            
0001DE7A                            Pri_Main:	; Routine 0
0001DE7A 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DE82 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DE88 117C 0004 0001             		move.b	#4,obRender(a0)
0001DE8E 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DE94 7000                       		moveq	#0,d0
0001DE96 1028 0028                  		move.b	obSubtype(a0),d0
0001DE9A E548                       		lsl.w	#2,d0
0001DE9C 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DEA0 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DEA4 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DEA8 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DEAC 3028 0018                  		move.w obPriority(a0),d0 
0001DEB0 E248                       		lsr.w #1,d0 
0001DEB2 0240 0380                  		andi.w #$380,d0 
0001DEB6 3140 0018                  		move.w d0,obPriority(a0)		
0001DEBA 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DEBE 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DEC2 6600                       		bne.s	@not02		; if not, branch
0001DEC4                            
0001DEC4 117C 0006 0020             		move.b	#6,obColType(a0)
0001DECA 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DED0                            
0001DED0                            	@not02:
0001DED0 4E75                       		rts	
0001DED2                            ; ===========================================================================
0001DED2                            
0001DED2                            Pri_BodyMain:	; Routine 2
0001DED2 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DED8 6700                       		beq.s	@chkopened
0001DEDA 323C 002B                  		move.w	#$2B,d1
0001DEDE 343C 0018                  		move.w	#$18,d2
0001DEE2 363C 0018                  		move.w	#$18,d3
0001DEE6 3828 0008                  		move.w	obX(a0),d4
0001DEEA 4EF9 0001 1D98             		jmp	(SolidObject).l
0001DEF0                            ; ===========================================================================
0001DEF0                            
0001DEF0                            @chkopened:
0001DEF0 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DEF4 6700                       		beq.s	@open		; if yes, branch
0001DEF6 4228 0025                  		clr.b	ob2ndRout(a0)
0001DEFA 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DF00 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DF06                            
0001DF06                            	@open:
0001DF06 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DF0C 4E75                       		rts	
0001DF0E                            ; ===========================================================================
0001DF0E                            
0001DF0E                            Pri_Switched:	; Routine 4
0001DF0E 323C 0017                  		move.w	#$17,d1
0001DF12 343C 0008                  		move.w	#8,d2
0001DF16 363C 0008                  		move.w	#8,d3
0001DF1A 3828 0008                  		move.w	obX(a0),d4
0001DF1E 4EB9 0001 1D98             		jsr	(SolidObject).l
0001DF24 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DF2A 4EB9 0000 CA36             		jsr	(AnimateSprite).l
0001DF30 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DF36 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DF3A 6700                       		beq.s	@open2		; if yes, branch
0001DF3C                            
0001DF3C 5068 000C                  		addq.w	#8,obY(a0)
0001DF40 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DF46 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DF4C 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DF50 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DF54 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DF5A 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DF60 4228 0025                  		clr.b	ob2ndRout(a0)
0001DF64 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DF6A 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DF70                            
0001DF70                            	@open2:
0001DF70 4E75                       		rts	
0001DF72                            ; ===========================================================================
0001DF72                            
0001DF72                            Pri_Explosion:	; Routine 6, 8, $A
0001DF72 7007                       		moveq	#7,d0
0001DF74 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DF78 6600                       		bne.s	@noexplosion
0001DF7A 4EB9 0000 FE16             		jsr	(FindFreeObj).l
0001DF80 6600                       		bne.s	@noexplosion
0001DF82 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001DF86 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DF8C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DF92 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001DF98 7200                       		moveq	#0,d1
0001DF9A 1200                       		move.b	d0,d1
0001DF9C E409                       		lsr.b	#2,d1
0001DF9E 0441 0020                  		subi.w	#$20,d1
0001DFA2 D369 0008                  		add.w	d1,obX(a1)
0001DFA6 E048                       		lsr.w	#8,d0
0001DFA8 E608                       		lsr.b	#3,d0
0001DFAA D169 000C                  		add.w	d0,obY(a1)
0001DFAE                            
0001DFAE                            	@noexplosion:
0001DFAE 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DFB2 6700                       		beq.s	@makeanimal
0001DFB4 4E75                       		rts	
0001DFB6                            ; ===========================================================================
0001DFB6                            
0001DFB6                            @makeanimal:
0001DFB6 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001DFBC 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001DFC2 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DFC8 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001DFCE 0668 0020 000C             		addi.w	#$20,obY(a0)
0001DFD4 7C07                       		moveq	#7,d6
0001DFD6 3A3C 009A                  		move.w	#$9A,d5
0001DFDA 78E4                       		moveq	#-$1C,d4
0001DFDC                            
0001DFDC                            	@loop:
0001DFDC 4EB9 0000 FE16             		jsr	(FindFreeObj).l
0001DFE2 6600                       		bne.s	@fail
0001DFE4 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DFE8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DFEE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DFF4 D969 0008                  		add.w	d4,obX(a1)
0001DFF8 5E44                       		addq.w	#7,d4
0001DFFA 3345 0036                  		move.w	d5,$36(a1)
0001DFFE 5145                       		subq.w	#8,d5
0001E000 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001E004                            
0001E004                            	@fail:
0001E004 4E75                       		rts	
0001E006                            ; ===========================================================================
0001E006                            
0001E006                            Pri_Animals:	; Routine $C
0001E006 7007                       		moveq	#7,d0
0001E008 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001E00C 6600                       		bne.s	@noanimal
0001E00E 4EB9 0000 FE16             		jsr	(FindFreeObj).l
0001E014 6600                       		bne.s	@noanimal
0001E016 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E01A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E020 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E026 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001E02C 0240 001F                  		andi.w	#$1F,d0
0001E030 5D40                       		subq.w	#6,d0
0001E032 4A41                       		tst.w	d1
0001E034 6A00                       		bpl.s	@ispositive
0001E036 4440                       		neg.w	d0
0001E038                            
0001E038                            	@ispositive:
0001E038 D169 0008                  		add.w	d0,obX(a1)
0001E03C 337C 000C 0036             		move.w	#$C,$36(a1)
0001E042                            
0001E042                            	@noanimal:
0001E042 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E046 6600                       		bne.s	@wait
0001E048 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E04C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001E052                            
0001E052                            	@wait:
0001E052 4E75                       		rts	
0001E054                            ; ===========================================================================
0001E054                            
0001E054                            Pri_EndAct:	; Routine $E
0001E054 703E                       		moveq	#$3E,d0
0001E056 7228                       		moveq	#id_Animals,d1
0001E058 7440                       		moveq	#$40,d2
0001E05A 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001E05E                            
0001E05E                            	@findanimal:
0001E05E B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001E060 6700                       		beq.s	@found		; if yes, branch
0001E062 D2C2                       		adda.w	d2,a1		; next object RAM
0001E064 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001E068                            
0001E068 4EB9 0001 10BA             		jsr	(GotThroughAct1).l
0001E06E 4EF9 0000 F9CA             		jmp	(DeleteObject).l
0001E074                            
0001E074                            	@found:
0001E074 4E75                       		rts	
0001E074 4E75                       		rts	
0001E076                            		include	"_anim\Prison Capsule.asm"
0001E076                            ; ---------------------------------------------------------------------------
0001E076                            ; Animation script - prison capsule
0001E076                            ; ---------------------------------------------------------------------------
0001E076 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001E078 0000                       		dc.w @switchflash-Ani_Pri
0001E07A 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001E07E                            		even
0001E07E                            		even
0001E07E                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001E07E                            ; ---------------------------------------------------------------------------
0001E07E                            ; Sprite mappings - prison capsule
0001E07E                            ; ---------------------------------------------------------------------------
0001E07E                            Map_Pri_internal:
0001E07E 0000                       		dc.w @capsule-Map_Pri_internal
0001E080 0000                       		dc.w @switch1-Map_Pri_internal
0001E082 0000                       		dc.w @broken-Map_Pri_internal
0001E084 0000                       		dc.w @switch2-Map_Pri_internal
0001E086 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001E088 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001E08A 0000                       		dc.w @blank-Map_Pri_internal
0001E08C 07                         @capsule:	dc.b 7
0001E08D E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001E092 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001E097 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001E09C F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001E0A1 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001E0A6 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E0AB 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E0B0 01                         @switch1:	dc.b 1
0001E0B1 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001E0B6 06                         @broken:	dc.b 6
0001E0B7 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001E0BC 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001E0C1 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001E0C6 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001E0CB 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E0D0 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E0D5 01                         @switch2:	dc.b 1
0001E0D6 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001E0DB 02                         @unusedthing1:	dc.b 2
0001E0DC E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001E0E1 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001E0E6 01                         @unusedthing2:	dc.b 1
0001E0E7 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001E0EC 00                         @blank:		dc.b 0
0001E0EE 00                         		even
0001E0EE 00                         		even
0001E0EE                            
0001E0EE                            		include	"_incObj\sub ReactToItem.asm"
0001E0EE                            ; ---------------------------------------------------------------------------
0001E0EE                            ; Subroutine to react to obColType(a0)
0001E0EE                            ; ---------------------------------------------------------------------------
0001E0EE                            
0001E0EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E0EE                            
0001E0EE                            
0001E0EE                            ReactToItem:
0001E0EE 4E71                       		nop	
0001E0F0 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001E0F4 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001E0F8 5142                       		subq.w	#8,d2
0001E0FA 7A00                       		moveq	#0,d5
0001E0FC 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001E100 5705                       		subq.b	#3,d5
0001E102 9645                       		sub.w	d5,d3
0001E104 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001E10A 6600                       		bne.s	@notducking	; if not, branch
0001E10C 0643 000C                  		addi.w	#$C,d3
0001E110 7A0A                       		moveq	#$A,d5
0001E112                            
0001E112                            	@notducking:
0001E112 383C 0010                  		move.w	#$10,d4
0001E116 DA45                       		add.w	d5,d5
0001E118 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001E11C 3C3C 005F                  		move.w	#$5F,d6
0001E120                            
0001E120                            @loop:
0001E120 4A29 0001                  		tst.b	obRender(a1)
0001E124 6A00                       		bpl.s	@next
0001E126 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001E12A 6600                       		bne.s	@proximity	; if nonzero, branch
0001E12C                            
0001E12C                            	@next:
0001E12C 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001E130 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001E134                            
0001E134 7000                       		moveq	#0,d0
0001E136 4E75                       		rts	
0001E138                            ; ===========================================================================
0001E138                            @sizes:		;   width, height
0001E138 1414                       		dc.b  $14, $14		; $01
0001E13A 0C14                       		dc.b   $C, $14		; $02
0001E13C 140C                       		dc.b  $14,  $C		; $03
0001E13E 0410                       		dc.b	4, $10		; $04
0001E140 0C12                       		dc.b   $C, $12		; $05
0001E142 1010                       		dc.b  $10, $10		; $06
0001E144 0606                       		dc.b	6,   6		; $07
0001E146 180C                       		dc.b  $18,  $C		; $08
0001E148 0C10                       		dc.b   $C, $10		; $09
0001E14A 100C                       		dc.b  $10,  $C		; $0A
0001E14C 0808                       		dc.b	8,   8		; $0B
0001E14E 1410                       		dc.b  $14, $10		; $0C
0001E150 1408                       		dc.b  $14,   8		; $0D
0001E152 0E0E                       		dc.b   $E,  $E		; $0E
0001E154 1818                       		dc.b  $18, $18		; $0F
0001E156 2810                       		dc.b  $28, $10		; $10
0001E158 1018                       		dc.b  $10, $18		; $11
0001E15A 0810                       		dc.b	8, $10		; $12
0001E15C 2070                       		dc.b  $20, $70		; $13
0001E15E 4020                       		dc.b  $40, $20		; $14
0001E160 8020                       		dc.b  $80, $20		; $15
0001E162 2020                       		dc.b  $20, $20		; $16
0001E164 0808                       		dc.b	8,   8		; $17
0001E166 0404                       		dc.b	4,   4		; $18
0001E168 2008                       		dc.b  $20,   8		; $19
0001E16A 0C0C                       		dc.b   $C,  $C		; $1A
0001E16C 0804                       		dc.b	8,   4		; $1B
0001E16E 1804                       		dc.b  $18,   4		; $1C
0001E170 2804                       		dc.b  $28,   4		; $1D
0001E172 0408                       		dc.b	4,   8		; $1E
0001E174 0418                       		dc.b	4, $18		; $1F
0001E176 0428                       		dc.b	4, $28		; $20
0001E178 0420                       		dc.b	4, $20		; $21
0001E17A 1818                       		dc.b  $18, $18		; $22
0001E17C 0C18                       		dc.b   $C, $18		; $23
0001E17E 4808                       		dc.b  $48,   8		; $24
0001E180                            ; ===========================================================================
0001E180                            
0001E180                            @proximity:
0001E180 0240 003F                  		andi.w	#$3F,d0
0001E184 D040                       		add.w	d0,d0
0001E186 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001E18A 7200                       		moveq	#0,d1
0001E18C 121A                       		move.b	(a2)+,d1
0001E18E 3029 0008                  		move.w	obX(a1),d0
0001E192 9041                       		sub.w	d1,d0
0001E194 9042                       		sub.w	d2,d0
0001E196 6400                       		bcc.s	@outsidex	; branch if not touching
0001E198 D241                       		add.w	d1,d1
0001E19A D041                       		add.w	d1,d0
0001E19C 6500                       		bcs.s	@withinx	; branch if touching
0001E19E 6000 FF8C                  		bra.w	@next
0001E1A2                            ; ===========================================================================
0001E1A2                            
0001E1A2                            @outsidex:
0001E1A2 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E1A6 B044                       		cmp.w	d4,d0
0001E1A8 6200 FF82                  		bhi.w	@next
0001E1AC                            
0001E1AC                            @withinx:
0001E1AC 7200                       		moveq	#0,d1
0001E1AE 121A                       		move.b	(a2)+,d1
0001E1B0 3029 000C                  		move.w	obY(a1),d0
0001E1B4 9041                       		sub.w	d1,d0
0001E1B6 9043                       		sub.w	d3,d0
0001E1B8 6400                       		bcc.s	@outsidey	; branch if not touching
0001E1BA D241                       		add.w	d1,d1
0001E1BC D240                       		add.w	d0,d1
0001E1BE 6500                       		bcs.s	@withiny	; branch if touching
0001E1C0 6000 FF6A                  		bra.w	@next
0001E1C4                            
0001E1C4                            ; ===========================================================================
0001E1C4                            
0001E1C4                            @outsidey:
0001E1C4 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E1C8 B045                       		cmp.w	d5,d0
0001E1CA 6200 FF60                  		bhi.w	@next
0001E1CE                            
0001E1CE                            @withiny:
0001E1CE                            	@chktype:
0001E1CE 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001E1D4 6600 0000                          	bne	NotGHZReact  ;TIS
0001E1D8 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001E1DC 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001E1E0 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E1E4 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001E1E8 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E1EC 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E1F0 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E1F4                            NotGHZReact:                      ;TIS
0001E1F4 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E1F8 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E1FC 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E200 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E204 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E208 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E20A 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E20E                            
0001E20E                            ; obColType is $40-$7F (powerups)
0001E20E                            
0001E20E 1029 0020                  		move.b	obColType(a1),d0
0001E212 0200 003F                  		andi.b	#$3F,d0
0001E216 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E21A 6700                       		beq.s	React_Monitor	; if yes, branch
0001E21C 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E222 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E226 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E22A                            
0001E22A                            	@invincible:
0001E22A 4E75                       		rts	
0001E22C                            ; ===========================================================================
0001E22C                            
0001E22C                            React_Monitor:
0001E22C 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E230 6A00                       		bpl.s	@movingdown	; if not, branch
0001E232                            
0001E232 3028 000C                  		move.w	obY(a0),d0
0001E236 0440 0010                  		subi.w	#$10,d0
0001E23A B069 000C                  		cmp.w	obY(a1),d0
0001E23E 6500                       		bcs.s	@donothing
0001E240 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E244 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E24A 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E24E 6600                       		bne.s	@donothing
0001E250 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E254 4E75                       		rts	
0001E256                            ; ===========================================================================
0001E256                            
0001E256                            @movingdown:
0001E256 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E25C 6600                       		bne.s	@donothing
0001E25E 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E262 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E266                            
0001E266                            	@donothing:
0001E266 4E75                       		rts	
0001E268                            ; ===========================================================================
0001E268                            
0001E268                            React_Enemy:
0001E268 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E26C 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E26E 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E274 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E278 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E27E 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E282                            
0001E282                            	@donthurtsonic:
0001E282 4A29 0021                  		tst.b	obColProp(a1)
0001E286 6700                       		beq.s	breakenemy
0001E288                            
0001E288 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E28C 4468 0012                  		neg.w	obVelY(a0)
0001E290 E0E8 0010                  		asr	obVelX(a0)
0001E294 E0E8 0012                  		asr	obVelY(a0)
0001E298 137C 0000 0020             		move.b	#0,obColType(a1)
0001E29E 5329 0021                  		subq.b	#1,obColProp(a1)
0001E2A2 6600                       		bne.s	@flagnotclear
0001E2A4 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E2AA                            
0001E2AA                            	@flagnotclear:
0001E2AA 4E75                       		rts	
0001E2AC                            ; ===========================================================================
0001E2AC                            
0001E2AC                            breakenemy:
0001E2AC 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E2B2 7000                       		moveq	#0,d0
0001E2B4 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E2B8 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E2BC 0C40 0006                  		cmpi.w	#6,d0
0001E2C0 6500                       		bcs.s	@bonusokay
0001E2C2 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E2C4                            
0001E2C4                            	@bonusokay:
0001E2C4 3340 003E                  		move.w	d0,$3E(a1)
0001E2C8 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E2CC 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E2D2 6500                       		bcs.s	@lessthan16	; if not, branch
0001E2D4 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E2D8 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E2DE                            
0001E2DE                            	@lessthan16:
0001E2DE 6100 0000                  		bsr.w	AddPoints
0001E2E2 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E2E6 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E2EC 4A68 0012                  		tst.w	obVelY(a0)
0001E2F0 6B00                       		bmi.s	@bouncedown
0001E2F2 3028 000C                  		move.w	obY(a0),d0
0001E2F6 B069 000C                  		cmp.w	obY(a1),d0
0001E2FA 6400                       		bcc.s	@bounceup
0001E2FC 4468 0012                  		neg.w	obVelY(a0)
0001E300 4E75                       		rts	
0001E302                            ; ===========================================================================
0001E302                            
0001E302                            	@bouncedown:
0001E302 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E308 4E75                       		rts	
0001E30A                            
0001E30A                            	@bounceup:
0001E30A 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E310 4E75                       		rts	
0001E312                            
0001E312 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E31A                            
0001E31A                            ; ===========================================================================
0001E31A                            
0001E31A                            React_Caterkiller:
0001E31A 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E320                            
0001E320                            React_ChkHurt:
0001E320 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E324 6700                       		beq.s	notinvincible	; if not, branch
0001E326                            
0001E326                            	isflashing:
0001E326 70FF                       		moveq	#-1,d0
0001E328 4E75                       		rts	
0001E32A                            ; ===========================================================================
0001E32A                            
0001E32A                            	notinvincible:
0001E32A 4E71                       		nop	
0001E32C 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E330 66F4                       		bne.s	isflashing	; if yes, branch
0001E332 2449                       		movea.l	a1,a2
0001E334                            
0001E334                            ; End of function ReactToItem
0001E334                            ; continue straight to HurtSonic
0001E334                            
0001E334                            ; ---------------------------------------------------------------------------
0001E334                            ; Hurting Sonic	subroutine
0001E334                            ; ---------------------------------------------------------------------------
0001E334                            
0001E334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E334                            
0001E334                            
0001E334                            HurtSonic:
0001E334 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E338 6600                       		bne.s	@hasshield	; if yes, branch
0001E33A 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E33E 6600                       		bne.s	@hasshield	; if yes, branch
0001E340 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E344 6600                       		bne.s	@hasshield	; if yes, branch
0001E346 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E34A 6600                       		bne.s	@hasshield	; if yes, branch
0001E34C 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E350 6700 0000                  		beq.w	@norings	; if not, branch
0001E354                            
0001E354 4EB9 0000 FE16             		jsr	(FindFreeObj).l
0001E35A 6600                       		bne.s	@hasshield
0001E35C 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E360 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E366 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E36C                            
0001E36C                            	@hasshield:
0001E36C 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E372 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E374 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E378 6700 FFAC                  		beq.w	isflashing
0001E37C 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E380 6700 FFA4                  		beq.w	isflashing
0001E384                            
0001E384                            	@hasrshield:
0001E384 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E38A 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E38C 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E390 6700 FF94                  		beq.w 	isflashing
0001E394 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E398 6700 FF8C                  		beq.w 	isflashing
0001E39C 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E3A0 6700 FF84                  		beq.w 	isflashing
0001E3A4 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E3A8 6700 FF7C                  		beq.w 	isflashing
0001E3AC 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E3B0 6700 FF74                  		beq.w 	isflashing
0001E3B4 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E3B8 6700 FF6C                  		beq.w 	isflashing
0001E3BC 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E3C0 6700 FF64                  		beq.w 	isflashing
0001E3C4 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E3C8 6700 FF5C                  		beq.w 	isflashing
0001E3CC                            
0001E3CC                            	@hasspshield:
0001E3CC 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E3D2 6600                       		bne.s	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E3D4 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E3D8 6700 FF4C                  		beq.w 	isflashing
0001E3DC 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E3E0 6700 FF44                  		beq.w 	isflashing
0001E3E4 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E3E8 6700 FF3C                  		beq.w 	isflashing
0001E3EC 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E3F0 6700 FF34                  		beq.w 	isflashing
0001E3F4 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E3F8 6700 FF2C                  		beq.w 	isflashing
0001E3FC 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E400 6700 FF24                  		beq.w 	isflashing
0001E404 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E408 6700 FF1C                  		beq.w 	isflashing
0001E40C 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E410 6700 FF14                  		beq.w 	isflashing
0001E414 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E418 6700 FF0C                  		beq.w 	isflashing
0001E41C 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E420 6700 FE8A                  		beq.w 	breakenemy
0001E424 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E428 6700 FE82                  		beq.w 	breakenemy
0001E42C 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E430 6700 FE7A                  		beq.w 	breakenemy
0001E434 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E438 6700 FE72                  		beq.w 	breakenemy
0001E43C 0C12 005F                  		cmpi.b	#$5F,(a2)	; was damage caused by Bomb enemy?
0001E440 6700 FE6A                  		beq.w 	breakenemy
0001E444                            
0001E444                            
0001E444                            	@hurtcont:
0001E444 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E44A 11FC 0000 F5C9             		move.b	#0,(v_gshield).w	; remove g shield
0001E450 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E456                            		
0001E456 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E45C 6700                       		beq.s	@hurtcont2	;if not, branch
0001E45E 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E462                            		
0001E462                            	@hurtcont2:
0001E462 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E468 4EB9 0001 63D6             		jsr		Sonic_ResetOnFloor
0001E46E 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E474 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E47A 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E480 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E486 6700                       		beq.s	@isdry		; if not, branch
0001E488                            
0001E488 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E48E 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E494                            
0001E494                            	@isdry:
0001E494 3028 0008                  		move.w	obX(a0),d0
0001E498 B06A 0008                  		cmp.w	obX(a2),d0
0001E49C 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E49E 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E4A2                            
0001E4A2                            	@isleft:
0001E4A2 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E4A8 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E4AE 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E4B4 317C 0120 0030             		move.w	#$120,$30(a0)
0001E4BA 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E4BE 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E4C0 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E4C4 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E4C6 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E4CC 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E4D2 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E4D8 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E4DC 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E4E0 6600                       		bne.s	@sound		; if not, branch
0001E4E2 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E4E6 6600                       		bne.s	@sound		; if not, branch
0001E4E8 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E4EC                            
0001E4EC                            	@sound:
0001E4EC 4EB9 0000 1254             		jsr	(PlaySound_Special).l
0001E4F2 70FF                       		moveq	#-1,d0
0001E4F4 4E75                       		rts	
0001E4F6                            
0001E4F6                            	@hurtelec:
0001E4F6 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E4FC 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E502 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E506 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E50A 66E0                       		bne.s	@sound		; if not, branch
0001E50C 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E510 66DA                       		bne.s	@sound		; if not, branch
0001E512 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E516                            ; ===========================================================================
0001E516                            
0001E516                            @norings:
0001E516 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E51A 6600 FE50                  		bne.w	@hasshield	; if yes, branch
0001E51E                            
0001E51E                            ; ---------------------------------------------------------------------------
0001E51E                            ; Subroutine to	kill Sonic
0001E51E                            ; ---------------------------------------------------------------------------
0001E51E                            
0001E51E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E51E                            
0001E51E                            
0001E51E                            KillSonic:
0001E51E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E522 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E526 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E52C 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E532 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E538 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E53E 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E544 4EB9 0001 63D6             		jsr		Sonic_ResetOnFloor
0001E54A 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E550 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E556 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E55C 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E562 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E568 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E56C 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E56E 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E572 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E574 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E57A 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E580 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E584 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E588 6600                       		bne.s	@sound
0001E58A 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E58E                            
0001E58E                            	@sound:
0001E58E 4EB9 0000 1254             		jsr	(PlaySound_Special).l
0001E594                            
0001E594                            	@dontdie:
0001E594 70FF                       		moveq	#-1,d0
0001E596 4E75                       		rts	
0001E598                            ; End of function KillSonic
0001E598                            Kill_Lava:	
0001E598 08E8 0007 0002             	bset	#7,obGfx(a0)
0001E59E 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E5A4 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E5A8 4EB9 0000 1254                 jsr		(PlaySound_Special).l
0001E5AE                            
0001E5AE                            
0001E5AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E5AE                            
0001E5AE                            
0001E5AE                            React_Special:
0001E5AE 1229 0020                  		move.b	obColType(a1),d1
0001E5B2 0201 003F                  		andi.b	#$3F,d1
0001E5B6 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E5BA 6700                       		beq.s	@caterkiller	; if yes, branch
0001E5BC 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E5C0 6700                       		beq.s	@yadrin		; if yes, branch
0001E5C2 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E5C6 6700                       		beq.s	@D7orE1		; if yes, branch
0001E5C8 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E5CC 6700                       		beq.s	@D7orE1		; if yes, branch
0001E5CE 4E75                       		rts	
0001E5D0                            ; ===========================================================================
0001E5D0                            
0001E5D0                            @caterkiller:
0001E5D0 6000 FD48                  		bra.w	React_Caterkiller
0001E5D4                            ; ===========================================================================
0001E5D4                            
0001E5D4                            @yadrin:
0001E5D4 9A40                       		sub.w	d0,d5
0001E5D6 0C45 0008                  		cmpi.w	#8,d5
0001E5DA 6400                       		bcc.s	@normalenemy
0001E5DC 3029 0008                  		move.w	obX(a1),d0
0001E5E0 5940                       		subq.w	#4,d0
0001E5E2 0829 0000 0022             		btst	#0,obStatus(a1)
0001E5E8 6700                       		beq.s	@noflip
0001E5EA 0440 0010                  		subi.w	#$10,d0
0001E5EE                            
0001E5EE                            	@noflip:
0001E5EE 9042                       		sub.w	d2,d0
0001E5F0 6400                       		bcc.s	@loc_1B13C
0001E5F2 0640 0018                  		addi.w	#$18,d0
0001E5F6 6500                       		bcs.s	@loc_1B140
0001E5F8 6000                       		bra.s	@normalenemy
0001E5FA                            ; ===========================================================================
0001E5FA                            
0001E5FA                            	@loc_1B13C:
0001E5FA B044                       		cmp.w	d4,d0
0001E5FC 6200                       		bhi.s	@normalenemy
0001E5FE                            
0001E5FE                            	@loc_1B140:
0001E5FE 6000 FD20                  		bra.w	React_ChkHurt
0001E602                            ; ===========================================================================
0001E602                            
0001E602                            	@normalenemy:
0001E602 6000 FC64                  		bra.w	React_Enemy
0001E606                            ; ===========================================================================
0001E606                            
0001E606                            @D7orE1:
0001E606 5229 0021                  		addq.b	#1,obColProp(a1)
0001E60A 4E75                       		rts	
0001E60C                            ; End of function React_Special
0001E60C                            
0001E60C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E60C                            
0001E60C                            React_ChkWaterTag:
0001E60C 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E612 6600 0000                  		bne	NotWaterTag
0001E616 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E61C                            	NotWaterTag:
0001E61C 4E75                       		rts
0001E61E                            
0001E61E                            React_WaterTag:
0001E61E 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E624 6700 0000                  		beq	SkipWaterTag
0001E628 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E62E                            	SkipWaterTag:
0001E62E 4E75                       		rts
0001E62E 4E75                       		rts
0001E630                            
0001E630                            ; ---------------------------------------------------------------------------
0001E630                            ; Subroutine to	show the special stage layout
0001E630                            ; ---------------------------------------------------------------------------
0001E630                            
0001E630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E630                            
0001E630                            
0001E630                            SS_ShowLayout:
0001E630 6100 0000                  		bsr.w	SS_AniWallsRings
0001E634 6100 0000                  		bsr.w	SS_AniItems
0001E638 3F05                       		move.w	d5,-(sp)
0001E63A 43F8 8000                  		lea	($FFFF8000).w,a1
0001E63E 1038 F780                  		move.b	(v_ssangle).w,d0
0001E642 0200 00FC                  		andi.b	#$FC,d0
0001E646 4EB9 0000 3A36             		jsr	(CalcSine).l
0001E64C 3800                       		move.w	d0,d4
0001E64E 3A01                       		move.w	d1,d5
0001E650 C9FC 0018                  		muls.w	#$18,d4
0001E654 CBFC 0018                  		muls.w	#$18,d5
0001E658 7400                       		moveq	#0,d2
0001E65A 3438 F700                  		move.w	(v_screenposx).w,d2
0001E65E 84FC 0018                  		divu.w	#$18,d2
0001E662 4842                       		swap	d2
0001E664 4442                       		neg.w	d2
0001E666 0642 FF4C                  		addi.w	#-$B4,d2
0001E66A 7600                       		moveq	#0,d3
0001E66C 3638 F704                  		move.w	(v_screenposy).w,d3
0001E670 86FC 0018                  		divu.w	#$18,d3
0001E674 4843                       		swap	d3
0001E676 4443                       		neg.w	d3
0001E678 0643 FF4C                  		addi.w	#-$B4,d3
0001E67C 3E3C 000F                  		move.w	#$F,d7
0001E680                            
0001E680                            loc_1B19E:
0001E680 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E684 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E688 4440                       		neg.w	d0
0001E68A C3C2                       		muls.w	d2,d1
0001E68C C1C3                       		muls.w	d3,d0
0001E68E 2C00                       		move.l	d0,d6
0001E690 DC81                       		add.l	d1,d6
0001E692 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E696 C1C2                       		muls.w	d2,d0
0001E698 C3C3                       		muls.w	d3,d1
0001E69A D280                       		add.l	d0,d1
0001E69C 2406                       		move.l	d6,d2
0001E69E 3C3C 000F                  		move.w	#$F,d6
0001E6A2                            
0001E6A2                            loc_1B1C0:
0001E6A2 2002                       		move.l	d2,d0
0001E6A4 E080                       		asr.l	#8,d0
0001E6A6 32C0                       		move.w	d0,(a1)+
0001E6A8 2001                       		move.l	d1,d0
0001E6AA E080                       		asr.l	#8,d0
0001E6AC 32C0                       		move.w	d0,(a1)+
0001E6AE D485                       		add.l	d5,d2
0001E6B0 D284                       		add.l	d4,d1
0001E6B2 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E6B6                            
0001E6B6 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E6BA 0643 0018                  		addi.w	#$18,d3
0001E6BE 51CF FFC0                  		dbf	d7,loc_1B19E
0001E6C2                            
0001E6C2 3A1F                       		move.w	(sp)+,d5
0001E6C4 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E6CA 7000                       		moveq	#0,d0
0001E6CC 3038 F704                  		move.w	(v_screenposy).w,d0
0001E6D0 80FC 0018                  		divu.w	#$18,d0
0001E6D4 C0FC 0080                  		mulu.w	#$80,d0
0001E6D8 D1C0                       		adda.l	d0,a0
0001E6DA 7000                       		moveq	#0,d0
0001E6DC 3038 F700                  		move.w	(v_screenposx).w,d0
0001E6E0 80FC 0018                  		divu.w	#$18,d0
0001E6E4 D0C0                       		adda.w	d0,a0
0001E6E6 49F8 8000                  		lea	($FFFF8000).w,a4
0001E6EA 3E3C 000F                  		move.w	#$F,d7
0001E6EE                            
0001E6EE                            loc_1B20C:
0001E6EE 3C3C 000F                  		move.w	#$F,d6
0001E6F2                            
0001E6F2                            loc_1B210:
0001E6F2 7000                       		moveq	#0,d0
0001E6F4 1018                       		move.b	(a0)+,d0
0001E6F6 6700                       		beq.s	loc_1B268
0001E6F8 0C00 004E                  		cmpi.b	#$4E,d0
0001E6FC 6200                       		bhi.s	loc_1B268
0001E6FE 3614                       		move.w	(a4),d3
0001E700 0643 0120                  		addi.w	#$120,d3
0001E704 0C43 0070                  		cmpi.w	#$70,d3
0001E708 6500                       		blo.s	loc_1B268
0001E70A 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E70E 6400                       		bhs.s	loc_1B268
0001E710 342C 0002                  		move.w	2(a4),d2
0001E714 0642 00F0                  		addi.w	#$F0,d2
0001E718 0C42 0070                  		cmpi.w	#$70,d2
0001E71C 6500                       		blo.s	loc_1B268
0001E71E 0C42 0170                  		cmpi.w	#$170,d2
0001E722 6400                       		bhs.s	loc_1B268
0001E724 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E72A E748                       		lsl.w	#3,d0
0001E72C 4BF5 0000                  		lea	(a5,d0.w),a5
0001E730 225D                       		movea.l	(a5)+,a1
0001E732 321D                       		move.w	(a5)+,d1
0001E734 D241                       		add.w	d1,d1
0001E736 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E73A 365D                       		movea.w	(a5)+,a3
0001E73C 7200                       		moveq	#0,d1
0001E73E 1219                       		move.b	(a1)+,d1
0001E740 5301                       		subq.b	#1,d1
0001E742 6B00                       		bmi.s	loc_1B268
0001E744 4EB9 0000 FAEE             		jsr	(BuildSpr_Normal).l
0001E74A                            
0001E74A                            loc_1B268:
0001E74A 584C                       		addq.w	#4,a4
0001E74C 51CE FFA4                  		dbf	d6,loc_1B210
0001E750                            
0001E750 41E8 0070                  		lea	$70(a0),a0
0001E754 51CF FF98                  		dbf	d7,loc_1B20C
0001E758                            
0001E758 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E75C 0C05 0050                  		cmpi.b	#$50,d5
0001E760 6700                       		beq.s	loc_1B288
0001E762 24BC 0000 0000             		move.l	#0,(a2)
0001E768 4E75                       		rts	
0001E76A                            ; ===========================================================================
0001E76A                            
0001E76A                            loc_1B288:
0001E76A 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E770 4E75                       		rts	
0001E772                            ; End of function SS_ShowLayout
0001E772                            
0001E772                            ; ---------------------------------------------------------------------------
0001E772                            ; Subroutine to	animate	walls and rings	in the special stage
0001E772                            ; ---------------------------------------------------------------------------
0001E772                            
0001E772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E772                            
0001E772                            
0001E772                            SS_AniWallsRings:
0001E772 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E778 7000                       		moveq	#0,d0
0001E77A 1038 F780                  		move.b	(v_ssangle).w,d0
0001E77E E408                       		lsr.b	#2,d0
0001E780 0240 000F                  		andi.w	#$F,d0
0001E784 7223                       		moveq	#$23,d1
0001E786                            
0001E786                            loc_1B2A4:
0001E786 3280                       		move.w	d0,(a1)
0001E788 5049                       		addq.w	#8,a1
0001E78A 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E78E                            
0001E78E 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E794 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E798 6A00                       		bpl.s	loc_1B2C8
0001E79A 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E7A0 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E7A4 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E7AA                            
0001E7AA                            loc_1B2C8:
0001E7AA 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E7B0 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E7B4 6A00                       		bpl.s	loc_1B2E4
0001E7B6 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E7BC 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E7C0 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E7C6                            
0001E7C6                            loc_1B2E4:
0001E7C6 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E7CA 1340 0138                  		move.b	d0,$138(a1)
0001E7CE 1340 0160                  		move.b	d0,$160(a1)
0001E7D2 1340 0148                  		move.b	d0,$148(a1)
0001E7D6 1340 0150                  		move.b	d0,$150(a1)
0001E7DA 1340 01D8                  		move.b	d0,$1D8(a1)
0001E7DE 1340 01E0                  		move.b	d0,$1E0(a1)
0001E7E2 1340 01E8                  		move.b	d0,$1E8(a1)
0001E7E6 1340 01F0                  		move.b	d0,$1F0(a1)
0001E7EA 1340 01F8                  		move.b	d0,$1F8(a1)
0001E7EE 1340 0200                  		move.b	d0,$200(a1)
0001E7F2 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E7F6 6A00                       		bpl.s	loc_1B326
0001E7F8 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E7FE 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E802 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E808                            
0001E808                            loc_1B326:
0001E808 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E80C 1340 0168                  		move.b	d0,$168(a1)
0001E810 1340 0170                  		move.b	d0,$170(a1)
0001E814 1340 0178                  		move.b	d0,$178(a1)
0001E818 1340 0180                  		move.b	d0,$180(a1)
0001E81C 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E820 6A00                       		bpl.s	loc_1B350
0001E822 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E828 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E82C 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E832                            
0001E832                            loc_1B350:
0001E832 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E838 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E83E 7000                       		moveq	#0,d0
0001E840 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E844 D040                       		add.w	d0,d0
0001E846 41F0 0000                  		lea	(a0,d0.w),a0
0001E84A 3290                       		move.w	(a0),(a1)
0001E84C 3368 0002 0008             		move.w	2(a0),8(a1)
0001E852 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E858 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E85E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E864 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E86A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E870 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E876 D0FC 0020                  		adda.w	#$20,a0
0001E87A D2FC 0048                  		adda.w	#$48,a1
0001E87E 3290                       		move.w	(a0),(a1)
0001E880 3368 0002 0008             		move.w	2(a0),8(a1)
0001E886 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E88C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E892 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E898 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E89E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E8A4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E8AA D0FC 0020                  		adda.w	#$20,a0
0001E8AE D2FC 0048                  		adda.w	#$48,a1
0001E8B2 3290                       		move.w	(a0),(a1)
0001E8B4 3368 0002 0008             		move.w	2(a0),8(a1)
0001E8BA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E8C0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E8C6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E8CC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E8D2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E8D8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E8DE D0FC 0020                  		adda.w	#$20,a0
0001E8E2 D2FC 0048                  		adda.w	#$48,a1
0001E8E6 3290                       		move.w	(a0),(a1)
0001E8E8 3368 0002 0008             		move.w	2(a0),8(a1)
0001E8EE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E8F4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E8FA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E900 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E906 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E90C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E912 D0FC 0020                  		adda.w	#$20,a0
0001E916 D2FC 0048                  		adda.w	#$48,a1
0001E91A 4E75                       		rts	
0001E91C                            ; End of function SS_AniWallsRings
0001E91C                            
0001E91C                            ; ===========================================================================
0001E91C 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E92C 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E93C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E94C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E95C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E96C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E97C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E98C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E99C                            ; ---------------------------------------------------------------------------
0001E99C                            ; Subroutine to	remove items when you collect them in the special stage
0001E99C                            ; ---------------------------------------------------------------------------
0001E99C                            
0001E99C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E99C                            
0001E99C                            
0001E99C                            SS_RemoveCollectedItem:
0001E99C 45F9 00FF 4400             		lea	($FF4400).l,a2
0001E9A2 303C 001F                  		move.w	#$1F,d0
0001E9A6                            
0001E9A6                            loc_1B4C4:
0001E9A6 4A12                       		tst.b	(a2)
0001E9A8 6700                       		beq.s	locret_1B4CE
0001E9AA 504A                       		addq.w	#8,a2
0001E9AC 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001E9B0                            
0001E9B0                            locret_1B4CE:
0001E9B0 4E75                       		rts	
0001E9B2                            ; End of function SS_RemoveCollectedItem
0001E9B2                            
0001E9B2                            ; ---------------------------------------------------------------------------
0001E9B2                            ; Subroutine to	animate	special	stage items when you touch them
0001E9B2                            ; ---------------------------------------------------------------------------
0001E9B2                            
0001E9B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9B2                            
0001E9B2                            
0001E9B2                            SS_AniItems:
0001E9B2 41F9 00FF 4400             		lea	($FF4400).l,a0
0001E9B8 3E3C 001F                  		move.w	#$1F,d7
0001E9BC                            
0001E9BC                            loc_1B4DA:
0001E9BC 7000                       		moveq	#0,d0
0001E9BE 1010                       		move.b	(a0),d0
0001E9C0 6700                       		beq.s	loc_1B4E8
0001E9C2 E548                       		lsl.w	#2,d0
0001E9C4 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001E9C8 4E91                       		jsr	(a1)
0001E9CA                            
0001E9CA                            loc_1B4E8:
0001E9CA 5048                       		addq.w	#8,a0
0001E9CC                            
0001E9CC                            loc_1B4EA:
0001E9CC 51CF FFEE                  		dbf	d7,loc_1B4DA
0001E9D0                            
0001E9D0 4E75                       		rts	
0001E9D2                            ; End of function SS_AniItems
0001E9D2                            
0001E9D2                            ; ===========================================================================
0001E9D2 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001E9D6 0000 0000                  		dc.l SS_AniBumper
0001E9DA 0000 0000                  		dc.l SS_Ani1Up
0001E9DE 0000 0000                  		dc.l SS_AniReverse
0001E9E2 0000 0000                  		dc.l SS_AniEmeraldSparks
0001E9E6 0000 0000                  		dc.l SS_AniGlassBlock
0001E9EA                            ; ===========================================================================
0001E9EA                            
0001E9EA                            SS_AniRingSparks:
0001E9EA 5328 0002                  		subq.b	#1,2(a0)
0001E9EE 6A00                       		bpl.s	locret_1B530
0001E9F0 117C 0005 0002             		move.b	#5,2(a0)
0001E9F6 7000                       		moveq	#0,d0
0001E9F8 1028 0003                  		move.b	3(a0),d0
0001E9FC 5228 0003                  		addq.b	#1,3(a0)
0001EA00 2268 0004                  		movea.l	4(a0),a1
0001EA04 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001EA08 1280                       		move.b	d0,(a1)
0001EA0A 6600                       		bne.s	locret_1B530
0001EA0C 4290                       		clr.l	(a0)
0001EA0E 42A8 0004                  		clr.l	4(a0)
0001EA12                            
0001EA12                            locret_1B530:
0001EA12 4E75                       		rts	
0001EA14                            ; ===========================================================================
0001EA14 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001EA1A                            ; ===========================================================================
0001EA1A                            
0001EA1A                            SS_AniBumper:
0001EA1A 5328 0002                  		subq.b	#1,2(a0)
0001EA1E 6A00                       		bpl.s	locret_1B566
0001EA20 117C 0007 0002             		move.b	#7,2(a0)
0001EA26 7000                       		moveq	#0,d0
0001EA28 1028 0003                  		move.b	3(a0),d0
0001EA2C 5228 0003                  		addq.b	#1,3(a0)
0001EA30 2268 0004                  		movea.l	4(a0),a1
0001EA34 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001EA38 6600                       		bne.s	loc_1B564
0001EA3A 4290                       		clr.l	(a0)
0001EA3C 42A8 0004                  		clr.l	4(a0)
0001EA40 12BC 0025                  		move.b	#$25,(a1)
0001EA44 4E75                       		rts	
0001EA46                            ; ===========================================================================
0001EA46                            
0001EA46                            loc_1B564:
0001EA46 1280                       		move.b	d0,(a1)
0001EA48                            
0001EA48                            locret_1B566:
0001EA48 4E75                       		rts	
0001EA4A                            ; ===========================================================================
0001EA4A 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001EA50                            ; ===========================================================================
0001EA50                            
0001EA50                            SS_Ani1Up:
0001EA50 5328 0002                  		subq.b	#1,2(a0)
0001EA54 6A00                       		bpl.s	locret_1B596
0001EA56 117C 0005 0002             		move.b	#5,2(a0)
0001EA5C 7000                       		moveq	#0,d0
0001EA5E 1028 0003                  		move.b	3(a0),d0
0001EA62 5228 0003                  		addq.b	#1,3(a0)
0001EA66 2268 0004                  		movea.l	4(a0),a1
0001EA6A 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001EA6E 1280                       		move.b	d0,(a1)
0001EA70 6600                       		bne.s	locret_1B596
0001EA72 4290                       		clr.l	(a0)
0001EA74 42A8 0004                  		clr.l	4(a0)
0001EA78                            
0001EA78                            locret_1B596:
0001EA78 4E75                       		rts	
0001EA7A                            ; ===========================================================================
0001EA7A 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001EA80                            ; ===========================================================================
0001EA80                            
0001EA80                            SS_AniReverse:
0001EA80 5328 0002                  		subq.b	#1,2(a0)
0001EA84 6A00                       		bpl.s	locret_1B5CC
0001EA86 117C 0007 0002             		move.b	#7,2(a0)
0001EA8C 7000                       		moveq	#0,d0
0001EA8E 1028 0003                  		move.b	3(a0),d0
0001EA92 5228 0003                  		addq.b	#1,3(a0)
0001EA96 2268 0004                  		movea.l	4(a0),a1
0001EA9A 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001EA9E 6600                       		bne.s	loc_1B5CA
0001EAA0 4290                       		clr.l	(a0)
0001EAA2 42A8 0004                  		clr.l	4(a0)
0001EAA6 12BC 002B                  		move.b	#$2B,(a1)
0001EAAA 4E75                       		rts	
0001EAAC                            ; ===========================================================================
0001EAAC                            
0001EAAC                            loc_1B5CA:
0001EAAC 1280                       		move.b	d0,(a1)
0001EAAE                            
0001EAAE                            locret_1B5CC:
0001EAAE 4E75                       		rts	
0001EAB0                            ; ===========================================================================
0001EAB0 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001EAB6                            ; ===========================================================================
0001EAB6                            
0001EAB6                            SS_AniEmeraldSparks:
0001EAB6 5328 0002                  		subq.b	#1,2(a0)
0001EABA 6A00                       		bpl.s	locret_1B60C
0001EABC 117C 0005 0002             		move.b	#5,2(a0)
0001EAC2 7000                       		moveq	#0,d0
0001EAC4 1028 0003                  		move.b	3(a0),d0
0001EAC8 5228 0003                  		addq.b	#1,3(a0)
0001EACC 2268 0004                  		movea.l	4(a0),a1
0001EAD0 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001EAD4 1280                       		move.b	d0,(a1)
0001EAD6 6600                       		bne.s	locret_1B60C
0001EAD8 4290                       		clr.l	(a0)
0001EADA 42A8 0004                  		clr.l	4(a0)
0001EADE 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001EAEE                            
0001EAEE                            locret_1B60C:
0001EAEE 4E75                       		rts	
0001EAF0                            ; ===========================================================================
0001EAF0 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001EAF6                            ; ===========================================================================
0001EAF6                            
0001EAF6                            SS_AniGlassBlock:
0001EAF6 5328 0002                  		subq.b	#1,2(a0)
0001EAFA 6A00                       		bpl.s	locret_1B640
0001EAFC 117C 0001 0002             		move.b	#1,2(a0)
0001EB02 7000                       		moveq	#0,d0
0001EB04 1028 0003                  		move.b	3(a0),d0
0001EB08 5228 0003                  		addq.b	#1,3(a0)
0001EB0C 2268 0004                  		movea.l	4(a0),a1
0001EB10 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001EB14 1280                       		move.b	d0,(a1)
0001EB16 6600                       		bne.s	locret_1B640
0001EB18 12A8 0004                  		move.b	4(a0),(a1)
0001EB1C 4290                       		clr.l	(a0)
0001EB1E 42A8 0004                  		clr.l	4(a0)
0001EB22                            
0001EB22                            locret_1B640:
0001EB22 4E75                       		rts	
0001EB24                            ; ===========================================================================
0001EB24 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001EB2E                            
0001EB2E                            ; ---------------------------------------------------------------------------
0001EB2E                            ; Special stage	layout pointers
0001EB2E                            ; ---------------------------------------------------------------------------
0001EB2E                            SS_LayoutIndex:
0001EB2E 0000 0000                  		dc.l SS_1
0001EB32 0000 0000                  		dc.l SS_2
0001EB36 0000 0000                  		dc.l SS_3
0001EB3A 0000 0000                  		dc.l SS_4
0001EB3E 0000 0000                  		dc.l SS_5
0001EB42 0000 0000                  		dc.l SS_6
0001EB46                            		even
0001EB46                            
0001EB46                            ; ---------------------------------------------------------------------------
0001EB46                            ; Special stage start locations
0001EB46                            ; ---------------------------------------------------------------------------
0001EB46                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001EB46                            ; ---------------------------------------------------------------------------
0001EB46                            ; Special stage start locations
0001EB46                            ; ---------------------------------------------------------------------------
0001EB46                            
0001EB46                            		incbin	"startpos\ss1.bin"
0001EB4A                            		incbin	"startpos\ss2.bin"
0001EB4E                            		incbin	"startpos\ss3.bin"
0001EB52                            		incbin	"startpos\ss4.bin"
0001EB56                            		incbin	"startpos\ss5.bin"
0001EB5A                            		incbin	"startpos\ss6.bin"
0001EB5E                            		even
0001EB5E                            		even
0001EB5E                            
0001EB5E                            ; ---------------------------------------------------------------------------
0001EB5E                            ; Subroutine to	load special stage layout
0001EB5E                            ; ---------------------------------------------------------------------------
0001EB5E                            
0001EB5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB5E                            
0001EB5E                            
0001EB5E                            SS_Load:
0001EB5E 7000                       		moveq	#0,d0
0001EB60 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001EB64 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001EB68 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001EB6E 6500                       		blo.s	SS_ChkEmldNum
0001EB70 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001EB76                            
0001EB76                            SS_ChkEmldNum:
0001EB76 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001EB7C 6700                       		beq.s	SS_LoadData	; if yes, branch
0001EB7E 7200                       		moveq	#0,d1
0001EB80 1238 FE57                  		move.b	(v_emeralds).w,d1
0001EB84 5301                       		subq.b	#1,d1
0001EB86 6500                       		blo.s	SS_LoadData
0001EB88 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001EB8C                            
0001EB8C                            SS_ChkEmldLoop:	
0001EB8C B033 1000                  		cmp.b	(a3,d1.w),d0
0001EB90 6600                       		bne.s	SS_ChkEmldRepeat
0001EB92 60CA                       		bra.s	SS_Load
0001EB94                            ; ===========================================================================
0001EB94                            
0001EB94                            SS_ChkEmldRepeat:
0001EB94 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001EB98                            
0001EB98                            SS_LoadData:
0001EB98 E548                       		lsl.w	#2,d0
0001EB9A 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001EB9E 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001EBA2 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001EBA6 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001EBAA 43F9 00FF 4000             		lea	($FF4000).l,a1
0001EBB0 303C 0000                  		move.w	#0,d0
0001EBB4 4EB9 0000 188C             		jsr	(EniDec).l
0001EBBA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EBC0 303C 0FFF                  		move.w	#$FFF,d0
0001EBC4                            
0001EBC4                            SS_ClrRAM3:
0001EBC4 4299                       		clr.l	(a1)+
0001EBC6 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001EBCA                            
0001EBCA 43F9 00FF 1020             		lea	($FF1020).l,a1
0001EBD0 41F9 00FF 4000             		lea	($FF4000).l,a0
0001EBD6 723F                       		moveq	#$3F,d1
0001EBD8                            
0001EBD8                            loc_1B6F6:
0001EBD8 743F                       		moveq	#$3F,d2
0001EBDA                            
0001EBDA                            loc_1B6F8:
0001EBDA 12D8                       		move.b	(a0)+,(a1)+
0001EBDC 51CA FFFC                  		dbf	d2,loc_1B6F8
0001EBE0                            
0001EBE0 43E9 0040                  		lea	$40(a1),a1
0001EBE4 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001EBE8                            
0001EBE8 43F9 00FF 4008             		lea	($FF4008).l,a1
0001EBEE 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001EBF4 724D                       		moveq	#$4D,d1
0001EBF6                            
0001EBF6                            loc_1B714:
0001EBF6 22D8                       		move.l	(a0)+,(a1)+
0001EBF8 32FC 0000                  		move.w	#0,(a1)+
0001EBFC 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001EC02 32D8                       		move.w	(a0)+,(a1)+
0001EC04 51C9 FFF0                  		dbf	d1,loc_1B714
0001EC08                            
0001EC08 43F9 00FF 4400             		lea	($FF4400).l,a1
0001EC0E 323C 003F                  		move.w	#$3F,d1
0001EC12                            
0001EC12                            loc_1B730:
0001EC12                            
0001EC12 4299                       		clr.l	(a1)+
0001EC14 51C9 FFFC                  		dbf	d1,loc_1B730
0001EC18                            
0001EC18 4E75                       		rts	
0001EC1A                            ; End of function SS_Load
0001EC1A                            
0001EC1A                            ; ===========================================================================
0001EC1A                            
0001EC1A                            SS_MapIndex:
0001EC1A                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001EC1A                            ; ---------------------------------------------------------------------------
0001EC1A                            ; Special stage	mappings and VRAM pointers
0001EC1A                            ; ---------------------------------------------------------------------------
0001EC1A 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001EC1E 0142                       	dc.w $142		; VRAM setting
0001EC20 0000 0000                  	dc.l Map_SSWalls
0001EC24 0142                       	dc.w $142
0001EC26 0000 0000                  	dc.l Map_SSWalls
0001EC2A 0142                       	dc.w $142
0001EC2C 0000 0000                  	dc.l Map_SSWalls
0001EC30 0142                       	dc.w $142
0001EC32 0000 0000                  	dc.l Map_SSWalls
0001EC36 0142                       	dc.w $142
0001EC38 0000 0000                  	dc.l Map_SSWalls
0001EC3C 0142                       	dc.w $142
0001EC3E 0000 0000                  	dc.l Map_SSWalls
0001EC42 0142                       	dc.w $142
0001EC44 0000 0000                  	dc.l Map_SSWalls
0001EC48 0142                       	dc.w $142
0001EC4A 0000 0000                  	dc.l Map_SSWalls
0001EC4E 0142                       	dc.w $142
0001EC50 0000 0000                  	dc.l Map_SSWalls
0001EC54 2142                       	dc.w $2142
0001EC56 0000 0000                  	dc.l Map_SSWalls
0001EC5A 2142                       	dc.w $2142
0001EC5C 0000 0000                  	dc.l Map_SSWalls
0001EC60 2142                       	dc.w $2142
0001EC62 0000 0000                  	dc.l Map_SSWalls
0001EC66 2142                       	dc.w $2142
0001EC68 0000 0000                  	dc.l Map_SSWalls
0001EC6C 2142                       	dc.w $2142
0001EC6E 0000 0000                  	dc.l Map_SSWalls
0001EC72 2142                       	dc.w $2142
0001EC74 0000 0000                  	dc.l Map_SSWalls
0001EC78 2142                       	dc.w $2142
0001EC7A 0000 0000                  	dc.l Map_SSWalls
0001EC7E 2142                       	dc.w $2142
0001EC80 0000 0000                  	dc.l Map_SSWalls
0001EC84 2142                       	dc.w $2142
0001EC86 0000 0000                  	dc.l Map_SSWalls
0001EC8A 4142                       	dc.w $4142
0001EC8C 0000 0000                  	dc.l Map_SSWalls
0001EC90 4142                       	dc.w $4142
0001EC92 0000 0000                  	dc.l Map_SSWalls
0001EC96 4142                       	dc.w $4142
0001EC98 0000 0000                  	dc.l Map_SSWalls
0001EC9C 4142                       	dc.w $4142
0001EC9E 0000 0000                  	dc.l Map_SSWalls
0001ECA2 4142                       	dc.w $4142
0001ECA4 0000 0000                  	dc.l Map_SSWalls
0001ECA8 4142                       	dc.w $4142
0001ECAA 0000 0000                  	dc.l Map_SSWalls
0001ECAE 4142                       	dc.w $4142
0001ECB0 0000 0000                  	dc.l Map_SSWalls
0001ECB4 4142                       	dc.w $4142
0001ECB6 0000 0000                  	dc.l Map_SSWalls
0001ECBA 4142                       	dc.w $4142
0001ECBC 0000 0000                  	dc.l Map_SSWalls
0001ECC0 6142                       	dc.w $6142
0001ECC2 0000 0000                  	dc.l Map_SSWalls
0001ECC6 6142                       	dc.w $6142
0001ECC8 0000 0000                  	dc.l Map_SSWalls
0001ECCC 6142                       	dc.w $6142
0001ECCE 0000 0000                  	dc.l Map_SSWalls
0001ECD2 6142                       	dc.w $6142
0001ECD4 0000 0000                  	dc.l Map_SSWalls
0001ECD8 6142                       	dc.w $6142
0001ECDA 0000 0000                  	dc.l Map_SSWalls
0001ECDE 6142                       	dc.w $6142
0001ECE0 0000 0000                  	dc.l Map_SSWalls
0001ECE4 6142                       	dc.w $6142
0001ECE6 0000 0000                  	dc.l Map_SSWalls
0001ECEA 6142                       	dc.w $6142
0001ECEC 0000 0000                  	dc.l Map_SSWalls
0001ECF0 6142                       	dc.w $6142
0001ECF2 0001 0EAE                  	dc.l Map_Bump
0001ECF6 023B                       	dc.w $23B
0001ECF8 0000 0000                  	dc.l Map_SS_R
0001ECFC 0570                       	dc.w $570
0001ECFE 0000 0000                  	dc.l Map_SS_R
0001ED02 0251                       	dc.w $251
0001ED04 0000 0000                  	dc.l Map_SS_R
0001ED08 0370                       	dc.w $370
0001ED0A 0000 0000                  	dc.l Map_SS_Up
0001ED0E 0263                       	dc.w $263
0001ED10 0000 0000                  	dc.l Map_SS_Down
0001ED14 0263                       	dc.w $263
0001ED16 0000 0000                  	dc.l Map_SS_R
0001ED1A 22F0                       	dc.w $22F0
0001ED1C 0000 0000                  	dc.l Map_SS_Glass
0001ED20 0470                       	dc.w $470
0001ED22 0000 0000                  	dc.l Map_SS_Glass
0001ED26 05F0                       	dc.w $5F0
0001ED28 0000 0000                  	dc.l Map_SS_Glass
0001ED2C 65F0                       	dc.w $65F0
0001ED2E 0000 0000                  	dc.l Map_SS_Glass
0001ED32 25F0                       	dc.w $25F0
0001ED34 0000 0000                  	dc.l Map_SS_Glass
0001ED38 45F0                       	dc.w $45F0
0001ED3A 0000 0000                  	dc.l Map_SS_R
0001ED3E 02F0                       	dc.w $2F0
0001ED40 0101 0EAE                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001ED44 023B                       	dc.w $23B
0001ED46 0201 0EAE                  	dc.l Map_Bump+$2000000
0001ED4A 023B                       	dc.w $23B
0001ED4C 0000 0000                  	dc.l Map_SS_R
0001ED50 0797                       	dc.w $797
0001ED52 0000 0000                  	dc.l Map_SS_R
0001ED56 07A0                       	dc.w $7A0
0001ED58 0000 0000                  	dc.l Map_SS_R
0001ED5C 07A9                       	dc.w $7A9
0001ED5E 0000 0000                  	dc.l Map_SS_R
0001ED62 0797                       	dc.w $797
0001ED64 0000 0000                  	dc.l Map_SS_R
0001ED68 07A0                       	dc.w $7A0
0001ED6A 0000 0000                  	dc.l Map_SS_R
0001ED6E 07A9                       	dc.w $7A9
0001ED70 0000 BFE6                  	dc.l Map_Ring
0001ED74 2798                       	dc.w $2798
0001ED76 0000 0000                  	dc.l Map_SS_Chaos3
0001ED7A 0770                       	dc.w $770
0001ED7C 0000 0000                  	dc.l Map_SS_Chaos3
0001ED80 2770                       	dc.w $2770
0001ED82 0000 0000                  	dc.l Map_SS_Chaos3
0001ED86 4770                       	dc.w $4770
0001ED88 0000 0000                  	dc.l Map_SS_Chaos3
0001ED8C 6770                       	dc.w $6770
0001ED8E 0000 0000                  	dc.l Map_SS_Chaos1
0001ED92 0770                       	dc.w $770
0001ED94 0000 0000                  	dc.l Map_SS_Chaos2
0001ED98 0770                       	dc.w $770
0001ED9A 0000 0000                  	dc.l Map_SS_R
0001ED9E 04F0                       	dc.w $4F0
0001EDA0 0400 BFE6                  	dc.l Map_Ring+$4000000
0001EDA4 2798                       	dc.w $2798
0001EDA6 0500 BFE6                  	dc.l Map_Ring+$5000000
0001EDAA 2798                       	dc.w $2798
0001EDAC 0600 BFE6                  	dc.l Map_Ring+$6000000
0001EDB0 2798                       	dc.w $2798
0001EDB2 0700 BFE6                  	dc.l Map_Ring+$7000000
0001EDB6 2798                       	dc.w $2798
0001EDB8 0000 0000                  	dc.l Map_SS_Glass
0001EDBC 23F0                       	dc.w $23F0
0001EDBE 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EDC2 23F0                       	dc.w $23F0
0001EDC4 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EDC8 23F0                       	dc.w $23F0
0001EDCA 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EDCE 23F0                       	dc.w $23F0
0001EDD0 0000 0000                  	dc.l Map_SS_R+$2000000
0001EDD4 04F0                       	dc.w $4F0
0001EDD6 0000 0000                  	dc.l Map_SS_Glass
0001EDDA 05F0                       	dc.w $5F0
0001EDDC 0000 0000                  	dc.l Map_SS_Glass
0001EDE0 65F0                       	dc.w $65F0
0001EDE2 0000 0000                  	dc.l Map_SS_Glass
0001EDE6 25F0                       	dc.w $25F0
0001EDE8 0000 0000                  	dc.l Map_SS_Glass
0001EDEC 45F0                       	dc.w $45F0
0001EDEC 45F0                       	dc.w $45F0
0001EDEE                            
0001EDEE                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EDEE                            ; ---------------------------------------------------------------------------
0001EDEE                            ; Sprite mappings - special stage "R" block
0001EDEE                            ; ---------------------------------------------------------------------------
0001EDEE                            Map_SS_R_internal:
0001EDEE 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EDF0 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EDF2 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EDF4 01                         byte_1B912:	dc.b 1
0001EDF5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EDFA 01                         byte_1B918:	dc.b 1
0001EDFB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EE00 00                         byte_1B91E:	dc.b 0
0001EE02 00                         		even
0001EE02 00                         		even
0001EE02                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EE02                            ; ---------------------------------------------------------------------------
0001EE02                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EE02                            ; ---------------------------------------------------------------------------
0001EE02                            Map_SS_Glass_internal:
0001EE02 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EE04 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EE06 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EE08 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EE0A 01                         byte_1B928:	dc.b 1
0001EE0B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EE10 01                         byte_1B92E:	dc.b 1
0001EE11 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EE16 01                         byte_1B934:	dc.b 1
0001EE17 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EE1C 01                         byte_1B93A:	dc.b 1
0001EE1D F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001EE22                            		even
0001EE22                            		even
0001EE22                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001EE22                            ; ---------------------------------------------------------------------------
0001EE22                            ; Sprite mappings - special stage "UP" block
0001EE22                            ; ---------------------------------------------------------------------------
0001EE22                            Map_SS_Up_internal:
0001EE22 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001EE24 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001EE26 01                         byte_1B944:	dc.b 1
0001EE27 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EE2C 01                         byte_1B94A:	dc.b 1
0001EE2D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EE32                            		even
0001EE32                            		even
0001EE32                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001EE32                            ; ---------------------------------------------------------------------------
0001EE32                            ; Sprite mappings - special stage "DOWN" block
0001EE32                            ; ---------------------------------------------------------------------------
0001EE32                            Map_SS_Down_internal:
0001EE32 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001EE34 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001EE36 01                         byte_1B954:	dc.b 1
0001EE37 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EE3C 01                         byte_1B95A:	dc.b 1
0001EE3D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EE42                            		even
0001EE42                            		even
0001EE42                            		include	"_maps\SS Chaos Emeralds.asm"
0001EE42                            ; ---------------------------------------------------------------------------
0001EE42                            ; Sprite mappings - special stage chaos	emeralds
0001EE42                            ; ---------------------------------------------------------------------------
0001EE42 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001EE44 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001EE46 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001EE48 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001EE4A 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001EE4C 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001EE4E 01                         byte_1B96C:	dc.b 1
0001EE4F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001EE54 01                         byte_1B972:	dc.b 1
0001EE55 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001EE5A 01                         byte_1B978:	dc.b 1
0001EE5B F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001EE60 01                         byte_1B97E:	dc.b 1
0001EE61 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001EE66                            		even
0001EE66                            		even
0001EE66                            
0001EE66                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001EE66                            ; ---------------------------------------------------------------------------
0001EE66                            ; Object 09 - Sonic (special stage)
0001EE66                            ; ---------------------------------------------------------------------------
0001EE66                            
0001EE66                            SonicSpecial:
0001EE66 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001EE6A 6700                       		beq.s	Obj09_Normal	; if not, branch
0001EE6C 6100 0000                  		bsr.w	SS_FixCamera
0001EE70 6000 0000                  		bra.w	DebugMode
0001EE74                            ; ===========================================================================
0001EE74                            
0001EE74                            Obj09_Normal:
0001EE74 7000                       		moveq	#0,d0
0001EE76 1028 0024                  		move.b	obRoutine(a0),d0
0001EE7A 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001EE7E 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001EE82                            ; ===========================================================================
0001EE82 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001EE84 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001EE86 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001EE88 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001EE8A                            ; ===========================================================================
0001EE8A                            
0001EE8A                            Obj09_Main:	; Routine 0
0001EE8A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EE8E 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001EE94 117C 0007 0017             		move.b	#7,obWidth(a0)
0001EE9A 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001EEA2 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001EEA8 117C 0004 0001             		move.b	#4,obRender(a0)
0001EEAE 317C 0000 0018             		move.w	#0,obPriority(a0)
0001EEB4 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001EEBA 08E8 0002 0022             		bset	#2,obStatus(a0)
0001EEC0 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EEC6                            
0001EEC6                            Obj09_ChkDebug:	; Routine 2
0001EEC6 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001EECA 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EECC 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001EED2 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EED4 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001EEDA                            
0001EEDA                            Obj09_NoDebug:
0001EEDA 117C 0000 0030             		move.b	#0,$30(a0)
0001EEE0 7000                       		moveq	#0,d0
0001EEE2 1028 0022                  		move.b	obStatus(a0),d0
0001EEE6 0240 0002                  		andi.w	#2,d0
0001EEEA 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001EEEE 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001EEF2 4EB9 0001 6988             		jsr	(Sonic_LoadGfx).l
0001EEF8 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001EEFE                            ; ===========================================================================
0001EEFE 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001EF00 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001EF02                            ; ===========================================================================
0001EF02                            
0001EF02                            Obj09_OnWall:
0001EF02 6100 0000                  		bsr.w	Obj09_Jump
0001EF06 6100 0000                  		bsr.w	Obj09_Move
0001EF0A 6100 0000                  		bsr.w	Obj09_Fall
0001EF0E 6000                       		bra.s	Obj09_Display
0001EF10                            ; ===========================================================================
0001EF10                            
0001EF10                            Obj09_InAir:
0001EF10 6100 0000                  		bsr.w	nullsub_2
0001EF14 6100 0000                  		bsr.w	Obj09_Move
0001EF18 6100 0000                  		bsr.w	Obj09_Fall
0001EF1C                            
0001EF1C                            Obj09_Display:
0001EF1C 6100 0000                  		bsr.w	Obj09_ChkItems
0001EF20 6100 0000                  		bsr.w	Obj09_ChkItems2
0001EF24 4EB9 0000 F976             		jsr	(SpeedToPos).l
0001EF2A 6100 0000                  		bsr.w	SS_FixCamera
0001EF2E 3038 F780                  		move.w	(v_ssangle).w,d0
0001EF32 D078 F782                  		add.w	(v_ssrotate).w,d0
0001EF36 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EF3A 4EB9 0001 65F0             		jsr	(Sonic_Animate).l
0001EF40 4E75                       		rts	
0001EF42                            
0001EF42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF42                            
0001EF42                            
0001EF42                            Obj09_Move:
0001EF42 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001EF48 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001EF4A 6100 0000                  		bsr.w	Obj09_MoveLeft
0001EF4E                            
0001EF4E                            Obj09_ChkRight:
0001EF4E 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001EF54 6700                       		beq.s	loc_1BA78	; if not, branch
0001EF56 6100 0000                  		bsr.w	Obj09_MoveRight
0001EF5A                            
0001EF5A                            loc_1BA78:
0001EF5A 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EF5E 0200 000C                  		andi.b	#btnL+btnR,d0
0001EF62 6600                       		bne.s	loc_1BAA8
0001EF64 3028 0020                  		move.w	obInertia(a0),d0
0001EF68 6700                       		beq.s	loc_1BAA8
0001EF6A 6B00                       		bmi.s	loc_1BA9A
0001EF6C 0440 000C                  		subi.w	#$C,d0
0001EF70 6400                       		bcc.s	loc_1BA94
0001EF72 303C 0000                  		move.w	#0,d0
0001EF76                            
0001EF76                            loc_1BA94:
0001EF76 3140 0020                  		move.w	d0,obInertia(a0)
0001EF7A 6000                       		bra.s	loc_1BAA8
0001EF7C                            ; ===========================================================================
0001EF7C                            
0001EF7C                            loc_1BA9A:
0001EF7C 0640 000C                  		addi.w	#$C,d0
0001EF80 6400                       		bcc.s	loc_1BAA4
0001EF82 303C 0000                  		move.w	#0,d0
0001EF86                            
0001EF86                            loc_1BAA4:
0001EF86 3140 0020                  		move.w	d0,obInertia(a0)
0001EF8A                            
0001EF8A                            loc_1BAA8:
0001EF8A 1038 F780                  		move.b	(v_ssangle).w,d0
0001EF8E 0600 0020                  		addi.b	#$20,d0
0001EF92 0200 00C0                  		andi.b	#$C0,d0
0001EF96 4400                       		neg.b	d0
0001EF98 4EB9 0000 3A36             		jsr	(CalcSine).l
0001EF9E C3E8 0020                  		muls.w	obInertia(a0),d1
0001EFA2 D3A8 0008                  		add.l	d1,obX(a0)
0001EFA6 C1E8 0020                  		muls.w	obInertia(a0),d0
0001EFAA D1A8 000C                  		add.l	d0,obY(a0)
0001EFAE 48E7 C000                  		movem.l	d0-d1,-(sp)
0001EFB2 2428 000C                  		move.l	obY(a0),d2
0001EFB6 2628 0008                  		move.l	obX(a0),d3
0001EFBA 6100 0000                  		bsr.w	sub_1BCE8
0001EFBE 6700                       		beq.s	loc_1BAF2
0001EFC0 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EFC4 93A8 0008                  		sub.l	d1,obX(a0)
0001EFC8 91A8 000C                  		sub.l	d0,obY(a0)
0001EFCC 317C 0000 0020             		move.w	#0,obInertia(a0)
0001EFD2 4E75                       		rts	
0001EFD4                            ; ===========================================================================
0001EFD4                            
0001EFD4                            loc_1BAF2:
0001EFD4 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EFD8 4E75                       		rts	
0001EFDA                            ; End of function Obj09_Move
0001EFDA                            
0001EFDA                            
0001EFDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFDA                            
0001EFDA                            
0001EFDA                            Obj09_MoveLeft:
0001EFDA 08E8 0000 0022             		bset	#0,obStatus(a0)
0001EFE0 3028 0020                  		move.w	obInertia(a0),d0
0001EFE4 6700                       		beq.s	loc_1BB06
0001EFE6 6A00                       		bpl.s	loc_1BB1A
0001EFE8                            
0001EFE8                            loc_1BB06:
0001EFE8 0440 000C                  		subi.w	#$C,d0
0001EFEC 0C40 F800                  		cmpi.w	#-$800,d0
0001EFF0 6E00                       		bgt.s	loc_1BB14
0001EFF2 303C F800                  		move.w	#-$800,d0
0001EFF6                            
0001EFF6                            loc_1BB14:
0001EFF6 3140 0020                  		move.w	d0,obInertia(a0)
0001EFFA 4E75                       		rts	
0001EFFC                            ; ===========================================================================
0001EFFC                            
0001EFFC                            loc_1BB1A:
0001EFFC 0440 0040                  		subi.w	#$40,d0
0001F000 6400                       		bcc.s	loc_1BB22
0001F002 4E71                       		nop	
0001F004                            
0001F004                            loc_1BB22:
0001F004 3140 0020                  		move.w	d0,obInertia(a0)
0001F008 4E75                       		rts	
0001F00A                            ; End of function Obj09_MoveLeft
0001F00A                            
0001F00A                            
0001F00A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F00A                            
0001F00A                            
0001F00A                            Obj09_MoveRight:
0001F00A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001F010 3028 0020                  		move.w	obInertia(a0),d0
0001F014 6B00                       		bmi.s	loc_1BB48
0001F016 0640 000C                  		addi.w	#$C,d0
0001F01A 0C40 0800                  		cmpi.w	#$800,d0
0001F01E 6D00                       		blt.s	loc_1BB42
0001F020 303C 0800                  		move.w	#$800,d0
0001F024                            
0001F024                            loc_1BB42:
0001F024 3140 0020                  		move.w	d0,obInertia(a0)
0001F028 6000                       		bra.s	locret_1BB54
0001F02A                            ; ===========================================================================
0001F02A                            
0001F02A                            loc_1BB48:
0001F02A 0640 0040                  		addi.w	#$40,d0
0001F02E 6400                       		bcc.s	loc_1BB50
0001F030 4E71                       		nop	
0001F032                            
0001F032                            loc_1BB50:
0001F032 3140 0020                  		move.w	d0,obInertia(a0)
0001F036                            
0001F036                            locret_1BB54:
0001F036 4E75                       		rts	
0001F038                            ; End of function Obj09_MoveRight
0001F038                            
0001F038                            
0001F038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F038                            
0001F038                            
0001F038                            Obj09_Jump:
0001F038 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001F03C 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001F040 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001F042 1038 F780                  		move.b	(v_ssangle).w,d0
0001F046 0200 00FC                  		andi.b	#$FC,d0
0001F04A 4400                       		neg.b	d0
0001F04C 0400 0040                  		subi.b	#$40,d0
0001F050 4EB9 0000 3A36             		jsr	(CalcSine).l
0001F056 C3FC 0680                  		muls.w	#$680,d1
0001F05A E081                       		asr.l	#8,d1
0001F05C 3141 0010                  		move.w	d1,obVelX(a0)
0001F060 C1FC 0680                  		muls.w	#$680,d0
0001F064 E080                       		asr.l	#8,d0
0001F066 3140 0012                  		move.w	d0,obVelY(a0)
0001F06A 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F07A                            
0001F07A                            Obj09_NoJump:
0001F07A 4E75                       		rts	
0001F07C                            ; End of function Obj09_Jump
0001F07C                            
0001F07C                            
0001F07C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F07C                            
0001F07C                            
0001F07C                            nullsub_2:
0001F07C 4E75                       		rts	
0001F07E                            ; End of function nullsub_2
0001F07E                            
0001F07E                            ; ===========================================================================
0001F07E                            ; ---------------------------------------------------------------------------
0001F07E                            ; unused subroutine to limit Sonic's upward vertical speed
0001F07E                            ; ---------------------------------------------------------------------------
0001F07E 323C FC00                  		move.w	#-$400,d1
0001F082 B268 0012                  		cmp.w	obVelY(a0),d1
0001F086 6F00                       		ble.s	locret_1BBB4
0001F088 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F08C 0200 0070                  		andi.b	#btnABC,d0
0001F090 6600                       		bne.s	locret_1BBB4
0001F092 3141 0012                  		move.w	d1,obVelY(a0)
0001F096                            
0001F096                            locret_1BBB4:
0001F096 4E75                       		rts	
0001F098                            ; ---------------------------------------------------------------------------
0001F098                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001F098                            ; ---------------------------------------------------------------------------
0001F098                            
0001F098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F098                            
0001F098                            
0001F098                            SS_FixCamera:
0001F098 3428 000C                  		move.w	obY(a0),d2
0001F09C 3628 0008                  		move.w	obX(a0),d3
0001F0A0 3038 F700                  		move.w	(v_screenposx).w,d0
0001F0A4 0443 00A0                  		subi.w	#$A0,d3
0001F0A8 6500                       		bcs.s	loc_1BBCE
0001F0AA 9043                       		sub.w	d3,d0
0001F0AC 9178 F700                  		sub.w	d0,(v_screenposx).w
0001F0B0                            
0001F0B0                            loc_1BBCE:
0001F0B0 3038 F704                  		move.w	(v_screenposy).w,d0
0001F0B4 0442 0070                  		subi.w	#$70,d2
0001F0B8 6500                       		bcs.s	locret_1BBDE
0001F0BA 9042                       		sub.w	d2,d0
0001F0BC 9178 F704                  		sub.w	d0,(v_screenposy).w
0001F0C0                            
0001F0C0                            locret_1BBDE:
0001F0C0 4E75                       		rts	
0001F0C2                            ; End of function SS_FixCamera
0001F0C2                            
0001F0C2                            ; ===========================================================================
0001F0C2                            
0001F0C2                            Obj09_ExitStage:
0001F0C2 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001F0C8 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001F0CE 6600                       		bne.s	loc_1BBF4
0001F0D0 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F0D6                            
0001F0D6                            loc_1BBF4:
0001F0D6 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001F0DC 6D00                       		blt.s	loc_1BC12
0001F0DE 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001F0E4 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001F0EA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F0EE 317C 003C 0038             		move.w	#$3C,$38(a0)
0001F0F4                            
0001F0F4                            loc_1BC12:
0001F0F4 3038 F780                  		move.w	(v_ssangle).w,d0
0001F0F8 D078 F782                  		add.w	(v_ssrotate).w,d0
0001F0FC 31C0 F780                  		move.w	d0,(v_ssangle).w
0001F100 4EB9 0001 65F0             		jsr	(Sonic_Animate).l
0001F106 4EB9 0001 6988             		jsr	(Sonic_LoadGfx).l
0001F10C 6100 FF8A                  		bsr.w	SS_FixCamera
0001F110 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001F116                            ; ===========================================================================
0001F116                            
0001F116                            Obj09_Exit2:
0001F116 5368 0038                  		subq.w	#1,$38(a0)
0001F11A 6600                       		bne.s	loc_1BC40
0001F11C 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F122                            
0001F122                            loc_1BC40:
0001F122 4EB9 0001 65F0             		jsr	(Sonic_Animate).l
0001F128 4EB9 0001 6988             		jsr	(Sonic_LoadGfx).l
0001F12E 6100 FF68                  		bsr.w	SS_FixCamera
0001F132 4EF9 0000 F98A             		jmp	(DisplaySprite).l
0001F138                            
0001F138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F138                            
0001F138                            
0001F138                            Obj09_Fall:
0001F138 2428 000C                  		move.l	obY(a0),d2
0001F13C 2628 0008                  		move.l	obX(a0),d3
0001F140 1038 F780                  		move.b	(v_ssangle).w,d0
0001F144 0200 00FC                  		andi.b	#$FC,d0
0001F148 4EB9 0000 3A36             		jsr	(CalcSine).l
0001F14E 3828 0010                  		move.w	obVelX(a0),d4
0001F152 48C4                       		ext.l	d4
0001F154 E184                       		asl.l	#8,d4
0001F156 C1FC 002A                  		muls.w	#$2A,d0
0001F15A D084                       		add.l	d4,d0
0001F15C 3828 0012                  		move.w	obVelY(a0),d4
0001F160 48C4                       		ext.l	d4
0001F162 E184                       		asl.l	#8,d4
0001F164 C3FC 002A                  		muls.w	#$2A,d1
0001F168 D284                       		add.l	d4,d1
0001F16A D680                       		add.l	d0,d3
0001F16C 6100 0000                  		bsr.w	sub_1BCE8
0001F170 6700                       		beq.s	loc_1BCB0
0001F172 9680                       		sub.l	d0,d3
0001F174 7000                       		moveq	#0,d0
0001F176 3140 0010                  		move.w	d0,obVelX(a0)
0001F17A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F180 D481                       		add.l	d1,d2
0001F182 6100 0000                  		bsr.w	sub_1BCE8
0001F186 6700                       		beq.s	loc_1BCC6
0001F188 9481                       		sub.l	d1,d2
0001F18A 7200                       		moveq	#0,d1
0001F18C 3141 0012                  		move.w	d1,obVelY(a0)
0001F190 4E75                       		rts	
0001F192                            ; ===========================================================================
0001F192                            
0001F192                            loc_1BCB0:
0001F192 D481                       		add.l	d1,d2
0001F194 6100 0000                  		bsr.w	sub_1BCE8
0001F198 6700                       		beq.s	loc_1BCD4
0001F19A 9481                       		sub.l	d1,d2
0001F19C 7200                       		moveq	#0,d1
0001F19E 3141 0012                  		move.w	d1,obVelY(a0)
0001F1A2 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F1A8                            
0001F1A8                            loc_1BCC6:
0001F1A8 E080                       		asr.l	#8,d0
0001F1AA E081                       		asr.l	#8,d1
0001F1AC 3140 0010                  		move.w	d0,obVelX(a0)
0001F1B0 3141 0012                  		move.w	d1,obVelY(a0)
0001F1B4 4E75                       		rts	
0001F1B6                            ; ===========================================================================
0001F1B6                            
0001F1B6                            loc_1BCD4:
0001F1B6 E080                       		asr.l	#8,d0
0001F1B8 E081                       		asr.l	#8,d1
0001F1BA 3140 0010                  		move.w	d0,obVelX(a0)
0001F1BE 3141 0012                  		move.w	d1,obVelY(a0)
0001F1C2 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F1C8 4E75                       		rts	
0001F1CA                            ; End of function Obj09_Fall
0001F1CA                            
0001F1CA                            
0001F1CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1CA                            
0001F1CA                            
0001F1CA                            sub_1BCE8:
0001F1CA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F1D0 7800                       		moveq	#0,d4
0001F1D2 4842                       		swap	d2
0001F1D4 3802                       		move.w	d2,d4
0001F1D6 4842                       		swap	d2
0001F1D8 0644 0044                  		addi.w	#$44,d4
0001F1DC 88FC 0018                  		divu.w	#$18,d4
0001F1E0 C8FC 0080                  		mulu.w	#$80,d4
0001F1E4 D3C4                       		adda.l	d4,a1
0001F1E6 7800                       		moveq	#0,d4
0001F1E8 4843                       		swap	d3
0001F1EA 3803                       		move.w	d3,d4
0001F1EC 4843                       		swap	d3
0001F1EE 0644 0014                  		addi.w	#$14,d4
0001F1F2 88FC 0018                  		divu.w	#$18,d4
0001F1F6 D2C4                       		adda.w	d4,a1
0001F1F8 7A00                       		moveq	#0,d5
0001F1FA 1819                       		move.b	(a1)+,d4
0001F1FC 6100                       		bsr.s	sub_1BD30
0001F1FE 1819                       		move.b	(a1)+,d4
0001F200 6100                       		bsr.s	sub_1BD30
0001F202 D2FC 007E                  		adda.w	#$7E,a1
0001F206 1819                       		move.b	(a1)+,d4
0001F208 6100                       		bsr.s	sub_1BD30
0001F20A 1819                       		move.b	(a1)+,d4
0001F20C 6100                       		bsr.s	sub_1BD30
0001F20E 4A05                       		tst.b	d5
0001F210 4E75                       		rts	
0001F212                            ; End of function sub_1BCE8
0001F212                            
0001F212                            
0001F212                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F212                            
0001F212                            
0001F212                            sub_1BD30:
0001F212 6700                       		beq.s	locret_1BD44
0001F214 0C04 0028                  		cmpi.b	#$28,d4
0001F218 6700                       		beq.s	locret_1BD44
0001F21A 0C04 003A                  		cmpi.b	#$3A,d4
0001F21E 6500                       		bcs.s	loc_1BD46
0001F220 0C04 004B                  		cmpi.b	#$4B,d4
0001F224 6400                       		bcc.s	loc_1BD46
0001F226                            
0001F226                            locret_1BD44:
0001F226 4E75                       		rts	
0001F228                            ; ===========================================================================
0001F228                            
0001F228                            loc_1BD46:
0001F228 1144 0030                  		move.b	d4,$30(a0)
0001F22C 2149 0032                  		move.l	a1,$32(a0)
0001F230 7AFF                       		moveq	#-1,d5
0001F232 4E75                       		rts	
0001F234                            ; End of function sub_1BD30
0001F234                            
0001F234                            
0001F234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F234                            
0001F234                            
0001F234                            Obj09_ChkItems:
0001F234 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F23A 7800                       		moveq	#0,d4
0001F23C 3828 000C                  		move.w	obY(a0),d4
0001F240 0644 0050                  		addi.w	#$50,d4
0001F244 88FC 0018                  		divu.w	#$18,d4
0001F248 C8FC 0080                  		mulu.w	#$80,d4
0001F24C D3C4                       		adda.l	d4,a1
0001F24E 7800                       		moveq	#0,d4
0001F250 3828 0008                  		move.w	obX(a0),d4
0001F254 0644 0020                  		addi.w	#$20,d4
0001F258 88FC 0018                  		divu.w	#$18,d4
0001F25C D2C4                       		adda.w	d4,a1
0001F25E 1811                       		move.b	(a1),d4
0001F260 6600                       		bne.s	Obj09_ChkCont
0001F262 4A28 003A                  		tst.b	$3A(a0)
0001F266 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F26A 7800                       		moveq	#0,d4
0001F26C 4E75                       		rts	
0001F26E                            ; ===========================================================================
0001F26E                            
0001F26E                            Obj09_ChkCont:
0001F26E 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F272 6600                       		bne.s	Obj09_Chk1Up
0001F274 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F278 6600                       		bne.s	Obj09_GetCont
0001F27A 14BC 0001                  		move.b	#1,(a2)
0001F27E 2549 0004                  		move.l	a1,4(a2)
0001F282                            
0001F282                            Obj09_GetCont:
0001F282 4EB9 0000 BB4E             		jsr	(CollectRing).l
0001F288 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F28E 6500                       		bcs.s	Obj09_NoCont
0001F290 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F296 6600                       		bne.s	Obj09_NoCont
0001F298 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F2A6                            
0001F2A6                            Obj09_NoCont:
0001F2A6 7800                       		moveq	#0,d4
0001F2A8 4E75                       		rts	
0001F2AA                            ; ===========================================================================
0001F2AA                            
0001F2AA                            Obj09_Chk1Up:
0001F2AA 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F2AE 6600                       		bne.s	Obj09_ChkEmer
0001F2B0 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F2B4 6600                       		bne.s	Obj09_Get1Up
0001F2B6 14BC 0003                  		move.b	#3,(a2)
0001F2BA 2549 0004                  		move.l	a1,4(a2)
0001F2BE                            
0001F2BE                            Obj09_Get1Up:
0001F2BE 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F2C2 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F2D0 7800                       		moveq	#0,d4
0001F2D2 4E75                       		rts	
0001F2D4                            ; ===========================================================================
0001F2D4                            
0001F2D4                            Obj09_ChkEmer:
0001F2D4 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F2D8 6500                       		bcs.s	Obj09_ChkGhost
0001F2DA 0C04 0040                  		cmpi.b	#$40,d4
0001F2DE 6200                       		bhi.s	Obj09_ChkGhost
0001F2E0 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F2E4 6600                       		bne.s	Obj09_GetEmer
0001F2E6 14BC 0005                  		move.b	#5,(a2)
0001F2EA 2549 0004                  		move.l	a1,4(a2)
0001F2EE                            
0001F2EE                            Obj09_GetEmer:
0001F2EE 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F2F4 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F2F6 0404 003B                  		subi.b	#$3B,d4
0001F2FA 7000                       		moveq	#0,d0
0001F2FC 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F300 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F304 1584 0000                  		move.b	d4,(a2,d0.w)
0001F308 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F30C                            
0001F30C                            Obj09_NoEmer:
0001F316 7800                       		moveq	#0,d4
0001F318 4E75                       		rts	
0001F31A                            ; ===========================================================================
0001F31A                            
0001F31A                            Obj09_ChkGhost:
0001F31A 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F31E 6600                       		bne.s	Obj09_ChkGhostTag
0001F320 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F326                            
0001F326                            Obj09_ChkGhostTag:
0001F326 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F32A 6600                       		bne.s	Obj09_NoGhost
0001F32C 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F332 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F334 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F33A                            
0001F33A                            Obj09_NoGhost:
0001F33A 78FF                       		moveq	#-1,d4
0001F33C 4E75                       		rts	
0001F33E                            ; ===========================================================================
0001F33E                            
0001F33E                            Obj09_MakeGhostSolid:
0001F33E 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F344 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F346 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F34C 723F                       		moveq	#$3F,d1
0001F34E                            
0001F34E                            Obj09_GhostLoop2:
0001F34E 743F                       		moveq	#$3F,d2
0001F350                            
0001F350                            Obj09_GhostLoop:
0001F350 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F354 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F356 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F35A                            
0001F35A                            Obj09_NoReplace:
0001F35A 5249                       		addq.w	#1,a1
0001F35C 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F360 43E9 0040                  		lea	$40(a1),a1
0001F364 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F368                            
0001F368                            Obj09_GhostNotSolid:
0001F368 4228 003A                  		clr.b	$3A(a0)
0001F36C 7800                       		moveq	#0,d4
0001F36E 4E75                       		rts	
0001F370                            ; End of function Obj09_ChkItems
0001F370                            
0001F370                            
0001F370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F370                            
0001F370                            
0001F370                            Obj09_ChkItems2:
0001F370 1028 0030                  		move.b	$30(a0),d0
0001F374 6600                       		bne.s	Obj09_ChkBumper
0001F376 5328 0036                  		subq.b	#1,$36(a0)
0001F37A 6A00                       		bpl.s	loc_1BEA0
0001F37C 117C 0000 0036             		move.b	#0,$36(a0)
0001F382                            
0001F382                            loc_1BEA0:
0001F382 5328 0037                  		subq.b	#1,$37(a0)
0001F386 6A00                       		bpl.s	locret_1BEAC
0001F388 117C 0000 0037             		move.b	#0,$37(a0)
0001F38E                            
0001F38E                            locret_1BEAC:
0001F38E 4E75                       		rts	
0001F390                            ; ===========================================================================
0001F390                            
0001F390                            Obj09_ChkBumper:
0001F390 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F394 6600                       		bne.s	Obj09_GOAL
0001F396 2228 0032                  		move.l	$32(a0),d1
0001F39A 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F3A0 3401                       		move.w	d1,d2
0001F3A2 0241 007F                  		andi.w	#$7F,d1
0001F3A6 C2FC 0018                  		mulu.w	#$18,d1
0001F3AA 0441 0014                  		subi.w	#$14,d1
0001F3AE EE4A                       		lsr.w	#7,d2
0001F3B0 0242 007F                  		andi.w	#$7F,d2
0001F3B4 C4FC 0018                  		mulu.w	#$18,d2
0001F3B8 0442 0044                  		subi.w	#$44,d2
0001F3BC 9268 0008                  		sub.w	obX(a0),d1
0001F3C0 9468 000C                  		sub.w	obY(a0),d2
0001F3C4 4EB9 0000 3CC8             		jsr	(CalcAngle).l
0001F3CA 4EB9 0000 3A36             		jsr	(CalcSine).l
0001F3D0 C3FC F900                  		muls.w	#-$700,d1
0001F3D4 E081                       		asr.l	#8,d1
0001F3D6 3141 0010                  		move.w	d1,obVelX(a0)
0001F3DA C1FC F900                  		muls.w	#-$700,d0
0001F3DE E080                       		asr.l	#8,d0
0001F3E0 3140 0012                  		move.w	d0,obVelY(a0)
0001F3E4 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F3EA 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F3EE 6600                       		bne.s	Obj09_BumpSnd
0001F3F0 14BC 0002                  		move.b	#2,(a2)
0001F3F4 2028 0032                  		move.l	$32(a0),d0
0001F3F8 5380                       		subq.l	#1,d0
0001F3FA 2540 0004                  		move.l	d0,4(a2)
0001F3FE                            
0001F3FE                            Obj09_BumpSnd:
0001F408                            ; ===========================================================================
0001F408                            
0001F408                            Obj09_GOAL:
0001F408 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F40C 6600                       		bne.s	Obj09_UPblock
0001F40E 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F41C 4E75                       		rts	
0001F41E                            ; ===========================================================================
0001F41E                            
0001F41E                            Obj09_UPblock:
0001F41E 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F422 6600                       		bne.s	Obj09_DOWNblock
0001F424 4A28 0036                  		tst.b	$36(a0)
0001F428 6600 0000                  		bne.w	Obj09_NoGlass
0001F42C 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F432 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F438 6700                       		beq.s	Obj09_UPsnd
0001F43A E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F43E 2268 0032                  		movea.l	$32(a0),a1
0001F442 5389                       		subq.l	#1,a1
0001F444 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F448                            
0001F448                            Obj09_UPsnd:
0001F452                            ; ===========================================================================
0001F452                            
0001F452                            Obj09_DOWNblock:
0001F452 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F456 6600                       		bne.s	Obj09_Rblock
0001F458 4A28 0036                  		tst.b	$36(a0)
0001F45C 6600 0000                  		bne.w	Obj09_NoGlass
0001F460 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F466 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F46C 6600                       		bne.s	Obj09_DOWNsnd
0001F46E E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F472 2268 0032                  		movea.l	$32(a0),a1
0001F476 5389                       		subq.l	#1,a1
0001F478 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F47C                            
0001F47C                            Obj09_DOWNsnd:
0001F486                            ; ===========================================================================
0001F486                            
0001F486                            Obj09_Rblock:
0001F486 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F48A 6600                       		bne.s	Obj09_ChkGlass
0001F48C 4A28 0037                  		tst.b	$37(a0)
0001F490 6600 0000                  		bne.w	Obj09_NoGlass
0001F494 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F49A 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F49E 6600                       		bne.s	Obj09_RevStage
0001F4A0 14BC 0004                  		move.b	#4,(a2)
0001F4A4 2028 0032                  		move.l	$32(a0),d0
0001F4A8 5380                       		subq.l	#1,d0
0001F4AA 2540 0004                  		move.l	d0,4(a2)
0001F4AE                            
0001F4AE                            Obj09_RevStage:
0001F4AE 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F4BC                            ; ===========================================================================
0001F4BC                            
0001F4BC                            Obj09_ChkGlass:
0001F4BC 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F4C0 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F4C2 0C00 002E                  		cmpi.b	#$2E,d0
0001F4C6 6700                       		beq.s	Obj09_Glass
0001F4C8 0C00 002F                  		cmpi.b	#$2F,d0
0001F4CC 6700                       		beq.s	Obj09_Glass
0001F4CE 0C00 0030                  		cmpi.b	#$30,d0
0001F4D2 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F4D4                            
0001F4D4                            Obj09_Glass:
0001F4D4 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F4D8 6600                       		bne.s	Obj09_GlassSnd
0001F4DA 14BC 0006                  		move.b	#6,(a2)
0001F4DE 2268 0032                  		movea.l	$32(a0),a1
0001F4E2 5389                       		subq.l	#1,a1
0001F4E4 2549 0004                  		move.l	a1,4(a2)
0001F4E8 1011                       		move.b	(a1),d0
0001F4EA 5200                       		addq.b	#1,d0		; change glass type when touched
0001F4EC 0C00 0030                  		cmpi.b	#$30,d0
0001F4F0 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F4F2 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F4F4                            
0001F4F4                            Obj09_GlassUpdate:
0001F4F4 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F4F8                            
0001F4F8                            Obj09_GlassSnd:
0001F502                            ; ===========================================================================
0001F502                            
0001F502                            Obj09_NoGlass:
0001F502 4E75                       		rts	
0001F504                            ; End of function Obj09_ChkItems2
0001F504                            ; End of function Obj09_ChkItems2
0001F504                            
0001F504                            		include	"_incObj\10.asm"
0001F504                            ; ---------------------------------------------------------------------------
0001F504                            ; Object 10 - After-Image
0001F504                            ; ---------------------------------------------------------------------------
0001F504                            
0001F504                            Obj10:
0001F504 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F50A 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F50E                            
0001F50E 7000                             moveq   #0,d0
0001F510 1028 0024                        move.b   obRoutine(a0),d0
0001F514 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F518 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F51C                            
0001F51C                            ; ===========================================================================
0001F51C                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F51C                            ; ===========================================================================
0001F51C                            Afterimage_Index:
0001F51C 0000                             dc.w NoAfterImage-Afterimage_Index
0001F51E 0000                             dc.w NoAfterImage-Afterimage_Index
0001F520 0000                             dc.w NoAfterImage-Afterimage_Index
0001F522 0000                             dc.w AfterimageStart-Afterimage_Index
0001F524 0000                             dc.w NoAfterImage-Afterimage_Index
0001F526 0000                             dc.w NoAfterImage-Afterimage_Index
0001F528 0000                             dc.w NoAfterImage-Afterimage_Index
0001F52A 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F52C 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F52E                            ; ===========================================================================
0001F52E                            NoAfterImage:
0001F52E 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F532 4E75                             rts
0001F534                            ; ===========================================================================
0001F534                            AfterimageStart:
0001F534 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F53A 6000                             bra.s   Afterimage_Show
0001F53C                            ; ===========================================================================
0001F53C                            AfterimageLPrio:
0001F53C 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F540                            ; ===========================================================================
0001F540                            Afterimage_Show:
0001F540 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F544 4EB9 0000 3A10                   jsr   (RandomNumber).l         ; get a random number
0001F54A 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F54E 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F550 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F552                            
0001F552                            AfterimageException:
0001F552 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F558 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F55E 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F564 4EF9 0000 F98A                   jmp   DisplaySprite
0001F56A                            ; ===========================================================================
0001F56A                            AfterimageEnd:
0001F56A 4EF9 0000 F9CA                   jmp   DeleteObject
0001F56A 4EF9 0000 F9CA                   jmp   DeleteObject
0001F570                            
0001F570                            		include	"_inc\AnimateLevelGfx.asm"
0001F570                            ; ---------------------------------------------------------------------------
0001F570                            ; Subroutine to	animate	level graphics
0001F570                            ; ---------------------------------------------------------------------------
0001F570                            
0001F570                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F570                            
0001F570                            
0001F570                            AnimateLevelGfx:
0001F570                            		;tst.w	(f_pause).w	; is the game paused?
0001F570                            		;bne.s	@ispaused	; if yes, branch
0001F570 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F576 6100 0000                  		bsr.w	AniArt_GiantRing
0001F57A 7000                       		moveq	#0,d0
0001F57C 1038 FE10                  		move.b	(v_zone).w,d0
0001F580 D040                       		add.w	d0,d0
0001F582 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F586 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F58A                            
0001F58A                            	@ispaused:
0001F58A 4E75                       		rts	
0001F58C                            
0001F58C                            ; ===========================================================================
0001F58C 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F590 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F594 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F598 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F59A                            ; ===========================================================================
0001F59A                            ; ---------------------------------------------------------------------------
0001F59A                            ; Animated pattern routine - Green Hill
0001F59A                            ; ---------------------------------------------------------------------------
0001F59A                            
0001F59A                            AniArt_GHZ:
0001F59A                            
0001F59A                            AniArt_GHZ_Waterfall:
0001F59A                            
0001F59A =00000008                  @size:		equ 8	; number of tiles per frame
0001F59A                            
0001F59A 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F59E 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F5A0                            
0001F5A0 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F5A6 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F5AC 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F5B0 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F5B4 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F5B8 6700                       		beq.s	@isframe0	; branch if frame 0
0001F5BA 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F5BE                            
0001F5BE                            	@isframe0:
0001F5C8 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F5CC 6000 0000                  		bra.w	LoadTiles
0001F5D0                            ; ===========================================================================
0001F5D0                            
0001F5D0                            AniArt_GHZ_Bigflower:
0001F5D0                            
0001F5D0 =00000010                  @size:		equ 16	; number of tiles per frame
0001F5D0                            
0001F5D0 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F5D4 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F5D6                            
0001F5D6 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F5DC 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F5E2 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F5E6 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F5EA 0240 0001                  		andi.w	#1,d0
0001F5EE 6700                       		beq.s	@isframe0
0001F5F0 43E9 0200                  		lea	@size*$20(a1),a1
0001F5F4                            
0001F5F4                            	@isframe0:
0001F5FE 323C 000F                  		move.w	#@size-1,d1
0001F602 6000 0000                  		bra.w	LoadTiles
0001F606                            ; ===========================================================================
0001F606                            
0001F606                            AniArt_GHZ_Smallflower:
0001F606                            
0001F606 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F606                            
0001F606 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F60A 6A00                       		bpl.s	@end
0001F60C                            
0001F60C 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F612 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F616 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F61A 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F61E 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F622 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F626 6600                       		bne.s	@isframe1	; if not, branch
0001F628 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F62E                            
0001F62E                            	@isframe1:
0001F62E EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F630 3200                       		move.w	d0,d1
0001F632 D040                       		add.w	d0,d0
0001F634 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F640 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F646 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F64A 323C 000B                  		move.w	#@size-1,d1
0001F64E 6100 0000                  		bsr.w	LoadTiles
0001F652                            
0001F652                            @end:
0001F652 4E75                       		rts	
0001F654                            
0001F654 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F658                            ; ===========================================================================
0001F658                            ; ---------------------------------------------------------------------------
0001F658                            ; Animated pattern routine - Marble
0001F658                            ; ---------------------------------------------------------------------------
0001F658                            
0001F658                            AniArt_MZ:
0001F658                            
0001F658                            AniArt_MZ_Lava:
0001F658                            
0001F658 =00000008                  @size:		equ 8	; number of tiles per frame
0001F658                            
0001F658 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F65C 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F65E                            
0001F65E 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F664 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F66A 7000                       		moveq	#0,d0
0001F66C 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F670 5200                       		addq.b	#1,d0		; increment frame counter
0001F672 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F676 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F678 7000                       		moveq	#0,d0
0001F67A                            
0001F67A                            	@frame01or2:
0001F67A 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F67E C0FC 0100                  		mulu.w	#@size*$20,d0
0001F682 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F68E 323C 0007                  		move.w	#@size-1,d1
0001F692 6100 0000                  		bsr.w	LoadTiles
0001F696                            
0001F696                            AniArt_MZ_Magma:
0001F696 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F69A 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F69C                            		
0001F69C 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F6A2 7000                       		moveq	#0,d0
0001F6A4 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F6A8 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F6AE EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F6B0 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F6BC 7600                       		moveq	#0,d3
0001F6BE 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F6C2 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F6C6 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F6CA 343C 0003                  		move.w	#3,d2
0001F6CE                            
0001F6CE                            	@loop:
0001F6CE 3003                       		move.w	d3,d0
0001F6D0 D040                       		add.w	d0,d0
0001F6D2 0240 001E                  		andi.w	#$1E,d0
0001F6D6 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F6DC 3033 0000                  		move.w	(a3,d0.w),d0
0001F6E0 47F3 0000                  		lea	(a3,d0.w),a3
0001F6E4 224C                       		movea.l	a4,a1
0001F6E6 323C 001F                  		move.w	#$1F,d1
0001F6EA 4E93                       		jsr	(a3)
0001F6EC 5843                       		addq.w	#4,d3
0001F6EE 51CA FFDE                  		dbf	d2,@loop
0001F6F2 4E75                       		rts	
0001F6F4                            ; ===========================================================================
0001F6F4                            
0001F6F4                            AniArt_MZ_Torch:
0001F6F4                            
0001F6F4 =00000006                  @size:		equ 6	; number of tiles per frame
0001F6F4                            
0001F6F4 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F6F8 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F6FC                            		
0001F6FC 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F702 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F708 7000                       		moveq	#0,d0
0001F70A 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F70E 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F712 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F718 C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F71C D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F728 323C 0005                  		move.w	#@size-1,d1
0001F72C 6000 0000                  		bra.w	LoadTiles
0001F730                            
0001F730                            @end:
0001F730 4E75                       		rts	
0001F732                            ; ===========================================================================
0001F732                            ; ---------------------------------------------------------------------------
0001F732                            ; Animated pattern routine - Scrap Brain
0001F732                            ; ---------------------------------------------------------------------------
0001F732                            
0001F732                            AniArt_SBZ:
0001F732                            
0001F732 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F732                            
0001F732 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F736 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F738                            		
0001F738 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F73C 6000                       		bra.s	@chk_smokepuff2
0001F73E                            ; ===========================================================================
0001F73E                            
0001F73E                            @smokepuff:
0001F73E 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F742 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F744                            		
0001F744 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F74A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F75A 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F75E 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F762 0240 0007                  		andi.w	#7,d0
0001F766 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F768 5340                       		subq.w	#1,d0
0001F76A C0FC 0180                  		mulu.w	#@size*$20,d0
0001F76E 43F1 0000                  		lea	(a1,d0.w),a1
0001F772 323C 000B                  		move.w	#@size-1,d1
0001F776 6000 0000                  		bra.w	LoadTiles
0001F77A                            ; ===========================================================================
0001F77A                            
0001F77A                            @untilnextpuff:
0001F77A 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F780                            
0001F780                            @clearsky:
0001F780 323C 0005                  		move.w	#(@size/2)-1,d1
0001F784 6100 0000                  		bsr.w	LoadTiles
0001F788 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F78E 323C 0005                  		move.w	#(@size/2)-1,d1
0001F792 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F796                            ; ===========================================================================
0001F796                            
0001F796                            @chk_smokepuff2:
0001F796 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F79A 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F79C                            		
0001F79C 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F7A0 6000                       		bra.s	@end
0001F7A2                            ; ===========================================================================
0001F7A2                            
0001F7A2                            @smokepuff2:
0001F7A2 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F7A6 6A00                       		bpl.s	@end		; branch if not 0
0001F7A8                            		
0001F7A8 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F7AE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F7BE 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F7C2 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F7C6 0240 0007                  		andi.w	#7,d0
0001F7CA 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F7CC 5340                       		subq.w	#1,d0
0001F7CE C0FC 0180                  		mulu.w	#@size*$20,d0
0001F7D2 43F1 0000                  		lea	(a1,d0.w),a1
0001F7D6 323C 000B                  		move.w	#@size-1,d1
0001F7DA 6000 0000                  		bra.w	LoadTiles
0001F7DE                            ; ===========================================================================
0001F7DE                            
0001F7DE                            @untilnextpuff2:
0001F7DE 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F7E4 609A                       		bra.s	@clearsky
0001F7E6                            ; ===========================================================================
0001F7E6                            
0001F7E6                            @end:
0001F7E6 4E75                       		rts	
0001F7E8                            ; ===========================================================================
0001F7E8                            ; ---------------------------------------------------------------------------
0001F7E8                            ; Animated pattern routine - ending sequence
0001F7E8                            ; ---------------------------------------------------------------------------
0001F7E8                            
0001F7E8                            AniArt_Ending:
0001F7E8                            
0001F7E8                            AniArt_Ending_BigFlower:
0001F7E8                            
0001F7E8 =00000010                  @size:		equ 16	; number of tiles per frame
0001F7E8                            
0001F7E8 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F7EC 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F7EE                            		
0001F7EE 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F7F4 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F7FA 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F7FE 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F802 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F806 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F80A 6700                       		beq.s	@isframe0	; branch if frame 0
0001F80C 43E9 0200                  		lea	@size*$20(a1),a1
0001F810 45EA 0200                  		lea	@size*$20(a2),a2
0001F814                            
0001F814                            	@isframe0:
0001F81E 323C 000F                  		move.w	#@size-1,d1
0001F822 6100 0000                  		bsr.w	LoadTiles
0001F826 224A                       		movea.l	a2,a1
0001F832 323C 000F                  		move.w	#@size-1,d1
0001F836 6000 0000                  		bra.w	LoadTiles
0001F83A                            ; ===========================================================================
0001F83A                            
0001F83A                            AniArt_Ending_SmallFlower:
0001F83A                            
0001F83A =0000000C                  @size:		equ 12	; number of tiles per frame
0001F83A                            
0001F83A 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F83E 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F840                            		
0001F840 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F846 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F84A 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F84E 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F852 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F856 EF48                       		lsl.w	#7,d0		; multiply by $80
0001F858 3200                       		move.w	d0,d1
0001F85A D040                       		add.w	d0,d0
0001F85C D041                       		add.w	d1,d0		; multiply by 3
0001F868 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F86E 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F872 323C 000B                  		move.w	#@size-1,d1
0001F876 6000 0000                  		bra.w	LoadTiles
0001F87A                            ; ===========================================================================
0001F87A 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F882                            ; ===========================================================================
0001F882                            
0001F882                            AniArt_Ending_Flower3:
0001F882                            
0001F882 =00000010                  @size:		equ 16	; number of tiles per frame
0001F882                            
0001F882 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F886 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F888                            		
0001F888 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F88E 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F892 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F896 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F89A 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F89E E148                       		lsl.w	#8,d0		; multiply by $100
0001F8A0 D040                       		add.w	d0,d0		; multiply by 2
0001F8AC 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F8B0 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F8B4 323C 000F                  		move.w	#@size-1,d1
0001F8B8 6000 0000                  		bra.w	LoadTiles
0001F8BC                            ; ===========================================================================
0001F8BC 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F8C0                            ; ===========================================================================
0001F8C0                            
0001F8C0                            AniArt_Ending_Flower4:
0001F8C0                            
0001F8C0 =00000010                  @size:		equ 16	; number of tiles per frame
0001F8C0                            
0001F8C0 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F8C4 6A00                       		bpl.s	@end		; branch if not 0
0001F8C6                            		
0001F8C6 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F8CC 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F8D0 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F8D4 0240 0003                  		andi.w	#3,d0
0001F8D8 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F8DC E148                       		lsl.w	#8,d0		; multiply by $100
0001F8DE D040                       		add.w	d0,d0		; multiply by 2
0001F8EA 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F8EE 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F8F2 323C 000F                  		move.w	#@size-1,d1
0001F8F6 6000 0000                  		bra.w	LoadTiles
0001F8FA                            ; ===========================================================================
0001F8FA                            
0001F8FA                            @end:
0001F8FA 4E75                       		rts	
0001F8FC                            ; ===========================================================================
0001F8FC                            
0001F8FC                            AniArt_none:
0001F8FC 4E75                       		rts	
0001F8FE                            
0001F8FE                            ; ---------------------------------------------------------------------------
0001F8FE                            ; Subroutine to	transfer graphics to VRAM
0001F8FE                            
0001F8FE                            ; input:
0001F8FE                            ;	a1 = source address
0001F8FE                            ;	a6 = vdp_data_port ($C00000)
0001F8FE                            ;	d1 = number of tiles to load (minus one)
0001F8FE                            ; ---------------------------------------------------------------------------
0001F8FE                            
0001F8FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F8FE                            
0001F8FE                            
0001F8FE                            LoadTiles:
0001F8FE 2C99                       		move.l	(a1)+,(a6)
0001F900 2C99                       		move.l	(a1)+,(a6)
0001F902 2C99                       		move.l	(a1)+,(a6)
0001F904 2C99                       		move.l	(a1)+,(a6)
0001F906 2C99                       		move.l	(a1)+,(a6)
0001F908 2C99                       		move.l	(a1)+,(a6)
0001F90A 2C99                       		move.l	(a1)+,(a6)
0001F90C 2C99                       		move.l	(a1)+,(a6)
0001F90E 51C9 FFEE                  		dbf	d1,LoadTiles
0001F912 4E75                       		rts	
0001F914                            ; End of function LoadTiles
0001F914                            
0001F914                            ; ===========================================================================
0001F914                            ; ---------------------------------------------------------------------------
0001F914                            ; Animated pattern routine - more Marble Zone
0001F914                            ; ---------------------------------------------------------------------------
0001F914 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F918 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F91C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F920 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F924 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F928 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F92C 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F930 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F934                            ; ===========================================================================
0001F934                            
0001F934                            loc_1C3EE:
0001F934 2C91                       		move.l	(a1),(a6)
0001F936 43E9 0010                  		lea	$10(a1),a1
0001F93A 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F93E 4E75                       		rts	
0001F940                            ; ===========================================================================
0001F940                            
0001F940                            loc_1C3FA:
0001F940 2029 0002                  		move.l	2(a1),d0
0001F944 1029 0001                  		move.b	1(a1),d0
0001F948 E098                       		ror.l	#8,d0
0001F94A 2C80                       		move.l	d0,(a6)
0001F94C 43E9 0010                  		lea	$10(a1),a1
0001F950 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001F954 4E75                       		rts	
0001F956                            ; ===========================================================================
0001F956                            
0001F956                            loc_1C410:
0001F956 2CA9 0002                  		move.l	2(a1),(a6)
0001F95A 43E9 0010                  		lea	$10(a1),a1
0001F95E 51C9 FFF6                  		dbf	d1,loc_1C410
0001F962 4E75                       		rts	
0001F964                            ; ===========================================================================
0001F964                            
0001F964                            loc_1C41E:
0001F964 2029 0004                  		move.l	4(a1),d0
0001F968 1029 0003                  		move.b	3(a1),d0
0001F96C E098                       		ror.l	#8,d0
0001F96E 2C80                       		move.l	d0,(a6)
0001F970 43E9 0010                  		lea	$10(a1),a1
0001F974 51C9 FFEE                  		dbf	d1,loc_1C41E
0001F978 4E75                       		rts	
0001F97A                            ; ===========================================================================
0001F97A                            
0001F97A                            loc_1C434:
0001F97A 2CA9 0004                  		move.l	4(a1),(a6)
0001F97E 43E9 0010                  		lea	$10(a1),a1
0001F982 51C9 FFF6                  		dbf	d1,loc_1C434
0001F986 4E75                       		rts	
0001F988                            ; ===========================================================================
0001F988                            
0001F988                            loc_1C442:
0001F988 2029 0006                  		move.l	6(a1),d0
0001F98C 1029 0005                  		move.b	5(a1),d0
0001F990 E098                       		ror.l	#8,d0
0001F992 2C80                       		move.l	d0,(a6)
0001F994 43E9 0010                  		lea	$10(a1),a1
0001F998 51C9 FFEE                  		dbf	d1,loc_1C442
0001F99C 4E75                       		rts	
0001F99E                            ; ===========================================================================
0001F99E                            
0001F99E                            loc_1C458:
0001F99E 2CA9 0006                  		move.l	6(a1),(a6)
0001F9A2 43E9 0010                  		lea	$10(a1),a1
0001F9A6 51C9 FFF6                  		dbf	d1,loc_1C458
0001F9AA 4E75                       		rts	
0001F9AC                            ; ===========================================================================
0001F9AC                            
0001F9AC                            loc_1C466:
0001F9AC 2029 0008                  		move.l	8(a1),d0
0001F9B0 1029 0007                  		move.b	7(a1),d0
0001F9B4 E098                       		ror.l	#8,d0
0001F9B6 2C80                       		move.l	d0,(a6)
0001F9B8 43E9 0010                  		lea	$10(a1),a1
0001F9BC 51C9 FFEE                  		dbf	d1,loc_1C466
0001F9C0 4E75                       		rts	
0001F9C2                            ; ===========================================================================
0001F9C2                            
0001F9C2                            loc_1C47C:
0001F9C2 2CA9 0008                  		move.l	8(a1),(a6)
0001F9C6 43E9 0010                  		lea	$10(a1),a1
0001F9CA 51C9 FFF6                  		dbf	d1,loc_1C47C
0001F9CE 4E75                       		rts	
0001F9D0                            ; ===========================================================================
0001F9D0                            
0001F9D0                            loc_1C48A:
0001F9D0 2029 000A                  		move.l	$A(a1),d0
0001F9D4 1029 0009                  		move.b	9(a1),d0
0001F9D8 E098                       		ror.l	#8,d0
0001F9DA 2C80                       		move.l	d0,(a6)
0001F9DC 43E9 0010                  		lea	$10(a1),a1
0001F9E0 51C9 FFEE                  		dbf	d1,loc_1C48A
0001F9E4 4E75                       		rts	
0001F9E6                            ; ===========================================================================
0001F9E6                            
0001F9E6                            loc_1C4A0:
0001F9E6 2CA9 000A                  		move.l	$A(a1),(a6)
0001F9EA 43E9 0010                  		lea	$10(a1),a1
0001F9EE 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001F9F2 4E75                       		rts	
0001F9F4                            ; ===========================================================================
0001F9F4                            
0001F9F4                            loc_1C4AE:
0001F9F4 2029 000C                  		move.l	$C(a1),d0
0001F9F8 1029 000B                  		move.b	$B(a1),d0
0001F9FC E098                       		ror.l	#8,d0
0001F9FE 2C80                       		move.l	d0,(a6)
0001FA00 43E9 0010                  		lea	$10(a1),a1
0001FA04 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001FA08 4E75                       		rts	
0001FA0A                            ; ===========================================================================
0001FA0A                            
0001FA0A                            loc_1C4C4:
0001FA0A 2CA9 000C                  		move.l	$C(a1),(a6)
0001FA0E 43E9 0010                  		lea	$10(a1),a1
0001FA12 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001FA16 4E75                       		rts	
0001FA18                            ; ===========================================================================
0001FA18                            
0001FA18                            loc_1C4D2:
0001FA18 2029 000C                  		move.l	$C(a1),d0
0001FA1C E198                       		rol.l	#8,d0
0001FA1E 1011                       		move.b	0(a1),d0
0001FA20 2C80                       		move.l	d0,(a6)
0001FA22 43E9 0010                  		lea	$10(a1),a1
0001FA26 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001FA2A 4E75                       		rts	
0001FA2C                            ; ===========================================================================
0001FA2C                            
0001FA2C                            loc_1C4E8:
0001FA2C 3CA9 000E                  		move.w	$E(a1),(a6)
0001FA30 3C91                       		move.w	0(a1),(a6)
0001FA32 43E9 0010                  		lea	$10(a1),a1
0001FA36 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001FA3A 4E75                       		rts	
0001FA3C                            ; ===========================================================================
0001FA3C                            
0001FA3C                            loc_1C4FA:
0001FA3C 2011                       		move.l	0(a1),d0
0001FA3E 1029 000F                  		move.b	$F(a1),d0
0001FA42 E098                       		ror.l	#8,d0
0001FA44 2C80                       		move.l	d0,(a6)
0001FA46 43E9 0010                  		lea	$10(a1),a1
0001FA4A 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001FA4E 4E75                       		rts	
0001FA50                            
0001FA50                            ; ---------------------------------------------------------------------------
0001FA50                            ; Animated pattern routine - giant ring
0001FA50                            ; ---------------------------------------------------------------------------
0001FA50                            
0001FA50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA50                            
0001FA50                            
0001FA50                            AniArt_GiantRing:
0001FA50                            
0001FA50 =0000000E                  @size:		equ 14
0001FA50                            
0001FA50 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001FA54 6600                       		bne.s	@loadTiles		; If so, get to work
0001FA56 4E75                       		rts	
0001FA58                            ; ===========================================================================
0001FA58                            ; loc_1C518:
0001FA58                            @loadTiles:
0001FA58 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001FA5E 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001FA64 7000                       		moveq	#0,d0
0001FA66 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001FA6A 43F1 0000                  		lea	(a1,d0.w),a1
0001FA6E                            		; Turn VRAM address into VDP command
0001FA6E 0640 8000                  		addi.w	#$8000,d0
0001FA72 E588                       		lsl.l	#2,d0
0001FA74 E448                       		lsr.w	#2,d0
0001FA76 0040 4000                  		ori.w	#$4000,d0
0001FA7A 4840                       		swap	d0
0001FA7C                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001FA7C 2D40 0004                  		move.l	d0,4(a6)
0001FA80                            
0001FA80 323C 000D                  		move.w	#@size-1,d1
0001FA84 6000 FE78                  		bra.w	LoadTiles
0001FA88                            
0001FA88                            ; End of function AniArt_GiantRing
0001FA88                            ; End of function AniArt_GiantRing
0001FA88                            
0001FA88                            		include	"_incObj\21 HUD.asm"
0001FA88                            ; ---------------------------------------------------------------------------
0001FA88                            ; Object 21 - SCORE, TIME, RINGS
0001FA88                            ; ---------------------------------------------------------------------------
0001FA88                            
0001FA88                            HUD:
0001FA88 7000                       		moveq	#0,d0
0001FA8A 1028 0024                  		move.b	obRoutine(a0),d0
0001FA8E 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001FA92 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001FA96                            ; ===========================================================================
0001FA96 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001FA98 0000                       		dc.w HUD_Flash-HUD_Index
0001FA9A                            ; ===========================================================================
0001FA9A                            
0001FA9A                            HUD_Main:	; Routine 0
0001FA9A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FA9E 317C 0090 0008             		move.w	#$90,obX(a0)
0001FAA4 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001FAAA 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001FAB2 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001FAB8 117C 0000 0001             		move.b	#0,obRender(a0)
0001FABE 317C 0000 0018             		move.w	#0,obPriority(a0)
0001FAC4                            
0001FAC4                            HUD_Flash:	; Routine 2
0001FAC4 7000                       		moveq	#0,d0
0001FAC6 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001FACC 6600                       		bne.s	@display
0001FACE 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001FAD2 6600                       		bne.s	@norings	; if so, branch
0001FAD4 5240                       		addq.w	#1,d0		; make ring counter flash red
0001FAD6                            ; ===========================================================================
0001FAD6                            
0001FAD6                            @norings:
0001FAD6 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001FADC 6600                       		bne.s	@display	; if not, branch
0001FADE 5440                       		addq.w	#2,d0		; make time counter flash red
0001FAE0                            
0001FAE0                            	@display:
0001FAE0 1140 001A                  		move.b	d0,obFrame(a0)
0001FAE4 4EF9 0000 F98A             		jmp	DisplaySprite
0001FAE4 4EF9 0000 F98A             		jmp	DisplaySprite
0001FAEA                            Map_HUD:	include	"_maps\HUD.asm"
0001FAEA                            ; ---------------------------------------------------------------------------
0001FAEA                            ; Sprite mappings - SCORE, TIME, RINGS
0001FAEA                            ; ---------------------------------------------------------------------------
0001FAEA                            Map_HUD_internal:
0001FAEA 0000                       		dc.w @allyellow-Map_HUD_internal
0001FAEC 0000                       		dc.w @ringred-Map_HUD_internal
0001FAEE 0000                       		dc.w @timered-Map_HUD_internal
0001FAF0 0000                       		dc.w @allred-Map_HUD_internal
0001FAF2 0A                         @allyellow:	dc.b $A
0001FAF3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FAF8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FAFD 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FB02 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FB07 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FB0C A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FB11 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FB16 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FB1B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FB20 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FB25 00                         		dc.b 0
0001FB26 0A                         @ringred:	dc.b $A
0001FB27 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FB2C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FB31 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FB36 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FB3B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FB40 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FB45 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FB4A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FB4F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FB54 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FB59 00                         		dc.b 0
0001FB5A 0A                         @timered:	dc.b $A
0001FB5B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FB60 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FB65 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FB6A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FB6F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FB74 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FB79 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FB7E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FB83 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FB88 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FB8D 00                         		dc.b 0
0001FB8E 0A                         @allred:	dc.b $A
0001FB8F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FB94 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FB99 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FB9E 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FBA3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FBA8 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FBAD A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FBB2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FBB7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FBBC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FBC2 00                         		even
0001FBC2 00                         		even
0001FBC2                            
0001FBC2                            ; ---------------------------------------------------------------------------
0001FBC2                            ; Add points subroutine
0001FBC2                            ; ---------------------------------------------------------------------------
0001FBC2                            
0001FBC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBC2                            
0001FBC2                            
0001FBC2                            AddPoints:
0001FBC2 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001FBC8                            
0001FBC8                            
0001FBC8 47F8 FE26                  			lea     (v_score).w,a3
0001FBCC D193                       			add.l   d0,(a3)
0001FBCE 223C 000F 423F             			move.l  #999999,d1
0001FBD4 B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001FBD6 6200                       			bhi.s   @belowmax ; if yes, branch
0001FBD8 2681                       			move.l  d1,(a3) ; reset score to 999999
0001FBDA                            		@belowmax:
0001FBDA 2013                       			move.l  (a3),d0
0001FBDC B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001FBE0 6500                       			blo.s   @noextralife ; if not, branch
0001FBE2                            
0001FBE2 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001FBEA 4A38 FFF8                  			tst.b   (v_megadrive).w
0001FBEE 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001FBF0 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001FBF4 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FC02                            
0001FC02                            @locret_1C6B6:
0001FC02                            @noextralife:
0001FC02 4E75                       		rts	
0001FC04                            ; End of function AddPoints
0001FC04                            
0001FC04                            		include	"_inc\HUD_Update.asm"
0001FC04                            ; ---------------------------------------------------------------------------
0001FC04                            ; Subroutine to	update the HUD
0001FC04                            ; ---------------------------------------------------------------------------
0001FC04                            
0001FC04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC04                            
0001FC04                            hudVRAM:	macro loc
0001FC04                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FC04                            		endm
0001FC04                            
0001FC04                            
0001FC04                            HUD_Update:
0001FC04 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FC08 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FC0C 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FC10 6700                       		beq.s	@chkrings	; if not, branch
0001FC12                            
0001FC12 4238 FE1F                  		clr.b	(f_scorecount).w
0001FC16 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FC1C 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FC20 6100 0000                  		bsr.w	Hud_Score
0001FC24                            
0001FC24                            	@chkrings:
0001FC24 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FC28 6700                       		beq.s	@chktime	; if not, branch
0001FC2A 6A00                       		bpl.s	@notzero
0001FC2C 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FC30                            
0001FC30                            	@notzero:
0001FC30 4238 FE1D                  		clr.b	(f_ringcount).w
0001FC34 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FC3A 7200                       		moveq	#0,d1
0001FC3C 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FC40 6100 0000                  		bsr.w	Hud_Rings
0001FC44                            
0001FC44                            	@chktime:
0001FC44 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FC48 6700                       		beq.s	@chklives	; if not, branch
0001FC4A 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FC4E 6600                       		bne.s	@chklives	; if yes, branch
0001FC50 43F8 FE22                  		lea	(v_time).w,a1
0001FC54 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FC5A 6700                       		beq.s	TimeOver	; if yes, branch
0001FC5C                            
0001FC5C 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FC5E 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FC62 6500                       		bcs.s	@chklives
0001FC64 12BC 0000                  		move.b	#0,(a1)
0001FC68 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FC6A 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FC6E 6500                       		bcs.s	@updatetime
0001FC70 12BC 0000                  		move.b	#0,(a1)
0001FC74 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FC76 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FC7A 6500                       		bcs.s	@updatetime
0001FC7C 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FC80                            
0001FC80                            	@updatetime:
0001FC80 203C 5E40 0003             		hudVRAM	$DE40
0001FC86 7200                       		moveq	#0,d1
0001FC88 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FC8C 6100 0000                  		bsr.w	Hud_Mins
0001FC90 203C 5EC0 0003             		hudVRAM	$DEC0
0001FC96 7200                       		moveq	#0,d1
0001FC98 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FC9C 6100 0000                  		bsr.w	Hud_Secs
0001FCA0                            
0001FCA0                            	@chklives:
0001FCA0 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FCA4 6700                       		beq.s	@chkbonus	; if not, branch
0001FCA6 4238 FE1C                  		clr.b	(f_lifecount).w
0001FCAA 6100 0000                  		bsr.w	Hud_Lives
0001FCAE                            
0001FCAE                            	@chkbonus:
0001FCAE 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FCB2 6700                       		beq.s	@finish		; if not, branch
0001FCB4 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FCC2 7200                       		moveq	#0,d1
0001FCC4 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FCC8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FCCC 7200                       		moveq	#0,d1
0001FCCE 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FCD2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FCD6                            
0001FCD6                            	@finish:
0001FCD6 4E75                       		rts	
0001FCD8                            ; ===========================================================================
0001FCD8                            
0001FCD8                            TimeOver:
0001FCD8 4238 FE1E                  		clr.b	(f_timecount).w
0001FCDC 41F8 D000                  		lea	(v_player).w,a0
0001FCE0 2448                       		movea.l	a0,a2
0001FCE2 6100 E83A                  		bsr.w	KillSonic
0001FCE6 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FCEC 4E75                       		rts	
0001FCEE                            ; ===========================================================================
0001FCEE                            
0001FCEE                            HudDebug:
0001FCEE 6100 0000                  		bsr.w	HudDb_XY
0001FCF2 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FCF6 6700                       		beq.s	@objcounter	; if not, branch
0001FCF8 6A00                       		bpl.s	@notzero
0001FCFA 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FCFE                            
0001FCFE                            	@notzero:
0001FCFE 4238 FE1D                  		clr.b	(f_ringcount).w
0001FD02 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FD08 7200                       		moveq	#0,d1
0001FD0A 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FD0E 6100 0000                  		bsr.w	Hud_Rings
0001FD12                            
0001FD12                            	@objcounter:
0001FD12 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FD18 7200                       		moveq	#0,d1
0001FD1A 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FD1E 6100 0000                  		bsr.w	Hud_Secs
0001FD22 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FD26 6700                       		beq.s	@chkbonus	; if not, branch
0001FD28 4238 FE1C                  		clr.b	(f_lifecount).w
0001FD2C 6100 0000                  		bsr.w	Hud_Lives
0001FD30                            
0001FD30                            	@chkbonus:
0001FD30 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FD34 6700                       		beq.s	@finish		; if not, branch
0001FD36 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FD44 7200                       		moveq	#0,d1
0001FD46 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FD4A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FD4E 7200                       		moveq	#0,d1
0001FD50 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FD54 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FD58                            
0001FD58                            	@finish:
0001FD58 4E75                       		rts	
0001FD5A                            ; End of function HUD_Update
0001FD5A                            
0001FD5A                            ; ---------------------------------------------------------------------------
0001FD5A                            ; Subroutine to	load "0" on the	HUD
0001FD5A                            ; ---------------------------------------------------------------------------
0001FD5A                            
0001FD5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD5A                            
0001FD5A                            
0001FD5A                            Hud_LoadZero:
0001FD64 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FD68 343C 0002                  		move.w	#2,d2
0001FD6C 6000                       		bra.s	loc_1C83E
0001FD6E                            ; End of function Hud_LoadZero
0001FD6E                            
0001FD6E                            ; ---------------------------------------------------------------------------
0001FD6E                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FD6E                            ; ---------------------------------------------------------------------------
0001FD6E                            
0001FD6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD6E                            
0001FD6E                            
0001FD6E                            Hud_Base:
0001FD6E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FD74 6100 0000                  		bsr.w	Hud_Lives
0001FD82 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FD86 343C 000E                  		move.w	#$E,d2
0001FD8A                            
0001FD8A                            loc_1C83E:
0001FD8A 43FA 0000                  		lea	Art_Hud(pc),a1
0001FD8E                            
0001FD8E                            loc_1C842:
0001FD8E 323C 000F                  		move.w	#$F,d1
0001FD92 101A                       		move.b	(a2)+,d0
0001FD94 6B00                       		bmi.s	loc_1C85E
0001FD96 4880                       		ext.w	d0
0001FD98 EB48                       		lsl.w	#5,d0
0001FD9A 47F1 0000                  		lea	(a1,d0.w),a3
0001FD9E                            
0001FD9E                            loc_1C852:
0001FD9E 2C9B                       		move.l	(a3)+,(a6)
0001FDA0 51C9 FFFC                  		dbf	d1,loc_1C852
0001FDA4                            
0001FDA4                            loc_1C858:
0001FDA4 51CA FFE8                  		dbf	d2,loc_1C842
0001FDA8                            
0001FDA8 4E75                       		rts	
0001FDAA                            ; ===========================================================================
0001FDAA                            
0001FDAA                            loc_1C85E:
0001FDAA 2CBC 0000 0000             		move.l	#0,(a6)
0001FDB0 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FDB4                            
0001FDB4 60EE                       		bra.s	loc_1C858
0001FDB6                            ; End of function Hud_Base
0001FDB6                            
0001FDB6                            ; ===========================================================================
0001FDB6 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FDC2 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FDC6                            ; ---------------------------------------------------------------------------
0001FDC6                            ; Subroutine to	load debug mode	numbers	patterns
0001FDC6                            ; ---------------------------------------------------------------------------
0001FDC6                            
0001FDC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDC6                            
0001FDC6                            
0001FDC6                            HudDb_XY:
0001FDD0 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FDD4 4841                       		swap	d1
0001FDD6 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FDDA 6100                       		bsr.s	HudDb_XY2
0001FDDC 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FDE0 4841                       		swap	d1
0001FDE2 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FDE6                            ; End of function HudDb_XY
0001FDE6                            
0001FDE6                            
0001FDE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDE6                            
0001FDE6                            
0001FDE6                            HudDb_XY2:
0001FDE6 7C07                       		moveq	#7,d6
0001FDE8 43F9 0000 0592             		lea	(Art_Text).l,a1
0001FDEE                            
0001FDEE                            HudDb_XYLoop:
0001FDEE E959                       		rol.w	#4,d1
0001FDF0 3401                       		move.w	d1,d2
0001FDF2 0242 000F                  		andi.w	#$F,d2
0001FDF6 0C42 000A                  		cmpi.w	#$A,d2
0001FDFA 6500                       		bcs.s	loc_1C8B2
0001FDFC 5E42                       		addq.w	#7,d2
0001FDFE                            
0001FDFE                            loc_1C8B2:
0001FDFE EB4A                       		lsl.w	#5,d2
0001FE00 47F1 2000                  		lea	(a1,d2.w),a3
0001FE04 2C9B                       		move.l	(a3)+,(a6)
0001FE06 2C9B                       		move.l	(a3)+,(a6)
0001FE08 2C9B                       		move.l	(a3)+,(a6)
0001FE0A 2C9B                       		move.l	(a3)+,(a6)
0001FE0C 2C9B                       		move.l	(a3)+,(a6)
0001FE0E 2C9B                       		move.l	(a3)+,(a6)
0001FE10 2C9B                       		move.l	(a3)+,(a6)
0001FE12 2C9B                       		move.l	(a3)+,(a6)
0001FE14 4841                       		swap	d1
0001FE16 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FE1A                            
0001FE1A 4E75                       		rts	
0001FE1C                            ; End of function HudDb_XY2
0001FE1C                            
0001FE1C                            ; ---------------------------------------------------------------------------
0001FE1C                            ; Subroutine to	load rings numbers patterns
0001FE1C                            ; ---------------------------------------------------------------------------
0001FE1C                            
0001FE1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE1C                            
0001FE1C                            
0001FE1C                            Hud_Rings:
0001FE1C 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FE22 7C02                       		moveq	#2,d6
0001FE24 6000                       		bra.s	Hud_LoadArt
0001FE26                            ; End of function Hud_Rings
0001FE26                            
0001FE26                            ; ---------------------------------------------------------------------------
0001FE26                            ; Subroutine to	load score numbers patterns
0001FE26                            ; ---------------------------------------------------------------------------
0001FE26                            
0001FE26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE26                            
0001FE26                            
0001FE26                            Hud_Score:
0001FE26 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FE2C 7C05                       		moveq	#5,d6
0001FE2E                            
0001FE2E                            Hud_LoadArt:
0001FE2E 7800                       		moveq	#0,d4
0001FE30 43FA 0000                  		lea	Art_Hud(pc),a1
0001FE34                            
0001FE34                            Hud_ScoreLoop:
0001FE34 7400                       		moveq	#0,d2
0001FE36 261A                       		move.l	(a2)+,d3
0001FE38                            
0001FE38                            loc_1C8EC:
0001FE38 9283                       		sub.l	d3,d1
0001FE3A 6500                       		bcs.s	loc_1C8F4
0001FE3C 5242                       		addq.w	#1,d2
0001FE3E 60F8                       		bra.s	loc_1C8EC
0001FE40                            ; ===========================================================================
0001FE40                            
0001FE40                            loc_1C8F4:
0001FE40 D283                       		add.l	d3,d1
0001FE42 4A42                       		tst.w	d2
0001FE44 6700                       		beq.s	loc_1C8FE
0001FE46 383C 0001                  		move.w	#1,d4
0001FE4A                            
0001FE4A                            loc_1C8FE:
0001FE4A 4A44                       		tst.w	d4
0001FE4C 6700                       		beq.s	loc_1C92C
0001FE4E ED4A                       		lsl.w	#6,d2
0001FE50 2D40 0004                  		move.l	d0,4(a6)
0001FE54 47F1 2000                  		lea	(a1,d2.w),a3
0001FE58 2C9B                       		move.l	(a3)+,(a6)
0001FE5A 2C9B                       		move.l	(a3)+,(a6)
0001FE5C 2C9B                       		move.l	(a3)+,(a6)
0001FE5E 2C9B                       		move.l	(a3)+,(a6)
0001FE60 2C9B                       		move.l	(a3)+,(a6)
0001FE62 2C9B                       		move.l	(a3)+,(a6)
0001FE64 2C9B                       		move.l	(a3)+,(a6)
0001FE66 2C9B                       		move.l	(a3)+,(a6)
0001FE68 2C9B                       		move.l	(a3)+,(a6)
0001FE6A 2C9B                       		move.l	(a3)+,(a6)
0001FE6C 2C9B                       		move.l	(a3)+,(a6)
0001FE6E 2C9B                       		move.l	(a3)+,(a6)
0001FE70 2C9B                       		move.l	(a3)+,(a6)
0001FE72 2C9B                       		move.l	(a3)+,(a6)
0001FE74 2C9B                       		move.l	(a3)+,(a6)
0001FE76 2C9B                       		move.l	(a3)+,(a6)
0001FE78                            
0001FE78                            loc_1C92C:
0001FE78 0680 0040 0000             		addi.l	#$400000,d0
0001FE7E 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FE82                            
0001FE82 4E75                       		rts	
0001FE84                            
0001FE84                            ; End of function Hud_Score
0001FE84                            ; End of function Hud_Score
0001FE84                            
0001FE84                            ; ---------------------------------------------------------------------------
0001FE84                            ; Subroutine to	load countdown numbers on the continue screen
0001FE84                            ; ---------------------------------------------------------------------------
0001FE84                            
0001FE84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE84                            
0001FE84                            
0001FE84                            ContScrCounter:
0001FE8E 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FE94 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FE9A 7C01                       		moveq	#1,d6
0001FE9C 7800                       		moveq	#0,d4
0001FE9E 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FEA2                            
0001FEA2                            ContScr_Loop:
0001FEA2 7400                       		moveq	#0,d2
0001FEA4 261A                       		move.l	(a2)+,d3
0001FEA6                            
0001FEA6                            loc_1C95A:
0001FEA6 9283                       		sub.l	d3,d1
0001FEA8 6500                       		blo.s	loc_1C962
0001FEAA 5242                       		addq.w	#1,d2
0001FEAC 60F8                       		bra.s	loc_1C95A
0001FEAE                            ; ===========================================================================
0001FEAE                            
0001FEAE                            loc_1C962:
0001FEAE D283                       		add.l	d3,d1
0001FEB0 ED4A                       		lsl.w	#6,d2
0001FEB2 47F1 2000                  		lea	(a1,d2.w),a3
0001FEB6 2C9B                       		move.l	(a3)+,(a6)
0001FEB8 2C9B                       		move.l	(a3)+,(a6)
0001FEBA 2C9B                       		move.l	(a3)+,(a6)
0001FEBC 2C9B                       		move.l	(a3)+,(a6)
0001FEBE 2C9B                       		move.l	(a3)+,(a6)
0001FEC0 2C9B                       		move.l	(a3)+,(a6)
0001FEC2 2C9B                       		move.l	(a3)+,(a6)
0001FEC4 2C9B                       		move.l	(a3)+,(a6)
0001FEC6 2C9B                       		move.l	(a3)+,(a6)
0001FEC8 2C9B                       		move.l	(a3)+,(a6)
0001FECA 2C9B                       		move.l	(a3)+,(a6)
0001FECC 2C9B                       		move.l	(a3)+,(a6)
0001FECE 2C9B                       		move.l	(a3)+,(a6)
0001FED0 2C9B                       		move.l	(a3)+,(a6)
0001FED2 2C9B                       		move.l	(a3)+,(a6)
0001FED4 2C9B                       		move.l	(a3)+,(a6)
0001FED6 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FEDA                            
0001FEDA 4E75                       		rts	
0001FEDC                            ; End of function ContScrCounter
0001FEDC                            
0001FEDC                            ; ===========================================================================
0001FEDC                            
0001FEDC                            		include	"_inc\HUD (part 2).asm"
0001FEDC                            ; ---------------------------------------------------------------------------
0001FEDC                            ; HUD counter sizes
0001FEDC                            ; ---------------------------------------------------------------------------
0001FEDC 0001 86A0                  Hud_100000:	dc.l 100000
0001FEE0 0000 2710                  Hud_10000:	dc.l 10000
0001FEE4 0000 03E8                  Hud_1000:	dc.l 1000
0001FEE8 0000 0064                  Hud_100:	dc.l 100
0001FEEC 0000 000A                  Hud_10:		dc.l 10
0001FEF0 0000 0001                  Hud_1:		dc.l 1
0001FEF4                            
0001FEF4                            ; ---------------------------------------------------------------------------
0001FEF4                            ; Subroutine to	load time numbers patterns
0001FEF4                            ; ---------------------------------------------------------------------------
0001FEF4                            
0001FEF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEF4                            
0001FEF4                            
0001FEF4                            Hud_Mins:
0001FEF4 45F9 0001 FEF0             		lea	(Hud_1).l,a2
0001FEFA 7C00                       		moveq	#0,d6
0001FEFC 6000                       		bra.s	loc_1C9BA
0001FEFE                            ; End of function Hud_Mins
0001FEFE                            
0001FEFE                            
0001FEFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEFE                            
0001FEFE                            
0001FEFE                            Hud_Secs:
0001FEFE 45F9 0001 FEEC             		lea	(Hud_10).l,a2
0001FF04 7C01                       		moveq	#1,d6
0001FF06                            
0001FF06                            loc_1C9BA:
0001FF06 7800                       		moveq	#0,d4
0001FF08 43FA 0000                  		lea	Art_Hud(pc),a1
0001FF0C                            
0001FF0C                            Hud_TimeLoop:
0001FF0C 7400                       		moveq	#0,d2
0001FF0E 261A                       		move.l	(a2)+,d3
0001FF10                            
0001FF10                            loc_1C9C4:
0001FF10 9283                       		sub.l	d3,d1
0001FF12 6500                       		bcs.s	loc_1C9CC
0001FF14 5242                       		addq.w	#1,d2
0001FF16 60F8                       		bra.s	loc_1C9C4
0001FF18                            ; ===========================================================================
0001FF18                            
0001FF18                            loc_1C9CC:
0001FF18 D283                       		add.l	d3,d1
0001FF1A 4A42                       		tst.w	d2
0001FF1C 6700                       		beq.s	loc_1C9D6
0001FF1E 383C 0001                  		move.w	#1,d4
0001FF22                            
0001FF22                            loc_1C9D6:
0001FF22 ED4A                       		lsl.w	#6,d2
0001FF24 2D40 0004                  		move.l	d0,4(a6)
0001FF28 47F1 2000                  		lea	(a1,d2.w),a3
0001FF2C 2C9B                       		move.l	(a3)+,(a6)
0001FF2E 2C9B                       		move.l	(a3)+,(a6)
0001FF30 2C9B                       		move.l	(a3)+,(a6)
0001FF32 2C9B                       		move.l	(a3)+,(a6)
0001FF34 2C9B                       		move.l	(a3)+,(a6)
0001FF36 2C9B                       		move.l	(a3)+,(a6)
0001FF38 2C9B                       		move.l	(a3)+,(a6)
0001FF3A 2C9B                       		move.l	(a3)+,(a6)
0001FF3C 2C9B                       		move.l	(a3)+,(a6)
0001FF3E 2C9B                       		move.l	(a3)+,(a6)
0001FF40 2C9B                       		move.l	(a3)+,(a6)
0001FF42 2C9B                       		move.l	(a3)+,(a6)
0001FF44 2C9B                       		move.l	(a3)+,(a6)
0001FF46 2C9B                       		move.l	(a3)+,(a6)
0001FF48 2C9B                       		move.l	(a3)+,(a6)
0001FF4A 2C9B                       		move.l	(a3)+,(a6)
0001FF4C 0680 0040 0000             		addi.l	#$400000,d0
0001FF52 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001FF56                            
0001FF56 4E75                       		rts	
0001FF58                            ; End of function Hud_Secs
0001FF58                            
0001FF58                            ; ---------------------------------------------------------------------------
0001FF58                            ; Subroutine to	load time/ring bonus numbers patterns
0001FF58                            ; ---------------------------------------------------------------------------
0001FF58                            
0001FF58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF58                            
0001FF58                            
0001FF58                            Hud_TimeRingBonus:
0001FF58 45F9 0001 FEE4             		lea	(Hud_1000).l,a2
0001FF5E 7C03                       		moveq	#3,d6
0001FF60 7800                       		moveq	#0,d4
0001FF62 43FA 0000                  		lea	Art_Hud(pc),a1
0001FF66                            
0001FF66                            Hud_BonusLoop:
0001FF66 7400                       		moveq	#0,d2
0001FF68 261A                       		move.l	(a2)+,d3
0001FF6A                            
0001FF6A                            loc_1CA1E:
0001FF6A 9283                       		sub.l	d3,d1
0001FF6C 6500                       		bcs.s	loc_1CA26
0001FF6E 5242                       		addq.w	#1,d2
0001FF70 60F8                       		bra.s	loc_1CA1E
0001FF72                            ; ===========================================================================
0001FF72                            
0001FF72                            loc_1CA26:
0001FF72 D283                       		add.l	d3,d1
0001FF74 4A42                       		tst.w	d2
0001FF76 6700                       		beq.s	loc_1CA30
0001FF78 383C 0001                  		move.w	#1,d4
0001FF7C                            
0001FF7C                            loc_1CA30:
0001FF7C 4A44                       		tst.w	d4
0001FF7E 6700                       		beq.s	Hud_ClrBonus
0001FF80 ED4A                       		lsl.w	#6,d2
0001FF82 47F1 2000                  		lea	(a1,d2.w),a3
0001FF86 2C9B                       		move.l	(a3)+,(a6)
0001FF88 2C9B                       		move.l	(a3)+,(a6)
0001FF8A 2C9B                       		move.l	(a3)+,(a6)
0001FF8C 2C9B                       		move.l	(a3)+,(a6)
0001FF8E 2C9B                       		move.l	(a3)+,(a6)
0001FF90 2C9B                       		move.l	(a3)+,(a6)
0001FF92 2C9B                       		move.l	(a3)+,(a6)
0001FF94 2C9B                       		move.l	(a3)+,(a6)
0001FF96 2C9B                       		move.l	(a3)+,(a6)
0001FF98 2C9B                       		move.l	(a3)+,(a6)
0001FF9A 2C9B                       		move.l	(a3)+,(a6)
0001FF9C 2C9B                       		move.l	(a3)+,(a6)
0001FF9E 2C9B                       		move.l	(a3)+,(a6)
0001FFA0 2C9B                       		move.l	(a3)+,(a6)
0001FFA2 2C9B                       		move.l	(a3)+,(a6)
0001FFA4 2C9B                       		move.l	(a3)+,(a6)
0001FFA6                            
0001FFA6                            loc_1CA5A:
0001FFA6 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001FFAA                            
0001FFAA 4E75                       		rts	
0001FFAC                            ; ===========================================================================
0001FFAC                            
0001FFAC                            Hud_ClrBonus:
0001FFAC 7A0F                       		moveq	#$F,d5
0001FFAE                            
0001FFAE                            Hud_ClrBonusLoop:
0001FFAE 2CBC 0000 0000             		move.l	#0,(a6)
0001FFB4 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001FFB8                            
0001FFB8 60EC                       		bra.s	loc_1CA5A
0001FFBA                            ; End of function Hud_TimeRingBonus
0001FFBA                            
0001FFBA                            ; ---------------------------------------------------------------------------
0001FFBA                            ; Subroutine to	load uncompressed lives	counter	patterns
0001FFBA                            ; ---------------------------------------------------------------------------
0001FFBA                            
0001FFBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FFBA                            
0001FFBA                            
0001FFBA                            Hud_Lives:
0001FFBA 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
0001FFC0 7200                       		moveq	#0,d1
0001FFC2 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001FFC6 45F9 0001 FEEC             		lea	(Hud_10).l,a2
0001FFCC 7C01                       		moveq	#1,d6
0001FFCE 7800                       		moveq	#0,d4
0001FFD0 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001FFD4                            
0001FFD4                            Hud_LivesLoop:
0001FFD4 2D40 0004                  		move.l	d0,4(a6)
0001FFD8 7400                       		moveq	#0,d2
0001FFDA 261A                       		move.l	(a2)+,d3
0001FFDC                            
0001FFDC                            loc_1CA90:
0001FFDC 9283                       		sub.l	d3,d1
0001FFDE 6500                       		bcs.s	loc_1CA98
0001FFE0 5242                       		addq.w	#1,d2
0001FFE2 60F8                       		bra.s	loc_1CA90
0001FFE4                            ; ===========================================================================
0001FFE4                            
0001FFE4                            loc_1CA98:
0001FFE4 D283                       		add.l	d3,d1
0001FFE6 4A42                       		tst.w	d2
0001FFE8 6700                       		beq.s	loc_1CAA2
0001FFEA 383C 0001                  		move.w	#1,d4
0001FFEE                            
0001FFEE                            loc_1CAA2:
0001FFEE 4A44                       		tst.w	d4
0001FFF0 6700                       		beq.s	Hud_ClrLives
0001FFF2                            
0001FFF2                            loc_1CAA6:
0001FFF2 EB4A                       		lsl.w	#5,d2
0001FFF4 47F1 2000                  		lea	(a1,d2.w),a3
0001FFF8 2C9B                       		move.l	(a3)+,(a6)
0001FFFA 2C9B                       		move.l	(a3)+,(a6)
0001FFFC 2C9B                       		move.l	(a3)+,(a6)
0001FFFE 2C9B                       		move.l	(a3)+,(a6)
00020000 2C9B                       		move.l	(a3)+,(a6)
00020002 2C9B                       		move.l	(a3)+,(a6)
00020004 2C9B                       		move.l	(a3)+,(a6)
00020006 2C9B                       		move.l	(a3)+,(a6)
00020008                            
00020008                            loc_1CABC:
00020008 0680 0040 0000             		addi.l	#$400000,d0
0002000E 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00020012                            
00020012 4E75                       		rts	
00020014                            ; ===========================================================================
00020014                            
00020014                            Hud_ClrLives:
00020014 4A46                       		tst.w	d6
00020016 67DA                       		beq.s	loc_1CAA6
00020018 7A07                       		moveq	#7,d5
0002001A                            
0002001A                            Hud_ClrLivesLoop:
0002001A 2CBC 0000 0000             		move.l	#0,(a6)
00020020 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00020024 60E2                       		bra.s	loc_1CABC
00020026                            ; End of function Hud_Lives
00020026                            ; End of function Hud_Lives
00020026                            
00020026                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
00020326                            		even
00020326                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
00020466                            		even
00020466                            
00020466                            		include	"_incObj\DebugMode.asm"
00020466                            ; ---------------------------------------------------------------------------
00020466                            ; When debug mode is currently in use
00020466                            ; ---------------------------------------------------------------------------
00020466                            
00020466                            DebugMode:
00020466 7000                       		moveq	#0,d0
00020468 1038 FE08                  		move.b	(v_debuguse).w,d0
0002046C 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00020470 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00020474                            ; ===========================================================================
00020474 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
00020476 0000                       		dc.w Debug_Action-Debug_Index
00020478                            ; ===========================================================================
00020478                            
00020478                            Debug_Main:	; Routine 0
00020478 5438 FE08                  		addq.b	#2,(v_debuguse).w
0002047C 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
00020482 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
00020488 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
0002048E 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00020494 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0002049A 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
000204A0 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000204A6 117C 0000 001A             		move.b	#0,obFrame(a0)
000204AC 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000204B2 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000204B8 6600                       		bne.s	@islevel	; if not, branch
000204BA                            
000204BA 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
000204C0 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
000204C6 7006                       		moveq	#6,d0		; use 6th debug	item list
000204C8 6000                       		bra.s	@selectlist
000204CA                            ; ===========================================================================
000204CA                            
000204CA                            @islevel:
000204CA 7000                       		moveq	#0,d0
000204CC 1038 FE10                  		move.b	(v_zone).w,d0
000204D0                            
000204D0                            @selectlist:
000204D0 45F9 0000 0000             		lea	(DebugList).l,a2
000204D6 D040                       		add.w	d0,d0
000204D8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000204DC 3C1A                       		move.w	(a2)+,d6
000204DE BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
000204E2 6200                       		bhi.s	@noreset	; if not, branch
000204E4 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
000204EA                            
000204EA                            	@noreset:
000204EA 6100 0000                  		bsr.w	Debug_ShowItem
000204EE 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000204F4 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
000204FA                            
000204FA                            Debug_Action:	; Routine 2
000204FA 7006                       		moveq	#6,d0
000204FC 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
00020502 6700                       		beq.s	@isntlevel
00020504                            
00020504 7000                       		moveq	#0,d0
00020506 1038 FE10                  		move.b	(v_zone).w,d0
0002050A                            
0002050A                            	@isntlevel:
0002050A 45F9 0000 0000             		lea	(DebugList).l,a2
00020510 D040                       		add.w	d0,d0
00020512 D4F2 0000                  		adda.w	(a2,d0.w),a2
00020516 3C1A                       		move.w	(a2)+,d6
00020518 6100 0000                  		bsr.w	Debug_Control
0002051C 4EF9 0000 F98A             		jmp	(DisplaySprite).l
00020522                            
00020522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020522                            
00020522                            
00020522                            Debug_Control:
00020522 7800                       		moveq	#0,d4
00020524 323C 0001                  		move.w	#1,d1
00020528 1838 F605                  		move.b	(v_jpadpress1).w,d4
0002052C 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
00020530 6600                       		bne.s	@dirpressed	; if yes, branch
00020532                            
00020532 1038 F604                  		move.b	(v_jpadhold1).w,d0
00020536 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
0002053A 6600                       		bne.s	@dirheld	; if yes, branch
0002053C                            
0002053C 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020542 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
00020548 6000 0000                  		bra.w	Debug_ChgItem
0002054C                            ; ===========================================================================
0002054C                            
0002054C                            @dirheld:
0002054C 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
00020550 6600                       		bne.s	loc_1D01C
00020552 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
00020558 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
0002055C 6600                       		bne.s	@dirpressed
0002055E 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
00020564                            
00020564                            @dirpressed:
00020564 1838 F604                  		move.b	(v_jpadhold1).w,d4
00020568                            
00020568                            loc_1D01C:
00020568 7200                       		moveq	#0,d1
0002056A 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
0002056E 5241                       		addq.w	#1,d1
00020570 4841                       		swap	d1
00020572 E881                       		asr.l	#4,d1
00020574 2428 000C                  		move.l	obY(a0),d2
00020578 2628 0008                  		move.l	obX(a0),d3
0002057C 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
00020580 6700                       		beq.s	loc_1D03C	; if not, branch
00020582 9481                       		sub.l	d1,d2
00020584 6400                       		bcc.s	loc_1D03C
00020586 7400                       		moveq	#0,d2
00020588                            
00020588                            loc_1D03C:
00020588 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
0002058C 6700                       		beq.s	loc_1D052	; if not, branch
0002058E D481                       		add.l	d1,d2
00020590 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
00020596 6500                       		bcs.s	loc_1D052
00020598 243C 07FF 0000             		move.l	#$7FF0000,d2
0002059E                            
0002059E                            loc_1D052:
0002059E 0804 0002                  		btst	#bitL,d4
000205A2 6700                       		beq.s	loc_1D05E
000205A4 9681                       		sub.l	d1,d3
000205A6 6400                       		bcc.s	loc_1D05E
000205A8 7600                       		moveq	#0,d3
000205AA                            
000205AA                            loc_1D05E:
000205AA 0804 0003                  		btst	#bitR,d4
000205AE 6700                       		beq.s	loc_1D066
000205B0 D681                       		add.l	d1,d3
000205B2                            
000205B2                            loc_1D066:
000205B2 2142 000C                  		move.l	d2,obY(a0)
000205B6 2143 0008                  		move.l	d3,obX(a0)
000205BA                            
000205BA                            Debug_ChgItem:
000205BA 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000205C0 6700                       		beq.s	@createitem	; if not, branch
000205C2 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000205C8 6700                       		beq.s	@nextitem	; if not, branch
000205CA 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
000205CE 6400                       		bcc.s	@display
000205D0 DD38 FE06                  		add.b	d6,(v_debugitem).w
000205D4 6000                       		bra.s	@display
000205D6                            ; ===========================================================================
000205D6                            
000205D6                            @nextitem:
000205D6 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000205DC 6700                       		beq.s	@createitem	; if not, branch
000205DE 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
000205E2 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
000205E6 6200                       		bhi.s	@display
000205E8 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
000205EE                            
000205EE                            	@display:
000205EE 6000 0000                  		bra.w	Debug_ShowItem
000205F2                            ; ===========================================================================
000205F2                            
000205F2                            @createitem:
000205F2 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000205F8 6700                       		beq.s	@backtonormal	; if not, branch
000205FA 4EB9 0000 FE16             		jsr	(FindFreeObj).l
00020600 6600                       		bne.s	@backtonormal
00020602 3368 0008 0008             		move.w	obX(a0),obX(a1)
00020608 3368 000C 000C             		move.w	obY(a0),obY(a1)
0002060E 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00020612 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00020618 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
0002061E 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
00020624 7000                       		moveq	#0,d0
00020626 1038 FE06                  		move.b	(v_debugitem).w,d0
0002062A E748                       		lsl.w	#3,d0
0002062C 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
00020632 4E75                       		rts	
00020634                            ; ===========================================================================
00020634                            
00020634                            @backtonormal:
00020634 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0002063A 6700                       		beq.s	@stayindebug	; if not, branch
0002063C 7000                       		moveq	#0,d0
0002063E 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
00020642 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
0002064A 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020650 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
00020654 3140 000A                  		move.w	d0,obX+2(a0)
00020658 3140 000E                  		move.w	d0,obY+2(a0)
0002065C 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
00020662 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
00020668 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
0002066E 6600                       		bne.s	@stayindebug	; if not, branch
00020670                            
00020670 4278 F780                  		clr.w	(v_ssangle).w
00020674 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
0002067A 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020682 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020688 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
0002068E 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
00020694 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0002069A                            
0002069A                            	@stayindebug:
0002069A 4E75                       		rts	
0002069C                            ; End of function Debug_Control
0002069C                            
0002069C                            
0002069C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002069C                            
0002069C                            
0002069C                            Debug_ShowItem:
0002069C 7000                       		moveq	#0,d0
0002069E 1038 FE06                  		move.b	(v_debugitem).w,d0
000206A2 E748                       		lsl.w	#3,d0
000206A4 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
000206AA 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
000206B0 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
000206B6 4E75                       		rts	
000206B8                            ; End of function Debug_ShowItem
000206B8                            ; End of function Debug_ShowItem
000206B8                            		include	"_inc\DebugList.asm"
000206B8                            ; ---------------------------------------------------------------------------
000206B8                            ; Debug	mode item lists
000206B8                            ; ---------------------------------------------------------------------------
000206B8                            DebugList:
000206B8 0000                       	dc.w @GHZ-DebugList
000206BA 0000                       	dc.w @LZ-DebugList
000206BC 0000                       	dc.w @MZ-DebugList
000206BE 0000                       	dc.w @SLZ-DebugList
000206C0 0000                       	dc.w @SYZ-DebugList
000206C2 0000                       	dc.w @SBZ-DebugList
000206C4 0000                       	dc.w @Ending-DebugList
000206C6                            
000206C6                            dbug:	macro map,object,subtype,frame,vram
000206C6                            	dc.l map+(object<<24)
000206C6                            	dc.b subtype,frame
000206C6                            	dc.w vram
000206C6                            	endm
000206C6                            
000206C6                            @GHZ:
000206C6 0000                       	dc.w (@GHZend-@GHZ-2)/8
000206C8                            
000206C8                            ;		mappings	object		subtype	frame	VRAM setting
000206C8 2500 BFE6 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
000206D0 2600 C7AC 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000206D8 1F00 B3C6 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000206E0 2200 B850 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000206E8 2B00 CEE8 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
000206F0 3600 F334 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000206F8 1800 9D80 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
00020700 3B00 F45A 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
00020708 4001 19F2 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00020710 4101 00A8 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020718 4201 02CE 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00020720 4401 05DC 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
00020728 7901 A220 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020730 4B00 C036 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
00020738 7D01 A3E2 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
00020740                            	@GHZend:
00020740                            
00020740                            @LZ:
00020740 0000                       	dc.w (@LZend-@LZ-2)/8
00020742                            
00020742                            ;		mappings	object		subtype	frame	VRAM setting
00020742 2500 BFE6 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002074A 2600 C7AC 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020752 4101 00A8 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002075A 2C00 CF8E 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
00020762 2D00 D17A 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
0002076A 1601 43A6 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
00020772 1601 43A6 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
0002077A 3300 E5F8 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
00020782 3200 E1B8 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0002078A 3600 F334 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020792 5201 247C 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
0002079A 6101 45CE 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
000207A2 6101 45CE 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
000207AA 6101 45CE 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
000207B2 6201 4722 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
000207BA 6101 45CE 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
000207C2 6101 45CE 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
000207CA 6301 4A84 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
000207D2 6001 42F0 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
000207DA 6401 4DD2 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
000207E2 6501 4F5A 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
000207EA 6501 4F5A 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
000207F2 0B01 373C 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
000207FA 0C01 380C 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
00020802 7901 A220 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002080A                            	@LZend:
0002080A                            
0002080A                            @MZ:
0002080A 0000                       	dc.w (@MZend-@MZ-2)/8
0002080C                            
0002080C                            ;		mappings	object		subtype	frame	VRAM setting
0002080C 2500 BFE6 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020814 2600 C7AC 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002081C 2200 B850 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020824 3600 F334 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002082C 4101 00A8 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020834 1300 D688 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
0002083C 4601 0C8C 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
00020844 6E01 92BC 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
0002084C 6A01 8C74 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020854 3300 E5F8 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
0002085C 1E00 AADE 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020864 5101 21B0 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
0002086C 5201 2426 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
00020874 5300 A3C2 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
0002087C 5401 1558 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
00020884 5501 261A 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
0002088C 7801 9E8C 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020894 7901 A220 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002089C                            	@MZend:
0002089C                            
0002089C                            @SLZ:
0002089C 0000                       	dc.w (@SLZend-@SLZ-2)/8
0002089E                            
0002089E                            ;		mappings	object		subtype	frame	VRAM setting
0002089E 2500 BFE6 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000208A6 2600 C7AC 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000208AE 5901 3164 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
000208B6 5300 A3C2 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
000208BE 1800 9DDE 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
000208C6 5A01 329E 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
000208CE 5B01 3456 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
000208D6 5D01 3A2A 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
000208DE 5E01 3DBC 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
000208E6 4101 00A8 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000208EE 1300 D688 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
000208F6 1C00 A4E0 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
000208FE 5F01 403A 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020906 6001 42F0 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
0002090E 7901 A220 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020916                            	@SLZend:
00020916                            
00020916                            @SYZ:
00020916 0000                       	dc.w (@SYZend-@SYZ-2)/8
00020918                            
00020918                            ;		mappings	object		subtype	frame	VRAM setting
00020918 2500 BFE6 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020920 2600 C7AC 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020928 3600 F334 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020930 4101 00A8 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020938 4301 052E 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
00020940 1201 0D0A 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
00020948 4701 0EAE 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
00020950 1F00 B3C6 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020958 2200 B850 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020960 5001 1C82 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
00020968 1800 9DCC 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
00020970 5601 2B24 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
00020978 3200 E1B8 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020980 7801 9E8C 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020988 7901 A220 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020990                            	@SYZend:
00020990                            
00020990                            @SBZ:
00020990 0000                       	dc.w (@SBZend-@SBZ-2)/8
00020992                            
00020992                            ;		mappings	object		subtype	frame	VRAM setting
00020992 2500 BFE6 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002099A 2600 C7AC 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000209A2 5F01 403A 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000209AA 6001 42F0 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
000209B2 7801 9E8C 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
000209BA 1501 2EC0 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
000209C2 6701 8762 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
000209CA 5201 2426 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
000209D2 3200 E1B8 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000209DA 6901 89BC 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
000209E2 6901 8A16 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
000209EA 6A01 8C74 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000209F2 5300 A3C2 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
000209FA 5201 2426 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00020A02 6B01 9044 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00020A0A 2A00 A670 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020A12 6B01 9044 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00020A1A 6A01 8C74 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00020A22 6B01 9044 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00020A2A 6A01 8C74 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00020A32 6B01 9044 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00020A3A 6C01 9206 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00020A42 6D01 097E 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
00020A4A 6D01 097E 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
00020A52 6E01 92BC 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020A5A 7001 9702 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
00020A62 7101 38D0 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
00020A6A 1E00 AADE 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020A72 7901 A220 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020A7A                            	@SBZend:
00020A7A                            
00020A7A                            @Ending:
00020A7A 0000                       	dc.w (@Endingend-@Ending-2)/8
00020A7C                            
00020A7C                            ;		mappings	object		subtype	frame	VRAM setting
00020A7C 2500 BFE6 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020A84 2500 BFE6 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020A8C                            	@Endingend:
00020A8C                            
00020A8C                            	even
00020A8C                            	even
00020A8C                            		include	"_inc\LevelHeaders.asm"
00020A8C                            ; ---------------------------------------------------------------------------
00020A8C                            ; Level Headers
00020A8C                            ; ---------------------------------------------------------------------------
00020A8C                            
00020A8C                            LevelHeaders:
00020A8C                            
00020A8C                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020A8C                            	dc.l (plc1<<24)+lvlgfx
00020A8C                            	dc.l (plc2<<24)+sixteen
00020A8C                            	dc.l twofivesix
00020A8C                            	dc.b 0, music, pal, pal
00020A8C                            	endm
00020A8C                            
00020A8C                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020A8C                            ; music (unused), palette (unused), palette
00020A8C                            
00020A8C                            ;		1st PLC				2nd PLC				256x256 data			palette
00020A8C                            ;				level gfx*			16x16 data			music*
00020A8C                            
00020A8C 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
00020A9C 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00020AAC 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00020ABC 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00020ACC 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00020ADC 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00020AEC 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020AFC                            	even
00020AFC                            
00020AFC                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020AFC                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020AFC                            		include	"_inc\Pattern Load Cues.asm"
00020AFC                            ; ---------------------------------------------------------------------------
00020AFC                            ; Pattern load cues
00020AFC                            ; ---------------------------------------------------------------------------
00020AFC                            ArtLoadCues:
00020AFC                            
00020AFC 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020AFE 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020B00 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020B02 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00020B04                            PLC_Levels:
00020B04 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
00020B06 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00020B08 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00020B0A 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020B0C 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020B0E 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020B10 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020B12 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00020B14 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
00020B16 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00020B18 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00020B1A 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00020B1C 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00020B1E 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020B20 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020B22 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00020B24 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
00020B26                            PLC_Animals:
00020B26 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00020B28 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00020B2A 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00020B2C 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00020B2E 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00020B30 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00020B32 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00020B34 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
00020B36 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00020B38 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00020B3A 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00020B3C 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00020B3E                            
00020B3E                            plcm:	macro gfx,vram
00020B3E                            	dc.l gfx
00020B3E                            	dc.w vram
00020B3E                            	endm
00020B3E                            
00020B3E                            ; ---------------------------------------------------------------------------
00020B3E                            ; Pattern load cues - standard block 1
00020B3E                            ; ---------------------------------------------------------------------------
00020B3E 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00020B40 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
00020B46 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00020B4C 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
00020B52 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
00020B58 0000 0000 ACA0             		plcm	Nem_Points, $ACA0 	; points from enemy
00020B5E                            	PLC_Mainend:
00020B5E                            ; ---------------------------------------------------------------------------
00020B5E                            ; Pattern load cues - standard block 2
00020B5E                            ; ---------------------------------------------------------------------------
00020B5E 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00020B60 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00020B66                            	PLC_Main2end:
00020B66                            ; ---------------------------------------------------------------------------
00020B66                            ; Pattern load cues - explosion
00020B66                            ; ---------------------------------------------------------------------------
00020B66 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
00020B68 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00020B6E                            	PLC_Explodeend:
00020B6E                            ; ---------------------------------------------------------------------------
00020B6E                            ; Pattern load cues - game/time	over
00020B6E                            ; ---------------------------------------------------------------------------
00020B6E 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00020B70 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
00020B76                            	PLC_GameOverend:
00020B76                            ; ---------------------------------------------------------------------------
00020B76                            ; Pattern load cues - Green Hill
00020B76                            ; ---------------------------------------------------------------------------
00020B76 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
00020B78 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020B7E 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020B84 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020B8A 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020B90 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00020B96 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
00020B9C 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020BA2 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00020BA8 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020BAE 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020BB4 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020BBA 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020BC0                            
00020BC0 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020BC2 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020BC8 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020BCE 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020BD4 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020BDA 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020BE0 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00020BE6                            	PLC_GHZ2end:
00020BE6                            ; ---------------------------------------------------------------------------
00020BE6                            ; Pattern load cues - Labyrinth
00020BE6                            ; ---------------------------------------------------------------------------
00020BE6 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00020BE8 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020BEE                            		;plcm	Nem_LzBlock1, $3C00	; block
00020BEE                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020BEE                            		;plcm	Nem_Splash, $4B20	; waterfalls and splash
00020BEE 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020BF4 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020BFA 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
00020C00 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020C06 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020C0C 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020C12 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020C18 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020C1E                            
00020C1E 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020C20 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020C26 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020C2C 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
00020C32 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020C38 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020C3E 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020C44 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020C4A 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020C50 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020C56 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020C5C 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020C62 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020C68                            	PLC_LZ2end:
00020C68                            ; ---------------------------------------------------------------------------
00020C68                            ; Pattern load cues - Marble
00020C68                            ; ---------------------------------------------------------------------------
00020C68 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020C6A 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020C70 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020C76 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020C7C 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
00020C82 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020C88 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020C8E 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020C94 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020C9A 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020CA0 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020CA6                            
00020CA6 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020CA8 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020CAE 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020CB4                            		;plcm	Nem_MzSwitch, $A260	; switch
00020CB4 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020CBA 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020CC0 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020CC6 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020CCC 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020CD2                            	PLC_MZ2end:
00020CD2                            ; ---------------------------------------------------------------------------
00020CD2                            ; Pattern load cues - Star Light
00020CD2                            ; ---------------------------------------------------------------------------
00020CD2 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020CD4 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020CDA 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020CE0 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020CE6 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020CEC 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020CF2 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020CF8 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020CFE 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D04 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D0A 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D10                            
00020D10 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020D12 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020D18 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020D1E 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020D24 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020D2A 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020D30 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020D36                            	PLC_SLZ2end:
00020D36                            ; ---------------------------------------------------------------------------
00020D36                            ; Pattern load cues - Spring Yard
00020D36                            ; ---------------------------------------------------------------------------
00020D36 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020D38 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020D3E                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020D3E                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020D3E 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020D44 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020D4A 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020D50 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020D56 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020D5C 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020D62                            		;plcm	Nem_SbzBlock, $9860	; vanishing block
00020D62                            
00020D62 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020D64                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020D64 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020D6A 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020D70 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020D76                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020D76 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020D7C                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020D7C 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020D82 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D88 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D8E 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D94                            	PLC_SYZ2end:
00020D94                            ; ---------------------------------------------------------------------------
00020D94                            ; Pattern load cues - Scrap Brain
00020D94                            ; ---------------------------------------------------------------------------
00020D94 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020D96 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020D9C 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
00020DA2                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020DA2                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020DA2                            		;plcm	Nem_Girder, $5E00	; girder
00020DA2 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020DA8 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020DAE                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020DAE 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020DB4 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020DBA 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020DC0 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020DC6                            
00020DC6 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020DC8                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020DC8 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020DCE 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020DD4                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020DD4 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020DDA 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020DE0 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020DE6 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020DEC 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020DF2 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020DF8 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020DFE 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020E04                            	PLC_SBZ2end:
00020E04                            ; ---------------------------------------------------------------------------
00020E04                            ; Pattern load cues - title card
00020E04                            ; ---------------------------------------------------------------------------
00020E04 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020E06 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020E0C                            	PLC_TitleCardend:
00020E0C                            ; ---------------------------------------------------------------------------
00020E0C                            ; Pattern load cues - act 3 boss
00020E0C                            ; ---------------------------------------------------------------------------
00020E0C 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020E0E 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020E14 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020E1A 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020E20 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020E26 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020E2C 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020E32                            	PLC_Bossend:
00020E32                            ; ---------------------------------------------------------------------------
00020E32                            ; Pattern load cues - act 1/2 signpost
00020E32                            ; ---------------------------------------------------------------------------
00020E32 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020E34 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020E3A 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020E40 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020E46                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020E46                            	PLC_Signpostend:
00020E46                            ; ---------------------------------------------------------------------------
00020E46                            ; Pattern load cues - beta special stage warp effect
00020E46                            ; ---------------------------------------------------------------------------
00020E46                            PLC_Warp:
00020E46                            	PLC_Warpend:
00020E46                            ; ---------------------------------------------------------------------------
00020E46                            ; Pattern load cues - special stage
00020E46                            ; ---------------------------------------------------------------------------
00020E46 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020E48 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020E4E 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020E54 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020E5A 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020E60 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020E66 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020E6C 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020E72 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020E78 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020E7E 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020E84 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020E8A 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020E90 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020E96 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020E9C                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020E9C                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020E9C                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020E9C                            	PLC_SpeStageend:
00020E9C                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020E9C                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020E9C                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020E9C                            ; ---------------------------------------------------------------------------
00020E9C                            ; Pattern load cues - GHZ animals
00020E9C                            ; ---------------------------------------------------------------------------
00020E9C 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020E9E 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020EA4 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020EAA                            	PLC_GHZAnimalsend:
00020EAA                            ; ---------------------------------------------------------------------------
00020EAA                            ; Pattern load cues - LZ animals
00020EAA                            ; ---------------------------------------------------------------------------
00020EAA 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020EAC 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020EB2 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020EB8                            	PLC_LZAnimalsend:
00020EB8                            ; ---------------------------------------------------------------------------
00020EB8                            ; Pattern load cues - MZ animals
00020EB8                            ; ---------------------------------------------------------------------------
00020EB8 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020EBA 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020EC0 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020EC6                            	PLC_MZAnimalsend:
00020EC6                            ; ---------------------------------------------------------------------------
00020EC6                            ; Pattern load cues - SLZ animals
00020EC6                            ; ---------------------------------------------------------------------------
00020EC6 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020EC8 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020ECE 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020ED4                            	PLC_SLZAnimalsend:
00020ED4                            ; ---------------------------------------------------------------------------
00020ED4                            ; Pattern load cues - SYZ animals
00020ED4                            ; ---------------------------------------------------------------------------
00020ED4 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020ED6 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020EDC 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020EE2                            	PLC_SYZAnimalsend:
00020EE2                            ; ---------------------------------------------------------------------------
00020EE2                            ; Pattern load cues - SBZ animals
00020EE2                            ; ---------------------------------------------------------------------------
00020EE2 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020EE4 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020EEA 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020EF0                            	PLC_SBZAnimalsend:
00020EF0                            ; ---------------------------------------------------------------------------
00020EF0                            ; Pattern load cues - special stage results screen
00020EF0                            ; ---------------------------------------------------------------------------
00020EF0 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020EF2 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020EF8 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020EFE                            	PLC_SpeStResultend:
00020EFE                            ; ---------------------------------------------------------------------------
00020EFE                            ; Pattern load cues - ending sequence
00020EFE                            ; ---------------------------------------------------------------------------
00020EFE 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020F00 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020F06 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020F0C 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020F12                            		;plcm	Nem_EndFlower, $7400	; flowers
00020F12 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020F18 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020F1E 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020F24 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020F2A 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020F30 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020F36 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020F3C 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020F42 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020F48 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020F4E                            	PLC_Endingend:
00020F4E                            ; ---------------------------------------------------------------------------
00020F4E                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020F4E                            ; ---------------------------------------------------------------------------
00020F4E 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020F50 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020F56 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00020F5C 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00020F62                            	PLC_TryAgainend:
00020F62                            ; ---------------------------------------------------------------------------
00020F62                            ; Pattern load cues - Eggman on SBZ 2
00020F62                            ; ---------------------------------------------------------------------------
00020F62 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00020F64 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00020F6A 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00020F70 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00020F76                            	PLC_EggmanSBZ2end:
00020F76                            ; ---------------------------------------------------------------------------
00020F76                            ; Pattern load cues - final boss
00020F76                            ; ---------------------------------------------------------------------------
00020F76 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00020F78 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00020F7E 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00020F84 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020F8A 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00020F90 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020F96                            	PLC_FZBossend:
00020F96                            ; ---------------------------------------------------------------------------
00020F96                            ; Pattern load cues - Eggman
00020F96                            ; ---------------------------------------------------------------------------
00020F96 0005                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020F98 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020F9E 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020FA4 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020FAA 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020FB0 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020FB6 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020FBC                            	PLC_Eggend:
00020FBC                            		even
00020FBC                            ; ---------------------------------------------------------------------------
00020FBC                            ; Pattern load cue IDs
00020FBC                            ; ---------------------------------------------------------------------------
00020FBC =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00020FBC =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00020FBC =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00020FBC =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00020FBC =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00020FBC =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00020FBC =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00020FBC =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00020FBC =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00020FBC =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00020FBC =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00020FBC =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00020FBC =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00020FBC =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00020FBC =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00020FBC =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00020FBC =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00020FBC =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00020FBC =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00020FBC =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00020FBC =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00020FBC =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00020FBC =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00020FBC =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00020FBC =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00020FBC =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00020FBC =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00020FBC =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00020FBC =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00020FBC =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00020FBC =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00020FBC =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00020FBC =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020FBC =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020FBC                            
00021000                            			dcb.b	$300,$FF
00021300                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021770                            			even
00021770                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002186C                            			even
0002186C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002194C                            		even
0002194C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022DB8                            		even
00022DB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024852                            		even
00024852                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024886                            		even
00024886                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
00024AB6                            		even		
00024AB6                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024B74                            		even
00024B74                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
0002501C                            		even
0002501C                            
0002501C                            Map_Sonic:	include	"_maps\Sonic.asm"
0002501C                            ; --------------------------------------------------------------------------------
0002501C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002501C                            ; --------------------------------------------------------------------------------
0002501C                            
0002501C                            SME_Lx_Kl:	
0002501C 0000 0000                  		dc.w SME_Lx_Kl_142-SME_Lx_Kl, SME_Lx_Kl_143-SME_Lx_Kl	
00025020 0000 0000                  		dc.w SME_Lx_Kl_158-SME_Lx_Kl, SME_Lx_Kl_186-SME_Lx_Kl	
00025024 0000 0000                  		dc.w SME_Lx_Kl_1B9-SME_Lx_Kl, SME_Lx_Kl_1CE-SME_Lx_Kl	
00025028 0000 0000                  		dc.w SME_Lx_Kl_1DE-SME_Lx_Kl, SME_Lx_Kl_1EE-SME_Lx_Kl	
0002502C 0000 0000                  		dc.w SME_Lx_Kl_203-SME_Lx_Kl, SME_Lx_Kl_20E-SME_Lx_Kl	
00025030 0000 0000                  		dc.w SME_Lx_Kl_21E-SME_Lx_Kl, SME_Lx_Kl_22E-SME_Lx_Kl	
00025034 0000 0000                  		dc.w SME_Lx_Kl_23E-SME_Lx_Kl, SME_Lx_Kl_253-SME_Lx_Kl	
00025038 0000 0000                  		dc.w SME_Lx_Kl_263-SME_Lx_Kl, SME_Lx_Kl_287-SME_Lx_Kl	
0002503C 0000 0000                  		dc.w SME_Lx_Kl_2A1-SME_Lx_Kl, SME_Lx_Kl_2AC-SME_Lx_Kl	
00025040 0000 0000                  		dc.w SME_Lx_Kl_2BC-SME_Lx_Kl, SME_Lx_Kl_2D1-SME_Lx_Kl	
00025044 0000 0000                  		dc.w SME_Lx_Kl_2DC-SME_Lx_Kl, SME_Lx_Kl_2EC-SME_Lx_Kl	
00025048 0000 0000                  		dc.w SME_Lx_Kl_306-SME_Lx_Kl, SME_Lx_Kl_320-SME_Lx_Kl	
0002504C 0000 0000                  		dc.w SME_Lx_Kl_33F-SME_Lx_Kl, SME_Lx_Kl_354-SME_Lx_Kl	
00025050 0000 0000                  		dc.w SME_Lx_Kl_364-SME_Lx_Kl, SME_Lx_Kl_37E-SME_Lx_Kl	
00025054 0000 0000                  		dc.w SME_Lx_Kl_393-SME_Lx_Kl, SME_Lx_Kl_3A3-SME_Lx_Kl	
00025058 0000 0000                  		dc.w SME_Lx_Kl_3BD-SME_Lx_Kl, SME_Lx_Kl_3D2-SME_Lx_Kl	
0002505C 0000 0000                  		dc.w SME_Lx_Kl_3DD-SME_Lx_Kl, SME_Lx_Kl_3E8-SME_Lx_Kl	
00025060 0000 0000                  		dc.w SME_Lx_Kl_402-SME_Lx_Kl, SME_Lx_Kl_417-SME_Lx_Kl	
00025064 0000 0000                  		dc.w SME_Lx_Kl_422-SME_Lx_Kl, SME_Lx_Kl_432-SME_Lx_Kl	
00025068 0000 0000                  		dc.w SME_Lx_Kl_442-SME_Lx_Kl, SME_Lx_Kl_461-SME_Lx_Kl	
0002506C 0000 0000                  		dc.w SME_Lx_Kl_480-SME_Lx_Kl, SME_Lx_Kl_495-SME_Lx_Kl	
00025070 0000 0000                  		dc.w SME_Lx_Kl_4A5-SME_Lx_Kl, SME_Lx_Kl_4BF-SME_Lx_Kl	
00025074 0000 0000                  		dc.w SME_Lx_Kl_4D4-SME_Lx_Kl, SME_Lx_Kl_4E4-SME_Lx_Kl	
00025078 0000 0000                  		dc.w SME_Lx_Kl_4FE-SME_Lx_Kl, SME_Lx_Kl_509-SME_Lx_Kl	
0002507C 0000 0000                  		dc.w SME_Lx_Kl_514-SME_Lx_Kl, SME_Lx_Kl_51F-SME_Lx_Kl	
00025080 0000 0000                  		dc.w SME_Lx_Kl_52A-SME_Lx_Kl, SME_Lx_Kl_535-SME_Lx_Kl	
00025084 0000 0000                  		dc.w SME_Lx_Kl_540-SME_Lx_Kl, SME_Lx_Kl_54B-SME_Lx_Kl	
00025088 0000 0000                  		dc.w SME_Lx_Kl_556-SME_Lx_Kl, SME_Lx_Kl_56B-SME_Lx_Kl	
0002508C 0000 0000                  		dc.w SME_Lx_Kl_57B-SME_Lx_Kl, SME_Lx_Kl_58B-SME_Lx_Kl	
00025090 0000 0000                  		dc.w SME_Lx_Kl_59B-SME_Lx_Kl, SME_Lx_Kl_5B0-SME_Lx_Kl	
00025094 0000 0000                  		dc.w SME_Lx_Kl_5C0-SME_Lx_Kl, SME_Lx_Kl_5D0-SME_Lx_Kl	
00025098 0000 0000                  		dc.w SME_Lx_Kl_5E0-SME_Lx_Kl, SME_Lx_Kl_5EB-SME_Lx_Kl	
0002509C 0000 0000                  		dc.w SME_Lx_Kl_5F6-SME_Lx_Kl, SME_Lx_Kl_601-SME_Lx_Kl	
000250A0 0000 0000                  		dc.w SME_Lx_Kl_60C-SME_Lx_Kl, SME_Lx_Kl_617-SME_Lx_Kl	
000250A4 0000 0000                  		dc.w SME_Lx_Kl_622-SME_Lx_Kl, SME_Lx_Kl_62D-SME_Lx_Kl	
000250A8 0000 0000                  		dc.w SME_Lx_Kl_638-SME_Lx_Kl, SME_Lx_Kl_64D-SME_Lx_Kl	
000250AC 0000 0000                  		dc.w SME_Lx_Kl_65D-SME_Lx_Kl, SME_Lx_Kl_668-SME_Lx_Kl	
000250B0 0000 0000                  		dc.w SME_Lx_Kl_678-SME_Lx_Kl, SME_Lx_Kl_68D-SME_Lx_Kl	
000250B4 0000 0000                  		dc.w SME_Lx_Kl_69D-SME_Lx_Kl, SME_Lx_Kl_6A8-SME_Lx_Kl	
000250B8 0000 0000                  		dc.w SME_Lx_Kl_6B8-SME_Lx_Kl, SME_Lx_Kl_6C8-SME_Lx_Kl	
000250BC 0000 0000                  		dc.w SME_Lx_Kl_6D8-SME_Lx_Kl, SME_Lx_Kl_706-SME_Lx_Kl	
000250C0 0000 0000                  		dc.w SME_Lx_Kl_734-SME_Lx_Kl, SME_Lx_Kl_744-SME_Lx_Kl	
000250C4 0000 0000                  		dc.w SME_Lx_Kl_754-SME_Lx_Kl, SME_Lx_Kl_764-SME_Lx_Kl	
000250C8 0000 0000                  		dc.w SME_Lx_Kl_77E-SME_Lx_Kl, SME_Lx_Kl_78E-SME_Lx_Kl	
000250CC 0000 0000                  		dc.w SME_Lx_Kl_79E-SME_Lx_Kl, SME_Lx_Kl_7B8-SME_Lx_Kl	
000250D0 0000 0000                  		dc.w SME_Lx_Kl_7D2-SME_Lx_Kl, SME_Lx_Kl_7E7-SME_Lx_Kl	
000250D4 0000 0000                  		dc.w SME_Lx_Kl_7FC-SME_Lx_Kl, SME_Lx_Kl_811-SME_Lx_Kl	
000250D8 0000 0000                  		dc.w SME_Lx_Kl_826-SME_Lx_Kl, SME_Lx_Kl_82C-SME_Lx_Kl	
000250DC 0000 0000                  		dc.w SME_Lx_Kl_832-SME_Lx_Kl, SME_Lx_Kl_838-SME_Lx_Kl	
000250E0 0000 0000                  		dc.w SME_Lx_Kl_83E-SME_Lx_Kl, SME_Lx_Kl_844-SME_Lx_Kl	
000250E4 0000 0000                  		dc.w SME_Lx_Kl_84A-SME_Lx_Kl, SME_Lx_Kl_850-SME_Lx_Kl	
000250E8 0000 0000                  		dc.w SME_Lx_Kl_860-SME_Lx_Kl, SME_Lx_Kl_866-SME_Lx_Kl	
000250EC 0000 0000                  		dc.w SME_Lx_Kl_871-SME_Lx_Kl, SME_Lx_Kl_877-SME_Lx_Kl	
000250F0 0000 0000                  		dc.w SME_Lx_Kl_882-SME_Lx_Kl, SME_Lx_Kl_888-SME_Lx_Kl	
000250F4 0000 0000                  		dc.w SME_Lx_Kl_89D-SME_Lx_Kl, SME_Lx_Kl_8C1-SME_Lx_Kl	
000250F8 0000 0000                  		dc.w SME_Lx_Kl_8DB-SME_Lx_Kl, SME_Lx_Kl_8EB-SME_Lx_Kl	
000250FC 0000 0000                  		dc.w SME_Lx_Kl_8F6-SME_Lx_Kl, SME_Lx_Kl_90B-SME_Lx_Kl	
00025100 0000 0000                  		dc.w SME_Lx_Kl_920-SME_Lx_Kl, SME_Lx_Kl_935-SME_Lx_Kl	
00025104 0000 0000                  		dc.w SME_Lx_Kl_963-SME_Lx_Kl, SME_Lx_Kl_973-SME_Lx_Kl	
00025108 0000 0000                  		dc.w SME_Lx_Kl_983-SME_Lx_Kl, SME_Lx_Kl_98E-SME_Lx_Kl	
0002510C 0000 0000                  		dc.w SME_Lx_Kl_98F-SME_Lx_Kl, SME_Lx_Kl_9B8-SME_Lx_Kl	
00025110 0000 0000                  		dc.w SME_Lx_Kl_9DC-SME_Lx_Kl, SME_Lx_Kl_9F1-SME_Lx_Kl	
00025114 0000 0000                  		dc.w SME_Lx_Kl_A01-SME_Lx_Kl, SME_Lx_Kl_A11-SME_Lx_Kl	
00025118 0000 0000                  		dc.w SME_Lx_Kl_A21-SME_Lx_Kl, SME_Lx_Kl_A2C-SME_Lx_Kl	
0002511C 0000 0000                  		dc.w SME_Lx_Kl_A3C-SME_Lx_Kl, SME_Lx_Kl_A4C-SME_Lx_Kl	
00025120 0000 0000                  		dc.w SME_Lx_Kl_A5C-SME_Lx_Kl, SME_Lx_Kl_A6C-SME_Lx_Kl	
00025124 0000 0000                  		dc.w SME_Lx_Kl_A81-SME_Lx_Kl, SME_Lx_Kl_AAA-SME_Lx_Kl	
00025128 0000 0000                  		dc.w SME_Lx_Kl_ABF-SME_Lx_Kl, SME_Lx_Kl_AD4-SME_Lx_Kl	
0002512C 0000 0000                  		dc.w SME_Lx_Kl_AEE-SME_Lx_Kl, SME_Lx_Kl_B08-SME_Lx_Kl	
00025130 0000 0000                  		dc.w SME_Lx_Kl_B13-SME_Lx_Kl, SME_Lx_Kl_B2D-SME_Lx_Kl	
00025134 0000 0000                  		dc.w SME_Lx_Kl_B3D-SME_Lx_Kl, SME_Lx_Kl_B57-SME_Lx_Kl	
00025138 0000 0000                  		dc.w SME_Lx_Kl_B62-SME_Lx_Kl, SME_Lx_Kl_B72-SME_Lx_Kl	
0002513C 0000 0000                  		dc.w SME_Lx_Kl_B82-SME_Lx_Kl, SME_Lx_Kl_B92-SME_Lx_Kl	
00025140 0000 0000                  		dc.w SME_Lx_Kl_B9D-SME_Lx_Kl, SME_Lx_Kl_BAD-SME_Lx_Kl	
00025144 0000 0000                  		dc.w SME_Lx_Kl_BE5-SME_Lx_Kl, SME_Lx_Kl_C04-SME_Lx_Kl	
00025148 0000 0000                  		dc.w SME_Lx_Kl_C14-SME_Lx_Kl, SME_Lx_Kl_C38-SME_Lx_Kl	
0002514C 0000 0000                  		dc.w SME_Lx_Kl_C43-SME_Lx_Kl, SME_Lx_Kl_C58-SME_Lx_Kl	
00025150 0000 0000                  		dc.w SME_Lx_Kl_C68-SME_Lx_Kl, SME_Lx_Kl_C78-SME_Lx_Kl	
00025154 0000 0000                  		dc.w SME_Lx_Kl_C8D-SME_Lx_Kl, SME_Lx_Kl_C93-SME_Lx_Kl	
00025158 0000 0000                  		dc.w SME_Lx_Kl_C99-SME_Lx_Kl, SME_Lx_Kl_C9F-SME_Lx_Kl	
0002515C 0000                       		dc.w SME_Lx_Kl_CA5-SME_Lx_Kl	
0002515E 00                         SME_Lx_Kl_142:	dc.b 0	
0002515F 04                         SME_Lx_Kl_143:	dc.b 4	
00025160 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025165 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
0002516A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
0002516F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025174 09                         SME_Lx_Kl_158:	dc.b 9	
00025175 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0002517A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
0002517F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025184 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025189 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
0002518E F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025193 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00025198 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
0002519D F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
000251A2 0A                         SME_Lx_Kl_186:	dc.b $A	
000251A3 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000251A8 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
000251AD 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
000251B2 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
000251B7 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
000251BC F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000251C1 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
000251C6 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
000251CB F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
000251D0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
000251D5 04                         SME_Lx_Kl_1B9:	dc.b 4	
000251D6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
000251DB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000251E0 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
000251E5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
000251EA 03                         SME_Lx_Kl_1CE:	dc.b 3	
000251EB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000251F0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000251F5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000251FA 03                         SME_Lx_Kl_1DE:	dc.b 3	
000251FB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025200 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025205 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002520A 04                         SME_Lx_Kl_1EE:	dc.b 4	
0002520B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025210 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025215 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
0002521A 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
0002521F 02                         SME_Lx_Kl_203:	dc.b 2	
00025220 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025225 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
0002522A 03                         SME_Lx_Kl_20E:	dc.b 3	
0002522B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025230 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025235 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002523A 03                         SME_Lx_Kl_21E:	dc.b 3	
0002523B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025240 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025245 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002524A 03                         SME_Lx_Kl_22E:	dc.b 3	
0002524B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025250 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025255 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
0002525A 04                         SME_Lx_Kl_23E:	dc.b 4	
0002525B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025260 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025265 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
0002526A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
0002526F 03                         SME_Lx_Kl_253:	dc.b 3	
00025270 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025275 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
0002527A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002527F 07                         SME_Lx_Kl_263:	dc.b 7	
00025280 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025285 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
0002528A 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002528F F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025294 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025299 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
0002529E F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
000252A3 05                         SME_Lx_Kl_287:	dc.b 5	
000252A4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
000252A9 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
000252AE EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
000252B3 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
000252B8 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
000252BD 02                         SME_Lx_Kl_2A1:	dc.b 2	
000252BE FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
000252C3 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
000252C8 03                         SME_Lx_Kl_2AC:	dc.b 3	
000252C9 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
000252CE EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
000252D3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
000252D8 04                         SME_Lx_Kl_2BC:	dc.b 4	
000252D9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
000252DE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
000252E3 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
000252E8 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
000252ED 02                         SME_Lx_Kl_2D1:	dc.b 2	
000252EE EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
000252F3 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
000252F8 03                         SME_Lx_Kl_2DC:	dc.b 3	
000252F9 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
000252FE FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025303 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025308 05                         SME_Lx_Kl_2EC:	dc.b 5	
00025309 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
0002530E 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00025313 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
00025318 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
0002531D ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00025322 05                         SME_Lx_Kl_306:	dc.b 5	
00025323 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025328 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
0002532D FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025332 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00025337 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
0002533C 06                         SME_Lx_Kl_320:	dc.b 6	
0002533D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025342 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00025347 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
0002534C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025351 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00025356 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002535B 04                         SME_Lx_Kl_33F:	dc.b 4	
0002535C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025361 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025366 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002536B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025370 03                         SME_Lx_Kl_354:	dc.b 3	
00025371 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025376 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002537B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00025380 05                         SME_Lx_Kl_364:	dc.b 5	
00025381 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025386 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002538B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00025390 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025395 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002539A 04                         SME_Lx_Kl_37E:	dc.b 4	
0002539B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000253A0 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000253A5 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000253AA 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000253AF 03                         SME_Lx_Kl_393:	dc.b 3	
000253B0 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000253B5 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000253BA 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000253BF 05                         SME_Lx_Kl_3A3:	dc.b 5	
000253C0 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000253C5 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000253CA FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000253CF FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000253D4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000253D9 04                         SME_Lx_Kl_3BD:	dc.b 4	
000253DA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000253DF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000253E4 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000253E9 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000253EE 02                         SME_Lx_Kl_3D2:	dc.b 2	
000253EF F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000253F4 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000253F9 02                         SME_Lx_Kl_3DD:	dc.b 2	
000253FA F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000253FF F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
00025404 05                         SME_Lx_Kl_3E8:	dc.b 5	
00025405 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
0002540A F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
0002540F F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00025414 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
00025419 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
0002541E 04                         SME_Lx_Kl_402:	dc.b 4	
0002541F F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00025424 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
00025429 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
0002542E 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025433 02                         SME_Lx_Kl_417:	dc.b 2	
00025434 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025439 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002543E 03                         SME_Lx_Kl_422:	dc.b 3	
0002543F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025444 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025449 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002544E 03                         SME_Lx_Kl_432:	dc.b 3	
0002544F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025454 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025459 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002545E 06                         SME_Lx_Kl_442:	dc.b 6	
0002545F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025464 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025469 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002546E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025473 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025478 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002547D 06                         SME_Lx_Kl_461:	dc.b 6	
0002547E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025483 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025488 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002548D F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025492 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025497 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002549C 04                         SME_Lx_Kl_480:	dc.b 4	
0002549D FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000254A2 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
000254A7 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000254AC 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000254B1 03                         SME_Lx_Kl_495:	dc.b 3	
000254B2 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000254B7 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000254BC 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000254C1 05                         SME_Lx_Kl_4A5:	dc.b 5	
000254C2 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000254C7 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000254CC F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000254D1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000254D6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000254DB 04                         SME_Lx_Kl_4BF:	dc.b 4	
000254DC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000254E1 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000254E6 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000254EB 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000254F0 03                         SME_Lx_Kl_4D4:	dc.b 3	
000254F1 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000254F6 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000254FB EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00025500 05                         SME_Lx_Kl_4E4:	dc.b 5	
00025501 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025506 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
0002550B F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00025510 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025515 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002551A 02                         SME_Lx_Kl_4FE:	dc.b 2	
0002551B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025520 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025525 02                         SME_Lx_Kl_509:	dc.b 2	
00025526 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002552B EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025530 02                         SME_Lx_Kl_514:	dc.b 2	
00025531 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025536 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002553B 02                         SME_Lx_Kl_51F:	dc.b 2	
0002553C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025541 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025546 02                         SME_Lx_Kl_52A:	dc.b 2	
00025547 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002554C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025551 02                         SME_Lx_Kl_535:	dc.b 2	
00025552 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025557 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002555C 02                         SME_Lx_Kl_540:	dc.b 2	
0002555D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025562 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025567 02                         SME_Lx_Kl_54B:	dc.b 2	
00025568 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002556D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025572 04                         SME_Lx_Kl_556:	dc.b 4	
00025573 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025578 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002557D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025582 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025587 03                         SME_Lx_Kl_56B:	dc.b 3	
00025588 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002558D EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025592 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025597 03                         SME_Lx_Kl_57B:	dc.b 3	
00025598 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002559D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255A2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255A7 03                         SME_Lx_Kl_58B:	dc.b 3	
000255A8 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000255AD EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000255B2 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255B7 04                         SME_Lx_Kl_59B:	dc.b 4	
000255B8 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000255BD EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255C7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255CC 03                         SME_Lx_Kl_5B0:	dc.b 3	
000255CD FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000255D2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000255D7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255DC 03                         SME_Lx_Kl_5C0:	dc.b 3	
000255DD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000255E2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255E7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255EC 03                         SME_Lx_Kl_5D0:	dc.b 3	
000255ED EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000255F2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255F7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255FC 02                         SME_Lx_Kl_5E0:	dc.b 2	
000255FD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025602 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025607 02                         SME_Lx_Kl_5EB:	dc.b 2	
00025608 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002560D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025612 02                         SME_Lx_Kl_5F6:	dc.b 2	
00025613 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025618 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002561D 02                         SME_Lx_Kl_601:	dc.b 2	
0002561E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025623 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025628 02                         SME_Lx_Kl_60C:	dc.b 2	
00025629 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002562E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025633 02                         SME_Lx_Kl_617:	dc.b 2	
00025634 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025639 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002563E 02                         SME_Lx_Kl_622:	dc.b 2	
0002563F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025644 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025649 02                         SME_Lx_Kl_62D:	dc.b 2	
0002564A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002564F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025654 04                         SME_Lx_Kl_638:	dc.b 4	
00025655 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002565A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002565F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025664 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025669 03                         SME_Lx_Kl_64D:	dc.b 3	
0002566A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002566F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025674 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025679 02                         SME_Lx_Kl_65D:	dc.b 2	
0002567A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002567F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025684 03                         SME_Lx_Kl_668:	dc.b 3	
00025685 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002568A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002568F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025694 04                         SME_Lx_Kl_678:	dc.b 4	
00025695 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002569A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002569F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000256A4 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000256A9 03                         SME_Lx_Kl_68D:	dc.b 3	
000256AA EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000256AF 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000256B4 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000256B9 02                         SME_Lx_Kl_69D:	dc.b 2	
000256BA F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000256BF EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000256C4 03                         SME_Lx_Kl_6A8:	dc.b 3	
000256C5 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000256CA 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000256CF F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000256D4 03                         SME_Lx_Kl_6B8:	dc.b 3	
000256D5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000256DA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000256DF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000256E4 03                         SME_Lx_Kl_6C8:	dc.b 3	
000256E5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000256EA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000256EF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000256F4 09                         SME_Lx_Kl_6D8:	dc.b 9	
000256F5 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000256FA F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000256FF 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
00025704 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025709 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002570E 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025713 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025718 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002571D F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025722 09                         SME_Lx_Kl_706:	dc.b 9	
00025723 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
00025728 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
0002572D 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025732 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025737 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002573C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025741 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025746 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002574B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025750 03                         SME_Lx_Kl_734:	dc.b 3	
00025751 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025756 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002575B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025760 03                         SME_Lx_Kl_744:	dc.b 3	
00025761 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025766 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002576B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025770 03                         SME_Lx_Kl_754:	dc.b 3	
00025771 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025776 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002577B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025780 05                         SME_Lx_Kl_764:	dc.b 5	
00025781 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025786 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002578B F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025790 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025795 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002579A 03                         SME_Lx_Kl_77E:	dc.b 3	
0002579B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000257A0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000257A5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000257AA 03                         SME_Lx_Kl_78E:	dc.b 3	
000257AB ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000257B0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000257B5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000257BA 05                         SME_Lx_Kl_79E:	dc.b 5	
000257BB 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000257C0 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000257C5 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000257CA ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000257CF ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000257D4 05                         SME_Lx_Kl_7B8:	dc.b 5	
000257D5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000257DA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000257DF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000257E4 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000257E9 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000257EE 04                         SME_Lx_Kl_7D2:	dc.b 4	
000257EF F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000257F4 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000257F9 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000257FE F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
00025803 04                         SME_Lx_Kl_7E7:	dc.b 4	
00025804 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
00025809 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
0002580E F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00025813 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
00025818 04                         SME_Lx_Kl_7FC:	dc.b 4	
00025819 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
0002581E F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00025823 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
00025828 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
0002582D 04                         SME_Lx_Kl_811:	dc.b 4	
0002582E E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025833 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025838 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
0002583D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025842 01                         SME_Lx_Kl_826:	dc.b 1	
00025843 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025848 01                         SME_Lx_Kl_82C:	dc.b 1	
00025849 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002584E 01                         SME_Lx_Kl_832:	dc.b 1	
0002584F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025854 01                         SME_Lx_Kl_838:	dc.b 1	
00025855 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002585A 01                         SME_Lx_Kl_83E:	dc.b 1	
0002585B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025860 01                         SME_Lx_Kl_844:	dc.b 1	
00025861 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025866 01                         SME_Lx_Kl_84A:	dc.b 1	
00025867 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002586C 03                         SME_Lx_Kl_850:	dc.b 3	
0002586D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025872 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025877 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
0002587C 01                         SME_Lx_Kl_860:	dc.b 1	
0002587D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025882 02                         SME_Lx_Kl_866:	dc.b 2	
00025883 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025888 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
0002588D 01                         SME_Lx_Kl_871:	dc.b 1	
0002588E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025893 02                         SME_Lx_Kl_877:	dc.b 2	
00025894 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025899 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
0002589E 01                         SME_Lx_Kl_882:	dc.b 1	
0002589F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258A4 04                         SME_Lx_Kl_888:	dc.b 4	
000258A5 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000258AA FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000258AF F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000258B4 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000258B9 07                         SME_Lx_Kl_89D:	dc.b 7	
000258BA ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000258BF FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000258C4 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000258C9 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000258CE F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000258D3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000258D8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000258DD 05                         SME_Lx_Kl_8C1:	dc.b 5	
000258DE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000258E3 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000258E8 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000258ED F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000258F2 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000258F7 03                         SME_Lx_Kl_8DB:	dc.b 3	
000258F8 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000258FD ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
00025902 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
00025907 02                         SME_Lx_Kl_8EB:	dc.b 2	
00025908 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
0002590D EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
00025912 04                         SME_Lx_Kl_8F6:	dc.b 4	
00025913 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
00025918 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
0002591D F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00025922 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
00025927 04                         SME_Lx_Kl_90B:	dc.b 4	
00025928 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
0002592D FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025932 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025937 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002593C 04                         SME_Lx_Kl_920:	dc.b 4	
0002593D EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025942 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025947 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002594C EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025951 09                         SME_Lx_Kl_935:	dc.b 9	
00025952 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025957 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002595C F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025961 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025966 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002596B F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025970 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025975 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002597A FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
0002597F 03                         SME_Lx_Kl_963:	dc.b 3	
00025980 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025985 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002598A 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
0002598F 03                         SME_Lx_Kl_973:	dc.b 3	
00025990 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025995 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002599A EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
0002599F 02                         SME_Lx_Kl_983:	dc.b 2	
000259A0 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
000259A5 EC0C 0010 E8               		dc.b $EC, $C, 0, $10, $E8	
000259AA 00                         SME_Lx_Kl_98E:	dc.b 0	
000259AB 08                         SME_Lx_Kl_98F:	dc.b 8	
000259AC E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000259B1 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000259B6 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000259BB F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000259C0 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000259C5 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000259CA 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
000259CF 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000259D4 07                         SME_Lx_Kl_9B8:	dc.b 7	
000259D5 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000259DA E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000259DF F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000259E4 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000259E9 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000259EE 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000259F3 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
000259F8 04                         SME_Lx_Kl_9DC:	dc.b 4	
000259F9 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000259FE F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
00025A03 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00025A08 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
00025A0D 03                         SME_Lx_Kl_9F1:	dc.b 3	
00025A0E F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00025A13 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00025A18 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00025A1D 03                         SME_Lx_Kl_A01:	dc.b 3	
00025A1E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A23 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025A28 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025A2D 03                         SME_Lx_Kl_A11:	dc.b 3	
00025A2E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A33 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025A38 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00025A3D 02                         SME_Lx_Kl_A21:	dc.b 2	
00025A3E F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025A43 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025A48 03                         SME_Lx_Kl_A2C:	dc.b 3	
00025A49 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025A4E 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025A53 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025A58 03                         SME_Lx_Kl_A3C:	dc.b 3	
00025A59 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025A5E FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025A63 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025A68 03                         SME_Lx_Kl_A4C:	dc.b 3	
00025A69 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00025A6E FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025A73 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025A78 03                         SME_Lx_Kl_A5C:	dc.b 3	
00025A79 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A7E FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025A83 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025A88 04                         SME_Lx_Kl_A6C:	dc.b 4	
00025A89 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00025A8E 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025A93 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025A98 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025A9D 08                         SME_Lx_Kl_A81:	dc.b 8	
00025A9E E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025AA3 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025AA8 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
00025AAD 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025AB2 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025AB7 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
00025ABC 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025AC1 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025AC6 04                         SME_Lx_Kl_AAA:	dc.b 4	
00025AC7 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025ACC 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025AD1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025AD6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025ADB 04                         SME_Lx_Kl_ABF:	dc.b 4	
00025ADC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025AE1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025AE6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025AEB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025AF0 05                         SME_Lx_Kl_AD4:	dc.b 5	
00025AF1 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025AF6 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00025AFB 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025B00 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025B05 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025B0A 05                         SME_Lx_Kl_AEE:	dc.b 5	
00025B0B E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025B10 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00025B15 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025B1A 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025B1F 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025B24 02                         SME_Lx_Kl_B08:	dc.b 2	
00025B25 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025B2A 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025B2F 05                         SME_Lx_Kl_B13:	dc.b 5	
00025B30 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025B35 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00025B3A F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
00025B3F ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025B44 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025B49 03                         SME_Lx_Kl_B2D:	dc.b 3	
00025B4A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025B4F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025B54 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025B59 05                         SME_Lx_Kl_B3D:	dc.b 5	
00025B5A 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
00025B5F F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025B64 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025B69 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00025B6E ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025B73 02                         SME_Lx_Kl_B57:	dc.b 2	
00025B74 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025B79 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025B7E 03                         SME_Lx_Kl_B62:	dc.b 3	
00025B7F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025B84 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025B89 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025B8E 03                         SME_Lx_Kl_B72:	dc.b 3	
00025B8F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025B94 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025B99 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025B9E 03                         SME_Lx_Kl_B82:	dc.b 3	
00025B9F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025BA4 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025BA9 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025BAE 02                         SME_Lx_Kl_B92:	dc.b 2	
00025BAF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025BB4 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025BB9 03                         SME_Lx_Kl_B9D:	dc.b 3	
00025BBA E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
00025BBF E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025BC4 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025BC9 0B                         SME_Lx_Kl_BAD:	dc.b $B	
00025BCA E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025BCF E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025BD4 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
00025BD9 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
00025BDE 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
00025BE3 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
00025BE8 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
00025BED F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
00025BF2 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
00025BF7 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
00025BFC 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00025C01 06                         SME_Lx_Kl_BE5:	dc.b 6	
00025C02 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025C07 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025C0C F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00025C11 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
00025C16 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00025C1B 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00025C20 03                         SME_Lx_Kl_C04:	dc.b 3	
00025C21 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00025C26 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00025C2B 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025C30 07                         SME_Lx_Kl_C14:	dc.b 7	
00025C31 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025C36 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025C3B F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025C40 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025C45 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025C4A F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025C4F F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025C54 02                         SME_Lx_Kl_C38:	dc.b 2	
00025C55 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025C5A F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025C5F 04                         SME_Lx_Kl_C43:	dc.b 4	
00025C60 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025C65 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025C6A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025C6F 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025C74 03                         SME_Lx_Kl_C58:	dc.b 3	
00025C75 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025C7A F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025C7F F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025C84 03                         SME_Lx_Kl_C68:	dc.b 3	
00025C85 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025C8A F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025C8F F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025C94 04                         SME_Lx_Kl_C78:	dc.b 4	
00025C95 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025C9A F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025C9F F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025CA4 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025CA9 01                         SME_Lx_Kl_C8D:	dc.b 1	
00025CAA F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CAF 01                         SME_Lx_Kl_C93:	dc.b 1	
00025CB0 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CB5 01                         SME_Lx_Kl_C99:	dc.b 1	
00025CB6 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CBB 01                         SME_Lx_Kl_C9F:	dc.b 1	
00025CBC F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CC1 02                         SME_Lx_Kl_CA5:	dc.b 2	
00025CC2 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025CC7 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025CCC                            		even
00025CCC                            		even
00025CCC                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00025CCC                            ; --------------------------------------------------------------------------------
00025CCC                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00025CCC                            
00025CCC                            SME_vJmm3:	
00025CCC 0000 0000                  		dc.w SME_vJmm3_142-SME_vJmm3, SME_vJmm3_143-SME_vJmm3	
00025CD0 0000 0000                  		dc.w SME_vJmm3_14C-SME_vJmm3, SME_vJmm3_15F-SME_vJmm3	
00025CD4 0000 0000                  		dc.w SME_vJmm3_174-SME_vJmm3, SME_vJmm3_17D-SME_vJmm3	
00025CD8 0000 0000                  		dc.w SME_vJmm3_184-SME_vJmm3, SME_vJmm3_18B-SME_vJmm3	
00025CDC 0000 0000                  		dc.w SME_vJmm3_194-SME_vJmm3, SME_vJmm3_199-SME_vJmm3	
00025CE0 0000 0000                  		dc.w SME_vJmm3_1A0-SME_vJmm3, SME_vJmm3_1A7-SME_vJmm3	
00025CE4 0000 0000                  		dc.w SME_vJmm3_1AE-SME_vJmm3, SME_vJmm3_1B7-SME_vJmm3	
00025CE8 0000 0000                  		dc.w SME_vJmm3_1BE-SME_vJmm3, SME_vJmm3_1CD-SME_vJmm3	
00025CEC 0000 0000                  		dc.w SME_vJmm3_1D8-SME_vJmm3, SME_vJmm3_1DF-SME_vJmm3	
00025CF0 0000 0000                  		dc.w SME_vJmm3_1E6-SME_vJmm3, SME_vJmm3_1EF-SME_vJmm3	
00025CF4 0000 0000                  		dc.w SME_vJmm3_1F4-SME_vJmm3, SME_vJmm3_1FB-SME_vJmm3	
00025CF8 0000 0000                  		dc.w SME_vJmm3_206-SME_vJmm3, SME_vJmm3_211-SME_vJmm3	
00025CFC 0000 0000                  		dc.w SME_vJmm3_21E-SME_vJmm3, SME_vJmm3_227-SME_vJmm3	
00025D00 0000 0000                  		dc.w SME_vJmm3_22E-SME_vJmm3, SME_vJmm3_239-SME_vJmm3	
00025D04 0000 0000                  		dc.w SME_vJmm3_242-SME_vJmm3, SME_vJmm3_249-SME_vJmm3	
00025D08 0000 0000                  		dc.w SME_vJmm3_254-SME_vJmm3, SME_vJmm3_25D-SME_vJmm3	
00025D0C 0000 0000                  		dc.w SME_vJmm3_262-SME_vJmm3, SME_vJmm3_267-SME_vJmm3	
00025D10 0000 0000                  		dc.w SME_vJmm3_272-SME_vJmm3, SME_vJmm3_27B-SME_vJmm3	
00025D14 0000 0000                  		dc.w SME_vJmm3_280-SME_vJmm3, SME_vJmm3_287-SME_vJmm3	
00025D18 0000 0000                  		dc.w SME_vJmm3_28E-SME_vJmm3, SME_vJmm3_29B-SME_vJmm3	
00025D1C 0000 0000                  		dc.w SME_vJmm3_2A8-SME_vJmm3, SME_vJmm3_2B1-SME_vJmm3	
00025D20 0000 0000                  		dc.w SME_vJmm3_2B8-SME_vJmm3, SME_vJmm3_2C3-SME_vJmm3	
00025D24 0000 0000                  		dc.w SME_vJmm3_2CC-SME_vJmm3, SME_vJmm3_2D3-SME_vJmm3	
00025D28 0000 0000                  		dc.w SME_vJmm3_2DE-SME_vJmm3, SME_vJmm3_2E3-SME_vJmm3	
00025D2C 0000 0000                  		dc.w SME_vJmm3_2E8-SME_vJmm3, SME_vJmm3_2ED-SME_vJmm3	
00025D30 0000 0000                  		dc.w SME_vJmm3_2F2-SME_vJmm3, SME_vJmm3_2F7-SME_vJmm3	
00025D34 0000 0000                  		dc.w SME_vJmm3_2FC-SME_vJmm3, SME_vJmm3_301-SME_vJmm3	
00025D38 0000 0000                  		dc.w SME_vJmm3_306-SME_vJmm3, SME_vJmm3_30F-SME_vJmm3	
00025D3C 0000 0000                  		dc.w SME_vJmm3_316-SME_vJmm3, SME_vJmm3_31D-SME_vJmm3	
00025D40 0000 0000                  		dc.w SME_vJmm3_324-SME_vJmm3, SME_vJmm3_32D-SME_vJmm3	
00025D44 0000 0000                  		dc.w SME_vJmm3_334-SME_vJmm3, SME_vJmm3_33B-SME_vJmm3	
00025D48 0000 0000                  		dc.w SME_vJmm3_342-SME_vJmm3, SME_vJmm3_347-SME_vJmm3	
00025D4C 0000 0000                  		dc.w SME_vJmm3_34C-SME_vJmm3, SME_vJmm3_351-SME_vJmm3	
00025D50 0000 0000                  		dc.w SME_vJmm3_356-SME_vJmm3, SME_vJmm3_35B-SME_vJmm3	
00025D54 0000 0000                  		dc.w SME_vJmm3_360-SME_vJmm3, SME_vJmm3_365-SME_vJmm3	
00025D58 0000 0000                  		dc.w SME_vJmm3_36A-SME_vJmm3, SME_vJmm3_373-SME_vJmm3	
00025D5C 0000 0000                  		dc.w SME_vJmm3_37A-SME_vJmm3, SME_vJmm3_37F-SME_vJmm3	
00025D60 0000 0000                  		dc.w SME_vJmm3_386-SME_vJmm3, SME_vJmm3_38F-SME_vJmm3	
00025D64 0000 0000                  		dc.w SME_vJmm3_396-SME_vJmm3, SME_vJmm3_39B-SME_vJmm3	
00025D68 0000 0000                  		dc.w SME_vJmm3_3A2-SME_vJmm3, SME_vJmm3_3A9-SME_vJmm3	
00025D6C 0000 0000                  		dc.w SME_vJmm3_3B0-SME_vJmm3, SME_vJmm3_3C3-SME_vJmm3	
00025D70 0000 0000                  		dc.w SME_vJmm3_3D6-SME_vJmm3, SME_vJmm3_3DD-SME_vJmm3	
00025D74 0000 0000                  		dc.w SME_vJmm3_3E4-SME_vJmm3, SME_vJmm3_3EB-SME_vJmm3	
00025D78 0000 0000                  		dc.w SME_vJmm3_3F6-SME_vJmm3, SME_vJmm3_3FD-SME_vJmm3	
00025D7C 0000 0000                  		dc.w SME_vJmm3_404-SME_vJmm3, SME_vJmm3_40F-SME_vJmm3	
00025D80 0000 0000                  		dc.w SME_vJmm3_41A-SME_vJmm3, SME_vJmm3_423-SME_vJmm3	
00025D84 0000 0000                  		dc.w SME_vJmm3_42C-SME_vJmm3, SME_vJmm3_435-SME_vJmm3	
00025D88 0000 0000                  		dc.w SME_vJmm3_43E-SME_vJmm3, SME_vJmm3_441-SME_vJmm3	
00025D8C 0000 0000                  		dc.w SME_vJmm3_444-SME_vJmm3, SME_vJmm3_447-SME_vJmm3	
00025D90 0000 0000                  		dc.w SME_vJmm3_44A-SME_vJmm3, SME_vJmm3_44D-SME_vJmm3	
00025D94 0000 0000                  		dc.w SME_vJmm3_450-SME_vJmm3, SME_vJmm3_453-SME_vJmm3	
00025D98 0000 0000                  		dc.w SME_vJmm3_45A-SME_vJmm3, SME_vJmm3_45D-SME_vJmm3	
00025D9C 0000 0000                  		dc.w SME_vJmm3_462-SME_vJmm3, SME_vJmm3_465-SME_vJmm3	
00025DA0 0000 0000                  		dc.w SME_vJmm3_46A-SME_vJmm3, SME_vJmm3_46D-SME_vJmm3	
00025DA4 0000 0000                  		dc.w SME_vJmm3_476-SME_vJmm3, SME_vJmm3_485-SME_vJmm3	
00025DA8 0000 0000                  		dc.w SME_vJmm3_490-SME_vJmm3, SME_vJmm3_497-SME_vJmm3	
00025DAC 0000 0000                  		dc.w SME_vJmm3_49C-SME_vJmm3, SME_vJmm3_4A5-SME_vJmm3	
00025DB0 0000 0000                  		dc.w SME_vJmm3_4AE-SME_vJmm3, SME_vJmm3_4B7-SME_vJmm3	
00025DB4 0000 0000                  		dc.w SME_vJmm3_4CA-SME_vJmm3, SME_vJmm3_4D1-SME_vJmm3	
00025DB8 0000 0000                  		dc.w SME_vJmm3_4D8-SME_vJmm3, SME_vJmm3_4DD-SME_vJmm3	
00025DBC 0000 0000                  		dc.w SME_vJmm3_4DE-SME_vJmm3, SME_vJmm3_4EF-SME_vJmm3	
00025DC0 0000 0000                  		dc.w SME_vJmm3_4FE-SME_vJmm3, SME_vJmm3_507-SME_vJmm3	
00025DC4 0000 0000                  		dc.w SME_vJmm3_50E-SME_vJmm3, SME_vJmm3_515-SME_vJmm3	
00025DC8 0000 0000                  		dc.w SME_vJmm3_51C-SME_vJmm3, SME_vJmm3_51F-SME_vJmm3	
00025DCC 0000 0000                  		dc.w SME_vJmm3_526-SME_vJmm3, SME_vJmm3_52D-SME_vJmm3	
00025DD0 0000 0000                  		dc.w SME_vJmm3_534-SME_vJmm3, SME_vJmm3_53B-SME_vJmm3	
00025DD4 0000 0000                  		dc.w SME_vJmm3_544-SME_vJmm3, SME_vJmm3_555-SME_vJmm3	
00025DD8 0000 0000                  		dc.w SME_vJmm3_55E-SME_vJmm3, SME_vJmm3_567-SME_vJmm3	
00025DDC 0000 0000                  		dc.w SME_vJmm3_572-SME_vJmm3, SME_vJmm3_57D-SME_vJmm3	
00025DE0 0000 0000                  		dc.w SME_vJmm3_582-SME_vJmm3, SME_vJmm3_58D-SME_vJmm3	
00025DE4 0000 0000                  		dc.w SME_vJmm3_594-SME_vJmm3, SME_vJmm3_59F-SME_vJmm3	
00025DE8 0000 0000                  		dc.w SME_vJmm3_5A4-SME_vJmm3, SME_vJmm3_5AB-SME_vJmm3	
00025DEC 0000 0000                  		dc.w SME_vJmm3_5B2-SME_vJmm3, SME_vJmm3_5B9-SME_vJmm3	
00025DF0 0000 0000                  		dc.w SME_vJmm3_5BE-SME_vJmm3, SME_vJmm3_5C5-SME_vJmm3	
00025DF4 0000 0000                  		dc.w SME_vJmm3_5DC-SME_vJmm3, SME_vJmm3_5E9-SME_vJmm3	
00025DF8 0000 0000                  		dc.w SME_vJmm3_5F0-SME_vJmm3, SME_vJmm3_5FF-SME_vJmm3	
00025DFC 0000 0000                  		dc.w SME_vJmm3_604-SME_vJmm3, SME_vJmm3_60D-SME_vJmm3	
00025E00 0000 0000                  		dc.w SME_vJmm3_614-SME_vJmm3, SME_vJmm3_61B-SME_vJmm3	
00025E04 0000 0000                  		dc.w SME_vJmm3_624-SME_vJmm3, SME_vJmm3_627-SME_vJmm3	
00025E08 0000 0000                  		dc.w SME_vJmm3_62A-SME_vJmm3, SME_vJmm3_62D-SME_vJmm3	
00025E0C 0000                       		dc.w SME_vJmm3_630-SME_vJmm3	
00025E0E 00                         SME_vJmm3_142:	dc.b 0	
00025E0F 0420 0070 0320 0B20 0E     SME_vJmm3_143:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00025E18 0920 0020 0B20 0E10 0300+  SME_vJmm3_14C:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
00025E2B 0A20 0020 0B20 0E10 0300+  SME_vJmm3_15F:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00025E40 04B6 C606 D200 0920 0E     SME_vJmm3_174:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00025E49 0350 1150 1720 0E          SME_vJmm3_17D:	dc.b 3, $50, $11, $50, $17, $20, $E	
00025E50 0350 2050 1720 0E          SME_vJmm3_184:	dc.b 3, $50, $20, $50, $17, $20, $E	
00025E57 0450 2050 1710 2700 0E     SME_vJmm3_18B:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00025E60 02B6 D316 DF               SME_vJmm3_194:	dc.b 2, $B6, $D3, $16, $DF	
00025E65 0356 E126 E736 EA          SME_vJmm3_199:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00025E6C 0356 E126 E736 EE          SME_vJmm3_1A0:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00025E73 03B6 F226 FE27 01          SME_vJmm3_1A7:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00025E7A 0420 0B20 0E87 0A07 13     SME_vJmm3_1AE:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00025E83 0380 2920 0B20 0E          SME_vJmm3_1B7:	dc.b 3, $80, $29, $20, $B, $20, $E	
00025E8A 0750 3A50 4010 4600 3530+  SME_vJmm3_1BE:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00025E99 05B0 4800 3530 3600 3400+  SME_vJmm3_1CD:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00025EA4 0380 5A57 0400 09          SME_vJmm3_1D8:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00025EAB 03F7 1437 2407 28          SME_vJmm3_1DF:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00025EB2 0450 5450 6350 6910 6F     SME_vJmm3_1E6:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00025EBB 0250 54B0 71               SME_vJmm3_1EF:	dc.b 2, $50, $54, $B0, $71	
00025EC0 0357 0457 2907 2F          SME_vJmm3_1F4:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00025EC7 0530 7D50 8100 3310 3430+  SME_vJmm3_1FB:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00025ED2 0550 8750 8D20 9350 9600+  SME_vJmm3_206:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00025EDD 0650 8710 9D30 9F50 A330+  SME_vJmm3_211:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00025EEA 0450 AE10 B470 B620 BE     SME_vJmm3_21E:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00025EF3 03F9 7539 8539 89          SME_vJmm3_227:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00025EFA 0550 C130 C770 CB20 D310+  SME_vJmm3_22E:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00025F05 0450 C110 D870 DA20 E2     SME_vJmm3_239:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00025F0E 03F9 8D39 9D39 A1          SME_vJmm3_242:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00025F15 0550 8710 9D00 9370 E520+  SME_vJmm3_249:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00025F20 0470 F050 F810 FE51 00     SME_vJmm3_254:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00025F29 0270 F0B1 06               SME_vJmm3_25D:	dc.b 2, $70, $F0, $B1, 6	
00025F2E 0281 1858 F9               SME_vJmm3_262:	dc.b 2, $81, $18, $58, $F9	
00025F33 0508 FF39 0009 04B9 0529+  SME_vJmm3_267:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00025F3E 0451 1251 2111 2751 29     SME_vJmm3_272:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00025F47 0251 12B1 2F               SME_vJmm3_27B:	dc.b 2, $51, $12, $B1, $2F	
00025F4C 0329 1479 1719 1F          SME_vJmm3_280:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00025F53 0370 F001 0681 3B          SME_vJmm3_287:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00025F5A 0651 4411 4A11 4C81 4E01+  SME_vJmm3_28E:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00025F67 0651 4421 5911 5C11 5E81+  SME_vJmm3_29B:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00025F74 0451 6911 6F81 7111 7A     SME_vJmm3_2A8:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00025F7D 03F9 A529 B529 B8          SME_vJmm3_2B1:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00025F84 0551 7C21 8211 8571 8721+  SME_vJmm3_2B8:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00025F8F 0451 7C11 9281 9411 9D     SME_vJmm3_2C3:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00025F98 03F9 BB29 CB19 CE          SME_vJmm3_2CC:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00025F9F 0551 4481 9F11 5E11 A801+  SME_vJmm3_2D3:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00025FAA 0251 AAB1 B0               SME_vJmm3_2DE:	dc.b 2, $51, $AA, $B1, $B0	
00025FAF 02B7 3057 3C               SME_vJmm3_2E3:	dc.b 2, $B7, $30, $57, $3C	
00025FB4 0250 54B1 BC               SME_vJmm3_2E8:	dc.b 2, $50, $54, $B1, $BC	
00025FB9 0257 3CB7 42               SME_vJmm3_2ED:	dc.b 2, $57, $3C, $B7, $42	
00025FBE 0251 AAB1 C8               SME_vJmm3_2F2:	dc.b 2, $51, $AA, $B1, $C8	
00025FC3 0257 3CB7 4E               SME_vJmm3_2F7:	dc.b 2, $57, $3C, $B7, $4E	
00025FC8 0250 54B1 D4               SME_vJmm3_2FC:	dc.b 2, $50, $54, $B1, $D4	
00025FCD 0257 3CB7 5A               SME_vJmm3_301:	dc.b 2, $57, $3C, $B7, $5A	
00025FD2 0451 E011 E6B1 E801 F4     SME_vJmm3_306:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00025FDB 03F8 7128 8128 84          SME_vJmm3_30F:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00025FE2 0351 F511 FBB1 FD          SME_vJmm3_316:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00025FE9 03B8 BD78 C901 F4          SME_vJmm3_31D:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
00025FF0 0451 E012 09B2 0B01 F4     SME_vJmm3_324:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
00025FF9 03B8 D178 DD01 F4          SME_vJmm3_32D:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
00026000 0351 F511 FBB2 17          SME_vJmm3_334:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00026007 0378 E5B8 ED01 F4          SME_vJmm3_33B:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
0002600E 0252 23B2 29               SME_vJmm3_342:	dc.b 2, $52, $23, $B2, $29	
00026013 0258 87B8 8D               SME_vJmm3_347:	dc.b 2, $58, $87, $B8, $8D	
00026018 0251 12B2 35               SME_vJmm3_34C:	dc.b 2, $51, $12, $B2, $35	
0002601D 0258 87B8 99               SME_vJmm3_351:	dc.b 2, $58, $87, $B8, $99	
00026022 0252 23B2 41               SME_vJmm3_356:	dc.b 2, $52, $23, $B2, $41	
00026027 0258 87B8 A5               SME_vJmm3_35B:	dc.b 2, $58, $87, $B8, $A5	
0002602C 0251 12B2 4D               SME_vJmm3_360:	dc.b 2, $51, $12, $B2, $4D	
00026031 0258 87B8 B1               SME_vJmm3_365:	dc.b 2, $58, $87, $B8, $B1	
00026036 0452 5912 5FB2 6102 6D     SME_vJmm3_36A:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
0002603F 03B9 2129 2D59 30          SME_vJmm3_373:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00026046 0272 6EB2 76               SME_vJmm3_37A:	dc.b 2, $72, $6E, $B2, $76	
0002604B 03B9 3629 4259 45          SME_vJmm3_37F:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00026052 0452 5912 82B2 8402 6D     SME_vJmm3_386:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
0002605B 03B9 4B29 5759 5A          SME_vJmm3_38F:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00026062 0272 6EB2 90               SME_vJmm3_396:	dc.b 2, $72, $6E, $B2, $90	
00026067 03B9 6029 6C59 6F          SME_vJmm3_39B:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
0002606E 03B4 EE24 FA54 FD          SME_vJmm3_3A2:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00026075 03B5 0325 0F55 12          SME_vJmm3_3A9:	dc.b 3, $B5, 3, $25, $F, $55, $12	
0002607C 0925 1E55 2105 3715 1815+  SME_vJmm3_3B0:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
0002608F 0925 2D55 3005 3615 2715+  SME_vJmm3_3C3:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
000260A2 03F6 6416 7436 76          SME_vJmm3_3D6:	dc.b 3, $F6, $64, $16, $74, $36, $76	
000260A9 03B6 8176 8D16 95          SME_vJmm3_3DD:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
000260B0 03F5 3835 4805 4C          SME_vJmm3_3E4:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
000260B7 05B5 4D35 5915 5D15 5F25+  SME_vJmm3_3EB:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
000260C2 03B5 6425 7055 73          SME_vJmm3_3F6:	dc.b 3, $B5, $64, $25, $70, $55, $73	
000260C9 03B5 7925 8555 88          SME_vJmm3_3FD:	dc.b 3, $B5, $79, $25, $85, $55, $88	
000260D0 0555 9425 9A05 AD55 8E55+  SME_vJmm3_404:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
000260DB 0525 A355 A605 AC55 9D55+  SME_vJmm3_40F:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
000260E6 04B5 BA25 C625 C925 CC     SME_vJmm3_41A:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000260EF 04B5 AE25 CF25 D225 D5     SME_vJmm3_423:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000260F8 04F5 D825 E805 EB05 EC     SME_vJmm3_42C:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
00026101 04F5 ED25 FD16 0016 02     SME_vJmm3_435:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
0002610A 01F2 9C                    SME_vJmm3_43E:	dc.b 1, $F2, $9C	
0002610D 01F6 2B                    SME_vJmm3_441:	dc.b 1, $F6, $2B	
00026110 01F2 AC                    SME_vJmm3_444:	dc.b 1, $F2, $AC	
00026113 01F6 3B                    SME_vJmm3_447:	dc.b 1, $F6, $3B	
00026116 01F2 BC                    SME_vJmm3_44A:	dc.b 1, $F2, $BC	
00026119 01F6 4B                    SME_vJmm3_44D:	dc.b 1, $F6, $4B	
0002611C 01F2 CC                    SME_vJmm3_450:	dc.b 1, $F2, $CC	
0002611F 0386 5B36 7A26 7E          SME_vJmm3_453:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00026126 01F2 DC                    SME_vJmm3_45A:	dc.b 1, $F2, $DC	
00026129 02B2 EC22 F8               SME_vJmm3_45D:	dc.b 2, $B2, $EC, $22, $F8	
0002612E 01F2 FB                    SME_vJmm3_462:	dc.b 1, $F2, $FB	
00026131 02B3 0B23 17               SME_vJmm3_465:	dc.b 2, $B3, $B, $23, $17	
00026136 01F3 1A                    SME_vJmm3_46A:	dc.b 1, $F3, $1A	
00026139 0453 2AB3 3018 1508 17     SME_vJmm3_46D:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00026142 0753 3C73 4213 4A03 4C08+  SME_vJmm3_476:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00026151 0528 1BB8 1E28 2A18 2D08+  SME_vJmm3_485:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
0002615C 03B8 3038 3C18 40          SME_vJmm3_490:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00026163 0220 0EF4 88               SME_vJmm3_497:	dc.b 2, $20, $E, $F4, $88	
00026168 0427 6627 6927 6C20 0E     SME_vJmm3_49C:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00026171 0413 4D73 4F23 5703 5A     SME_vJmm3_4A5:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
0002617A 0423 5B23 5EF3 6108 42     SME_vJmm3_4AE:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00026183 0928 5338 5678 4303 6408+  SME_vJmm3_4B7:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00026196 03B3 7173 7D00 71          SME_vJmm3_4CA:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
0002619D 03F8 5B18 6B38 6D          SME_vJmm3_4D1:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
000261A4 02F8 0138 11               SME_vJmm3_4D8:	dc.b 2, $F8, 1, $38, $11	
000261A9 00                         SME_vJmm3_4DD:	dc.b 0	
000261AA 0839 E219 EF29 E619 E919+  SME_vJmm3_4DE:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
000261BB 0739 E219 EF29 E619 E919+  SME_vJmm3_4EF:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
000261CA 0439 E289 E619 EF59 F1     SME_vJmm3_4FE:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
000261D3 0373 9D03 A533 A6          SME_vJmm3_507:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000261DA 0373 8533 8D23 91          SME_vJmm3_50E:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000261E1 0376 9736 9F06 A3          SME_vJmm3_515:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000261E8 0183 94                    SME_vJmm3_51C:	dc.b 1, $83, $94	
000261EB 0376 9736 9F06 A3          SME_vJmm3_51F:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000261F2 0373 8533 8D23 91          SME_vJmm3_526:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000261F9 0373 9D03 A533 A6          SME_vJmm3_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00026200 0373 AA33 B223 B6          SME_vJmm3_534:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00026207 04B3 B903 C603 C503 C7     SME_vJmm3_53B:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00026210 0856 1113 C303 C503 C613+  SME_vJmm3_544:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00026221 04B3 DA33 E603 EA03 EB     SME_vJmm3_555:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
0002622A 04B3 C833 D403 D803 D9     SME_vJmm3_55E:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00026233 0583 EC13 F553 F713 FD03+  SME_vJmm3_567:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
0002623E 0584 0014 0953 F713 FD03+  SME_vJmm3_572:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00026249 0284 0B74 14               SME_vJmm3_57D:	dc.b 2, $84, $B, $74, $14	
0002624E 0534 9824 9C34 9F34 A304+  SME_vJmm3_582:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00026259 0384 1C24 2514 28          SME_vJmm3_58D:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026260 0504 A834 A934 AD34 B124+  SME_vJmm3_594:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
0002626B 0284 2A74 33               SME_vJmm3_59F:	dc.b 2, $84, $2A, $74, $33	
00026270 03B7 DF17 EB27 ED          SME_vJmm3_5A4:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00026277 0384 1C24 3B14 3E          SME_vJmm3_5AB:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002627E 03B7 F017 FC27 FE          SME_vJmm3_5B2:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00026285 0254 40B4 46               SME_vJmm3_5B9:	dc.b 2, $54, $40, $B4, $46	
0002628A 0374 5214 5AB4 5C          SME_vJmm3_5BE:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026291 0B74 6814 7004 7924 7504+  SME_vJmm3_5C5:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
000262A8 0674 7A14 7054 8204 7924+  SME_vJmm3_5DC:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
000262B5 0354 C9B4 CF10 6D          SME_vJmm3_5E9:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
000262BC 0714 C334 C514 BE04 BD14+  SME_vJmm3_5F0:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
000262CB 02F4 DB24 EB               SME_vJmm3_5FF:	dc.b 2, $F4, $DB, $24, $EB	
000262D0 04B6 A416 B026 B206 B1     SME_vJmm3_604:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000262D9 03B6 B516 C126 C3          SME_vJmm3_60D:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000262E0 03B9 D129 DD19 E0          SME_vJmm3_614:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000262E7 0427 6F37 7237 7627 7A     SME_vJmm3_61B:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000262F0 01F7 7E                    SME_vJmm3_624:	dc.b 1, $F7, $7E	
000262F3 01F7 8E                    SME_vJmm3_627:	dc.b 1, $F7, $8E	
000262F6 01F7 9E                    SME_vJmm3_62A:	dc.b 1, $F7, $9E	
000262F9 01F7 AE                    SME_vJmm3_62D:	dc.b 1, $F7, $AE	
000262FC 01F7 BE                    SME_vJmm3_630:	dc.b 1, $F7, $BE	
00026300 00                         		even
00026300 00                         		even
00026300                            
00026300                            ; ---------------------------------------------------------------------------
00026300                            ; Uncompressed graphics	- Sonic
00026300                            ; ---------------------------------------------------------------------------
00026300                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0003C900                            		even
0003C900                            ; ---------------------------------------------------------------------------
0003C900                            ; Compressed graphics - various
0003C900                            ; ---------------------------------------------------------------------------
0003C900                            Unc_GShield:	incbin	"artunc\Gold Shield.bin"
0003CC60                            		even
0003CC60                            Unc_RedShield:	incbin	"artunc\Red Shield.bin"
0003CFC0                            		even
0003CFC0                            Unc_SpShield:	incbin	"artunc\Gray Shield.bin"
0003D320                            		even
0003D320                            Unc_Shield:	incbin	"artunc\Shield.bin"
0003D680                            		even
0003D680                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0003DB00                            		even
0003DB00                            
0003DB00                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0003DB00                            ; ---------------------------------------------------------------------------
0003DB00                            ; Sprite mappings - walls of the special stage
0003DB00                            ; ---------------------------------------------------------------------------
0003DB00                            Map_SSWalls_internal:
0003DB00 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0003DB02 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0003DB04 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0003DB06 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0003DB08 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0003DB0A 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0003DB0C 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0003DB0E 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0003DB10 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0003DB12 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0003DB14 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0003DB16 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0003DB18 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0003DB1A 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0003DB1C 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0003DB1E 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0003DB20 01                         byte_2C584:	dc.b 1
0003DB21 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003DB26 01                         byte_2C58A:	dc.b 1
0003DB27 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003DB2C 01                         byte_2C590:	dc.b 1
0003DB2D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003DB32 01                         byte_2C596:	dc.b 1
0003DB33 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003DB38 01                         byte_2C59C:	dc.b 1
0003DB39 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003DB3E 01                         byte_2C5A2:	dc.b 1
0003DB3F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003DB44 01                         byte_2C5A8:	dc.b 1
0003DB45 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003DB4A 01                         byte_2C5AE:	dc.b 1
0003DB4B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003DB50 01                         byte_2C5B4:	dc.b 1
0003DB51 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003DB56 01                         byte_2C5BA:	dc.b 1
0003DB57 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003DB5C 01                         byte_2C5C0:	dc.b 1
0003DB5D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003DB62 01                         byte_2C5C6:	dc.b 1
0003DB63 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003DB68 01                         byte_2C5CC:	dc.b 1
0003DB69 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003DB6E 01                         byte_2C5D2:	dc.b 1
0003DB6F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003DB74 01                         byte_2C5D8:	dc.b 1
0003DB75 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003DB7A 01                         byte_2C5DE:	dc.b 1
0003DB7B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003DB80                            		even
0003DB80                            		even
0003DB80                            
0003DB80                            ; ---------------------------------------------------------------------------
0003DB80                            ; Compressed graphics - special stage
0003DB80                            ; ---------------------------------------------------------------------------
0003DB80                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0003E4B8                            		even
0003E4B8                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0003E5EC                            		even
0003E5EC                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0003F27C                            		even
0003F27C                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0003F57C                            		even
0003F57C                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0003FA70                            		even
0003FA70                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0003FB5E                            		even
0003FB5E                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0003FC2E                            		even
0003FC2E                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0003FD24                            		even
0003FD24                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0003FD82                            		even
0003FD82                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
0003FE14                            		even
0003FE14                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
0003FED6                            		even
0003FED6                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
0003FFA4                            		even
0003FFA4                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00040070                            		even
00040070                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00040138                            		even
00040138                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00040202                            		even
00040202                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
000402D2                            		even
000402D2                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
000404C6                            		even
000404C6                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
0004062E                            		even
0004062E                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000406DE                            		even
000406DE                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
000407B8                            		even
000407B8                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0004083C                            		even
0004083C                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
000409BA                            		even
000409BA                            ; ---------------------------------------------------------------------------
000409BA                            ; Compressed graphics - GHZ stuff
000409BA                            ; ---------------------------------------------------------------------------
000409BA                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
00040A1C                            		even
00040A1C                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00040B36                            		even
00040B36                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00040C54                            		even
00040C54                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00040C9C                            		even
00040C9C                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
00040E3A                            		even
00040E3A                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00040EB6                            		even
00040EB6                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
000410CA                            		even
000410CA                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
000411F6                            		even
000411F6                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
0004134A                            		even
0004134A                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
000413FA                            		even
000413FA                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0004145A                            		even
0004145A                            ; ---------------------------------------------------------------------------
0004145A                            ; Compressed graphics - LZ stuff
0004145A                            ; ---------------------------------------------------------------------------
0004145A                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00041532                            		even
00041532                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00041D26                            		even
00041D26                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00041EB8 00                         		even
00041EB8                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00042022                            		even
00042022                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00042662 00                         		even
00042662                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00042704 00                         		even
00042704                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00042788                            		even
00042788                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000428E4                            		even
000428E4                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
0004296A                            		even
0004296A                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
00042AD8                            		even
00042AD8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00042FBA                            		even
00042FBA                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
0004312A                            		even
0004312A                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
000433E2                            		even
000433E2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
00043528                            		even
00043528                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00043652                            		even
00043652                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000437D8 00                         		even
000437D8                            ; ---------------------------------------------------------------------------
000437D8                            ; Compressed graphics - MZ stuff
000437D8                            ; ---------------------------------------------------------------------------
000437D8                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00043A66                            		even
00043A66                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
00043B24                            		even
00043B24                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
00043BFC                            		even
00043BFC                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00043C50                            		even
00043C50                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00043F6E 00                         		even
00043F6E                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00044884                            		even
00044884                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
00044A1A                            		even
00044A1A                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00044AA2                            		even
00044AA2                            ; ---------------------------------------------------------------------------
00044AA2                            ; Compressed graphics - SLZ stuff
00044AA2                            ; ---------------------------------------------------------------------------
00044AA2                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00044CDE                            		even
00044CDE                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00044E24                            		even
00044E24                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00045068                            		even
00045068                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00045104 00                         		even
00045104                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
000451E6                            		even
000451E6                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
000453C8                            		even
000453C8                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
000454D4                            		even
000454D4                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
00045578                            		even
00045578                            ; ---------------------------------------------------------------------------
00045578                            ; Compressed graphics - SYZ stuff
00045578                            ; ---------------------------------------------------------------------------
00045578                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
00045708                            		even
00045708                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0004576A                            		even
0004576A                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0004583A 00                         		even
0004583A                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
00045AC8                            		even
00045AC8                            ; ---------------------------------------------------------------------------
00045AC8                            ; Compressed graphics - SBZ stuff
00045AC8                            ; ---------------------------------------------------------------------------
00045AC8                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
00045B1C                            		even
00045B1C                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00045DB8                            		even
00045DB8                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00045FA8                            		even
00045FA8                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00046146                            		even
00046146                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00046476                            		even
00046476                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00046654                            		even
00046654                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
000466AC                            		even
000466AC                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0004685E 00                         		even
0004685E                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0004695C                            		even
0004695C                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
00046AEA                            		even
00046AEA                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
00046B84                            		even
00046B84                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
00046BDC                            		even
00046BDC                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
00046CD8                            		even
00046CD8                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
00046DEE                            		even
00046DEE                            ; ---------------------------------------------------------------------------
00046DEE                            ; Compressed graphics - enemies
00046DEE                            ; ---------------------------------------------------------------------------
00046DEE                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
00047236 00                         		even
00047236                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
00047726 00                         		even
00047726                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
00047A0A 00                         		even
00047A0A                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
00047D7E 00                         		even
00047D7E                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
00047F66                            		even
00047F66                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00048694 00                         		even
00048694                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0004891C 00                         		even
0004891C                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
00048BB8 00                         		even
00048BB8                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0004918C                            		even
0004918C                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0004941E                            		even
0004941E                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
00049A68 00                         		even
00049A68                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
00049EA4                            		even
00049EA4                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0004A1B2 00                         		even
0004A1B2                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0004A412                            		even
0004A412                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0004A710                            		even
0004A710                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0004A93C 00                         		even
0004A93C                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0004AACA                            		even
0004AACA                            ; ---------------------------------------------------------------------------
0004AACA                            ; Compressed graphics - various
0004AACA                            ; ---------------------------------------------------------------------------
0004AACA                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0004B118 00                         		even
0004B118                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0004B290 00                         		even
0004B290                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0004B3B4                            		even
0004B3B4                            Nem_Ring:	incbin	"artnem\Rings.bin"
0004B508 00                         		even
0004B508                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0004B9B2                            		even
0004B9B2                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0004C026                            		even
0004C026                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0004C0C0 00                         		even
0004C0C0                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0004C252                            		even
0004C252                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0004C370 00                         		even
0004C370                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0004C45C                            		even
0004C45C                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0004C9D4 00                         		even
0004C9D4                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0004CABE                            		even
0004CABE                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0004CC32                            		even
0004CC32                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0004CFBA 00                         		even
0004CFBA                            ; ---------------------------------------------------------------------------
0004CFBA                            ; Compressed graphics - continue screen
0004CFBA                            ; ---------------------------------------------------------------------------
0004CFBA                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0004D28E 00                         		even
0004D28E                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0004D528 00                         		even
0004D528                            ; ---------------------------------------------------------------------------
0004D528                            ; Compressed graphics - animals
0004D528                            ; ---------------------------------------------------------------------------
0004D528                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0004D680                            		even
0004D680                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0004D7DC                            		even
0004D7DC                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0004D958                            		even
0004D958                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0004DA74                            		even
0004DA74                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0004DBEE                            		even
0004DBEE                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0004DD28                            		even
0004DD28                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0004DE84                            		even
0004DE84                            ; ---------------------------------------------------------------------------
0004DE84                            ; Compressed graphics - primary patterns and block mappings
0004DE84                            ; ---------------------------------------------------------------------------
0004DE84                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0004E886                            		even
0004E886                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
0005012E                            		even
0005012E                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
000516BE                            		even
000516BE                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00053AA8                            		even
00053AA8                            Blk16_TS:	incbin	"map16\TS.bin"
00053D2C                            		even
00053D2C                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00054E6A                            		even
00054E6A                            Blk256_TS:	incbin	"map256\TS.bin"
00055A18                            		even
00055A18                            Blk16_LZ:	incbin	"map16\LZ.bin"
00056C94                            		even
00056C94                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0005A166                            		even
0005A166                            Blk256_LZ:	incbin	"map256\LZ.bin"
0005D624                            		even
0005D624                            Blk16_MZ:	incbin	"map16\MZ.bin"
0005DE12                            		even
0005DE12                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
000608AA                            		even
000608AA                            		incbin	"map256\MZ (JP1).bin"
00062854                            		even
00062854                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00062ED6                            		even
00062ED6                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
00066940                            		even
00066940                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00068D4A                            		even
00068D4A                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
000698D0                            		even
000698D0                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0006CCC0                            		even
0006CCC0                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0006E078                            		even
0006E078                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0006EC72                            		even
0006EC72                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
000714B4                            		even
000714B4                            		incbin	"map256\SBZ (JP1).bin"
00072040                            		even
00072040                            ; ---------------------------------------------------------------------------
00072040                            ; Compressed graphics - bosses and ending sequence
00072040                            ; ---------------------------------------------------------------------------
00072040                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
000728BC 00                         		even
000728BC                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00072BA6                            		even
00072BA6                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
0007342A                            		even
0007342A                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00073C56                            		even
00073C56                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00074424 00                         		even
00074424                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
000749A4                            		even
000749A4                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
00074AC4                            		even
00074AC4                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00074CCC 00                         		even
00074CCC                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00075EAA                            		even
00075EAA                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
000767EE                            		even
000767EE                            		even
000767EE                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00076D7E                            		even
00076D7E                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00077006                            		even
00077006                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
00077604                            		even
00077604                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
0007788C                            		even
0007788C                            
0007788C FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
000778CC                            ; ---------------------------------------------------------------------------
000778CC                            ; Collision data
000778CC                            ; ---------------------------------------------------------------------------
000778CC                            AngleMap:	incbin	"collide\Angle Map.bin"
000779CC                            		even
000779CC                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
000789CC                            		even
000789CC                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
000799CC                            		even
000799CC                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
00079B8A 00                         		even
00079B8A                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
00079E48                            		even
00079E48                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
00079FC2 00                         		even
00079FC2                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0007A1B6                            		even
0007A1B6                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0007A3A2 00                         		even
0007A3A2                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0007A572 00                         		even
0007A572                            ; ---------------------------------------------------------------------------
0007A572                            ; Special Stage layouts
0007A572                            ; ---------------------------------------------------------------------------
0007A572                            SS_1:		incbin	"sslayout\1.bin"
0007A7EC                            		even
0007A7EC                            SS_2:		incbin	"sslayout\2.bin"
0007ABFE                            		even
0007ABFE                            SS_3:		incbin	"sslayout\3.bin"
0007AF5A                            		even
0007AF5A                            SS_4:		incbin	"sslayout\4.bin"
0007B434                            		even
0007B434                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0007B8E4                            			even
0007B8E4                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0007BBD6                            		even
0007BBD6                            ; ---------------------------------------------------------------------------
0007BBD6                            ; Animated uncompressed graphics
0007BBD6                            ; ---------------------------------------------------------------------------
0007BBD6                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0007BDD6                            		even
0007BDD6                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0007C1D6                            		even
0007C1D6                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0007C656                            		even
0007C656                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0007C956                            		even
0007C956                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0007CF56                            		even
0007CF56                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0007D256                            		even
0007D256                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0007DCD6                            		even
0007DCD6                            
0007DCD6                            ; ---------------------------------------------------------------------------
0007DCD6                            ; Level	layout index
0007DCD6                            ; ---------------------------------------------------------------------------
0007DCD6                            Level_Index:
0007DCD6                            		; GHZ
0007DCD6 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007DCDC 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007DCE2 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007DCE8 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007DCEE                            		; LZ
0007DCEE 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007DCF4 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007DCFA 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007DD00 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007DD06                            		; MZ
0007DD06 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007DD0C 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007DD12 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007DD18 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007DD1E                            		; SLZ
0007DD1E 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DD24 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DD2A 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DD30 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007DD36                            		; SYZ
0007DD36 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007DD3C 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007DD42 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007DD48 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007DD4E                            		; SBZ
0007DD4E 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007DD54 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007DD5A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007DD60 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007DD66                            		; Ending
0007DD66 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DD6C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DD72 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DD78 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DD7E                            
0007DD7E                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0007DFB0                            		even
0007DFB0 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007DFB4                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0007E0D6                            		even
0007E0D6 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007E0DA                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0007E35C                            		even
0007E35C                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0007E39E                            		even
0007E39E 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007E3A2 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007E3A6                            
0007E3A6                            Level_LZ1:	incbin	"levels\lz1.bin"
0007E468                            		even
0007E468                            Level_LZbg:	incbin	"levels\lzbg.bin"
0007E56A                            		even
0007E56A 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007E56E                            Level_LZ2:	incbin	"levels\lz2.bin"
0007E608                            		even
0007E608 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007E60C                            Level_LZ3:	incbin	"levels\lz3.bin"
0007E726                            		even
0007E726 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007E72A                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0007E7E4                            		even
0007E7E4 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007E7E8                            
0007E7E8                            Level_MZ1:	incbin	"levels\mz1.bin"
0007E8DA                            		even
0007E8DA                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0007E9FC                            		even
0007E9FC                            Level_MZ2:	incbin	"levels\mz2.bin"
0007EAEE                            		even
0007EAEE                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0007EC10                            		even
0007EC10 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007EC14                            Level_MZ3:	incbin	"levels\mz3.bin"
0007EC86                            		even
0007EC86                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0007EDA8                            		even
0007EDA8 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007EDAC 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007EDB0                            
0007EDB0                            Level_SLZ1:	incbin	"levels\slz1.bin"
0007EEC2                            		even
0007EEC2                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0007EF3C                            		even
0007EF3C                            Level_SLZ2:	incbin	"levels\slz2.bin"
0007F02C                            		even
0007F02C                            Level_SLZ3:	incbin	"levels\slz3.bin"
0007F146                            		even
0007F146 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007F14A                            
0007F14A                            Level_SYZ1:	incbin	"levels\syz1.bin"
0007F24E                            		even
0007F24E                            		incbin	"levels\syzbg (JP1).bin"
0007F288                            		even
0007F288 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007F28C                            Level_SYZ2:	incbin	"levels\syz2.bin"
0007F390                            		even
0007F390 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007F394                            Level_SYZ3:	incbin	"levels\syz3.bin"
0007F4EE 00                         		even
0007F4EE 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007F4F2 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007F4F6                            
0007F4F6                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0007F618                            		even
0007F618                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0007F656                            		even
0007F656                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0007F798                            		even
0007F798                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0007F902                            		even
0007F902 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007F906 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007F90A                            Level_End:	incbin	"levels\ending.bin"
0007F93A 00                         		even
0007F93A 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007F93E                            
0007F93E                            
0007F93E                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
0008057E                            		even
0008057E                            
00080600                            
00080600                            ; ---------------------------------------------------------------------------
00080600                            ; Sprite locations index
00080600                            ; ---------------------------------------------------------------------------
00080600                            ObjPos_Index:
00080600                            		; GHZ
00080600 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080604 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080608 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008060C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080610                            		; LZ
00080610 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080614 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080618 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008061C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080620                            		; MZ
00080620 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080624 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080628 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008062C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080630                            		; SLZ
00080630 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080634 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080638 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008063C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080640                            		; SYZ
00080640 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080644 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080648 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008064C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080650                            		; SBZ
00080650 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080654 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080658 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008065C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080660                            		; Ending
00080660 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080664 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080668 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008066C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080670                            		; --- Put extra object data here. ---
00080670                            ObjPosLZPlatform_Index:
00080670 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080674 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00080678 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008067C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080680                            ObjPosSBZPlatform_Index:
00080680 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080684 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00080688 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0008068C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080690 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00080696                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
00080CF6                            		even
00080CF6                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00081146                            		even
00081146                            		incbin	"objpos\ghz3 (JP1).bin"
00081356                            		even
00081356                            		incbin	"objpos\lz1 (JP1).bin"
0008138C                            		even
0008138C                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
000816CE                            		even
000816CE                            		incbin	"objpos\lz3 (JP1).bin"
00081C92                            		even
00081C92                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00082322                            		even
00082322                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00082354                            		even
00082354                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00082386                            		even
00082386                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
000823B8                            		even
000823B8                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000823EA                            		even
000823EA                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00082434                            		even
00082434                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00082472                            		even
00082472                            		incbin	"objpos\mz1 (JP1).bin"
00082A54                            		even
00082A54                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00082E32                            		even
00082E32                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00083084                            		even
00083084                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
000835B8                            		even
000835B8                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00083A26                            		even
00083A26                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00084008                            		even
00084008                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00084062                            		even
00084062                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
0008408C                            		even
0008408C                            		incbin	"objpos\syz3 (JP1).bin"
000840BC                            		even
000840BC                            		incbin	"objpos\sbz1 (JP1).bin"
00084104                            		even
00084104                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
0008412E                            		even
0008412E                            ObjPos_FZ:	incbin	"objpos\fz.bin"
0008416A                            		even
0008416A                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
0008419C                            		even
0008419C                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
000841CE                            		even
000841CE                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00084200                            		even
00084200                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00084232                            		even
00084232                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00084264                            		even
00084264                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
0008429C                            		even
0008429C                            ObjPos_End:	incbin	"objpos\ending.bin"
000843F8                            		even
000843F8 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000843FE                            
000843FE                            		dcb.b $63C,$FF
00084A3A                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00084A3A                            
00084A3A                            SoundDriver:	include "s1.sounddriver.asm"
00084A3A                            ; ---------------------------------------------------------------------------
00084A3A                            ; Modified (early?) SMPS 68k Type 1b
00084A3A                            ; ---------------------------------------------------------------------------
00084A3A                            ; Go_SoundTypes:
00084A3A 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00084A3E                            ; Go_SoundD0:
00084A3E 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00084A42 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
00084A46 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00084A4A                            ; off_719A0:
00084A4A 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00084A4E 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00084A52                            ; ---------------------------------------------------------------------------
00084A52                            ; PSG instruments used in music
00084A52                            ; ---------------------------------------------------------------------------
00084A52                            PSG_Index:
00084A52 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00084A5E 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00084A6A 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00084A76                            PSG1:		incbin	"sound/psg/psg1.bin"
00084A8D                            PSG2:		incbin	"sound/psg/psg2.bin"
00084A94                            PSG3:		incbin	"sound/psg/psg3.bin"
00084AA5                            PSG4:		incbin	"sound/psg/psg4.bin"
00084AB0                            PSG6:		incbin	"sound/psg/psg6.bin"
00084ABF                            PSG5:		incbin	"sound/psg/psg5.bin"
00084AE9                            PSG7:		incbin	"sound/psg/psg7.bin"
00084B05                            PSG8:		incbin	"sound/psg/psg8.bin"
00084B2D                            PSG9:		incbin	"sound/psg/psg9.bin"
00084B3E                            ; ---------------------------------------------------------------------------
00084B3E                            ; New tempos for songs during speed shoes
00084B3E                            ; ---------------------------------------------------------------------------
00084B3E                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00084B3E                            ; tempos while speed shoes are active. If you don't want that, you should add
00084B3E                            ; their "correct" sped-up main tempos to the list.
00084B3E                            ; byte_71A94:
00084B3E                            SpeedUpIndex:
00084B3E 07                         		dc.b 7		; GHZ
00084B3F 72                         		dc.b $72	; LZ
00084B40 73                         		dc.b $73	; MZ
00084B41 26                         		dc.b $26	; SLZ
00084B42 15                         		dc.b $15	; SYZ
00084B43 08                         		dc.b 8		; SBZ
00084B44 FF                         		dc.b $FF	; Invincibility
00084B45 05                         		dc.b 5		; Extra Life
00084B46                            		;dc.b ?		; Special Stage
00084B46                            		;dc.b ?		; Title Screen
00084B46                            		;dc.b ?		; Ending
00084B46                            		;dc.b ?		; Boss
00084B46                            		;dc.b ?		; FZ
00084B46                            		;dc.b ?		; Sonic Got Through
00084B46                            		;dc.b ?		; Game Over
00084B46                            		;dc.b ?		; Continue Screen
00084B46                            		;dc.b ?		; Credits
00084B46                            		;dc.b ?		; Drowning
00084B46                            		;dc.b ?		; Get Emerald
00084B46                            
00084B46                            ; ---------------------------------------------------------------------------
00084B46                            ; Music	Pointers
00084B46                            ; ---------------------------------------------------------------------------
00084B46                            MusicIndex:
00084B46 0000 0000                  ptr_mus81:	dc.l Music81
00084B4A 0000 0000                  ptr_mus82:	dc.l Music82
00084B4E 0000 0000                  ptr_mus83:	dc.l Music83
00084B52 0000 0000                  ptr_mus84:	dc.l Music84
00084B56 0000 0000                  ptr_mus85:	dc.l Music85
00084B5A 0000 0000                  ptr_mus86:	dc.l Music86
00084B5E 0000 0000                  ptr_mus87:	dc.l Music87
00084B62 0000 0000                  ptr_mus88:	dc.l Music88
00084B66 0000 0000                  ptr_mus89:	dc.l Music89
00084B6A 0000 0000                  ptr_mus8A:	dc.l Music8A
00084B6E 0000 0000                  ptr_mus8B:	dc.l Music8B
00084B72 0000 0000                  ptr_mus8C:	dc.l Music8C
00084B76 0000 0000                  ptr_mus8D:	dc.l Music8D
00084B7A 0000 0000                  ptr_mus8E:	dc.l Music8E
00084B7E 0000 0000                  ptr_mus8F:	dc.l Music8F
00084B82 0000 0000                  ptr_mus90:	dc.l Music90
00084B86 0000 0000                  ptr_mus91:	dc.l Music91
00084B8A 0000 0000                  ptr_mus92:	dc.l Music92
00084B8E 0000 0000                  ptr_mus93:	dc.l Music93
00084B92 0000 0000                  ptr_mus94:	dc.l Music94
00084B96 0000 0000                  ptr_mus95:	dc.l Music95
00084B9A 0000 0000                  ptr_mus96:	dc.l Music96
00084B9E 0000 0000                  ptr_mus97:	dc.l Music97
00084BA2 0000 0000                  ptr_mus98:	dc.l Music98
00084BA6                            ptr_musend
00084BA6                            ; ---------------------------------------------------------------------------
00084BA6                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00084BA6                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00084BA6                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00084BA6                            ; any music or SFX can override it (as long as it can override whatever was
00084BA6                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00084BA6                            ; will only override special SFX and music will only override music.
00084BA6                            ; ---------------------------------------------------------------------------
00084BA6                            ; SoundTypes:
00084BA6                            SoundPriorities:
00084BA6 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00084BB5 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00084BC5 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00084BD5 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00084BE5 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00084BF5 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
00084C05 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00084C0A                            
00084C0A                            ; ---------------------------------------------------------------------------
00084C0A                            ; Subroutine to update music more than once per frame
00084C0A                            ; (Called by horizontal & vert. interrupts)
00084C0A                            ; ---------------------------------------------------------------------------
00084C0A                            
00084C0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C0A                            
00084C0A                            ; sub_71B4C:
00084C0A                            UpdateMusic:
00084C0A 33FC 0100 00A1 1100        		stopZ80
00084C12 4E71                       		nop	
00084C14 4E71                       		nop	
00084C16 4E71                       		nop	
00084C18                            ; loc_71B5A:
00084C18                            @updateloop:
00084C18 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00084C20 66F6                       		bne.s	@updateloop			; If so, wait
00084C22                            
00084C22 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00084C2A 6700                       		beq.s	@driverinput			; Branch if yes
00084C2C 33FC 0000 00A1 1100        		startZ80
00084C34 4E71                       		nop	
00084C36 4E71                       		nop	
00084C38 4E71                       		nop	
00084C3A 4E71                       		nop	
00084C3C 4E71                       		nop	
00084C3E 60CA                       		bra.s	UpdateMusic
00084C40                            ; ===========================================================================
00084C40                            ; loc_71B82:
00084C40                            @driverinput:
00084C40 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
00084C46 422E 000E                  		clr.b	f_voice_selector(a6)
00084C4A 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00084C4E 6600 0000                  		bne.w	PauseMusic			; if yes, branch
00084C52 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00084C56 6600                       		bne.s	@skipdelay
00084C58 4EBA 0000                  		jsr	TempoWait(pc)
00084C5C                            ; loc_71B9E:
00084C5C                            @skipdelay:
00084C5C 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00084C60 6700                       		beq.s	@skipfadeout
00084C62 4EBA 0000                  		jsr	DoFadeOut(pc)
00084C66                            ; loc_71BA8:
00084C66                            @skipfadeout:
00084C66 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00084C6A 6700                       		beq.s	@skipfadein
00084C6C 4EBA 0000                  		jsr	DoFadeIn(pc)
00084C70                            ; loc_71BB2:
00084C70                            @skipfadein:
00084C70                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00084C70 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
00084C74 6700                       		beq.s	@nosndinput		; if not, branch
00084C76 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00084C7A                            ; loc_71BBC:
00084C7A                            @nosndinput:
00084C7A 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
00084C80 6700                       		beq.s	@nonewsound		; If yes, branch
00084C82 4EBA 0000                  		jsr	PlaySoundID(pc)
00084C86                            ; loc_71BC8:
00084C86                            @nonewsound:
00084C86 4A38 C901                  		tst.b	($FFFFC901).w
00084C8A 6700                       		beq.s	@cont
00084C8C 5338 C901                  		subq.b	#1,($FFFFC901).w
00084C90                            		
00084C90                            @cont:
00084C90 4BEE 0040                  		lea	v_music_dac_track(a6),a5
00084C94 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
00084C96 6A00                       		bpl.s	@dacdone		; Branch if not
00084C98 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00084C9C                            ; loc_71BD4:
00084C9C                            @dacdone:
00084C9C 422E 0008                  		clr.b	f_updating_dac(a6)
00084CA0 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00084CA2                            ; loc_71BDA:
00084CA2                            @bgmfmloop:
00084CA2 DAFC 0030                  		adda.w	#TrackSz,a5
00084CA6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084CA8 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00084CAA 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084CAE                            ; loc_71BE6:
00084CAE                            @bgmfmnext:
00084CAE 51CF FFF2                  		dbf	d7,@bgmfmloop
00084CB2                            
00084CB2 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00084CB4                            ; loc_71BEC:
00084CB4                            @bgmpsgloop:
00084CB4 DAFC 0030                  		adda.w	#TrackSz,a5
00084CB8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084CBA 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00084CBC 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084CC0                            ; loc_71BF8:
00084CC0                            @bgmpsgnext:
00084CC0 51CF FFF2                  		dbf	d7,@bgmpsgloop
00084CC4                            
00084CC4 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00084CCA 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00084CCC                            ; loc_71C04:
00084CCC                            @sfxfmloop:
00084CCC DAFC 0030                  		adda.w	#TrackSz,a5
00084CD0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084CD2 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00084CD4 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084CD8                            ; loc_71C10:
00084CD8                            @sfxfmnext:
00084CD8 51CF FFF2                  		dbf	d7,@sfxfmloop
00084CDC                            
00084CDC 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00084CDE                            ; loc_71C16:
00084CDE                            @sfxpsgloop:
00084CDE DAFC 0030                  		adda.w	#TrackSz,a5
00084CE2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084CE4 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
00084CE6 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084CEA                            ; loc_71C22:
00084CEA                            @sfxpsgnext:
00084CEA 51CF FFF2                  		dbf	d7,@sfxpsgloop
00084CEE                            		
00084CEE 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00084CF4 DAFC 0030                  		adda.w	#TrackSz,a5
00084CF8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084CFA 6A00                       		bpl.s	@specfmdone		; Branch if not
00084CFC 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084D00                            ; loc_71C38:
00084D00                            @specfmdone:
00084D00 DAFC 0030                  		adda.w	#TrackSz,a5
00084D04 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00084D06 6A00                       		bpl.s	DoStartZ80		; Branch if not
00084D08 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084D0C                            ; loc_71C44:
00084D0C                            DoStartZ80:
00084D0C 33FC 0000 00A1 1100        		startZ80
00084D14 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00084D1A 6700                       		beq.s @end ; if not, branch
00084D1C 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
00084D22 6600                       		bne.s @end ; if not, branch
00084D24 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00084D2A 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00084D2E                            
00084D2E                            	@end:
00084D2E 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00084D32 4E75                       		rts
00084D34                            ; End of function UpdateMusic
00084D34                            
00084D34                            
00084D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D34                            
00084D34                            ; sub_71C4E: UpdateDAC:
00084D34                            DACUpdateTrack:
00084D34 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00084D38 6600                       		bne.s	@locret				; Return if not
00084D3A 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00084D40                            ;DACDoNext:
00084D40 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00084D44                            ; loc_71C5E:
00084D44                            @sampleloop:
00084D44 7A00                       		moveq	#0,d5
00084D46 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00084D48 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00084D4C 6500                       		blo.s	@notcoord	; Branch if not
00084D4E 4EBA 0000                  		jsr	CoordFlag(pc)
00084D52 60F0                       		bra.s	@sampleloop
00084D54                            ; ===========================================================================
00084D54                            ; loc_71C6E:
00084D54                            @notcoord:
00084D54 4A05                       		tst.b	d5			; Is it a sample?
00084D56 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00084D58 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00084D5C 1A1C                       		move.b	(a4)+,d5		; Get another byte
00084D5E 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00084D60 534C                       		subq.w	#1,a4			; Put byte back
00084D62 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00084D68 6000                       		bra.s	@gotsampleduration
00084D6A                            ; ===========================================================================
00084D6A                            ; loc_71C84:
00084D6A                            @gotduration:
00084D6A 4EBA 0000                  		jsr	SetDuration(pc)
00084D6E                            ; loc_71C88:
00084D6E                            @gotsampleduration:
00084D6E 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00084D72 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084D76 6600                       		bne.s	@locret			; Return if yes
00084D78 7000                       		moveq	#0,d0
00084D7A 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00084D7E 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00084D82 6700                       		beq.s	@locret			; Return if yes
00084D84 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00084D88 6600                       		bne.s	@timpani		; Various timpani
00084D8A 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00084D90                            ; locret_71CAA:
00084D90                            @locret:
00084D90 4E75                       		rts	
00084D92                            ; ===========================================================================
00084D92                            ; loc_71CAC:
00084D92                            @timpani:
00084D92 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00084D96 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00084D9A                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00084D9A                            		; use this value from then on.
00084D9A 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00084DA0 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00084DA8 4E75                       		rts	
00084DAA                            ; End of function DACUpdateTrack
00084DAA                            
00084DAA                            ; ===========================================================================
00084DAA                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00084DAA                            ; Also, $8C-$8D are so slow you may want to skip them.
00084DAA                            ; byte_71CC4:
00084DAA 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00084DB0                            
00084DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084DB0                            
00084DB0                            ; sub_71CCA:
00084DB0                            FMUpdateTrack:
00084DB0 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00084DB4 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00084DB6 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00084DBA 4EBA 0000                  		jsr	FMDoNext(pc)
00084DBE 4EBA 0000                  		jsr	FMPrepareNote(pc)
00084DC2 6000 0000                  		bra.w	FMNoteOn
00084DC6                            ; ===========================================================================
00084DC6                            ; loc_71CE0:
00084DC6                            @notegoing:
00084DC6 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00084DCA 4EBA 0000                  		jsr	DoModulation(pc)
00084DCE 6000 0000                  		bra.w	FMUpdateFreq
00084DD2                            ; End of function FMUpdateTrack
00084DD2                            
00084DD2                            
00084DD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084DD2                            
00084DD2                            ; sub_71CEC:
00084DD2                            FMDoNext:
00084DD2 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00084DD6 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00084DDA                            ; loc_71CF4:
00084DDA                            @noteloop:
00084DDA 7A00                       		moveq	#0,d5
00084DDC 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00084DDE 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00084DE2 6500                       		blo.s	@gotnote	; Branch if not
00084DE4 4EBA 0000                  		jsr	CoordFlag(pc)
00084DE8 60F0                       		bra.s	@noteloop
00084DEA                            ; ===========================================================================
00084DEA                            ; loc_71D04:
00084DEA                            @gotnote:
00084DEA 4EBA 0000                  		jsr	FMNoteOff(pc)
00084DEE 4A05                       		tst.b	d5		; Is this a note?
00084DF0 6A00                       		bpl.s	@gotduration	; Branch if not
00084DF2 4EBA 0000                  		jsr	FMSetFreq(pc)
00084DF6 1A1C                       		move.b	(a4)+,d5	; Get another byte
00084DF8 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00084DFA 534C                       		subq.w	#1,a4		; Otherwise, put it back
00084DFC 6000 0000                  		bra.w	FinishTrackUpdate
00084E00                            ; ===========================================================================
00084E00                            ; loc_71D1A:
00084E00                            @gotduration:
00084E00 4EBA 0000                  		jsr	SetDuration(pc)
00084E04 6000 0000                  		bra.w	FinishTrackUpdate
00084E08                            ; End of function FMDoNext
00084E08                            
00084E08                            
00084E08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084E08                            
00084E08                            ; sub_71D22:
00084E08                            FMSetFreq:
00084E08 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00084E0C 6700                       		beq.s	TrackSetRest
00084E0E DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00084E12 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00084E16 E34D                       		lsl.w	#1,d5
00084E18 41FA 0000                  		lea	FMFrequencies(pc),a0
00084E1C 3C30 5000                  		move.w	(a0,d5.w),d6
00084E20 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00084E24 4E75                       		rts	
00084E26                            ; End of function FMSetFreq
00084E26                            
00084E26                            
00084E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084E26                            
00084E26                            ; sub_71D40:
00084E26                            SetDuration:
00084E26 1005                       		move.b	d5,d0
00084E28 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00084E2C                            ; loc_71D46:
00084E2C                            @multloop:
00084E2C 5301                       		subq.b	#1,d1
00084E2E 6700                       		beq.s	@donemult
00084E30 D005                       		add.b	d5,d0
00084E32 60F8                       		bra.s	@multloop
00084E34                            ; ===========================================================================
00084E34                            ; loc_71D4E:
00084E34                            @donemult:
00084E34 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00084E38 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00084E3C 4E75                       		rts	
00084E3E                            ; End of function SetDuration
00084E3E                            
00084E3E                            ; ===========================================================================
00084E3E                            ; loc_71D58:
00084E3E                            TrackSetRest:
00084E3E 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084E42 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00084E46                            
00084E46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084E46                            
00084E46                            ; sub_71D60:
00084E46                            FinishTrackUpdate:
00084E46 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00084E4A 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00084E50 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00084E54 6600                       		bne.s	@locret				; If so, branch
00084E56 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00084E5C 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00084E60 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00084E64 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00084E66 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00084E6A 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00084E6E 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00084E72 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00084E76 1018                       		move.b	(a0)+,d0			; Get steps
00084E78 E208                       		lsr.b	#1,d0				; Halve them
00084E7A 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00084E7E 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00084E82                            ; locret_71D9C:
00084E82                            @locret:
00084E82 4E75                       		rts	
00084E84                            ; End of function FinishTrackUpdate
00084E84                            
00084E84                            
00084E84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084E84                            
00084E84                            ; sub_71D9E: NoteFillUpdate
00084E84                            NoteTimeoutUpdate:
00084E84 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00084E88 6700                       		beq.s	@locret
00084E8A 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00084E8E 6600                       		bne.s	@locret				; Return if it hasn't expired
00084E90 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00084E94 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00084E98 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00084E9C 4EBA 0000                  		jsr	FMNoteOff(pc)
00084EA0 584F                       		addq.w	#4,sp				; Do not return to caller
00084EA2 4E75                       		rts	
00084EA4                            ; ===========================================================================
00084EA4                            ; loc_71DBE:
00084EA4                            @psgnoteoff:
00084EA4 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084EA8 584F                       		addq.w	#4,sp		; Do not return to caller
00084EAA                            ; locret_71DC4:
00084EAA                            @locret:
00084EAA 4E75                       		rts	
00084EAC                            ; End of function NoteTimeoutUpdate
00084EAC                            
00084EAC                            
00084EAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084EAC                            
00084EAC                            ; sub_71DC6:
00084EAC                            DoModulation:
00084EAC 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00084EAE 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00084EB2 6700                       		beq.s	@locret				; Return if not
00084EB4 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00084EB8 6700                       		beq.s	@waitdone			; If yes, branch
00084EBA 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00084EBE 4E75                       		rts	
00084EC0                            ; ===========================================================================
00084EC0                            ; loc_71DDA:
00084EC0                            @waitdone:
00084EC0 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00084EC4 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00084EC6 4E75                       		rts	
00084EC8                            ; ===========================================================================
00084EC8                            ; loc_71DE2:
00084EC8                            @updatemodulation:
00084EC8 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00084ECC 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00084ED2 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00084ED6 6600                       		bne.s	@calcfreq			; If nonzero, branch
00084ED8 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00084EDE 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00084EE2 4E75                       		rts	
00084EE4                            ; ===========================================================================
00084EE4                            ; loc_71DFE:
00084EE4                            @calcfreq:
00084EE4 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00084EE8 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00084EEC 4886                       		ext.w	d6
00084EEE DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00084EF2 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00084EF6 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00084EFA 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00084EFC                            ; locret_71E16:
00084EFC                            @locret:
00084EFC 4E75                       		rts	
00084EFE                            ; End of function DoModulation
00084EFE                            
00084EFE                            
00084EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084EFE                            
00084EFE                            ; sub_71E18:
00084EFE                            FMPrepareNote:
00084EFE 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00084F02 6600                       		bne.s	locret_71E48		; Return if so
00084F04 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00084F08 6700                       		beq.s	FMSetRest		; Branch if zero
00084F0A                            ; loc_71E24:
00084F0A                            FMUpdateFreq:
00084F0A 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00084F0E 4880                       		ext.w	d0
00084F10 DC40                       		add.w	d0,d6			; Add note frequency
00084F12 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084F16 6600                       		bne.s	locret_71E48		; Return if so
00084F18 3206                       		move.w	d6,d1
00084F1A E049                       		lsr.w	#8,d1
00084F1C 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00084F20 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084F24 1206                       		move.b	d6,d1
00084F26 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00084F2A 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00084F2E                            ; locret_71E48:
00084F2E                            locret_71E48:
00084F2E 4E75                       		rts	
00084F30                            ; ===========================================================================
00084F30                            ; loc_71E4A:
00084F30                            FMSetRest:
00084F30 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084F34 4E75                       		rts	
00084F36                            ; End of function FMPrepareNote
00084F36                            
00084F36                            ; ===========================================================================
00084F36                            ; loc_71E50:
00084F36                            PauseMusic:
00084F36 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00084F38 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00084F3E 6700 0000                  		beq.w	@unpausedallfm
00084F42 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00084F48 7602                       		moveq	#2,d3
00084F4A 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00084F4E 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00084F50                            ; loc_71E6A:
00084F50                            @killpanloop:
00084F50 4EBA 0000                  		jsr	WriteFMI(pc)
00084F54 4EBA 0000                  		jsr	WriteFMII(pc)
00084F58 5200                       		addq.b	#1,d0
00084F5A 51CB FFF4                  		dbf	d3,@killpanloop
00084F5E                            
00084F5E 7602                       		moveq	#2,d3
00084F60 7028                       		moveq	#$28,d0		; Key on/off register
00084F62                            ; loc_71E7C:
00084F62                            @noteoffloop:
00084F62 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00084F64 4EBA 0000                  		jsr	WriteFMI(pc)
00084F68 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00084F6A 4EBA 0000                  		jsr	WriteFMI(pc)
00084F6E 51CB FFF2                  		dbf	d3,@noteoffloop
00084F72                            
00084F72 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00084F76 6000 FD94                  		bra.w	DoStartZ80
00084F7A                            ; ===========================================================================
00084F7A                            ; loc_71E94:
00084F7A                            @unpausemusic:
00084F7A 422E 0003                  		clr.b	f_pausemusic(a6)
00084F7E 7630                       		moveq	#TrackSz,d3
00084F80 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00084F84 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00084F86                            ; loc_71EA0:
00084F86                            @bgmfmloop:
00084F86 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084F8A 6700                       		beq.s	@bgmfmnext		; Branch if not
00084F8C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084F90 6600                       		bne.s	@bgmfmnext		; Branch if yes
00084F92 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084F96 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084F9A 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084F9E                            ; loc_71EB8:
00084F9E                            @bgmfmnext:
00084F9E DAC3                       		adda.w	d3,a5
00084FA0 51CC FFE4                  		dbf	d4,@bgmfmloop
00084FA4                            
00084FA4 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00084FA8 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00084FAA                            ; loc_71EC4:
00084FAA                            @sfxfmloop:
00084FAA 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084FAE 6700                       		beq.s	@sfxfmnext		; Branch if not
00084FB0 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084FB4 6600                       		bne.s	@sfxfmnext		; Branch if yes
00084FB6 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084FBA 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084FBE 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084FC2                            ; loc_71EDC:
00084FC2                            @sfxfmnext:
00084FC2 DAC3                       		adda.w	d3,a5
00084FC4 51CC FFE4                  		dbf	d4,@sfxfmloop
00084FC8                            
00084FC8 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00084FCC 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084FD0 6700                       		beq.s	@unpausedallfm		; Branch if not
00084FD2 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084FD6 6600                       		bne.s	@unpausedallfm		; Branch if yes
00084FD8 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084FDC 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084FE0 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084FE4                            ; loc_71EFE:
00084FE4                            @unpausedallfm:
00084FE4 6000 FD26                  		bra.w	DoStartZ80
00084FE8                            
00084FE8                            ; ---------------------------------------------------------------------------
00084FE8                            ; Subroutine to	play a sound or	music track
00084FE8                            ; ---------------------------------------------------------------------------
00084FE8                            
00084FE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084FE8                            
00084FE8                            ; Sound_Play:
00084FE8                            CycleSoundQueue:
00084FE8 2079 0008 4A3A             		movea.l	(Go_SoundPriorities).l,a0
00084FEE 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00084FF2 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00084FF4 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00084FF6                            ; loc_71F12:
00084FF6                            @inputloop:
00084FF6 1011                       		move.b	(a1),d0			; move track number to d0
00084FF8 1200                       		move.b	d0,d1
00084FFA 4219                       		clr.b	(a1)+			; Clear entry
00084FFC 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00085000 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00085002 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00085008 6700                       		beq.s	@havesound		; If yes, branch
0008500A 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
0008500E 6000                       		bra.s	@nextinput
00085010                            ; ===========================================================================
00085010                            ; loc_71F2C:
00085010                            @havesound:
00085010 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00085014 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00085018 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
0008501A 6500                       		blo.s	@nextinput		; Branch if yes
0008501C 1602                       		move.b	d2,d3			; Store new priority
0008501E 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00085022                            ; loc_71F3E:
00085022                            @nextinput:
00085022 51CC FFD2                  		dbf	d4,@inputloop
00085026                            
00085026 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00085028 6B00                       		bmi.s	@locret
0008502A 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
0008502C                            ; locret_71F4A:
0008502C                            @locret:
0008502C 4E75                       		rts	
0008502E                            ; End of function CycleSoundQueue
0008502E                            
0008502E                            
0008502E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008502E                            
0008502E                            ; Sound_ChkValue:
0008502E                            PlaySoundID:
0008502E 7E00                       		moveq	#0,d7
00085030 1E2E 0009                  		move.b	v_sound_id(a6),d7
00085034 6700 0000                  		beq.w	StopAllSound
00085038 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
0008503A 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00085040                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00085040                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00085040                            		; See LevSel_NoCheat for more.
00085040 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00085044 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00085048 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
0008504C 6500 0000                  		blo.w	@locret			; Return if yes
00085050 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00085054 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00085058 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
0008505C 6500 0000                  		blo.w	@locret			; Return if yes
00085060 0C07 00D1                  		cmpi.b	#$D1,d7
00085064 6500 0000                  		bcs.w	Sound_PlaySpecial
00085068 0C07 00DF                  		cmp.b	#$DF,d7
0008506C 6F00 0000                  		ble.w	Sound_D1toDF
00085070 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00085074 6500 0000                  		blo.w	@locret			; Return if yes
00085078 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
0008507C 6300                       		bls.s	Sound_E0toE4		; Branch if yes
0008507E                            ; locret_71F8C:
0008507E                            @locret:
0008507E 4E75                       		rts	
00085080                            ; ===========================================================================
00085080                            
00085080                            Sound_E0toE4:
00085080 0407 00E0                  		subi.b	#flg__First,d7
00085084 E54F                       		lsl.w	#2,d7
00085086 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0008508A                            ; ===========================================================================
0008508A                            
0008508A                            Sound_ExIndex:
0008508A 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
0008508E 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00085092 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00085096 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
0008509A 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
0008509E                            ptr_flgend
0008509E                            ; ===========================================================================
0008509E                            ; ---------------------------------------------------------------------------
0008509E                            ; Play "Say-gaa" PCM sound
0008509E                            ; ---------------------------------------------------------------------------
0008509E                            ; Sound_E1: PlaySega:
0008509E                            PlaySegaSound:
0008509E 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
000850A6 33FC 0000 00A1 1100        		startZ80
000850AE 323C 0011                  		move.w	#$11,d1
000850B2                            ; loc_71FC0:
000850B2                            @busyloop_outer:
000850B2 303C FFFF                  		move.w	#-1,d0
000850B6                            ; loc_71FC4:
000850B6                            @busyloop:
000850B6 4E71                       		nop	
000850B8 51C8 FFFC                  		dbf	d0,@busyloop
000850BC                            
000850BC 51C9 FFF4                  		dbf	d1,@busyloop_outer
000850C0                            
000850C0 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
000850C2 4E75                       		rts	
000850C4                            ; ===========================================================================
000850C4                            ; ---------------------------------------------------------------------------
000850C4                            ; Play music track $81-$9F
000850C4                            ; ---------------------------------------------------------------------------
000850C4                            ; Sound_81to9F:
000850C4                            Sound_PlayBGM:
000850C4 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
000850C8 6600                       		bne.s	@bgmnot1up		; if not, branch
000850CA 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
000850CE 6600 0000                  		bne.w	@locdblret		; if yes, branch
000850D2 4BEE 0040                  		lea	v_music_track_ram(a6),a5
000850D6 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
000850D8                            ; loc_71FE6:
000850D8                            @clearsfxloop:
000850D8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000850DC DAFC 0030                  		adda.w	#TrackSz,a5
000850E0 51C8 FFF6                  		dbf	d0,@clearsfxloop
000850E4                            
000850E4 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
000850E8 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
000850EA                            ; loc_71FF8:
000850EA                            @cleartrackplayloop:
000850EA 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
000850EE DAFC 0030                  		adda.w	#TrackSz,a5
000850F2 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
000850F6                            
000850F6 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000850F8 204E                       		movea.l	a6,a0
000850FA 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000850FE 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00085102                            ; loc_72012:
00085102                            @backupramloop:
00085102 22D8                       		move.l	(a0)+,(a1)+
00085104 51C8 FFFC                  		dbf	d0,@backupramloop
00085108                            
00085108 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
0008510E 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00085110 6000                       		bra.s	@bgm_loadMusic
00085112                            ; ===========================================================================
00085112                            ; loc_72024:
00085112                            @bgmnot1up:
00085112 422E 0027                  		clr.b	f_1up_playing(a6)
00085116 422E 0026                  		clr.b	v_fadein_counter(a6)
0008511A                            ; loc_7202C:
0008511A                            @bgm_loadMusic:
0008511A 4EBA 0000                  		jsr	InitMusicPlayback(pc)
0008511E 2879 0008 4A4A             		movea.l	(Go_SpeedUpIndex).l,a4
00085124 0407 0081                  		subi.b	#bgm__First,d7
00085128 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
0008512E 2879 0008 4A42             		movea.l	(Go_MusicIndex).l,a4
00085134 E54F                       		lsl.w	#2,d7
00085136 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
0008513A 7000                       		moveq	#0,d0
0008513C 3014                       		move.w	(a4),d0			; load voice pointer
0008513E D08C                       		add.l	a4,d0			; It is a relative pointer
00085140 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00085144 102C 0005                  		move.b	5(a4),d0		; load tempo
00085148 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
0008514C                            		;tst.b	f_speedup(a6)
0008514C                            		;beq.s	@nospeedshoes
0008514C                            		;move.b	v_speeduptempo(a6),d0
0008514C                            ; loc_72068:
0008514C                            ;@nospeedshoes:
0008514C 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00085150 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00085154 7200                       		moveq	#0,d1
00085156 264C                       		movea.l	a4,a3
00085158 5C4C                       		addq.w	#6,a4			; Point past header
0008515A 7E00                       		moveq	#0,d7
0008515C 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00085160 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00085164 5307                       		subq.b	#1,d7
00085166 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
0008516A 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
0008516E 7C30                       		moveq	#TrackSz,d6
00085170 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00085174 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00085178 45FA 0000                  		lea	FMDACInitBytes(pc),a2
0008517C                            ; loc_72098:
0008517C                            @bmg_fmloadloop:
0008517C 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00085180 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00085184 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00085188 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
0008518C 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00085190 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00085194 7000                       		moveq	#0,d0
00085196 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00085198 D08B                       		add.l	a3,d0				; Relative pointer
0008519A 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
0008519E 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
000851A2 D2C6                       		adda.w	d6,a1
000851A4 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
000851A8                            		
000851A8 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
000851AE 6600                       		bne.s	@silencefm6
000851B0 702B                       		moveq	#$2B,d0		; DAC enable/disable register
000851B2 7200                       		moveq	#0,d1		; Disable DAC
000851B4 4EBA 0000                  		jsr	WriteFMI(pc)
000851B8 6000 0000                  		bra.w	@bgm_fmdone
000851BC                            ; ===========================================================================
000851BC                            ; loc_720D8:
000851BC                            @silencefm6:
000851BC 7028                       		moveq	#$28,d0		; Key on/off register
000851BE 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
000851C0 4EBA 0000                  		jsr	WriteFMI(pc)
000851C4 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
000851C8 727F                       		moveq	#$7F,d1		; Total silence
000851CA 4EBA 0000                  		jsr	WriteFMII(pc)
000851CE 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
000851D2 727F                       		moveq	#$7F,d1		; Total silence
000851D4 4EBA 0000                  		jsr	WriteFMII(pc)
000851D8 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
000851DC 727F                       		moveq	#$7F,d1		; Total silence
000851DE 4EBA 0000                  		jsr	WriteFMII(pc)
000851E2 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
000851E6 727F                       		moveq	#$7F,d1		; Total silence
000851E8 4EBA 0000                  		jsr	WriteFMII(pc)
000851EC 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
000851F0 123C 00C0                  		move.b	#$C0,d1		; Stereo
000851F4 4EBA 0000                  		jsr	WriteFMII(pc)
000851F8                            ; loc_72114:
000851F8                            @bgm_fmdone:
000851F8 7E00                       		moveq	#0,d7
000851FA 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
000851FE 6700                       		beq.s	@bgm_psgdone	; branch if zero
00085200 5307                       		subq.b	#1,d7
00085202 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00085206 45FA 0000                  		lea	PSGInitBytes(pc),a2
0008520A                            ; loc_72126:
0008520A                            @bgm_psgloadloop:
0008520A 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
0008520E 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00085212 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00085216 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
0008521A 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
0008521E 7000                       		moveq	#0,d0
00085220 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00085222 D08B                       		add.l	a3,d0				; Relative pointer
00085224 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00085228 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
0008522C 101C                       		move.b	(a4)+,d0			; load redundant byte
0008522E 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00085232 D2C6                       		adda.w	d6,a1
00085234 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00085238                            ; loc_72154:
00085238                            @bgm_psgdone:
00085238 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
0008523C 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
0008523E                            ; loc_7215A:
0008523E                            @sfxstoploop:
0008523E 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00085240 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00085244 7000                       		moveq	#0,d0
00085246 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
0008524A 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
0008524C 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
0008524E E508                       		lsl.b	#2,d0			; Convert to index
00085250 6000                       		bra.s	@gotchannelindex
00085252                            ; ===========================================================================
00085252                            ; loc_7216E:
00085252                            @sfxpsgchannel:
00085252 E608                       		lsr.b	#3,d0		; Convert to index
00085254                            ; loc_72170:
00085254                            @gotchannelindex:
00085254 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00085258 2070 0000                  		movea.l	(a0,d0.w),a0
0008525C 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00085260                            ; loc_7217C:
00085260                            @sfxnext:
00085260 D2C6                       		adda.w	d6,a1
00085262 51CF FFDA                  		dbf	d7,@sfxstoploop
00085266                            
00085266 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
0008526A 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
0008526C 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085272                            ; loc_7218E:
00085272                            @checkspecialpsg:
00085272 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00085276 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00085278 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008527E                            ; loc_7219A:
0008527E                            @sendfmnoteoff:
0008527E 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085282 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00085284                            ; loc_721A0:
00085284                            @fmnoteoffloop:
00085284 4EBA 0000                  		jsr	FMNoteOff(pc)
00085288 DAC6                       		adda.w	d6,a5
0008528A 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
0008528E 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00085290                            ; loc_721AC:
00085290                            @psgnoteoffloop:
00085290 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085294 DAC6                       		adda.w	d6,a5
00085296 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
0008529A                            ; loc_721B6:
0008529A                            @locdblret:
0008529A 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
0008529C 4E75                       		rts	
0008529E                            ; ===========================================================================
0008529E                            ; byte_721BA:
0008529E 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
000852A6 00                         		even
000852A6                            ; byte_721C2:
000852A6 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
000852AA 00                         		even
000852AA                            ; ===========================================================================
000852AA                            ; ---------------------------------------------------------------------------
000852AA                            ; Play Spin Dash sound effect
000852AA                            ; ---------------------------------------------------------------------------
000852AA                            Sound_D1toDF:
000852AA 4A2E 0027                  		tst.b	$27(a6)
000852AE 6600 0000                  		bne.w	loc_722C6
000852B2 4A2E 0004                  		tst.b	4(a6)
000852B6 6600 0000                  		bne.w	loc_722C6
000852BA 4A2E 0024                  		tst.b	$24(a6)
000852BE 6600 0000                  		bne.w	loc_722C6
000852C2 4238 C900                  		clr.b	($FFFFC900).w
000852C6 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
000852CA 6600                       		bne.s	@cont3	; if not, branch
000852CC 3F00                       		move.w	d0,-(sp)
000852CE 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
000852D2 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
000852D6 6600                       		bne.s	@cont1		; if it is, branch
000852D8 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
000852DC                            		
000852DC                            @cont1:
000852DC 5200                       		addq.b	#1,d0
000852DE 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
000852E2 6400                       		bcc.s	@cont2		; if it has, branch
000852E4 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
000852E8                            		
000852E8                            @cont2:
000852E8 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
000852EE 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
000852F4 301F                       		move.w	(sp)+,d0
000852F6                            		
000852F6                            @cont3:	
000852F6 2079 0008 4A46             		movea.l	(Go_SoundIndex).l,a0
000852FC 0407 00A0                  		sub.b	#$A0,d7
00085300 6000                       		bra.s	SoundEffects_Common
00085302                            ; ---------------------------------------------------------------------------
00085302                            ; Play normal sound effect
00085302                            ; ---------------------------------------------------------------------------
00085302                            ; Sound_A0toCF:
00085302                            Sound_PlaySFX:
00085302 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00085306 6600 0000                  		bne.w	loc_722C6		; Exit is it is
0008530A 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
0008530E 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00085312 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00085316 6600 0000                  		bne.w	loc_722C6		; Exit if it is
0008531A 4238 C900                  		clr.b	($FFFFC900).w
0008531E 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00085322 6600                       		bne.s	Sound_notB5		; if not, branch
00085324 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00085328 6600                       		bne.s	loc_721EE		; Branch if not
0008532A 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
0008532E                            
0008532E                            loc_721EE:
0008532E 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00085334                            
00085334                            Sound_notB5:
00085334 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00085338 6600                       		bne.s	Sound_notA7		; if not, branch
0008533A 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
0008533E 6600 0000                  		bne.w	locret_722C4			; Return if not
00085342 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00085348                            		
00085348                            Sound_notA7:
00085348 2079 0008 4A46             		movea.l	(Go_SoundIndex).l,a0
0008534E 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00085352                            
00085352                            SoundEffects_Common:		
00085352 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00085354 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00085358 224B                       		movea.l	a3,a1
0008535A 7200                       		moveq	#0,d1
0008535C 3219                       		move.w	(a1)+,d1		; Voice pointer
0008535E D28B                       		add.l	a3,d1			; Relative pointer
00085360 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00085362                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00085362                            		; index entry is above $3F will cause a crash. This is actually the same way that
00085362                            		; this bug is fixed in Ristar's driver.
00085362 7E00                       		moveq	#0,d7	
00085364 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00085366 5307                       		subq.b	#1,d7
00085368 7C30                       		moveq	#TrackSz,d6
0008536A                            
0008536A                            loc_72228:
0008536A 7600                       		moveq	#0,d3
0008536C 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00085370 1803                       		move.b	d3,d4
00085372 6B00                       		bmi.s	loc_72244	; Branch if PSG
00085374 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00085376 E54B                       		lsl.w	#2,d3
00085378 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0008537C 2A75 3000                  		movea.l	(a5,d3.w),a5
00085380 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00085384 6000                       		bra.s	loc_7226E
00085386                            ; ===========================================================================
00085386                            
00085386                            loc_72244:
00085386 E64B                       		lsr.w	#3,d3
00085388 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0008538C 2A75 3000                  		movea.l	(a5,d3.w),a5
00085390 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00085394 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00085398 6600                       		bne.s	loc_7226E	; Branch if not
0008539A 1004                       		move.b	d4,d0
0008539C 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
000853A0 13C0 00C0 0011             		move.b	d0,(psg_input).l
000853A6 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
000853AA 13C0 00C0 0011             		move.b	d0,(psg_input).l
000853B0                            
000853B0                            loc_7226E:
000853B0 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
000853B4 2A75 3000                  		movea.l	(a5,d3.w),a5
000853B8 244D                       		movea.l	a5,a2
000853BA 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000853BC                            
000853BC                            loc_72276:
000853BC 429A                       		clr.l	(a2)+
000853BE 51C8 FFFC                  		dbf	d0,loc_72276
000853C2                            
000853C2 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
000853C4 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
000853C8 7000                       		moveq	#0,d0
000853CA 3019                       		move.w	(a1)+,d0			; Track data pointer
000853CC D08B                       		add.l	a3,d0				; Relative pointer
000853CE 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000853D2 3B59 0008                  		move.w	(a1)+,8(a5)
000853D6 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
000853DA 6700                       		beq.s	@cont		; if not, branch
000853DC 3F00                       		move.w	d0,-(sp)
000853DE 1038 C902                  		move.b	($FFFFC902).w,d0
000853E2 D12D 0008                  		add.b	d0,8(a5)
000853E6 301F                       		move.w	(sp)+,d0
000853E8                            		
000853E8                            @cont:
000853E8 1B7C 0001 000E             		move.b	#1,$E(a5)
000853EE 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
000853F2 4A04                       		tst.b	d4				; Is this a PSG channel?
000853F4 6B00                       		bmi.s	loc_722A8		; Branch if yes
000853F6 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
000853FC 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00085400                            
00085400                            loc_722A8:
00085400 51CF FF68                  		dbf	d7,loc_72228
00085404                            
00085404 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00085408 6A00                       		bpl.s	loc_722B8				; Branch if not
0008540A 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085410                            
00085410                            loc_722B8:
00085410 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00085414 6A00                       		bpl.s	locret_722C4						; Branch if not
00085416 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008541C                            
0008541C                            locret_722C4:
0008541C 4E75                       		rts	
0008541E                            ; ===========================================================================
0008541E                            
0008541E                            loc_722C6:
0008541E 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00085420 4E75                       		rts	
00085422                            ; ===========================================================================
00085422                            ; ---------------------------------------------------------------------------
00085422                            ; RAM addresses for FM and PSG channel variables used by the SFX
00085422                            ; ---------------------------------------------------------------------------
00085422                            ; dword_722CC: BGMChannelRAM:
00085422                            SFX_BGMChannelRAM:
00085422 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00085426 0000 0000                  		dc.l 0
0008542A 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
0008542E 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00085432 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00085436 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
0008543A 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
0008543E 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00085442                            ; dword_722EC: SFXChannelRAM:
00085442                            SFX_SFXChannelRAM:
00085442 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00085446 0000 0000                  		dc.l 0
0008544A 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
0008544E 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00085452 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00085456 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
0008545A 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
0008545E 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00085462                            ; ===========================================================================
00085462                            ; ---------------------------------------------------------------------------
00085462                            ; Play GHZ waterfall sound
00085462                            ; ---------------------------------------------------------------------------
00085462                            ; Sound_D0toDF:
00085462                            Sound_PlaySpecial:
00085462 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00085466 6600 0000                  		bne.w	@locret			; Return if so
0008546A 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
0008546E 6600 0000                  		bne.w	@locret			; Exit if it is
00085472 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00085476 6600 0000                  		bne.w	@locret			; Exit if it is
0008547A 2079 0008 4A3E             		movea.l	(Go_SpecSoundIndex).l,a0
00085480 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00085484 E54F                       		lsl.w	#2,d7
00085486 2670 7000                  		movea.l	(a0,d7.w),a3
0008548A 224B                       		movea.l	a3,a1
0008548C 7000                       		moveq	#0,d0
0008548E 3019                       		move.w	(a1)+,d0			; Voice pointer
00085490 D08B                       		add.l	a3,d0				; Relative pointer
00085492 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00085496 1A19                       		move.b	(a1)+,d5			; Dividing timing
00085498                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00085498                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00085498 7E00                       		moveq	#0,d7	
0008549A 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
0008549C 5307                       		subq.b	#1,d7
0008549E 7C30                       		moveq	#TrackSz,d6
000854A0                            ; loc_72348:
000854A0                            @sfxloadloop:
000854A0 1829 0001                  		move.b	1(a1),d4					; Voice control bits
000854A4 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
000854A6 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000854AC 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000854B0 6000                       		bra.s	@sfxinitpsg
000854B2                            ; ===========================================================================
000854B2                            ; loc_7235A:
000854B2                            @sfxoverridepsg:
000854B2 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000854B8 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000854BC                            ; loc_72364:
000854BC                            @sfxinitpsg:
000854BC 244D                       		movea.l	a5,a2
000854BE 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000854C0                            ; loc_72368:
000854C0                            @clearsfxtrackram:
000854C0 429A                       		clr.l	(a2)+
000854C2 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
000854C6                            
000854C6 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
000854C8 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
000854CC 7000                       		moveq	#0,d0
000854CE 3019                       		move.w	(a1)+,d0			; Track data pointer
000854D0 D08B                       		add.l	a3,d0				; Relative pointer
000854D2 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000854D6 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
000854DA 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
000854E0 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
000854E4 4A04                       		tst.b	d4				; Is this a PSG channel?
000854E6 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
000854E8 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
000854EE                            ; loc_72396:
000854EE                            @sfxpsginitdone:
000854EE 51CF FFB0                  		dbf	d7,@sfxloadloop
000854F2                            
000854F2 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
000854F6 6A00                       		bpl.s	@doneoverride					; Branch if not
000854F8 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000854FE                            ; loc_723A6:
000854FE                            @doneoverride:
000854FE 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00085502 6A00                       		bpl.s	@locret						; Branch if not
00085504 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008550A 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
0008550E 13C4 00C0 0011             		move.b	d4,(psg_input).l
00085514 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00085518 13C4 00C0 0011             		move.b	d4,(psg_input).l
0008551E                            ; locret_723C6:
0008551E                            @locret:
0008551E 4E75                       		rts	
00085520                            ; End of function PlaySoundID
00085520                            
00085520                            ; ===========================================================================
00085520                            ; ---------------------------------------------------------------------------
00085520                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00085520                            ; ---------------------------------------------------------------------------
00085520                            ; The first block would have been used for overriding the music tracks
00085520                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00085520                            ; The third block would be used to set up the Special SFX
00085520                            ; The second block, however, is for the SFX tracks, which have a higher priority
00085520                            ; and would be checked for if they're currently playing
00085520                            ; If they are, then the third block would be used again, this time to mark
00085520                            ; the new tracks as 'currently playing'
00085520                            
00085520                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00085520                            
00085520                            ; BGMFM4PSG3RAM:
00085520                            ;SpecSFX_BGMChannelRAM:
00085520 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00085524 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00085528                            ; SFXFM4PSG3RAM:
00085528                            ;SpecSFX_SFXChannelRAM:
00085528 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
0008552C 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00085530                            ; SpecialSFXFM4PSG3RAM:
00085530                            ;SpecSFX_SpecSFXChannelRAM:
00085530 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00085534 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00085538                            
00085538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085538                            
00085538                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00085538                            StopSFX:
00085538 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0008553A 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
0008553E 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00085540                            ; loc_723EA:
00085540                            @trackloop:
00085540 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00085542 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00085546 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
0008554A 7600                       		moveq	#0,d3
0008554C 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00085550 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00085552 4EBA 0000                  		jsr	FMNoteOff(pc)
00085556 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
0008555A 6600                       		bne.s	@getfmpointer					; Branch if not
0008555C 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085560 6A00                       		bpl.s	@getfmpointer					; Branch if not
00085562                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00085562                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00085562                            		; is playing its sound!
00085562 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085566 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
0008556A 6000                       		bra.s	@gotfmpointer
0008556C                            ; ===========================================================================
0008556C                            ; loc_72416:
0008556C                            @getfmpointer:
0008556C 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
0008556E E50B                       		lsl.b	#2,d3
00085570 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00085574 264D                       		movea.l	a5,a3
00085576 2A70 3000                  		movea.l	(a0,d3.w),a5
0008557A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
0008557E                            ; loc_72428:
0008557E                            @gotfmpointer:
0008557E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085582 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085586 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0008558A 4EBA 0000                  		jsr	SetVoice(pc)
0008558E 2A4B                       		movea.l	a3,a5
00085590 6000                       		bra.s	@nexttrack
00085592                            ; ===========================================================================
00085592                            ; loc_7243C:
00085592                            @trackpsg:
00085592 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085596 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
0008559A 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
0008559E 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000855A0 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
000855A4 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000855A6 E60B                       		lsr.b	#3,d3
000855A8 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
000855AC 2070 3000                  		movea.l	(a0,d3.w),a0
000855B0                            ; loc_7245A:
000855B0                            @gotpsgpointer:
000855B0 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000855B4 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
000855B8 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
000855BE 6600                       		bne.s	@nexttrack			; Branch if not
000855C0 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
000855C8                            ; loc_72472:
000855C8                            @nexttrack:
000855C8 DAFC 0030                  		adda.w	#TrackSz,a5
000855CC 51CF FF72                  		dbf	d7,@trackloop
000855D0                            
000855D0 4E75                       		rts	
000855D2                            ; End of function StopSFX
000855D2                            
000855D2                            
000855D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000855D2                            
000855D2                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
000855D2                            StopSpecialSFX:
000855D2 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000855D6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000855D8 6A00                       		bpl.s	@fadedfm		; Branch if not
000855DA 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000855DE 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
000855E2 6600                       		bne.s	@fadedfm		; Branch if not
000855E4 4EBA 0000                  		jsr	SendFMNoteOff(pc)
000855E8 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
000855EC 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000855F0 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000855F4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000855F6 6A00                       		bpl.s	@fadedfm		; Branch if not
000855F8 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000855FC 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085600 4EBA 0000                  		jsr	SetVoice(pc)
00085604                            ; loc_724AE:
00085604                            @fadedfm:
00085604 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00085608 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008560A 6A00                       		bpl.s	@fadedpsg		; Branch if not
0008560C 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085610 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00085614 6600                       		bne.s	@fadedpsg		; Return if not
00085616 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
0008561A 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
0008561E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085622 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085626 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085628 6A00                       		bpl.s	@fadedpsg		; Return if not
0008562A 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00085630 6600                       		bne.s	@fadedpsg			; Return if not
00085632 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
0008563A                            ; locret_724E4:
0008563A                            @fadedpsg:
0008563A 4E75                       		rts	
0008563C                            ; End of function StopSpecialSFX
0008563C                            
0008563C                            ; ===========================================================================
0008563C                            ; ---------------------------------------------------------------------------
0008563C                            ; Fade out music
0008563C                            ; ---------------------------------------------------------------------------
0008563C                            ; Sound_E0:
0008563C                            FadeOutMusic:
0008563C 4EBA FEFA                  		jsr	StopSFX(pc)
00085640 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00085644 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
0008564A 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00085650 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00085654 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00085658 4E75                       		rts	
0008565A                            
0008565A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008565A                            
0008565A                            ; sub_72504:
0008565A                            DoFadeOut:
0008565A 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
0008565E 6700                       		beq.s	@continuefade		; Branch if yes
00085660 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00085664 4E75                       		rts	
00085666                            ; ===========================================================================
00085666                            ; loc_72510:
00085666                            @continuefade:
00085666 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
0008566A 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
0008566E 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00085674 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085678 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0008567A                            ; loc_72524:
0008567A                            @fmloop:
0008567A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008567C 6A00                       		bpl.s	@nextfm			; Branch if not
0008567E 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00085682 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00085684 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085688 6000                       		bra.s	@nextfm
0008568A                            ; ===========================================================================
0008568A                            ; loc_72534:
0008568A                            @sendfmtl:
0008568A 4EBA 0000                  		jsr	SendVoiceTL(pc)
0008568E                            ; loc_72538:
0008568E                            @nextfm:
0008568E DAFC 0030                  		adda.w	#TrackSz,a5
00085692 51CF FFE6                  		dbf	d7,@fmloop
00085696                            
00085696 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085698                            ; loc_72542:
00085698                            @psgloop:
00085698 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008569A 6A00                       		bpl.s	@nextpsg		; branch if not
0008569C 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
000856A0 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
000856A6 6500                       		blo.s	@sendpsgvol		; Branch if not
000856A8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000856AC 6000                       		bra.s	@nextpsg
000856AE                            ; ===========================================================================
000856AE                            ; loc_72558:
000856AE                            @sendpsgvol:
000856AE 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
000856B2 4EBA 0000                  		jsr	SetPSGVolume(pc)
000856B6                            ; loc_72560:
000856B6                            @nextpsg:
000856B6 DAFC 0030                  		adda.w	#TrackSz,a5
000856BA 51CF FFDC                  		dbf	d7,@psgloop
000856BE                            
000856BE 4E75                       		rts	
000856C0                            ; End of function DoFadeOut
000856C0                            
000856C0                            
000856C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856C0                            
000856C0                            ; sub_7256A:
000856C0                            FMSilenceAll:
000856C0 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
000856C2 7028                       		moveq	#$28,d0		; FM key on/off register
000856C4                            ; loc_7256E:
000856C4                            @noteoffloop:
000856C4 1203                       		move.b	d3,d1
000856C6 4EBA 0000                  		jsr	WriteFMI(pc)
000856CA 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
000856CC 4EBA 0000                  		jsr	WriteFMI(pc)
000856D0 51CB FFF2                  		dbf	d3,@noteoffloop
000856D4                            
000856D4 7040                       		moveq	#$40,d0		; Set TL on FM channels...
000856D6 727F                       		moveq	#$7F,d1		; ... to total attenuation...
000856D8 7802                       		moveq	#2,d4		; ... for all 3 channels...
000856DA                            ; loc_72584:
000856DA                            @channelloop:
000856DA 7603                       		moveq	#3,d3		; ... for all operators on each channel...
000856DC                            ; loc_72586:
000856DC                            @channeltlloop:
000856DC 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
000856E0 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
000856E4 5840                       		addq.w	#4,d0		; Next TL operator
000856E6 51CB FFF4                  		dbf	d3,@channeltlloop
000856EA                            
000856EA 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
000856EE 51CC FFEA                  		dbf	d4,@channelloop
000856F2                            
000856F2 4E75                       		rts	
000856F4                            ; End of function FMSilenceAll
000856F4                            
000856F4                            ; ===========================================================================
000856F4                            ; ---------------------------------------------------------------------------
000856F4                            ; Stop music
000856F4                            ; ---------------------------------------------------------------------------
000856F4                            ; Sound_E4: StopSoundAndMusic:
000856F4                            StopAllSound:
000856F4 702B                       		moveq	#$2B,d0		; Enable/disable DAC
000856F6 123C 0080                  		move.b	#$80,d1		; Enable DAC
000856FA 4EBA 0000                  		jsr	WriteFMI(pc)
000856FE 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00085700 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00085702 4EBA 0000                  		jsr	WriteFMI(pc)
00085706 204E                       		movea.l	a6,a0
00085708                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00085708                            		; Remove the '-$10' to fix this.
00085708 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
0008570C                            ; loc_725B6:
0008570C                            @clearramloop:
0008570C 4298                       		clr.l	(a0)+
0008570E 51C8 FFFC                  		dbf	d0,@clearramloop
00085712                            
00085712 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00085718 4EBA FFA6                  		jsr	FMSilenceAll(pc)
0008571C 6000 0000                  		bra.w	PSGSilenceAll
00085720                            
00085720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085720                            
00085720                            ; sub_725CA:
00085720                            InitMusicPlayback:
00085720 204E                       		movea.l	a6,a0
00085722                            		; Save several values
00085722 1216                       		move.b	v_sndprio(a6),d1
00085724 142E 0027                  		move.b	f_1up_playing(a6),d2
00085728 162E 002A                  		move.b	f_speedup(a6),d3
0008572C 182E 0026                  		move.b	v_fadein_counter(a6),d4
00085730                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00085730 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00085734 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00085738                            ; loc_725E4:
00085738                            @clearramloop:
00085738 4298                       		clr.l	(a0)+
0008573A 51C8 FFFC                  		dbf	d0,@clearramloop
0008573E                            
0008573E                            		; Restore the values saved above
0008573E 1C81                       		move.b	d1,v_sndprio(a6)
00085740 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00085744 1D43 002A                  		move.b	d3,f_speedup(a6)
00085748 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
0008574C 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00085750 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00085756                            		; DANGER! This silences ALL channels, even the ones being used
00085756                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00085756                            		; doesn't affect SFX channels, either.
00085756                            		; This should be replaced with an 'rts'.
00085756 4EBA FF68                  		jsr	FMSilenceAll(pc)
0008575A 6000 0000                  		bra.w	PSGSilenceAll
0008575E                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
0008575E                            		; don't do a very good job of setting up the music tracks.
0008575E                            		; Tracks that aren't defined in a music file's header don't have
0008575E                            		; their channels defined, meaning @sendfmnoteoff won't silence
0008575E                            		; hardware properly. In combination with removing the above
0008575E                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
0008575E                            		; notes.
0008575E                            		; To fix this, I suggest using this code, instead of an 'rts':
0008575E                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
0008575E                            		;lea	FMDACInitBytes(pc),a2
0008575E                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
0008575E                            		;bsr.s	@writeloop
0008575E                            		;lea	PSGInitBytes(pc),a2
0008575E                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
0008575E                            
0008575E                            ;@writeloop:
0008575E                            		;move.b	(a2)+,(a1)		; Write track's channel byte
0008575E                            		;lea	TrackSz(a1),a1		; Next track
0008575E                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
0008575E                            
0008575E                            		;rts
0008575E                            	
0008575E                            ; End of function InitMusicPlayback
0008575E                            
0008575E                            
0008575E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008575E                            
0008575E                            ; sub_7260C:
0008575E                            TempoWait:
0008575E 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00085764 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00085768 7030                       		moveq	#TrackSz,d0
0008576A 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
0008576C                            ; loc_7261A:
0008576C                            @tempoloop:
0008576C 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
0008576E D0C0                       		adda.w	d0,a0	; Advance to next track
00085770 51C9 FFFA                  		dbf	d1,@tempoloop
00085774                            
00085774 4E75                       		rts	
00085776                            ; End of function TempoWait
00085776                            
00085776                            ; ===========================================================================
00085776                            ; ---------------------------------------------------------------------------
00085776                            ; Speed	up music
00085776                            ; ---------------------------------------------------------------------------
00085776                            ; Sound_E2:
00085776                            SpeedUpMusic:
00085776 4A2E 0027                  		tst.b	f_1up_playing(a6)
0008577A 6600                       		bne.s	@speedup_1up
0008577C 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00085782 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00085788 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
0008578E 4E75                       		rts	
00085790                            ; ===========================================================================
00085790                            ; loc_7263E:
00085790                            @speedup_1up:
00085790 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00085796 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
0008579C 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
000857A2 4E75                       		rts	
000857A4                            ; ===========================================================================
000857A4                            ; ---------------------------------------------------------------------------
000857A4                            ; Change music back to normal speed
000857A4                            ; ---------------------------------------------------------------------------
000857A4                            ; Sound_E3:
000857A4                            SlowDownMusic:
000857A4 4A2E 0027                  		tst.b	f_1up_playing(a6)
000857A8 6600                       		bne.s	@slowdown_1up
000857AA 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
000857B0 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
000857B6 422E 002A                  		clr.b	f_speedup(a6)
000857BA 4E75                       		rts	
000857BC                            ; ===========================================================================
000857BC                            ; loc_7266A:
000857BC                            @slowdown_1up:
000857BC 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
000857C2 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
000857C8 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
000857CC 4E75                       		rts	
000857CE                            
000857CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000857CE                            
000857CE                            ; sub_7267C:
000857CE                            DoFadeIn:
000857CE 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
000857D2 6700                       		beq.s	@continuefade		; Branch if yes
000857D4 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
000857D8 4E75                       		rts	
000857DA                            ; ===========================================================================
000857DA                            ; loc_72688:
000857DA                            @continuefade:
000857DA 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
000857DE 6700                       		beq.s	@fadedone		; Branch if yes
000857E0 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
000857E4 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
000857EA 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000857EE 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000857F0                            ; loc_7269E:
000857F0                            @fmloop:
000857F0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000857F2 6A00                       		bpl.s	@nextfm			; Branch if not
000857F4 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
000857F8 4EBA 0000                  		jsr	SendVoiceTL(pc)
000857FC                            ; loc_726AA:
000857FC                            @nextfm:
000857FC DAFC 0030                  		adda.w	#TrackSz,a5
00085800 51CF FFEE                  		dbf	d7,@fmloop
00085804 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00085806                            ; loc_726B4:
00085806                            @psgloop:
00085806 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085808 6A00                       		bpl.s	@nextpsg		; Branch if not
0008580A 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
0008580E 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00085812 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00085816 6500                       		blo.s	@sendpsgvol		; Branch if yes
00085818 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
0008581A                            ; loc_726C8:
0008581A                            @sendpsgvol:
0008581A 4EBA 0000                  		jsr	SetPSGVolume(pc)
0008581E                            ; loc_726CC:
0008581E                            @nextpsg:
0008581E DAFC 0030                  		adda.w	#TrackSz,a5
00085822 51CF FFE2                  		dbf	d7,@psgloop
00085826 4E75                       		rts	
00085828                            ; ===========================================================================
00085828                            ; loc_726D6:
00085828                            @fadedone:
00085828 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
0008582E 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00085832 4E75                       		rts	
00085834                            ; End of function DoFadeIn
00085834                            
00085834                            ; ===========================================================================
00085834                            ; loc_726E2:
00085834                            FMNoteOn:
00085834 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00085838 6600                       		bne.s	@locret		; Return if so
0008583A 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
0008583E 6600                       		bne.s	@locret		; Return if so
00085840 7028                       		moveq	#$28,d0		; Note on/off register
00085842 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00085846 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
0008584A 6000 0000                  		bra.w	WriteFMI
0008584E                            ; ===========================================================================
0008584E                            ; locret_726FC:
0008584E                            @locret:
0008584E 4E75                       		rts	
00085850                            
00085850                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085850                            
00085850                            ; sub_726FE:
00085850                            FMNoteOff:
00085850 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00085854 6600                       		bne.s	locret_72714	; Return if yes
00085856 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0008585A 6600                       		bne.s	locret_72714	; Return if yes
0008585C                            ; loc_7270A:
0008585C                            SendFMNoteOff:
0008585C 7028                       		moveq	#$28,d0		; Note on/off register
0008585E 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00085862 6000 0000                  		bra.w	WriteFMI
00085866                            ; ===========================================================================
00085866                            
00085866                            locret_72714:
00085866 4E75                       		rts	
00085868                            ; End of function FMNoteOff
00085868                            
00085868                            ; ===========================================================================
00085868                            ; loc_72716:
00085868                            WriteFMIorIIMain:
00085868 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
0008586C 6600                       		bne.s	@locret		; Return if yes
0008586E 6000 0000                  		bra.w	WriteFMIorII
00085872                            ; ===========================================================================
00085872                            ; locret_72720:
00085872                            @locret:
00085872 4E75                       		rts	
00085874                            
00085874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085874                            
00085874                            ; sub_72722:
00085874                            WriteFMIorII:
00085874 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
0008587A 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
0008587C D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00085880                            ; End of function WriteFMIorII
00085880                            
00085880                            
00085880                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085880                            
00085880                            ; The reason I think this is an *early* SMPS 68k Type 1b
00085880                            ; is because this subroutine is the one from Type 1a:
00085880                            ; other Type 1b drivers have a newer, optimised version.
00085880                            ; The driver itself is Type 1b, with this odd exception.
00085880                            
00085880                            ; sub_7272E:
00085880                            WriteFMI:
00085880 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085886 0802 0007                  		btst	#7,d2		; Is FM busy?
0008588A 66F4                       		bne.s	WriteFMI	; Loop if so
0008588C 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00085892 4E71                       		nop	
00085894 4E71                       		nop	
00085896 4E71                       		nop	
00085898                            ; loc_72746:
00085898                            @waitloop:
00085898 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0008589E 0802 0007                  		btst	#7,d2		; Is FM busy?
000858A2 66F4                       		bne.s	@waitloop	; Loop if so
000858A4                            
000858A4 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
000858AA 4E75                       		rts	
000858AC                            ; End of function WriteFMI
000858AC                            
000858AC                            ; ===========================================================================
000858AC                            ; loc_7275A:
000858AC                            WriteFMIIPart:
000858AC 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
000858B0 0882 0002                  		bclr	#2,d2			; Clear chip toggle
000858B4 D002                       		add.b	d2,d0			; Add in to destination register
000858B6                            
000858B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000858B6                            
000858B6                            ; sub_72764:
000858B6                            WriteFMII:
000858B6 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000858BC 0802 0007                  		btst	#7,d2		; Is FM busy?
000858C0 66F4                       		bne.s	WriteFMII	; Loop if so
000858C2 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
000858C8 4E71                       		nop	
000858CA 4E71                       		nop	
000858CC 4E71                       		nop	
000858CE                            ; loc_7277C:
000858CE                            @waitloop:
000858CE 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000858D4 0802 0007                  		btst	#7,d2		; Is FM busy?
000858D8 66F4                       		bne.s	@waitloop	; Loop if so
000858DA                            
000858DA 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
000858E0 4E75                       		rts	
000858E2                            ; End of function WriteFMII
000858E2                            
000858E2                            ; ===========================================================================
000858E2                            ; ---------------------------------------------------------------------------
000858E2                            ; FM Note Values: b-0 to a#8
000858E2                            ; ---------------------------------------------------------------------------
000858E2                            ; word_72790: FM_Notes:
000858E2                            FMFrequencies:
000858E2 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
000858FA 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00085912 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
0008592A 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00085942 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
0008595A 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00085972 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
0008598A 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
000859A2                            
000859A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859A2                            
000859A2                            ; sub_72850:
000859A2                            PSGUpdateTrack:
000859A2 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
000859A6 6600                       		bne.s	@notegoing
000859A8 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
000859AC 4EBA 0000                  		jsr	PSGDoNext(pc)
000859B0 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
000859B4 6000 0000                  		bra.w	PSGDoVolFX
000859B8                            ; ===========================================================================
000859B8                            ; loc_72866:
000859B8                            @notegoing:
000859B8 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
000859BC 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
000859C0 4EBA F4EA                  		jsr	DoModulation(pc)
000859C4 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
000859C8 4E75                       		rts
000859CA                            ; End of function PSGUpdateTrack
000859CA                            
000859CA                            
000859CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859CA                            
000859CA                            ; sub_72878:
000859CA                            PSGDoNext:
000859CA 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
000859CE 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
000859D2                            ; loc_72880:
000859D2                            @noteloop:
000859D2 7A00                       		moveq	#0,d5
000859D4 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000859D6 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000859DA 6500                       		blo.s	@gotnote	; Branch if not
000859DC 4EBA 0000                  		jsr	CoordFlag(pc)
000859E0 60F0                       		bra.s	@noteloop
000859E2                            ; ===========================================================================
000859E2                            ; loc_72890:
000859E2                            @gotnote:
000859E2 4A05                       		tst.b	d5		; Is it a note?
000859E4 6A00                       		bpl.s	@gotduration	; Branch if not
000859E6 4EBA 0000                  		jsr	PSGSetFreq(pc)
000859EA 1A1C                       		move.b	(a4)+,d5	; Get another byte
000859EC 4A05                       		tst.b	d5		; Is it a duration?
000859EE 6A00                       		bpl.s	@gotduration	; Branch if yes
000859F0 534C                       		subq.w	#1,a4		; Put byte back
000859F2 6000 F452                  		bra.w	FinishTrackUpdate
000859F6                            ; ===========================================================================
000859F6                            ; loc_728A4:
000859F6                            @gotduration:
000859F6 4EBA F42E                  		jsr	SetDuration(pc)
000859FA 6000 F44A                  		bra.w	FinishTrackUpdate
000859FE                            ; End of function PSGDoNext
000859FE                            
000859FE                            
000859FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859FE                            
000859FE                            ; sub_728AC:
000859FE                            PSGSetFreq:
000859FE 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00085A02 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00085A04 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00085A08 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00085A0C E34D                       		lsl.w	#1,d5
00085A0E 41FA 0000                  		lea	PSGFrequencies(pc),a0
00085A12 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00085A18 6000 F42C                  		bra.w	FinishTrackUpdate
00085A1C                            ; ===========================================================================
00085A1C                            ; loc_728CA:
00085A1C                            @restpsg:
00085A1C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085A20 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
00085A26 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
00085A2A 6000 0000                  		bra.w	PSGNoteOff
00085A2E                            ; End of function PSGSetFreq
00085A2E                            
00085A2E                            
00085A2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085A2E                            
00085A2E                            ; sub_728DC:
00085A2E                            PSGDoNoteOn:
00085A2E 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00085A32 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00085A34                            ; End of function PSGDoNoteOn
00085A34                            
00085A34                            
00085A34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085A34                            
00085A34                            ; sub_728E2:
00085A34                            PSGUpdateFreq:
00085A34 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00085A38 4880                       		ext.w	d0
00085A3A DC40                       		add.w	d0,d6		; Add to frequency
00085A3C 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00085A40 6600                       		bne.s	@locret		; Return if yes
00085A42 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00085A46 6600                       		bne.s	@locret		; Return if yes
00085A48 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00085A4C 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00085A50 6600                       		bne.s	@notnoise	; Branch if not
00085A52 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00085A56                            ; loc_72904:
00085A56                            @notnoise:
00085A56 3206                       		move.w	d6,d1
00085A58 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00085A5C 8001                       		or.b	d1,d0		; Latch tone data to channel
00085A5E E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00085A60 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00085A64 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085A6A 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085A70                            ; locret_7291E:
00085A70                            @locret:
00085A70 4E75                       		rts	
00085A72                            ; End of function PSGUpdateFreq
00085A72                            
00085A72                            ; ===========================================================================
00085A72                            ; loc_72920:
00085A72                            PSGSetRest:
00085A72 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00085A76 4E75                       		rts	
00085A78                            
00085A78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085A78                            
00085A78                            ; sub_72926:
00085A78                            PSGUpdateVolFX:
00085A78 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
00085A7C 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00085A80                            ; loc_7292E:
00085A80                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00085A80 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00085A84 7000                       		moveq	#0,d0
00085A86 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00085A8A 6700                       		beq.s	SetPSGVolume
00085A8C 2079 0008 4A4E             		movea.l	(Go_PSGIndex).l,a0
00085A92 5340                       		subq.w	#1,d0
00085A94 E548                       		lsl.w	#2,d0
00085A96 2070 0000                  		movea.l	(a0,d0.w),a0
00085A9A 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
00085A9E 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
00085AA2 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
00085AA6 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00085AAA 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
00085AAC 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
00085AB0 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00085AB2                            ; loc_72960:
00085AB2                            @gotflutter:
00085AB2 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00085AB4 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00085AB8 6500                       		blo.s	SetPSGVolume	; Branch if not
00085ABA 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
00085ABC                            ; End of function PSGUpdateVolFX
00085ABC                            
00085ABC                            
00085ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085ABC                            
00085ABC                            ; sub_7296A:
00085ABC                            SetPSGVolume:
00085ABC 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00085AC0 6600                       		bne.s	locret_7298A	; Return if so
00085AC2 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085AC6 6600                       		bne.s	locret_7298A	; Return if so
00085AC8 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
00085ACC 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
00085ACE                            ; loc_7297C:
00085ACE                            PSGSendVolume:
00085ACE 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
00085AD2 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
00085AD6 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085ADC                            
00085ADC                            locret_7298A:
00085ADC 4E75                       		rts	
00085ADE                            ; ===========================================================================
00085ADE                            ; loc_7298C: PSGCheckNoteFill:
00085ADE                            PSGCheckNoteTimeout:
00085ADE 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
00085AE2 67EA                       		beq.s	PSGSendVolume			; Branch if not
00085AE4 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00085AE8 66E4                       		bne.s	PSGSendVolume			; Branch if not
00085AEA 4E75                       		rts	
00085AEC                            ; End of function SetPSGVolume
00085AEC                            
00085AEC                            ; ===========================================================================
00085AEC                            ; loc_7299A: FlutterDone:
00085AEC                            VolEnvHold:
00085AEC 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
00085AF0 4E75                       		rts	
00085AF2                            
00085AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085AF2                            
00085AF2                            ; sub_729A0:
00085AF2                            PSGNoteOff:
00085AF2 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085AF6 6600                       		bne.s	locret_729B4	; Return if so
00085AF8                            ; loc_729A6:
00085AF8                            SendPSGNoteOff:
00085AF8 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
00085AFC 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00085B00 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085B06                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
00085B06                            		; risk of music accidentally playing noise because it can't detect if
00085B06                            		; the PSG4/noise channel needs muting on track initialisation.
00085B06                            		; S&K's driver fixes it by doing this:
00085B06 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
00085B0A 6600                       		bne.s	locret_729B4
00085B0C 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00085B14                            
00085B14                            locret_729B4:
00085B14 4E75                       		rts	
00085B16                            ; End of function PSGNoteOff
00085B16                            
00085B16                            
00085B16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B16                            
00085B16                            ; sub_729B6:
00085B16                            PSGSilenceAll:
00085B16 41F9 00C0 0011             		lea	(psg_input).l,a0
00085B1C 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00085B20 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00085B24 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00085B28 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00085B2C 4E75                       		rts	
00085B2E                            ; End of function PSGSilenceAll
00085B2E                            
00085B2E                            ; ===========================================================================
00085B2E                            ; word_729CE:
00085B2E                            PSGFrequencies:
00085B2E 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00085B3E 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00085B4E 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00085B5E 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
00085B6E 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
00085B7E 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00085B8E 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
00085B9E 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
00085BAE 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
00085BBA                            
00085BBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085BBA                            
00085BBA                            ; sub_72A5A:
00085BBA                            CoordFlag:
00085BBA 0445 00E0                  		subi.w	#$E0,d5
00085BBE E54D                       		lsl.w	#2,d5
00085BC0 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00085BC4                            ; End of function CoordFlag
00085BC4                            
00085BC4                            ; ===========================================================================
00085BC4                            ; loc_72A64:
00085BC4                            coordflagLookup:
00085BC4 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
00085BC8                            ; ===========================================================================
00085BC8 6000 0000                  		bra.w	cfDetune		; $E1
00085BCC                            ; ===========================================================================
00085BCC 6000 0000                  		bra.w	cfSetCommunication	; $E2
00085BD0                            ; ===========================================================================
00085BD0 6000 0000                  		bra.w	cfJumpReturn		; $E3
00085BD4                            ; ===========================================================================
00085BD4 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00085BD8                            ; ===========================================================================
00085BD8 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00085BDC                            ; ===========================================================================
00085BDC 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00085BE0                            ; ===========================================================================
00085BE0 6000 0000                  		bra.w	cfHoldNote		; $E7
00085BE4                            ; ===========================================================================
00085BE4 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00085BE8                            ; ===========================================================================
00085BE8 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00085BEC                            ; ===========================================================================
00085BEC 6000 0000                  		bra.w	cfSetTempo		; $EA
00085BF0                            ; ===========================================================================
00085BF0 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00085BF4                            ; ===========================================================================
00085BF4 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00085BF8                            ; ===========================================================================
00085BF8 6000 0000                  		bra.w	cfClearPush		; $ED
00085BFC                            ; ===========================================================================
00085BFC 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00085C00                            ; ===========================================================================
00085C00 6000 0000                  		bra.w	cfSetVoice		; $EF
00085C04                            ; ===========================================================================
00085C04 6000 0000                  		bra.w	cfModulation		; $F0
00085C08                            ; ===========================================================================
00085C08 6000 0000                  		bra.w	cfEnableModulation	; $F1
00085C0C                            ; ===========================================================================
00085C0C 6000 0000                  		bra.w	cfStopTrack		; $F2
00085C10                            ; ===========================================================================
00085C10 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00085C14                            ; ===========================================================================
00085C14 6000 0000                  		bra.w	cfDisableModulation	; $F4
00085C18                            ; ===========================================================================
00085C18 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00085C1C                            ; ===========================================================================
00085C1C 6000 0000                  		bra.w	cfJumpTo		; $F6
00085C20                            ; ===========================================================================
00085C20 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00085C24                            ; ===========================================================================
00085C24 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00085C28                            ; ===========================================================================
00085C28 6000 0000                  		bra.w	cfOpF9			; $F9
00085C2C                            ; ===========================================================================
00085C2C                            ; loc_72ACC:
00085C2C                            cfPanningAMSFMS:
00085C2C 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00085C2E 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085C32 6B00                       		bmi.s	locret_72AEA		; Return if yes
00085C34 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00085C38 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00085C3C 8200                       		or.b	d0,d1			; Mask in new value
00085C3E 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00085C42 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085C46 6000 FC20                  		bra.w	WriteFMIorIIMain
00085C4A                            ; ===========================================================================
00085C4A                            
00085C4A                            locret_72AEA:
00085C4A 4E75                       		rts	
00085C4C                            ; ===========================================================================
00085C4C                            ; loc_72AEC: cfAlterNotes:
00085C4C                            cfDetune:
00085C4C 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00085C50 4E75                       		rts	
00085C52                            ; ===========================================================================
00085C52                            ; loc_72AF2: cfUnknown1:
00085C52                            cfSetCommunication:
00085C52 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00085C56 4E75                       		rts	
00085C58                            ; ===========================================================================
00085C58                            ; loc_72AF8:
00085C58                            cfJumpReturn:
00085C58 7000                       		moveq	#0,d0
00085C5A 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00085C5E 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00085C62 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00085C6A 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00085C6C 5800                       		addq.b	#4,d0			; Actually 'pop' value
00085C6E 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00085C72 4E75                       		rts	
00085C74                            ; ===========================================================================
00085C74                            ; loc_72B14:
00085C74                            cfFadeInToPrevious:
00085C74 204E                       		movea.l	a6,a0
00085C76 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00085C7A 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
00085C7E                            ; loc_72B1E:
00085C7E                            @restoreramloop:
00085C7E 20D9                       		move.l	(a1)+,(a0)+
00085C80 51C8 FFFC                  		dbf	d0,@restoreramloop
00085C84                            
00085C84 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00085C8A 264D                       		movea.l	a5,a3
00085C8C 1C3C 0028                  		move.b	#$28,d6
00085C90 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
00085C94 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085C96 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085C9A                            ; loc_72B3A:
00085C9A                            @fmloop:
00085C9A 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085C9E 6700                       		beq.s	@nextfm		; Branch if not
00085CA0 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085CA4 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00085CA8 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085CAC 6600                       		bne.s	@nextfm		; Branch if yes
00085CAE 7000                       		moveq	#0,d0
00085CB0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00085CB4 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085CB8 4EBA 0000                  		jsr	SetVoice(pc)
00085CBC                            ; loc_72B5C:
00085CBC                            @nextfm:
00085CBC DAFC 0030                  		adda.w	#TrackSz,a5
00085CC0 51CF FFD8                  		dbf	d7,@fmloop
00085CC4                            
00085CC4 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085CC6                            ; loc_72B66:
00085CC6                            @psgloop:
00085CC6 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085CCA 6700                       		beq.s	@nextpsg	; Branch if not
00085CCC 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085CD0 4EBA FE20                  		jsr	PSGNoteOff(pc)
00085CD4 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00085CD8                            ; loc_72B78:
00085CD8                            @nextpsg:
00085CD8 DAFC 0030                  		adda.w	#TrackSz,a5
00085CDC 51CF FFE8                  		dbf	d7,@psgloop
00085CE0                            		
00085CE0 2A4B                       		movea.l	a3,a5
00085CE2 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00085CE8 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00085CEE 422E 0027                  		clr.b	f_1up_playing(a6)
00085CF2 33FC 0000 00A1 1100        		startZ80
00085CFA 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
00085CFC 4E75                       		rts	
00085CFE                            ; ===========================================================================
00085CFE                            ; loc_72B9E:
00085CFE                            cfSetTempoDivider:
00085CFE 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00085D02 4E75                       		rts	
00085D04                            ; ===========================================================================
00085D04                            ; loc_72BA4: cfSetVolume:
00085D04                            cfChangeFMVolume:
00085D04 101C                       		move.b	(a4)+,d0		; Get parameter
00085D06 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00085D0A 6000 0000                  		bra.w	SendVoiceTL
00085D0E                            ; ===========================================================================
00085D0E                            ; loc_72BAE: cfPreventAttack:
00085D0E                            cfHoldNote:
00085D0E 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00085D12 4E75                       		rts	
00085D14                            ; ===========================================================================
00085D14                            ; loc_72BB4: cfNoteFill
00085D14                            cfNoteTimeout:
00085D14 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00085D18 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00085D1C 4E75                       		rts	
00085D1E                            ; ===========================================================================
00085D1E                            ; loc_72BBE: cfAddKey:
00085D1E                            cfChangeTransposition:
00085D1E 101C                       		move.b	(a4)+,d0		; Get parameter
00085D20 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00085D24 4E75                       		rts	
00085D26                            ; ===========================================================================
00085D26                            ; loc_72BC6:
00085D26                            cfSetTempo:
00085D26 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00085D2A 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00085D2E 4E75                       		rts	
00085D30                            ; ===========================================================================
00085D30                            ; loc_72BD0: cfSetTempoMod:
00085D30                            cfSetTempoDividerAll:
00085D30 41EE 0040                  		lea	v_music_track_ram(a6),a0
00085D34 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00085D36 7230                       		moveq	#TrackSz,d1
00085D38 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00085D3A                            ; loc_72BDA:
00085D3A                            @trackloop:
00085D3A 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00085D3E D0C1                       		adda.w	d1,a0
00085D40 51CA FFF8                  		dbf	d2,@trackloop
00085D44                            
00085D44 4E75                       		rts	
00085D46                            ; ===========================================================================
00085D46                            ; loc_72BE6: cfChangeVolume:
00085D46                            cfChangePSGVolume:
00085D46 101C                       		move.b	(a4)+,d0		; Get volume change
00085D48 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00085D4C 4E75                       		rts	
00085D4E                            ; ===========================================================================
00085D4E                            ; loc_72BEE:
00085D4E                            cfClearPush:
00085D4E 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00085D52 4E75                       		rts	
00085D54                            ; ===========================================================================
00085D54                            ; loc_72BF4:
00085D54                            cfStopSpecialFM4:
00085D54 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00085D58 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085D5C 4EBA FAF2                  		jsr	FMNoteOff(pc)
00085D60 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00085D64 6B00                       		bmi.s	@locexit					; Branch if yes
00085D66 264D                       		movea.l	a5,a3
00085D68 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085D6C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085D70 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085D74 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085D78 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085D7C 4EBA 0000                  		jsr	SetVoice(pc)
00085D80 2A4B                       		movea.l	a3,a5
00085D82                            ; loc_72C22:
00085D82                            @locexit:
00085D82 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00085D84 4E75                       		rts	
00085D86                            ; ===========================================================================
00085D86                            ; loc_72C26:
00085D86                            cfSetVoice:
00085D86 7000                       		moveq	#0,d0
00085D88 101C                       		move.b	(a4)+,d0		; Get new voice
00085D8A 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00085D8E 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00085D92 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00085D96 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00085D9A 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00085D9E 6700                       		beq.s	SetVoice		; If yes, branch
00085DA0 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00085DA4 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00085DA8 6B00                       		bmi.s	SetVoice		; If yes, branch
00085DAA 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00085DAE                            
00085DAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085DAE                            
00085DAE                            ; sub_72C4E:
00085DAE                            SetVoice:
00085DAE 5340                       		subq.w	#1,d0
00085DB0 6B00                       		bmi.s	@havevoiceptr
00085DB2 323C 0019                  		move.w	#25,d1
00085DB6                            ; loc_72C56:
00085DB6                            @voicemultiply:
00085DB6 D2C1                       		adda.w	d1,a1
00085DB8 51C8 FFFC                  		dbf	d0,@voicemultiply
00085DBC                            ; loc_72C5C:
00085DBC                            @havevoiceptr:
00085DBC 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00085DBE 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00085DC2 1801                       		move.b	d1,d4
00085DC4 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00085DC8 4EBA FAAA                  		jsr	WriteFMIorII(pc)
00085DCC 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00085DD0 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00085DD2                            ; loc_72C72:
00085DD2                            @sendvoiceloop:
00085DD2 101A                       		move.b	(a2)+,d0
00085DD4 1219                       		move.b	(a1)+,d1
00085DD6 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00085DDA 51CB FFF6                  		dbf	d3,@sendvoiceloop
00085DDE                            
00085DDE 7A03                       		moveq	#3,d5
00085DE0 0244 0007                  		andi.w	#7,d4			; Get algorithm
00085DE4 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00085DE8 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00085DEC                            ; loc_72C8C:
00085DEC                            @sendtlloop:
00085DEC 101A                       		move.b	(a2)+,d0
00085DEE 1219                       		move.b	(a1)+,d1
00085DF0 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085DF2 6400                       		bcc.s	@sendtl		; Branch if not
00085DF4 D203                       		add.b	d3,d1		; Include additional attenuation
00085DF6                            ; loc_72C96:
00085DF6                            @sendtl:
00085DF6 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00085DFA 51CD FFF0                  		dbf	d5,@sendtlloop
00085DFE                            		
00085DFE 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00085E02 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00085E06 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00085E0A                            
00085E0A                            locret_72CAA:
00085E0A 4E75                       		rts	
00085E0C                            ; End of function SetVoice
00085E0C                            
00085E0C                            ; ===========================================================================
00085E0C                            ; byte_72CAC:
00085E0C 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00085E14                            
00085E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085E14                            
00085E14                            ; sub_72CB4:
00085E14                            SendVoiceTL:
00085E14 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085E18 6600                       		bne.s	@locret		; Return if so
00085E1A 7000                       		moveq	#0,d0
00085E1C 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085E20 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085E24 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085E28 6700                       		beq.s	@gotvoiceptr
00085E2A                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00085E2A                            		; of a6!
00085E2A 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00085E2E 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085E32 6B00                       		bmi.s	@gotvoiceptr
00085E34 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00085E38                            ; loc_72CD8:
00085E38                            @gotvoiceptr:
00085E38 5340                       		subq.w	#1,d0
00085E3A 6B00                       		bmi.s	@gotvoice
00085E3C 323C 0019                  		move.w	#25,d1
00085E40                            ; loc_72CE0:
00085E40                            @voicemultiply:
00085E40 D2C1                       		adda.w	d1,a1
00085E42 51C8 FFFC                  		dbf	d0,@voicemultiply
00085E46                            ; loc_72CE6:
00085E46                            @gotvoice:
00085E46 D2FC 0015                  		adda.w	#21,a1				; Want TL
00085E4A 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00085E4E 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00085E52 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00085E56 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00085E5A 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00085E5E 6B00                       		bmi.s	@locret				; If negative, stop
00085E60 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00085E62                            ; loc_72D02:
00085E62                            @sendtlloop:
00085E62 101A                       		move.b	(a2)+,d0
00085E64 1219                       		move.b	(a1)+,d1
00085E66 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085E68 6400                       		bcc.s	@senttl		; Branch if not
00085E6A D203                       		add.b	d3,d1		; Include additional attenuation
00085E6C 6500                       		bcs.s	@senttl		; Branch on overflow
00085E6E 4EBA FA04                  		jsr	WriteFMIorII(pc)
00085E72                            ; loc_72D12:
00085E72                            @senttl:
00085E72 51CD FFEE                  		dbf	d5,@sendtlloop
00085E76                            ; locret_72D16:
00085E76                            @locret:
00085E76 4E75                       		rts	
00085E78                            ; End of function SendVoiceTL
00085E78                            
00085E78                            ; ===========================================================================
00085E78                            ; byte_72D18:
00085E78                            FMInstrumentOperatorTable:
00085E78 30                         		dc.b  $30		; Detune/multiple operator 1
00085E79 38                         		dc.b  $38		; Detune/multiple operator 3
00085E7A 34                         		dc.b  $34		; Detune/multiple operator 2
00085E7B 3C                         		dc.b  $3C		; Detune/multiple operator 4
00085E7C 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00085E7D 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00085E7E 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00085E7F 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00085E80 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00085E81 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00085E82 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00085E83 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00085E84 70                         		dc.b  $70		; Secondary decay rate operator 1
00085E85 78                         		dc.b  $78		; Secondary decay rate operator 3
00085E86 74                         		dc.b  $74		; Secondary decay rate operator 2
00085E87 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00085E88 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00085E89 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00085E8A 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00085E8B 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00085E8C                            FMInstrumentOperatorTable_End
00085E8C                            ; byte_72D2C:
00085E8C                            FMInstrumentTLTable:
00085E8C 40                         		dc.b  $40		; Total level operator 1
00085E8D 48                         		dc.b  $48		; Total level operator 3
00085E8E 44                         		dc.b  $44		; Total level operator 2
00085E8F 4C                         		dc.b  $4C		; Total level operator 4
00085E90                            FMInstrumentTLTable_End
00085E90                            ; ===========================================================================
00085E90                            ; loc_72D30:
00085E90                            cfModulation:
00085E90 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00085E94 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00085E98 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00085E9C 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00085EA0 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00085EA4 101C                       		move.b	(a4)+,d0			; Modulation steps...
00085EA6 E208                       		lsr.b	#1,d0				; ... divided by 2...
00085EA8 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00085EAC 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00085EB0 4E75                       		rts	
00085EB2                            ; ===========================================================================
00085EB2                            ; loc_72D52:
00085EB2                            cfEnableModulation:
00085EB2 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00085EB6 4E75                       		rts	
00085EB8                            ; ===========================================================================
00085EB8                            ; loc_72D58:
00085EB8                            cfStopTrack:
00085EB8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085EBC 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085EC0 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085EC4 6B00                       		bmi.s	@stoppsg		; Branch if yes
00085EC6 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00085ECA 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00085ECE 4EBA F980                  		jsr	FMNoteOff(pc)
00085ED2 6000                       		bra.s	@stoppedchannel
00085ED4                            ; ===========================================================================
00085ED4                            ; loc_72D74:
00085ED4                            @stoppsg:
00085ED4 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00085ED8                            ; loc_72D78:
00085ED8                            @stoppedchannel:
00085ED8 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00085EDC 6A00 0000                  		bpl.w	@locexit		; Exit if not
00085EE0 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00085EE2 7000                       		moveq	#0,d0
00085EE4 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00085EE8 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00085EEA 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00085EEE 264D                       		movea.l	a5,a3
00085EF0 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00085EF4 6600                       		bne.s	@getpointer		; Branch if not
00085EF6 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085EFA 6A00                       		bpl.s	@getpointer		; Branch if not
00085EFC 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085F00 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00085F04 6000                       		bra.s	@gotpointer
00085F06                            ; ===========================================================================
00085F06                            ; loc_72DA8:
00085F06                            @getpointer:
00085F06 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00085F08 E508                       		lsl.b	#2,d0
00085F0A 2A70 0000                  		movea.l	(a0,d0.w),a5
00085F0E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085F10 6A00                       		bpl.s	@novoiceupd		; Branch if not
00085F12 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00085F16                            ; loc_72DB8:
00085F16                            @gotpointer:
00085F16 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085F1A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085F1E 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085F22 4EBA FE8A                  		jsr	SetVoice(pc)
00085F26                            ; loc_72DC8:
00085F26                            @novoiceupd:
00085F26 2A4B                       		movea.l	a3,a5
00085F28 6000                       		bra.s	@locexit
00085F2A                            ; ===========================================================================
00085F2A                            ; loc_72DCC:
00085F2A                            @getpsgptr:
00085F2A 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085F2E 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00085F30 6A00                       		bpl.s	@getchannelptr	; Branch if not
00085F32 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00085F36 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085F38 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00085F3C 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085F3E                            ; loc_72DE0:
00085F3E                            @getchannelptr:
00085F3E 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
00085F42 E608                       		lsr.b	#3,d0
00085F44 2070 0000                  		movea.l	(a0,d0.w),a0
00085F48                            ; loc_72DEA:
00085F48                            @gotchannelptr:
00085F48 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085F4C 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085F50 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00085F56 6600                       		bne.s	@locexit			; Branch if not
00085F58 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00085F60                            ; loc_72E02:
00085F60                            @locexit:
00085F60 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00085F62 4E75                       		rts	
00085F64                            ; ===========================================================================
00085F64                            ; loc_72E06:
00085F64                            cfSetPSGNoise:
00085F64 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00085F6A 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00085F6E 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00085F72 6600                       		bne.s	@locret				; Return if yes
00085F74 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00085F7C                            ; locret_72E1E:
00085F7C                            @locret:
00085F7C 4E75                       		rts	
00085F7E                            ; ===========================================================================
00085F7E                            ; loc_72E20:
00085F7E                            cfDisableModulation:
00085F7E 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00085F82 4E75                       		rts	
00085F84                            ; ===========================================================================
00085F84                            ; loc_72E26:
00085F84                            cfSetPSGTone:
00085F84 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00085F88 4E75                       		rts	
00085F8A                            ; ===========================================================================
00085F8A                            ; loc_72E2C:
00085F8A                            cfJumpTo:
00085F8A 101C                       		move.b	(a4)+,d0	; High byte of offset
00085F8C E148                       		lsl.w	#8,d0		; Shift it into place
00085F8E 101C                       		move.b	(a4)+,d0	; Low byte of offset
00085F90 D8C0                       		adda.w	d0,a4		; Add to current position
00085F92 534C                       		subq.w	#1,a4		; Put back one byte
00085F94 4E75                       		rts	
00085F96                            ; ===========================================================================
00085F96                            ; loc_72E38:
00085F96                            cfRepeatAtPos:
00085F96 7000                       		moveq	#0,d0
00085F98 101C                       		move.b	(a4)+,d0			; Loop index
00085F9A 121C                       		move.b	(a4)+,d1			; Repeat count
00085F9C 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00085FA0 6600                       		bne.s	@loopexists			; Branch if yes
00085FA2 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00085FA6                            ; loc_72E48:
00085FA6                            @loopexists:
00085FA6 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00085FAA 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00085FAC 544C                       		addq.w	#2,a4				; Skip target address
00085FAE 4E75                       		rts	
00085FB0                            ; ===========================================================================
00085FB0                            ; loc_72E52:
00085FB0                            cfJumpToGosub:
00085FB0 7000                       		moveq	#0,d0
00085FB2 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00085FB6 5900                       		subq.b	#4,d0				; Add space for another target
00085FB8 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00085FBC 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00085FC0 60C8                       		bra.s	cfJumpTo
00085FC2                            ; ===========================================================================
00085FC2                            ; loc_72E64:
00085FC2                            cfOpF9:
00085FC2 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00085FC6 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085FCA 4EBA F8B4                  		jsr	WriteFMI(pc)
00085FCE 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00085FD2 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085FD6 6000 F8A8                  		bra.w	WriteFMI
00085FDA                            ; ===========================================================================
00085FDA                            
00085FDA                            Kos_Z80:
00085FDA                            		incbin	"sound\z80.bin", 0, $15
00085FEF 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00085FF0                            		incbin	"sound\z80.bin", $16, 6
00085FF6 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00085FF7                            		incbin	"sound\z80.bin", $1D, $93
0008608A 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
0008608C                            		incbin	"sound\z80.bin", $B2, 1
0008608D 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
0008608F                            		incbin	"sound\z80.bin", $B5, $16AB
00087730                            		even
00087730                            
00087730                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
00088A54 00                         		even
00088A54                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0008A2DC                            		even
0008A2DC                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
00091C5C 00                         		even
00091C5C                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
00093470 00                         		even
00093470                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
00094216                            		even
00094216                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000955CE                            		even
000955CE                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
00095EC6 00                         		even
00095EC6                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
00095EC6                            extralifejingle_Header:
00095EC6                            	smpsHeaderStartSong 1
00095EC8 0703                       	smpsHeaderChan      $07, $03
00095ECA 0100                       	smpsHeaderTempo     $01, $00
00095ECC                            
00095ED0 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
00095ED4 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
00095ED8 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
00095EDC 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
00095EE0 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
00095EE4 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
00095EFA                            
00095EFA                            ; DAC Data
00095EFA                            extralifejingle_DAC:
00095EFA 807F 55                    	dc.b	nRst, $7F, $55
00095EFD E4                         	smpsFade
00095EFE                            ; PSG1 Data
00095EFE                            extralifejingle_PSG1:
00095EFE                            ; PSG2 Data
00095EFE                            extralifejingle_PSG2:
00095EFE                            ; PSG3 Data
00095EFE                            extralifejingle_PSG3:
00095EFE F2                         	smpsStop
00095EFF                            
00095EFF                            ; FM1 Data
00095EFF                            extralifejingle_FM1:
00095EFF EF00                       	smpsSetvoice        $00
00095F01 E616                       	smpsAlterVol        $16
00095F03 E0C0                       	smpsPan             panCenter, $00
00095F05 A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
00095F11 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
00095F15 F2                         	smpsStop
00095F16                            
00095F16                            ; FM2 Data
00095F16                            extralifejingle_FM2:
00095F16 EF01                       	smpsSetvoice        $01
00095F18 E616                       	smpsAlterVol        $16
00095F1A E0C0                       	smpsPan             panCenter, $00
00095F1C B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
00095F28 A206 800C                  	dc.b	nA2, $06, nRst, $0C
00095F2C F2                         	smpsStop
00095F2D                            
00095F2D                            ; FM3 Data
00095F2D                            extralifejingle_FM3:
00095F2D EF01                       	smpsSetvoice        $01
00095F2F E616                       	smpsAlterVol        $16
00095F31 E0C0                       	smpsPan             panCenter, $00
00095F33 AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
00095F3F B106 800C                  	dc.b	nC4, $06, nRst, $0C
00095F43 F2                         	smpsStop
00095F44                            
00095F44                            ; FM4 Data
00095F44                            extralifejingle_FM4:
00095F44 EF02                       	smpsSetvoice        $02
00095F46 E0C0                       	smpsPan             panCenter, $00
00095F48 8001                       	dc.b	nRst, $01
00095F4A E616                       	smpsAlterVol        $16
00095F4C BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
00095F58 C106 800C                  	dc.b	nE5, $06, nRst, $0C
00095F5C F2                         	smpsStop
00095F5D                            
00095F5D                            ; FM5 Data
00095F5D                            extralifejingle_FM5:
00095F5D EF03                       	smpsSetvoice        $03
00095F5F E602                       	smpsAlterVol        $02
00095F61 E0C0                       	smpsPan             panCenter, $00
00095F63 8001                       	dc.b	nRst, $01
00095F65 EF05                       	smpsSetvoice        $05
00095F67 E60A                       	smpsAlterVol        $0A
00095F69 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
00095F75 B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
00095F81 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
00095F8D C1C4 80                    	dc.b	nE5, nG5, nRst
00095F90 F2                         	smpsStop
00095F91                            
00095F91                            ; FM6 Data
00095F91                            extralifejingle_FM6:
00095F91 EF04                       	smpsSetvoice        $04
00095F93 E607                       	smpsAlterVol        $07
00095F95 E0C0                       	smpsPan             panCenter, $00
00095F97 8001                       	dc.b	nRst, $01
00095F99 EF06                       	smpsSetvoice        $06
00095F9B E6F9                       	smpsAlterVol        $F9
00095F9D A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
00095FA4 F2                         	smpsStop
00095FA5                            
00095FA5                            extralifejingle_Voices:
00095FA5                            ;	Voice $00
00095FA5                            ;	$3A
00095FA5                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095FA5                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095FA5                            	smpsVcAlgorithm     $02
00095FA5                            	smpsVcFeedback      $07
00095FA5                            	smpsVcUnusedBits    $00
00095FA5                            	smpsVcDetune        $03, $07, $07, $03
00095FA5                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095FA5                            	smpsVcRateScale     $00, $00, $00, $00
00095FA5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095FA5                            	smpsVcAmpMod        $00, $00, $00, $00
00095FA5                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095FA5                            	smpsVcDecayRate2    $00, $00, $00, $00
00095FA5                            	smpsVcDecayLevel    $00, $00, $00, $00
00095FA5                            	smpsVcReleaseRate   $05, $03, $03, $03
00095FBE                            
00095FBE                            ;	Voice $01
00095FBE                            ;	$3A
00095FBE                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095FBE                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095FBE                            	smpsVcAlgorithm     $02
00095FBE                            	smpsVcFeedback      $07
00095FBE                            	smpsVcUnusedBits    $00
00095FBE                            	smpsVcDetune        $03, $07, $07, $03
00095FBE                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095FBE                            	smpsVcRateScale     $00, $00, $00, $00
00095FBE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095FBE                            	smpsVcAmpMod        $00, $00, $00, $00
00095FBE                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095FBE                            	smpsVcDecayRate2    $00, $00, $00, $00
00095FBE                            	smpsVcDecayLevel    $00, $00, $00, $00
00095FBE                            	smpsVcReleaseRate   $05, $03, $03, $03
00095FD7                            
00095FD7                            ;	Voice $02
00095FD7                            ;	$3A
00095FD7                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095FD7                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095FD7                            	smpsVcAlgorithm     $02
00095FD7                            	smpsVcFeedback      $07
00095FD7                            	smpsVcUnusedBits    $00
00095FD7                            	smpsVcDetune        $03, $07, $07, $03
00095FD7                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095FD7                            	smpsVcRateScale     $00, $00, $00, $00
00095FD7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095FD7                            	smpsVcAmpMod        $00, $00, $00, $00
00095FD7                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095FD7                            	smpsVcDecayRate2    $00, $00, $00, $00
00095FD7                            	smpsVcDecayLevel    $00, $00, $00, $00
00095FD7                            	smpsVcReleaseRate   $05, $03, $03, $03
00095FF0                            
00095FF0                            ;	Voice $03
00095FF0                            ;	$00
00095FF0                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
00095FF0                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
00095FF0                            	smpsVcAlgorithm     $00
00095FF0                            	smpsVcFeedback      $00
00095FF0                            	smpsVcUnusedBits    $00
00095FF0                            	smpsVcDetune        $00, $00, $00, $00
00095FF0                            	smpsVcCoarseFreq    $00, $00, $0E, $01
00095FF0                            	smpsVcRateScale     $00, $00, $00, $00
00095FF0                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
00095FF0                            	smpsVcAmpMod        $00, $00, $00, $00
00095FF0                            	smpsVcDecayRate1    $10, $10, $1C, $1A
00095FF0                            	smpsVcDecayRate2    $00, $00, $00, $00
00095FF0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00095FF0                            	smpsVcReleaseRate   $08, $08, $0E, $0D
00096009                            
00096009                            ;	Voice $04
00096009                            ;	$03
00096009                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
00096009                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
00096009                            	smpsVcAlgorithm     $03
00096009                            	smpsVcFeedback      $00
00096009                            	smpsVcUnusedBits    $00
00096009                            	smpsVcDetune        $03, $04, $04, $06
00096009                            	smpsVcCoarseFreq    $01, $00, $00, $06
00096009                            	smpsVcRateScale     $00, $00, $00, $00
00096009                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00096009                            	smpsVcAmpMod        $00, $00, $00, $00
00096009                            	smpsVcDecayRate1    $01, $02, $05, $0E
00096009                            	smpsVcDecayRate2    $06, $04, $00, $01
00096009                            	smpsVcDecayLevel    $01, $01, $06, $0A
00096009                            	smpsVcReleaseRate   $08, $06, $0A, $0A
00096022                            
00096022                            ;	Voice $05
00096022                            ;	$34
00096022                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
00096022                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
00096022                            	smpsVcAlgorithm     $04
00096022                            	smpsVcFeedback      $06
00096022                            	smpsVcUnusedBits    $00
00096022                            	smpsVcDetune        $07, $00, $07, $03
00096022                            	smpsVcCoarseFreq    $04, $01, $0E, $03
00096022                            	smpsVcRateScale     $00, $01, $00, $02
00096022                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
00096022                            	smpsVcAmpMod        $00, $00, $00, $00
00096022                            	smpsVcDecayRate1    $08, $07, $07, $14
00096022                            	smpsVcDecayRate2    $00, $00, $00, $00
00096022                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
00096022                            	smpsVcReleaseRate   $07, $07, $04, $06
0009603B                            
0009603B                            ;	Voice $06
0009603B                            ;	$30
0009603B                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
0009603B                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
0009603B                            	smpsVcAlgorithm     $00
0009603B                            	smpsVcFeedback      $06
0009603B                            	smpsVcUnusedBits    $00
0009603B                            	smpsVcDetune        $00, $00, $00, $00
0009603B                            	smpsVcCoarseFreq    $01, $00, $00, $01
0009603B                            	smpsVcRateScale     $01, $00, $00, $02
0009603B                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
0009603B                            	smpsVcAmpMod        $00, $00, $00, $00
0009603B                            	smpsVcDecayRate1    $14, $10, $0D, $0F
0009603B                            	smpsVcDecayRate2    $08, $05, $18, $08
0009603B                            	smpsVcDecayLevel    $01, $00, $00, $06
0009603B                            	smpsVcReleaseRate   $08, $0F, $00, $0F
00096054                            
00096054                            
00096054                            		even
00096054                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000968AC 00                         		even
000968AC                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
00096DCC                            		even
00096DCC                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
0009708E 00                         		even
0009708E                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
00097EE6                            		even
00097EE6                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
00098132 00                         		even
00098132                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
00098468 00                         		even
00098468                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
00098614 00                         		even
00098614                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
00098822 00                         		even
00098822                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
00098B06 00                         		even
00098B06                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
00099236 00                         		even
00099236                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
00099304                            		even
00099304                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
00099772 00                         		even
00099772                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
0009A268                            		even
0009A268                            Music96:		incbin	"sound/music/Mus96 - TTZ BF US.bin"
0009AE4A                            		even
0009AE4A                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
0009C150 00                         		even
0009C150                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
0009C150                            PasswordEntry_Header:
0009C150                            	smpsHeaderStartSong 3
0009C152 0603                       	smpsHeaderChan      $06, $03
0009C154 0105                       	smpsHeaderTempo     $01, $05
0009C156                            
0009C15A 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
0009C15E 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
0009C162 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
0009C166 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
0009C16A 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
0009C180                            
0009C180                            ; FM1 Data
0009C180                            PasswordEntry_FM1:
0009C180 EF00                       	smpsSetvoice        $00
0009C187                            
0009C187                            PasswordEntry_Jump00:
0009C187 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
0009C193 C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
0009C19F C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
0009C1AB C918 CB                    	dc.b	nC6, $18, nD6
0009C1AE F6FF D7                    	smpsJump            PasswordEntry_Jump00
0009C1B1                            
0009C1B1                            ; FM2 Data
0009C1B1                            PasswordEntry_FM2:
0009C1B1 EF01                       	smpsSetvoice        $01
0009C1B3                            
0009C1B3                            PasswordEntry_Jump03:
0009C1B3 B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
0009C1BF AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
0009C1CB AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
0009C1D7 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
0009C1E1 F6FF D0                    	smpsJump            PasswordEntry_Jump03
0009C1E4                            
0009C1E4                            ; FM3 Data
0009C1E4                            PasswordEntry_FM3:
0009C1E4 E080                       	smpsPan             panLeft, $00
0009C1E6 EF02                       	smpsSetvoice        $02
0009C1E8                            
0009C1E8                            PasswordEntry_Jump02:
0009C1E8 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
0009C1F4 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
0009C200 C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
0009C20C C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
0009C218 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
0009C224 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
0009C230 BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
0009C23C C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
0009C248 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
0009C254 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C260 BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C268 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
0009C26B                            
0009C26B                            ; FM4 Data
0009C26B                            PasswordEntry_FM4:
0009C26B E040                       	smpsPan             panRight, $00
0009C26D EF02                       	smpsSetvoice        $02
0009C26F                            
0009C26F                            PasswordEntry_Jump01:
0009C26F C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
0009C27B BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
0009C287 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
0009C293 C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
0009C29F BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
0009C2AB BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
0009C2B7 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C2C3 BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
0009C2CF BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
0009C2DB BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C2E7 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C2EF F6FF 7E                    	smpsJump            PasswordEntry_Jump01
0009C2F2                            
0009C2F2                            ; FM5 Data
0009C2F2                            PasswordEntry_FM5:
0009C2F2 EF00                       	smpsSetvoice        $00
0009C2F4 E1FB                       	smpsAlterNote       $FB
0009C2F6 800C                       	dc.b	nRst, $0C
0009C2F8 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
0009C2FB                            
0009C2FB                            ; PSG1 Data
0009C2FB                            PasswordEntry_PSG1:
0009C2FB C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C307 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
0009C313 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C31F CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
0009C32B C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
0009C337 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
0009C343 C810 C408                  	dc.b	nB5, $10, nG5, $08
0009C347 F6FF B2                    	smpsJump            PasswordEntry_PSG1
0009C34A                            
0009C34A                            ; PSG2 Data
0009C34A                            PasswordEntry_PSG2:
0009C34A E1FF                       	smpsAlterNote       $FF
0009C34C 800C                       	dc.b	nRst, $0C
0009C34E F6FF AB                    	smpsJump            PasswordEntry_PSG1
0009C351                            
0009C351                            ; PSG3 Data
0009C351                            PasswordEntry_PSG3:
0009C351 F502                       	smpsPSGvoice        fTone_02
0009C353 F3E7                       	smpsPSGform         $E7
0009C355 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C361 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C36D C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
0009C374 F503                       	smpsPSGvoice        fTone_03
0009C376 C5                         	dc.b	nAb5
0009C377 F6FF D8                    	smpsJump            PasswordEntry_PSG3
0009C37A                            
0009C37A                            ; DAC Data
0009C37A                            PasswordEntry_DAC:
0009C37A 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C386 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C38E F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
0009C393 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C39F 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
0009C3A7                            
0009C3A7                            PasswordEntry_Loop00:
0009C3A7 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C3B3 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C3BB F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
0009C3C0 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
0009C3CC 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
0009C3D6 F6FF A2                    	smpsJump            PasswordEntry_DAC
0009C3D9                            
0009C3D9                            PasswordEntry_Voices:
0009C3D9                            ;	Voice $00
0009C3D9                            ;	$04
0009C3D9                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
0009C3D9                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
0009C3D9                            	smpsVcAlgorithm     $04
0009C3D9                            	smpsVcFeedback      $00
0009C3D9                            	smpsVcUnusedBits    $00
0009C3D9                            	smpsVcDetune        $00, $00, $00, $00
0009C3D9                            	smpsVcCoarseFreq    $00, $01, $01, $02
0009C3D9                            	smpsVcRateScale     $00, $00, $00, $00
0009C3D9                            	smpsVcAttackRate    $12, $1F, $10, $1F
0009C3D9                            	smpsVcAmpMod        $00, $00, $00, $00
0009C3D9                            	smpsVcDecayRate1    $04, $0B, $03, $09
0009C3D9                            	smpsVcDecayRate2    $05, $00, $00, $03
0009C3D9                            	smpsVcDecayLevel    $00, $02, $0F, $0E
0009C3D9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C3F2                            
0009C3F2                            ;	Voice $01
0009C3F2                            ;	$39
0009C3F2                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
0009C3F2                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
0009C3F2                            	smpsVcAlgorithm     $01
0009C3F2                            	smpsVcFeedback      $07
0009C3F2                            	smpsVcUnusedBits    $00
0009C3F2                            	smpsVcDetune        $00, $04, $06, $00
0009C3F2                            	smpsVcCoarseFreq    $00, $00, $01, $03
0009C3F2                            	smpsVcRateScale     $01, $01, $01, $00
0009C3F2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C3F2                            	smpsVcAmpMod        $00, $00, $00, $00
0009C3F2                            	smpsVcDecayRate1    $09, $09, $11, $10
0009C3F2                            	smpsVcDecayRate2    $00, $00, $00, $06
0009C3F2                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
0009C3F2                            	smpsVcReleaseRate   $08, $08, $08, $08
0009C40B                            
0009C40B                            ;	Voice $02
0009C40B                            ;	$2C
0009C40B                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
0009C40B                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
0009C40B                            	smpsVcAlgorithm     $04
0009C40B                            	smpsVcFeedback      $05
0009C40B                            	smpsVcUnusedBits    $00
0009C40B                            	smpsVcDetune        $00, $02, $00, $04
0009C40B                            	smpsVcCoarseFreq    $00, $03, $00, $01
0009C40B                            	smpsVcRateScale     $00, $00, $00, $00
0009C40B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C40B                            	smpsVcAmpMod        $00, $00, $00, $00
0009C40B                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
0009C40B                            	smpsVcDecayRate2    $05, $00, $05, $04
0009C40B                            	smpsVcDecayLevel    $08, $08, $05, $04
0009C40B                            	smpsVcReleaseRate   $06, $05, $06, $05
0009C424                            
0009C424                            
0009C424                            		even		
0009C424                            ; ---------------------------------------------------------------------------
0009C424                            ; Sound	effect pointers
0009C424                            ; ---------------------------------------------------------------------------
0009C424                            SoundIndex:
0009C424 0000 0000                  ptr_sndA0:	dc.l SoundA0
0009C428 0000 0000                  ptr_sndA1:	dc.l SoundA1
0009C42C 0000 0000                  ptr_sndA2:	dc.l SoundA2
0009C430 0000 0000                  ptr_sndA3:	dc.l SoundA3
0009C434 0000 0000                  ptr_sndA4:	dc.l SoundA4
0009C438 0000 0000                  ptr_sndA5:	dc.l SoundA5
0009C43C 0000 0000                  ptr_sndA6:	dc.l SoundA6
0009C440 0000 0000                  ptr_sndA7:	dc.l SoundA7
0009C444 0000 0000                  ptr_sndA8:	dc.l SoundA8
0009C448 0000 0000                  ptr_sndA9:	dc.l SoundA9
0009C44C 0000 0000                  ptr_sndAA:	dc.l SoundAA
0009C450 0000 0000                  ptr_FireShield:	dc.l SoundAB
0009C454 0000 0000                  ptr_sndAC:	dc.l SoundAC
0009C458 0000 0000                  ptr_sndAD:	dc.l SoundAD
0009C45C 0000 0000                  ptr_sndAE:	dc.l SoundAE
0009C460 0000 0000                  ptr_sndAF:	dc.l SoundAF
0009C464 0000 0000                  ptr_sndB0:	dc.l SoundB0
0009C468 0000 0000                  ptr_sndB1:	dc.l SoundB1
0009C46C 0000 0000                  ptr_sndB2:	dc.l SoundB2
0009C470 0000 0000                  ptr_sndB3:	dc.l SoundB3
0009C474 0000 0000                  ptr_sndB4:	dc.l SoundB4
0009C478 0000 0000                  ptr_sndB5:	dc.l SoundB5
0009C47C 0000 0000                  ptr_sndB6:	dc.l SoundB6
0009C480 0000 0000                  ptr_sndB7:	dc.l SoundB7
0009C484 0000 0000                  ptr_sndB8:	dc.l SoundB8
0009C488 0000 0000                  ptr_sndB9:	dc.l SoundB9
0009C48C 0000 0000                  ptr_sndBA:	dc.l SoundBA
0009C490 0000 0000                  ptr_sndBB:	dc.l SoundBB
0009C494 0000 0000                  ptr_sndBC:	dc.l SoundBC
0009C498 0000 0000                  ptr_sndBD:	dc.l SoundBD
0009C49C 0000 0000                  ptr_sndBE:	dc.l SoundBE
0009C4A0 0000 0000                  ptr_sndBF:	dc.l SoundBF
0009C4A4 0000 0000                  ptr_sndC0:	dc.l SoundC0
0009C4A8 0000 0000                  ptr_sndC1:	dc.l SoundC1
0009C4AC 0000 0000                  ptr_sndC2:	dc.l SoundC2
0009C4B0 0000 0000                  ptr_sndC3:	dc.l SoundC3
0009C4B4 0000 0000                  ptr_sndC4:	dc.l SoundC4
0009C4B8 0000 0000                  ptr_sndC5:	dc.l SoundC5
0009C4BC 0000 0000                  ptr_sndC6:	dc.l SoundC6
0009C4C0 0000 0000                  ptr_sndC7:	dc.l SoundC7
0009C4C4 0000 0000                  ptr_sndC8:	dc.l SoundC8
0009C4C8 0000 0000                  ptr_sndC9:	dc.l SoundC9
0009C4CC 0000 0000                  ptr_sndCA:	dc.l SoundCA
0009C4D0 0000 0000                  ptr_sndCB:	dc.l SoundCB
0009C4D4 0000 0000                  ptr_sndCC:	dc.l SoundCC
0009C4D8 0000 0000                  ptr_sndCD:	dc.l SoundCD
0009C4DC 0000 0000                  ptr_sndCE:	dc.l SoundCE
0009C4E0 0000 0000                  ptr_sndCF:	dc.l SoundCF
0009C4E4                            ptr_sndend
0009C4E4                            ; ---------------------------------------------------------------------------
0009C4E4                            ; Special sound effect pointers
0009C4E4                            ; ---------------------------------------------------------------------------
0009C4E4                            SpecSoundIndex:
0009C4E4 0000 0000                  ptr_sndD0:	dc.l SoundD0
0009C4E8 0000 0000                  ptr_sndD1:	dc.l SoundD1
0009C4EC 0000 0000                  ptr_sndD2:	dc.l SoundD2
0009C4F0 0000 0000                  ptr_sndD3:	dc.l SoundD3
0009C4F4 0000 0000                  ptr_sndD4:	dc.l SoundD4
0009C4F8 0000 0000                  ptr_sndD5:	dc.l SoundD5
0009C4FC                            ptr_specend
0009C4FC                            SoundA0:	include	"sound/sfx/Jump.asm"
0009C4FC                            SndA0_Jump_Header:
0009C4FC                            	smpsHeaderStartSong 1
0009C4FE 01                         	smpsHeaderTempoSFX  $01
0009C4FF 01                         	smpsHeaderChanSFX   $01
0009C500                            
0009C506                            
0009C506                            ; PSG2 Data
0009C506                            SndA0_Jump_PSG2:
0009C506 F500                       	smpsPSGvoice        $00
0009C508 9E05                       	dc.b	nF2, $05
0009C50F A315                       	dc.b	nBb2, $15
0009C511 F2                         	smpsStop
0009C512                            
0009C512                            ; Song seems to not use any FM voices
0009C512                            SndA0_Jump_Voices:
0009C512                            SndA0_Jump_Voices:
0009C512                            		even
0009C512                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
0009C53C                            		even
0009C53C                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
0009C53C                            SndDF_Header:
0009C53C                            	smpsHeaderStartSong 3
0009C53E 01                         	smpsHeaderTempoSFX  $01
0009C53F 01                         	smpsHeaderChanSFX   $01
0009C540                            
0009C546                            
0009C546                            ; FM5 Data
0009C546                            SndDF_FM5:
0009C546 EF00                       	smpsSetvoice        $00
0009C548                            
0009C548                            SndDF_Loop00:
0009C548 F800 00                    	smpsCall            SndDF_Call00
0009C54B E905                       	smpsAlterPitch $05
0009C54D E608                       	smpsFMAlterVol      $08
0009C54F F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
0009C554 E9EC                       	smpsAlterPitch $EC
0009C556 E6E0                       	smpsFMAlterVol      $E0
0009C558 F2                         	smpsStop
0009C559                            
0009C559                            SndDF_Call00:
0009C559 9902                       	dc.b	nC2, $02
0009C55B E901                       	smpsAlterPitch $01
0009C55D F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
0009C562 E9F6                       	smpsAlterPitch $F6
0009C564 E3                         	smpsReturn
0009C565                            
0009C565                            SndDF_Voices:
0009C565                            ;	Voice $00
0009C565                            ;	$07
0009C565                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
0009C565                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
0009C565                            	smpsVcAlgorithm     $07
0009C565                            	smpsVcFeedback      $00
0009C565                            	smpsVcUnusedBits    $00
0009C565                            	smpsVcDetune        $00, $00, $00, $00
0009C565                            	smpsVcCoarseFreq    $04, $05, $04, $04
0009C565                            	smpsVcRateScale     $00, $00, $00, $00
0009C565                            	smpsVcAttackRate    $15, $15, $1F, $1F
0009C565                            	smpsVcAmpMod        $00, $00, $00, $00
0009C565                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C565                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C565                            	smpsVcDecayLevel    $01, $01, $01, $01
0009C565                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C57E                            		even
0009C57E                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0009C5B0                            		even
0009C5B0                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
0009C5F4 00                         		even
0009C5F4                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
0009C5F4                            SndD2_Header:
0009C5F4                            	smpsHeaderStartSong 3
0009C5F6 01                         	smpsHeaderTempoSFX  $01
0009C5F7 01                         	smpsHeaderChanSFX   $01
0009C5F8                            
0009C5FE                            
0009C5FE                            ; FM4 Data
0009C5FE                            SndD2_FM4:
0009C5FE EF00                       	smpsSetvoice        $00
0009C605 C645                       	dc.b	nA5, $45
0009C607 F2                         	smpsStop
0009C608                            
0009C608                            SndD2_Voices:
0009C608                            ;	Voice $00
0009C608                            ;	$04
0009C608                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009C608                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
0009C608                            	smpsVcAlgorithm     $04
0009C608                            	smpsVcFeedback      $00
0009C608                            	smpsVcUnusedBits    $00
0009C608                            	smpsVcDetune        $04, $00, $00, $02
0009C608                            	smpsVcCoarseFreq    $07, $07, $02, $07
0009C608                            	smpsVcRateScale     $00, $00, $00, $00
0009C608                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C608                            	smpsVcAmpMod        $00, $00, $00, $00
0009C608                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009C608                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009C608                            	smpsVcDecayLevel    $00, $01, $00, $01
0009C608                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C622 00                         		even
0009C622                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0009C652                            		even
0009C652                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
0009C682                            		even
0009C682                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
0009C6B6                            		even
0009C6B6                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
0009C6C8                            		even
0009C6C8                            SoundAA:	include	"sound/sfx/Splash.asm"
0009C6C8                            SndA2_Header:
0009C6C8                            	smpsHeaderStartSong 3
0009C6CA 01                         	smpsHeaderTempoSFX  $01
0009C6CB 02                         	smpsHeaderChanSFX   $02
0009C6CC                            
0009C6D8                            
0009C6D8                            ; FM3 Data
0009C6D8                            SndA2_FM3:
0009C6D8 EF00                       	smpsSetvoice        $00
0009C6DF 8106                       	dc.b	nC0, $06
0009C6E1                            
0009C6E1                            SndA2_Loop00:
0009C6E1 810E                       	dc.b	nC0, $0E
0009C6E3 E60E                       	smpsAlterVol      $0E
0009C6E5 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
0009C6EA F2                         	smpsStop
0009C6EB                            
0009C6EB                            ; FM4 Data
0009C6EB                            SndA2_FM4:
0009C6EB EF01                       	smpsSetvoice        $01
0009C6ED A606 14                    	dc.b	nCs3, $06, $14
0009C6F0 F2                         	smpsStop
0009C6F1                            
0009C6F1                            SndA2_Voices:
0009C6F1                            ;	Voice $00
0009C6F1                            ;	$F9
0009C6F1                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
0009C6F1                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
0009C6F1                            	smpsVcAlgorithm     $01
0009C6F1                            	smpsVcFeedback      $07
0009C6F1                            	smpsVcUnusedBits    $03
0009C6F1                            	smpsVcDetune        $03, $01, $03, $02
0009C6F1                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C6F1                            	smpsVcRateScale     $00, $00, $00, $00
0009C6F1                            	smpsVcAttackRate    $10, $1F, $1F, $1C
0009C6F1                            	smpsVcAmpMod        $00, $00, $00, $00
0009C6F1                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C6F1                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C6F1                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C6F1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C70A                            
0009C70A                            ;	Voice $01
0009C70A                            ;	$00
0009C70A                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
0009C70A                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
0009C70A                            	smpsVcAlgorithm     $00
0009C70A                            	smpsVcFeedback      $00
0009C70A                            	smpsVcUnusedBits    $00
0009C70A                            	smpsVcDetune        $00, $00, $00, $00
0009C70A                            	smpsVcCoarseFreq    $00, $02, $03, $00
0009C70A                            	smpsVcRateScale     $00, $00, $03, $03
0009C70A                            	smpsVcAttackRate    $1F, $1F, $1F, $19
0009C70A                            	smpsVcAmpMod        $00, $00, $00, $00
0009C70A                            	smpsVcDecayRate1    $0F, $14, $11, $12
0009C70A                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
0009C70A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C70A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C724 00                         		even
0009C724                            SoundAB:	include	"sound/sfx/FireShield.asm"
0009C724                            Sound_3E_Header:
0009C724                            	smpsHeaderStartSong 3
0009C726 01                         	smpsHeaderTempoSFX  $01
0009C727 01                         	smpsHeaderChanSFX   $01
0009C728                            
0009C72E                            
0009C72E                            ; FM5 Data
0009C72E                            Sound_3E_3F_40_41_FM5:
0009C72E EF00                       	smpsSetvoice        $00
0009C730 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009C735 F2                         	smpsStop
0009C736                            
0009C736                            Sound_3E_Voices:
0009C736                            ;	Voice $00
0009C736                            ;	$0C
0009C736                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
0009C736                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
0009C736                            	smpsVcAlgorithm     $04
0009C736                            	smpsVcFeedback      $01
0009C736                            	smpsVcUnusedBits    $00
0009C736                            	smpsVcDetune        $03, $03, $02, $00
0009C736                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009C736                            	smpsVcRateScale     $00, $00, $00, $00
0009C736                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
0009C736                            	smpsVcAmpMod        $00, $00, $00, $00
0009C736                            	smpsVcDecayRate1    $00, $04, $00, $0A
0009C736                            	smpsVcDecayRate2    $0C, $08, $12, $08
0009C736                            	smpsVcDecayLevel    $00, $0B, $00, $0F
0009C736                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C74F                            
0009C74F                            
0009C750 00                         		even
0009C750                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
0009C784                            		even
0009C784                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
0009C7BA                            		even
0009C7BA                            SoundAE:	include	"sound/sfx/Fireball.asm"
0009C7BA                            Sound_70_Header:
0009C7BA                            	smpsHeaderStartSong 3
0009C7BC 01                         	smpsHeaderTempoSFX  $01
0009C7BD 02                         	smpsHeaderChanSFX   $02
0009C7BE                            
0009C7CA                            
0009C7CA                            ; FM5 Data
0009C7CA                            Sound_70_FM5:
0009C7CA EF00                       	smpsSetvoice        $00
0009C7CC 8001                       	dc.b	nRst, $01
0009C7D3 8306 8502                  	dc.b	nD0, $06, nE0, $02
0009C7D7 F2                         	smpsStop
0009C7D8                            
0009C7D8                            ; PSG3 Data
0009C7D8                            Sound_70_PSG3:
0009C7D8 F500                       	smpsPSGvoice        sTone_0D
0009C7DA 800B                       	dc.b	nRst, $0B
0009C7DC F3E7                       	smpsPSGform         $E7
0009C7DE C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
0009C7E1                            
0009C7E1                            Sound_70_Loop00:
0009C7E1 02                         	dc.b	$02
0009C7E2 EC01                       	smpsPSGAlterVol     $01
0009C7E4 E7                         	dc.b	smpsNoAttack
0009C7E5 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
0009C7EA F2                         	smpsStop
0009C7EB                            
0009C7EB                            Sound_70_Voices:
0009C7EB                            ;	Voice $00
0009C7EB                            ;	$FA
0009C7EB                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
0009C7EB                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
0009C7EB                            	smpsVcAlgorithm     $02
0009C7EB                            	smpsVcFeedback      $07
0009C7EB                            	smpsVcUnusedBits    $03
0009C7EB                            	smpsVcDetune        $00, $00, $00, $00
0009C7EB                            	smpsVcCoarseFreq    $05, $00, $03, $02
0009C7EB                            	smpsVcRateScale     $00, $00, $00, $00
0009C7EB                            	smpsVcAttackRate    $13, $0F, $11, $12
0009C7EB                            	smpsVcAmpMod        $00, $00, $00, $00
0009C7EB                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C7EB                            	smpsVcDecayRate2    $02, $06, $0F, $06
0009C7EB                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C7EB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C804                            
0009C804                            
0009C804                            		even
0009C804                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
0009C832                            		even
0009C832                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
0009C864                            		even
0009C864                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
0009C890                            		even
0009C890                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
0009C8E0                            		even
0009C8E0                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0009C92A                            		even
0009C92A                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0009C986                            		even
0009C986                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
0009C9B4                            		even
0009C9B4                            SoundB6:	include	"sound/sfx/Spikes.asm"
0009C9B4                            SpikesSFX_Header:
0009C9B4                            	smpsHeaderStartSong 3
0009C9B6 01                         	smpsHeaderTempoSFX  $01
0009C9B7 02                         	smpsHeaderChanSFX   $02
0009C9B8                            
0009C9C4                            
0009C9C4                            ; FM6 Data
0009C9C4                            SndB7_FM4:
0009C9C4 EF01                       	smpsSetvoice        $01
0009C9CB B105                       	dc.b	nC4, $05
0009C9CD F1                         	smpsModOn
0009C9CE E10A                       	smpsAlterNote       $0A
0009C9D0 E601                       	smpsAlterVol        $01
0009C9D2 F2                         	smpsStop
0009C9D3                            
0009C9D3                            ; FM5 Data
0009C9D3                            SndB7_FM5:
0009C9D3 8005                       	dc.b	nRst, $05			 
0009C9D5 EF00                       	smpsSetvoice        $00
0009C9D7 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
0009C9DD F2                         	smpsStop
0009C9DE                            
0009C9DE                            SndB7_Voices:
0009C9DE                            ;	Voice $00
0009C9DE                            ;	$34
0009C9DE                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
0009C9DE                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
0009C9DE                            	smpsVcAlgorithm     $04
0009C9DE                            	smpsVcFeedback      $06
0009C9DE                            	smpsVcUnusedBits    $00
0009C9DE                            	smpsVcDetune        $0D, $00, $00, $00
0009C9DE                            	smpsVcCoarseFreq    $07, $01, $0F, $09
0009C9DE                            	smpsVcRateScale     $00, $00, $00, $00
0009C9DE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C9DE                            	smpsVcAmpMod        $00, $00, $00, $00
0009C9DE                            	smpsVcDecayRate1    $0F, $09, $11, $0C
0009C9DE                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
0009C9DE                            	smpsVcDecayLevel    $03, $05, $01, $03
0009C9DE                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0009C9F7                            
0009C9F7                            ;	Voice $01
0009C9F7                            ;	$FA
0009C9F7                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C9F7                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C9F7                            	smpsVcAlgorithm     $02
0009C9F7                            	smpsVcFeedback      $07
0009C9F7                            	smpsVcUnusedBits    $03
0009C9F7                            	smpsVcDetune        $03, $01, $03, $02
0009C9F7                            	smpsVcCoarseFreq    $00, $09, $0A, $01
0009C9F7                            	smpsVcRateScale     $00, $00, $00, $00
0009C9F7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C9F7                            	smpsVcAmpMod        $00, $00, $00, $00
0009C9F7                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C9F7                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C9F7                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C9F7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CA10                            		even
0009CA10                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
0009CA4C                            		even
0009CA4C                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
0009CA4C                            SndBD_Header:
0009CA4C                            	smpsHeaderStartSong 3
0009CA4E 01                         	smpsHeaderTempoSFX  $01
0009CA4F 01                         	smpsHeaderChanSFX   $01
0009CA50                            
0009CA56                            
0009CA56                            ; FM6 Data
0009CA56                            SndBD_FM3:
0009CA56 EF00                       	smpsSetvoice        $00
0009CA58                            
0009CA58                            SndBD_Loop00:
0009CA58 C009                       	dc.b	nEb5, $09
0009CA5A F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
0009CA5F F2                         	smpsStop
0009CA60                            
0009CA60                            SndBD_Voices:
0009CA60                            ;	Voice $00
0009CA60                            ;	$02
0009CA60                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
0009CA60                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
0009CA60                            	smpsVcAlgorithm     $02
0009CA60                            	smpsVcFeedback      $00
0009CA60                            	smpsVcUnusedBits    $00
0009CA60                            	smpsVcDetune        $00, $02, $05, $00
0009CA60                            	smpsVcCoarseFreq    $01, $00, $01, $02
0009CA60                            	smpsVcRateScale     $00, $00, $00, $00
0009CA60                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
0009CA60                            	smpsVcAmpMod        $00, $00, $00, $00
0009CA60                            	smpsVcDecayRate1    $13, $14, $0A, $10
0009CA60                            	smpsVcDecayRate2    $00, $00, $00, $01
0009CA60                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009CA60                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CA7A 00                         		even
0009CA7A                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
0009CA7A                            Sound_59_Header:
0009CA7A                            	smpsHeaderStartSong 3
0009CA7C 01                         	smpsHeaderTempoSFX  $01
0009CA7D 04                         	smpsHeaderChanSFX   $04
0009CA7E                            
0009CA96                            
0009CA96                            ; FM3 Data
0009CA96                            Sound_59_FM3:
0009CA96 E040                       	smpsPan             panRight, $00
0009CA98 8002                       	dc.b	nRst, $02
0009CA9A F600 00                    	smpsJump            Sound_59_FM4
0009CA9D                            
0009CA9D                            ; FM5 Data
0009CA9D                            Sound_59_FM5:
0009CA9D E080                       	smpsPan             panLeft, $00
0009CA9F 8001                       	dc.b	nRst, $01
0009CAA1                            
0009CAA1                            ; FM4 Data
0009CAA1                            Sound_59_FM4:
0009CAA1 EF00                       	smpsSetvoice        $00
0009CAA8 8110                       	dc.b	nC0, $10
0009CAAA F2                         	smpsStop
0009CAAB                            
0009CAAB                            ; PSG3 Data
0009CAAB                            Sound_59_PSG3:
0009CAB0 F3E7                       	smpsPSGform         $E7
0009CAB2                            
0009CAB2                            Sound_59_Loop00:
0009CAB2 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
0009CAB5 EC03                       	smpsPSGAlterVol     $03
0009CAB7 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
0009CABC F2                         	smpsStop
0009CABD                            
0009CABD                            Sound_59_Voices:
0009CABD                            ;	Voice $00
0009CABD                            ;	$F9
0009CABD                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009CABD                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009CABD                            	smpsVcAlgorithm     $01
0009CABD                            	smpsVcFeedback      $07
0009CABD                            	smpsVcUnusedBits    $03
0009CABD                            	smpsVcDetune        $03, $01, $03, $02
0009CABD                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009CABD                            	smpsVcRateScale     $00, $00, $00, $00
0009CABD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CABD                            	smpsVcAmpMod        $00, $00, $00, $00
0009CABD                            	smpsVcDecayRate1    $02, $09, $18, $05
0009CABD                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009CABD                            	smpsVcDecayLevel    $02, $04, $02, $01
0009CABD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CAD6                            
0009CAD6                            
0009CAD6                            		even
0009CAD6                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0009CAFE                            		even
0009CAFE                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
0009CB2A                            		even
0009CB2A                            SoundBC:	include	"sound/sfx/DashRelease.asm"
0009CB2A                            Sound_B6_Header:
0009CB2A                            	smpsHeaderStartSong 3
0009CB2C 01                         	smpsHeaderTempoSFX  $01
0009CB2D 02                         	smpsHeaderChanSFX   $02
0009CB2E                            
0009CB3A                            
0009CB3A                            ; FM5 Data
0009CB3A                            Sound_B6_FM5:
0009CB3A EF00                       	smpsSetvoice        $00
0009CB41 CD0F                       	dc.b	nE6, $0F
0009CB43 F2                         	smpsStop
0009CB44                            
0009CB44                            ; PSG3 Data
0009CB44                            Sound_B6_PSG3:
0009CB44 F507                       	smpsPSGvoice        sTone_1D
0009CB46 8006                       	dc.b	nRst, $06
0009CB4D F3E7                       	smpsPSGform         $E7
0009CB4F CD4F                       	dc.b	nE6, $4F
0009CB51 F2                         	smpsStop
0009CB52                            
0009CB52                            Sound_B6_Voices:
0009CB52                            ;	Voice $00
0009CB52                            ;	$3D
0009CB52                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
0009CB52                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
0009CB52                            	smpsVcAlgorithm     $05
0009CB52                            	smpsVcFeedback      $07
0009CB52                            	smpsVcUnusedBits    $00
0009CB52                            	smpsVcDetune        $00, $00, $00, $00
0009CB52                            	smpsVcCoarseFreq    $00, $00, $03, $09
0009CB52                            	smpsVcRateScale     $00, $00, $00, $00
0009CB52                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CB52                            	smpsVcAmpMod        $00, $00, $00, $00
0009CB52                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
0009CB52                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009CB52                            	smpsVcDecayLevel    $02, $04, $02, $01
0009CB52                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CB6B                            
0009CB6B                            
0009CB6C 00                         		even
0009CB6C                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0009CBC0                            		even
0009CBC0                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
0009CBFA                            		even
0009CBFA                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0009CC6C                            		even
0009CC6C                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
0009CC9A                            		even
0009CC9A                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
0009CCD4                            		even
0009CCD4                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
0009CCD4                            SndC1_Header:
0009CCD4                            	smpsHeaderStartSong 3
0009CCD6 01                         	smpsHeaderTempoSFX  $01
0009CCD7 01                         	smpsHeaderChanSFX   $01
0009CCD8                            
0009CCDE                            
0009CCDE                            ; FM4 Data
0009CCDE                            SndC1_FM4:
0009CCDE EF00                       	smpsSetvoice        $00
0009CCE0 D506 40                    	dc.b	nC7, $06, $40
0009CCE3 F2                         	smpsStop
0009CCE4                            
0009CCE4                            SndC1_Voices:
0009CCE4                            ;	Voice $00
0009CCE4                            ;	$38
0009CCE4                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
0009CCE4                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
0009CCE4                            	smpsVcAlgorithm     $00
0009CCE4                            	smpsVcFeedback      $07
0009CCE4                            	smpsVcUnusedBits    $00
0009CCE4                            	smpsVcDetune        $00, $00, $00, $00
0009CCE4                            	smpsVcCoarseFreq    $00, $00, $00, $01
0009CCE4                            	smpsVcRateScale     $00, $00, $00, $00
0009CCE4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CCE4                            	smpsVcAmpMod        $00, $00, $00, $00
0009CCE4                            	smpsVcDecayRate1    $0B, $09, $09, $09
0009CCE4                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CCE4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009CCE4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CCFE 00                         		even
0009CCFE                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
0009CD78                            		even
0009CD78                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0009CDA0                            		even
0009CDA0                            SoundC5:	include	"sound/sfx/Cash Register.asm"
0009CDA0                            Sound_B0_Header:
0009CDA0                            	smpsHeaderStartSong 3
0009CDA2 01                         	smpsHeaderTempoSFX  $01
0009CDA3 03                         	smpsHeaderChanSFX   $03
0009CDA4                            
0009CDB6                            
0009CDB6                            ; FM5 Data
0009CDB6                            Sound_B0_FM5:
0009CDB6 EF00                       	smpsSetvoice        $00
0009CDB8 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
0009CDBE F2                         	smpsStop
0009CDBF                            
0009CDBF                            ; FM4 Data
0009CDBF                            Sound_B0_FM4:
0009CDBF EF01                       	smpsSetvoice        $01
0009CDC1 8012 C655                  	dc.b	nRst, $12, nA5, $55
0009CDC5 F2                         	smpsStop
0009CDC6                            
0009CDC6                            ; FM3 Data
0009CDC6                            Sound_B0_FM3:
0009CDC6 EF02                       	smpsSetvoice        $02
0009CDC8 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
0009CDCF F2                         	smpsStop
0009CDD0                            
0009CDD0                            Sound_B0_Voices:
0009CDD0                            ;	Voice $00
0009CDD0                            ;	$3B
0009CDD0                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
0009CDD0                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
0009CDD0                            	smpsVcAlgorithm     $03
0009CDD0                            	smpsVcFeedback      $07
0009CDD0                            	smpsVcUnusedBits    $00
0009CDD0                            	smpsVcDetune        $00, $00, $00, $00
0009CDD0                            	smpsVcCoarseFreq    $06, $03, $02, $03
0009CDD0                            	smpsVcRateScale     $02, $00, $00, $00
0009CDD0                            	smpsVcAttackRate    $16, $1A, $1A, $18
0009CDD0                            	smpsVcAmpMod        $00, $00, $00, $00
0009CDD0                            	smpsVcDecayRate1    $10, $0A, $0E, $17
0009CDD0                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CDD0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009CDD0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CDE9                            
0009CDE9                            ;	Voice $01
0009CDE9                            ;	$04
0009CDE9                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009CDE9                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
0009CDE9                            	smpsVcAlgorithm     $04
0009CDE9                            	smpsVcFeedback      $00
0009CDE9                            	smpsVcUnusedBits    $00
0009CDE9                            	smpsVcDetune        $04, $07, $07, $03
0009CDE9                            	smpsVcCoarseFreq    $09, $07, $02, $07
0009CDE9                            	smpsVcRateScale     $00, $00, $00, $00
0009CDE9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CDE9                            	smpsVcAmpMod        $00, $00, $00, $00
0009CDE9                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009CDE9                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009CDE9                            	smpsVcDecayLevel    $00, $01, $00, $01
0009CDE9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CE02                            
0009CE02                            ;	Voice $02
0009CE02                            ;	$3C
0009CE02                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
0009CE02                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
0009CE02                            	smpsVcAlgorithm     $04
0009CE02                            	smpsVcFeedback      $07
0009CE02                            	smpsVcUnusedBits    $00
0009CE02                            	smpsVcDetune        $00, $00, $00, $00
0009CE02                            	smpsVcCoarseFreq    $00, $00, $00, $0F
0009CE02                            	smpsVcRateScale     $00, $00, $00, $00
0009CE02                            	smpsVcAttackRate    $1C, $18, $1A, $1F
0009CE02                            	smpsVcAmpMod        $00, $00, $00, $00
0009CE02                            	smpsVcDecayRate1    $0E, $1A, $11, $17
0009CE02                            	smpsVcDecayRate2    $10, $14, $0F, $00
0009CE02                            	smpsVcDecayLevel    $02, $09, $09, $01
0009CE02                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CE1B                            
0009CE1B                            
0009CE1C 00                         		even
0009CE1C                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
0009CE5E                            		even
0009CE5E                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
0009CE8C                            		even
0009CE8C                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
0009CE9E                            		even
0009CE9E                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
0009CECC                            		even
0009CECC                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
0009CEFA                            		even
0009CEFA                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
0009CF46                            		even
0009CF46                            SoundCC:	include	"sound/sfx/Spring.asm"
0009CF46                            Spring_Header:
0009CF46                            	smpsHeaderStartSong 1
0009CF48 01                         	smpsHeaderTempoSFX  $01
0009CF49 01                         	smpsHeaderChanSFX   $01
0009CF4A                            
0009CF50                            
0009CF50                            ; FM6 Data
0009CF50                            Spring_FM6:
0009CF50 EF00                       	smpsSetvoice        $00
0009CF52 8001                       	dc.b	nRst, $01
0009CF59 B006                       	dc.b	nB3, $06
0009CF5B F4                         	smpsModOff
0009CF5C EF01                       	smpsSetvoice        $01
0009CF5E                            
0009CF5E                            Spring_Loop00:
0009CF5E BD02                       	dc.b	nC5, $02
0009CF60 E601                       	smpsAlterVol      $01
0009CF62 E7                         	dc.b	smpsNoAttack
0009CF63 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
0009CF68 F2                         	smpsStop
0009CF69                            
0009CF69                            Spring_Voices:
0009CF69                            ;	Voice $00
0009CF69                            ;	$20
0009CF69                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009CF69                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
0009CF69                            	smpsVcAlgorithm     $00
0009CF69                            	smpsVcFeedback      $04
0009CF69                            	smpsVcUnusedBits    $00
0009CF69                            	smpsVcDetune        $03, $03, $03, $03
0009CF69                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009CF69                            	smpsVcRateScale     $02, $02, $03, $03
0009CF69                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CF69                            	smpsVcAmpMod        $00, $00, $00, $00
0009CF69                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CF69                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CF69                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CF69                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CF82                            
0009CF82                            ;	Voice $01
0009CF82                            ;	$20
0009CF82                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
0009CF82                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
0009CF82                            	smpsVcAlgorithm     $00
0009CF82                            	smpsVcFeedback      $04
0009CF82                            	smpsVcUnusedBits    $00
0009CF82                            	smpsVcDetune        $03, $03, $03, $03
0009CF82                            	smpsVcCoarseFreq    $01, $00, $03, $01
0009CF82                            	smpsVcRateScale     $02, $02, $02, $02
0009CF82                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CF82                            	smpsVcAmpMod        $00, $00, $00, $00
0009CF82                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CF82                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CF82                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CF82                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CF9C 00                         		even
0009CF9C                            SoundCD:	include	"sound/sfx/Beep.asm"
0009CF9C                            Snd99_Header:
0009CF9C                            	smpsHeaderStartSong 3
0009CF9E 01                         	smpsHeaderTempoSFX  $01
0009CF9F 01                         	smpsHeaderChanSFX   $01
0009CFA0                            
0009CFA6                            
0009CFA6                            ; FM4 Data
0009CFA6                            Snd99_FM4:
0009CFA6 EF00                       	smpsSetvoice        $00
0009CFA8 B502                       	dc.b	nE4, $02
0009CFAA F2                         	smpsStop
0009CFAB                            
0009CFAB                            Snd99_Voices:
0009CFAB                            ;	Voice $00
0009CFAB                            ;	$07
0009CFAB                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CFAB                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
0009CFAB                            	smpsVcAlgorithm     $07
0009CFAB                            	smpsVcFeedback      $00
0009CFAB                            	smpsVcUnusedBits    $00
0009CFAB                            	smpsVcDetune        $00, $00, $00, $00
0009CFAB                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
0009CFAB                            	smpsVcRateScale     $00, $00, $00, $00
0009CFAB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CFAB                            	smpsVcAmpMod        $00, $00, $00, $00
0009CFAB                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CFAB                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CFAB                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CFAB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CFC4                            		even
0009CFC4                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
0009CFF2                            		even
0009CFF2                            SoundCF:	include	"sound/sfx/Signpost.asm"
0009CFF2                            SignpostCD_Header:
0009CFF2                            	smpsHeaderStartSong 3
0009CFF4 01                         	smpsHeaderTempoSFX  $01
0009CFF5 02                         	smpsHeaderChanSFX   $02
0009CFF6                            
0009D002                            
0009D002                            ; FM5 Data
0009D002                            Snd9D_FM5:
0009D002 8004                       	dc.b	nRst, $04
0009D004                            
0009D004                            ; FM4 Data
0009D004                            Snd9D_FM4:
0009D004 EF00                       	smpsSetvoice        $00
0009D006                            
0009D006                            Snd9D_Loop00:
0009D006 B405                       	dc.b	nEb4, $05
0009D008 E604                       	smpsFMAlterVol      $04
0009D00A F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
0009D00F F2                         	smpsStop
0009D010                            
0009D010                            Snd9D_Voices:
0009D010                            ;	Voice $00
0009D010                            ;	$F4
0009D010                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
0009D010                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
0009D010                            	smpsVcAlgorithm     $04
0009D010                            	smpsVcFeedback      $06
0009D010                            	smpsVcUnusedBits    $03
0009D010                            	smpsVcDetune        $00, $00, $00, $00
0009D010                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
0009D010                            	smpsVcRateScale     $00, $00, $00, $00
0009D010                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D010                            	smpsVcAmpMod        $00, $00, $00, $00
0009D010                            	smpsVcDecayRate1    $0B, $0B, $00, $00
0009D010                            	smpsVcDecayRate2    $08, $05, $00, $00
0009D010                            	smpsVcDecayLevel    $0F, $0F, $00, $00
0009D010                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D02A 00                         		even
0009D02A                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
0009D064                            		even
0009D064                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
0009D064                            Sound_41_Header:
0009D064                            	smpsHeaderStartSong 3
0009D066 01                         	smpsHeaderTempoSFX  $01
0009D067 01                         	smpsHeaderChanSFX   $01
0009D068                            
0009D06E                            	
0009D06E                            Sound41_FM5:
0009D06E EF00                       	smpsSetvoice        $00
0009D070 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009D075 F2                         	smpsStop
0009D076                            
0009D076                            Sound_41_Voices:
0009D076                            ;	Voice $00
0009D076                            ;	$36
0009D076                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009D076                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
0009D076                            	smpsVcAlgorithm     $06
0009D076                            	smpsVcFeedback      $06
0009D076                            	smpsVcUnusedBits    $00
0009D076                            	smpsVcDetune        $00, $00, $01, $00
0009D076                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
0009D076                            	smpsVcRateScale     $00, $00, $00, $00
0009D076                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D076                            	smpsVcAmpMod        $00, $00, $00, $00
0009D076                            	smpsVcDecayRate1    $00, $00, $00, $00
0009D076                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
0009D076                            	smpsVcDecayLevel    $00, $00, $00, $00
0009D076                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D08F                            
0009D08F                            
0009D090 00                         		even
0009D090                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
0009D090                            Snd9B_Header:
0009D090                            	smpsHeaderStartSong 3
0009D092 01                         	smpsHeaderTempoSFX  $01
0009D093 01                         	smpsHeaderChanSFX   $01
0009D094                            
0009D09A                            
0009D09A                            ; FM5 Data
0009D09A                            Snd9B_FM5:
0009D09A EF00                       	smpsSetvoice        $00
0009D09C 8001                       	dc.b	nRst, $01
0009D0A3 CA25                       	dc.b	nCs6, $25
0009D0A5 F4                         	smpsModOff
0009D0A6                            
0009D0A6                            Snd9B_Loop00:
0009D0A6 E7                         	dc.b	smpsNoAttack
0009D0A7 E601                       	smpsFMAlterVol      $01
0009D0A9 D102                       	dc.b	nAb6, $02
0009D0AB F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
0009D0B0 F2                         	smpsStop
0009D0B1                            
0009D0B1                            Snd9B_Voices:
0009D0B1                            ;	Voice $00
0009D0B1                            ;	$3C
0009D0B1                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
0009D0B1                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
0009D0B1                            	smpsVcAlgorithm     $04
0009D0B1                            	smpsVcFeedback      $07
0009D0B1                            	smpsVcUnusedBits    $00
0009D0B1                            	smpsVcDetune        $00, $00, $04, $00
0009D0B1                            	smpsVcCoarseFreq    $02, $02, $04, $00
0009D0B1                            	smpsVcRateScale     $00, $00, $00, $00
0009D0B1                            	smpsVcAttackRate    $15, $1F, $1F, $1F
0009D0B1                            	smpsVcAmpMod        $00, $00, $00, $00
0009D0B1                            	smpsVcDecayRate1    $00, $00, $1F, $00
0009D0B1                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D0B1                            	smpsVcDecayLevel    $00, $00, $00, $00
0009D0B1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D0CA                            
0009D0CA                            
0009D0CA                            		even		
0009D0CA                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
0009D162                            		even
0009D162                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
0009D16E                            		even				
0009D16E                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
0009D1AA                            		even			
0009D1AA                            		; Don't let Sega sample cross $8000-byte boundary
0009D1AA                            		; (DAC driver doesn't switch banks automatically)
000A0000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000A6978                            SegaPCM_End
000A6978                            		even
000A6978                            
000A6978                            
000A6978                            
000A6978                            
000A6978                            			include "_inc\Sonic 2 Options.asm"
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            ; Common menu screen subroutine for transferring text to RAM
000A6978                            
000A6978                            ; ARGUMENTS:
000A6978                            ; d0 = starting art tile
000A6978                            ; a1 = data source
000A6978                            ; a2 = destination
000A6978                            ;
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            MenuScreen:
000A6978 103C 0000                  		move.b	#bgm_Fade,d0
000A697C 4EB8 1254                  		jsr	PlaySound_Special ; fade out music
000A6980 4EB8 2186                  		jsr	PaletteFadeOut
000A6984 46FC 2700                  		move	#$2700,sr
000A6988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000A698C 0200 00BF                  		andi.b	#$BF,d0
000A6990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000A6996 4EB8 1184                  		jsr	ClearScreen
000A699A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000A69A0 3CBC 8004                  		move.w	#$8004,(a6)
000A69A4 3CBC 8230                  		move.w	#$8230,(a6)
000A69A8 3CBC 8407                  		move.w	#$8407,(a6)
000A69AC 3CBC 8230                  		move.w	#$8230,(a6)
000A69B0 3CBC 8700                  		move.w	#$8700,(a6)
000A69B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000A69B8 3CBC 9001                  		move.w	#$9001,(a6)
000A69BC                            
000A69BC                            
000A69BC 43F8 D000                  		lea	(v_objspace).w,a1
000A69C0 7000                       		moveq	#0,d0
000A69C2 323C 07FF                  		move.w	#$7FF,d1
000A69C6                            
000A69C6                            MenuScreen_ClrObjRam:
000A69C6 22C0                       		move.l	d0,(a1)+
000A69C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000A69CC                            
000A69CC                            ; ===========================================================================
000A69CC                            
000A69CC 31FC C800 C8FC             		ResetDMAQueue
000A69D2                            
000A69DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000A69E2 4EB8 1302                  		jsr	NemDec
000A69F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000A69F6 4EB8 1302                  		jsr	NemDec
000A69FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000A6A00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000A6A06 303C 6000                  		move.w	#$6000,d0
000A6A0A 4EB8 188C                  		jsr	EniDec
000A6A0E                            
000A6A0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000A6A22                            
000A6A22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000A6A26                            
000A6A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6A26                            
000A6A26                            ; sub_8FBE:
000A6A26                            MenuScreenTextToRAM:
000A6A26 7200                       		moveq	#0,d1
000A6A28 1219                       		move.b	(a1)+,d1
000A6A2A                            
000A6A2A                            MenuScreenTextToRAM_Cont:
000A6A2A 1019                       		move.b	(a1)+,d0
000A6A2C 34C0                       		move.w	d0,(a2)+
000A6A2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000A6A32 4E75                       		rts
000A6A34                            ; End of function MenuScreenTextToRAM
000A6A34                            
000A6A34                            ; ===========================================================================
000A6A34                            ; loc_8FCC:
000A6A34                            MenuScreen_Options:
000A6A34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6A3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A40 303C 0070                  		move.w	#$70,d0
000A6A44 4EB8 188C                  		jsr	EniDec
000A6A48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000A6A4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A54 303C 2070                  		move.w	#$2070,d0
000A6A58 4EB8 188C                  		jsr	EniDec
000A6A5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6A64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A74 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A78 4238 F711                  		clr.b	($FFFFF711).w		
000A6A7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000A6A80                            ;-------------------------------------------------------------------------------
000A6A80 4278 F7B8                  		clr.w	($FFFFF7B8).w
000A6A84 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2
000A6A8A 6100 0000                  		bsr.w	Dynamic_Menu
000A6A8E                            ;-------------------------------------------------------------------------------
000A6A8E 7014                       		moveq	#palid_Options,d0
000A6A90 4EB8 2430                  		jsr		PalLoad1
000A6A94 103C 0098                  		move.b	#$98,d0
000A6A98 4EB8 1254                  		jsr	PlaySound_Special ; play options music
000A6A9C 42B8 F700                  		clr.l	(v_screenposx).w
000A6AA0 42B8 F704                  		clr.l	(v_screenposy).w
000A6AA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AAA 4EB8 3A04                  		jsr	WaitForVBla
000A6AAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000A6AB2 0000 0040                  		ori.b	#$40,d0
000A6AB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000A6ABC 4EB8 20E0                  		jsr	PaletteFadeIn
000A6AC0                            ; loc_9060:
000A6AC0                            OptionScreen_Main:
000A6AC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AC6 4EB8 3A04                  		jsr	WaitForVBla		
000A6ACA 4EB8 10A6                  		jsr	ReadJoypads			
000A6ACE 46FC 2700                  		move	#$2700,sr
000A6AD2 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6AD6 6100 0000                  		bsr.w	OptionScreen_Controls			
000A6ADA 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6ADE 46FC 2300                  		move	#$2300,sr
000A6AE2 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2		
000A6AE8 6100 0000                  		bsr.w	Dynamic_Menu		
000A6AEC 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000A6AF2                            
000A6AF2 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000A6AF4 60CA                       		bra.s	OptionScreen_Main
000A6AF6                            ; ===========================================================================
000A6AF6                            ; loc_909A:
000A6AF6                            OptionScreen_Select:
000A6AF6 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000A6AFA 6600                       		bne.s	OptionScreen_Select_Not1P
000A6AFC 7000                       		moveq	#0,d0
000A6AFE 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000A6B04 4E75                       		rts
000A6B06                            ; ===========================================================================
000A6B06                            ; loc_90B6:
000A6B06                            OptionScreen_Select_Not1P:
000A6B06 5300                       		subq.b	#1,d0
000A6B08 6600                       		bne.s	OptionScreen_Select_Other
000A6B0A 60B4                       		bra.s	OptionScreen_Main
000A6B0C                            ; ===========================================================================
000A6B0C                            ; loc_90D8:
000A6B0C                            OptionScreen_Select_Other:
000A6B0C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; => SegaScreen
000A6B12 4E75                       		rts
000A6B14                            
000A6B14                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B14                            
000A6B14                            ;sub_90E0:
000A6B14                            OptionScreen_Controls:
000A6B14 7400                       		moveq	#0,d2
000A6B16 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000A6B1A 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000A6B1E 0800 0000                  		btst	#0,d0			; is up pressed?
000A6B22 6700                       		beq.s	Option_Controls_Down	; if not, branch
000A6B24 5302                       		subq.b	#1,d2					; move up 1 selection
000A6B26 6400                       		bcc.s	Option_Controls_Down
000A6B28 143C 0002                  		move.b	#2,d2
000A6B2C                            
000A6B2C                            Option_Controls_Down:
000A6B2C 0800 0001                  		btst	#1,d0			; is down pressed?
000A6B30 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000A6B32 5202                       		addq.b	#1,d2					; move down 1 selection
000A6B34 0C02 0003                  		cmpi.b	#3,d2
000A6B38 6500                       		blo.s	Option_Controls_Refresh
000A6B3A 7400                       		moveq	#0,d2
000A6B3C                            
000A6B3C                            Option_Controls_Refresh:
000A6B3C 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000A6B40 E54A                       		lsl.w	#2,d2
000A6B42 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000A6B46 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000A6B4A 3411                       		move.w	(a1),d2
000A6B4C 0800 0002                  		btst	#2,d0				; is left pressed?
000A6B50 6700                       		beq.s	Option_Controls_Right		; if not, branch
000A6B52 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000A6B54 6400                       		bcc.s	Option_Controls_Right
000A6B56 1403                       		move.b	d3,d2
000A6B58                            
000A6B58                            Option_Controls_Right:
000A6B58 0800 0003                  		btst	#3,d0			; is right pressed?
000A6B5C 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000A6B5E 5202                       		addq.b	#1,d2						; add 1 to sound test
000A6B60 B403                       		cmp.b	d3,d2
000A6B62 6300                       		bls.s	Option_Controls_Button_A
000A6B64 7400                       		moveq	#0,d2
000A6B66                            
000A6B66                            Option_Controls_Button_A:
000A6B66 0800 0006                  		btst	#6,d0				; is button A pressed?
000A6B6A 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000A6B6C 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000A6B70 B403                       		cmp.b	d3,d2
000A6B72 6300                       		bls.s	Option_Controls_Refresh2
000A6B74 7400                       		moveq	#0,d2
000A6B76                            
000A6B76                            Option_Controls_Refresh2:
000A6B76 3282                       		move.w	d2,(a1)
000A6B78                            
000A6B78                            Option_Controls_NoMove:
000A6B78 4E75                       		rts
000A6B7A                            ; End of function OptionScreen_Controls
000A6B7A                            
000A6B7A                            ; ===========================================================================
000A6B7A                            ; word_917A:
000A6B7A                            OptionScreen_Choices:
000A6B7A 09FF FFBE                  		dc.l ($A-1)<<24|($FFFFBE&$FFFFFF)
000A6B7E 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000A6B82 01FF FF84                  		dc.l (2-1)<<24|($FFFF84&$FFFFFF)
000A6B86                            		even
000A6B86                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B86                            
000A6B86                            
000A6B86                            OptionScreen_DrawSelected:
000A6B86 6100 0000                  		bsr.w	loc_9268
000A6B8A 7200                       		moveq	#0,d1
000A6B8C 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6B90 E749                       		lsl.w	#3,d1
000A6B92 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6B98 47F3 1000                  		lea	(a3,d1.w),a3
000A6B9C 303C 6000                  		move.w	#$6000,d0
000A6BA0 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000A6BA6 225B                       		movea.l	(a3)+,a1
000A6BA8 6100 FE7C                  		bsr.w	MenuScreenTextToRAM
000A6BAC 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000A6BB2 7200                       		moveq	#0,d1
000A6BB4 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6BBA 6700                       		beq.s	loc_9186
000A6BBC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BC0 E549                       		lsl.w	#2,d1
000A6BC2 43FA FFB6                  		lea	OptionScreen_Choices(pc),a1
000A6BC6 2271 1000                  		movea.l	(a1,d1.w),a1
000A6BCA 3211                       		move.w	(a1),d1
000A6BCC E549                       		lsl.w	#2,d1
000A6BCE                            
000A6BCE                            loc_9186:		
000A6BCE 2274 1000                  		movea.l	(a4,d1.w),a1
000A6BD2 6100 FE52                  		bsr.w	MenuScreenTextToRAM
000A6BD6                            		;cmpi.b	#2,(Options_menu_box).w
000A6BD6                            		;bne.s	loc2_9186
000A6BD6                            		;lea	($FFFF00C2).l,a2
000A6BD6                            		;bsr.w	loc_9296
000A6BD6                            
000A6BD6                            loc2_9186:		
000A6BD6 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6BDC 201B                       		move.l	(a3)+,d0
000A6BDE 7215                       		moveq	#$15,d1
000A6BE0 7407                       		moveq	#7,d2
000A6BE2 4EF8 12D8                  		jmp	TilemapToVRAM
000A6BE6                            ; ===========================================================================
000A6BE6                            
000A6BE6                            OptionScreen_DrawUnselected:
000A6BE6 6100 0000                  		bsr.w	loc_9268
000A6BEA 7200                       		moveq	#0,d1
000A6BEC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BF0 E749                       		lsl.w	#3,d1
000A6BF2 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6BF8 47F3 1000                  		lea	(a3,d1.w),a3
000A6BFC 7000                       		moveq	#0,d0
000A6BFE 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000A6C04 225B                       		movea.l	(a3)+,a1
000A6C06 6100 FE1E                  		bsr.w	MenuScreenTextToRAM
000A6C0A 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000A6C10 7200                       		moveq	#0,d1
000A6C12 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C18 6700                       		beq.s	loc2_91F8
000A6C1A 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C1E E549                       		lsl.w	#2,d1
000A6C20 43FA FF58                  		lea	OptionScreen_Choices(pc),a1
000A6C24 2271 1000                  		movea.l	(a1,d1.w),a1
000A6C28 3211                       		move.w	(a1),d1
000A6C2A E549                       		lsl.w	#2,d1
000A6C2C                            
000A6C2C                            loc2_91F8		
000A6C2C 2274 1000                  		movea.l	(a4,d1.w),a1
000A6C30 6100 FDF4                  		bsr.w	MenuScreenTextToRAM
000A6C34                            		;cmpi.b	#2,(Options_menu_box).w
000A6C34                            		;bne.s	loc3_91F8
000A6C34                            		;lea	($FFFF0222).l,a2
000A6C34                            		;bsr.w	loc_9296
000A6C34                            
000A6C34                            loc3_91F8		
000A6C34 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000A6C3A 201B                       		move.l	(a3)+,d0
000A6C3C 7215                       		moveq	#$15,d1
000A6C3E 7407                       		moveq	#7,d2
000A6C40 4EF8 12D8                  		jmp	TilemapToVRAM
000A6C44                            ; ===========================================================================
000A6C44                            
000A6C44                            loc_9268:
000A6C44 49F9 0000 0000             		lea	(off_92D2).l,a4
000A6C4A 4A38 FFF8                  		tst.b	(v_megadrive).w
000A6C4E 6A00                       		bpl.s	loc2_9268
000A6C50 49F9 0000 0000             		lea	(off_92DE).l,a4
000A6C56                            
000A6C56                            loc2_9268:
000A6C56 4A38 FF8C                  		tst.b	(Options_menu_box).w
000A6C5A 6700                       		beq.s	loc3_9268
000A6C5C 49F9 0000 0000             		lea	(off_92EA).l,a4
000A6C62                            
000A6C62                            loc3_9268:
000A6C62 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C68 6600                       		bne.s	loc4_9268		; rts
000A6C6A 49F9 0000 0000             		lea	(off_92F2).l,a4
000A6C70                            
000A6C70                            loc4_9268:
000A6C70 4E75                       		rts
000A6C72                            ; ===========================================================================
000A6C72                            
000A6C72                            loc_9296:
000A6C72 4E75                       		rts
000A6C74                            
000A6C74                            Dynamic_Menu:
000A6C74 47F8 F7B8                  	lea	($FFFFF7B8).w,a3
000A6C78                            
000A6C78                            loc_3FF30:
000A6C78 3C1A                       	move.w	(a2)+,d6	; loop counter. We start off with 00 the first time.
000A6C7A                            
000A6C7A                            loc_3FF32:
000A6C7A 5313                       	subq.b	#1,(a3)		; decrement timer
000A6C7C 6400                       	bcc.s	loc_3FF78	; if time remains, branch ahead
000A6C7E 7000                       	moveq	#0,d0
000A6C80 102B 0001                  	move.b	1(a3),d0	; load animation counter from animation data table
000A6C84 B02A 0006                  	cmp.b	6(a2),d0
000A6C88 6500                       	blo.s	loc_3FF48
000A6C8A 7000                       	moveq	#0,d0
000A6C8C 1740 0001                  	move.b	d0,1(a3)	; set animation counter
000A6C90                            
000A6C90                            loc_3FF48:
000A6C90 522B 0001                  	addq.b	#1,1(a3)	; increment animation counter
000A6C94 1692                       	move.b	(a2),(a3)	; set timer
000A6C96 6A00                       	bpl.s	loc_3FF56
000A6C98 D040                       	add.w	d0,d0
000A6C9A 16B2 0009                  	move.b	9(a2,d0.w),(a3)
000A6C9E                            
000A6C9E                            loc_3FF56:
000A6C9E 1032 0008                  	move.b	8(a2,d0.w),d0
000A6CA2 EB48                       	lsl.w	#5,d0
000A6CA4 342A 0004                  	move.w	4(a2),d2
000A6CA8 2212                       	move.l	(a2),d1
000A6CAA 0281 00FF FFFF             	andi.l	#$FFFFFF,d1		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
000A6CB0 D280                       	add.l	d0,d1
000A6CB2 7600                       	moveq	#0,d3
000A6CB4 162A 0007                  	move.b	7(a2),d3
000A6CB8 E94B                       	lsl.w	#4,d3
000A6CBA 4EB9 0000 142A             	jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
000A6CC0                            
000A6CC0                            loc_3FF78:
000A6CC0 102A 0006                  	move.b	6(a2),d0
000A6CC4 4A12                       	tst.b	(a2)
000A6CC6 6A00                       	bpl.s	loc_3FF82
000A6CC8 D000                       	add.b	d0,d0
000A6CCA                            
000A6CCA                            loc_3FF82:
000A6CCA 5200                       	addq.b	#1,d0
000A6CCC 0240 00FE                  	andi.w	#$FE,d0
000A6CD0 45F2 0008                  	lea	8(a2,d0.w),a2
000A6CD4 544B                       	addq.w	#2,a3
000A6CD6 51CE FFA2                  	dbf	d6,loc_3FF32
000A6CDA 4E75                       	rts
000A6CDC                            ; ------------------------------------------------------------------------
000A6CDC                            ; MENU ANIMATION SCRIPT
000A6CDC                            ; ------------------------------------------------------------------------
000A6CDC                            ;word_87C6:
000A6CDC                            Anim_SonicMilesBG:
000A6CDC 0000                       	dc.w   0
000A6CDE                            ; Sonic/Miles animated background
000A6CDE 0000 0000                  	dc.l $FF<<24|Sonic_Miles_Spr
000A6CE2 0020                       	dc.w $20
000A6CE4 06                         	dc.b 6
000A6CE5 0A                         	dc.b $A
000A6CE6 00C7                       	dc.b   0,$C7    ; "SONIC"
000A6CE8 0A05                       	dc.b  $A,  5	; 2
000A6CEA 1405                       	dc.b $14,  5	; 4
000A6CEC 1EC7                       	dc.b $1E,$C7	; "TAILS"
000A6CEE 1405                       	dc.b $14,  5	; 8
000A6CF0 0A05                       	dc.b  $A,  5	; 10	
000A6CF2                            ; ===========================================================================
000A6CF2                            ; off_92BA:
000A6CF2                            OptScrBoxData:
000A6CF2                            
000A6CF2 0000 0000                  		dc.l TextOptScr_PlayerSelect
000A6CF6 4192                       		dc.w $4192
000A6CF8 0003                       		dc.w 3
000A6CFA 0000 0000                  		dc.l TextOptScr_LivesSystem
000A6CFE 4592                       		dc.w $4592
000A6D00 0003                       		dc.w 3
000A6D02 0000 0000                  		dc.l TextOptScr_SoundTest
000A6D06 4992                       		dc.w $4992
000A6D08 0003                       		dc.w 3
000A6D0A                            
000A6D0A                            off_92D2:
000A6D0A 0000 0000                  		dc.l TextOptScr_Default
000A6D0E 0000 0000                  		dc.l TextOptScr_Original
000A6D12 0000 0000                  		dc.l TextOptScr_Beta
000A6D16 0000 0000                  		dc.l TextOptScr_Midnight
000A6D1A 0000 0000                  		dc.l TextOptScr_C2
000A6D1E 0000 0000                  		dc.l TextOptScr_Clackers
000A6D22 0000 0000                  		dc.l TextOptScr_RHS
000A6D26 0000 0000                  		dc.l TextOptScr_Socket
000A6D2A 0000 0000                  		dc.l TextOptScr_Cringe
000A6D2E 0000 0000                  		dc.l TextOptScr_Dark		
000A6D32                            off_92DE:
000A6D32 0000 0000                  		dc.l TextOptScr_Default
000A6D36 0000 0000                  		dc.l TextOptScr_Original
000A6D3A 0000 0000                  		dc.l TextOptScr_Beta
000A6D3E 0000 0000                  		dc.l TextOptScr_Midnight
000A6D42 0000 0000                  		dc.l TextOptScr_C2
000A6D46 0000 0000                  		dc.l TextOptScr_Clackers
000A6D4A 0000 0000                  		dc.l TextOptScr_RHS
000A6D4E 0000 0000                  		dc.l TextOptScr_Socket
000A6D52 0000 0000                  		dc.l TextOptScr_Cringe
000A6D56 0000 0000                  		dc.l TextOptScr_Dark	
000A6D5A                            off_92EA:
000A6D5A 0000 0000                  		dc.l TextOptScr_On
000A6D5E 0000 0000                  		dc.l TextOptScr_Off
000A6D62                            off_92F2:
000A6D62 0000 0000                  		dc.l TextOptScr_Null
000A6D66 0000 0000                  		dc.l TextOptScr_Null2
000A6D6A                            ; ===========================================================================
000A6D6A                            
000A6E89                            ; ============================================================================
000A6E89                            
000A6E89                            Sonic_Miles_Spr:incbin  "artunc/Sonic and Miles text.bin"
000A738A 00                         		even
000A738A                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000A7536                            		even
000A7536                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000A7AA0                            		even
000A7AA0                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000A7B20                            		even
000A7B20                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000A7B4C                            		even
000A7B4C                            		even
000A7B4C                            
000A7B4C                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
001253D0                                        even
001253D0                            
001253D0                            Art_Dust:	incbin	artunc\spindust.bin
00126D10                            
00126D10                            ; ===============================================================
00126D10                            ; ---------------------------------------------------------------
00126D10                            ; Error handling module
00126D10                            ; ---------------------------------------------------------------
00126D10                             
00126D10 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00126D14 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
00126D1E 01                                 dc.b    1               ; extended stack frame
00126D20 00                                 even
00126D20                             
00126D20 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00126D24 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00126D32 01                                 dc.b    1               ; extended stack frame
00126D34 00                                 even
00126D34                             
00126D34 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00126D38 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
00126D4C 00                                 dc.b    0               ; extended stack frame
00126D4E 00                                 even
00126D4E                             
00126D4E 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00126D52 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
00126D5E 00                                 dc.b    0               ; extended stack frame
00126D60 00                                 even
00126D60                             
00126D60 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00126D64 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00126D74 00                                 dc.b    0               ; extended stack frame
00126D76 00                                 even
00126D76                             
00126D76 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
00126D7A 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
00126D8C 00                                 dc.b    0               ; extended stack frame
00126D8E 00                                 even
00126D8E                             
00126D8E 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00126D92 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00126DA6 00                                 dc.b    0               ; extended stack frame
00126DA8 00                                 even
00126DA8                             
00126DA8 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
00126DAC 5452 4143 4500                     dc.b    "TRACE",0           ; text
00126DB2 00                                 dc.b    0               ; extended stack frame
00126DB4 00                                 even
00126DB4                             
00126DB4 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00126DB8 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
00126DCB 00                                 dc.b    0               ; extended stack frame
00126DCC                                    even
00126DCC                             
00126DCC 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00126DD0 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00126DE3 00                                 dc.b    0               ; extended stack frame
00126DE4                                    even
00126DE4                             
00126DE4 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00126DE8 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00126DF8 00                                 dc.b    0               ; extended stack frame
00126DFA 00                                 even
00126DFA                             
00126DFA                            ErrorHandler:   incbin  "ErrorHandler.bin"
001275DE                            
001275DE                            ; end of 'ROM'
001275DE                            		even
001275DE                            EndOfRom:
001275DE                            
001275DE                            
